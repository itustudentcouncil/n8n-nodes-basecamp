// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/privilegedaccessmanager/v1/privilegedaccessmanager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.privilegedaccessmanager.v1";

/** Request message for `CheckOnboardingStatus` method. */
export interface CheckOnboardingStatusRequest {
  /**
   * Required. The resource for which the onboarding status should be checked.
   * Should be in one of the following formats:
   *
   * * `projects/{project-number|project-id}/locations/{region}`
   * * `folders/{folder-number}/locations/{region}`
   * * `organizations/{organization-number}/locations/{region}`
   */
  parent: string;
}

/** Response message for `CheckOnboardingStatus` method. */
export interface CheckOnboardingStatusResponse {
  /** The service account that PAM uses to act on this resource. */
  serviceAccount: string;
  /**
   * List of issues that are preventing PAM from functioning for this resource
   * and need to be fixed to complete onboarding. Some issues might not be
   * detected or reported.
   */
  findings: CheckOnboardingStatusResponse_Finding[];
}

/**
 * Finding represents an issue which prevents PAM from functioning properly
 * for this resource.
 */
export interface CheckOnboardingStatusResponse_Finding {
  /** PAM's service account is being denied access by Cloud IAM. */
  iamAccessDenied?: CheckOnboardingStatusResponse_Finding_IAMAccessDenied | undefined;
}

/**
 * PAM's service account is being denied access by Cloud IAM.
 * This can be fixed by granting a role that contains the missing
 * permissions to the service account or exempting it from deny policies if
 * they are blocking the access.
 */
export interface CheckOnboardingStatusResponse_Finding_IAMAccessDenied {
  /** List of permissions that are being denied. */
  missingPermissions: string[];
}

/**
 * An entitlement defines the eligibility of a set of users to obtain
 * predefined access for some time possibly after going through an approval
 * workflow.
 */
export interface Entitlement {
  /**
   * Identifier. Name of the entitlement.
   * Possible formats:
   *
   * * `organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}`
   * * `folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}`
   * * `projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}`
   */
  name: string;
  /** Output only. Create time stamp. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time stamp. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Who can create grants using this entitlement. This list should
   * contain at most one entry.
   */
  eligibleUsers: AccessControlEntry[];
  /**
   * Optional. The approvals needed before access are granted to a requester. No
   * approvals are needed if this field is null.
   */
  approvalWorkflow:
    | ApprovalWorkflow
    | undefined;
  /** The access granted to a requester on successful approval. */
  privilegedAccess:
    | PrivilegedAccess
    | undefined;
  /**
   * Required. The maximum amount of time that access is granted for a request.
   * A requester can ask for a duration less than this, but never more.
   */
  maxRequestDuration:
    | Duration
    | undefined;
  /** Output only. Current state of this entitlement. */
  state: Entitlement_State;
  /**
   * Required. The manner in which the requester should provide a justification
   * for requesting access.
   */
  requesterJustificationConfig:
    | Entitlement_RequesterJustificationConfig
    | undefined;
  /** Optional. Additional email addresses to be notified based on actions taken. */
  additionalNotificationTargets:
    | Entitlement_AdditionalNotificationTargets
    | undefined;
  /**
   * An `etag` is used for optimistic concurrency control as a way to prevent
   * simultaneous updates to the same entitlement. An `etag` is returned in the
   * response to `GetEntitlement` and the caller should put the `etag` in the
   * request to `UpdateEntitlement` so that their change is applied on
   * the same version. If this field is omitted or if there is a mismatch while
   * updating an entitlement, then the server rejects the request.
   */
  etag: string;
}

/** Different states an entitlement can be in. */
export enum Entitlement_State {
  /** STATE_UNSPECIFIED - Unspecified state. This value is never returned by the server. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The entitlement is being created. */
  CREATING = 1,
  /** AVAILABLE - The entitlement is available for requesting access. */
  AVAILABLE = 2,
  /** DELETING - The entitlement is being deleted. */
  DELETING = 3,
  /** DELETED - The entitlement has been deleted. */
  DELETED = 4,
  /** UPDATING - The entitlement is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function entitlement_StateFromJSON(object: any): Entitlement_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Entitlement_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Entitlement_State.CREATING;
    case 2:
    case "AVAILABLE":
      return Entitlement_State.AVAILABLE;
    case 3:
    case "DELETING":
      return Entitlement_State.DELETING;
    case 4:
    case "DELETED":
      return Entitlement_State.DELETED;
    case 5:
    case "UPDATING":
      return Entitlement_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Entitlement_State.UNRECOGNIZED;
  }
}

export function entitlement_StateToJSON(object: Entitlement_State): string {
  switch (object) {
    case Entitlement_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Entitlement_State.CREATING:
      return "CREATING";
    case Entitlement_State.AVAILABLE:
      return "AVAILABLE";
    case Entitlement_State.DELETING:
      return "DELETING";
    case Entitlement_State.DELETED:
      return "DELETED";
    case Entitlement_State.UPDATING:
      return "UPDATING";
    case Entitlement_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines how a requester must provide a justification when requesting
 * access.
 */
export interface Entitlement_RequesterJustificationConfig {
  /**
   * This option means the requester isn't required to provide a
   * justification.
   */
  notMandatory?:
    | Entitlement_RequesterJustificationConfig_NotMandatory
    | undefined;
  /**
   * This option means the requester must provide a string as
   * justification. If this is selected, the server allows the requester
   * to provide a justification but doesn't validate it.
   */
  unstructured?: Entitlement_RequesterJustificationConfig_Unstructured | undefined;
}

/**
 * The justification is not mandatory but can be provided in any of the
 * supported formats.
 */
export interface Entitlement_RequesterJustificationConfig_NotMandatory {
}

/** The requester has to provide a justification in the form of a string. */
export interface Entitlement_RequesterJustificationConfig_Unstructured {
}

/** AdditionalNotificationTargets includes email addresses to be notified. */
export interface Entitlement_AdditionalNotificationTargets {
  /**
   * Optional. Additional email addresses to be notified when a principal
   * (requester) is granted access.
   */
  adminEmailRecipients: string[];
  /**
   * Optional. Additional email address to be notified about an eligible
   * entitlement.
   */
  requesterEmailRecipients: string[];
}

/** AccessControlEntry is used to control who can do some operation. */
export interface AccessControlEntry {
  /**
   * Optional. Users who are allowed for the operation. Each entry should be a
   * valid v1 IAM principal identifier. The format for these is documented at:
   * https://cloud.google.com/iam/docs/principal-identifiers#v1
   */
  principals: string[];
}

/**
 * Different types of approval workflows that can be used to gate privileged
 * access granting.
 */
export interface ApprovalWorkflow {
  /**
   * An approval workflow where users designated as approvers review and act
   * on the grants.
   */
  manualApprovals?: ManualApprovals | undefined;
}

/**
 * A manual approval workflow where users who are designated as approvers
 * need to call the `ApproveGrant`/`DenyGrant` APIs for a grant. The workflow
 * can consist of multiple serial steps where each step defines who can act as
 * approver in that step and how many of those users should approve before the
 * workflow moves to the next step.
 *
 * This can be used to create approval workflows such as:
 *
 * * Require an approval from any user in a group G.
 * * Require an approval from any k number of users from a Group G.
 * * Require an approval from any user in a group G and then from a user U.
 *
 * A single user might be part of the `approvers` ACL for multiple steps in this
 * workflow, but they can only approve once and that approval is only considered
 * to satisfy the approval step at which it was granted.
 */
export interface ManualApprovals {
  /**
   * Optional. Do the approvers need to provide a justification for their
   * actions?
   */
  requireApproverJustification: boolean;
  /**
   * Optional. List of approval steps in this workflow. These steps are followed
   * in the specified order sequentially. Only 1 step is supported.
   */
  steps: ManualApprovals_Step[];
}

/** Step represents a logical step in a manual approval workflow. */
export interface ManualApprovals_Step {
  /**
   * Optional. The potential set of approvers in this step. This list must
   * contain at most one entry.
   */
  approvers: AccessControlEntry[];
  /**
   * Required. How many users from the above list need to approve. If there
   * aren't enough distinct users in the list, then the workflow indefinitely
   * blocks. Should always be greater than 0. 1 is the only supported value.
   */
  approvalsNeeded: number;
  /**
   * Optional. Additional email addresses to be notified when a grant is
   * pending approval.
   */
  approverEmailRecipients: string[];
}

/** Privileged access that this service can be used to gate. */
export interface PrivilegedAccess {
  /** Access to a Google Cloud resource through IAM. */
  gcpIamAccess?: PrivilegedAccess_GcpIamAccess | undefined;
}

/**
 * GcpIamAccess represents IAM based access control on a Google Cloud
 * resource. Refer to https://cloud.google.com/iam/docs to understand more
 * about IAM.
 */
export interface PrivilegedAccess_GcpIamAccess {
  /** Required. The type of this resource. */
  resourceType: string;
  /** Required. Name of the resource. */
  resource: string;
  /** Required. Role bindings that are created on successful grant. */
  roleBindings: PrivilegedAccess_GcpIamAccess_RoleBinding[];
}

/** IAM Role bindings that are created after a successful grant. */
export interface PrivilegedAccess_GcpIamAccess_RoleBinding {
  /**
   * Required. IAM role to be granted.
   * https://cloud.google.com/iam/docs/roles-overview.
   */
  role: string;
  /**
   * Optional. The expression field of the IAM condition to be associated
   * with the role. If specified, a user with an active grant for this
   * entitlement is able to access the resource only if this condition
   * evaluates to true for their request.
   *
   * This field uses the same CEL format as IAM and supports all attributes
   * that IAM supports, except tags.
   * https://cloud.google.com/iam/docs/conditions-overview#attributes.
   */
  conditionExpression: string;
}

/** Message for requesting list of entitlements. */
export interface ListEntitlementsRequest {
  /** Required. The parent which owns the entitlement resources. */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, the server picks an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Message for response to listing entitlements. */
export interface ListEntitlementsResponse {
  /** The list of entitlements. */
  entitlements: Entitlement[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for `SearchEntitlements` method. */
export interface SearchEntitlementsRequest {
  /** Required. The parent which owns the entitlement resources. */
  parent: string;
  /**
   * Required. Only entitlements where the calling user has this access are
   * returned.
   */
  callerAccessType: SearchEntitlementsRequest_CallerAccessType;
  /**
   * Optional. Only entitlements matching this filter are returned in the
   * response.
   */
  filter: string;
  /**
   * Optional. Requested page size. The server may return fewer items than
   * requested. If unspecified, the server picks an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** Different types of access a user can have on the entitlement resource. */
export enum SearchEntitlementsRequest_CallerAccessType {
  /** CALLER_ACCESS_TYPE_UNSPECIFIED - Unspecified access type. */
  CALLER_ACCESS_TYPE_UNSPECIFIED = 0,
  /** GRANT_REQUESTER - The user has access to create grants using this entitlement. */
  GRANT_REQUESTER = 1,
  /**
   * GRANT_APPROVER - The user has access to approve/deny grants created under this
   * entitlement.
   */
  GRANT_APPROVER = 2,
  UNRECOGNIZED = -1,
}

export function searchEntitlementsRequest_CallerAccessTypeFromJSON(
  object: any,
): SearchEntitlementsRequest_CallerAccessType {
  switch (object) {
    case 0:
    case "CALLER_ACCESS_TYPE_UNSPECIFIED":
      return SearchEntitlementsRequest_CallerAccessType.CALLER_ACCESS_TYPE_UNSPECIFIED;
    case 1:
    case "GRANT_REQUESTER":
      return SearchEntitlementsRequest_CallerAccessType.GRANT_REQUESTER;
    case 2:
    case "GRANT_APPROVER":
      return SearchEntitlementsRequest_CallerAccessType.GRANT_APPROVER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SearchEntitlementsRequest_CallerAccessType.UNRECOGNIZED;
  }
}

export function searchEntitlementsRequest_CallerAccessTypeToJSON(
  object: SearchEntitlementsRequest_CallerAccessType,
): string {
  switch (object) {
    case SearchEntitlementsRequest_CallerAccessType.CALLER_ACCESS_TYPE_UNSPECIFIED:
      return "CALLER_ACCESS_TYPE_UNSPECIFIED";
    case SearchEntitlementsRequest_CallerAccessType.GRANT_REQUESTER:
      return "GRANT_REQUESTER";
    case SearchEntitlementsRequest_CallerAccessType.GRANT_APPROVER:
      return "GRANT_APPROVER";
    case SearchEntitlementsRequest_CallerAccessType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response message for `SearchEntitlements` method. */
export interface SearchEntitlementsResponse {
  /** The list of entitlements. */
  entitlements: Entitlement[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting an entitlement. */
export interface GetEntitlementRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating an entitlement. */
export interface CreateEntitlementRequest {
  /**
   * Required. Name of the parent resource for the entitlement.
   * Possible formats:
   *
   * * `organizations/{organization-number}/locations/{region}`
   * * `folders/{folder-number}/locations/{region}`
   * * `projects/{project-id|project-number}/locations/{region}`
   */
  parent: string;
  /**
   * Required. The ID to use for this entitlement. This becomes the last part of
   * the resource name.
   *
   * This value should be 4-63 characters in length, and valid characters are
   * "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
   *
   * This value should be unique among all other entitlements under the
   * specified `parent`.
   */
  entitlementId: string;
  /** Required. The resource being created */
  entitlement:
    | Entitlement
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server knows to
   * ignore the request if it has already been completed. The server guarantees
   * this for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request and returns the
   * previous operation's response. This prevents clients from accidentally
   * creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting an entitlement. */
export interface DeleteEntitlementRequest {
  /** Required. Name of the resource. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server knows to
   * ignore the request if it has already been completed. The server guarantees
   * this for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, any child grant under this entitlement is also
   * deleted. (Otherwise, the request only works if the entitlement has no child
   * grant.)
   */
  force: boolean;
}

/** Message for updating an entitlement. */
export interface UpdateEntitlementRequest {
  /** Required. The entitlement resource that is updated. */
  entitlement:
    | Entitlement
    | undefined;
  /**
   * Required. The list of fields to update. A field is overwritten if, and only
   * if, it is in the mask. Any immutable fields set in the mask are ignored by
   * the server. Repeated fields and map fields are only allowed in the last
   * position of a `paths` string and overwrite the existing values. Hence an
   * update to a repeated field or a map should contain the entire list of
   * values. The fields specified in the update_mask are relative to the
   * resource and not to the request.
   * (e.g. `MaxRequestDuration`; *not* `entitlement.MaxRequestDuration`)
   * A value of '*' for this field refers to full replacement of the resource.
   */
  updateMask: string[] | undefined;
}

/**
 * This is to ensure that the `Grants` and `ProducerGrants` proto are byte
 * compatible.
 * A grant represents a request from a user for obtaining the access specified
 * in an entitlement they are eligible for.
 */
export interface Grant {
  /**
   * Identifier. Name of this grant.
   * Possible formats:
   *
   * * `organizations/{organization-number}/locations/{region}/entitlements/{entitlement-id}/grants/{grant-id}`
   * * `folders/{folder-number}/locations/{region}/entitlements/{entitlement-id}/grants/{grant-id}`
   * * `projects/{project-id|project-number}/locations/{region}/entitlements/{entitlement-id}/grants/{grant-id}`
   *
   * The last segment of this name (`{grant-id}`) is autogenerated.
   */
  name: string;
  /** Output only. Create time stamp. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time stamp. */
  updateTime:
    | Date
    | undefined;
  /** Output only. Username of the user who created this grant. */
  requester: string;
  /**
   * Required. The amount of time access is needed for. This value should be
   * less than the `max_request_duration` value of the entitlement.
   */
  requestedDuration:
    | Duration
    | undefined;
  /** Optional. Justification of why this access is needed. */
  justification:
    | Justification
    | undefined;
  /** Output only. Current state of this grant. */
  state: Grant_State;
  /** Output only. Timeline of this grant. */
  timeline:
    | Grant_Timeline
    | undefined;
  /** Output only. The access that would be granted by this grant. */
  privilegedAccess:
    | PrivilegedAccess
    | undefined;
  /**
   * Output only. Audit trail of access provided by this grant. If unspecified
   * then access was never granted.
   */
  auditTrail:
    | Grant_AuditTrail
    | undefined;
  /**
   * Optional. Additional email addresses to notify for all the actions
   * performed on the grant.
   */
  additionalEmailRecipients: string[];
  /**
   * Output only. Flag set by the PAM system to indicate that policy bindings
   * made by this grant have been modified from outside PAM.
   *
   * After it is set, this flag remains set forever irrespective of the grant
   * state. A `true` value here indicates that PAM no longer has any certainty
   * on the access a user has because of this grant.
   */
  externallyModified: boolean;
}

/** Different states a grant can be in. */
export enum Grant_State {
  /** STATE_UNSPECIFIED - Unspecified state. This value is never returned by the server. */
  STATE_UNSPECIFIED = 0,
  /**
   * APPROVAL_AWAITED - The entitlement had an approval workflow configured and this grant is
   * waiting for the workflow to complete.
   */
  APPROVAL_AWAITED = 1,
  /**
   * DENIED - The approval workflow completed with a denied result. No access is
   * granted for this grant. This is a terminal state.
   */
  DENIED = 3,
  /**
   * SCHEDULED - The approval workflow completed successfully with an approved result or
   * none was configured. Access is provided at an appropriate time.
   */
  SCHEDULED = 4,
  /** ACTIVATING - Access is being given. */
  ACTIVATING = 5,
  /** ACTIVE - Access was successfully given and is currently active. */
  ACTIVE = 6,
  /**
   * ACTIVATION_FAILED - The system could not give access due to a non-retriable error. This is a
   * terminal state.
   */
  ACTIVATION_FAILED = 7,
  /**
   * EXPIRED - Expired after waiting for the approval workflow to complete. This is a
   * terminal state.
   */
  EXPIRED = 8,
  /** REVOKING - Access is being revoked. */
  REVOKING = 9,
  /** REVOKED - Access was revoked by a user. This is a terminal state. */
  REVOKED = 10,
  /**
   * ENDED - System took back access as the requested duration was over. This is a
   * terminal state.
   */
  ENDED = 11,
  UNRECOGNIZED = -1,
}

export function grant_StateFromJSON(object: any): Grant_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Grant_State.STATE_UNSPECIFIED;
    case 1:
    case "APPROVAL_AWAITED":
      return Grant_State.APPROVAL_AWAITED;
    case 3:
    case "DENIED":
      return Grant_State.DENIED;
    case 4:
    case "SCHEDULED":
      return Grant_State.SCHEDULED;
    case 5:
    case "ACTIVATING":
      return Grant_State.ACTIVATING;
    case 6:
    case "ACTIVE":
      return Grant_State.ACTIVE;
    case 7:
    case "ACTIVATION_FAILED":
      return Grant_State.ACTIVATION_FAILED;
    case 8:
    case "EXPIRED":
      return Grant_State.EXPIRED;
    case 9:
    case "REVOKING":
      return Grant_State.REVOKING;
    case 10:
    case "REVOKED":
      return Grant_State.REVOKED;
    case 11:
    case "ENDED":
      return Grant_State.ENDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Grant_State.UNRECOGNIZED;
  }
}

export function grant_StateToJSON(object: Grant_State): string {
  switch (object) {
    case Grant_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Grant_State.APPROVAL_AWAITED:
      return "APPROVAL_AWAITED";
    case Grant_State.DENIED:
      return "DENIED";
    case Grant_State.SCHEDULED:
      return "SCHEDULED";
    case Grant_State.ACTIVATING:
      return "ACTIVATING";
    case Grant_State.ACTIVE:
      return "ACTIVE";
    case Grant_State.ACTIVATION_FAILED:
      return "ACTIVATION_FAILED";
    case Grant_State.EXPIRED:
      return "EXPIRED";
    case Grant_State.REVOKING:
      return "REVOKING";
    case Grant_State.REVOKED:
      return "REVOKED";
    case Grant_State.ENDED:
      return "ENDED";
    case Grant_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Timeline of a grant describing what happened to it and when. */
export interface Grant_Timeline {
  /**
   * Output only. The events that have occurred on this grant. This list
   * contains entries in the same order as they occurred. The first entry is
   * always be of type `Requested` and there is always at least one entry in
   * this array.
   */
  events: Grant_Timeline_Event[];
}

/** A single operation on the grant. */
export interface Grant_Timeline_Event {
  /** The grant was requested. */
  requested?:
    | Grant_Timeline_Event_Requested
    | undefined;
  /** The grant was approved. */
  approved?:
    | Grant_Timeline_Event_Approved
    | undefined;
  /** The grant was denied. */
  denied?:
    | Grant_Timeline_Event_Denied
    | undefined;
  /** The grant was revoked. */
  revoked?:
    | Grant_Timeline_Event_Revoked
    | undefined;
  /** The grant has been scheduled to give access. */
  scheduled?:
    | Grant_Timeline_Event_Scheduled
    | undefined;
  /** The grant was successfully activated to give access. */
  activated?:
    | Grant_Timeline_Event_Activated
    | undefined;
  /** There was a non-retriable error while trying to give access. */
  activationFailed?:
    | Grant_Timeline_Event_ActivationFailed
    | undefined;
  /**
   * The approval workflow did not complete in the necessary duration,
   * and so the grant is expired.
   */
  expired?:
    | Grant_Timeline_Event_Expired
    | undefined;
  /**
   * Access given by the grant ended automatically as the approved
   * duration was over.
   */
  ended?:
    | Grant_Timeline_Event_Ended
    | undefined;
  /** The policy bindings made by grant have been modified outside of PAM. */
  externallyModified?:
    | Grant_Timeline_Event_ExternallyModified
    | undefined;
  /** Output only. The time (as recorded at server) when this event occurred. */
  eventTime: Date | undefined;
}

/** An event representing that a grant was requested. */
export interface Grant_Timeline_Event_Requested {
  /**
   * Output only. The time at which this grant expires unless the approval
   * workflow completes. If omitted, then the request never expires.
   */
  expireTime: Date | undefined;
}

/** An event representing that the grant was approved. */
export interface Grant_Timeline_Event_Approved {
  /**
   * Output only. The reason provided by the approver for approving the
   * grant.
   */
  reason: string;
  /** Output only. Username of the user who approved the grant. */
  actor: string;
}

/** An event representing that the grant was denied. */
export interface Grant_Timeline_Event_Denied {
  /**
   * Output only. The reason provided by the approver for denying the
   * grant.
   */
  reason: string;
  /** Output only. Username of the user who denied the grant. */
  actor: string;
}

/** An event representing that the grant was revoked. */
export interface Grant_Timeline_Event_Revoked {
  /** Output only. The reason provided by the user for revoking the grant. */
  reason: string;
  /** Output only. Username of the user who revoked the grant. */
  actor: string;
}

/**
 * An event representing that the grant has been scheduled to be
 * activated later.
 */
export interface Grant_Timeline_Event_Scheduled {
  /** Output only. The time at which the access is granted. */
  scheduledActivationTime: Date | undefined;
}

/**
 * An event representing that the grant was successfully
 * activated.
 */
export interface Grant_Timeline_Event_Activated {
}

/** An event representing that the grant activation failed. */
export interface Grant_Timeline_Event_ActivationFailed {
  /** Output only. The error that occurred while activating the grant. */
  error: Status | undefined;
}

/** An event representing that the grant was expired. */
export interface Grant_Timeline_Event_Expired {
}

/** An event representing that the grant has ended. */
export interface Grant_Timeline_Event_Ended {
}

/**
 * An event representing that the policy bindings made by this grant were
 * modified externally.
 */
export interface Grant_Timeline_Event_ExternallyModified {
}

/** Audit trail for the access provided by this grant. */
export interface Grant_AuditTrail {
  /** Output only. The time at which access was given. */
  accessGrantTime:
    | Date
    | undefined;
  /**
   * Output only. The time at which the system removed access. This could be
   * because of an automatic expiry or because of a revocation.
   *
   * If unspecified, then access hasn't been removed yet.
   */
  accessRemoveTime: Date | undefined;
}

/** Justification represents a justification for requesting access. */
export interface Justification {
  /**
   * A free form textual justification. The system only ensures that this
   * is not empty. No other kind of validation is performed on the string.
   */
  unstructuredJustification?: string | undefined;
}

/** Message for requesting list of grants. */
export interface ListGrantsRequest {
  /** Required. The parent resource which owns the grants. */
  parent: string;
  /**
   * Optional. Requested page size. The server may return fewer items than
   * requested. If unspecified, the server picks an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing grants. */
export interface ListGrantsResponse {
  /** The list of grants. */
  grants: Grant[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for `SearchGrants` method. */
export interface SearchGrantsRequest {
  /** Required. The parent which owns the grant resources. */
  parent: string;
  /**
   * Required. Only grants which the caller is related to by this relationship
   * are returned in the response.
   */
  callerRelationship: SearchGrantsRequest_CallerRelationshipType;
  /** Optional. Only grants matching this filter are returned in the response. */
  filter: string;
  /**
   * Optional. Requested page size. The server may return fewer items than
   * requested. If unspecified, server picks an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** Different types of relationships a user can have with a grant. */
export enum SearchGrantsRequest_CallerRelationshipType {
  /** CALLER_RELATIONSHIP_TYPE_UNSPECIFIED - Unspecified caller relationship type. */
  CALLER_RELATIONSHIP_TYPE_UNSPECIFIED = 0,
  /** HAD_CREATED - The user created this grant by calling `CreateGrant` earlier. */
  HAD_CREATED = 1,
  /**
   * CAN_APPROVE - The user is an approver for the entitlement that this grant is parented
   * under and can currently approve/deny it.
   */
  CAN_APPROVE = 2,
  /** HAD_APPROVED - The caller had successfully approved/denied this grant earlier. */
  HAD_APPROVED = 3,
  UNRECOGNIZED = -1,
}

export function searchGrantsRequest_CallerRelationshipTypeFromJSON(
  object: any,
): SearchGrantsRequest_CallerRelationshipType {
  switch (object) {
    case 0:
    case "CALLER_RELATIONSHIP_TYPE_UNSPECIFIED":
      return SearchGrantsRequest_CallerRelationshipType.CALLER_RELATIONSHIP_TYPE_UNSPECIFIED;
    case 1:
    case "HAD_CREATED":
      return SearchGrantsRequest_CallerRelationshipType.HAD_CREATED;
    case 2:
    case "CAN_APPROVE":
      return SearchGrantsRequest_CallerRelationshipType.CAN_APPROVE;
    case 3:
    case "HAD_APPROVED":
      return SearchGrantsRequest_CallerRelationshipType.HAD_APPROVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SearchGrantsRequest_CallerRelationshipType.UNRECOGNIZED;
  }
}

export function searchGrantsRequest_CallerRelationshipTypeToJSON(
  object: SearchGrantsRequest_CallerRelationshipType,
): string {
  switch (object) {
    case SearchGrantsRequest_CallerRelationshipType.CALLER_RELATIONSHIP_TYPE_UNSPECIFIED:
      return "CALLER_RELATIONSHIP_TYPE_UNSPECIFIED";
    case SearchGrantsRequest_CallerRelationshipType.HAD_CREATED:
      return "HAD_CREATED";
    case SearchGrantsRequest_CallerRelationshipType.CAN_APPROVE:
      return "CAN_APPROVE";
    case SearchGrantsRequest_CallerRelationshipType.HAD_APPROVED:
      return "HAD_APPROVED";
    case SearchGrantsRequest_CallerRelationshipType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response message for `SearchGrants` method. */
export interface SearchGrantsResponse {
  /** The list of grants. */
  grants: Grant[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a grant. */
export interface GetGrantRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Request message for `ApproveGrant` method. */
export interface ApproveGrantRequest {
  /** Required. Name of the grant resource which is being approved. */
  name: string;
  /**
   * Optional. The reason for approving this grant. This is required if the
   * `require_approver_justification` field of the `ManualApprovals` workflow
   * used in this grant is true.
   */
  reason: string;
}

/** Request message for `DenyGrant` method. */
export interface DenyGrantRequest {
  /** Required. Name of the grant resource which is being denied. */
  name: string;
  /**
   * Optional. The reason for denying this grant. This is required if
   * `require_approver_justification` field of the `ManualApprovals` workflow
   * used in this grant is true.
   */
  reason: string;
}

/** Request message for `RevokeGrant` method. */
export interface RevokeGrantRequest {
  /** Required. Name of the grant resource which is being revoked. */
  name: string;
  /** Optional. The reason for revoking this grant. */
  reason: string;
}

/** Message for creating a grant */
export interface CreateGrantRequest {
  /**
   * Required. Name of the parent entitlement for which this grant is being
   * requested.
   */
  parent: string;
  /** Required. The resource being created. */
  grant:
    | Grant
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server knows to
   * ignore the request if it has already been completed. The server guarantees
   * this for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseCheckOnboardingStatusRequest(): CheckOnboardingStatusRequest {
  return { parent: "" };
}

export const CheckOnboardingStatusRequest: MessageFns<CheckOnboardingStatusRequest> = {
  encode(message: CheckOnboardingStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckOnboardingStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckOnboardingStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckOnboardingStatusRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: CheckOnboardingStatusRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckOnboardingStatusRequest>): CheckOnboardingStatusRequest {
    return CheckOnboardingStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckOnboardingStatusRequest>): CheckOnboardingStatusRequest {
    const message = createBaseCheckOnboardingStatusRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseCheckOnboardingStatusResponse(): CheckOnboardingStatusResponse {
  return { serviceAccount: "", findings: [] };
}

export const CheckOnboardingStatusResponse: MessageFns<CheckOnboardingStatusResponse> = {
  encode(message: CheckOnboardingStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceAccount !== "") {
      writer.uint32(10).string(message.serviceAccount);
    }
    for (const v of message.findings) {
      CheckOnboardingStatusResponse_Finding.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckOnboardingStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckOnboardingStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findings.push(CheckOnboardingStatusResponse_Finding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckOnboardingStatusResponse {
    return {
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      findings: globalThis.Array.isArray(object?.findings)
        ? object.findings.map((e: any) => CheckOnboardingStatusResponse_Finding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CheckOnboardingStatusResponse): unknown {
    const obj: any = {};
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.findings?.length) {
      obj.findings = message.findings.map((e) => CheckOnboardingStatusResponse_Finding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CheckOnboardingStatusResponse>): CheckOnboardingStatusResponse {
    return CheckOnboardingStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckOnboardingStatusResponse>): CheckOnboardingStatusResponse {
    const message = createBaseCheckOnboardingStatusResponse();
    message.serviceAccount = object.serviceAccount ?? "";
    message.findings = object.findings?.map((e) => CheckOnboardingStatusResponse_Finding.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCheckOnboardingStatusResponse_Finding(): CheckOnboardingStatusResponse_Finding {
  return { iamAccessDenied: undefined };
}

export const CheckOnboardingStatusResponse_Finding: MessageFns<CheckOnboardingStatusResponse_Finding> = {
  encode(message: CheckOnboardingStatusResponse_Finding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iamAccessDenied !== undefined) {
      CheckOnboardingStatusResponse_Finding_IAMAccessDenied.encode(message.iamAccessDenied, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckOnboardingStatusResponse_Finding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckOnboardingStatusResponse_Finding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iamAccessDenied = CheckOnboardingStatusResponse_Finding_IAMAccessDenied.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckOnboardingStatusResponse_Finding {
    return {
      iamAccessDenied: isSet(object.iamAccessDenied)
        ? CheckOnboardingStatusResponse_Finding_IAMAccessDenied.fromJSON(object.iamAccessDenied)
        : undefined,
    };
  },

  toJSON(message: CheckOnboardingStatusResponse_Finding): unknown {
    const obj: any = {};
    if (message.iamAccessDenied !== undefined) {
      obj.iamAccessDenied = CheckOnboardingStatusResponse_Finding_IAMAccessDenied.toJSON(message.iamAccessDenied);
    }
    return obj;
  },

  create(base?: DeepPartial<CheckOnboardingStatusResponse_Finding>): CheckOnboardingStatusResponse_Finding {
    return CheckOnboardingStatusResponse_Finding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckOnboardingStatusResponse_Finding>): CheckOnboardingStatusResponse_Finding {
    const message = createBaseCheckOnboardingStatusResponse_Finding();
    message.iamAccessDenied = (object.iamAccessDenied !== undefined && object.iamAccessDenied !== null)
      ? CheckOnboardingStatusResponse_Finding_IAMAccessDenied.fromPartial(object.iamAccessDenied)
      : undefined;
    return message;
  },
};

function createBaseCheckOnboardingStatusResponse_Finding_IAMAccessDenied(): CheckOnboardingStatusResponse_Finding_IAMAccessDenied {
  return { missingPermissions: [] };
}

export const CheckOnboardingStatusResponse_Finding_IAMAccessDenied: MessageFns<
  CheckOnboardingStatusResponse_Finding_IAMAccessDenied
> = {
  encode(
    message: CheckOnboardingStatusResponse_Finding_IAMAccessDenied,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.missingPermissions) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckOnboardingStatusResponse_Finding_IAMAccessDenied {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckOnboardingStatusResponse_Finding_IAMAccessDenied();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.missingPermissions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckOnboardingStatusResponse_Finding_IAMAccessDenied {
    return {
      missingPermissions: globalThis.Array.isArray(object?.missingPermissions)
        ? object.missingPermissions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CheckOnboardingStatusResponse_Finding_IAMAccessDenied): unknown {
    const obj: any = {};
    if (message.missingPermissions?.length) {
      obj.missingPermissions = message.missingPermissions;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CheckOnboardingStatusResponse_Finding_IAMAccessDenied>,
  ): CheckOnboardingStatusResponse_Finding_IAMAccessDenied {
    return CheckOnboardingStatusResponse_Finding_IAMAccessDenied.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CheckOnboardingStatusResponse_Finding_IAMAccessDenied>,
  ): CheckOnboardingStatusResponse_Finding_IAMAccessDenied {
    const message = createBaseCheckOnboardingStatusResponse_Finding_IAMAccessDenied();
    message.missingPermissions = object.missingPermissions?.map((e) => e) || [];
    return message;
  },
};

function createBaseEntitlement(): Entitlement {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    eligibleUsers: [],
    approvalWorkflow: undefined,
    privilegedAccess: undefined,
    maxRequestDuration: undefined,
    state: 0,
    requesterJustificationConfig: undefined,
    additionalNotificationTargets: undefined,
    etag: "",
  };
}

export const Entitlement: MessageFns<Entitlement> = {
  encode(message: Entitlement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    for (const v of message.eligibleUsers) {
      AccessControlEntry.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.approvalWorkflow !== undefined) {
      ApprovalWorkflow.encode(message.approvalWorkflow, writer.uint32(50).fork()).join();
    }
    if (message.privilegedAccess !== undefined) {
      PrivilegedAccess.encode(message.privilegedAccess, writer.uint32(58).fork()).join();
    }
    if (message.maxRequestDuration !== undefined) {
      Duration.encode(message.maxRequestDuration, writer.uint32(66).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(72).int32(message.state);
    }
    if (message.requesterJustificationConfig !== undefined) {
      Entitlement_RequesterJustificationConfig.encode(message.requesterJustificationConfig, writer.uint32(82).fork())
        .join();
    }
    if (message.additionalNotificationTargets !== undefined) {
      Entitlement_AdditionalNotificationTargets.encode(message.additionalNotificationTargets, writer.uint32(90).fork())
        .join();
    }
    if (message.etag !== "") {
      writer.uint32(98).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entitlement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.eligibleUsers.push(AccessControlEntry.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.approvalWorkflow = ApprovalWorkflow.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.privilegedAccess = PrivilegedAccess.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.maxRequestDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.requesterJustificationConfig = Entitlement_RequesterJustificationConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.additionalNotificationTargets = Entitlement_AdditionalNotificationTargets.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entitlement {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      eligibleUsers: globalThis.Array.isArray(object?.eligibleUsers)
        ? object.eligibleUsers.map((e: any) => AccessControlEntry.fromJSON(e))
        : [],
      approvalWorkflow: isSet(object.approvalWorkflow) ? ApprovalWorkflow.fromJSON(object.approvalWorkflow) : undefined,
      privilegedAccess: isSet(object.privilegedAccess) ? PrivilegedAccess.fromJSON(object.privilegedAccess) : undefined,
      maxRequestDuration: isSet(object.maxRequestDuration) ? Duration.fromJSON(object.maxRequestDuration) : undefined,
      state: isSet(object.state) ? entitlement_StateFromJSON(object.state) : 0,
      requesterJustificationConfig: isSet(object.requesterJustificationConfig)
        ? Entitlement_RequesterJustificationConfig.fromJSON(object.requesterJustificationConfig)
        : undefined,
      additionalNotificationTargets: isSet(object.additionalNotificationTargets)
        ? Entitlement_AdditionalNotificationTargets.fromJSON(object.additionalNotificationTargets)
        : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Entitlement): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.eligibleUsers?.length) {
      obj.eligibleUsers = message.eligibleUsers.map((e) => AccessControlEntry.toJSON(e));
    }
    if (message.approvalWorkflow !== undefined) {
      obj.approvalWorkflow = ApprovalWorkflow.toJSON(message.approvalWorkflow);
    }
    if (message.privilegedAccess !== undefined) {
      obj.privilegedAccess = PrivilegedAccess.toJSON(message.privilegedAccess);
    }
    if (message.maxRequestDuration !== undefined) {
      obj.maxRequestDuration = Duration.toJSON(message.maxRequestDuration);
    }
    if (message.state !== 0) {
      obj.state = entitlement_StateToJSON(message.state);
    }
    if (message.requesterJustificationConfig !== undefined) {
      obj.requesterJustificationConfig = Entitlement_RequesterJustificationConfig.toJSON(
        message.requesterJustificationConfig,
      );
    }
    if (message.additionalNotificationTargets !== undefined) {
      obj.additionalNotificationTargets = Entitlement_AdditionalNotificationTargets.toJSON(
        message.additionalNotificationTargets,
      );
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Entitlement>): Entitlement {
    return Entitlement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entitlement>): Entitlement {
    const message = createBaseEntitlement();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.eligibleUsers = object.eligibleUsers?.map((e) => AccessControlEntry.fromPartial(e)) || [];
    message.approvalWorkflow = (object.approvalWorkflow !== undefined && object.approvalWorkflow !== null)
      ? ApprovalWorkflow.fromPartial(object.approvalWorkflow)
      : undefined;
    message.privilegedAccess = (object.privilegedAccess !== undefined && object.privilegedAccess !== null)
      ? PrivilegedAccess.fromPartial(object.privilegedAccess)
      : undefined;
    message.maxRequestDuration = (object.maxRequestDuration !== undefined && object.maxRequestDuration !== null)
      ? Duration.fromPartial(object.maxRequestDuration)
      : undefined;
    message.state = object.state ?? 0;
    message.requesterJustificationConfig =
      (object.requesterJustificationConfig !== undefined && object.requesterJustificationConfig !== null)
        ? Entitlement_RequesterJustificationConfig.fromPartial(object.requesterJustificationConfig)
        : undefined;
    message.additionalNotificationTargets =
      (object.additionalNotificationTargets !== undefined && object.additionalNotificationTargets !== null)
        ? Entitlement_AdditionalNotificationTargets.fromPartial(object.additionalNotificationTargets)
        : undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseEntitlement_RequesterJustificationConfig(): Entitlement_RequesterJustificationConfig {
  return { notMandatory: undefined, unstructured: undefined };
}

export const Entitlement_RequesterJustificationConfig: MessageFns<Entitlement_RequesterJustificationConfig> = {
  encode(message: Entitlement_RequesterJustificationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notMandatory !== undefined) {
      Entitlement_RequesterJustificationConfig_NotMandatory.encode(message.notMandatory, writer.uint32(10).fork())
        .join();
    }
    if (message.unstructured !== undefined) {
      Entitlement_RequesterJustificationConfig_Unstructured.encode(message.unstructured, writer.uint32(18).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entitlement_RequesterJustificationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlement_RequesterJustificationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notMandatory = Entitlement_RequesterJustificationConfig_NotMandatory.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.unstructured = Entitlement_RequesterJustificationConfig_Unstructured.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entitlement_RequesterJustificationConfig {
    return {
      notMandatory: isSet(object.notMandatory)
        ? Entitlement_RequesterJustificationConfig_NotMandatory.fromJSON(object.notMandatory)
        : undefined,
      unstructured: isSet(object.unstructured)
        ? Entitlement_RequesterJustificationConfig_Unstructured.fromJSON(object.unstructured)
        : undefined,
    };
  },

  toJSON(message: Entitlement_RequesterJustificationConfig): unknown {
    const obj: any = {};
    if (message.notMandatory !== undefined) {
      obj.notMandatory = Entitlement_RequesterJustificationConfig_NotMandatory.toJSON(message.notMandatory);
    }
    if (message.unstructured !== undefined) {
      obj.unstructured = Entitlement_RequesterJustificationConfig_Unstructured.toJSON(message.unstructured);
    }
    return obj;
  },

  create(base?: DeepPartial<Entitlement_RequesterJustificationConfig>): Entitlement_RequesterJustificationConfig {
    return Entitlement_RequesterJustificationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entitlement_RequesterJustificationConfig>): Entitlement_RequesterJustificationConfig {
    const message = createBaseEntitlement_RequesterJustificationConfig();
    message.notMandatory = (object.notMandatory !== undefined && object.notMandatory !== null)
      ? Entitlement_RequesterJustificationConfig_NotMandatory.fromPartial(object.notMandatory)
      : undefined;
    message.unstructured = (object.unstructured !== undefined && object.unstructured !== null)
      ? Entitlement_RequesterJustificationConfig_Unstructured.fromPartial(object.unstructured)
      : undefined;
    return message;
  },
};

function createBaseEntitlement_RequesterJustificationConfig_NotMandatory(): Entitlement_RequesterJustificationConfig_NotMandatory {
  return {};
}

export const Entitlement_RequesterJustificationConfig_NotMandatory: MessageFns<
  Entitlement_RequesterJustificationConfig_NotMandatory
> = {
  encode(
    _: Entitlement_RequesterJustificationConfig_NotMandatory,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entitlement_RequesterJustificationConfig_NotMandatory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlement_RequesterJustificationConfig_NotMandatory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Entitlement_RequesterJustificationConfig_NotMandatory {
    return {};
  },

  toJSON(_: Entitlement_RequesterJustificationConfig_NotMandatory): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<Entitlement_RequesterJustificationConfig_NotMandatory>,
  ): Entitlement_RequesterJustificationConfig_NotMandatory {
    return Entitlement_RequesterJustificationConfig_NotMandatory.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<Entitlement_RequesterJustificationConfig_NotMandatory>,
  ): Entitlement_RequesterJustificationConfig_NotMandatory {
    const message = createBaseEntitlement_RequesterJustificationConfig_NotMandatory();
    return message;
  },
};

function createBaseEntitlement_RequesterJustificationConfig_Unstructured(): Entitlement_RequesterJustificationConfig_Unstructured {
  return {};
}

export const Entitlement_RequesterJustificationConfig_Unstructured: MessageFns<
  Entitlement_RequesterJustificationConfig_Unstructured
> = {
  encode(
    _: Entitlement_RequesterJustificationConfig_Unstructured,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entitlement_RequesterJustificationConfig_Unstructured {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlement_RequesterJustificationConfig_Unstructured();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Entitlement_RequesterJustificationConfig_Unstructured {
    return {};
  },

  toJSON(_: Entitlement_RequesterJustificationConfig_Unstructured): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<Entitlement_RequesterJustificationConfig_Unstructured>,
  ): Entitlement_RequesterJustificationConfig_Unstructured {
    return Entitlement_RequesterJustificationConfig_Unstructured.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<Entitlement_RequesterJustificationConfig_Unstructured>,
  ): Entitlement_RequesterJustificationConfig_Unstructured {
    const message = createBaseEntitlement_RequesterJustificationConfig_Unstructured();
    return message;
  },
};

function createBaseEntitlement_AdditionalNotificationTargets(): Entitlement_AdditionalNotificationTargets {
  return { adminEmailRecipients: [], requesterEmailRecipients: [] };
}

export const Entitlement_AdditionalNotificationTargets: MessageFns<Entitlement_AdditionalNotificationTargets> = {
  encode(message: Entitlement_AdditionalNotificationTargets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.adminEmailRecipients) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.requesterEmailRecipients) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entitlement_AdditionalNotificationTargets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlement_AdditionalNotificationTargets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adminEmailRecipients.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requesterEmailRecipients.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entitlement_AdditionalNotificationTargets {
    return {
      adminEmailRecipients: globalThis.Array.isArray(object?.adminEmailRecipients)
        ? object.adminEmailRecipients.map((e: any) => globalThis.String(e))
        : [],
      requesterEmailRecipients: globalThis.Array.isArray(object?.requesterEmailRecipients)
        ? object.requesterEmailRecipients.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Entitlement_AdditionalNotificationTargets): unknown {
    const obj: any = {};
    if (message.adminEmailRecipients?.length) {
      obj.adminEmailRecipients = message.adminEmailRecipients;
    }
    if (message.requesterEmailRecipients?.length) {
      obj.requesterEmailRecipients = message.requesterEmailRecipients;
    }
    return obj;
  },

  create(base?: DeepPartial<Entitlement_AdditionalNotificationTargets>): Entitlement_AdditionalNotificationTargets {
    return Entitlement_AdditionalNotificationTargets.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Entitlement_AdditionalNotificationTargets>,
  ): Entitlement_AdditionalNotificationTargets {
    const message = createBaseEntitlement_AdditionalNotificationTargets();
    message.adminEmailRecipients = object.adminEmailRecipients?.map((e) => e) || [];
    message.requesterEmailRecipients = object.requesterEmailRecipients?.map((e) => e) || [];
    return message;
  },
};

function createBaseAccessControlEntry(): AccessControlEntry {
  return { principals: [] };
}

export const AccessControlEntry: MessageFns<AccessControlEntry> = {
  encode(message: AccessControlEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.principals) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessControlEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessControlEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.principals.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessControlEntry {
    return {
      principals: globalThis.Array.isArray(object?.principals)
        ? object.principals.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AccessControlEntry): unknown {
    const obj: any = {};
    if (message.principals?.length) {
      obj.principals = message.principals;
    }
    return obj;
  },

  create(base?: DeepPartial<AccessControlEntry>): AccessControlEntry {
    return AccessControlEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessControlEntry>): AccessControlEntry {
    const message = createBaseAccessControlEntry();
    message.principals = object.principals?.map((e) => e) || [];
    return message;
  },
};

function createBaseApprovalWorkflow(): ApprovalWorkflow {
  return { manualApprovals: undefined };
}

export const ApprovalWorkflow: MessageFns<ApprovalWorkflow> = {
  encode(message: ApprovalWorkflow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.manualApprovals !== undefined) {
      ManualApprovals.encode(message.manualApprovals, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApprovalWorkflow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApprovalWorkflow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.manualApprovals = ManualApprovals.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApprovalWorkflow {
    return {
      manualApprovals: isSet(object.manualApprovals) ? ManualApprovals.fromJSON(object.manualApprovals) : undefined,
    };
  },

  toJSON(message: ApprovalWorkflow): unknown {
    const obj: any = {};
    if (message.manualApprovals !== undefined) {
      obj.manualApprovals = ManualApprovals.toJSON(message.manualApprovals);
    }
    return obj;
  },

  create(base?: DeepPartial<ApprovalWorkflow>): ApprovalWorkflow {
    return ApprovalWorkflow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApprovalWorkflow>): ApprovalWorkflow {
    const message = createBaseApprovalWorkflow();
    message.manualApprovals = (object.manualApprovals !== undefined && object.manualApprovals !== null)
      ? ManualApprovals.fromPartial(object.manualApprovals)
      : undefined;
    return message;
  },
};

function createBaseManualApprovals(): ManualApprovals {
  return { requireApproverJustification: false, steps: [] };
}

export const ManualApprovals: MessageFns<ManualApprovals> = {
  encode(message: ManualApprovals, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requireApproverJustification !== false) {
      writer.uint32(8).bool(message.requireApproverJustification);
    }
    for (const v of message.steps) {
      ManualApprovals_Step.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManualApprovals {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManualApprovals();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.requireApproverJustification = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.steps.push(ManualApprovals_Step.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManualApprovals {
    return {
      requireApproverJustification: isSet(object.requireApproverJustification)
        ? globalThis.Boolean(object.requireApproverJustification)
        : false,
      steps: globalThis.Array.isArray(object?.steps)
        ? object.steps.map((e: any) => ManualApprovals_Step.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ManualApprovals): unknown {
    const obj: any = {};
    if (message.requireApproverJustification !== false) {
      obj.requireApproverJustification = message.requireApproverJustification;
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => ManualApprovals_Step.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ManualApprovals>): ManualApprovals {
    return ManualApprovals.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManualApprovals>): ManualApprovals {
    const message = createBaseManualApprovals();
    message.requireApproverJustification = object.requireApproverJustification ?? false;
    message.steps = object.steps?.map((e) => ManualApprovals_Step.fromPartial(e)) || [];
    return message;
  },
};

function createBaseManualApprovals_Step(): ManualApprovals_Step {
  return { approvers: [], approvalsNeeded: 0, approverEmailRecipients: [] };
}

export const ManualApprovals_Step: MessageFns<ManualApprovals_Step> = {
  encode(message: ManualApprovals_Step, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.approvers) {
      AccessControlEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.approvalsNeeded !== 0) {
      writer.uint32(16).int32(message.approvalsNeeded);
    }
    for (const v of message.approverEmailRecipients) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManualApprovals_Step {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManualApprovals_Step();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.approvers.push(AccessControlEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.approvalsNeeded = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.approverEmailRecipients.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManualApprovals_Step {
    return {
      approvers: globalThis.Array.isArray(object?.approvers)
        ? object.approvers.map((e: any) => AccessControlEntry.fromJSON(e))
        : [],
      approvalsNeeded: isSet(object.approvalsNeeded) ? globalThis.Number(object.approvalsNeeded) : 0,
      approverEmailRecipients: globalThis.Array.isArray(object?.approverEmailRecipients)
        ? object.approverEmailRecipients.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ManualApprovals_Step): unknown {
    const obj: any = {};
    if (message.approvers?.length) {
      obj.approvers = message.approvers.map((e) => AccessControlEntry.toJSON(e));
    }
    if (message.approvalsNeeded !== 0) {
      obj.approvalsNeeded = Math.round(message.approvalsNeeded);
    }
    if (message.approverEmailRecipients?.length) {
      obj.approverEmailRecipients = message.approverEmailRecipients;
    }
    return obj;
  },

  create(base?: DeepPartial<ManualApprovals_Step>): ManualApprovals_Step {
    return ManualApprovals_Step.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManualApprovals_Step>): ManualApprovals_Step {
    const message = createBaseManualApprovals_Step();
    message.approvers = object.approvers?.map((e) => AccessControlEntry.fromPartial(e)) || [];
    message.approvalsNeeded = object.approvalsNeeded ?? 0;
    message.approverEmailRecipients = object.approverEmailRecipients?.map((e) => e) || [];
    return message;
  },
};

function createBasePrivilegedAccess(): PrivilegedAccess {
  return { gcpIamAccess: undefined };
}

export const PrivilegedAccess: MessageFns<PrivilegedAccess> = {
  encode(message: PrivilegedAccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcpIamAccess !== undefined) {
      PrivilegedAccess_GcpIamAccess.encode(message.gcpIamAccess, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivilegedAccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivilegedAccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcpIamAccess = PrivilegedAccess_GcpIamAccess.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivilegedAccess {
    return {
      gcpIamAccess: isSet(object.gcpIamAccess)
        ? PrivilegedAccess_GcpIamAccess.fromJSON(object.gcpIamAccess)
        : undefined,
    };
  },

  toJSON(message: PrivilegedAccess): unknown {
    const obj: any = {};
    if (message.gcpIamAccess !== undefined) {
      obj.gcpIamAccess = PrivilegedAccess_GcpIamAccess.toJSON(message.gcpIamAccess);
    }
    return obj;
  },

  create(base?: DeepPartial<PrivilegedAccess>): PrivilegedAccess {
    return PrivilegedAccess.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrivilegedAccess>): PrivilegedAccess {
    const message = createBasePrivilegedAccess();
    message.gcpIamAccess = (object.gcpIamAccess !== undefined && object.gcpIamAccess !== null)
      ? PrivilegedAccess_GcpIamAccess.fromPartial(object.gcpIamAccess)
      : undefined;
    return message;
  },
};

function createBasePrivilegedAccess_GcpIamAccess(): PrivilegedAccess_GcpIamAccess {
  return { resourceType: "", resource: "", roleBindings: [] };
}

export const PrivilegedAccess_GcpIamAccess: MessageFns<PrivilegedAccess_GcpIamAccess> = {
  encode(message: PrivilegedAccess_GcpIamAccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceType !== "") {
      writer.uint32(10).string(message.resourceType);
    }
    if (message.resource !== "") {
      writer.uint32(18).string(message.resource);
    }
    for (const v of message.roleBindings) {
      PrivilegedAccess_GcpIamAccess_RoleBinding.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivilegedAccess_GcpIamAccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivilegedAccess_GcpIamAccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roleBindings.push(PrivilegedAccess_GcpIamAccess_RoleBinding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivilegedAccess_GcpIamAccess {
    return {
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      roleBindings: globalThis.Array.isArray(object?.roleBindings)
        ? object.roleBindings.map((e: any) => PrivilegedAccess_GcpIamAccess_RoleBinding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PrivilegedAccess_GcpIamAccess): unknown {
    const obj: any = {};
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.roleBindings?.length) {
      obj.roleBindings = message.roleBindings.map((e) => PrivilegedAccess_GcpIamAccess_RoleBinding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PrivilegedAccess_GcpIamAccess>): PrivilegedAccess_GcpIamAccess {
    return PrivilegedAccess_GcpIamAccess.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrivilegedAccess_GcpIamAccess>): PrivilegedAccess_GcpIamAccess {
    const message = createBasePrivilegedAccess_GcpIamAccess();
    message.resourceType = object.resourceType ?? "";
    message.resource = object.resource ?? "";
    message.roleBindings = object.roleBindings?.map((e) => PrivilegedAccess_GcpIamAccess_RoleBinding.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBasePrivilegedAccess_GcpIamAccess_RoleBinding(): PrivilegedAccess_GcpIamAccess_RoleBinding {
  return { role: "", conditionExpression: "" };
}

export const PrivilegedAccess_GcpIamAccess_RoleBinding: MessageFns<PrivilegedAccess_GcpIamAccess_RoleBinding> = {
  encode(message: PrivilegedAccess_GcpIamAccess_RoleBinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    if (message.conditionExpression !== "") {
      writer.uint32(18).string(message.conditionExpression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivilegedAccess_GcpIamAccess_RoleBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivilegedAccess_GcpIamAccess_RoleBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.role = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conditionExpression = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivilegedAccess_GcpIamAccess_RoleBinding {
    return {
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      conditionExpression: isSet(object.conditionExpression) ? globalThis.String(object.conditionExpression) : "",
    };
  },

  toJSON(message: PrivilegedAccess_GcpIamAccess_RoleBinding): unknown {
    const obj: any = {};
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.conditionExpression !== "") {
      obj.conditionExpression = message.conditionExpression;
    }
    return obj;
  },

  create(base?: DeepPartial<PrivilegedAccess_GcpIamAccess_RoleBinding>): PrivilegedAccess_GcpIamAccess_RoleBinding {
    return PrivilegedAccess_GcpIamAccess_RoleBinding.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<PrivilegedAccess_GcpIamAccess_RoleBinding>,
  ): PrivilegedAccess_GcpIamAccess_RoleBinding {
    const message = createBasePrivilegedAccess_GcpIamAccess_RoleBinding();
    message.role = object.role ?? "";
    message.conditionExpression = object.conditionExpression ?? "";
    return message;
  },
};

function createBaseListEntitlementsRequest(): ListEntitlementsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListEntitlementsRequest: MessageFns<ListEntitlementsRequest> = {
  encode(message: ListEntitlementsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntitlementsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntitlementsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntitlementsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListEntitlementsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntitlementsRequest>): ListEntitlementsRequest {
    return ListEntitlementsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntitlementsRequest>): ListEntitlementsRequest {
    const message = createBaseListEntitlementsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListEntitlementsResponse(): ListEntitlementsResponse {
  return { entitlements: [], nextPageToken: "", unreachable: [] };
}

export const ListEntitlementsResponse: MessageFns<ListEntitlementsResponse> = {
  encode(message: ListEntitlementsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entitlements) {
      Entitlement.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntitlementsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntitlementsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entitlements.push(Entitlement.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntitlementsResponse {
    return {
      entitlements: globalThis.Array.isArray(object?.entitlements)
        ? object.entitlements.map((e: any) => Entitlement.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListEntitlementsResponse): unknown {
    const obj: any = {};
    if (message.entitlements?.length) {
      obj.entitlements = message.entitlements.map((e) => Entitlement.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntitlementsResponse>): ListEntitlementsResponse {
    return ListEntitlementsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntitlementsResponse>): ListEntitlementsResponse {
    const message = createBaseListEntitlementsResponse();
    message.entitlements = object.entitlements?.map((e) => Entitlement.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseSearchEntitlementsRequest(): SearchEntitlementsRequest {
  return { parent: "", callerAccessType: 0, filter: "", pageSize: 0, pageToken: "" };
}

export const SearchEntitlementsRequest: MessageFns<SearchEntitlementsRequest> = {
  encode(message: SearchEntitlementsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.callerAccessType !== 0) {
      writer.uint32(16).int32(message.callerAccessType);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchEntitlementsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchEntitlementsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.callerAccessType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchEntitlementsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      callerAccessType: isSet(object.callerAccessType)
        ? searchEntitlementsRequest_CallerAccessTypeFromJSON(object.callerAccessType)
        : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchEntitlementsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.callerAccessType !== 0) {
      obj.callerAccessType = searchEntitlementsRequest_CallerAccessTypeToJSON(message.callerAccessType);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchEntitlementsRequest>): SearchEntitlementsRequest {
    return SearchEntitlementsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchEntitlementsRequest>): SearchEntitlementsRequest {
    const message = createBaseSearchEntitlementsRequest();
    message.parent = object.parent ?? "";
    message.callerAccessType = object.callerAccessType ?? 0;
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchEntitlementsResponse(): SearchEntitlementsResponse {
  return { entitlements: [], nextPageToken: "" };
}

export const SearchEntitlementsResponse: MessageFns<SearchEntitlementsResponse> = {
  encode(message: SearchEntitlementsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entitlements) {
      Entitlement.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchEntitlementsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchEntitlementsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entitlements.push(Entitlement.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchEntitlementsResponse {
    return {
      entitlements: globalThis.Array.isArray(object?.entitlements)
        ? object.entitlements.map((e: any) => Entitlement.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchEntitlementsResponse): unknown {
    const obj: any = {};
    if (message.entitlements?.length) {
      obj.entitlements = message.entitlements.map((e) => Entitlement.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchEntitlementsResponse>): SearchEntitlementsResponse {
    return SearchEntitlementsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchEntitlementsResponse>): SearchEntitlementsResponse {
    const message = createBaseSearchEntitlementsResponse();
    message.entitlements = object.entitlements?.map((e) => Entitlement.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEntitlementRequest(): GetEntitlementRequest {
  return { name: "" };
}

export const GetEntitlementRequest: MessageFns<GetEntitlementRequest> = {
  encode(message: GetEntitlementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEntitlementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEntitlementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEntitlementRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEntitlementRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEntitlementRequest>): GetEntitlementRequest {
    return GetEntitlementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEntitlementRequest>): GetEntitlementRequest {
    const message = createBaseGetEntitlementRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEntitlementRequest(): CreateEntitlementRequest {
  return { parent: "", entitlementId: "", entitlement: undefined, requestId: "" };
}

export const CreateEntitlementRequest: MessageFns<CreateEntitlementRequest> = {
  encode(message: CreateEntitlementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.entitlementId !== "") {
      writer.uint32(18).string(message.entitlementId);
    }
    if (message.entitlement !== undefined) {
      Entitlement.encode(message.entitlement, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEntitlementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEntitlementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entitlementId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entitlement = Entitlement.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEntitlementRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entitlementId: isSet(object.entitlementId) ? globalThis.String(object.entitlementId) : "",
      entitlement: isSet(object.entitlement) ? Entitlement.fromJSON(object.entitlement) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateEntitlementRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entitlementId !== "") {
      obj.entitlementId = message.entitlementId;
    }
    if (message.entitlement !== undefined) {
      obj.entitlement = Entitlement.toJSON(message.entitlement);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEntitlementRequest>): CreateEntitlementRequest {
    return CreateEntitlementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEntitlementRequest>): CreateEntitlementRequest {
    const message = createBaseCreateEntitlementRequest();
    message.parent = object.parent ?? "";
    message.entitlementId = object.entitlementId ?? "";
    message.entitlement = (object.entitlement !== undefined && object.entitlement !== null)
      ? Entitlement.fromPartial(object.entitlement)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteEntitlementRequest(): DeleteEntitlementRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteEntitlementRequest: MessageFns<DeleteEntitlementRequest> = {
  encode(message: DeleteEntitlementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEntitlementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEntitlementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEntitlementRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteEntitlementRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEntitlementRequest>): DeleteEntitlementRequest {
    return DeleteEntitlementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEntitlementRequest>): DeleteEntitlementRequest {
    const message = createBaseDeleteEntitlementRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUpdateEntitlementRequest(): UpdateEntitlementRequest {
  return { entitlement: undefined, updateMask: undefined };
}

export const UpdateEntitlementRequest: MessageFns<UpdateEntitlementRequest> = {
  encode(message: UpdateEntitlementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entitlement !== undefined) {
      Entitlement.encode(message.entitlement, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEntitlementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEntitlementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entitlement = Entitlement.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEntitlementRequest {
    return {
      entitlement: isSet(object.entitlement) ? Entitlement.fromJSON(object.entitlement) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEntitlementRequest): unknown {
    const obj: any = {};
    if (message.entitlement !== undefined) {
      obj.entitlement = Entitlement.toJSON(message.entitlement);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEntitlementRequest>): UpdateEntitlementRequest {
    return UpdateEntitlementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEntitlementRequest>): UpdateEntitlementRequest {
    const message = createBaseUpdateEntitlementRequest();
    message.entitlement = (object.entitlement !== undefined && object.entitlement !== null)
      ? Entitlement.fromPartial(object.entitlement)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGrant(): Grant {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    requester: "",
    requestedDuration: undefined,
    justification: undefined,
    state: 0,
    timeline: undefined,
    privilegedAccess: undefined,
    auditTrail: undefined,
    additionalEmailRecipients: [],
    externallyModified: false,
  };
}

export const Grant: MessageFns<Grant> = {
  encode(message: Grant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.requester !== "") {
      writer.uint32(34).string(message.requester);
    }
    if (message.requestedDuration !== undefined) {
      Duration.encode(message.requestedDuration, writer.uint32(42).fork()).join();
    }
    if (message.justification !== undefined) {
      Justification.encode(message.justification, writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.timeline !== undefined) {
      Grant_Timeline.encode(message.timeline, writer.uint32(66).fork()).join();
    }
    if (message.privilegedAccess !== undefined) {
      PrivilegedAccess.encode(message.privilegedAccess, writer.uint32(74).fork()).join();
    }
    if (message.auditTrail !== undefined) {
      Grant_AuditTrail.encode(message.auditTrail, writer.uint32(82).fork()).join();
    }
    for (const v of message.additionalEmailRecipients) {
      writer.uint32(90).string(v!);
    }
    if (message.externallyModified !== false) {
      writer.uint32(96).bool(message.externallyModified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requester = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.requestedDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.justification = Justification.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.timeline = Grant_Timeline.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.privilegedAccess = PrivilegedAccess.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.auditTrail = Grant_AuditTrail.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.additionalEmailRecipients.push(reader.string());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.externallyModified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      requester: isSet(object.requester) ? globalThis.String(object.requester) : "",
      requestedDuration: isSet(object.requestedDuration) ? Duration.fromJSON(object.requestedDuration) : undefined,
      justification: isSet(object.justification) ? Justification.fromJSON(object.justification) : undefined,
      state: isSet(object.state) ? grant_StateFromJSON(object.state) : 0,
      timeline: isSet(object.timeline) ? Grant_Timeline.fromJSON(object.timeline) : undefined,
      privilegedAccess: isSet(object.privilegedAccess) ? PrivilegedAccess.fromJSON(object.privilegedAccess) : undefined,
      auditTrail: isSet(object.auditTrail) ? Grant_AuditTrail.fromJSON(object.auditTrail) : undefined,
      additionalEmailRecipients: globalThis.Array.isArray(object?.additionalEmailRecipients)
        ? object.additionalEmailRecipients.map((e: any) => globalThis.String(e))
        : [],
      externallyModified: isSet(object.externallyModified) ? globalThis.Boolean(object.externallyModified) : false,
    };
  },

  toJSON(message: Grant): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.requester !== "") {
      obj.requester = message.requester;
    }
    if (message.requestedDuration !== undefined) {
      obj.requestedDuration = Duration.toJSON(message.requestedDuration);
    }
    if (message.justification !== undefined) {
      obj.justification = Justification.toJSON(message.justification);
    }
    if (message.state !== 0) {
      obj.state = grant_StateToJSON(message.state);
    }
    if (message.timeline !== undefined) {
      obj.timeline = Grant_Timeline.toJSON(message.timeline);
    }
    if (message.privilegedAccess !== undefined) {
      obj.privilegedAccess = PrivilegedAccess.toJSON(message.privilegedAccess);
    }
    if (message.auditTrail !== undefined) {
      obj.auditTrail = Grant_AuditTrail.toJSON(message.auditTrail);
    }
    if (message.additionalEmailRecipients?.length) {
      obj.additionalEmailRecipients = message.additionalEmailRecipients;
    }
    if (message.externallyModified !== false) {
      obj.externallyModified = message.externallyModified;
    }
    return obj;
  },

  create(base?: DeepPartial<Grant>): Grant {
    return Grant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant>): Grant {
    const message = createBaseGrant();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.requester = object.requester ?? "";
    message.requestedDuration = (object.requestedDuration !== undefined && object.requestedDuration !== null)
      ? Duration.fromPartial(object.requestedDuration)
      : undefined;
    message.justification = (object.justification !== undefined && object.justification !== null)
      ? Justification.fromPartial(object.justification)
      : undefined;
    message.state = object.state ?? 0;
    message.timeline = (object.timeline !== undefined && object.timeline !== null)
      ? Grant_Timeline.fromPartial(object.timeline)
      : undefined;
    message.privilegedAccess = (object.privilegedAccess !== undefined && object.privilegedAccess !== null)
      ? PrivilegedAccess.fromPartial(object.privilegedAccess)
      : undefined;
    message.auditTrail = (object.auditTrail !== undefined && object.auditTrail !== null)
      ? Grant_AuditTrail.fromPartial(object.auditTrail)
      : undefined;
    message.additionalEmailRecipients = object.additionalEmailRecipients?.map((e) => e) || [];
    message.externallyModified = object.externallyModified ?? false;
    return message;
  },
};

function createBaseGrant_Timeline(): Grant_Timeline {
  return { events: [] };
}

export const Grant_Timeline: MessageFns<Grant_Timeline> = {
  encode(message: Grant_Timeline, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Grant_Timeline_Event.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.events.push(Grant_Timeline_Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline {
    return {
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => Grant_Timeline_Event.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Grant_Timeline): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Grant_Timeline_Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline>): Grant_Timeline {
    return Grant_Timeline.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline>): Grant_Timeline {
    const message = createBaseGrant_Timeline();
    message.events = object.events?.map((e) => Grant_Timeline_Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGrant_Timeline_Event(): Grant_Timeline_Event {
  return {
    requested: undefined,
    approved: undefined,
    denied: undefined,
    revoked: undefined,
    scheduled: undefined,
    activated: undefined,
    activationFailed: undefined,
    expired: undefined,
    ended: undefined,
    externallyModified: undefined,
    eventTime: undefined,
  };
}

export const Grant_Timeline_Event: MessageFns<Grant_Timeline_Event> = {
  encode(message: Grant_Timeline_Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requested !== undefined) {
      Grant_Timeline_Event_Requested.encode(message.requested, writer.uint32(18).fork()).join();
    }
    if (message.approved !== undefined) {
      Grant_Timeline_Event_Approved.encode(message.approved, writer.uint32(26).fork()).join();
    }
    if (message.denied !== undefined) {
      Grant_Timeline_Event_Denied.encode(message.denied, writer.uint32(34).fork()).join();
    }
    if (message.revoked !== undefined) {
      Grant_Timeline_Event_Revoked.encode(message.revoked, writer.uint32(42).fork()).join();
    }
    if (message.scheduled !== undefined) {
      Grant_Timeline_Event_Scheduled.encode(message.scheduled, writer.uint32(50).fork()).join();
    }
    if (message.activated !== undefined) {
      Grant_Timeline_Event_Activated.encode(message.activated, writer.uint32(58).fork()).join();
    }
    if (message.activationFailed !== undefined) {
      Grant_Timeline_Event_ActivationFailed.encode(message.activationFailed, writer.uint32(66).fork()).join();
    }
    if (message.expired !== undefined) {
      Grant_Timeline_Event_Expired.encode(message.expired, writer.uint32(82).fork()).join();
    }
    if (message.ended !== undefined) {
      Grant_Timeline_Event_Ended.encode(message.ended, writer.uint32(90).fork()).join();
    }
    if (message.externallyModified !== undefined) {
      Grant_Timeline_Event_ExternallyModified.encode(message.externallyModified, writer.uint32(98).fork()).join();
    }
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requested = Grant_Timeline_Event_Requested.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.approved = Grant_Timeline_Event_Approved.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.denied = Grant_Timeline_Event_Denied.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.revoked = Grant_Timeline_Event_Revoked.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scheduled = Grant_Timeline_Event_Scheduled.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.activated = Grant_Timeline_Event_Activated.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.activationFailed = Grant_Timeline_Event_ActivationFailed.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.expired = Grant_Timeline_Event_Expired.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.ended = Grant_Timeline_Event_Ended.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.externallyModified = Grant_Timeline_Event_ExternallyModified.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event {
    return {
      requested: isSet(object.requested) ? Grant_Timeline_Event_Requested.fromJSON(object.requested) : undefined,
      approved: isSet(object.approved) ? Grant_Timeline_Event_Approved.fromJSON(object.approved) : undefined,
      denied: isSet(object.denied) ? Grant_Timeline_Event_Denied.fromJSON(object.denied) : undefined,
      revoked: isSet(object.revoked) ? Grant_Timeline_Event_Revoked.fromJSON(object.revoked) : undefined,
      scheduled: isSet(object.scheduled) ? Grant_Timeline_Event_Scheduled.fromJSON(object.scheduled) : undefined,
      activated: isSet(object.activated) ? Grant_Timeline_Event_Activated.fromJSON(object.activated) : undefined,
      activationFailed: isSet(object.activationFailed)
        ? Grant_Timeline_Event_ActivationFailed.fromJSON(object.activationFailed)
        : undefined,
      expired: isSet(object.expired) ? Grant_Timeline_Event_Expired.fromJSON(object.expired) : undefined,
      ended: isSet(object.ended) ? Grant_Timeline_Event_Ended.fromJSON(object.ended) : undefined,
      externallyModified: isSet(object.externallyModified)
        ? Grant_Timeline_Event_ExternallyModified.fromJSON(object.externallyModified)
        : undefined,
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
    };
  },

  toJSON(message: Grant_Timeline_Event): unknown {
    const obj: any = {};
    if (message.requested !== undefined) {
      obj.requested = Grant_Timeline_Event_Requested.toJSON(message.requested);
    }
    if (message.approved !== undefined) {
      obj.approved = Grant_Timeline_Event_Approved.toJSON(message.approved);
    }
    if (message.denied !== undefined) {
      obj.denied = Grant_Timeline_Event_Denied.toJSON(message.denied);
    }
    if (message.revoked !== undefined) {
      obj.revoked = Grant_Timeline_Event_Revoked.toJSON(message.revoked);
    }
    if (message.scheduled !== undefined) {
      obj.scheduled = Grant_Timeline_Event_Scheduled.toJSON(message.scheduled);
    }
    if (message.activated !== undefined) {
      obj.activated = Grant_Timeline_Event_Activated.toJSON(message.activated);
    }
    if (message.activationFailed !== undefined) {
      obj.activationFailed = Grant_Timeline_Event_ActivationFailed.toJSON(message.activationFailed);
    }
    if (message.expired !== undefined) {
      obj.expired = Grant_Timeline_Event_Expired.toJSON(message.expired);
    }
    if (message.ended !== undefined) {
      obj.ended = Grant_Timeline_Event_Ended.toJSON(message.ended);
    }
    if (message.externallyModified !== undefined) {
      obj.externallyModified = Grant_Timeline_Event_ExternallyModified.toJSON(message.externallyModified);
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event>): Grant_Timeline_Event {
    return Grant_Timeline_Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event>): Grant_Timeline_Event {
    const message = createBaseGrant_Timeline_Event();
    message.requested = (object.requested !== undefined && object.requested !== null)
      ? Grant_Timeline_Event_Requested.fromPartial(object.requested)
      : undefined;
    message.approved = (object.approved !== undefined && object.approved !== null)
      ? Grant_Timeline_Event_Approved.fromPartial(object.approved)
      : undefined;
    message.denied = (object.denied !== undefined && object.denied !== null)
      ? Grant_Timeline_Event_Denied.fromPartial(object.denied)
      : undefined;
    message.revoked = (object.revoked !== undefined && object.revoked !== null)
      ? Grant_Timeline_Event_Revoked.fromPartial(object.revoked)
      : undefined;
    message.scheduled = (object.scheduled !== undefined && object.scheduled !== null)
      ? Grant_Timeline_Event_Scheduled.fromPartial(object.scheduled)
      : undefined;
    message.activated = (object.activated !== undefined && object.activated !== null)
      ? Grant_Timeline_Event_Activated.fromPartial(object.activated)
      : undefined;
    message.activationFailed = (object.activationFailed !== undefined && object.activationFailed !== null)
      ? Grant_Timeline_Event_ActivationFailed.fromPartial(object.activationFailed)
      : undefined;
    message.expired = (object.expired !== undefined && object.expired !== null)
      ? Grant_Timeline_Event_Expired.fromPartial(object.expired)
      : undefined;
    message.ended = (object.ended !== undefined && object.ended !== null)
      ? Grant_Timeline_Event_Ended.fromPartial(object.ended)
      : undefined;
    message.externallyModified = (object.externallyModified !== undefined && object.externallyModified !== null)
      ? Grant_Timeline_Event_ExternallyModified.fromPartial(object.externallyModified)
      : undefined;
    message.eventTime = object.eventTime ?? undefined;
    return message;
  },
};

function createBaseGrant_Timeline_Event_Requested(): Grant_Timeline_Event_Requested {
  return { expireTime: undefined };
}

export const Grant_Timeline_Event_Requested: MessageFns<Grant_Timeline_Event_Requested> = {
  encode(message: Grant_Timeline_Event_Requested, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Requested {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Requested();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event_Requested {
    return { expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined };
  },

  toJSON(message: Grant_Timeline_Event_Requested): unknown {
    const obj: any = {};
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Requested>): Grant_Timeline_Event_Requested {
    return Grant_Timeline_Event_Requested.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event_Requested>): Grant_Timeline_Event_Requested {
    const message = createBaseGrant_Timeline_Event_Requested();
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseGrant_Timeline_Event_Approved(): Grant_Timeline_Event_Approved {
  return { reason: "", actor: "" };
}

export const Grant_Timeline_Event_Approved: MessageFns<Grant_Timeline_Event_Approved> = {
  encode(message: Grant_Timeline_Event_Approved, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    if (message.actor !== "") {
      writer.uint32(18).string(message.actor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Approved {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Approved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event_Approved {
    return {
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
    };
  },

  toJSON(message: Grant_Timeline_Event_Approved): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Approved>): Grant_Timeline_Event_Approved {
    return Grant_Timeline_Event_Approved.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event_Approved>): Grant_Timeline_Event_Approved {
    const message = createBaseGrant_Timeline_Event_Approved();
    message.reason = object.reason ?? "";
    message.actor = object.actor ?? "";
    return message;
  },
};

function createBaseGrant_Timeline_Event_Denied(): Grant_Timeline_Event_Denied {
  return { reason: "", actor: "" };
}

export const Grant_Timeline_Event_Denied: MessageFns<Grant_Timeline_Event_Denied> = {
  encode(message: Grant_Timeline_Event_Denied, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    if (message.actor !== "") {
      writer.uint32(18).string(message.actor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Denied {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Denied();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event_Denied {
    return {
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
    };
  },

  toJSON(message: Grant_Timeline_Event_Denied): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Denied>): Grant_Timeline_Event_Denied {
    return Grant_Timeline_Event_Denied.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event_Denied>): Grant_Timeline_Event_Denied {
    const message = createBaseGrant_Timeline_Event_Denied();
    message.reason = object.reason ?? "";
    message.actor = object.actor ?? "";
    return message;
  },
};

function createBaseGrant_Timeline_Event_Revoked(): Grant_Timeline_Event_Revoked {
  return { reason: "", actor: "" };
}

export const Grant_Timeline_Event_Revoked: MessageFns<Grant_Timeline_Event_Revoked> = {
  encode(message: Grant_Timeline_Event_Revoked, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    if (message.actor !== "") {
      writer.uint32(18).string(message.actor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Revoked {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Revoked();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event_Revoked {
    return {
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
    };
  },

  toJSON(message: Grant_Timeline_Event_Revoked): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Revoked>): Grant_Timeline_Event_Revoked {
    return Grant_Timeline_Event_Revoked.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event_Revoked>): Grant_Timeline_Event_Revoked {
    const message = createBaseGrant_Timeline_Event_Revoked();
    message.reason = object.reason ?? "";
    message.actor = object.actor ?? "";
    return message;
  },
};

function createBaseGrant_Timeline_Event_Scheduled(): Grant_Timeline_Event_Scheduled {
  return { scheduledActivationTime: undefined };
}

export const Grant_Timeline_Event_Scheduled: MessageFns<Grant_Timeline_Event_Scheduled> = {
  encode(message: Grant_Timeline_Event_Scheduled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scheduledActivationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduledActivationTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Scheduled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Scheduled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scheduledActivationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event_Scheduled {
    return {
      scheduledActivationTime: isSet(object.scheduledActivationTime)
        ? fromJsonTimestamp(object.scheduledActivationTime)
        : undefined,
    };
  },

  toJSON(message: Grant_Timeline_Event_Scheduled): unknown {
    const obj: any = {};
    if (message.scheduledActivationTime !== undefined) {
      obj.scheduledActivationTime = message.scheduledActivationTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Scheduled>): Grant_Timeline_Event_Scheduled {
    return Grant_Timeline_Event_Scheduled.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event_Scheduled>): Grant_Timeline_Event_Scheduled {
    const message = createBaseGrant_Timeline_Event_Scheduled();
    message.scheduledActivationTime = object.scheduledActivationTime ?? undefined;
    return message;
  },
};

function createBaseGrant_Timeline_Event_Activated(): Grant_Timeline_Event_Activated {
  return {};
}

export const Grant_Timeline_Event_Activated: MessageFns<Grant_Timeline_Event_Activated> = {
  encode(_: Grant_Timeline_Event_Activated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Activated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Activated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Grant_Timeline_Event_Activated {
    return {};
  },

  toJSON(_: Grant_Timeline_Event_Activated): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Activated>): Grant_Timeline_Event_Activated {
    return Grant_Timeline_Event_Activated.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Grant_Timeline_Event_Activated>): Grant_Timeline_Event_Activated {
    const message = createBaseGrant_Timeline_Event_Activated();
    return message;
  },
};

function createBaseGrant_Timeline_Event_ActivationFailed(): Grant_Timeline_Event_ActivationFailed {
  return { error: undefined };
}

export const Grant_Timeline_Event_ActivationFailed: MessageFns<Grant_Timeline_Event_ActivationFailed> = {
  encode(message: Grant_Timeline_Event_ActivationFailed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_ActivationFailed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_ActivationFailed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_Timeline_Event_ActivationFailed {
    return { error: isSet(object.error) ? Status.fromJSON(object.error) : undefined };
  },

  toJSON(message: Grant_Timeline_Event_ActivationFailed): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_ActivationFailed>): Grant_Timeline_Event_ActivationFailed {
    return Grant_Timeline_Event_ActivationFailed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_Timeline_Event_ActivationFailed>): Grant_Timeline_Event_ActivationFailed {
    const message = createBaseGrant_Timeline_Event_ActivationFailed();
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseGrant_Timeline_Event_Expired(): Grant_Timeline_Event_Expired {
  return {};
}

export const Grant_Timeline_Event_Expired: MessageFns<Grant_Timeline_Event_Expired> = {
  encode(_: Grant_Timeline_Event_Expired, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Expired {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Expired();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Grant_Timeline_Event_Expired {
    return {};
  },

  toJSON(_: Grant_Timeline_Event_Expired): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Expired>): Grant_Timeline_Event_Expired {
    return Grant_Timeline_Event_Expired.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Grant_Timeline_Event_Expired>): Grant_Timeline_Event_Expired {
    const message = createBaseGrant_Timeline_Event_Expired();
    return message;
  },
};

function createBaseGrant_Timeline_Event_Ended(): Grant_Timeline_Event_Ended {
  return {};
}

export const Grant_Timeline_Event_Ended: MessageFns<Grant_Timeline_Event_Ended> = {
  encode(_: Grant_Timeline_Event_Ended, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_Ended {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_Ended();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Grant_Timeline_Event_Ended {
    return {};
  },

  toJSON(_: Grant_Timeline_Event_Ended): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_Ended>): Grant_Timeline_Event_Ended {
    return Grant_Timeline_Event_Ended.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Grant_Timeline_Event_Ended>): Grant_Timeline_Event_Ended {
    const message = createBaseGrant_Timeline_Event_Ended();
    return message;
  },
};

function createBaseGrant_Timeline_Event_ExternallyModified(): Grant_Timeline_Event_ExternallyModified {
  return {};
}

export const Grant_Timeline_Event_ExternallyModified: MessageFns<Grant_Timeline_Event_ExternallyModified> = {
  encode(_: Grant_Timeline_Event_ExternallyModified, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_Timeline_Event_ExternallyModified {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_Timeline_Event_ExternallyModified();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Grant_Timeline_Event_ExternallyModified {
    return {};
  },

  toJSON(_: Grant_Timeline_Event_ExternallyModified): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Grant_Timeline_Event_ExternallyModified>): Grant_Timeline_Event_ExternallyModified {
    return Grant_Timeline_Event_ExternallyModified.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Grant_Timeline_Event_ExternallyModified>): Grant_Timeline_Event_ExternallyModified {
    const message = createBaseGrant_Timeline_Event_ExternallyModified();
    return message;
  },
};

function createBaseGrant_AuditTrail(): Grant_AuditTrail {
  return { accessGrantTime: undefined, accessRemoveTime: undefined };
}

export const Grant_AuditTrail: MessageFns<Grant_AuditTrail> = {
  encode(message: Grant_AuditTrail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessGrantTime !== undefined) {
      Timestamp.encode(toTimestamp(message.accessGrantTime), writer.uint32(10).fork()).join();
    }
    if (message.accessRemoveTime !== undefined) {
      Timestamp.encode(toTimestamp(message.accessRemoveTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Grant_AuditTrail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant_AuditTrail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessGrantTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessRemoveTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant_AuditTrail {
    return {
      accessGrantTime: isSet(object.accessGrantTime) ? fromJsonTimestamp(object.accessGrantTime) : undefined,
      accessRemoveTime: isSet(object.accessRemoveTime) ? fromJsonTimestamp(object.accessRemoveTime) : undefined,
    };
  },

  toJSON(message: Grant_AuditTrail): unknown {
    const obj: any = {};
    if (message.accessGrantTime !== undefined) {
      obj.accessGrantTime = message.accessGrantTime.toISOString();
    }
    if (message.accessRemoveTime !== undefined) {
      obj.accessRemoveTime = message.accessRemoveTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Grant_AuditTrail>): Grant_AuditTrail {
    return Grant_AuditTrail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Grant_AuditTrail>): Grant_AuditTrail {
    const message = createBaseGrant_AuditTrail();
    message.accessGrantTime = object.accessGrantTime ?? undefined;
    message.accessRemoveTime = object.accessRemoveTime ?? undefined;
    return message;
  },
};

function createBaseJustification(): Justification {
  return { unstructuredJustification: undefined };
}

export const Justification: MessageFns<Justification> = {
  encode(message: Justification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unstructuredJustification !== undefined) {
      writer.uint32(10).string(message.unstructuredJustification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Justification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJustification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.unstructuredJustification = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Justification {
    return {
      unstructuredJustification: isSet(object.unstructuredJustification)
        ? globalThis.String(object.unstructuredJustification)
        : undefined,
    };
  },

  toJSON(message: Justification): unknown {
    const obj: any = {};
    if (message.unstructuredJustification !== undefined) {
      obj.unstructuredJustification = message.unstructuredJustification;
    }
    return obj;
  },

  create(base?: DeepPartial<Justification>): Justification {
    return Justification.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Justification>): Justification {
    const message = createBaseJustification();
    message.unstructuredJustification = object.unstructuredJustification ?? undefined;
    return message;
  },
};

function createBaseListGrantsRequest(): ListGrantsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListGrantsRequest: MessageFns<ListGrantsRequest> = {
  encode(message: ListGrantsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGrantsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGrantsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListGrantsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGrantsRequest>): ListGrantsRequest {
    return ListGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGrantsRequest>): ListGrantsRequest {
    const message = createBaseListGrantsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListGrantsResponse(): ListGrantsResponse {
  return { grants: [], nextPageToken: "", unreachable: [] };
}

export const ListGrantsResponse: MessageFns<ListGrantsResponse> = {
  encode(message: ListGrantsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.grants) {
      Grant.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGrantsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grants.push(Grant.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGrantsResponse {
    return {
      grants: globalThis.Array.isArray(object?.grants) ? object.grants.map((e: any) => Grant.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListGrantsResponse): unknown {
    const obj: any = {};
    if (message.grants?.length) {
      obj.grants = message.grants.map((e) => Grant.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGrantsResponse>): ListGrantsResponse {
    return ListGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGrantsResponse>): ListGrantsResponse {
    const message = createBaseListGrantsResponse();
    message.grants = object.grants?.map((e) => Grant.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseSearchGrantsRequest(): SearchGrantsRequest {
  return { parent: "", callerRelationship: 0, filter: "", pageSize: 0, pageToken: "" };
}

export const SearchGrantsRequest: MessageFns<SearchGrantsRequest> = {
  encode(message: SearchGrantsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.callerRelationship !== 0) {
      writer.uint32(16).int32(message.callerRelationship);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchGrantsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.callerRelationship = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchGrantsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      callerRelationship: isSet(object.callerRelationship)
        ? searchGrantsRequest_CallerRelationshipTypeFromJSON(object.callerRelationship)
        : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchGrantsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.callerRelationship !== 0) {
      obj.callerRelationship = searchGrantsRequest_CallerRelationshipTypeToJSON(message.callerRelationship);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchGrantsRequest>): SearchGrantsRequest {
    return SearchGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchGrantsRequest>): SearchGrantsRequest {
    const message = createBaseSearchGrantsRequest();
    message.parent = object.parent ?? "";
    message.callerRelationship = object.callerRelationship ?? 0;
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchGrantsResponse(): SearchGrantsResponse {
  return { grants: [], nextPageToken: "" };
}

export const SearchGrantsResponse: MessageFns<SearchGrantsResponse> = {
  encode(message: SearchGrantsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.grants) {
      Grant.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchGrantsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grants.push(Grant.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchGrantsResponse {
    return {
      grants: globalThis.Array.isArray(object?.grants) ? object.grants.map((e: any) => Grant.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchGrantsResponse): unknown {
    const obj: any = {};
    if (message.grants?.length) {
      obj.grants = message.grants.map((e) => Grant.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchGrantsResponse>): SearchGrantsResponse {
    return SearchGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchGrantsResponse>): SearchGrantsResponse {
    const message = createBaseSearchGrantsResponse();
    message.grants = object.grants?.map((e) => Grant.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetGrantRequest(): GetGrantRequest {
  return { name: "" };
}

export const GetGrantRequest: MessageFns<GetGrantRequest> = {
  encode(message: GetGrantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGrantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGrantRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGrantRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGrantRequest>): GetGrantRequest {
    return GetGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGrantRequest>): GetGrantRequest {
    const message = createBaseGetGrantRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseApproveGrantRequest(): ApproveGrantRequest {
  return { name: "", reason: "" };
}

export const ApproveGrantRequest: MessageFns<ApproveGrantRequest> = {
  encode(message: ApproveGrantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveGrantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveGrantRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: ApproveGrantRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create(base?: DeepPartial<ApproveGrantRequest>): ApproveGrantRequest {
    return ApproveGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApproveGrantRequest>): ApproveGrantRequest {
    const message = createBaseApproveGrantRequest();
    message.name = object.name ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseDenyGrantRequest(): DenyGrantRequest {
  return { name: "", reason: "" };
}

export const DenyGrantRequest: MessageFns<DenyGrantRequest> = {
  encode(message: DenyGrantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DenyGrantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenyGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DenyGrantRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: DenyGrantRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create(base?: DeepPartial<DenyGrantRequest>): DenyGrantRequest {
    return DenyGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DenyGrantRequest>): DenyGrantRequest {
    const message = createBaseDenyGrantRequest();
    message.name = object.name ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseRevokeGrantRequest(): RevokeGrantRequest {
  return { name: "", reason: "" };
}

export const RevokeGrantRequest: MessageFns<RevokeGrantRequest> = {
  encode(message: RevokeGrantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevokeGrantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevokeGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevokeGrantRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: RevokeGrantRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create(base?: DeepPartial<RevokeGrantRequest>): RevokeGrantRequest {
    return RevokeGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevokeGrantRequest>): RevokeGrantRequest {
    const message = createBaseRevokeGrantRequest();
    message.name = object.name ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseCreateGrantRequest(): CreateGrantRequest {
  return { parent: "", grant: undefined, requestId: "" };
}

export const CreateGrantRequest: MessageFns<CreateGrantRequest> = {
  encode(message: CreateGrantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.grant !== undefined) {
      Grant.encode(message.grant, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGrantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grant = Grant.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGrantRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      grant: isSet(object.grant) ? Grant.fromJSON(object.grant) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateGrantRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.grant !== undefined) {
      obj.grant = Grant.toJSON(message.grant);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGrantRequest>): CreateGrantRequest {
    return CreateGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGrantRequest>): CreateGrantRequest {
    const message = createBaseCreateGrantRequest();
    message.parent = object.parent ?? "";
    message.grant = (object.grant !== undefined && object.grant !== null) ? Grant.fromPartial(object.grant) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * This API allows customers to manage temporary, request based privileged
 * access to their resources.
 *
 * It defines the following resource model:
 *
 * * A collection of `Entitlement` resources. An entitlement allows configuring
 *   (among other things):
 *
 *   * Some kind of privileged access that users can request.
 *   * A set of users called _requesters_ who can request this access.
 *   * A maximum duration for which the access can be requested.
 *   * An optional approval workflow which must be satisfied before access is
 *     granted.
 *
 * * A collection of `Grant` resources. A grant is a request by a requester to
 *   get the privileged access specified in an entitlement for some duration.
 *
 *   After the approval workflow as specified in the entitlement is satisfied,
 *   the specified access is given to the requester. The access is automatically
 *   taken back after the requested duration is over.
 */
export type PrivilegedAccessManagerDefinition = typeof PrivilegedAccessManagerDefinition;
export const PrivilegedAccessManagerDefinition = {
  name: "PrivilegedAccessManager",
  fullName: "google.cloud.privilegedaccessmanager.v1.PrivilegedAccessManager",
  methods: {
    /**
     * CheckOnboardingStatus reports the onboarding status for a
     * project/folder/organization. Any findings reported by this API need to be
     * fixed before PAM can be used on the resource.
     */
    checkOnboardingStatus: {
      name: "CheckOnboardingStatus",
      requestType: CheckOnboardingStatusRequest,
      requestStream: false,
      responseType: CheckOnboardingStatusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              185,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              117,
              115,
              90,
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              117,
              115,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
              79,
              110,
              98,
              111,
              97,
              114,
              100,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists entitlements in a given project/folder/organization and location. */
    listEntitlements: {
      name: "ListEntitlements",
      requestType: ListEntitlementsRequest,
      requestStream: false,
      responseType: ListEntitlementsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              158,
              1,
              90,
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              90,
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * `SearchEntitlements` returns entitlements on which the caller has the
     * specified access.
     */
    searchEntitlements: {
      name: "SearchEntitlements",
      requestType: SearchEntitlementsRequest,
      requestStream: false,
      responseType: SearchEntitlementsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              179,
              1,
              90,
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              90,
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single entitlement. */
    getEntitlement: {
      name: "GetEntitlement",
      requestType: GetEntitlementRequest,
      requestStream: false,
      responseType: Entitlement,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              158,
              1,
              90,
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new entitlement in a given project/folder/organization and
     * location.
     */
    createEntitlement: {
      name: "CreateEntitlement",
      requestType: CreateEntitlementRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              69,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              197,
              1,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              90,
              68,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              90,
              62,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a single entitlement. This method can only be called when there
     * are no in-progress (ACTIVE/ACTIVATING/REVOKING) grants under the
     * entitlement.
     */
    deleteEntitlement: {
      name: "DeleteEntitlement",
      requestType: DeleteEntitlementRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              69,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              158,
              1,
              90,
              55,
              42,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the entitlement specified in the request. Updated fields in the
     * entitlement need to be specified in an update mask. The changes made to an
     * entitlement are applicable only on future grants of the entitlement.
     * However, if new approvers are added or existing approvers are removed from
     * the approval workflow, the changes are effective on existing grants.
     *
     * The following fields are not supported for updates:
     *
     *  * All immutable fields
     *  * Entitlement name
     *  * Resource name
     *  * Resource type
     *  * Adding an approval workflow in an entitlement which previously had no
     *    approval workflow.
     *  * Deleting the approval workflow from an entitlement.
     *  * Adding or deleting a step in the approval workflow (only one step is
     *    supported)
     *
     * Note that updates are allowed on the list of approvers in an approval
     * workflow step.
     */
    updateEntitlement: {
      name: "UpdateEntitlement",
      requestType: UpdateEntitlementRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              69,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              233,
              1,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              90,
              80,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              74,
              58,
              11,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              50,
              60,
              47,
              118,
              49,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists grants for a given entitlement. */
    listGrants: {
      name: "ListGrants",
      requestType: ListGrantsRequest,
      requestStream: false,
      responseType: ListGrantsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              185,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              90,
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * `SearchGrants` returns grants that are related to the calling user in the
     * specified way.
     */
    searchGrants: {
      name: "SearchGrants",
      requestType: SearchGrantsRequest,
      requestStream: false,
      responseType: SearchGrantsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              206,
              1,
              90,
              71,
              18,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              64,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Get details of a single grant. */
    getGrant: {
      name: "GetGrant",
      requestType: GetGrantRequest,
      requestStream: false,
      responseType: Grant,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              185,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              90,
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new grant in a given project and location. */
    createGrant: {
      name: "CreateGrant",
      requestType: CreateGrantRequest,
      requestStream: false,
      responseType: Grant,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 103, 114, 97, 110, 116])],
          578365826: [
            Buffer.from([
              206,
              1,
              58,
              5,
              103,
              114,
              97,
              110,
              116,
              90,
              71,
              58,
              5,
              103,
              114,
              97,
              110,
              116,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              90,
              65,
              58,
              5,
              103,
              114,
              97,
              110,
              116,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * `ApproveGrant` is used to approve a grant. This method can only be called
     * on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
     * be undone.
     */
    approveGrant: {
      name: "ApproveGrant",
      requestType: ApproveGrantRequest,
      requestStream: false,
      responseType: Grant,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              218,
              1,
              58,
              1,
              42,
              90,
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              112,
              112,
              114,
              111,
              118,
              101,
              90,
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              112,
              112,
              114,
              111,
              118,
              101,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              112,
              112,
              114,
              111,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * `DenyGrant` is used to deny a grant. This method can only be called on a
     * grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
     * undone.
     */
    denyGrant: {
      name: "DenyGrant",
      requestType: DenyGrantRequest,
      requestStream: false,
      responseType: Grant,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              209,
              1,
              58,
              1,
              42,
              90,
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              110,
              121,
              90,
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              110,
              121,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              110,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * `RevokeGrant` is used to immediately revoke access for a grant. This method
     * can be called when the grant is in a non-terminal state.
     */
    revokeGrant: {
      name: "RevokeGrant",
      requestType: RevokeGrantRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              71,
              114,
              97,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              215,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              118,
              111,
              107,
              101,
              90,
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              118,
              111,
              107,
              101,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              118,
              111,
              107,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PrivilegedAccessManagerServiceImplementation<CallContextExt = {}> {
  /**
   * CheckOnboardingStatus reports the onboarding status for a
   * project/folder/organization. Any findings reported by this API need to be
   * fixed before PAM can be used on the resource.
   */
  checkOnboardingStatus(
    request: CheckOnboardingStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CheckOnboardingStatusResponse>>;
  /** Lists entitlements in a given project/folder/organization and location. */
  listEntitlements(
    request: ListEntitlementsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEntitlementsResponse>>;
  /**
   * `SearchEntitlements` returns entitlements on which the caller has the
   * specified access.
   */
  searchEntitlements(
    request: SearchEntitlementsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchEntitlementsResponse>>;
  /** Gets details of a single entitlement. */
  getEntitlement(
    request: GetEntitlementRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Entitlement>>;
  /**
   * Creates a new entitlement in a given project/folder/organization and
   * location.
   */
  createEntitlement(
    request: CreateEntitlementRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a single entitlement. This method can only be called when there
   * are no in-progress (ACTIVE/ACTIVATING/REVOKING) grants under the
   * entitlement.
   */
  deleteEntitlement(
    request: DeleteEntitlementRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the entitlement specified in the request. Updated fields in the
   * entitlement need to be specified in an update mask. The changes made to an
   * entitlement are applicable only on future grants of the entitlement.
   * However, if new approvers are added or existing approvers are removed from
   * the approval workflow, the changes are effective on existing grants.
   *
   * The following fields are not supported for updates:
   *
   *  * All immutable fields
   *  * Entitlement name
   *  * Resource name
   *  * Resource type
   *  * Adding an approval workflow in an entitlement which previously had no
   *    approval workflow.
   *  * Deleting the approval workflow from an entitlement.
   *  * Adding or deleting a step in the approval workflow (only one step is
   *    supported)
   *
   * Note that updates are allowed on the list of approvers in an approval
   * workflow step.
   */
  updateEntitlement(
    request: UpdateEntitlementRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists grants for a given entitlement. */
  listGrants(
    request: ListGrantsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGrantsResponse>>;
  /**
   * `SearchGrants` returns grants that are related to the calling user in the
   * specified way.
   */
  searchGrants(
    request: SearchGrantsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchGrantsResponse>>;
  /** Get details of a single grant. */
  getGrant(request: GetGrantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Grant>>;
  /** Creates a new grant in a given project and location. */
  createGrant(request: CreateGrantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Grant>>;
  /**
   * `ApproveGrant` is used to approve a grant. This method can only be called
   * on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
   * be undone.
   */
  approveGrant(request: ApproveGrantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Grant>>;
  /**
   * `DenyGrant` is used to deny a grant. This method can only be called on a
   * grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
   * undone.
   */
  denyGrant(request: DenyGrantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Grant>>;
  /**
   * `RevokeGrant` is used to immediately revoke access for a grant. This method
   * can be called when the grant is in a non-terminal state.
   */
  revokeGrant(request: RevokeGrantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface PrivilegedAccessManagerClient<CallOptionsExt = {}> {
  /**
   * CheckOnboardingStatus reports the onboarding status for a
   * project/folder/organization. Any findings reported by this API need to be
   * fixed before PAM can be used on the resource.
   */
  checkOnboardingStatus(
    request: DeepPartial<CheckOnboardingStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CheckOnboardingStatusResponse>;
  /** Lists entitlements in a given project/folder/organization and location. */
  listEntitlements(
    request: DeepPartial<ListEntitlementsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEntitlementsResponse>;
  /**
   * `SearchEntitlements` returns entitlements on which the caller has the
   * specified access.
   */
  searchEntitlements(
    request: DeepPartial<SearchEntitlementsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchEntitlementsResponse>;
  /** Gets details of a single entitlement. */
  getEntitlement(
    request: DeepPartial<GetEntitlementRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Entitlement>;
  /**
   * Creates a new entitlement in a given project/folder/organization and
   * location.
   */
  createEntitlement(
    request: DeepPartial<CreateEntitlementRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a single entitlement. This method can only be called when there
   * are no in-progress (ACTIVE/ACTIVATING/REVOKING) grants under the
   * entitlement.
   */
  deleteEntitlement(
    request: DeepPartial<DeleteEntitlementRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the entitlement specified in the request. Updated fields in the
   * entitlement need to be specified in an update mask. The changes made to an
   * entitlement are applicable only on future grants of the entitlement.
   * However, if new approvers are added or existing approvers are removed from
   * the approval workflow, the changes are effective on existing grants.
   *
   * The following fields are not supported for updates:
   *
   *  * All immutable fields
   *  * Entitlement name
   *  * Resource name
   *  * Resource type
   *  * Adding an approval workflow in an entitlement which previously had no
   *    approval workflow.
   *  * Deleting the approval workflow from an entitlement.
   *  * Adding or deleting a step in the approval workflow (only one step is
   *    supported)
   *
   * Note that updates are allowed on the list of approvers in an approval
   * workflow step.
   */
  updateEntitlement(
    request: DeepPartial<UpdateEntitlementRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists grants for a given entitlement. */
  listGrants(
    request: DeepPartial<ListGrantsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGrantsResponse>;
  /**
   * `SearchGrants` returns grants that are related to the calling user in the
   * specified way.
   */
  searchGrants(
    request: DeepPartial<SearchGrantsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchGrantsResponse>;
  /** Get details of a single grant. */
  getGrant(request: DeepPartial<GetGrantRequest>, options?: CallOptions & CallOptionsExt): Promise<Grant>;
  /** Creates a new grant in a given project and location. */
  createGrant(request: DeepPartial<CreateGrantRequest>, options?: CallOptions & CallOptionsExt): Promise<Grant>;
  /**
   * `ApproveGrant` is used to approve a grant. This method can only be called
   * on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
   * be undone.
   */
  approveGrant(request: DeepPartial<ApproveGrantRequest>, options?: CallOptions & CallOptionsExt): Promise<Grant>;
  /**
   * `DenyGrant` is used to deny a grant. This method can only be called on a
   * grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
   * undone.
   */
  denyGrant(request: DeepPartial<DenyGrantRequest>, options?: CallOptions & CallOptionsExt): Promise<Grant>;
  /**
   * `RevokeGrant` is used to immediately revoke access for a grant. This method
   * can be called when the grant is in a non-terminal state.
   */
  revokeGrant(request: DeepPartial<RevokeGrantRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
