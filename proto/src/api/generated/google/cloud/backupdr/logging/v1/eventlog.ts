// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/backupdr/logging/v1/eventlog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.backupdr.logging.v1";

/** This is an event */
export interface Event {
  /** The event_time field displays the time when the event was reported */
  eventTime: string;
  /**
   * The srcid field displays unique id of the event occurred in the backup
   * appliance
   */
  srcid: Long;
  /**
   * The errormessage field describes the detailed error associated with the
   * event
   */
  errorMessage: string;
  /** The event_id field displays unique id associated with the error */
  eventId: number;
  /** The component field displays the source of the event */
  component: string;
  /**
   * The appliance_id field displays unique id of the appliance on which event
   * occurred
   */
  applianceName: Long;
  /**
   * The appname field displays name of the application associated with the
   * event
   */
  appName: string;
  /**
   * The apptype field displays type of the application associated with the
   * event
   */
  appType: string;
  /** The jobname field displays name of the job associated with the event */
  jobName: string;
}

function createBaseEvent(): Event {
  return {
    eventTime: "",
    srcid: Long.ZERO,
    errorMessage: "",
    eventId: 0,
    component: "",
    applianceName: Long.ZERO,
    appName: "",
    appType: "",
    jobName: "",
  };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventTime !== "") {
      writer.uint32(10).string(message.eventTime);
    }
    if (!message.srcid.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.srcid.toString());
    }
    if (message.errorMessage !== "") {
      writer.uint32(26).string(message.errorMessage);
    }
    if (message.eventId !== 0) {
      writer.uint32(32).int32(message.eventId);
    }
    if (message.component !== "") {
      writer.uint32(42).string(message.component);
    }
    if (!message.applianceName.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.applianceName.toString());
    }
    if (message.appName !== "") {
      writer.uint32(58).string(message.appName);
    }
    if (message.appType !== "") {
      writer.uint32(66).string(message.appType);
    }
    if (message.jobName !== "") {
      writer.uint32(74).string(message.jobName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventTime = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.srcid = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.eventId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.component = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.applianceName = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.appName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.appType = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.jobName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      eventTime: isSet(object.eventTime) ? globalThis.String(object.eventTime) : "",
      srcid: isSet(object.srcid) ? Long.fromValue(object.srcid) : Long.ZERO,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
      component: isSet(object.component) ? globalThis.String(object.component) : "",
      applianceName: isSet(object.applianceName) ? Long.fromValue(object.applianceName) : Long.ZERO,
      appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
      appType: isSet(object.appType) ? globalThis.String(object.appType) : "",
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.eventTime !== "") {
      obj.eventTime = message.eventTime;
    }
    if (!message.srcid.equals(Long.ZERO)) {
      obj.srcid = (message.srcid || Long.ZERO).toString();
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.eventId !== 0) {
      obj.eventId = Math.round(message.eventId);
    }
    if (message.component !== "") {
      obj.component = message.component;
    }
    if (!message.applianceName.equals(Long.ZERO)) {
      obj.applianceName = (message.applianceName || Long.ZERO).toString();
    }
    if (message.appName !== "") {
      obj.appName = message.appName;
    }
    if (message.appType !== "") {
      obj.appType = message.appType;
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.eventTime = object.eventTime ?? "";
    message.srcid = (object.srcid !== undefined && object.srcid !== null) ? Long.fromValue(object.srcid) : Long.ZERO;
    message.errorMessage = object.errorMessage ?? "";
    message.eventId = object.eventId ?? 0;
    message.component = object.component ?? "";
    message.applianceName = (object.applianceName !== undefined && object.applianceName !== null)
      ? Long.fromValue(object.applianceName)
      : Long.ZERO;
    message.appName = object.appName ?? "";
    message.appType = object.appType ?? "";
    message.jobName = object.jobName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
