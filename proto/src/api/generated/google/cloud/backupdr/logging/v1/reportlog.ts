// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/backupdr/logging/v1/reportlog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.backupdr.logging.v1";

/** This is a BackupRecoveryJobReportLog published as part of GCBDR Reporting. */
export interface BackupRecoveryJobReportLog {
  /** The job_name field displays the name of the job being reported. */
  jobName: string;
  /**
   * The job_name field displays the category of the job whether it is Backup or
   * Recovery Job.
   */
  jobCategory: string;
  /** The job_type field displays the type of the job. */
  jobType: string;
  /**
   * The log_backup field displays whether the backup taken is only for logs, DB
   * or both.
   */
  logBackup: string;
  /** The job_status field displays the status of the job. */
  jobStatus: string;
  /** The resource_name field displays the name of the resource. */
  resourceName: string;
  /** The resource_type field displays the type of the resource. */
  resourceType: string;
  /** The error_code field displays the error code. */
  errorCode: number;
  /**
   * The error_message field displays the error message if the job is not
   * successful.
   */
  errorMessage: string;
  /**
   * The job_initiation_failure_reason field displays the reason for failure,
   * if the job was not run.
   */
  jobInitiationFailureReason: string;
  /** The job_start_time field displays the timestamp when the job started. */
  jobStartTime: string;
  /** The job_end_time field displays the timestamp when the job ended. */
  jobEndTime: string;
  /**
   * The job_queued_time field displays the timestamp when the job was
   * queued for running.
   */
  jobQueuedTime: string;
  /**
   * The job_duration_in_hours field displays the duration in hours which the
   * job took to complete.
   */
  jobDurationInHours: number;
  /** The hostname field displays the name of the host. */
  hostname: string;
  /** The appliance_name field displays the name of the backup appliance. */
  applianceName: string;
  /**
   * The backup_rule_policy_name field displays the policy name which is
   * associated with this job.
   */
  backupRulePolicyName: string;
  /**
   * The backup_plan_policy_template field displays the name of the backup plan
   * for this application.
   */
  backupPlanPolicyTemplate: string;
  /**
   * The backup_type field displays the type of backup taken: Log, Incremental
   * or Full Copy.
   */
  backupType: string;
  /** The recovery_point field displays the timestamp of recovery point. */
  recoveryPoint: string;
  /**
   * The backup_consistency field displays whether the backup is crash
   * consistent or application consistent.
   */
  backupConsistency: string;
  /** The target_host_name field displays the target host name. */
  targetHostName: string;
  /** The target_appliance_name field displays the target appliance name. */
  targetApplianceName: string;
  /** The target_pool_name field displays target pool name. */
  targetPoolName: string;
  /** The resource_data_size_in_gib field displays resource data size in Gib. */
  resourceDataSizeInGib: number;
  /**
   * The data_copied_in_gib field displays the amount of the data copied
   * during backup in Gib.
   */
  dataCopiedInGib: number;
  /**
   * The onvault_pool_storage_consumed_in_gib field displays the amount of
   * onvault pool storage consumed in Gib.
   */
  onvaultPoolStorageConsumedInGib: number;
  /** The pre_compress_in_gib field displays the size before compression in Gib. */
  preCompressInGib: number;
  /**
   * The compression_ratio field displays the ratio of post compression size to
   * pre compression size.
   */
  compressionRatio: number;
  /**
   * The data_change_rate field displays the percentage of data copied during
   * backup to application size.
   */
  dataChangeRate: number;
  /** The snapshot_disk_size_in_gib field displays the snapshot disk size in Gib. */
  snapshotDiskSizeInGib: number;
  /**
   * The data_written_in_gib field displays the amount of
   * remote data written in Gib.
   */
  dataWrittenInGib: number;
  /**
   * The data_sent_in_gib field displays the amount of
   * network data sent in Gib.
   */
  dataSentInGib: number;
  /** The job_id field displays the id of the job being reported. */
  jobId: string;
  /** The host_id field displays the host id. */
  hostId: string;
  /** The backup_rule_policy_id field displays the policy id. */
  backupRulePolicyId: string;
  /** The resource_id field displays the resource id. */
  resourceId: string;
  /** The target_pool_id field displays the target pool id. */
  targetPoolId: string;
  /** The target_host_id field displays the target host id. */
  targetHostId: string;
  /** The target_appliance_id field displays the target appliance id. */
  targetApplianceId: string;
}

/**
 * This is a UnprotectedResourceLogReport published as part of GCBDR
 * Reporting.
 */
export interface UnprotectedResourceReportLog {
  /** Required. Name of the host where the application/resource resides. */
  hostName: string;
  /** Required. Name of the application/resource. */
  resourceName: string;
  /** Required. Type of the application/resource. */
  resourceType: string;
  /** Optional. Name of the database instance for instance members. */
  instanceName: string;
  /** Required. Date when the Appliance was Discovered first. */
  discoveredOn: string;
  /** Required. Name of the appliance on which it was discovered. */
  discoveredBy: string;
  /** Required. Id of the Appliance */
  applianceId: string;
  /** Required. Id of the application/resource */
  resourceId: string;
  /** Required. Id of the Host where the application/resource resides. */
  hostId: string;
}

/**
 * This is a DailyScheduleComplianceReportLog published as part of GCBDR
 * Reporting.
 */
export interface DailyScheduleComplianceReportLog {
  /** Required. Resource/App Name. */
  resourceName: string;
  /** Required. Resource/App Type. */
  resourceType: string;
  /** Required. Policy Name. */
  backupRulePolicyName: string;
  /** Required. Policy Template Name. */
  backupPlanPolicyTemplate: string;
  /** Required. Name of the host where the app/resource resides. */
  hostName: string;
  /** Required. Appliance Name. */
  applianceName: string;
  /** Required. Date for which compliance is being reported. */
  date: string;
  /** Required. Backup Window Start time. */
  backupWindowStartTime: string;
  /** Required. JobType of the policy. */
  jobType: string;
  /** Required. Compliance status for the policy. */
  status: string;
  /** Required. Description for the status reason. */
  comment: string;
  /** Required. Resource/App Id. */
  resourceId: string;
  /** Required. Host Id. */
  hostId: string;
  /** Required. Policy Template Id */
  backupPlanPolicyTemplateId: string;
  /** Required. Policy Id. */
  backupRulePolicyId: string;
  /** Required. Appliance Id. */
  applianceId: string;
}

/**
 * This is a BackupStorageUtilizationReportLog published as part of GCBDR
 * Reporting.
 */
export interface BackupStorageUtilizationReportLog {
  /** Optional. The appliance name. */
  applianceName: string;
  /** Required. The storage resource type. */
  storageType: string;
  /** Required. The storage pool name. */
  poolName: string;
  /** Required. Total capacity of the pool in GiB. */
  totalCapacityInGib: number;
  /** Required. Used capacity of the pool in GiB. */
  usedCapacityInGib: number;
  /** Required. Utilization percentage of a storage pool. */
  utilizationPercentage: number;
  /** Required. Appliance id. */
  applianceId: string;
}

/** Holds information for the Protected Resource */
export interface ProtectedResource {
  /** Required. Resource name. */
  resourceName: string;
  /** Required. Resource Type. */
  resourceType: string;
  /** Required. Resource ID. */
  resourceId: string;
  /** Optional. Backup Inclusion/Exclusion. */
  backupInclusionOrExclusion: string;
  /** Required. Host Id. */
  hostId: string;
  /** Required. Host Name. */
  hostName: string;
  /** Required. Backup Template ID. */
  backupPlanPolicyTemplateId: string;
  /** Required. Backup Template. */
  backupPlanPolicyTemplate: string;
  /** Required. Sla Id. */
  slaId: string;
  /** Required. Backup Plan restrictions. */
  backupPlanRestrictions: string;
  /** Required. Protected On. */
  protectedOn: string;
  /** Optional. Policy Overrides. */
  policyOverrides: string;
  /** Optional. Source Appliance in case of streamsnap. */
  sourceAppliance: string;
  /** Optional. Source Appliance Id in case of streamsnap. */
  sourceApplianceId: string;
  /** Required. Protected Data (GiB). */
  protectedDataInGib: number;
  /** Optional. Onvault (GiB) . */
  onvaultInGib: number;
  /** Optional. Originating Appliance in case of streamsnap. */
  applianceName: string;
  /** Optional. Originating Appliance id in case of streamsnap. */
  applianceId: string;
  /** Optional. Remote Appliance in case of streamsnap. */
  remoteAppliance: string;
  /** Optional. Remote Appliance id in case of streamsnap. */
  remoteApplianceId: string;
  /** Optional. Recovery Point. */
  recoveryPoint: string;
}

/** Holds information for the Mounted Images log */
export interface MountedImage {
  /** Required. Source Resource name. */
  sourceResourceName: string;
  /** Required. Source Resource id. */
  sourceResourceId: string;
  /** Required. Cluster Name. */
  applianceName: string;
  /** Required. Cluster Id. */
  applianceId: string;
  /** Required. Mounted Image Name. */
  mountedImageName: string;
  /** Required. Source Image Name. */
  sourceImageName: string;
  /** Required.Source Image Type. */
  sourceImageType: string;
  /** Required. Recovery point Date. */
  recoveryPointDate: string;
  /** Required. Last Mount Date */
  lastMountDate: string;
  /** Required. Resource type. */
  resourceType: string;
  /** Required. Source Host Name. */
  sourceHostName: string;
  /** Required. Source Host Id. */
  sourceHostId: string;
  /** Required. Mounted Host Name. */
  mountedHostName: string;
  /** Required. Mounted Host Id. */
  mountedHostId: string;
  /** Required. Mounted Resource Name. */
  mountedResourceName: string;
  /** Required. Resource Virtual size(in GiB) */
  resourceVirtualSizeInGib: number;
  /** Required. Storage Consumed(in GiB). */
  storageConsumedInGib: number;
  /** Optional. label. */
  mountedResourceLabel: string;
  /** Optional. Restorable Objects. */
  restorableObject: string;
  /** Required. Mounted Image Age(in days). */
  mountedImageAgeInDays: number;
  /** Required. User Name. */
  userName: string;
  /** Optional. Read Mode. */
  readMode: string;
  /** Required. Resource size(in GiB) */
  resourceSizeInGib: number;
  /** Optional. Image Expiration Date */
  imageExpirationDate: string;
}

function createBaseBackupRecoveryJobReportLog(): BackupRecoveryJobReportLog {
  return {
    jobName: "",
    jobCategory: "",
    jobType: "",
    logBackup: "",
    jobStatus: "",
    resourceName: "",
    resourceType: "",
    errorCode: 0,
    errorMessage: "",
    jobInitiationFailureReason: "",
    jobStartTime: "",
    jobEndTime: "",
    jobQueuedTime: "",
    jobDurationInHours: 0,
    hostname: "",
    applianceName: "",
    backupRulePolicyName: "",
    backupPlanPolicyTemplate: "",
    backupType: "",
    recoveryPoint: "",
    backupConsistency: "",
    targetHostName: "",
    targetApplianceName: "",
    targetPoolName: "",
    resourceDataSizeInGib: 0,
    dataCopiedInGib: 0,
    onvaultPoolStorageConsumedInGib: 0,
    preCompressInGib: 0,
    compressionRatio: 0,
    dataChangeRate: 0,
    snapshotDiskSizeInGib: 0,
    dataWrittenInGib: 0,
    dataSentInGib: 0,
    jobId: "",
    hostId: "",
    backupRulePolicyId: "",
    resourceId: "",
    targetPoolId: "",
    targetHostId: "",
    targetApplianceId: "",
  };
}

export const BackupRecoveryJobReportLog: MessageFns<BackupRecoveryJobReportLog> = {
  encode(message: BackupRecoveryJobReportLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.jobCategory !== "") {
      writer.uint32(18).string(message.jobCategory);
    }
    if (message.jobType !== "") {
      writer.uint32(26).string(message.jobType);
    }
    if (message.logBackup !== "") {
      writer.uint32(34).string(message.logBackup);
    }
    if (message.jobStatus !== "") {
      writer.uint32(42).string(message.jobStatus);
    }
    if (message.resourceName !== "") {
      writer.uint32(50).string(message.resourceName);
    }
    if (message.resourceType !== "") {
      writer.uint32(58).string(message.resourceType);
    }
    if (message.errorCode !== 0) {
      writer.uint32(64).int32(message.errorCode);
    }
    if (message.errorMessage !== "") {
      writer.uint32(74).string(message.errorMessage);
    }
    if (message.jobInitiationFailureReason !== "") {
      writer.uint32(82).string(message.jobInitiationFailureReason);
    }
    if (message.jobStartTime !== "") {
      writer.uint32(90).string(message.jobStartTime);
    }
    if (message.jobEndTime !== "") {
      writer.uint32(98).string(message.jobEndTime);
    }
    if (message.jobQueuedTime !== "") {
      writer.uint32(106).string(message.jobQueuedTime);
    }
    if (message.jobDurationInHours !== 0) {
      writer.uint32(113).double(message.jobDurationInHours);
    }
    if (message.hostname !== "") {
      writer.uint32(122).string(message.hostname);
    }
    if (message.applianceName !== "") {
      writer.uint32(130).string(message.applianceName);
    }
    if (message.backupRulePolicyName !== "") {
      writer.uint32(138).string(message.backupRulePolicyName);
    }
    if (message.backupPlanPolicyTemplate !== "") {
      writer.uint32(146).string(message.backupPlanPolicyTemplate);
    }
    if (message.backupType !== "") {
      writer.uint32(154).string(message.backupType);
    }
    if (message.recoveryPoint !== "") {
      writer.uint32(162).string(message.recoveryPoint);
    }
    if (message.backupConsistency !== "") {
      writer.uint32(170).string(message.backupConsistency);
    }
    if (message.targetHostName !== "") {
      writer.uint32(178).string(message.targetHostName);
    }
    if (message.targetApplianceName !== "") {
      writer.uint32(186).string(message.targetApplianceName);
    }
    if (message.targetPoolName !== "") {
      writer.uint32(194).string(message.targetPoolName);
    }
    if (message.resourceDataSizeInGib !== 0) {
      writer.uint32(201).double(message.resourceDataSizeInGib);
    }
    if (message.dataCopiedInGib !== 0) {
      writer.uint32(209).double(message.dataCopiedInGib);
    }
    if (message.onvaultPoolStorageConsumedInGib !== 0) {
      writer.uint32(217).double(message.onvaultPoolStorageConsumedInGib);
    }
    if (message.preCompressInGib !== 0) {
      writer.uint32(225).double(message.preCompressInGib);
    }
    if (message.compressionRatio !== 0) {
      writer.uint32(233).double(message.compressionRatio);
    }
    if (message.dataChangeRate !== 0) {
      writer.uint32(241).double(message.dataChangeRate);
    }
    if (message.snapshotDiskSizeInGib !== 0) {
      writer.uint32(249).double(message.snapshotDiskSizeInGib);
    }
    if (message.dataWrittenInGib !== 0) {
      writer.uint32(257).double(message.dataWrittenInGib);
    }
    if (message.dataSentInGib !== 0) {
      writer.uint32(265).double(message.dataSentInGib);
    }
    if (message.jobId !== "") {
      writer.uint32(274).string(message.jobId);
    }
    if (message.hostId !== "") {
      writer.uint32(282).string(message.hostId);
    }
    if (message.backupRulePolicyId !== "") {
      writer.uint32(290).string(message.backupRulePolicyId);
    }
    if (message.resourceId !== "") {
      writer.uint32(298).string(message.resourceId);
    }
    if (message.targetPoolId !== "") {
      writer.uint32(306).string(message.targetPoolId);
    }
    if (message.targetHostId !== "") {
      writer.uint32(314).string(message.targetHostId);
    }
    if (message.targetApplianceId !== "") {
      writer.uint32(322).string(message.targetApplianceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupRecoveryJobReportLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupRecoveryJobReportLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobCategory = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logBackup = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.jobStatus = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.jobInitiationFailureReason = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.jobStartTime = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.jobEndTime = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.jobQueuedTime = reader.string();
          continue;
        case 14:
          if (tag !== 113) {
            break;
          }

          message.jobDurationInHours = reader.double();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.hostname = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.applianceName = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.backupRulePolicyName = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.backupPlanPolicyTemplate = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.backupType = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.recoveryPoint = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.backupConsistency = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.targetHostName = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.targetApplianceName = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.targetPoolName = reader.string();
          continue;
        case 25:
          if (tag !== 201) {
            break;
          }

          message.resourceDataSizeInGib = reader.double();
          continue;
        case 26:
          if (tag !== 209) {
            break;
          }

          message.dataCopiedInGib = reader.double();
          continue;
        case 27:
          if (tag !== 217) {
            break;
          }

          message.onvaultPoolStorageConsumedInGib = reader.double();
          continue;
        case 28:
          if (tag !== 225) {
            break;
          }

          message.preCompressInGib = reader.double();
          continue;
        case 29:
          if (tag !== 233) {
            break;
          }

          message.compressionRatio = reader.double();
          continue;
        case 30:
          if (tag !== 241) {
            break;
          }

          message.dataChangeRate = reader.double();
          continue;
        case 31:
          if (tag !== 249) {
            break;
          }

          message.snapshotDiskSizeInGib = reader.double();
          continue;
        case 32:
          if (tag !== 257) {
            break;
          }

          message.dataWrittenInGib = reader.double();
          continue;
        case 33:
          if (tag !== 265) {
            break;
          }

          message.dataSentInGib = reader.double();
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.jobId = reader.string();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.hostId = reader.string();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.backupRulePolicyId = reader.string();
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.targetPoolId = reader.string();
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.targetHostId = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.targetApplianceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupRecoveryJobReportLog {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      jobCategory: isSet(object.jobCategory) ? globalThis.String(object.jobCategory) : "",
      jobType: isSet(object.jobType) ? globalThis.String(object.jobType) : "",
      logBackup: isSet(object.logBackup) ? globalThis.String(object.logBackup) : "",
      jobStatus: isSet(object.jobStatus) ? globalThis.String(object.jobStatus) : "",
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : 0,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      jobInitiationFailureReason: isSet(object.jobInitiationFailureReason)
        ? globalThis.String(object.jobInitiationFailureReason)
        : "",
      jobStartTime: isSet(object.jobStartTime) ? globalThis.String(object.jobStartTime) : "",
      jobEndTime: isSet(object.jobEndTime) ? globalThis.String(object.jobEndTime) : "",
      jobQueuedTime: isSet(object.jobQueuedTime) ? globalThis.String(object.jobQueuedTime) : "",
      jobDurationInHours: isSet(object.jobDurationInHours) ? globalThis.Number(object.jobDurationInHours) : 0,
      hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
      applianceName: isSet(object.applianceName) ? globalThis.String(object.applianceName) : "",
      backupRulePolicyName: isSet(object.backupRulePolicyName) ? globalThis.String(object.backupRulePolicyName) : "",
      backupPlanPolicyTemplate: isSet(object.backupPlanPolicyTemplate)
        ? globalThis.String(object.backupPlanPolicyTemplate)
        : "",
      backupType: isSet(object.backupType) ? globalThis.String(object.backupType) : "",
      recoveryPoint: isSet(object.recoveryPoint) ? globalThis.String(object.recoveryPoint) : "",
      backupConsistency: isSet(object.backupConsistency) ? globalThis.String(object.backupConsistency) : "",
      targetHostName: isSet(object.targetHostName) ? globalThis.String(object.targetHostName) : "",
      targetApplianceName: isSet(object.targetApplianceName) ? globalThis.String(object.targetApplianceName) : "",
      targetPoolName: isSet(object.targetPoolName) ? globalThis.String(object.targetPoolName) : "",
      resourceDataSizeInGib: isSet(object.resourceDataSizeInGib) ? globalThis.Number(object.resourceDataSizeInGib) : 0,
      dataCopiedInGib: isSet(object.dataCopiedInGib) ? globalThis.Number(object.dataCopiedInGib) : 0,
      onvaultPoolStorageConsumedInGib: isSet(object.onvaultPoolStorageConsumedInGib)
        ? globalThis.Number(object.onvaultPoolStorageConsumedInGib)
        : 0,
      preCompressInGib: isSet(object.preCompressInGib) ? globalThis.Number(object.preCompressInGib) : 0,
      compressionRatio: isSet(object.compressionRatio) ? globalThis.Number(object.compressionRatio) : 0,
      dataChangeRate: isSet(object.dataChangeRate) ? globalThis.Number(object.dataChangeRate) : 0,
      snapshotDiskSizeInGib: isSet(object.snapshotDiskSizeInGib) ? globalThis.Number(object.snapshotDiskSizeInGib) : 0,
      dataWrittenInGib: isSet(object.dataWrittenInGib) ? globalThis.Number(object.dataWrittenInGib) : 0,
      dataSentInGib: isSet(object.dataSentInGib) ? globalThis.Number(object.dataSentInGib) : 0,
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      hostId: isSet(object.hostId) ? globalThis.String(object.hostId) : "",
      backupRulePolicyId: isSet(object.backupRulePolicyId) ? globalThis.String(object.backupRulePolicyId) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      targetPoolId: isSet(object.targetPoolId) ? globalThis.String(object.targetPoolId) : "",
      targetHostId: isSet(object.targetHostId) ? globalThis.String(object.targetHostId) : "",
      targetApplianceId: isSet(object.targetApplianceId) ? globalThis.String(object.targetApplianceId) : "",
    };
  },

  toJSON(message: BackupRecoveryJobReportLog): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.jobCategory !== "") {
      obj.jobCategory = message.jobCategory;
    }
    if (message.jobType !== "") {
      obj.jobType = message.jobType;
    }
    if (message.logBackup !== "") {
      obj.logBackup = message.logBackup;
    }
    if (message.jobStatus !== "") {
      obj.jobStatus = message.jobStatus;
    }
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.errorCode !== 0) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.jobInitiationFailureReason !== "") {
      obj.jobInitiationFailureReason = message.jobInitiationFailureReason;
    }
    if (message.jobStartTime !== "") {
      obj.jobStartTime = message.jobStartTime;
    }
    if (message.jobEndTime !== "") {
      obj.jobEndTime = message.jobEndTime;
    }
    if (message.jobQueuedTime !== "") {
      obj.jobQueuedTime = message.jobQueuedTime;
    }
    if (message.jobDurationInHours !== 0) {
      obj.jobDurationInHours = message.jobDurationInHours;
    }
    if (message.hostname !== "") {
      obj.hostname = message.hostname;
    }
    if (message.applianceName !== "") {
      obj.applianceName = message.applianceName;
    }
    if (message.backupRulePolicyName !== "") {
      obj.backupRulePolicyName = message.backupRulePolicyName;
    }
    if (message.backupPlanPolicyTemplate !== "") {
      obj.backupPlanPolicyTemplate = message.backupPlanPolicyTemplate;
    }
    if (message.backupType !== "") {
      obj.backupType = message.backupType;
    }
    if (message.recoveryPoint !== "") {
      obj.recoveryPoint = message.recoveryPoint;
    }
    if (message.backupConsistency !== "") {
      obj.backupConsistency = message.backupConsistency;
    }
    if (message.targetHostName !== "") {
      obj.targetHostName = message.targetHostName;
    }
    if (message.targetApplianceName !== "") {
      obj.targetApplianceName = message.targetApplianceName;
    }
    if (message.targetPoolName !== "") {
      obj.targetPoolName = message.targetPoolName;
    }
    if (message.resourceDataSizeInGib !== 0) {
      obj.resourceDataSizeInGib = message.resourceDataSizeInGib;
    }
    if (message.dataCopiedInGib !== 0) {
      obj.dataCopiedInGib = message.dataCopiedInGib;
    }
    if (message.onvaultPoolStorageConsumedInGib !== 0) {
      obj.onvaultPoolStorageConsumedInGib = message.onvaultPoolStorageConsumedInGib;
    }
    if (message.preCompressInGib !== 0) {
      obj.preCompressInGib = message.preCompressInGib;
    }
    if (message.compressionRatio !== 0) {
      obj.compressionRatio = message.compressionRatio;
    }
    if (message.dataChangeRate !== 0) {
      obj.dataChangeRate = message.dataChangeRate;
    }
    if (message.snapshotDiskSizeInGib !== 0) {
      obj.snapshotDiskSizeInGib = message.snapshotDiskSizeInGib;
    }
    if (message.dataWrittenInGib !== 0) {
      obj.dataWrittenInGib = message.dataWrittenInGib;
    }
    if (message.dataSentInGib !== 0) {
      obj.dataSentInGib = message.dataSentInGib;
    }
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.hostId !== "") {
      obj.hostId = message.hostId;
    }
    if (message.backupRulePolicyId !== "") {
      obj.backupRulePolicyId = message.backupRulePolicyId;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.targetPoolId !== "") {
      obj.targetPoolId = message.targetPoolId;
    }
    if (message.targetHostId !== "") {
      obj.targetHostId = message.targetHostId;
    }
    if (message.targetApplianceId !== "") {
      obj.targetApplianceId = message.targetApplianceId;
    }
    return obj;
  },

  create(base?: DeepPartial<BackupRecoveryJobReportLog>): BackupRecoveryJobReportLog {
    return BackupRecoveryJobReportLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupRecoveryJobReportLog>): BackupRecoveryJobReportLog {
    const message = createBaseBackupRecoveryJobReportLog();
    message.jobName = object.jobName ?? "";
    message.jobCategory = object.jobCategory ?? "";
    message.jobType = object.jobType ?? "";
    message.logBackup = object.logBackup ?? "";
    message.jobStatus = object.jobStatus ?? "";
    message.resourceName = object.resourceName ?? "";
    message.resourceType = object.resourceType ?? "";
    message.errorCode = object.errorCode ?? 0;
    message.errorMessage = object.errorMessage ?? "";
    message.jobInitiationFailureReason = object.jobInitiationFailureReason ?? "";
    message.jobStartTime = object.jobStartTime ?? "";
    message.jobEndTime = object.jobEndTime ?? "";
    message.jobQueuedTime = object.jobQueuedTime ?? "";
    message.jobDurationInHours = object.jobDurationInHours ?? 0;
    message.hostname = object.hostname ?? "";
    message.applianceName = object.applianceName ?? "";
    message.backupRulePolicyName = object.backupRulePolicyName ?? "";
    message.backupPlanPolicyTemplate = object.backupPlanPolicyTemplate ?? "";
    message.backupType = object.backupType ?? "";
    message.recoveryPoint = object.recoveryPoint ?? "";
    message.backupConsistency = object.backupConsistency ?? "";
    message.targetHostName = object.targetHostName ?? "";
    message.targetApplianceName = object.targetApplianceName ?? "";
    message.targetPoolName = object.targetPoolName ?? "";
    message.resourceDataSizeInGib = object.resourceDataSizeInGib ?? 0;
    message.dataCopiedInGib = object.dataCopiedInGib ?? 0;
    message.onvaultPoolStorageConsumedInGib = object.onvaultPoolStorageConsumedInGib ?? 0;
    message.preCompressInGib = object.preCompressInGib ?? 0;
    message.compressionRatio = object.compressionRatio ?? 0;
    message.dataChangeRate = object.dataChangeRate ?? 0;
    message.snapshotDiskSizeInGib = object.snapshotDiskSizeInGib ?? 0;
    message.dataWrittenInGib = object.dataWrittenInGib ?? 0;
    message.dataSentInGib = object.dataSentInGib ?? 0;
    message.jobId = object.jobId ?? "";
    message.hostId = object.hostId ?? "";
    message.backupRulePolicyId = object.backupRulePolicyId ?? "";
    message.resourceId = object.resourceId ?? "";
    message.targetPoolId = object.targetPoolId ?? "";
    message.targetHostId = object.targetHostId ?? "";
    message.targetApplianceId = object.targetApplianceId ?? "";
    return message;
  },
};

function createBaseUnprotectedResourceReportLog(): UnprotectedResourceReportLog {
  return {
    hostName: "",
    resourceName: "",
    resourceType: "",
    instanceName: "",
    discoveredOn: "",
    discoveredBy: "",
    applianceId: "",
    resourceId: "",
    hostId: "",
  };
}

export const UnprotectedResourceReportLog: MessageFns<UnprotectedResourceReportLog> = {
  encode(message: UnprotectedResourceReportLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hostName !== "") {
      writer.uint32(10).string(message.hostName);
    }
    if (message.resourceName !== "") {
      writer.uint32(18).string(message.resourceName);
    }
    if (message.resourceType !== "") {
      writer.uint32(26).string(message.resourceType);
    }
    if (message.instanceName !== "") {
      writer.uint32(34).string(message.instanceName);
    }
    if (message.discoveredOn !== "") {
      writer.uint32(42).string(message.discoveredOn);
    }
    if (message.discoveredBy !== "") {
      writer.uint32(50).string(message.discoveredBy);
    }
    if (message.applianceId !== "") {
      writer.uint32(58).string(message.applianceId);
    }
    if (message.resourceId !== "") {
      writer.uint32(66).string(message.resourceId);
    }
    if (message.hostId !== "") {
      writer.uint32(74).string(message.hostId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnprotectedResourceReportLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnprotectedResourceReportLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.instanceName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.discoveredOn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.discoveredBy = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.applianceId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.hostId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnprotectedResourceReportLog {
    return {
      hostName: isSet(object.hostName) ? globalThis.String(object.hostName) : "",
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      instanceName: isSet(object.instanceName) ? globalThis.String(object.instanceName) : "",
      discoveredOn: isSet(object.discoveredOn) ? globalThis.String(object.discoveredOn) : "",
      discoveredBy: isSet(object.discoveredBy) ? globalThis.String(object.discoveredBy) : "",
      applianceId: isSet(object.applianceId) ? globalThis.String(object.applianceId) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      hostId: isSet(object.hostId) ? globalThis.String(object.hostId) : "",
    };
  },

  toJSON(message: UnprotectedResourceReportLog): unknown {
    const obj: any = {};
    if (message.hostName !== "") {
      obj.hostName = message.hostName;
    }
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.instanceName !== "") {
      obj.instanceName = message.instanceName;
    }
    if (message.discoveredOn !== "") {
      obj.discoveredOn = message.discoveredOn;
    }
    if (message.discoveredBy !== "") {
      obj.discoveredBy = message.discoveredBy;
    }
    if (message.applianceId !== "") {
      obj.applianceId = message.applianceId;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.hostId !== "") {
      obj.hostId = message.hostId;
    }
    return obj;
  },

  create(base?: DeepPartial<UnprotectedResourceReportLog>): UnprotectedResourceReportLog {
    return UnprotectedResourceReportLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnprotectedResourceReportLog>): UnprotectedResourceReportLog {
    const message = createBaseUnprotectedResourceReportLog();
    message.hostName = object.hostName ?? "";
    message.resourceName = object.resourceName ?? "";
    message.resourceType = object.resourceType ?? "";
    message.instanceName = object.instanceName ?? "";
    message.discoveredOn = object.discoveredOn ?? "";
    message.discoveredBy = object.discoveredBy ?? "";
    message.applianceId = object.applianceId ?? "";
    message.resourceId = object.resourceId ?? "";
    message.hostId = object.hostId ?? "";
    return message;
  },
};

function createBaseDailyScheduleComplianceReportLog(): DailyScheduleComplianceReportLog {
  return {
    resourceName: "",
    resourceType: "",
    backupRulePolicyName: "",
    backupPlanPolicyTemplate: "",
    hostName: "",
    applianceName: "",
    date: "",
    backupWindowStartTime: "",
    jobType: "",
    status: "",
    comment: "",
    resourceId: "",
    hostId: "",
    backupPlanPolicyTemplateId: "",
    backupRulePolicyId: "",
    applianceId: "",
  };
}

export const DailyScheduleComplianceReportLog: MessageFns<DailyScheduleComplianceReportLog> = {
  encode(message: DailyScheduleComplianceReportLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.resourceType !== "") {
      writer.uint32(18).string(message.resourceType);
    }
    if (message.backupRulePolicyName !== "") {
      writer.uint32(26).string(message.backupRulePolicyName);
    }
    if (message.backupPlanPolicyTemplate !== "") {
      writer.uint32(34).string(message.backupPlanPolicyTemplate);
    }
    if (message.hostName !== "") {
      writer.uint32(42).string(message.hostName);
    }
    if (message.applianceName !== "") {
      writer.uint32(50).string(message.applianceName);
    }
    if (message.date !== "") {
      writer.uint32(58).string(message.date);
    }
    if (message.backupWindowStartTime !== "") {
      writer.uint32(66).string(message.backupWindowStartTime);
    }
    if (message.jobType !== "") {
      writer.uint32(74).string(message.jobType);
    }
    if (message.status !== "") {
      writer.uint32(82).string(message.status);
    }
    if (message.comment !== "") {
      writer.uint32(90).string(message.comment);
    }
    if (message.resourceId !== "") {
      writer.uint32(98).string(message.resourceId);
    }
    if (message.hostId !== "") {
      writer.uint32(106).string(message.hostId);
    }
    if (message.backupPlanPolicyTemplateId !== "") {
      writer.uint32(114).string(message.backupPlanPolicyTemplateId);
    }
    if (message.backupRulePolicyId !== "") {
      writer.uint32(122).string(message.backupRulePolicyId);
    }
    if (message.applianceId !== "") {
      writer.uint32(130).string(message.applianceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DailyScheduleComplianceReportLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyScheduleComplianceReportLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.backupRulePolicyName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.backupPlanPolicyTemplate = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hostName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.applianceName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.date = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backupWindowStartTime = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.jobType = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.status = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.comment = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.hostId = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.backupPlanPolicyTemplateId = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.backupRulePolicyId = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.applianceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DailyScheduleComplianceReportLog {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      backupRulePolicyName: isSet(object.backupRulePolicyName) ? globalThis.String(object.backupRulePolicyName) : "",
      backupPlanPolicyTemplate: isSet(object.backupPlanPolicyTemplate)
        ? globalThis.String(object.backupPlanPolicyTemplate)
        : "",
      hostName: isSet(object.hostName) ? globalThis.String(object.hostName) : "",
      applianceName: isSet(object.applianceName) ? globalThis.String(object.applianceName) : "",
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      backupWindowStartTime: isSet(object.backupWindowStartTime) ? globalThis.String(object.backupWindowStartTime) : "",
      jobType: isSet(object.jobType) ? globalThis.String(object.jobType) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      hostId: isSet(object.hostId) ? globalThis.String(object.hostId) : "",
      backupPlanPolicyTemplateId: isSet(object.backupPlanPolicyTemplateId)
        ? globalThis.String(object.backupPlanPolicyTemplateId)
        : "",
      backupRulePolicyId: isSet(object.backupRulePolicyId) ? globalThis.String(object.backupRulePolicyId) : "",
      applianceId: isSet(object.applianceId) ? globalThis.String(object.applianceId) : "",
    };
  },

  toJSON(message: DailyScheduleComplianceReportLog): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.backupRulePolicyName !== "") {
      obj.backupRulePolicyName = message.backupRulePolicyName;
    }
    if (message.backupPlanPolicyTemplate !== "") {
      obj.backupPlanPolicyTemplate = message.backupPlanPolicyTemplate;
    }
    if (message.hostName !== "") {
      obj.hostName = message.hostName;
    }
    if (message.applianceName !== "") {
      obj.applianceName = message.applianceName;
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.backupWindowStartTime !== "") {
      obj.backupWindowStartTime = message.backupWindowStartTime;
    }
    if (message.jobType !== "") {
      obj.jobType = message.jobType;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.hostId !== "") {
      obj.hostId = message.hostId;
    }
    if (message.backupPlanPolicyTemplateId !== "") {
      obj.backupPlanPolicyTemplateId = message.backupPlanPolicyTemplateId;
    }
    if (message.backupRulePolicyId !== "") {
      obj.backupRulePolicyId = message.backupRulePolicyId;
    }
    if (message.applianceId !== "") {
      obj.applianceId = message.applianceId;
    }
    return obj;
  },

  create(base?: DeepPartial<DailyScheduleComplianceReportLog>): DailyScheduleComplianceReportLog {
    return DailyScheduleComplianceReportLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DailyScheduleComplianceReportLog>): DailyScheduleComplianceReportLog {
    const message = createBaseDailyScheduleComplianceReportLog();
    message.resourceName = object.resourceName ?? "";
    message.resourceType = object.resourceType ?? "";
    message.backupRulePolicyName = object.backupRulePolicyName ?? "";
    message.backupPlanPolicyTemplate = object.backupPlanPolicyTemplate ?? "";
    message.hostName = object.hostName ?? "";
    message.applianceName = object.applianceName ?? "";
    message.date = object.date ?? "";
    message.backupWindowStartTime = object.backupWindowStartTime ?? "";
    message.jobType = object.jobType ?? "";
    message.status = object.status ?? "";
    message.comment = object.comment ?? "";
    message.resourceId = object.resourceId ?? "";
    message.hostId = object.hostId ?? "";
    message.backupPlanPolicyTemplateId = object.backupPlanPolicyTemplateId ?? "";
    message.backupRulePolicyId = object.backupRulePolicyId ?? "";
    message.applianceId = object.applianceId ?? "";
    return message;
  },
};

function createBaseBackupStorageUtilizationReportLog(): BackupStorageUtilizationReportLog {
  return {
    applianceName: "",
    storageType: "",
    poolName: "",
    totalCapacityInGib: 0,
    usedCapacityInGib: 0,
    utilizationPercentage: 0,
    applianceId: "",
  };
}

export const BackupStorageUtilizationReportLog: MessageFns<BackupStorageUtilizationReportLog> = {
  encode(message: BackupStorageUtilizationReportLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applianceName !== "") {
      writer.uint32(10).string(message.applianceName);
    }
    if (message.storageType !== "") {
      writer.uint32(18).string(message.storageType);
    }
    if (message.poolName !== "") {
      writer.uint32(26).string(message.poolName);
    }
    if (message.totalCapacityInGib !== 0) {
      writer.uint32(33).double(message.totalCapacityInGib);
    }
    if (message.usedCapacityInGib !== 0) {
      writer.uint32(41).double(message.usedCapacityInGib);
    }
    if (message.utilizationPercentage !== 0) {
      writer.uint32(49).double(message.utilizationPercentage);
    }
    if (message.applianceId !== "") {
      writer.uint32(58).string(message.applianceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupStorageUtilizationReportLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupStorageUtilizationReportLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.applianceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storageType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.poolName = reader.string();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.totalCapacityInGib = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.usedCapacityInGib = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.utilizationPercentage = reader.double();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.applianceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupStorageUtilizationReportLog {
    return {
      applianceName: isSet(object.applianceName) ? globalThis.String(object.applianceName) : "",
      storageType: isSet(object.storageType) ? globalThis.String(object.storageType) : "",
      poolName: isSet(object.poolName) ? globalThis.String(object.poolName) : "",
      totalCapacityInGib: isSet(object.totalCapacityInGib) ? globalThis.Number(object.totalCapacityInGib) : 0,
      usedCapacityInGib: isSet(object.usedCapacityInGib) ? globalThis.Number(object.usedCapacityInGib) : 0,
      utilizationPercentage: isSet(object.utilizationPercentage) ? globalThis.Number(object.utilizationPercentage) : 0,
      applianceId: isSet(object.applianceId) ? globalThis.String(object.applianceId) : "",
    };
  },

  toJSON(message: BackupStorageUtilizationReportLog): unknown {
    const obj: any = {};
    if (message.applianceName !== "") {
      obj.applianceName = message.applianceName;
    }
    if (message.storageType !== "") {
      obj.storageType = message.storageType;
    }
    if (message.poolName !== "") {
      obj.poolName = message.poolName;
    }
    if (message.totalCapacityInGib !== 0) {
      obj.totalCapacityInGib = message.totalCapacityInGib;
    }
    if (message.usedCapacityInGib !== 0) {
      obj.usedCapacityInGib = message.usedCapacityInGib;
    }
    if (message.utilizationPercentage !== 0) {
      obj.utilizationPercentage = message.utilizationPercentage;
    }
    if (message.applianceId !== "") {
      obj.applianceId = message.applianceId;
    }
    return obj;
  },

  create(base?: DeepPartial<BackupStorageUtilizationReportLog>): BackupStorageUtilizationReportLog {
    return BackupStorageUtilizationReportLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupStorageUtilizationReportLog>): BackupStorageUtilizationReportLog {
    const message = createBaseBackupStorageUtilizationReportLog();
    message.applianceName = object.applianceName ?? "";
    message.storageType = object.storageType ?? "";
    message.poolName = object.poolName ?? "";
    message.totalCapacityInGib = object.totalCapacityInGib ?? 0;
    message.usedCapacityInGib = object.usedCapacityInGib ?? 0;
    message.utilizationPercentage = object.utilizationPercentage ?? 0;
    message.applianceId = object.applianceId ?? "";
    return message;
  },
};

function createBaseProtectedResource(): ProtectedResource {
  return {
    resourceName: "",
    resourceType: "",
    resourceId: "",
    backupInclusionOrExclusion: "",
    hostId: "",
    hostName: "",
    backupPlanPolicyTemplateId: "",
    backupPlanPolicyTemplate: "",
    slaId: "",
    backupPlanRestrictions: "",
    protectedOn: "",
    policyOverrides: "",
    sourceAppliance: "",
    sourceApplianceId: "",
    protectedDataInGib: 0,
    onvaultInGib: 0,
    applianceName: "",
    applianceId: "",
    remoteAppliance: "",
    remoteApplianceId: "",
    recoveryPoint: "",
  };
}

export const ProtectedResource: MessageFns<ProtectedResource> = {
  encode(message: ProtectedResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.resourceType !== "") {
      writer.uint32(18).string(message.resourceType);
    }
    if (message.resourceId !== "") {
      writer.uint32(26).string(message.resourceId);
    }
    if (message.backupInclusionOrExclusion !== "") {
      writer.uint32(34).string(message.backupInclusionOrExclusion);
    }
    if (message.hostId !== "") {
      writer.uint32(42).string(message.hostId);
    }
    if (message.hostName !== "") {
      writer.uint32(50).string(message.hostName);
    }
    if (message.backupPlanPolicyTemplateId !== "") {
      writer.uint32(58).string(message.backupPlanPolicyTemplateId);
    }
    if (message.backupPlanPolicyTemplate !== "") {
      writer.uint32(66).string(message.backupPlanPolicyTemplate);
    }
    if (message.slaId !== "") {
      writer.uint32(74).string(message.slaId);
    }
    if (message.backupPlanRestrictions !== "") {
      writer.uint32(82).string(message.backupPlanRestrictions);
    }
    if (message.protectedOn !== "") {
      writer.uint32(90).string(message.protectedOn);
    }
    if (message.policyOverrides !== "") {
      writer.uint32(98).string(message.policyOverrides);
    }
    if (message.sourceAppliance !== "") {
      writer.uint32(106).string(message.sourceAppliance);
    }
    if (message.sourceApplianceId !== "") {
      writer.uint32(114).string(message.sourceApplianceId);
    }
    if (message.protectedDataInGib !== 0) {
      writer.uint32(121).double(message.protectedDataInGib);
    }
    if (message.onvaultInGib !== 0) {
      writer.uint32(129).double(message.onvaultInGib);
    }
    if (message.applianceName !== "") {
      writer.uint32(138).string(message.applianceName);
    }
    if (message.applianceId !== "") {
      writer.uint32(146).string(message.applianceId);
    }
    if (message.remoteAppliance !== "") {
      writer.uint32(154).string(message.remoteAppliance);
    }
    if (message.remoteApplianceId !== "") {
      writer.uint32(162).string(message.remoteApplianceId);
    }
    if (message.recoveryPoint !== "") {
      writer.uint32(170).string(message.recoveryPoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.backupInclusionOrExclusion = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hostId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hostName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.backupPlanPolicyTemplateId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backupPlanPolicyTemplate = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.slaId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.backupPlanRestrictions = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.protectedOn = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.policyOverrides = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.sourceAppliance = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.sourceApplianceId = reader.string();
          continue;
        case 15:
          if (tag !== 121) {
            break;
          }

          message.protectedDataInGib = reader.double();
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.onvaultInGib = reader.double();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.applianceName = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.applianceId = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.remoteAppliance = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.remoteApplianceId = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.recoveryPoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResource {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      backupInclusionOrExclusion: isSet(object.backupInclusionOrExclusion)
        ? globalThis.String(object.backupInclusionOrExclusion)
        : "",
      hostId: isSet(object.hostId) ? globalThis.String(object.hostId) : "",
      hostName: isSet(object.hostName) ? globalThis.String(object.hostName) : "",
      backupPlanPolicyTemplateId: isSet(object.backupPlanPolicyTemplateId)
        ? globalThis.String(object.backupPlanPolicyTemplateId)
        : "",
      backupPlanPolicyTemplate: isSet(object.backupPlanPolicyTemplate)
        ? globalThis.String(object.backupPlanPolicyTemplate)
        : "",
      slaId: isSet(object.slaId) ? globalThis.String(object.slaId) : "",
      backupPlanRestrictions: isSet(object.backupPlanRestrictions)
        ? globalThis.String(object.backupPlanRestrictions)
        : "",
      protectedOn: isSet(object.protectedOn) ? globalThis.String(object.protectedOn) : "",
      policyOverrides: isSet(object.policyOverrides) ? globalThis.String(object.policyOverrides) : "",
      sourceAppliance: isSet(object.sourceAppliance) ? globalThis.String(object.sourceAppliance) : "",
      sourceApplianceId: isSet(object.sourceApplianceId) ? globalThis.String(object.sourceApplianceId) : "",
      protectedDataInGib: isSet(object.protectedDataInGib) ? globalThis.Number(object.protectedDataInGib) : 0,
      onvaultInGib: isSet(object.onvaultInGib) ? globalThis.Number(object.onvaultInGib) : 0,
      applianceName: isSet(object.applianceName) ? globalThis.String(object.applianceName) : "",
      applianceId: isSet(object.applianceId) ? globalThis.String(object.applianceId) : "",
      remoteAppliance: isSet(object.remoteAppliance) ? globalThis.String(object.remoteAppliance) : "",
      remoteApplianceId: isSet(object.remoteApplianceId) ? globalThis.String(object.remoteApplianceId) : "",
      recoveryPoint: isSet(object.recoveryPoint) ? globalThis.String(object.recoveryPoint) : "",
    };
  },

  toJSON(message: ProtectedResource): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.backupInclusionOrExclusion !== "") {
      obj.backupInclusionOrExclusion = message.backupInclusionOrExclusion;
    }
    if (message.hostId !== "") {
      obj.hostId = message.hostId;
    }
    if (message.hostName !== "") {
      obj.hostName = message.hostName;
    }
    if (message.backupPlanPolicyTemplateId !== "") {
      obj.backupPlanPolicyTemplateId = message.backupPlanPolicyTemplateId;
    }
    if (message.backupPlanPolicyTemplate !== "") {
      obj.backupPlanPolicyTemplate = message.backupPlanPolicyTemplate;
    }
    if (message.slaId !== "") {
      obj.slaId = message.slaId;
    }
    if (message.backupPlanRestrictions !== "") {
      obj.backupPlanRestrictions = message.backupPlanRestrictions;
    }
    if (message.protectedOn !== "") {
      obj.protectedOn = message.protectedOn;
    }
    if (message.policyOverrides !== "") {
      obj.policyOverrides = message.policyOverrides;
    }
    if (message.sourceAppliance !== "") {
      obj.sourceAppliance = message.sourceAppliance;
    }
    if (message.sourceApplianceId !== "") {
      obj.sourceApplianceId = message.sourceApplianceId;
    }
    if (message.protectedDataInGib !== 0) {
      obj.protectedDataInGib = message.protectedDataInGib;
    }
    if (message.onvaultInGib !== 0) {
      obj.onvaultInGib = message.onvaultInGib;
    }
    if (message.applianceName !== "") {
      obj.applianceName = message.applianceName;
    }
    if (message.applianceId !== "") {
      obj.applianceId = message.applianceId;
    }
    if (message.remoteAppliance !== "") {
      obj.remoteAppliance = message.remoteAppliance;
    }
    if (message.remoteApplianceId !== "") {
      obj.remoteApplianceId = message.remoteApplianceId;
    }
    if (message.recoveryPoint !== "") {
      obj.recoveryPoint = message.recoveryPoint;
    }
    return obj;
  },

  create(base?: DeepPartial<ProtectedResource>): ProtectedResource {
    return ProtectedResource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProtectedResource>): ProtectedResource {
    const message = createBaseProtectedResource();
    message.resourceName = object.resourceName ?? "";
    message.resourceType = object.resourceType ?? "";
    message.resourceId = object.resourceId ?? "";
    message.backupInclusionOrExclusion = object.backupInclusionOrExclusion ?? "";
    message.hostId = object.hostId ?? "";
    message.hostName = object.hostName ?? "";
    message.backupPlanPolicyTemplateId = object.backupPlanPolicyTemplateId ?? "";
    message.backupPlanPolicyTemplate = object.backupPlanPolicyTemplate ?? "";
    message.slaId = object.slaId ?? "";
    message.backupPlanRestrictions = object.backupPlanRestrictions ?? "";
    message.protectedOn = object.protectedOn ?? "";
    message.policyOverrides = object.policyOverrides ?? "";
    message.sourceAppliance = object.sourceAppliance ?? "";
    message.sourceApplianceId = object.sourceApplianceId ?? "";
    message.protectedDataInGib = object.protectedDataInGib ?? 0;
    message.onvaultInGib = object.onvaultInGib ?? 0;
    message.applianceName = object.applianceName ?? "";
    message.applianceId = object.applianceId ?? "";
    message.remoteAppliance = object.remoteAppliance ?? "";
    message.remoteApplianceId = object.remoteApplianceId ?? "";
    message.recoveryPoint = object.recoveryPoint ?? "";
    return message;
  },
};

function createBaseMountedImage(): MountedImage {
  return {
    sourceResourceName: "",
    sourceResourceId: "",
    applianceName: "",
    applianceId: "",
    mountedImageName: "",
    sourceImageName: "",
    sourceImageType: "",
    recoveryPointDate: "",
    lastMountDate: "",
    resourceType: "",
    sourceHostName: "",
    sourceHostId: "",
    mountedHostName: "",
    mountedHostId: "",
    mountedResourceName: "",
    resourceVirtualSizeInGib: 0,
    storageConsumedInGib: 0,
    mountedResourceLabel: "",
    restorableObject: "",
    mountedImageAgeInDays: 0,
    userName: "",
    readMode: "",
    resourceSizeInGib: 0,
    imageExpirationDate: "",
  };
}

export const MountedImage: MessageFns<MountedImage> = {
  encode(message: MountedImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceResourceName !== "") {
      writer.uint32(10).string(message.sourceResourceName);
    }
    if (message.sourceResourceId !== "") {
      writer.uint32(18).string(message.sourceResourceId);
    }
    if (message.applianceName !== "") {
      writer.uint32(26).string(message.applianceName);
    }
    if (message.applianceId !== "") {
      writer.uint32(34).string(message.applianceId);
    }
    if (message.mountedImageName !== "") {
      writer.uint32(42).string(message.mountedImageName);
    }
    if (message.sourceImageName !== "") {
      writer.uint32(50).string(message.sourceImageName);
    }
    if (message.sourceImageType !== "") {
      writer.uint32(58).string(message.sourceImageType);
    }
    if (message.recoveryPointDate !== "") {
      writer.uint32(66).string(message.recoveryPointDate);
    }
    if (message.lastMountDate !== "") {
      writer.uint32(74).string(message.lastMountDate);
    }
    if (message.resourceType !== "") {
      writer.uint32(82).string(message.resourceType);
    }
    if (message.sourceHostName !== "") {
      writer.uint32(90).string(message.sourceHostName);
    }
    if (message.sourceHostId !== "") {
      writer.uint32(98).string(message.sourceHostId);
    }
    if (message.mountedHostName !== "") {
      writer.uint32(106).string(message.mountedHostName);
    }
    if (message.mountedHostId !== "") {
      writer.uint32(114).string(message.mountedHostId);
    }
    if (message.mountedResourceName !== "") {
      writer.uint32(122).string(message.mountedResourceName);
    }
    if (message.resourceVirtualSizeInGib !== 0) {
      writer.uint32(129).double(message.resourceVirtualSizeInGib);
    }
    if (message.storageConsumedInGib !== 0) {
      writer.uint32(137).double(message.storageConsumedInGib);
    }
    if (message.mountedResourceLabel !== "") {
      writer.uint32(146).string(message.mountedResourceLabel);
    }
    if (message.restorableObject !== "") {
      writer.uint32(154).string(message.restorableObject);
    }
    if (message.mountedImageAgeInDays !== 0) {
      writer.uint32(160).int32(message.mountedImageAgeInDays);
    }
    if (message.userName !== "") {
      writer.uint32(170).string(message.userName);
    }
    if (message.readMode !== "") {
      writer.uint32(178).string(message.readMode);
    }
    if (message.resourceSizeInGib !== 0) {
      writer.uint32(185).double(message.resourceSizeInGib);
    }
    if (message.imageExpirationDate !== "") {
      writer.uint32(194).string(message.imageExpirationDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MountedImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMountedImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceResourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceResourceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.applianceName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.applianceId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mountedImageName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sourceImageName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sourceImageType = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.recoveryPointDate = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.lastMountDate = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.sourceHostName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.sourceHostId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.mountedHostName = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.mountedHostId = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.mountedResourceName = reader.string();
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.resourceVirtualSizeInGib = reader.double();
          continue;
        case 17:
          if (tag !== 137) {
            break;
          }

          message.storageConsumedInGib = reader.double();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.mountedResourceLabel = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.restorableObject = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.mountedImageAgeInDays = reader.int32();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.readMode = reader.string();
          continue;
        case 23:
          if (tag !== 185) {
            break;
          }

          message.resourceSizeInGib = reader.double();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.imageExpirationDate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MountedImage {
    return {
      sourceResourceName: isSet(object.sourceResourceName) ? globalThis.String(object.sourceResourceName) : "",
      sourceResourceId: isSet(object.sourceResourceId) ? globalThis.String(object.sourceResourceId) : "",
      applianceName: isSet(object.applianceName) ? globalThis.String(object.applianceName) : "",
      applianceId: isSet(object.applianceId) ? globalThis.String(object.applianceId) : "",
      mountedImageName: isSet(object.mountedImageName) ? globalThis.String(object.mountedImageName) : "",
      sourceImageName: isSet(object.sourceImageName) ? globalThis.String(object.sourceImageName) : "",
      sourceImageType: isSet(object.sourceImageType) ? globalThis.String(object.sourceImageType) : "",
      recoveryPointDate: isSet(object.recoveryPointDate) ? globalThis.String(object.recoveryPointDate) : "",
      lastMountDate: isSet(object.lastMountDate) ? globalThis.String(object.lastMountDate) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      sourceHostName: isSet(object.sourceHostName) ? globalThis.String(object.sourceHostName) : "",
      sourceHostId: isSet(object.sourceHostId) ? globalThis.String(object.sourceHostId) : "",
      mountedHostName: isSet(object.mountedHostName) ? globalThis.String(object.mountedHostName) : "",
      mountedHostId: isSet(object.mountedHostId) ? globalThis.String(object.mountedHostId) : "",
      mountedResourceName: isSet(object.mountedResourceName) ? globalThis.String(object.mountedResourceName) : "",
      resourceVirtualSizeInGib: isSet(object.resourceVirtualSizeInGib)
        ? globalThis.Number(object.resourceVirtualSizeInGib)
        : 0,
      storageConsumedInGib: isSet(object.storageConsumedInGib) ? globalThis.Number(object.storageConsumedInGib) : 0,
      mountedResourceLabel: isSet(object.mountedResourceLabel) ? globalThis.String(object.mountedResourceLabel) : "",
      restorableObject: isSet(object.restorableObject) ? globalThis.String(object.restorableObject) : "",
      mountedImageAgeInDays: isSet(object.mountedImageAgeInDays) ? globalThis.Number(object.mountedImageAgeInDays) : 0,
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      readMode: isSet(object.readMode) ? globalThis.String(object.readMode) : "",
      resourceSizeInGib: isSet(object.resourceSizeInGib) ? globalThis.Number(object.resourceSizeInGib) : 0,
      imageExpirationDate: isSet(object.imageExpirationDate) ? globalThis.String(object.imageExpirationDate) : "",
    };
  },

  toJSON(message: MountedImage): unknown {
    const obj: any = {};
    if (message.sourceResourceName !== "") {
      obj.sourceResourceName = message.sourceResourceName;
    }
    if (message.sourceResourceId !== "") {
      obj.sourceResourceId = message.sourceResourceId;
    }
    if (message.applianceName !== "") {
      obj.applianceName = message.applianceName;
    }
    if (message.applianceId !== "") {
      obj.applianceId = message.applianceId;
    }
    if (message.mountedImageName !== "") {
      obj.mountedImageName = message.mountedImageName;
    }
    if (message.sourceImageName !== "") {
      obj.sourceImageName = message.sourceImageName;
    }
    if (message.sourceImageType !== "") {
      obj.sourceImageType = message.sourceImageType;
    }
    if (message.recoveryPointDate !== "") {
      obj.recoveryPointDate = message.recoveryPointDate;
    }
    if (message.lastMountDate !== "") {
      obj.lastMountDate = message.lastMountDate;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.sourceHostName !== "") {
      obj.sourceHostName = message.sourceHostName;
    }
    if (message.sourceHostId !== "") {
      obj.sourceHostId = message.sourceHostId;
    }
    if (message.mountedHostName !== "") {
      obj.mountedHostName = message.mountedHostName;
    }
    if (message.mountedHostId !== "") {
      obj.mountedHostId = message.mountedHostId;
    }
    if (message.mountedResourceName !== "") {
      obj.mountedResourceName = message.mountedResourceName;
    }
    if (message.resourceVirtualSizeInGib !== 0) {
      obj.resourceVirtualSizeInGib = message.resourceVirtualSizeInGib;
    }
    if (message.storageConsumedInGib !== 0) {
      obj.storageConsumedInGib = message.storageConsumedInGib;
    }
    if (message.mountedResourceLabel !== "") {
      obj.mountedResourceLabel = message.mountedResourceLabel;
    }
    if (message.restorableObject !== "") {
      obj.restorableObject = message.restorableObject;
    }
    if (message.mountedImageAgeInDays !== 0) {
      obj.mountedImageAgeInDays = Math.round(message.mountedImageAgeInDays);
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.readMode !== "") {
      obj.readMode = message.readMode;
    }
    if (message.resourceSizeInGib !== 0) {
      obj.resourceSizeInGib = message.resourceSizeInGib;
    }
    if (message.imageExpirationDate !== "") {
      obj.imageExpirationDate = message.imageExpirationDate;
    }
    return obj;
  },

  create(base?: DeepPartial<MountedImage>): MountedImage {
    return MountedImage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MountedImage>): MountedImage {
    const message = createBaseMountedImage();
    message.sourceResourceName = object.sourceResourceName ?? "";
    message.sourceResourceId = object.sourceResourceId ?? "";
    message.applianceName = object.applianceName ?? "";
    message.applianceId = object.applianceId ?? "";
    message.mountedImageName = object.mountedImageName ?? "";
    message.sourceImageName = object.sourceImageName ?? "";
    message.sourceImageType = object.sourceImageType ?? "";
    message.recoveryPointDate = object.recoveryPointDate ?? "";
    message.lastMountDate = object.lastMountDate ?? "";
    message.resourceType = object.resourceType ?? "";
    message.sourceHostName = object.sourceHostName ?? "";
    message.sourceHostId = object.sourceHostId ?? "";
    message.mountedHostName = object.mountedHostName ?? "";
    message.mountedHostId = object.mountedHostId ?? "";
    message.mountedResourceName = object.mountedResourceName ?? "";
    message.resourceVirtualSizeInGib = object.resourceVirtualSizeInGib ?? 0;
    message.storageConsumedInGib = object.storageConsumedInGib ?? 0;
    message.mountedResourceLabel = object.mountedResourceLabel ?? "";
    message.restorableObject = object.restorableObject ?? "";
    message.mountedImageAgeInDays = object.mountedImageAgeInDays ?? 0;
    message.userName = object.userName ?? "";
    message.readMode = object.readMode ?? "";
    message.resourceSizeInGib = object.resourceSizeInGib ?? 0;
    message.imageExpirationDate = object.imageExpirationDate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
