// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1beta1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { AnnotationSpec } from "./annotation_spec.js";
import { ColumnSpec } from "./column_spec.js";
import { Dataset } from "./dataset.js";
import { ImageClassificationModelDeploymentMetadata, ImageObjectDetectionModelDeploymentMetadata } from "./image.js";
import { ExportEvaluatedExamplesOutputConfig, InputConfig, ModelExportOutputConfig, OutputConfig } from "./io.js";
import { Model } from "./model.js";
import { ModelEvaluation } from "./model_evaluation.js";
import { TableSpec } from "./table_spec.js";

export const protobufPackage = "google.cloud.automl.v1beta1";

/** Request message for [AutoMl.CreateDataset][google.cloud.automl.v1beta1.AutoMl.CreateDataset]. */
export interface CreateDatasetRequest {
  /** Required. The resource name of the project to create the dataset for. */
  parent: string;
  /** Required. The dataset to create. */
  dataset: Dataset | undefined;
}

/** Request message for [AutoMl.GetDataset][google.cloud.automl.v1beta1.AutoMl.GetDataset]. */
export interface GetDatasetRequest {
  /** Required. The resource name of the dataset to retrieve. */
  name: string;
}

/** Request message for [AutoMl.ListDatasets][google.cloud.automl.v1beta1.AutoMl.ListDatasets]. */
export interface ListDatasetsRequest {
  /** Required. The resource name of the project from which to list datasets. */
  parent: string;
  /**
   * An expression for filtering the results of the request.
   *
   *   * `dataset_metadata` - for existence of the case (e.g.
   *             `image_classification_dataset_metadata:*`). Some examples of
   *             using the filter are:
   *
   *   * `translation_dataset_metadata:*` --> The dataset has
   *                                          `translation_dataset_metadata`.
   */
  filter: string;
  /**
   * Requested page size. Server may return fewer results than requested.
   * If unspecified, server will pick a default size.
   */
  pageSize: number;
  /**
   * A token identifying a page of results for the server to return
   * Typically obtained via
   * [ListDatasetsResponse.next_page_token][google.cloud.automl.v1beta1.ListDatasetsResponse.next_page_token] of the previous
   * [AutoMl.ListDatasets][google.cloud.automl.v1beta1.AutoMl.ListDatasets] call.
   */
  pageToken: string;
}

/** Response message for [AutoMl.ListDatasets][google.cloud.automl.v1beta1.AutoMl.ListDatasets]. */
export interface ListDatasetsResponse {
  /** The datasets read. */
  datasets: Dataset[];
  /**
   * A token to retrieve next page of results.
   * Pass to [ListDatasetsRequest.page_token][google.cloud.automl.v1beta1.ListDatasetsRequest.page_token] to obtain that page.
   */
  nextPageToken: string;
}

/** Request message for [AutoMl.UpdateDataset][google.cloud.automl.v1beta1.AutoMl.UpdateDataset] */
export interface UpdateDatasetRequest {
  /** Required. The dataset which replaces the resource on the server. */
  dataset:
    | Dataset
    | undefined;
  /** The update mask applies to the resource. */
  updateMask: string[] | undefined;
}

/** Request message for [AutoMl.DeleteDataset][google.cloud.automl.v1beta1.AutoMl.DeleteDataset]. */
export interface DeleteDatasetRequest {
  /** Required. The resource name of the dataset to delete. */
  name: string;
}

/** Request message for [AutoMl.ImportData][google.cloud.automl.v1beta1.AutoMl.ImportData]. */
export interface ImportDataRequest {
  /**
   * Required. Dataset name. Dataset must already exist. All imported
   * annotations and examples will be added.
   */
  name: string;
  /**
   * Required. The desired input location and its domain specific semantics,
   * if any.
   */
  inputConfig: InputConfig | undefined;
}

/** Request message for [AutoMl.ExportData][google.cloud.automl.v1beta1.AutoMl.ExportData]. */
export interface ExportDataRequest {
  /** Required. The resource name of the dataset. */
  name: string;
  /** Required. The desired output location. */
  outputConfig: OutputConfig | undefined;
}

/** Request message for [AutoMl.GetAnnotationSpec][google.cloud.automl.v1beta1.AutoMl.GetAnnotationSpec]. */
export interface GetAnnotationSpecRequest {
  /** Required. The resource name of the annotation spec to retrieve. */
  name: string;
}

/** Request message for [AutoMl.GetTableSpec][google.cloud.automl.v1beta1.AutoMl.GetTableSpec]. */
export interface GetTableSpecRequest {
  /** Required. The resource name of the table spec to retrieve. */
  name: string;
  /** Mask specifying which fields to read. */
  fieldMask: string[] | undefined;
}

/** Request message for [AutoMl.ListTableSpecs][google.cloud.automl.v1beta1.AutoMl.ListTableSpecs]. */
export interface ListTableSpecsRequest {
  /** Required. The resource name of the dataset to list table specs from. */
  parent: string;
  /** Mask specifying which fields to read. */
  fieldMask:
    | string[]
    | undefined;
  /** Filter expression, see go/filtering. */
  filter: string;
  /**
   * Requested page size. The server can return fewer results than requested.
   * If unspecified, the server will pick a default size.
   */
  pageSize: number;
  /**
   * A token identifying a page of results for the server to return.
   * Typically obtained from the
   * [ListTableSpecsResponse.next_page_token][google.cloud.automl.v1beta1.ListTableSpecsResponse.next_page_token] field of the previous
   * [AutoMl.ListTableSpecs][google.cloud.automl.v1beta1.AutoMl.ListTableSpecs] call.
   */
  pageToken: string;
}

/** Response message for [AutoMl.ListTableSpecs][google.cloud.automl.v1beta1.AutoMl.ListTableSpecs]. */
export interface ListTableSpecsResponse {
  /** The table specs read. */
  tableSpecs: TableSpec[];
  /**
   * A token to retrieve next page of results.
   * Pass to [ListTableSpecsRequest.page_token][google.cloud.automl.v1beta1.ListTableSpecsRequest.page_token] to obtain that page.
   */
  nextPageToken: string;
}

/** Request message for [AutoMl.UpdateTableSpec][google.cloud.automl.v1beta1.AutoMl.UpdateTableSpec] */
export interface UpdateTableSpecRequest {
  /** Required. The table spec which replaces the resource on the server. */
  tableSpec:
    | TableSpec
    | undefined;
  /** The update mask applies to the resource. */
  updateMask: string[] | undefined;
}

/** Request message for [AutoMl.GetColumnSpec][google.cloud.automl.v1beta1.AutoMl.GetColumnSpec]. */
export interface GetColumnSpecRequest {
  /** Required. The resource name of the column spec to retrieve. */
  name: string;
  /** Mask specifying which fields to read. */
  fieldMask: string[] | undefined;
}

/** Request message for [AutoMl.ListColumnSpecs][google.cloud.automl.v1beta1.AutoMl.ListColumnSpecs]. */
export interface ListColumnSpecsRequest {
  /** Required. The resource name of the table spec to list column specs from. */
  parent: string;
  /** Mask specifying which fields to read. */
  fieldMask:
    | string[]
    | undefined;
  /** Filter expression, see go/filtering. */
  filter: string;
  /**
   * Requested page size. The server can return fewer results than requested.
   * If unspecified, the server will pick a default size.
   */
  pageSize: number;
  /**
   * A token identifying a page of results for the server to return.
   * Typically obtained from the
   * [ListColumnSpecsResponse.next_page_token][google.cloud.automl.v1beta1.ListColumnSpecsResponse.next_page_token] field of the previous
   * [AutoMl.ListColumnSpecs][google.cloud.automl.v1beta1.AutoMl.ListColumnSpecs] call.
   */
  pageToken: string;
}

/** Response message for [AutoMl.ListColumnSpecs][google.cloud.automl.v1beta1.AutoMl.ListColumnSpecs]. */
export interface ListColumnSpecsResponse {
  /** The column specs read. */
  columnSpecs: ColumnSpec[];
  /**
   * A token to retrieve next page of results.
   * Pass to [ListColumnSpecsRequest.page_token][google.cloud.automl.v1beta1.ListColumnSpecsRequest.page_token] to obtain that page.
   */
  nextPageToken: string;
}

/** Request message for [AutoMl.UpdateColumnSpec][google.cloud.automl.v1beta1.AutoMl.UpdateColumnSpec] */
export interface UpdateColumnSpecRequest {
  /** Required. The column spec which replaces the resource on the server. */
  columnSpec:
    | ColumnSpec
    | undefined;
  /** The update mask applies to the resource. */
  updateMask: string[] | undefined;
}

/** Request message for [AutoMl.CreateModel][google.cloud.automl.v1beta1.AutoMl.CreateModel]. */
export interface CreateModelRequest {
  /** Required. Resource name of the parent project where the model is being created. */
  parent: string;
  /** Required. The model to create. */
  model: Model | undefined;
}

/** Request message for [AutoMl.GetModel][google.cloud.automl.v1beta1.AutoMl.GetModel]. */
export interface GetModelRequest {
  /** Required. Resource name of the model. */
  name: string;
}

/** Request message for [AutoMl.ListModels][google.cloud.automl.v1beta1.AutoMl.ListModels]. */
export interface ListModelsRequest {
  /** Required. Resource name of the project, from which to list the models. */
  parent: string;
  /**
   * An expression for filtering the results of the request.
   *
   *   * `model_metadata` - for existence of the case (e.g.
   *             `video_classification_model_metadata:*`).
   *   * `dataset_id` - for = or !=. Some examples of using the filter are:
   *
   *   * `image_classification_model_metadata:*` --> The model has
   *                                      `image_classification_model_metadata`.
   *   * `dataset_id=5` --> The model was created from a dataset with ID 5.
   */
  filter: string;
  /** Requested page size. */
  pageSize: number;
  /**
   * A token identifying a page of results for the server to return
   * Typically obtained via
   * [ListModelsResponse.next_page_token][google.cloud.automl.v1beta1.ListModelsResponse.next_page_token] of the previous
   * [AutoMl.ListModels][google.cloud.automl.v1beta1.AutoMl.ListModels] call.
   */
  pageToken: string;
}

/** Response message for [AutoMl.ListModels][google.cloud.automl.v1beta1.AutoMl.ListModels]. */
export interface ListModelsResponse {
  /** List of models in the requested page. */
  model: Model[];
  /**
   * A token to retrieve next page of results.
   * Pass to [ListModelsRequest.page_token][google.cloud.automl.v1beta1.ListModelsRequest.page_token] to obtain that page.
   */
  nextPageToken: string;
}

/** Request message for [AutoMl.DeleteModel][google.cloud.automl.v1beta1.AutoMl.DeleteModel]. */
export interface DeleteModelRequest {
  /** Required. Resource name of the model being deleted. */
  name: string;
}

/** Request message for [AutoMl.DeployModel][google.cloud.automl.v1beta1.AutoMl.DeployModel]. */
export interface DeployModelRequest {
  /** Model deployment metadata specific to Image Object Detection. */
  imageObjectDetectionModelDeploymentMetadata?:
    | ImageObjectDetectionModelDeploymentMetadata
    | undefined;
  /** Model deployment metadata specific to Image Classification. */
  imageClassificationModelDeploymentMetadata?:
    | ImageClassificationModelDeploymentMetadata
    | undefined;
  /** Required. Resource name of the model to deploy. */
  name: string;
}

/** Request message for [AutoMl.UndeployModel][google.cloud.automl.v1beta1.AutoMl.UndeployModel]. */
export interface UndeployModelRequest {
  /** Required. Resource name of the model to undeploy. */
  name: string;
}

/**
 * Request message for [AutoMl.ExportModel][google.cloud.automl.v1beta1.AutoMl.ExportModel].
 * Models need to be enabled for exporting, otherwise an error code will be
 * returned.
 */
export interface ExportModelRequest {
  /** Required. The resource name of the model to export. */
  name: string;
  /** Required. The desired output location and configuration. */
  outputConfig: ModelExportOutputConfig | undefined;
}

/** Request message for [AutoMl.ExportEvaluatedExamples][google.cloud.automl.v1beta1.AutoMl.ExportEvaluatedExamples]. */
export interface ExportEvaluatedExamplesRequest {
  /**
   * Required. The resource name of the model whose evaluated examples are to
   * be exported.
   */
  name: string;
  /** Required. The desired output location and configuration. */
  outputConfig: ExportEvaluatedExamplesOutputConfig | undefined;
}

/** Request message for [AutoMl.GetModelEvaluation][google.cloud.automl.v1beta1.AutoMl.GetModelEvaluation]. */
export interface GetModelEvaluationRequest {
  /** Required. Resource name for the model evaluation. */
  name: string;
}

/** Request message for [AutoMl.ListModelEvaluations][google.cloud.automl.v1beta1.AutoMl.ListModelEvaluations]. */
export interface ListModelEvaluationsRequest {
  /**
   * Required. Resource name of the model to list the model evaluations for.
   * If modelId is set as "-", this will list model evaluations from across all
   * models of the parent location.
   */
  parent: string;
  /**
   * An expression for filtering the results of the request.
   *
   *   * `annotation_spec_id` - for =, !=  or existence. See example below for
   *                          the last.
   *
   * Some examples of using the filter are:
   *
   *   * `annotation_spec_id!=4` --> The model evaluation was done for
   *                             annotation spec with ID different than 4.
   *   * `NOT annotation_spec_id:*` --> The model evaluation was done for
   *                                aggregate of all annotation specs.
   */
  filter: string;
  /** Requested page size. */
  pageSize: number;
  /**
   * A token identifying a page of results for the server to return.
   * Typically obtained via
   * [ListModelEvaluationsResponse.next_page_token][google.cloud.automl.v1beta1.ListModelEvaluationsResponse.next_page_token] of the previous
   * [AutoMl.ListModelEvaluations][google.cloud.automl.v1beta1.AutoMl.ListModelEvaluations] call.
   */
  pageToken: string;
}

/** Response message for [AutoMl.ListModelEvaluations][google.cloud.automl.v1beta1.AutoMl.ListModelEvaluations]. */
export interface ListModelEvaluationsResponse {
  /** List of model evaluations in the requested page. */
  modelEvaluation: ModelEvaluation[];
  /**
   * A token to retrieve next page of results.
   * Pass to the [ListModelEvaluationsRequest.page_token][google.cloud.automl.v1beta1.ListModelEvaluationsRequest.page_token] field of a new
   * [AutoMl.ListModelEvaluations][google.cloud.automl.v1beta1.AutoMl.ListModelEvaluations] request to obtain that page.
   */
  nextPageToken: string;
}

function createBaseCreateDatasetRequest(): CreateDatasetRequest {
  return { parent: "", dataset: undefined };
}

export const CreateDatasetRequest: MessageFns<CreateDatasetRequest> = {
  encode(message: CreateDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataset !== undefined) {
      Dataset.encode(message.dataset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataset = Dataset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatasetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataset: isSet(object.dataset) ? Dataset.fromJSON(object.dataset) : undefined,
    };
  },

  toJSON(message: CreateDatasetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataset !== undefined) {
      obj.dataset = Dataset.toJSON(message.dataset);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetRequest>): CreateDatasetRequest {
    return CreateDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatasetRequest>): CreateDatasetRequest {
    const message = createBaseCreateDatasetRequest();
    message.parent = object.parent ?? "";
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? Dataset.fromPartial(object.dataset)
      : undefined;
    return message;
  },
};

function createBaseGetDatasetRequest(): GetDatasetRequest {
  return { name: "" };
}

export const GetDatasetRequest: MessageFns<GetDatasetRequest> = {
  encode(message: GetDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDatasetRequest>): GetDatasetRequest {
    return GetDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDatasetRequest>): GetDatasetRequest {
    const message = createBaseGetDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDatasetsRequest(): ListDatasetsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListDatasetsRequest: MessageFns<ListDatasetsRequest> = {
  encode(message: ListDatasetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDatasetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetsRequest>): ListDatasetsRequest {
    return ListDatasetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetsRequest>): ListDatasetsRequest {
    const message = createBaseListDatasetsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDatasetsResponse(): ListDatasetsResponse {
  return { datasets: [], nextPageToken: "" };
}

export const ListDatasetsResponse: MessageFns<ListDatasetsResponse> = {
  encode(message: ListDatasetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.datasets) {
      Dataset.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasets.push(Dataset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetsResponse {
    return {
      datasets: globalThis.Array.isArray(object?.datasets) ? object.datasets.map((e: any) => Dataset.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDatasetsResponse): unknown {
    const obj: any = {};
    if (message.datasets?.length) {
      obj.datasets = message.datasets.map((e) => Dataset.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetsResponse>): ListDatasetsResponse {
    return ListDatasetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetsResponse>): ListDatasetsResponse {
    const message = createBaseListDatasetsResponse();
    message.datasets = object.datasets?.map((e) => Dataset.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateDatasetRequest(): UpdateDatasetRequest {
  return { dataset: undefined, updateMask: undefined };
}

export const UpdateDatasetRequest: MessageFns<UpdateDatasetRequest> = {
  encode(message: UpdateDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== undefined) {
      Dataset.encode(message.dataset, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = Dataset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDatasetRequest {
    return {
      dataset: isSet(object.dataset) ? Dataset.fromJSON(object.dataset) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDatasetRequest): unknown {
    const obj: any = {};
    if (message.dataset !== undefined) {
      obj.dataset = Dataset.toJSON(message.dataset);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDatasetRequest>): UpdateDatasetRequest {
    return UpdateDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDatasetRequest>): UpdateDatasetRequest {
    const message = createBaseUpdateDatasetRequest();
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? Dataset.fromPartial(object.dataset)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDatasetRequest(): DeleteDatasetRequest {
  return { name: "" };
}

export const DeleteDatasetRequest: MessageFns<DeleteDatasetRequest> = {
  encode(message: DeleteDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDatasetRequest>): DeleteDatasetRequest {
    return DeleteDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDatasetRequest>): DeleteDatasetRequest {
    const message = createBaseDeleteDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseImportDataRequest(): ImportDataRequest {
  return { name: "", inputConfig: undefined };
}

export const ImportDataRequest: MessageFns<ImportDataRequest> = {
  encode(message: ImportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.inputConfig !== undefined) {
      InputConfig.encode(message.inputConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inputConfig = InputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      inputConfig: isSet(object.inputConfig) ? InputConfig.fromJSON(object.inputConfig) : undefined,
    };
  },

  toJSON(message: ImportDataRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.inputConfig !== undefined) {
      obj.inputConfig = InputConfig.toJSON(message.inputConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest>): ImportDataRequest {
    return ImportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest>): ImportDataRequest {
    const message = createBaseImportDataRequest();
    message.name = object.name ?? "";
    message.inputConfig = (object.inputConfig !== undefined && object.inputConfig !== null)
      ? InputConfig.fromPartial(object.inputConfig)
      : undefined;
    return message;
  },
};

function createBaseExportDataRequest(): ExportDataRequest {
  return { name: "", outputConfig: undefined };
}

export const ExportDataRequest: MessageFns<ExportDataRequest> = {
  encode(message: ExportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.outputConfig !== undefined) {
      OutputConfig.encode(message.outputConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputConfig = OutputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      outputConfig: isSet(object.outputConfig) ? OutputConfig.fromJSON(object.outputConfig) : undefined,
    };
  },

  toJSON(message: ExportDataRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.outputConfig !== undefined) {
      obj.outputConfig = OutputConfig.toJSON(message.outputConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest>): ExportDataRequest {
    return ExportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest>): ExportDataRequest {
    const message = createBaseExportDataRequest();
    message.name = object.name ?? "";
    message.outputConfig = (object.outputConfig !== undefined && object.outputConfig !== null)
      ? OutputConfig.fromPartial(object.outputConfig)
      : undefined;
    return message;
  },
};

function createBaseGetAnnotationSpecRequest(): GetAnnotationSpecRequest {
  return { name: "" };
}

export const GetAnnotationSpecRequest: MessageFns<GetAnnotationSpecRequest> = {
  encode(message: GetAnnotationSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnnotationSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnnotationSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnnotationSpecRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnnotationSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnnotationSpecRequest>): GetAnnotationSpecRequest {
    return GetAnnotationSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnnotationSpecRequest>): GetAnnotationSpecRequest {
    const message = createBaseGetAnnotationSpecRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetTableSpecRequest(): GetTableSpecRequest {
  return { name: "", fieldMask: undefined };
}

export const GetTableSpecRequest: MessageFns<GetTableSpecRequest> = {
  encode(message: GetTableSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTableSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTableSpecRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
    };
  },

  toJSON(message: GetTableSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetTableSpecRequest>): GetTableSpecRequest {
    return GetTableSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTableSpecRequest>): GetTableSpecRequest {
    const message = createBaseGetTableSpecRequest();
    message.name = object.name ?? "";
    message.fieldMask = object.fieldMask ?? undefined;
    return message;
  },
};

function createBaseListTableSpecsRequest(): ListTableSpecsRequest {
  return { parent: "", fieldMask: undefined, filter: "", pageSize: 0, pageToken: "" };
}

export const ListTableSpecsRequest: MessageFns<ListTableSpecsRequest> = {
  encode(message: ListTableSpecsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(18).fork()).join();
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTableSpecsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTableSpecsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTableSpecsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTableSpecsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTableSpecsRequest>): ListTableSpecsRequest {
    return ListTableSpecsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTableSpecsRequest>): ListTableSpecsRequest {
    const message = createBaseListTableSpecsRequest();
    message.parent = object.parent ?? "";
    message.fieldMask = object.fieldMask ?? undefined;
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTableSpecsResponse(): ListTableSpecsResponse {
  return { tableSpecs: [], nextPageToken: "" };
}

export const ListTableSpecsResponse: MessageFns<ListTableSpecsResponse> = {
  encode(message: ListTableSpecsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tableSpecs) {
      TableSpec.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTableSpecsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTableSpecsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tableSpecs.push(TableSpec.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTableSpecsResponse {
    return {
      tableSpecs: globalThis.Array.isArray(object?.tableSpecs)
        ? object.tableSpecs.map((e: any) => TableSpec.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTableSpecsResponse): unknown {
    const obj: any = {};
    if (message.tableSpecs?.length) {
      obj.tableSpecs = message.tableSpecs.map((e) => TableSpec.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTableSpecsResponse>): ListTableSpecsResponse {
    return ListTableSpecsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTableSpecsResponse>): ListTableSpecsResponse {
    const message = createBaseListTableSpecsResponse();
    message.tableSpecs = object.tableSpecs?.map((e) => TableSpec.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateTableSpecRequest(): UpdateTableSpecRequest {
  return { tableSpec: undefined, updateMask: undefined };
}

export const UpdateTableSpecRequest: MessageFns<UpdateTableSpecRequest> = {
  encode(message: UpdateTableSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tableSpec !== undefined) {
      TableSpec.encode(message.tableSpec, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTableSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTableSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tableSpec = TableSpec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTableSpecRequest {
    return {
      tableSpec: isSet(object.tableSpec) ? TableSpec.fromJSON(object.tableSpec) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTableSpecRequest): unknown {
    const obj: any = {};
    if (message.tableSpec !== undefined) {
      obj.tableSpec = TableSpec.toJSON(message.tableSpec);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTableSpecRequest>): UpdateTableSpecRequest {
    return UpdateTableSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTableSpecRequest>): UpdateTableSpecRequest {
    const message = createBaseUpdateTableSpecRequest();
    message.tableSpec = (object.tableSpec !== undefined && object.tableSpec !== null)
      ? TableSpec.fromPartial(object.tableSpec)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetColumnSpecRequest(): GetColumnSpecRequest {
  return { name: "", fieldMask: undefined };
}

export const GetColumnSpecRequest: MessageFns<GetColumnSpecRequest> = {
  encode(message: GetColumnSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetColumnSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetColumnSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetColumnSpecRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
    };
  },

  toJSON(message: GetColumnSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetColumnSpecRequest>): GetColumnSpecRequest {
    return GetColumnSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetColumnSpecRequest>): GetColumnSpecRequest {
    const message = createBaseGetColumnSpecRequest();
    message.name = object.name ?? "";
    message.fieldMask = object.fieldMask ?? undefined;
    return message;
  },
};

function createBaseListColumnSpecsRequest(): ListColumnSpecsRequest {
  return { parent: "", fieldMask: undefined, filter: "", pageSize: 0, pageToken: "" };
}

export const ListColumnSpecsRequest: MessageFns<ListColumnSpecsRequest> = {
  encode(message: ListColumnSpecsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(18).fork()).join();
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListColumnSpecsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListColumnSpecsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListColumnSpecsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListColumnSpecsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListColumnSpecsRequest>): ListColumnSpecsRequest {
    return ListColumnSpecsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListColumnSpecsRequest>): ListColumnSpecsRequest {
    const message = createBaseListColumnSpecsRequest();
    message.parent = object.parent ?? "";
    message.fieldMask = object.fieldMask ?? undefined;
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListColumnSpecsResponse(): ListColumnSpecsResponse {
  return { columnSpecs: [], nextPageToken: "" };
}

export const ListColumnSpecsResponse: MessageFns<ListColumnSpecsResponse> = {
  encode(message: ListColumnSpecsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.columnSpecs) {
      ColumnSpec.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListColumnSpecsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListColumnSpecsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.columnSpecs.push(ColumnSpec.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListColumnSpecsResponse {
    return {
      columnSpecs: globalThis.Array.isArray(object?.columnSpecs)
        ? object.columnSpecs.map((e: any) => ColumnSpec.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListColumnSpecsResponse): unknown {
    const obj: any = {};
    if (message.columnSpecs?.length) {
      obj.columnSpecs = message.columnSpecs.map((e) => ColumnSpec.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListColumnSpecsResponse>): ListColumnSpecsResponse {
    return ListColumnSpecsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListColumnSpecsResponse>): ListColumnSpecsResponse {
    const message = createBaseListColumnSpecsResponse();
    message.columnSpecs = object.columnSpecs?.map((e) => ColumnSpec.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateColumnSpecRequest(): UpdateColumnSpecRequest {
  return { columnSpec: undefined, updateMask: undefined };
}

export const UpdateColumnSpecRequest: MessageFns<UpdateColumnSpecRequest> = {
  encode(message: UpdateColumnSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.columnSpec !== undefined) {
      ColumnSpec.encode(message.columnSpec, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateColumnSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateColumnSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.columnSpec = ColumnSpec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateColumnSpecRequest {
    return {
      columnSpec: isSet(object.columnSpec) ? ColumnSpec.fromJSON(object.columnSpec) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateColumnSpecRequest): unknown {
    const obj: any = {};
    if (message.columnSpec !== undefined) {
      obj.columnSpec = ColumnSpec.toJSON(message.columnSpec);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateColumnSpecRequest>): UpdateColumnSpecRequest {
    return UpdateColumnSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateColumnSpecRequest>): UpdateColumnSpecRequest {
    const message = createBaseUpdateColumnSpecRequest();
    message.columnSpec = (object.columnSpec !== undefined && object.columnSpec !== null)
      ? ColumnSpec.fromPartial(object.columnSpec)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateModelRequest(): CreateModelRequest {
  return { parent: "", model: undefined };
}

export const CreateModelRequest: MessageFns<CreateModelRequest> = {
  encode(message: CreateModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.model !== undefined) {
      Model.encode(message.model, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.model = Model.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      model: isSet(object.model) ? Model.fromJSON(object.model) : undefined,
    };
  },

  toJSON(message: CreateModelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.model !== undefined) {
      obj.model = Model.toJSON(message.model);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelRequest>): CreateModelRequest {
    return CreateModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModelRequest>): CreateModelRequest {
    const message = createBaseCreateModelRequest();
    message.parent = object.parent ?? "";
    message.model = (object.model !== undefined && object.model !== null) ? Model.fromPartial(object.model) : undefined;
    return message;
  },
};

function createBaseGetModelRequest(): GetModelRequest {
  return { name: "" };
}

export const GetModelRequest: MessageFns<GetModelRequest> = {
  encode(message: GetModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelRequest>): GetModelRequest {
    return GetModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelRequest>): GetModelRequest {
    const message = createBaseGetModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelsRequest(): ListModelsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListModelsRequest: MessageFns<ListModelsRequest> = {
  encode(message: ListModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListModelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelsRequest>): ListModelsRequest {
    return ListModelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelsRequest>): ListModelsRequest {
    const message = createBaseListModelsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListModelsResponse(): ListModelsResponse {
  return { model: [], nextPageToken: "" };
}

export const ListModelsResponse: MessageFns<ListModelsResponse> = {
  encode(message: ListModelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.model) {
      Model.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model.push(Model.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelsResponse {
    return {
      model: globalThis.Array.isArray(object?.model) ? object.model.map((e: any) => Model.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListModelsResponse): unknown {
    const obj: any = {};
    if (message.model?.length) {
      obj.model = message.model.map((e) => Model.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelsResponse>): ListModelsResponse {
    return ListModelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelsResponse>): ListModelsResponse {
    const message = createBaseListModelsResponse();
    message.model = object.model?.map((e) => Model.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteModelRequest(): DeleteModelRequest {
  return { name: "" };
}

export const DeleteModelRequest: MessageFns<DeleteModelRequest> = {
  encode(message: DeleteModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteModelRequest>): DeleteModelRequest {
    return DeleteModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteModelRequest>): DeleteModelRequest {
    const message = createBaseDeleteModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeployModelRequest(): DeployModelRequest {
  return {
    imageObjectDetectionModelDeploymentMetadata: undefined,
    imageClassificationModelDeploymentMetadata: undefined,
    name: "",
  };
}

export const DeployModelRequest: MessageFns<DeployModelRequest> = {
  encode(message: DeployModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageObjectDetectionModelDeploymentMetadata !== undefined) {
      ImageObjectDetectionModelDeploymentMetadata.encode(
        message.imageObjectDetectionModelDeploymentMetadata,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.imageClassificationModelDeploymentMetadata !== undefined) {
      ImageClassificationModelDeploymentMetadata.encode(
        message.imageClassificationModelDeploymentMetadata,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.imageObjectDetectionModelDeploymentMetadata = ImageObjectDetectionModelDeploymentMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.imageClassificationModelDeploymentMetadata = ImageClassificationModelDeploymentMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployModelRequest {
    return {
      imageObjectDetectionModelDeploymentMetadata: isSet(object.imageObjectDetectionModelDeploymentMetadata)
        ? ImageObjectDetectionModelDeploymentMetadata.fromJSON(object.imageObjectDetectionModelDeploymentMetadata)
        : undefined,
      imageClassificationModelDeploymentMetadata: isSet(object.imageClassificationModelDeploymentMetadata)
        ? ImageClassificationModelDeploymentMetadata.fromJSON(object.imageClassificationModelDeploymentMetadata)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: DeployModelRequest): unknown {
    const obj: any = {};
    if (message.imageObjectDetectionModelDeploymentMetadata !== undefined) {
      obj.imageObjectDetectionModelDeploymentMetadata = ImageObjectDetectionModelDeploymentMetadata.toJSON(
        message.imageObjectDetectionModelDeploymentMetadata,
      );
    }
    if (message.imageClassificationModelDeploymentMetadata !== undefined) {
      obj.imageClassificationModelDeploymentMetadata = ImageClassificationModelDeploymentMetadata.toJSON(
        message.imageClassificationModelDeploymentMetadata,
      );
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployModelRequest>): DeployModelRequest {
    return DeployModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployModelRequest>): DeployModelRequest {
    const message = createBaseDeployModelRequest();
    message.imageObjectDetectionModelDeploymentMetadata =
      (object.imageObjectDetectionModelDeploymentMetadata !== undefined &&
          object.imageObjectDetectionModelDeploymentMetadata !== null)
        ? ImageObjectDetectionModelDeploymentMetadata.fromPartial(object.imageObjectDetectionModelDeploymentMetadata)
        : undefined;
    message.imageClassificationModelDeploymentMetadata =
      (object.imageClassificationModelDeploymentMetadata !== undefined &&
          object.imageClassificationModelDeploymentMetadata !== null)
        ? ImageClassificationModelDeploymentMetadata.fromPartial(object.imageClassificationModelDeploymentMetadata)
        : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeployModelRequest(): UndeployModelRequest {
  return { name: "" };
}

export const UndeployModelRequest: MessageFns<UndeployModelRequest> = {
  encode(message: UndeployModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeployModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployModelRequest>): UndeployModelRequest {
    return UndeployModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployModelRequest>): UndeployModelRequest {
    const message = createBaseUndeployModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExportModelRequest(): ExportModelRequest {
  return { name: "", outputConfig: undefined };
}

export const ExportModelRequest: MessageFns<ExportModelRequest> = {
  encode(message: ExportModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.outputConfig !== undefined) {
      ModelExportOutputConfig.encode(message.outputConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputConfig = ModelExportOutputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportModelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      outputConfig: isSet(object.outputConfig) ? ModelExportOutputConfig.fromJSON(object.outputConfig) : undefined,
    };
  },

  toJSON(message: ExportModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.outputConfig !== undefined) {
      obj.outputConfig = ModelExportOutputConfig.toJSON(message.outputConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportModelRequest>): ExportModelRequest {
    return ExportModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportModelRequest>): ExportModelRequest {
    const message = createBaseExportModelRequest();
    message.name = object.name ?? "";
    message.outputConfig = (object.outputConfig !== undefined && object.outputConfig !== null)
      ? ModelExportOutputConfig.fromPartial(object.outputConfig)
      : undefined;
    return message;
  },
};

function createBaseExportEvaluatedExamplesRequest(): ExportEvaluatedExamplesRequest {
  return { name: "", outputConfig: undefined };
}

export const ExportEvaluatedExamplesRequest: MessageFns<ExportEvaluatedExamplesRequest> = {
  encode(message: ExportEvaluatedExamplesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.outputConfig !== undefined) {
      ExportEvaluatedExamplesOutputConfig.encode(message.outputConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportEvaluatedExamplesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportEvaluatedExamplesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputConfig = ExportEvaluatedExamplesOutputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportEvaluatedExamplesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      outputConfig: isSet(object.outputConfig)
        ? ExportEvaluatedExamplesOutputConfig.fromJSON(object.outputConfig)
        : undefined,
    };
  },

  toJSON(message: ExportEvaluatedExamplesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.outputConfig !== undefined) {
      obj.outputConfig = ExportEvaluatedExamplesOutputConfig.toJSON(message.outputConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportEvaluatedExamplesRequest>): ExportEvaluatedExamplesRequest {
    return ExportEvaluatedExamplesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportEvaluatedExamplesRequest>): ExportEvaluatedExamplesRequest {
    const message = createBaseExportEvaluatedExamplesRequest();
    message.name = object.name ?? "";
    message.outputConfig = (object.outputConfig !== undefined && object.outputConfig !== null)
      ? ExportEvaluatedExamplesOutputConfig.fromPartial(object.outputConfig)
      : undefined;
    return message;
  },
};

function createBaseGetModelEvaluationRequest(): GetModelEvaluationRequest {
  return { name: "" };
}

export const GetModelEvaluationRequest: MessageFns<GetModelEvaluationRequest> = {
  encode(message: GetModelEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelEvaluationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetModelEvaluationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelEvaluationRequest>): GetModelEvaluationRequest {
    return GetModelEvaluationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelEvaluationRequest>): GetModelEvaluationRequest {
    const message = createBaseGetModelEvaluationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelEvaluationsRequest(): ListModelEvaluationsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListModelEvaluationsRequest: MessageFns<ListModelEvaluationsRequest> = {
  encode(message: ListModelEvaluationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelEvaluationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelEvaluationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelEvaluationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListModelEvaluationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelEvaluationsRequest>): ListModelEvaluationsRequest {
    return ListModelEvaluationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelEvaluationsRequest>): ListModelEvaluationsRequest {
    const message = createBaseListModelEvaluationsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListModelEvaluationsResponse(): ListModelEvaluationsResponse {
  return { modelEvaluation: [], nextPageToken: "" };
}

export const ListModelEvaluationsResponse: MessageFns<ListModelEvaluationsResponse> = {
  encode(message: ListModelEvaluationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelEvaluation) {
      ModelEvaluation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelEvaluationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelEvaluationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelEvaluation.push(ModelEvaluation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelEvaluationsResponse {
    return {
      modelEvaluation: globalThis.Array.isArray(object?.modelEvaluation)
        ? object.modelEvaluation.map((e: any) => ModelEvaluation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListModelEvaluationsResponse): unknown {
    const obj: any = {};
    if (message.modelEvaluation?.length) {
      obj.modelEvaluation = message.modelEvaluation.map((e) => ModelEvaluation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelEvaluationsResponse>): ListModelEvaluationsResponse {
    return ListModelEvaluationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelEvaluationsResponse>): ListModelEvaluationsResponse {
    const message = createBaseListModelEvaluationsResponse();
    message.modelEvaluation = object.modelEvaluation?.map((e) => ModelEvaluation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * AutoML Server API.
 *
 * The resource names are assigned by the server.
 * The server never reuses names that it has created after the resources with
 * those names are deleted.
 *
 * An ID of a resource is the last element of the item's resource name. For
 * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`, then
 * the id for the item is `{dataset_id}`.
 *
 * Currently the only supported `location_id` is "us-central1".
 *
 * On any input that is documented to expect a string parameter in
 * snake_case or kebab-case, either of those cases is accepted.
 */
export type AutoMlDefinition = typeof AutoMlDefinition;
export const AutoMlDefinition = {
  name: "AutoMl",
  fullName: "google.cloud.automl.v1beta1.AutoMl",
  methods: {
    /** Creates a dataset. */
    createDataset: {
      name: "CreateDataset",
      requestType: CreateDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 100, 97, 116, 97, 115, 101, 116])],
          578365826: [
            Buffer.from([
              60,
              58,
              7,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              34,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a dataset. */
    getDataset: {
      name: "GetDataset",
      requestType: GetDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists datasets in a project. */
    listDatasets: {
      name: "ListDatasets",
      requestType: ListDatasetsRequest,
      requestStream: false,
      responseType: ListDatasetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a dataset. */
    updateDataset: {
      name: "UpdateDataset",
      requestType: UpdateDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 100, 97, 116, 97, 115, 101, 116])],
          578365826: [
            Buffer.from([
              68,
              58,
              7,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              50,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a dataset and all of its contents.
     * Returns empty response in the
     * [response][google.longrunning.Operation.response] field when it completes,
     * and `delete_details` in the
     * [metadata][google.longrunning.Operation.metadata] field.
     */
    deleteDataset: {
      name: "DeleteDataset",
      requestType: DeleteDatasetRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Imports data into a dataset.
     * For Tables this method can only be called on an empty Dataset.
     *
     * For Tables:
     * *   A
     * [schema_inference_version][google.cloud.automl.v1beta1.InputConfig.params]
     *     parameter must be explicitly set.
     * Returns an empty response in the
     * [response][google.longrunning.Operation.response] field when it completes.
     */
    importData: {
      name: "ImportData",
      requestType: ImportDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 110, 97, 109, 101, 44, 105, 110, 112, 117, 116, 95, 99, 111, 110, 102, 105, 103])],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Exports dataset's data to the provided output location.
     * Returns an empty response in the
     * [response][google.longrunning.Operation.response] field when it completes.
     */
    exportData: {
      name: "ExportData",
      requestType: ExportDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 110, 97, 109, 101, 44, 111, 117, 116, 112, 117, 116, 95, 99, 111, 110, 102, 105, 103]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
    /** Gets an annotation spec. */
    getAnnotationSpec: {
      name: "GetAnnotationSpec",
      requestType: GetAnnotationSpecRequest,
      requestStream: false,
      responseType: AnnotationSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a table spec. */
    getTableSpec: {
      name: "GetTableSpec",
      requestType: GetTableSpecRequest,
      requestStream: false,
      responseType: TableSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists table specs in a dataset. */
    listTableSpecs: {
      name: "ListTableSpecs",
      requestType: ListTableSpecsRequest,
      requestStream: false,
      responseType: ListTableSpecsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              98,
              108,
              101,
              83,
              112,
              101,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a table spec. */
    updateTableSpec: {
      name: "UpdateTableSpec",
      requestType: UpdateTableSpecRequest,
      requestStream: false,
      responseType: TableSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 116, 97, 98, 108, 101, 95, 115, 112, 101, 99])],
          578365826: [
            Buffer.from([
              87,
              58,
              10,
              116,
              97,
              98,
              108,
              101,
              95,
              115,
              112,
              101,
              99,
              50,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              97,
              98,
              108,
              101,
              95,
              115,
              112,
              101,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a column spec. */
    getColumnSpec: {
      name: "GetColumnSpec",
      requestType: GetColumnSpecRequest,
      requestStream: false,
      responseType: ColumnSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              117,
              109,
              110,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists column specs in a table spec. */
    listColumnSpecs: {
      name: "ListColumnSpecs",
      requestType: ListColumnSpecsRequest,
      requestStream: false,
      responseType: ListColumnSpecsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              108,
              117,
              109,
              110,
              83,
              112,
              101,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a column spec. */
    updateColumnSpec: {
      name: "UpdateColumnSpec",
      requestType: UpdateColumnSpecRequest,
      requestStream: false,
      responseType: ColumnSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 99, 111, 108, 117, 109, 110, 95, 115, 112, 101, 99])],
          578365826: [
            Buffer.from([
              103,
              58,
              11,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              115,
              112,
              101,
              99,
              50,
              88,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              115,
              112,
              101,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              117,
              109,
              110,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a model.
     * Returns a Model in the [response][google.longrunning.Operation.response]
     * field when it completes.
     * When you create a model, several model evaluations are created for it:
     * a global evaluation, and one evaluation for each annotation spec.
     */
    createModel: {
      name: "CreateModel",
      requestType: CreateModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              77,
              111,
              100,
              101,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 109, 111, 100, 101, 108])],
          578365826: [
            Buffer.from([
              56,
              58,
              5,
              109,
              111,
              100,
              101,
              108,
              34,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a model. */
    getModel: {
      name: "GetModel",
      requestType: GetModelRequest,
      requestStream: false,
      responseType: Model,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists models. */
    listModels: {
      name: "ListModels",
      requestType: ListModelsRequest,
      requestStream: false,
      responseType: ListModelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a model.
     * Returns `google.protobuf.Empty` in the
     * [response][google.longrunning.Operation.response] field when it completes,
     * and `delete_details` in the
     * [metadata][google.longrunning.Operation.metadata] field.
     */
    deleteModel: {
      name: "DeleteModel",
      requestType: DeleteModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deploys a model. If a model is already deployed, deploying it with the
     * same parameters has no effect. Deploying with different parametrs
     * (as e.g. changing
     *
     * [node_number][google.cloud.automl.v1beta1.ImageObjectDetectionModelDeploymentMetadata.node_number])
     *  will reset the deployment state without pausing the model's availability.
     *
     * Only applicable for Text Classification, Image Object Detection , Tables, and Image Segmentation; all other domains manage
     * deployment automatically.
     *
     * Returns an empty response in the
     * [response][google.longrunning.Operation.response] field when it completes.
     */
    deployModel: {
      name: "DeployModel",
      requestType: DeployModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              112,
              108,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Undeploys a model. If the model is not deployed this method has no effect.
     *
     * Only applicable for Text Classification, Image Object Detection and Tables;
     * all other domains manage deployment automatically.
     *
     * Returns an empty response in the
     * [response][google.longrunning.Operation.response] field when it completes.
     */
    undeployModel: {
      name: "UndeployModel",
      requestType: UndeployModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Exports a trained, "export-able", model to a user specified Google Cloud
     * Storage location. A model is considered export-able if and only if it has
     * an export format defined for it in
     *
     * [ModelExportOutputConfig][google.cloud.automl.v1beta1.ModelExportOutputConfig].
     *
     * Returns an empty response in the
     * [response][google.longrunning.Operation.response] field when it completes.
     */
    exportModel: {
      name: "ExportModel",
      requestType: ExportModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 110, 97, 109, 101, 44, 111, 117, 116, 112, 117, 116, 95, 99, 111, 110, 102, 105, 103]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Exports examples on which the model was evaluated (i.e. which were in the
     * TEST set of the dataset the model was created from), together with their
     * ground truth annotations and the annotations created (predicted) by the
     * model.
     * The examples, ground truth and predictions are exported in the state
     * they were at the moment the model was evaluated.
     *
     * This export is available only for 30 days since the model evaluation is
     * created.
     *
     * Currently only available for Tables.
     *
     * Returns an empty response in the
     * [response][google.longrunning.Operation.response] field when it completes.
     */
    exportEvaluatedExamples: {
      name: "ExportEvaluatedExamples",
      requestType: ExportEvaluatedExamplesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 110, 97, 109, 101, 44, 111, 117, 116, 112, 117, 116, 95, 99, 111, 110, 102, 105, 103]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              69,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              100,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a model evaluation. */
    getModelEvaluation: {
      name: "GetModelEvaluation",
      requestType: GetModelEvaluationRequest,
      requestStream: false,
      responseType: ModelEvaluation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              69,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists model evaluations. */
    listModelEvaluations: {
      name: "ListModelEvaluations",
      requestType: ListModelEvaluationsRequest,
      requestStream: false,
      responseType: ListModelEvaluationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              69,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AutoMlServiceImplementation<CallContextExt = {}> {
  /** Creates a dataset. */
  createDataset(request: CreateDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /** Gets a dataset. */
  getDataset(request: GetDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /** Lists datasets in a project. */
  listDatasets(
    request: ListDatasetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDatasetsResponse>>;
  /** Updates a dataset. */
  updateDataset(request: UpdateDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /**
   * Deletes a dataset and all of its contents.
   * Returns empty response in the
   * [response][google.longrunning.Operation.response] field when it completes,
   * and `delete_details` in the
   * [metadata][google.longrunning.Operation.metadata] field.
   */
  deleteDataset(request: DeleteDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Imports data into a dataset.
   * For Tables this method can only be called on an empty Dataset.
   *
   * For Tables:
   * *   A
   * [schema_inference_version][google.cloud.automl.v1beta1.InputConfig.params]
   *     parameter must be explicitly set.
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  importData(request: ImportDataRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Exports dataset's data to the provided output location.
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  exportData(request: ExportDataRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets an annotation spec. */
  getAnnotationSpec(
    request: GetAnnotationSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnnotationSpec>>;
  /** Gets a table spec. */
  getTableSpec(request: GetTableSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TableSpec>>;
  /** Lists table specs in a dataset. */
  listTableSpecs(
    request: ListTableSpecsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTableSpecsResponse>>;
  /** Updates a table spec. */
  updateTableSpec(
    request: UpdateTableSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TableSpec>>;
  /** Gets a column spec. */
  getColumnSpec(request: GetColumnSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ColumnSpec>>;
  /** Lists column specs in a table spec. */
  listColumnSpecs(
    request: ListColumnSpecsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListColumnSpecsResponse>>;
  /** Updates a column spec. */
  updateColumnSpec(
    request: UpdateColumnSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ColumnSpec>>;
  /**
   * Creates a model.
   * Returns a Model in the [response][google.longrunning.Operation.response]
   * field when it completes.
   * When you create a model, several model evaluations are created for it:
   * a global evaluation, and one evaluation for each annotation spec.
   */
  createModel(request: CreateModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets a model. */
  getModel(request: GetModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Model>>;
  /** Lists models. */
  listModels(
    request: ListModelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListModelsResponse>>;
  /**
   * Deletes a model.
   * Returns `google.protobuf.Empty` in the
   * [response][google.longrunning.Operation.response] field when it completes,
   * and `delete_details` in the
   * [metadata][google.longrunning.Operation.metadata] field.
   */
  deleteModel(request: DeleteModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Deploys a model. If a model is already deployed, deploying it with the
   * same parameters has no effect. Deploying with different parametrs
   * (as e.g. changing
   *
   * [node_number][google.cloud.automl.v1beta1.ImageObjectDetectionModelDeploymentMetadata.node_number])
   *  will reset the deployment state without pausing the model's availability.
   *
   * Only applicable for Text Classification, Image Object Detection , Tables, and Image Segmentation; all other domains manage
   * deployment automatically.
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  deployModel(request: DeployModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Undeploys a model. If the model is not deployed this method has no effect.
   *
   * Only applicable for Text Classification, Image Object Detection and Tables;
   * all other domains manage deployment automatically.
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  undeployModel(request: UndeployModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Exports a trained, "export-able", model to a user specified Google Cloud
   * Storage location. A model is considered export-able if and only if it has
   * an export format defined for it in
   *
   * [ModelExportOutputConfig][google.cloud.automl.v1beta1.ModelExportOutputConfig].
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  exportModel(request: ExportModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Exports examples on which the model was evaluated (i.e. which were in the
   * TEST set of the dataset the model was created from), together with their
   * ground truth annotations and the annotations created (predicted) by the
   * model.
   * The examples, ground truth and predictions are exported in the state
   * they were at the moment the model was evaluated.
   *
   * This export is available only for 30 days since the model evaluation is
   * created.
   *
   * Currently only available for Tables.
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  exportEvaluatedExamples(
    request: ExportEvaluatedExamplesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a model evaluation. */
  getModelEvaluation(
    request: GetModelEvaluationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModelEvaluation>>;
  /** Lists model evaluations. */
  listModelEvaluations(
    request: ListModelEvaluationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListModelEvaluationsResponse>>;
}

export interface AutoMlClient<CallOptionsExt = {}> {
  /** Creates a dataset. */
  createDataset(request: DeepPartial<CreateDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /** Gets a dataset. */
  getDataset(request: DeepPartial<GetDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /** Lists datasets in a project. */
  listDatasets(
    request: DeepPartial<ListDatasetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDatasetsResponse>;
  /** Updates a dataset. */
  updateDataset(request: DeepPartial<UpdateDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /**
   * Deletes a dataset and all of its contents.
   * Returns empty response in the
   * [response][google.longrunning.Operation.response] field when it completes,
   * and `delete_details` in the
   * [metadata][google.longrunning.Operation.metadata] field.
   */
  deleteDataset(request: DeepPartial<DeleteDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Imports data into a dataset.
   * For Tables this method can only be called on an empty Dataset.
   *
   * For Tables:
   * *   A
   * [schema_inference_version][google.cloud.automl.v1beta1.InputConfig.params]
   *     parameter must be explicitly set.
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  importData(request: DeepPartial<ImportDataRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Exports dataset's data to the provided output location.
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  exportData(request: DeepPartial<ExportDataRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets an annotation spec. */
  getAnnotationSpec(
    request: DeepPartial<GetAnnotationSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnnotationSpec>;
  /** Gets a table spec. */
  getTableSpec(request: DeepPartial<GetTableSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<TableSpec>;
  /** Lists table specs in a dataset. */
  listTableSpecs(
    request: DeepPartial<ListTableSpecsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTableSpecsResponse>;
  /** Updates a table spec. */
  updateTableSpec(
    request: DeepPartial<UpdateTableSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TableSpec>;
  /** Gets a column spec. */
  getColumnSpec(
    request: DeepPartial<GetColumnSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ColumnSpec>;
  /** Lists column specs in a table spec. */
  listColumnSpecs(
    request: DeepPartial<ListColumnSpecsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListColumnSpecsResponse>;
  /** Updates a column spec. */
  updateColumnSpec(
    request: DeepPartial<UpdateColumnSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ColumnSpec>;
  /**
   * Creates a model.
   * Returns a Model in the [response][google.longrunning.Operation.response]
   * field when it completes.
   * When you create a model, several model evaluations are created for it:
   * a global evaluation, and one evaluation for each annotation spec.
   */
  createModel(request: DeepPartial<CreateModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets a model. */
  getModel(request: DeepPartial<GetModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Model>;
  /** Lists models. */
  listModels(
    request: DeepPartial<ListModelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListModelsResponse>;
  /**
   * Deletes a model.
   * Returns `google.protobuf.Empty` in the
   * [response][google.longrunning.Operation.response] field when it completes,
   * and `delete_details` in the
   * [metadata][google.longrunning.Operation.metadata] field.
   */
  deleteModel(request: DeepPartial<DeleteModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Deploys a model. If a model is already deployed, deploying it with the
   * same parameters has no effect. Deploying with different parametrs
   * (as e.g. changing
   *
   * [node_number][google.cloud.automl.v1beta1.ImageObjectDetectionModelDeploymentMetadata.node_number])
   *  will reset the deployment state without pausing the model's availability.
   *
   * Only applicable for Text Classification, Image Object Detection , Tables, and Image Segmentation; all other domains manage
   * deployment automatically.
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  deployModel(request: DeepPartial<DeployModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Undeploys a model. If the model is not deployed this method has no effect.
   *
   * Only applicable for Text Classification, Image Object Detection and Tables;
   * all other domains manage deployment automatically.
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  undeployModel(request: DeepPartial<UndeployModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Exports a trained, "export-able", model to a user specified Google Cloud
   * Storage location. A model is considered export-able if and only if it has
   * an export format defined for it in
   *
   * [ModelExportOutputConfig][google.cloud.automl.v1beta1.ModelExportOutputConfig].
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  exportModel(request: DeepPartial<ExportModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Exports examples on which the model was evaluated (i.e. which were in the
   * TEST set of the dataset the model was created from), together with their
   * ground truth annotations and the annotations created (predicted) by the
   * model.
   * The examples, ground truth and predictions are exported in the state
   * they were at the moment the model was evaluated.
   *
   * This export is available only for 30 days since the model evaluation is
   * created.
   *
   * Currently only available for Tables.
   *
   * Returns an empty response in the
   * [response][google.longrunning.Operation.response] field when it completes.
   */
  exportEvaluatedExamples(
    request: DeepPartial<ExportEvaluatedExamplesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a model evaluation. */
  getModelEvaluation(
    request: DeepPartial<GetModelEvaluationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModelEvaluation>;
  /** Lists model evaluations. */
  listModelEvaluations(
    request: DeepPartial<ListModelEvaluationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListModelEvaluationsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
