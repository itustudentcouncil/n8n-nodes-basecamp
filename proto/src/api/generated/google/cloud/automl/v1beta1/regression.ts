// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1beta1/regression.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.automl.v1beta1";

/** Metrics for regression problems. */
export interface RegressionEvaluationMetrics {
  /** Output only. Root Mean Squared Error (RMSE). */
  rootMeanSquaredError: number;
  /** Output only. Mean Absolute Error (MAE). */
  meanAbsoluteError: number;
  /**
   * Output only. Mean absolute percentage error. Only set if all ground truth
   * values are are positive.
   */
  meanAbsolutePercentageError: number;
  /** Output only. R squared. */
  rSquared: number;
  /** Output only. Root mean squared log error. */
  rootMeanSquaredLogError: number;
}

function createBaseRegressionEvaluationMetrics(): RegressionEvaluationMetrics {
  return {
    rootMeanSquaredError: 0,
    meanAbsoluteError: 0,
    meanAbsolutePercentageError: 0,
    rSquared: 0,
    rootMeanSquaredLogError: 0,
  };
}

export const RegressionEvaluationMetrics: MessageFns<RegressionEvaluationMetrics> = {
  encode(message: RegressionEvaluationMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rootMeanSquaredError !== 0) {
      writer.uint32(13).float(message.rootMeanSquaredError);
    }
    if (message.meanAbsoluteError !== 0) {
      writer.uint32(21).float(message.meanAbsoluteError);
    }
    if (message.meanAbsolutePercentageError !== 0) {
      writer.uint32(29).float(message.meanAbsolutePercentageError);
    }
    if (message.rSquared !== 0) {
      writer.uint32(37).float(message.rSquared);
    }
    if (message.rootMeanSquaredLogError !== 0) {
      writer.uint32(45).float(message.rootMeanSquaredLogError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegressionEvaluationMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegressionEvaluationMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.rootMeanSquaredError = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.meanAbsoluteError = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.meanAbsolutePercentageError = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.rSquared = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.rootMeanSquaredLogError = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegressionEvaluationMetrics {
    return {
      rootMeanSquaredError: isSet(object.rootMeanSquaredError) ? globalThis.Number(object.rootMeanSquaredError) : 0,
      meanAbsoluteError: isSet(object.meanAbsoluteError) ? globalThis.Number(object.meanAbsoluteError) : 0,
      meanAbsolutePercentageError: isSet(object.meanAbsolutePercentageError)
        ? globalThis.Number(object.meanAbsolutePercentageError)
        : 0,
      rSquared: isSet(object.rSquared) ? globalThis.Number(object.rSquared) : 0,
      rootMeanSquaredLogError: isSet(object.rootMeanSquaredLogError)
        ? globalThis.Number(object.rootMeanSquaredLogError)
        : 0,
    };
  },

  toJSON(message: RegressionEvaluationMetrics): unknown {
    const obj: any = {};
    if (message.rootMeanSquaredError !== 0) {
      obj.rootMeanSquaredError = message.rootMeanSquaredError;
    }
    if (message.meanAbsoluteError !== 0) {
      obj.meanAbsoluteError = message.meanAbsoluteError;
    }
    if (message.meanAbsolutePercentageError !== 0) {
      obj.meanAbsolutePercentageError = message.meanAbsolutePercentageError;
    }
    if (message.rSquared !== 0) {
      obj.rSquared = message.rSquared;
    }
    if (message.rootMeanSquaredLogError !== 0) {
      obj.rootMeanSquaredLogError = message.rootMeanSquaredLogError;
    }
    return obj;
  },

  create(base?: DeepPartial<RegressionEvaluationMetrics>): RegressionEvaluationMetrics {
    return RegressionEvaluationMetrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegressionEvaluationMetrics>): RegressionEvaluationMetrics {
    const message = createBaseRegressionEvaluationMetrics();
    message.rootMeanSquaredError = object.rootMeanSquaredError ?? 0;
    message.meanAbsoluteError = object.meanAbsoluteError ?? 0;
    message.meanAbsolutePercentageError = object.meanAbsolutePercentageError ?? 0;
    message.rSquared = object.rSquared ?? 0;
    message.rootMeanSquaredLogError = object.rootMeanSquaredLogError ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
