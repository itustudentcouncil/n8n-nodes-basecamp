// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1beta1/dataset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ImageClassificationDatasetMetadata, ImageObjectDetectionDatasetMetadata } from "./image.js";
import { TablesDatasetMetadata } from "./tables.js";
import {
  TextClassificationDatasetMetadata,
  TextExtractionDatasetMetadata,
  TextSentimentDatasetMetadata,
} from "./text.js";
import { TranslationDatasetMetadata } from "./translation.js";
import { VideoClassificationDatasetMetadata, VideoObjectTrackingDatasetMetadata } from "./video.js";

export const protobufPackage = "google.cloud.automl.v1beta1";

/**
 * A workspace for solving a single, particular machine learning (ML) problem.
 * A workspace contains examples that may be annotated.
 */
export interface Dataset {
  /** Metadata for a dataset used for translation. */
  translationDatasetMetadata?:
    | TranslationDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for image classification. */
  imageClassificationDatasetMetadata?:
    | ImageClassificationDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for text classification. */
  textClassificationDatasetMetadata?:
    | TextClassificationDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for image object detection. */
  imageObjectDetectionDatasetMetadata?:
    | ImageObjectDetectionDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for video classification. */
  videoClassificationDatasetMetadata?:
    | VideoClassificationDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for video object tracking. */
  videoObjectTrackingDatasetMetadata?:
    | VideoObjectTrackingDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for text extraction. */
  textExtractionDatasetMetadata?:
    | TextExtractionDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for text sentiment. */
  textSentimentDatasetMetadata?:
    | TextSentimentDatasetMetadata
    | undefined;
  /** Metadata for a dataset used for Tables. */
  tablesDatasetMetadata?:
    | TablesDatasetMetadata
    | undefined;
  /**
   * Output only. The resource name of the dataset.
   * Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`
   */
  name: string;
  /**
   * Required. The name of the dataset to show in the interface. The name can be
   * up to 32 characters long and can consist only of ASCII Latin letters A-Z
   * and a-z, underscores
   * (_), and ASCII digits 0-9.
   */
  displayName: string;
  /**
   * User-provided description of the dataset. The description can be up to
   * 25000 characters long.
   */
  description: string;
  /** Output only. The number of examples in the dataset. */
  exampleCount: number;
  /** Output only. Timestamp when this dataset was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Used to perform consistent read-modify-write updates. If not set, a blind
   * "overwrite" update happens.
   */
  etag: string;
}

function createBaseDataset(): Dataset {
  return {
    translationDatasetMetadata: undefined,
    imageClassificationDatasetMetadata: undefined,
    textClassificationDatasetMetadata: undefined,
    imageObjectDetectionDatasetMetadata: undefined,
    videoClassificationDatasetMetadata: undefined,
    videoObjectTrackingDatasetMetadata: undefined,
    textExtractionDatasetMetadata: undefined,
    textSentimentDatasetMetadata: undefined,
    tablesDatasetMetadata: undefined,
    name: "",
    displayName: "",
    description: "",
    exampleCount: 0,
    createTime: undefined,
    etag: "",
  };
}

export const Dataset: MessageFns<Dataset> = {
  encode(message: Dataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.translationDatasetMetadata !== undefined) {
      TranslationDatasetMetadata.encode(message.translationDatasetMetadata, writer.uint32(186).fork()).join();
    }
    if (message.imageClassificationDatasetMetadata !== undefined) {
      ImageClassificationDatasetMetadata.encode(message.imageClassificationDatasetMetadata, writer.uint32(194).fork())
        .join();
    }
    if (message.textClassificationDatasetMetadata !== undefined) {
      TextClassificationDatasetMetadata.encode(message.textClassificationDatasetMetadata, writer.uint32(202).fork())
        .join();
    }
    if (message.imageObjectDetectionDatasetMetadata !== undefined) {
      ImageObjectDetectionDatasetMetadata.encode(message.imageObjectDetectionDatasetMetadata, writer.uint32(210).fork())
        .join();
    }
    if (message.videoClassificationDatasetMetadata !== undefined) {
      VideoClassificationDatasetMetadata.encode(message.videoClassificationDatasetMetadata, writer.uint32(250).fork())
        .join();
    }
    if (message.videoObjectTrackingDatasetMetadata !== undefined) {
      VideoObjectTrackingDatasetMetadata.encode(message.videoObjectTrackingDatasetMetadata, writer.uint32(234).fork())
        .join();
    }
    if (message.textExtractionDatasetMetadata !== undefined) {
      TextExtractionDatasetMetadata.encode(message.textExtractionDatasetMetadata, writer.uint32(226).fork()).join();
    }
    if (message.textSentimentDatasetMetadata !== undefined) {
      TextSentimentDatasetMetadata.encode(message.textSentimentDatasetMetadata, writer.uint32(242).fork()).join();
    }
    if (message.tablesDatasetMetadata !== undefined) {
      TablesDatasetMetadata.encode(message.tablesDatasetMetadata, writer.uint32(266).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.exampleCount !== 0) {
      writer.uint32(168).int32(message.exampleCount);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(114).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(138).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 23:
          if (tag !== 186) {
            break;
          }

          message.translationDatasetMetadata = TranslationDatasetMetadata.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.imageClassificationDatasetMetadata = ImageClassificationDatasetMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.textClassificationDatasetMetadata = TextClassificationDatasetMetadata.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.imageObjectDetectionDatasetMetadata = ImageObjectDetectionDatasetMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.videoClassificationDatasetMetadata = VideoClassificationDatasetMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.videoObjectTrackingDatasetMetadata = VideoObjectTrackingDatasetMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.textExtractionDatasetMetadata = TextExtractionDatasetMetadata.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.textSentimentDatasetMetadata = TextSentimentDatasetMetadata.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.tablesDatasetMetadata = TablesDatasetMetadata.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.exampleCount = reader.int32();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dataset {
    return {
      translationDatasetMetadata: isSet(object.translationDatasetMetadata)
        ? TranslationDatasetMetadata.fromJSON(object.translationDatasetMetadata)
        : undefined,
      imageClassificationDatasetMetadata: isSet(object.imageClassificationDatasetMetadata)
        ? ImageClassificationDatasetMetadata.fromJSON(object.imageClassificationDatasetMetadata)
        : undefined,
      textClassificationDatasetMetadata: isSet(object.textClassificationDatasetMetadata)
        ? TextClassificationDatasetMetadata.fromJSON(object.textClassificationDatasetMetadata)
        : undefined,
      imageObjectDetectionDatasetMetadata: isSet(object.imageObjectDetectionDatasetMetadata)
        ? ImageObjectDetectionDatasetMetadata.fromJSON(object.imageObjectDetectionDatasetMetadata)
        : undefined,
      videoClassificationDatasetMetadata: isSet(object.videoClassificationDatasetMetadata)
        ? VideoClassificationDatasetMetadata.fromJSON(object.videoClassificationDatasetMetadata)
        : undefined,
      videoObjectTrackingDatasetMetadata: isSet(object.videoObjectTrackingDatasetMetadata)
        ? VideoObjectTrackingDatasetMetadata.fromJSON(object.videoObjectTrackingDatasetMetadata)
        : undefined,
      textExtractionDatasetMetadata: isSet(object.textExtractionDatasetMetadata)
        ? TextExtractionDatasetMetadata.fromJSON(object.textExtractionDatasetMetadata)
        : undefined,
      textSentimentDatasetMetadata: isSet(object.textSentimentDatasetMetadata)
        ? TextSentimentDatasetMetadata.fromJSON(object.textSentimentDatasetMetadata)
        : undefined,
      tablesDatasetMetadata: isSet(object.tablesDatasetMetadata)
        ? TablesDatasetMetadata.fromJSON(object.tablesDatasetMetadata)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      exampleCount: isSet(object.exampleCount) ? globalThis.Number(object.exampleCount) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Dataset): unknown {
    const obj: any = {};
    if (message.translationDatasetMetadata !== undefined) {
      obj.translationDatasetMetadata = TranslationDatasetMetadata.toJSON(message.translationDatasetMetadata);
    }
    if (message.imageClassificationDatasetMetadata !== undefined) {
      obj.imageClassificationDatasetMetadata = ImageClassificationDatasetMetadata.toJSON(
        message.imageClassificationDatasetMetadata,
      );
    }
    if (message.textClassificationDatasetMetadata !== undefined) {
      obj.textClassificationDatasetMetadata = TextClassificationDatasetMetadata.toJSON(
        message.textClassificationDatasetMetadata,
      );
    }
    if (message.imageObjectDetectionDatasetMetadata !== undefined) {
      obj.imageObjectDetectionDatasetMetadata = ImageObjectDetectionDatasetMetadata.toJSON(
        message.imageObjectDetectionDatasetMetadata,
      );
    }
    if (message.videoClassificationDatasetMetadata !== undefined) {
      obj.videoClassificationDatasetMetadata = VideoClassificationDatasetMetadata.toJSON(
        message.videoClassificationDatasetMetadata,
      );
    }
    if (message.videoObjectTrackingDatasetMetadata !== undefined) {
      obj.videoObjectTrackingDatasetMetadata = VideoObjectTrackingDatasetMetadata.toJSON(
        message.videoObjectTrackingDatasetMetadata,
      );
    }
    if (message.textExtractionDatasetMetadata !== undefined) {
      obj.textExtractionDatasetMetadata = TextExtractionDatasetMetadata.toJSON(message.textExtractionDatasetMetadata);
    }
    if (message.textSentimentDatasetMetadata !== undefined) {
      obj.textSentimentDatasetMetadata = TextSentimentDatasetMetadata.toJSON(message.textSentimentDatasetMetadata);
    }
    if (message.tablesDatasetMetadata !== undefined) {
      obj.tablesDatasetMetadata = TablesDatasetMetadata.toJSON(message.tablesDatasetMetadata);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.exampleCount !== 0) {
      obj.exampleCount = Math.round(message.exampleCount);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Dataset>): Dataset {
    return Dataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dataset>): Dataset {
    const message = createBaseDataset();
    message.translationDatasetMetadata =
      (object.translationDatasetMetadata !== undefined && object.translationDatasetMetadata !== null)
        ? TranslationDatasetMetadata.fromPartial(object.translationDatasetMetadata)
        : undefined;
    message.imageClassificationDatasetMetadata =
      (object.imageClassificationDatasetMetadata !== undefined && object.imageClassificationDatasetMetadata !== null)
        ? ImageClassificationDatasetMetadata.fromPartial(object.imageClassificationDatasetMetadata)
        : undefined;
    message.textClassificationDatasetMetadata =
      (object.textClassificationDatasetMetadata !== undefined && object.textClassificationDatasetMetadata !== null)
        ? TextClassificationDatasetMetadata.fromPartial(object.textClassificationDatasetMetadata)
        : undefined;
    message.imageObjectDetectionDatasetMetadata =
      (object.imageObjectDetectionDatasetMetadata !== undefined && object.imageObjectDetectionDatasetMetadata !== null)
        ? ImageObjectDetectionDatasetMetadata.fromPartial(object.imageObjectDetectionDatasetMetadata)
        : undefined;
    message.videoClassificationDatasetMetadata =
      (object.videoClassificationDatasetMetadata !== undefined && object.videoClassificationDatasetMetadata !== null)
        ? VideoClassificationDatasetMetadata.fromPartial(object.videoClassificationDatasetMetadata)
        : undefined;
    message.videoObjectTrackingDatasetMetadata =
      (object.videoObjectTrackingDatasetMetadata !== undefined && object.videoObjectTrackingDatasetMetadata !== null)
        ? VideoObjectTrackingDatasetMetadata.fromPartial(object.videoObjectTrackingDatasetMetadata)
        : undefined;
    message.textExtractionDatasetMetadata =
      (object.textExtractionDatasetMetadata !== undefined && object.textExtractionDatasetMetadata !== null)
        ? TextExtractionDatasetMetadata.fromPartial(object.textExtractionDatasetMetadata)
        : undefined;
    message.textSentimentDatasetMetadata =
      (object.textSentimentDatasetMetadata !== undefined && object.textSentimentDatasetMetadata !== null)
        ? TextSentimentDatasetMetadata.fromPartial(object.textSentimentDatasetMetadata)
        : undefined;
    message.tablesDatasetMetadata =
      (object.tablesDatasetMetadata !== undefined && object.tablesDatasetMetadata !== null)
        ? TablesDatasetMetadata.fromPartial(object.tablesDatasetMetadata)
        : undefined;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.exampleCount = object.exampleCount ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
