// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1beta1/video.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.automl.v1beta1";

/**
 * Dataset metadata specific to video classification.
 * All Video Classification datasets are treated as multi label.
 */
export interface VideoClassificationDatasetMetadata {
}

/** Dataset metadata specific to video object tracking. */
export interface VideoObjectTrackingDatasetMetadata {
}

/** Model metadata specific to video classification. */
export interface VideoClassificationModelMetadata {
}

/** Model metadata specific to video object tracking. */
export interface VideoObjectTrackingModelMetadata {
}

function createBaseVideoClassificationDatasetMetadata(): VideoClassificationDatasetMetadata {
  return {};
}

export const VideoClassificationDatasetMetadata: MessageFns<VideoClassificationDatasetMetadata> = {
  encode(_: VideoClassificationDatasetMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoClassificationDatasetMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoClassificationDatasetMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VideoClassificationDatasetMetadata {
    return {};
  },

  toJSON(_: VideoClassificationDatasetMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<VideoClassificationDatasetMetadata>): VideoClassificationDatasetMetadata {
    return VideoClassificationDatasetMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<VideoClassificationDatasetMetadata>): VideoClassificationDatasetMetadata {
    const message = createBaseVideoClassificationDatasetMetadata();
    return message;
  },
};

function createBaseVideoObjectTrackingDatasetMetadata(): VideoObjectTrackingDatasetMetadata {
  return {};
}

export const VideoObjectTrackingDatasetMetadata: MessageFns<VideoObjectTrackingDatasetMetadata> = {
  encode(_: VideoObjectTrackingDatasetMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoObjectTrackingDatasetMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoObjectTrackingDatasetMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VideoObjectTrackingDatasetMetadata {
    return {};
  },

  toJSON(_: VideoObjectTrackingDatasetMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<VideoObjectTrackingDatasetMetadata>): VideoObjectTrackingDatasetMetadata {
    return VideoObjectTrackingDatasetMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<VideoObjectTrackingDatasetMetadata>): VideoObjectTrackingDatasetMetadata {
    const message = createBaseVideoObjectTrackingDatasetMetadata();
    return message;
  },
};

function createBaseVideoClassificationModelMetadata(): VideoClassificationModelMetadata {
  return {};
}

export const VideoClassificationModelMetadata: MessageFns<VideoClassificationModelMetadata> = {
  encode(_: VideoClassificationModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoClassificationModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoClassificationModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VideoClassificationModelMetadata {
    return {};
  },

  toJSON(_: VideoClassificationModelMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<VideoClassificationModelMetadata>): VideoClassificationModelMetadata {
    return VideoClassificationModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<VideoClassificationModelMetadata>): VideoClassificationModelMetadata {
    const message = createBaseVideoClassificationModelMetadata();
    return message;
  },
};

function createBaseVideoObjectTrackingModelMetadata(): VideoObjectTrackingModelMetadata {
  return {};
}

export const VideoObjectTrackingModelMetadata: MessageFns<VideoObjectTrackingModelMetadata> = {
  encode(_: VideoObjectTrackingModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoObjectTrackingModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoObjectTrackingModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VideoObjectTrackingModelMetadata {
    return {};
  },

  toJSON(_: VideoObjectTrackingModelMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<VideoObjectTrackingModelMetadata>): VideoObjectTrackingModelMetadata {
    return VideoObjectTrackingModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<VideoObjectTrackingModelMetadata>): VideoObjectTrackingModelMetadata {
    const message = createBaseVideoObjectTrackingModelMetadata();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
