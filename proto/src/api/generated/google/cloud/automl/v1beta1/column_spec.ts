// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1beta1/column_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CorrelationStats, DataStats } from "./data_stats.js";
import { DataType } from "./data_types.js";

export const protobufPackage = "google.cloud.automl.v1beta1";

/**
 * A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were
 * given on import .
 * Used by:
 *   *   Tables
 */
export interface ColumnSpec {
  /**
   * Output only. The resource name of the column specs.
   * Form:
   *
   * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`
   */
  name: string;
  /** The data type of elements stored in the column. */
  dataType:
    | DataType
    | undefined;
  /**
   * Output only. The name of the column to show in the interface. The name can
   * be up to 100 characters long and can consist only of ASCII Latin letters
   * A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and
   * must start with a letter or a digit.
   */
  displayName: string;
  /**
   * Output only. Stats of the series of values in the column.
   * This field may be stale, see the ancestor's
   * Dataset.tables_dataset_metadata.stats_update_time field
   * for the timestamp at which these stats were last updated.
   */
  dataStats:
    | DataStats
    | undefined;
  /** Deprecated. */
  topCorrelatedColumns: ColumnSpec_CorrelatedColumn[];
  /**
   * Used to perform consistent read-modify-write updates. If not set, a blind
   * "overwrite" update happens.
   */
  etag: string;
}

/**
 * Identifies the table's column, and its correlation with the column this
 * ColumnSpec describes.
 */
export interface ColumnSpec_CorrelatedColumn {
  /**
   * The column_spec_id of the correlated column, which belongs to the same
   * table as the in-context column.
   */
  columnSpecId: string;
  /** Correlation between this and the in-context column. */
  correlationStats: CorrelationStats | undefined;
}

function createBaseColumnSpec(): ColumnSpec {
  return { name: "", dataType: undefined, displayName: "", dataStats: undefined, topCorrelatedColumns: [], etag: "" };
}

export const ColumnSpec: MessageFns<ColumnSpec> = {
  encode(message: ColumnSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataType !== undefined) {
      DataType.encode(message.dataType, writer.uint32(18).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.dataStats !== undefined) {
      DataStats.encode(message.dataStats, writer.uint32(34).fork()).join();
    }
    for (const v of message.topCorrelatedColumns) {
      ColumnSpec_CorrelatedColumn.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(50).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataType = DataType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataStats = DataStats.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.topCorrelatedColumns.push(ColumnSpec_CorrelatedColumn.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnSpec {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? DataType.fromJSON(object.dataType) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      dataStats: isSet(object.dataStats) ? DataStats.fromJSON(object.dataStats) : undefined,
      topCorrelatedColumns: globalThis.Array.isArray(object?.topCorrelatedColumns)
        ? object.topCorrelatedColumns.map((e: any) => ColumnSpec_CorrelatedColumn.fromJSON(e))
        : [],
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: ColumnSpec): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== undefined) {
      obj.dataType = DataType.toJSON(message.dataType);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.dataStats !== undefined) {
      obj.dataStats = DataStats.toJSON(message.dataStats);
    }
    if (message.topCorrelatedColumns?.length) {
      obj.topCorrelatedColumns = message.topCorrelatedColumns.map((e) => ColumnSpec_CorrelatedColumn.toJSON(e));
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<ColumnSpec>): ColumnSpec {
    return ColumnSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ColumnSpec>): ColumnSpec {
    const message = createBaseColumnSpec();
    message.name = object.name ?? "";
    message.dataType = (object.dataType !== undefined && object.dataType !== null)
      ? DataType.fromPartial(object.dataType)
      : undefined;
    message.displayName = object.displayName ?? "";
    message.dataStats = (object.dataStats !== undefined && object.dataStats !== null)
      ? DataStats.fromPartial(object.dataStats)
      : undefined;
    message.topCorrelatedColumns =
      object.topCorrelatedColumns?.map((e) => ColumnSpec_CorrelatedColumn.fromPartial(e)) || [];
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseColumnSpec_CorrelatedColumn(): ColumnSpec_CorrelatedColumn {
  return { columnSpecId: "", correlationStats: undefined };
}

export const ColumnSpec_CorrelatedColumn: MessageFns<ColumnSpec_CorrelatedColumn> = {
  encode(message: ColumnSpec_CorrelatedColumn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.columnSpecId !== "") {
      writer.uint32(10).string(message.columnSpecId);
    }
    if (message.correlationStats !== undefined) {
      CorrelationStats.encode(message.correlationStats, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnSpec_CorrelatedColumn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnSpec_CorrelatedColumn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.columnSpecId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.correlationStats = CorrelationStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnSpec_CorrelatedColumn {
    return {
      columnSpecId: isSet(object.columnSpecId) ? globalThis.String(object.columnSpecId) : "",
      correlationStats: isSet(object.correlationStats) ? CorrelationStats.fromJSON(object.correlationStats) : undefined,
    };
  },

  toJSON(message: ColumnSpec_CorrelatedColumn): unknown {
    const obj: any = {};
    if (message.columnSpecId !== "") {
      obj.columnSpecId = message.columnSpecId;
    }
    if (message.correlationStats !== undefined) {
      obj.correlationStats = CorrelationStats.toJSON(message.correlationStats);
    }
    return obj;
  },

  create(base?: DeepPartial<ColumnSpec_CorrelatedColumn>): ColumnSpec_CorrelatedColumn {
    return ColumnSpec_CorrelatedColumn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ColumnSpec_CorrelatedColumn>): ColumnSpec_CorrelatedColumn {
    const message = createBaseColumnSpec_CorrelatedColumn();
    message.columnSpecId = object.columnSpecId ?? "";
    message.correlationStats = (object.correlationStats !== undefined && object.correlationStats !== null)
      ? CorrelationStats.fromPartial(object.correlationStats)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
