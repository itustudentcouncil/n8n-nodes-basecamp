// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1/text_segment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.automl.v1";

/** A contiguous part of a text (string), assuming it has an UTF-8 NFC encoding. */
export interface TextSegment {
  /** Output only. The content of the TextSegment. */
  content: string;
  /**
   * Required. Zero-based character index of the first character of the text
   * segment (counting characters from the beginning of the text).
   */
  startOffset: Long;
  /**
   * Required. Zero-based character index of the first character past the end of
   * the text segment (counting character from the beginning of the text).
   * The character at the end_offset is NOT included in the text segment.
   */
  endOffset: Long;
}

function createBaseTextSegment(): TextSegment {
  return { content: "", startOffset: Long.ZERO, endOffset: Long.ZERO };
}

export const TextSegment: MessageFns<TextSegment> = {
  encode(message: TextSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (!message.startOffset.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.startOffset.toString());
    }
    if (!message.endOffset.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.endOffset.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startOffset = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.endOffset = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextSegment {
    return {
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      startOffset: isSet(object.startOffset) ? Long.fromValue(object.startOffset) : Long.ZERO,
      endOffset: isSet(object.endOffset) ? Long.fromValue(object.endOffset) : Long.ZERO,
    };
  },

  toJSON(message: TextSegment): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (!message.startOffset.equals(Long.ZERO)) {
      obj.startOffset = (message.startOffset || Long.ZERO).toString();
    }
    if (!message.endOffset.equals(Long.ZERO)) {
      obj.endOffset = (message.endOffset || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TextSegment>): TextSegment {
    return TextSegment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextSegment>): TextSegment {
    const message = createBaseTextSegment();
    message.content = object.content ?? "";
    message.startOffset = (object.startOffset !== undefined && object.startOffset !== null)
      ? Long.fromValue(object.startOffset)
      : Long.ZERO;
    message.endOffset = (object.endOffset !== undefined && object.endOffset !== null)
      ? Long.fromValue(object.endOffset)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
