// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1/annotation_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.automl.v1";

/** A definition of an annotation spec. */
export interface AnnotationSpec {
  /**
   * Output only. Resource name of the annotation spec.
   * Form:
   * 'projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationSpecs/{annotation_spec_id}'
   */
  name: string;
  /**
   * Required. The name of the annotation spec to show in the interface. The name can be
   * up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.
   */
  displayName: string;
  /**
   * Output only. The number of examples in the parent dataset
   * labeled by the annotation spec.
   */
  exampleCount: number;
}

function createBaseAnnotationSpec(): AnnotationSpec {
  return { name: "", displayName: "", exampleCount: 0 };
}

export const AnnotationSpec: MessageFns<AnnotationSpec> = {
  encode(message: AnnotationSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.exampleCount !== 0) {
      writer.uint32(72).int32(message.exampleCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotationSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotationSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.exampleCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotationSpec {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      exampleCount: isSet(object.exampleCount) ? globalThis.Number(object.exampleCount) : 0,
    };
  },

  toJSON(message: AnnotationSpec): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.exampleCount !== 0) {
      obj.exampleCount = Math.round(message.exampleCount);
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotationSpec>): AnnotationSpec {
    return AnnotationSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotationSpec>): AnnotationSpec {
    const message = createBaseAnnotationSpec();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.exampleCount = object.exampleCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
