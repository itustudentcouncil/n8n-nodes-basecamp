// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securityposture/v1/org_policy_constraints.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CustomConstraint, PolicyRule } from "./org_policy_config.js";

export const protobufPackage = "google.cloud.securityposture.v1";

/** Message for Org Policy Canned Constraint. */
export interface OrgPolicyConstraint {
  /** Required. Org Policy Canned Constraint id. */
  cannedConstraintId: string;
  /** Required. Org PolicySpec rules. */
  policyRules: PolicyRule[];
}

/** Message for Org Policy Custom Constraint. */
export interface OrgPolicyConstraintCustom {
  /** Required. Org Policy Custom Constraint. */
  customConstraint:
    | CustomConstraint
    | undefined;
  /** Required. Org Policyspec rules. */
  policyRules: PolicyRule[];
}

function createBaseOrgPolicyConstraint(): OrgPolicyConstraint {
  return { cannedConstraintId: "", policyRules: [] };
}

export const OrgPolicyConstraint: MessageFns<OrgPolicyConstraint> = {
  encode(message: OrgPolicyConstraint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cannedConstraintId !== "") {
      writer.uint32(10).string(message.cannedConstraintId);
    }
    for (const v of message.policyRules) {
      PolicyRule.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrgPolicyConstraint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrgPolicyConstraint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cannedConstraintId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyRules.push(PolicyRule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrgPolicyConstraint {
    return {
      cannedConstraintId: isSet(object.cannedConstraintId) ? globalThis.String(object.cannedConstraintId) : "",
      policyRules: globalThis.Array.isArray(object?.policyRules)
        ? object.policyRules.map((e: any) => PolicyRule.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrgPolicyConstraint): unknown {
    const obj: any = {};
    if (message.cannedConstraintId !== "") {
      obj.cannedConstraintId = message.cannedConstraintId;
    }
    if (message.policyRules?.length) {
      obj.policyRules = message.policyRules.map((e) => PolicyRule.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OrgPolicyConstraint>): OrgPolicyConstraint {
    return OrgPolicyConstraint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrgPolicyConstraint>): OrgPolicyConstraint {
    const message = createBaseOrgPolicyConstraint();
    message.cannedConstraintId = object.cannedConstraintId ?? "";
    message.policyRules = object.policyRules?.map((e) => PolicyRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOrgPolicyConstraintCustom(): OrgPolicyConstraintCustom {
  return { customConstraint: undefined, policyRules: [] };
}

export const OrgPolicyConstraintCustom: MessageFns<OrgPolicyConstraintCustom> = {
  encode(message: OrgPolicyConstraintCustom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customConstraint !== undefined) {
      CustomConstraint.encode(message.customConstraint, writer.uint32(10).fork()).join();
    }
    for (const v of message.policyRules) {
      PolicyRule.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrgPolicyConstraintCustom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrgPolicyConstraintCustom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customConstraint = CustomConstraint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyRules.push(PolicyRule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrgPolicyConstraintCustom {
    return {
      customConstraint: isSet(object.customConstraint) ? CustomConstraint.fromJSON(object.customConstraint) : undefined,
      policyRules: globalThis.Array.isArray(object?.policyRules)
        ? object.policyRules.map((e: any) => PolicyRule.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrgPolicyConstraintCustom): unknown {
    const obj: any = {};
    if (message.customConstraint !== undefined) {
      obj.customConstraint = CustomConstraint.toJSON(message.customConstraint);
    }
    if (message.policyRules?.length) {
      obj.policyRules = message.policyRules.map((e) => PolicyRule.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OrgPolicyConstraintCustom>): OrgPolicyConstraintCustom {
    return OrgPolicyConstraintCustom.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrgPolicyConstraintCustom>): OrgPolicyConstraintCustom {
    const message = createBaseOrgPolicyConstraintCustom();
    message.customConstraint = (object.customConstraint !== undefined && object.customConstraint !== null)
      ? CustomConstraint.fromPartial(object.customConstraint)
      : undefined;
    message.policyRules = object.policyRules?.map((e) => PolicyRule.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
