// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securityposture/v1/sha_custom_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Expr } from "../../../type/expr.js";

export const protobufPackage = "google.cloud.securityposture.v1";

/**
 * Defines the properties in a custom module configuration for Security
 * Health Analytics. Use the custom module configuration to create custom
 * detectors that generate custom findings for resources that you specify.
 */
export interface CustomConfig {
  /**
   * Required. The CEL expression to evaluate to produce findings. When the
   * expression evaluates to true against a resource, a finding is generated.
   */
  predicate:
    | Expr
    | undefined;
  /** Optional. Custom output properties. */
  customOutput:
    | CustomConfig_CustomOutputSpec
    | undefined;
  /**
   * Required. The resource types that the custom module operates on. Each
   * custom module can specify up to 5 resource types.
   */
  resourceSelector:
    | CustomConfig_ResourceSelector
    | undefined;
  /** Required. The severity to assign to findings generated by the module. */
  severity: CustomConfig_Severity;
  /**
   * Optional. Text that describes the vulnerability or misconfiguration that
   * the custom module detects. This explanation is returned with each finding
   * instance to help investigators understand the detected issue. The text must
   * be enclosed in quotation marks.
   */
  description: string;
  /**
   * Optional. An explanation of the recommended steps that security teams can
   * take to resolve the detected issue. This explanation is returned with each
   * finding generated by this module in the `nextSteps` property of the finding
   * JSON.
   */
  recommendation: string;
}

/** Defines the valid value options for the severity of a finding. */
export enum CustomConfig_Severity {
  /** SEVERITY_UNSPECIFIED - Unspecified severity. */
  SEVERITY_UNSPECIFIED = 0,
  /** CRITICAL - Critical severity. */
  CRITICAL = 1,
  /** HIGH - High severity. */
  HIGH = 2,
  /** MEDIUM - Medium severity. */
  MEDIUM = 3,
  /** LOW - Low severity. */
  LOW = 4,
  UNRECOGNIZED = -1,
}

export function customConfig_SeverityFromJSON(object: any): CustomConfig_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return CustomConfig_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "CRITICAL":
      return CustomConfig_Severity.CRITICAL;
    case 2:
    case "HIGH":
      return CustomConfig_Severity.HIGH;
    case 3:
    case "MEDIUM":
      return CustomConfig_Severity.MEDIUM;
    case 4:
    case "LOW":
      return CustomConfig_Severity.LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomConfig_Severity.UNRECOGNIZED;
  }
}

export function customConfig_SeverityToJSON(object: CustomConfig_Severity): string {
  switch (object) {
    case CustomConfig_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case CustomConfig_Severity.CRITICAL:
      return "CRITICAL";
    case CustomConfig_Severity.HIGH:
      return "HIGH";
    case CustomConfig_Severity.MEDIUM:
      return "MEDIUM";
    case CustomConfig_Severity.LOW:
      return "LOW";
    case CustomConfig_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A set of optional name-value pairs that define custom source properties to
 * return with each finding that is generated by the custom module. The custom
 * source properties that are defined here are included in the finding JSON
 * under `sourceProperties`.
 */
export interface CustomConfig_CustomOutputSpec {
  /** Optional. A list of custom output properties to add to the finding. */
  properties: CustomConfig_CustomOutputSpec_Property[];
}

/** An individual name-value pair that defines a custom source property. */
export interface CustomConfig_CustomOutputSpec_Property {
  /** Required. Name of the property for the custom output. */
  name: string;
  /**
   * Optional. The CEL expression for the custom output. A resource property
   * can be specified to return the value of the property or a text string
   * enclosed in quotation marks.
   */
  valueExpression: Expr | undefined;
}

/** Resource for selecting resource type. */
export interface CustomConfig_ResourceSelector {
  /** Required. The resource types to run the detector on. */
  resourceTypes: string[];
}

function createBaseCustomConfig(): CustomConfig {
  return {
    predicate: undefined,
    customOutput: undefined,
    resourceSelector: undefined,
    severity: 0,
    description: "",
    recommendation: "",
  };
}

export const CustomConfig: MessageFns<CustomConfig> = {
  encode(message: CustomConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.predicate !== undefined) {
      Expr.encode(message.predicate, writer.uint32(10).fork()).join();
    }
    if (message.customOutput !== undefined) {
      CustomConfig_CustomOutputSpec.encode(message.customOutput, writer.uint32(18).fork()).join();
    }
    if (message.resourceSelector !== undefined) {
      CustomConfig_ResourceSelector.encode(message.resourceSelector, writer.uint32(26).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(32).int32(message.severity);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.recommendation !== "") {
      writer.uint32(50).string(message.recommendation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.predicate = Expr.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customOutput = CustomConfig_CustomOutputSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceSelector = CustomConfig_ResourceSelector.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.recommendation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig {
    return {
      predicate: isSet(object.predicate) ? Expr.fromJSON(object.predicate) : undefined,
      customOutput: isSet(object.customOutput)
        ? CustomConfig_CustomOutputSpec.fromJSON(object.customOutput)
        : undefined,
      resourceSelector: isSet(object.resourceSelector)
        ? CustomConfig_ResourceSelector.fromJSON(object.resourceSelector)
        : undefined,
      severity: isSet(object.severity) ? customConfig_SeverityFromJSON(object.severity) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      recommendation: isSet(object.recommendation) ? globalThis.String(object.recommendation) : "",
    };
  },

  toJSON(message: CustomConfig): unknown {
    const obj: any = {};
    if (message.predicate !== undefined) {
      obj.predicate = Expr.toJSON(message.predicate);
    }
    if (message.customOutput !== undefined) {
      obj.customOutput = CustomConfig_CustomOutputSpec.toJSON(message.customOutput);
    }
    if (message.resourceSelector !== undefined) {
      obj.resourceSelector = CustomConfig_ResourceSelector.toJSON(message.resourceSelector);
    }
    if (message.severity !== 0) {
      obj.severity = customConfig_SeverityToJSON(message.severity);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.recommendation !== "") {
      obj.recommendation = message.recommendation;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig>): CustomConfig {
    return CustomConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig>): CustomConfig {
    const message = createBaseCustomConfig();
    message.predicate = (object.predicate !== undefined && object.predicate !== null)
      ? Expr.fromPartial(object.predicate)
      : undefined;
    message.customOutput = (object.customOutput !== undefined && object.customOutput !== null)
      ? CustomConfig_CustomOutputSpec.fromPartial(object.customOutput)
      : undefined;
    message.resourceSelector = (object.resourceSelector !== undefined && object.resourceSelector !== null)
      ? CustomConfig_ResourceSelector.fromPartial(object.resourceSelector)
      : undefined;
    message.severity = object.severity ?? 0;
    message.description = object.description ?? "";
    message.recommendation = object.recommendation ?? "";
    return message;
  },
};

function createBaseCustomConfig_CustomOutputSpec(): CustomConfig_CustomOutputSpec {
  return { properties: [] };
}

export const CustomConfig_CustomOutputSpec: MessageFns<CustomConfig_CustomOutputSpec> = {
  encode(message: CustomConfig_CustomOutputSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.properties) {
      CustomConfig_CustomOutputSpec_Property.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig_CustomOutputSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig_CustomOutputSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.properties.push(CustomConfig_CustomOutputSpec_Property.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig_CustomOutputSpec {
    return {
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => CustomConfig_CustomOutputSpec_Property.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomConfig_CustomOutputSpec): unknown {
    const obj: any = {};
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => CustomConfig_CustomOutputSpec_Property.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig_CustomOutputSpec>): CustomConfig_CustomOutputSpec {
    return CustomConfig_CustomOutputSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig_CustomOutputSpec>): CustomConfig_CustomOutputSpec {
    const message = createBaseCustomConfig_CustomOutputSpec();
    message.properties = object.properties?.map((e) => CustomConfig_CustomOutputSpec_Property.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomConfig_CustomOutputSpec_Property(): CustomConfig_CustomOutputSpec_Property {
  return { name: "", valueExpression: undefined };
}

export const CustomConfig_CustomOutputSpec_Property: MessageFns<CustomConfig_CustomOutputSpec_Property> = {
  encode(message: CustomConfig_CustomOutputSpec_Property, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.valueExpression !== undefined) {
      Expr.encode(message.valueExpression, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig_CustomOutputSpec_Property {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig_CustomOutputSpec_Property();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valueExpression = Expr.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig_CustomOutputSpec_Property {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      valueExpression: isSet(object.valueExpression) ? Expr.fromJSON(object.valueExpression) : undefined,
    };
  },

  toJSON(message: CustomConfig_CustomOutputSpec_Property): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.valueExpression !== undefined) {
      obj.valueExpression = Expr.toJSON(message.valueExpression);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig_CustomOutputSpec_Property>): CustomConfig_CustomOutputSpec_Property {
    return CustomConfig_CustomOutputSpec_Property.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig_CustomOutputSpec_Property>): CustomConfig_CustomOutputSpec_Property {
    const message = createBaseCustomConfig_CustomOutputSpec_Property();
    message.name = object.name ?? "";
    message.valueExpression = (object.valueExpression !== undefined && object.valueExpression !== null)
      ? Expr.fromPartial(object.valueExpression)
      : undefined;
    return message;
  },
};

function createBaseCustomConfig_ResourceSelector(): CustomConfig_ResourceSelector {
  return { resourceTypes: [] };
}

export const CustomConfig_ResourceSelector: MessageFns<CustomConfig_ResourceSelector> = {
  encode(message: CustomConfig_ResourceSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceTypes) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig_ResourceSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig_ResourceSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceTypes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig_ResourceSelector {
    return {
      resourceTypes: globalThis.Array.isArray(object?.resourceTypes)
        ? object.resourceTypes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CustomConfig_ResourceSelector): unknown {
    const obj: any = {};
    if (message.resourceTypes?.length) {
      obj.resourceTypes = message.resourceTypes;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig_ResourceSelector>): CustomConfig_ResourceSelector {
    return CustomConfig_ResourceSelector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig_ResourceSelector>): CustomConfig_ResourceSelector {
    const message = createBaseCustomConfig_ResourceSelector();
    message.resourceTypes = object.resourceTypes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
