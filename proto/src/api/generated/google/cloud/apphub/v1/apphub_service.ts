// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apphub/v1/apphub_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Application } from "./application.js";
import { DiscoveredService, Service } from "./service.js";
import { ServiceProjectAttachment } from "./service_project_attachment.js";
import { DiscoveredWorkload, Workload } from "./workload.js";

export const protobufPackage = "google.cloud.apphub.v1";

/** Request for LookupServiceProjectAttachment. */
export interface LookupServiceProjectAttachmentRequest {
  /**
   * Required. Service project ID and location to lookup service project
   * attachment for. Only global location is supported. Expected format:
   * `projects/{project}/locations/{location}`.
   */
  name: string;
}

/** Response for LookupServiceProjectAttachment. */
export interface LookupServiceProjectAttachmentResponse {
  /** Service project attachment for a project if exists, empty otherwise. */
  serviceProjectAttachment: ServiceProjectAttachment | undefined;
}

/** Request for ListServiceProjectAttachments. */
export interface ListServiceProjectAttachmentsRequest {
  /**
   * Required. Host project ID and location to list service project attachments.
   * Only global location is supported. Expected format:
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Response for ListServiceProjectAttachments. */
export interface ListServiceProjectAttachmentsResponse {
  /** List of service project attachments. */
  serviceProjectAttachments: ServiceProjectAttachment[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for CreateServiceProjectAttachment. */
export interface CreateServiceProjectAttachmentRequest {
  /**
   * Required. Host project ID and location to which service project is being
   * attached. Only global location is supported. Expected format:
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. The service project attachment identifier must contain the
   * project id of the service project specified in the
   * service_project_attachment.service_project field.
   */
  serviceProjectAttachmentId: string;
  /** Required. The resource being created. */
  serviceProjectAttachment:
    | ServiceProjectAttachment
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for GetServiceProjectAttachment. */
export interface GetServiceProjectAttachmentRequest {
  /**
   * Required. Fully qualified name of the service project attachment to
   * retrieve. Expected format:
   * `projects/{project}/locations/{location}/serviceProjectAttachments/{serviceProjectAttachment}`.
   */
  name: string;
}

/** Request for DeleteServiceProjectAttachment. */
export interface DeleteServiceProjectAttachmentRequest {
  /**
   * Required. Fully qualified name of the service project attachment to delete.
   * Expected format:
   * `projects/{project}/locations/{location}/serviceProjectAttachments/{serviceProjectAttachment}`.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for DetachServiceProjectAttachment. */
export interface DetachServiceProjectAttachmentRequest {
  /**
   * Required. Service project id and location to detach from a host project.
   * Only global location is supported. Expected format:
   * `projects/{project}/locations/{location}`.
   */
  name: string;
}

/** Response for DetachServiceProjectAttachment. */
export interface DetachServiceProjectAttachmentResponse {
}

/** Request for ListServices. */
export interface ListServicesRequest {
  /**
   * Required. Fully qualified name of the parent Application to list Services
   * for. Expected format:
   * `projects/{project}/locations/{location}/applications/{application}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results */
  filter: string;
  /** Optional. Hint for how to order the results */
  orderBy: string;
}

/** Response for ListServices. */
export interface ListServicesResponse {
  /** List of Services. */
  services: Service[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for ListDiscoveredServices. */
export interface ListDiscoveredServicesRequest {
  /**
   * Required. Project and location to list Discovered Services on.
   * Expected format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Response for ListDiscoveredServices. */
export interface ListDiscoveredServicesResponse {
  /** List of Discovered Services. */
  discoveredServices: DiscoveredService[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for CreateService. */
export interface CreateServiceRequest {
  /**
   * Required. Fully qualified name of the parent Application to create the
   * Service in. Expected format:
   * `projects/{project}/locations/{location}/applications/{application}`.
   */
  parent: string;
  /**
   * Required. The Service identifier.
   * Must contain only lowercase letters, numbers
   * or hyphens, with the first character a letter, the last a letter or a
   * number, and a 63 character maximum.
   */
  serviceId: string;
  /** Required. The resource being created. */
  service:
    | Service
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for GetService. */
export interface GetServiceRequest {
  /**
   * Required. Fully qualified name of the Service to fetch.
   * Expected format:
   * `projects/{project}/locations/{location}/applications/{application}/services/{service}`.
   */
  name: string;
}

/** Request for GetDiscoveredService. */
export interface GetDiscoveredServiceRequest {
  /**
   * Required. Fully qualified name of the Discovered Service to fetch.
   * Expected format:
   * `projects/{project}/locations/{location}/discoveredServices/{discoveredService}`.
   */
  name: string;
}

/** Request for LookupDiscoveredService. */
export interface LookupDiscoveredServiceRequest {
  /**
   * Required. Host project ID and location to lookup Discovered Service in.
   * Expected format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. Resource URI to find DiscoveredService for.
   * Accepts both project number and project ID and does translation when
   * needed.
   */
  uri: string;
}

/** Response for LookupDiscoveredService. */
export interface LookupDiscoveredServiceResponse {
  /** Discovered Service if exists, empty otherwise. */
  discoveredService: DiscoveredService | undefined;
}

/** Request for UpdateService. */
export interface UpdateServiceRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Service resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request.
   * The API changes the values of the fields as specified in the update_mask.
   * The API ignores the values of all fields not covered by the update_mask.
   * You can also unset a field by not specifying it in the updated message, but
   * adding the field to the mask. This clears whatever value the field
   * previously had.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  service:
    | Service
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for DeleteService. */
export interface DeleteServiceRequest {
  /**
   * Required. Fully qualified name of the Service to delete from an
   * Application. Expected format:
   * `projects/{project}/locations/{location}/applications/{application}/services/{service}`.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for ListApplications. */
export interface ListApplicationsRequest {
  /**
   * Required. Project and location to list Applications on.
   * Expected format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Response for ListApplications. */
export interface ListApplicationsResponse {
  /** List of Applications. */
  applications: Application[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for CreateApplication. */
export interface CreateApplicationRequest {
  /**
   * Required. Project and location to create Application in.
   * Expected format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. The Application identifier.
   * Must contain only lowercase letters, numbers
   * or hyphens, with the first character a letter, the last a letter or a
   * number, and a 63 character maximum.
   */
  applicationId: string;
  /** Required. The resource being created */
  application:
    | Application
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for GetApplication. */
export interface GetApplicationRequest {
  /**
   * Required. Fully qualified name of the Application to fetch.
   * Expected format:
   * `projects/{project}/locations/{location}/applications/{application}`.
   */
  name: string;
}

/** Request for UpdateApplication. */
export interface UpdateApplicationRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Application resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request.
   * The API changes the values of the fields as specified in the update_mask.
   * The API ignores the values of all fields not covered by the update_mask.
   * You can also unset a field by not specifying it in the updated message, but
   * adding the field to the mask. This clears whatever value the field
   * previously had.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  application:
    | Application
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for DeleteApplication. */
export interface DeleteApplicationRequest {
  /**
   * Required. Fully qualified name of the Application to delete.
   * Expected format:
   * `projects/{project}/locations/{location}/applications/{application}`.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for ListWorkloads. */
export interface ListWorkloadsRequest {
  /**
   * Required. Fully qualified name of the parent Application to list Workloads
   * for. Expected format:
   * `projects/{project}/locations/{location}/applications/{application}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Response for ListWorkloads. */
export interface ListWorkloadsResponse {
  /** List of Workloads. */
  workloads: Workload[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for ListDiscoveredWorkloads. */
export interface ListDiscoveredWorkloadsRequest {
  /**
   * Required. Project and location to list Discovered Workloads on.
   * Expected format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Response for ListDiscoveredWorkloads. */
export interface ListDiscoveredWorkloadsResponse {
  /** List of Discovered Workloads. */
  discoveredWorkloads: DiscoveredWorkload[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for CreateWorkload. */
export interface CreateWorkloadRequest {
  /**
   * Required. Fully qualified name of the Application to create Workload in.
   * Expected format:
   * `projects/{project}/locations/{location}/applications/{application}`.
   */
  parent: string;
  /**
   * Required. The Workload identifier.
   * Must contain only lowercase letters, numbers
   * or hyphens, with the first character a letter, the last a letter or a
   * number, and a 63 character maximum.
   */
  workloadId: string;
  /** Required. The resource being created. */
  workload:
    | Workload
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for GetWorkload. */
export interface GetWorkloadRequest {
  /**
   * Required. Fully qualified name of the Workload to fetch.
   * Expected format:
   * `projects/{project}/locations/{location}/applications/{application}/workloads/{workload}`.
   */
  name: string;
}

/** Request for GetDiscoveredWorkload. */
export interface GetDiscoveredWorkloadRequest {
  /**
   * Required. Fully qualified name of the Discovered Workload to fetch.
   * Expected format:
   * `projects/{project}/locations/{location}/discoveredWorkloads/{discoveredWorkload}`.
   */
  name: string;
}

/** Request for LookupDiscoveredWorkload. */
export interface LookupDiscoveredWorkloadRequest {
  /**
   * Required. Host project ID and location to lookup Discovered Workload in.
   * Expected format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. Resource URI to find Discovered Workload for.
   * Accepts both project number and project ID and does translation when
   * needed.
   */
  uri: string;
}

/** Response for LookupDiscoveredWorkload. */
export interface LookupDiscoveredWorkloadResponse {
  /** Discovered Workload if exists, empty otherwise. */
  discoveredWorkload: DiscoveredWorkload | undefined;
}

/** Request for UpdateWorkload. */
export interface UpdateWorkloadRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Workload resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request.
   * The API changes the values of the fields as specified in the update_mask.
   * The API ignores the values of all fields not covered by the update_mask.
   * You can also unset a field by not specifying it in the updated message, but
   * adding the field to the mask. This clears whatever value the field
   * previously had.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  workload:
    | Workload
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for DeleteWorkload. */
export interface DeleteWorkloadRequest {
  /**
   * Required. Fully qualified name of the Workload to delete from an
   * Application. Expected format:
   * `projects/{project}/locations/{location}/applications/{application}/workloads/{workload}`.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseLookupServiceProjectAttachmentRequest(): LookupServiceProjectAttachmentRequest {
  return { name: "" };
}

export const LookupServiceProjectAttachmentRequest: MessageFns<LookupServiceProjectAttachmentRequest> = {
  encode(message: LookupServiceProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupServiceProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupServiceProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupServiceProjectAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: LookupServiceProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupServiceProjectAttachmentRequest>): LookupServiceProjectAttachmentRequest {
    return LookupServiceProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupServiceProjectAttachmentRequest>): LookupServiceProjectAttachmentRequest {
    const message = createBaseLookupServiceProjectAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupServiceProjectAttachmentResponse(): LookupServiceProjectAttachmentResponse {
  return { serviceProjectAttachment: undefined };
}

export const LookupServiceProjectAttachmentResponse: MessageFns<LookupServiceProjectAttachmentResponse> = {
  encode(message: LookupServiceProjectAttachmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceProjectAttachment !== undefined) {
      ServiceProjectAttachment.encode(message.serviceProjectAttachment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupServiceProjectAttachmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupServiceProjectAttachmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceProjectAttachment = ServiceProjectAttachment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupServiceProjectAttachmentResponse {
    return {
      serviceProjectAttachment: isSet(object.serviceProjectAttachment)
        ? ServiceProjectAttachment.fromJSON(object.serviceProjectAttachment)
        : undefined,
    };
  },

  toJSON(message: LookupServiceProjectAttachmentResponse): unknown {
    const obj: any = {};
    if (message.serviceProjectAttachment !== undefined) {
      obj.serviceProjectAttachment = ServiceProjectAttachment.toJSON(message.serviceProjectAttachment);
    }
    return obj;
  },

  create(base?: DeepPartial<LookupServiceProjectAttachmentResponse>): LookupServiceProjectAttachmentResponse {
    return LookupServiceProjectAttachmentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupServiceProjectAttachmentResponse>): LookupServiceProjectAttachmentResponse {
    const message = createBaseLookupServiceProjectAttachmentResponse();
    message.serviceProjectAttachment =
      (object.serviceProjectAttachment !== undefined && object.serviceProjectAttachment !== null)
        ? ServiceProjectAttachment.fromPartial(object.serviceProjectAttachment)
        : undefined;
    return message;
  },
};

function createBaseListServiceProjectAttachmentsRequest(): ListServiceProjectAttachmentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListServiceProjectAttachmentsRequest: MessageFns<ListServiceProjectAttachmentsRequest> = {
  encode(message: ListServiceProjectAttachmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceProjectAttachmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceProjectAttachmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceProjectAttachmentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListServiceProjectAttachmentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceProjectAttachmentsRequest>): ListServiceProjectAttachmentsRequest {
    return ListServiceProjectAttachmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceProjectAttachmentsRequest>): ListServiceProjectAttachmentsRequest {
    const message = createBaseListServiceProjectAttachmentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListServiceProjectAttachmentsResponse(): ListServiceProjectAttachmentsResponse {
  return { serviceProjectAttachments: [], nextPageToken: "", unreachable: [] };
}

export const ListServiceProjectAttachmentsResponse: MessageFns<ListServiceProjectAttachmentsResponse> = {
  encode(message: ListServiceProjectAttachmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.serviceProjectAttachments) {
      ServiceProjectAttachment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceProjectAttachmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceProjectAttachmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceProjectAttachments.push(ServiceProjectAttachment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceProjectAttachmentsResponse {
    return {
      serviceProjectAttachments: globalThis.Array.isArray(object?.serviceProjectAttachments)
        ? object.serviceProjectAttachments.map((e: any) => ServiceProjectAttachment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListServiceProjectAttachmentsResponse): unknown {
    const obj: any = {};
    if (message.serviceProjectAttachments?.length) {
      obj.serviceProjectAttachments = message.serviceProjectAttachments.map((e) => ServiceProjectAttachment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceProjectAttachmentsResponse>): ListServiceProjectAttachmentsResponse {
    return ListServiceProjectAttachmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceProjectAttachmentsResponse>): ListServiceProjectAttachmentsResponse {
    const message = createBaseListServiceProjectAttachmentsResponse();
    message.serviceProjectAttachments =
      object.serviceProjectAttachments?.map((e) => ServiceProjectAttachment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateServiceProjectAttachmentRequest(): CreateServiceProjectAttachmentRequest {
  return { parent: "", serviceProjectAttachmentId: "", serviceProjectAttachment: undefined, requestId: "" };
}

export const CreateServiceProjectAttachmentRequest: MessageFns<CreateServiceProjectAttachmentRequest> = {
  encode(message: CreateServiceProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serviceProjectAttachmentId !== "") {
      writer.uint32(18).string(message.serviceProjectAttachmentId);
    }
    if (message.serviceProjectAttachment !== undefined) {
      ServiceProjectAttachment.encode(message.serviceProjectAttachment, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceProjectAttachmentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceProjectAttachment = ServiceProjectAttachment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceProjectAttachmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceProjectAttachmentId: isSet(object.serviceProjectAttachmentId)
        ? globalThis.String(object.serviceProjectAttachmentId)
        : "",
      serviceProjectAttachment: isSet(object.serviceProjectAttachment)
        ? ServiceProjectAttachment.fromJSON(object.serviceProjectAttachment)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateServiceProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceProjectAttachmentId !== "") {
      obj.serviceProjectAttachmentId = message.serviceProjectAttachmentId;
    }
    if (message.serviceProjectAttachment !== undefined) {
      obj.serviceProjectAttachment = ServiceProjectAttachment.toJSON(message.serviceProjectAttachment);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceProjectAttachmentRequest>): CreateServiceProjectAttachmentRequest {
    return CreateServiceProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceProjectAttachmentRequest>): CreateServiceProjectAttachmentRequest {
    const message = createBaseCreateServiceProjectAttachmentRequest();
    message.parent = object.parent ?? "";
    message.serviceProjectAttachmentId = object.serviceProjectAttachmentId ?? "";
    message.serviceProjectAttachment =
      (object.serviceProjectAttachment !== undefined && object.serviceProjectAttachment !== null)
        ? ServiceProjectAttachment.fromPartial(object.serviceProjectAttachment)
        : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetServiceProjectAttachmentRequest(): GetServiceProjectAttachmentRequest {
  return { name: "" };
}

export const GetServiceProjectAttachmentRequest: MessageFns<GetServiceProjectAttachmentRequest> = {
  encode(message: GetServiceProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceProjectAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceProjectAttachmentRequest>): GetServiceProjectAttachmentRequest {
    return GetServiceProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceProjectAttachmentRequest>): GetServiceProjectAttachmentRequest {
    const message = createBaseGetServiceProjectAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteServiceProjectAttachmentRequest(): DeleteServiceProjectAttachmentRequest {
  return { name: "", requestId: "" };
}

export const DeleteServiceProjectAttachmentRequest: MessageFns<DeleteServiceProjectAttachmentRequest> = {
  encode(message: DeleteServiceProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceProjectAttachmentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteServiceProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceProjectAttachmentRequest>): DeleteServiceProjectAttachmentRequest {
    return DeleteServiceProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceProjectAttachmentRequest>): DeleteServiceProjectAttachmentRequest {
    const message = createBaseDeleteServiceProjectAttachmentRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDetachServiceProjectAttachmentRequest(): DetachServiceProjectAttachmentRequest {
  return { name: "" };
}

export const DetachServiceProjectAttachmentRequest: MessageFns<DetachServiceProjectAttachmentRequest> = {
  encode(message: DetachServiceProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetachServiceProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetachServiceProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetachServiceProjectAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DetachServiceProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DetachServiceProjectAttachmentRequest>): DetachServiceProjectAttachmentRequest {
    return DetachServiceProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DetachServiceProjectAttachmentRequest>): DetachServiceProjectAttachmentRequest {
    const message = createBaseDetachServiceProjectAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDetachServiceProjectAttachmentResponse(): DetachServiceProjectAttachmentResponse {
  return {};
}

export const DetachServiceProjectAttachmentResponse: MessageFns<DetachServiceProjectAttachmentResponse> = {
  encode(_: DetachServiceProjectAttachmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetachServiceProjectAttachmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetachServiceProjectAttachmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DetachServiceProjectAttachmentResponse {
    return {};
  },

  toJSON(_: DetachServiceProjectAttachmentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DetachServiceProjectAttachmentResponse>): DetachServiceProjectAttachmentResponse {
    return DetachServiceProjectAttachmentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DetachServiceProjectAttachmentResponse>): DetachServiceProjectAttachmentResponse {
    const message = createBaseDetachServiceProjectAttachmentResponse();
    return message;
  },
};

function createBaseListServicesRequest(): ListServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListServicesRequest: MessageFns<ListServicesRequest> = {
  encode(message: ListServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesRequest>): ListServicesRequest {
    return ListServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesRequest>): ListServicesRequest {
    const message = createBaseListServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListServicesResponse(): ListServicesResponse {
  return { services: [], nextPageToken: "", unreachable: [] };
}

export const ListServicesResponse: MessageFns<ListServicesResponse> = {
  encode(message: ListServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesResponse {
    return {
      services: globalThis.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesResponse>): ListServicesResponse {
    return ListServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesResponse>): ListServicesResponse {
    const message = createBaseListServicesResponse();
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListDiscoveredServicesRequest(): ListDiscoveredServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDiscoveredServicesRequest: MessageFns<ListDiscoveredServicesRequest> = {
  encode(message: ListDiscoveredServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDiscoveredServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDiscoveredServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDiscoveredServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDiscoveredServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDiscoveredServicesRequest>): ListDiscoveredServicesRequest {
    return ListDiscoveredServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDiscoveredServicesRequest>): ListDiscoveredServicesRequest {
    const message = createBaseListDiscoveredServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDiscoveredServicesResponse(): ListDiscoveredServicesResponse {
  return { discoveredServices: [], nextPageToken: "", unreachable: [] };
}

export const ListDiscoveredServicesResponse: MessageFns<ListDiscoveredServicesResponse> = {
  encode(message: ListDiscoveredServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.discoveredServices) {
      DiscoveredService.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDiscoveredServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDiscoveredServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discoveredServices.push(DiscoveredService.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDiscoveredServicesResponse {
    return {
      discoveredServices: globalThis.Array.isArray(object?.discoveredServices)
        ? object.discoveredServices.map((e: any) => DiscoveredService.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDiscoveredServicesResponse): unknown {
    const obj: any = {};
    if (message.discoveredServices?.length) {
      obj.discoveredServices = message.discoveredServices.map((e) => DiscoveredService.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDiscoveredServicesResponse>): ListDiscoveredServicesResponse {
    return ListDiscoveredServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDiscoveredServicesResponse>): ListDiscoveredServicesResponse {
    const message = createBaseListDiscoveredServicesResponse();
    message.discoveredServices = object.discoveredServices?.map((e) => DiscoveredService.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateServiceRequest(): CreateServiceRequest {
  return { parent: "", serviceId: "", service: undefined, requestId: "" };
}

export const CreateServiceRequest: MessageFns<CreateServiceRequest> = {
  encode(message: CreateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serviceId !== "") {
      writer.uint32(18).string(message.serviceId);
    }
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateServiceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    return CreateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    const message = createBaseCreateServiceRequest();
    message.parent = object.parent ?? "";
    message.serviceId = object.serviceId ?? "";
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetServiceRequest(): GetServiceRequest {
  return { name: "" };
}

export const GetServiceRequest: MessageFns<GetServiceRequest> = {
  encode(message: GetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRequest>): GetServiceRequest {
    return GetServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRequest>): GetServiceRequest {
    const message = createBaseGetServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDiscoveredServiceRequest(): GetDiscoveredServiceRequest {
  return { name: "" };
}

export const GetDiscoveredServiceRequest: MessageFns<GetDiscoveredServiceRequest> = {
  encode(message: GetDiscoveredServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDiscoveredServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDiscoveredServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDiscoveredServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDiscoveredServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDiscoveredServiceRequest>): GetDiscoveredServiceRequest {
    return GetDiscoveredServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDiscoveredServiceRequest>): GetDiscoveredServiceRequest {
    const message = createBaseGetDiscoveredServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupDiscoveredServiceRequest(): LookupDiscoveredServiceRequest {
  return { parent: "", uri: "" };
}

export const LookupDiscoveredServiceRequest: MessageFns<LookupDiscoveredServiceRequest> = {
  encode(message: LookupDiscoveredServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupDiscoveredServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupDiscoveredServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupDiscoveredServiceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: LookupDiscoveredServiceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupDiscoveredServiceRequest>): LookupDiscoveredServiceRequest {
    return LookupDiscoveredServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupDiscoveredServiceRequest>): LookupDiscoveredServiceRequest {
    const message = createBaseLookupDiscoveredServiceRequest();
    message.parent = object.parent ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseLookupDiscoveredServiceResponse(): LookupDiscoveredServiceResponse {
  return { discoveredService: undefined };
}

export const LookupDiscoveredServiceResponse: MessageFns<LookupDiscoveredServiceResponse> = {
  encode(message: LookupDiscoveredServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.discoveredService !== undefined) {
      DiscoveredService.encode(message.discoveredService, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupDiscoveredServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupDiscoveredServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discoveredService = DiscoveredService.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupDiscoveredServiceResponse {
    return {
      discoveredService: isSet(object.discoveredService)
        ? DiscoveredService.fromJSON(object.discoveredService)
        : undefined,
    };
  },

  toJSON(message: LookupDiscoveredServiceResponse): unknown {
    const obj: any = {};
    if (message.discoveredService !== undefined) {
      obj.discoveredService = DiscoveredService.toJSON(message.discoveredService);
    }
    return obj;
  },

  create(base?: DeepPartial<LookupDiscoveredServiceResponse>): LookupDiscoveredServiceResponse {
    return LookupDiscoveredServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupDiscoveredServiceResponse>): LookupDiscoveredServiceResponse {
    const message = createBaseLookupDiscoveredServiceResponse();
    message.discoveredService = (object.discoveredService !== undefined && object.discoveredService !== null)
      ? DiscoveredService.fromPartial(object.discoveredService)
      : undefined;
    return message;
  },
};

function createBaseUpdateServiceRequest(): UpdateServiceRequest {
  return { updateMask: undefined, service: undefined, requestId: "" };
}

export const UpdateServiceRequest: MessageFns<UpdateServiceRequest> = {
  encode(message: UpdateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServiceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateServiceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    return UpdateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    const message = createBaseUpdateServiceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteServiceRequest(): DeleteServiceRequest {
  return { name: "", requestId: "" };
}

export const DeleteServiceRequest: MessageFns<DeleteServiceRequest> = {
  encode(message: DeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    return DeleteServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    const message = createBaseDeleteServiceRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListApplicationsRequest(): ListApplicationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListApplicationsRequest: MessageFns<ListApplicationsRequest> = {
  encode(message: ListApplicationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApplicationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListApplicationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApplicationsRequest>): ListApplicationsRequest {
    return ListApplicationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApplicationsRequest>): ListApplicationsRequest {
    const message = createBaseListApplicationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListApplicationsResponse(): ListApplicationsResponse {
  return { applications: [], nextPageToken: "", unreachable: [] };
}

export const ListApplicationsResponse: MessageFns<ListApplicationsResponse> = {
  encode(message: ListApplicationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.applications) {
      Application.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.applications.push(Application.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApplicationsResponse {
    return {
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => Application.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListApplicationsResponse): unknown {
    const obj: any = {};
    if (message.applications?.length) {
      obj.applications = message.applications.map((e) => Application.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApplicationsResponse>): ListApplicationsResponse {
    return ListApplicationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApplicationsResponse>): ListApplicationsResponse {
    const message = createBaseListApplicationsResponse();
    message.applications = object.applications?.map((e) => Application.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateApplicationRequest(): CreateApplicationRequest {
  return { parent: "", applicationId: "", application: undefined, requestId: "" };
}

export const CreateApplicationRequest: MessageFns<CreateApplicationRequest> = {
  encode(message: CreateApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.applicationId !== "") {
      writer.uint32(18).string(message.applicationId);
    }
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.applicationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApplicationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      applicationId: isSet(object.applicationId) ? globalThis.String(object.applicationId) : "",
      application: isSet(object.application) ? Application.fromJSON(object.application) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateApplicationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.applicationId !== "") {
      obj.applicationId = message.applicationId;
    }
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApplicationRequest>): CreateApplicationRequest {
    return CreateApplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApplicationRequest>): CreateApplicationRequest {
    const message = createBaseCreateApplicationRequest();
    message.parent = object.parent ?? "";
    message.applicationId = object.applicationId ?? "";
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetApplicationRequest(): GetApplicationRequest {
  return { name: "" };
}

export const GetApplicationRequest: MessageFns<GetApplicationRequest> = {
  encode(message: GetApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApplicationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApplicationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApplicationRequest>): GetApplicationRequest {
    return GetApplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApplicationRequest>): GetApplicationRequest {
    const message = createBaseGetApplicationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateApplicationRequest(): UpdateApplicationRequest {
  return { updateMask: undefined, application: undefined, requestId: "" };
}

export const UpdateApplicationRequest: MessageFns<UpdateApplicationRequest> = {
  encode(message: UpdateApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.application !== undefined) {
      Application.encode(message.application, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.application = Application.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApplicationRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      application: isSet(object.application) ? Application.fromJSON(object.application) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateApplicationRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.application !== undefined) {
      obj.application = Application.toJSON(message.application);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApplicationRequest>): UpdateApplicationRequest {
    return UpdateApplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApplicationRequest>): UpdateApplicationRequest {
    const message = createBaseUpdateApplicationRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.application = (object.application !== undefined && object.application !== null)
      ? Application.fromPartial(object.application)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteApplicationRequest(): DeleteApplicationRequest {
  return { name: "", requestId: "" };
}

export const DeleteApplicationRequest: MessageFns<DeleteApplicationRequest> = {
  encode(message: DeleteApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApplicationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteApplicationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApplicationRequest>): DeleteApplicationRequest {
    return DeleteApplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApplicationRequest>): DeleteApplicationRequest {
    const message = createBaseDeleteApplicationRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListWorkloadsRequest(): ListWorkloadsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListWorkloadsRequest: MessageFns<ListWorkloadsRequest> = {
  encode(message: ListWorkloadsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListWorkloadsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadsRequest>): ListWorkloadsRequest {
    return ListWorkloadsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadsRequest>): ListWorkloadsRequest {
    const message = createBaseListWorkloadsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListWorkloadsResponse(): ListWorkloadsResponse {
  return { workloads: [], nextPageToken: "", unreachable: [] };
}

export const ListWorkloadsResponse: MessageFns<ListWorkloadsResponse> = {
  encode(message: ListWorkloadsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workloads) {
      Workload.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloads.push(Workload.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadsResponse {
    return {
      workloads: globalThis.Array.isArray(object?.workloads)
        ? object.workloads.map((e: any) => Workload.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListWorkloadsResponse): unknown {
    const obj: any = {};
    if (message.workloads?.length) {
      obj.workloads = message.workloads.map((e) => Workload.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadsResponse>): ListWorkloadsResponse {
    return ListWorkloadsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadsResponse>): ListWorkloadsResponse {
    const message = createBaseListWorkloadsResponse();
    message.workloads = object.workloads?.map((e) => Workload.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListDiscoveredWorkloadsRequest(): ListDiscoveredWorkloadsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDiscoveredWorkloadsRequest: MessageFns<ListDiscoveredWorkloadsRequest> = {
  encode(message: ListDiscoveredWorkloadsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDiscoveredWorkloadsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDiscoveredWorkloadsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDiscoveredWorkloadsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDiscoveredWorkloadsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDiscoveredWorkloadsRequest>): ListDiscoveredWorkloadsRequest {
    return ListDiscoveredWorkloadsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDiscoveredWorkloadsRequest>): ListDiscoveredWorkloadsRequest {
    const message = createBaseListDiscoveredWorkloadsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDiscoveredWorkloadsResponse(): ListDiscoveredWorkloadsResponse {
  return { discoveredWorkloads: [], nextPageToken: "", unreachable: [] };
}

export const ListDiscoveredWorkloadsResponse: MessageFns<ListDiscoveredWorkloadsResponse> = {
  encode(message: ListDiscoveredWorkloadsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.discoveredWorkloads) {
      DiscoveredWorkload.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDiscoveredWorkloadsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDiscoveredWorkloadsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discoveredWorkloads.push(DiscoveredWorkload.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDiscoveredWorkloadsResponse {
    return {
      discoveredWorkloads: globalThis.Array.isArray(object?.discoveredWorkloads)
        ? object.discoveredWorkloads.map((e: any) => DiscoveredWorkload.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDiscoveredWorkloadsResponse): unknown {
    const obj: any = {};
    if (message.discoveredWorkloads?.length) {
      obj.discoveredWorkloads = message.discoveredWorkloads.map((e) => DiscoveredWorkload.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDiscoveredWorkloadsResponse>): ListDiscoveredWorkloadsResponse {
    return ListDiscoveredWorkloadsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDiscoveredWorkloadsResponse>): ListDiscoveredWorkloadsResponse {
    const message = createBaseListDiscoveredWorkloadsResponse();
    message.discoveredWorkloads = object.discoveredWorkloads?.map((e) => DiscoveredWorkload.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateWorkloadRequest(): CreateWorkloadRequest {
  return { parent: "", workloadId: "", workload: undefined, requestId: "" };
}

export const CreateWorkloadRequest: MessageFns<CreateWorkloadRequest> = {
  encode(message: CreateWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.workloadId !== "") {
      writer.uint32(18).string(message.workloadId);
    }
    if (message.workload !== undefined) {
      Workload.encode(message.workload, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workloadId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.workload = Workload.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorkloadRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      workloadId: isSet(object.workloadId) ? globalThis.String(object.workloadId) : "",
      workload: isSet(object.workload) ? Workload.fromJSON(object.workload) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateWorkloadRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.workloadId !== "") {
      obj.workloadId = message.workloadId;
    }
    if (message.workload !== undefined) {
      obj.workload = Workload.toJSON(message.workload);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWorkloadRequest>): CreateWorkloadRequest {
    return CreateWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWorkloadRequest>): CreateWorkloadRequest {
    const message = createBaseCreateWorkloadRequest();
    message.parent = object.parent ?? "";
    message.workloadId = object.workloadId ?? "";
    message.workload = (object.workload !== undefined && object.workload !== null)
      ? Workload.fromPartial(object.workload)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetWorkloadRequest(): GetWorkloadRequest {
  return { name: "" };
}

export const GetWorkloadRequest: MessageFns<GetWorkloadRequest> = {
  encode(message: GetWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkloadRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWorkloadRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkloadRequest>): GetWorkloadRequest {
    return GetWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkloadRequest>): GetWorkloadRequest {
    const message = createBaseGetWorkloadRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDiscoveredWorkloadRequest(): GetDiscoveredWorkloadRequest {
  return { name: "" };
}

export const GetDiscoveredWorkloadRequest: MessageFns<GetDiscoveredWorkloadRequest> = {
  encode(message: GetDiscoveredWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDiscoveredWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDiscoveredWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDiscoveredWorkloadRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDiscoveredWorkloadRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDiscoveredWorkloadRequest>): GetDiscoveredWorkloadRequest {
    return GetDiscoveredWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDiscoveredWorkloadRequest>): GetDiscoveredWorkloadRequest {
    const message = createBaseGetDiscoveredWorkloadRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupDiscoveredWorkloadRequest(): LookupDiscoveredWorkloadRequest {
  return { parent: "", uri: "" };
}

export const LookupDiscoveredWorkloadRequest: MessageFns<LookupDiscoveredWorkloadRequest> = {
  encode(message: LookupDiscoveredWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupDiscoveredWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupDiscoveredWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupDiscoveredWorkloadRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: LookupDiscoveredWorkloadRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupDiscoveredWorkloadRequest>): LookupDiscoveredWorkloadRequest {
    return LookupDiscoveredWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupDiscoveredWorkloadRequest>): LookupDiscoveredWorkloadRequest {
    const message = createBaseLookupDiscoveredWorkloadRequest();
    message.parent = object.parent ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseLookupDiscoveredWorkloadResponse(): LookupDiscoveredWorkloadResponse {
  return { discoveredWorkload: undefined };
}

export const LookupDiscoveredWorkloadResponse: MessageFns<LookupDiscoveredWorkloadResponse> = {
  encode(message: LookupDiscoveredWorkloadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.discoveredWorkload !== undefined) {
      DiscoveredWorkload.encode(message.discoveredWorkload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupDiscoveredWorkloadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupDiscoveredWorkloadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.discoveredWorkload = DiscoveredWorkload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupDiscoveredWorkloadResponse {
    return {
      discoveredWorkload: isSet(object.discoveredWorkload)
        ? DiscoveredWorkload.fromJSON(object.discoveredWorkload)
        : undefined,
    };
  },

  toJSON(message: LookupDiscoveredWorkloadResponse): unknown {
    const obj: any = {};
    if (message.discoveredWorkload !== undefined) {
      obj.discoveredWorkload = DiscoveredWorkload.toJSON(message.discoveredWorkload);
    }
    return obj;
  },

  create(base?: DeepPartial<LookupDiscoveredWorkloadResponse>): LookupDiscoveredWorkloadResponse {
    return LookupDiscoveredWorkloadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupDiscoveredWorkloadResponse>): LookupDiscoveredWorkloadResponse {
    const message = createBaseLookupDiscoveredWorkloadResponse();
    message.discoveredWorkload = (object.discoveredWorkload !== undefined && object.discoveredWorkload !== null)
      ? DiscoveredWorkload.fromPartial(object.discoveredWorkload)
      : undefined;
    return message;
  },
};

function createBaseUpdateWorkloadRequest(): UpdateWorkloadRequest {
  return { updateMask: undefined, workload: undefined, requestId: "" };
}

export const UpdateWorkloadRequest: MessageFns<UpdateWorkloadRequest> = {
  encode(message: UpdateWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.workload !== undefined) {
      Workload.encode(message.workload, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workload = Workload.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWorkloadRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      workload: isSet(object.workload) ? Workload.fromJSON(object.workload) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateWorkloadRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.workload !== undefined) {
      obj.workload = Workload.toJSON(message.workload);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkloadRequest>): UpdateWorkloadRequest {
    return UpdateWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateWorkloadRequest>): UpdateWorkloadRequest {
    const message = createBaseUpdateWorkloadRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.workload = (object.workload !== undefined && object.workload !== null)
      ? Workload.fromPartial(object.workload)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteWorkloadRequest(): DeleteWorkloadRequest {
  return { name: "", requestId: "" };
}

export const DeleteWorkloadRequest: MessageFns<DeleteWorkloadRequest> = {
  encode(message: DeleteWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWorkloadRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteWorkloadRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWorkloadRequest>): DeleteWorkloadRequest {
    return DeleteWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWorkloadRequest>): DeleteWorkloadRequest {
    const message = createBaseDeleteWorkloadRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/** The App Hub API allows you to manage App Hub resources. */
export type AppHubDefinition = typeof AppHubDefinition;
export const AppHubDefinition = {
  name: "AppHub",
  fullName: "google.cloud.apphub.v1.AppHub",
  methods: {
    /**
     * Lists a service project attachment for a given service project. You can
     * call this API from any project to find if it is attached to a host project.
     */
    lookupServiceProjectAttachment: {
      name: "LookupServiceProjectAttachment",
      requestType: LookupServiceProjectAttachmentRequest,
      requestStream: false,
      responseType: LookupServiceProjectAttachmentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /** Lists service projects attached to the host project. */
    listServiceProjectAttachments: {
      name: "ListServiceProjectAttachments",
      requestType: ListServiceProjectAttachmentsRequest,
      requestStream: false,
      responseType: ListServiceProjectAttachmentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Attaches a service project to the host project. */
    createServiceProjectAttachment: {
      name: "CreateServiceProjectAttachment",
      requestType: CreateServiceProjectAttachmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              24,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              63,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              26,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a service project attachment. */
    getServiceProjectAttachment: {
      name: "GetServiceProjectAttachment",
      requestType: GetServiceProjectAttachmentRequest,
      requestStream: false,
      responseType: ServiceProjectAttachment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a service project attachment. */
    deleteServiceProjectAttachment: {
      name: "DeleteServiceProjectAttachment",
      requestType: DeleteServiceProjectAttachmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Detaches a service project from a host project.
     * You can call this API from any service project without needing access to
     * the host project that it is attached to.
     */
    detachServiceProjectAttachment: {
      name: "DetachServiceProjectAttachment",
      requestType: DetachServiceProjectAttachmentRequest,
      requestStream: false,
      responseType: DetachServiceProjectAttachmentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              116,
              97,
              99,
              104,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Lists Discovered Services that can be added to an Application in a host
     * project and location.
     */
    listDiscoveredServices: {
      name: "ListDiscoveredServices",
      requestType: ListDiscoveredServicesRequest,
      requestStream: false,
      responseType: ListDiscoveredServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Discovered Service in a host project and location. */
    getDiscoveredService: {
      name: "GetDiscoveredService",
      requestType: GetDiscoveredServiceRequest,
      requestStream: false,
      responseType: DiscoveredService,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists a Discovered Service in a host project and location, with a
     * given resource URI.
     */
    lookupDiscoveredService: {
      name: "LookupDiscoveredService",
      requestType: LookupDiscoveredServiceRequest,
      requestStream: false,
      responseType: LookupDiscoveredServiceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 117, 114, 105])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /** Lists Services in an Application. */
    listServices: {
      name: "ListServices",
      requestType: ListServicesRequest,
      requestStream: false,
      responseType: ListServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a Service in an Application. */
    createService: {
      name: "CreateService",
      requestType: CreateServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Service in an Application. */
    getService: {
      name: "GetService",
      requestType: GetServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a Service in an Application. */
    updateService: {
      name: "UpdateService",
      requestType: UpdateServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 115, 101, 114, 118, 105, 99, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              67,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Service from an Application. */
    deleteService: {
      name: "DeleteService",
      requestType: DeleteServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists Discovered Workloads that can be added to an Application in a host
     * project and location.
     */
    listDiscoveredWorkloads: {
      name: "ListDiscoveredWorkloads",
      requestType: ListDiscoveredWorkloadsRequest,
      requestStream: false,
      responseType: ListDiscoveredWorkloadsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Discovered Workload in a host project and location. */
    getDiscoveredWorkload: {
      name: "GetDiscoveredWorkload",
      requestType: GetDiscoveredWorkloadRequest,
      requestStream: false,
      responseType: DiscoveredWorkload,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists a Discovered Workload in a host project and location, with a
     * given resource URI.
     */
    lookupDiscoveredWorkload: {
      name: "LookupDiscoveredWorkload",
      requestType: LookupDiscoveredWorkloadRequest,
      requestStream: false,
      responseType: LookupDiscoveredWorkloadResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 117, 114, 105])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /** Lists Workloads in an Application. */
    listWorkloads: {
      name: "ListWorkloads",
      requestType: ListWorkloadsRequest,
      requestStream: false,
      responseType: ListWorkloadsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a Workload in an Application. */
    createWorkload: {
      name: "CreateWorkload",
      requestType: CreateWorkloadRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              8,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Workload in an Application. */
    getWorkload: {
      name: "GetWorkload",
      requestType: GetWorkloadRequest,
      requestStream: false,
      responseType: Workload,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a Workload in an Application. */
    updateWorkload: {
      name: "UpdateWorkload",
      requestType: UpdateWorkloadRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              8,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              50,
              69,
              47,
              118,
              49,
              47,
              123,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Workload from an Application. */
    deleteWorkload: {
      name: "DeleteWorkload",
      requestType: DeleteWorkloadRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Applications in a host project and location. */
    listApplications: {
      name: "ListApplications",
      requestType: ListApplicationsRequest,
      requestStream: false,
      responseType: ListApplicationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an Application in a host project and location. */
    createApplication: {
      name: "CreateApplication",
      requestType: CreateApplicationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              44,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              11,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an Application in a host project and location. */
    getApplication: {
      name: "GetApplication",
      requestType: GetApplicationRequest,
      requestStream: false,
      responseType: Application,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an Application in a host project and location. */
    updateApplication: {
      name: "UpdateApplication",
      requestType: UpdateApplicationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              11,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              50,
              60,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an Application in a host project and location. */
    deleteApplication: {
      name: "DeleteApplication",
      requestType: DeleteApplicationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AppHubServiceImplementation<CallContextExt = {}> {
  /**
   * Lists a service project attachment for a given service project. You can
   * call this API from any project to find if it is attached to a host project.
   */
  lookupServiceProjectAttachment(
    request: LookupServiceProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupServiceProjectAttachmentResponse>>;
  /** Lists service projects attached to the host project. */
  listServiceProjectAttachments(
    request: ListServiceProjectAttachmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServiceProjectAttachmentsResponse>>;
  /** Attaches a service project to the host project. */
  createServiceProjectAttachment(
    request: CreateServiceProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a service project attachment. */
  getServiceProjectAttachment(
    request: GetServiceProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServiceProjectAttachment>>;
  /** Deletes a service project attachment. */
  deleteServiceProjectAttachment(
    request: DeleteServiceProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Detaches a service project from a host project.
   * You can call this API from any service project without needing access to
   * the host project that it is attached to.
   */
  detachServiceProjectAttachment(
    request: DetachServiceProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DetachServiceProjectAttachmentResponse>>;
  /**
   * Lists Discovered Services that can be added to an Application in a host
   * project and location.
   */
  listDiscoveredServices(
    request: ListDiscoveredServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDiscoveredServicesResponse>>;
  /** Gets a Discovered Service in a host project and location. */
  getDiscoveredService(
    request: GetDiscoveredServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DiscoveredService>>;
  /**
   * Lists a Discovered Service in a host project and location, with a
   * given resource URI.
   */
  lookupDiscoveredService(
    request: LookupDiscoveredServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupDiscoveredServiceResponse>>;
  /** Lists Services in an Application. */
  listServices(
    request: ListServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicesResponse>>;
  /** Creates a Service in an Application. */
  createService(request: CreateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets a Service in an Application. */
  getService(request: GetServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** Updates a Service in an Application. */
  updateService(request: UpdateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a Service from an Application. */
  deleteService(request: DeleteServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Lists Discovered Workloads that can be added to an Application in a host
   * project and location.
   */
  listDiscoveredWorkloads(
    request: ListDiscoveredWorkloadsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDiscoveredWorkloadsResponse>>;
  /** Gets a Discovered Workload in a host project and location. */
  getDiscoveredWorkload(
    request: GetDiscoveredWorkloadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DiscoveredWorkload>>;
  /**
   * Lists a Discovered Workload in a host project and location, with a
   * given resource URI.
   */
  lookupDiscoveredWorkload(
    request: LookupDiscoveredWorkloadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupDiscoveredWorkloadResponse>>;
  /** Lists Workloads in an Application. */
  listWorkloads(
    request: ListWorkloadsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWorkloadsResponse>>;
  /** Creates a Workload in an Application. */
  createWorkload(
    request: CreateWorkloadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a Workload in an Application. */
  getWorkload(request: GetWorkloadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Workload>>;
  /** Updates a Workload in an Application. */
  updateWorkload(
    request: UpdateWorkloadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a Workload from an Application. */
  deleteWorkload(
    request: DeleteWorkloadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists Applications in a host project and location. */
  listApplications(
    request: ListApplicationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApplicationsResponse>>;
  /** Creates an Application in a host project and location. */
  createApplication(
    request: CreateApplicationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an Application in a host project and location. */
  getApplication(
    request: GetApplicationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Application>>;
  /** Updates an Application in a host project and location. */
  updateApplication(
    request: UpdateApplicationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes an Application in a host project and location. */
  deleteApplication(
    request: DeleteApplicationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface AppHubClient<CallOptionsExt = {}> {
  /**
   * Lists a service project attachment for a given service project. You can
   * call this API from any project to find if it is attached to a host project.
   */
  lookupServiceProjectAttachment(
    request: DeepPartial<LookupServiceProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupServiceProjectAttachmentResponse>;
  /** Lists service projects attached to the host project. */
  listServiceProjectAttachments(
    request: DeepPartial<ListServiceProjectAttachmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServiceProjectAttachmentsResponse>;
  /** Attaches a service project to the host project. */
  createServiceProjectAttachment(
    request: DeepPartial<CreateServiceProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a service project attachment. */
  getServiceProjectAttachment(
    request: DeepPartial<GetServiceProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServiceProjectAttachment>;
  /** Deletes a service project attachment. */
  deleteServiceProjectAttachment(
    request: DeepPartial<DeleteServiceProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Detaches a service project from a host project.
   * You can call this API from any service project without needing access to
   * the host project that it is attached to.
   */
  detachServiceProjectAttachment(
    request: DeepPartial<DetachServiceProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DetachServiceProjectAttachmentResponse>;
  /**
   * Lists Discovered Services that can be added to an Application in a host
   * project and location.
   */
  listDiscoveredServices(
    request: DeepPartial<ListDiscoveredServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDiscoveredServicesResponse>;
  /** Gets a Discovered Service in a host project and location. */
  getDiscoveredService(
    request: DeepPartial<GetDiscoveredServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DiscoveredService>;
  /**
   * Lists a Discovered Service in a host project and location, with a
   * given resource URI.
   */
  lookupDiscoveredService(
    request: DeepPartial<LookupDiscoveredServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupDiscoveredServiceResponse>;
  /** Lists Services in an Application. */
  listServices(
    request: DeepPartial<ListServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicesResponse>;
  /** Creates a Service in an Application. */
  createService(request: DeepPartial<CreateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets a Service in an Application. */
  getService(request: DeepPartial<GetServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** Updates a Service in an Application. */
  updateService(request: DeepPartial<UpdateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a Service from an Application. */
  deleteService(request: DeepPartial<DeleteServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Lists Discovered Workloads that can be added to an Application in a host
   * project and location.
   */
  listDiscoveredWorkloads(
    request: DeepPartial<ListDiscoveredWorkloadsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDiscoveredWorkloadsResponse>;
  /** Gets a Discovered Workload in a host project and location. */
  getDiscoveredWorkload(
    request: DeepPartial<GetDiscoveredWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DiscoveredWorkload>;
  /**
   * Lists a Discovered Workload in a host project and location, with a
   * given resource URI.
   */
  lookupDiscoveredWorkload(
    request: DeepPartial<LookupDiscoveredWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupDiscoveredWorkloadResponse>;
  /** Lists Workloads in an Application. */
  listWorkloads(
    request: DeepPartial<ListWorkloadsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWorkloadsResponse>;
  /** Creates a Workload in an Application. */
  createWorkload(
    request: DeepPartial<CreateWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a Workload in an Application. */
  getWorkload(request: DeepPartial<GetWorkloadRequest>, options?: CallOptions & CallOptionsExt): Promise<Workload>;
  /** Updates a Workload in an Application. */
  updateWorkload(
    request: DeepPartial<UpdateWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a Workload from an Application. */
  deleteWorkload(
    request: DeepPartial<DeleteWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists Applications in a host project and location. */
  listApplications(
    request: DeepPartial<ListApplicationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApplicationsResponse>;
  /** Creates an Application in a host project and location. */
  createApplication(
    request: DeepPartial<CreateApplicationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an Application in a host project and location. */
  getApplication(
    request: DeepPartial<GetApplicationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Application>;
  /** Updates an Application in a host project and location. */
  updateApplication(
    request: DeepPartial<UpdateApplicationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes an Application in a host project and location. */
  deleteApplication(
    request: DeepPartial<DeleteApplicationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
