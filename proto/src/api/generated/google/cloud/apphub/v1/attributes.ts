// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apphub/v1/attributes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.apphub.v1";

/** Consumer provided attributes. */
export interface Attributes {
  /** Optional. User-defined criticality information. */
  criticality:
    | Criticality
    | undefined;
  /** Optional. User-defined environment information. */
  environment:
    | Environment
    | undefined;
  /** Optional. Developer team that owns development and coding. */
  developerOwners: ContactInfo[];
  /** Optional. Operator team that ensures runtime and operations. */
  operatorOwners: ContactInfo[];
  /**
   * Optional. Business team that ensures user needs are met and value is
   * delivered
   */
  businessOwners: ContactInfo[];
}

/** Criticality of the Application, Service, or Workload */
export interface Criticality {
  /** Required. Criticality Type. */
  type: Criticality_Type;
}

/** Criticality Type. */
export enum Criticality_Type {
  /** TYPE_UNSPECIFIED - Unspecified type. */
  TYPE_UNSPECIFIED = 0,
  /** MISSION_CRITICAL - Mission critical service, application or workload. */
  MISSION_CRITICAL = 1,
  /** HIGH - High impact. */
  HIGH = 2,
  /** MEDIUM - Medium impact. */
  MEDIUM = 3,
  /** LOW - Low impact. */
  LOW = 4,
  UNRECOGNIZED = -1,
}

export function criticality_TypeFromJSON(object: any): Criticality_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Criticality_Type.TYPE_UNSPECIFIED;
    case 1:
    case "MISSION_CRITICAL":
      return Criticality_Type.MISSION_CRITICAL;
    case 2:
    case "HIGH":
      return Criticality_Type.HIGH;
    case 3:
    case "MEDIUM":
      return Criticality_Type.MEDIUM;
    case 4:
    case "LOW":
      return Criticality_Type.LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Criticality_Type.UNRECOGNIZED;
  }
}

export function criticality_TypeToJSON(object: Criticality_Type): string {
  switch (object) {
    case Criticality_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Criticality_Type.MISSION_CRITICAL:
      return "MISSION_CRITICAL";
    case Criticality_Type.HIGH:
      return "HIGH";
    case Criticality_Type.MEDIUM:
      return "MEDIUM";
    case Criticality_Type.LOW:
      return "LOW";
    case Criticality_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Environment of the Application, Service, or Workload */
export interface Environment {
  /** Required. Environment Type. */
  type: Environment_Type;
}

/** Environment Type. */
export enum Environment_Type {
  /** TYPE_UNSPECIFIED - Unspecified type. */
  TYPE_UNSPECIFIED = 0,
  /** PRODUCTION - Production environment. */
  PRODUCTION = 1,
  /** STAGING - Staging environment. */
  STAGING = 2,
  /** TEST - Test environment. */
  TEST = 3,
  /** DEVELOPMENT - Development environment. */
  DEVELOPMENT = 4,
  UNRECOGNIZED = -1,
}

export function environment_TypeFromJSON(object: any): Environment_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Environment_Type.TYPE_UNSPECIFIED;
    case 1:
    case "PRODUCTION":
      return Environment_Type.PRODUCTION;
    case 2:
    case "STAGING":
      return Environment_Type.STAGING;
    case 3:
    case "TEST":
      return Environment_Type.TEST;
    case 4:
    case "DEVELOPMENT":
      return Environment_Type.DEVELOPMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Environment_Type.UNRECOGNIZED;
  }
}

export function environment_TypeToJSON(object: Environment_Type): string {
  switch (object) {
    case Environment_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Environment_Type.PRODUCTION:
      return "PRODUCTION";
    case Environment_Type.STAGING:
      return "STAGING";
    case Environment_Type.TEST:
      return "TEST";
    case Environment_Type.DEVELOPMENT:
      return "DEVELOPMENT";
    case Environment_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Contact information of stakeholders. */
export interface ContactInfo {
  /**
   * Optional. Contact's name.
   * Can have a maximum length of 63 characters.
   */
  displayName: string;
  /** Required. Email address of the contacts. */
  email: string;
}

function createBaseAttributes(): Attributes {
  return {
    criticality: undefined,
    environment: undefined,
    developerOwners: [],
    operatorOwners: [],
    businessOwners: [],
  };
}

export const Attributes: MessageFns<Attributes> = {
  encode(message: Attributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.criticality !== undefined) {
      Criticality.encode(message.criticality, writer.uint32(10).fork()).join();
    }
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(18).fork()).join();
    }
    for (const v of message.developerOwners) {
      ContactInfo.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.operatorOwners) {
      ContactInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.businessOwners) {
      ContactInfo.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.criticality = Criticality.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.developerOwners.push(ContactInfo.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.operatorOwners.push(ContactInfo.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.businessOwners.push(ContactInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attributes {
    return {
      criticality: isSet(object.criticality) ? Criticality.fromJSON(object.criticality) : undefined,
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
      developerOwners: globalThis.Array.isArray(object?.developerOwners)
        ? object.developerOwners.map((e: any) => ContactInfo.fromJSON(e))
        : [],
      operatorOwners: globalThis.Array.isArray(object?.operatorOwners)
        ? object.operatorOwners.map((e: any) => ContactInfo.fromJSON(e))
        : [],
      businessOwners: globalThis.Array.isArray(object?.businessOwners)
        ? object.businessOwners.map((e: any) => ContactInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Attributes): unknown {
    const obj: any = {};
    if (message.criticality !== undefined) {
      obj.criticality = Criticality.toJSON(message.criticality);
    }
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    if (message.developerOwners?.length) {
      obj.developerOwners = message.developerOwners.map((e) => ContactInfo.toJSON(e));
    }
    if (message.operatorOwners?.length) {
      obj.operatorOwners = message.operatorOwners.map((e) => ContactInfo.toJSON(e));
    }
    if (message.businessOwners?.length) {
      obj.businessOwners = message.businessOwners.map((e) => ContactInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Attributes>): Attributes {
    return Attributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Attributes>): Attributes {
    const message = createBaseAttributes();
    message.criticality = (object.criticality !== undefined && object.criticality !== null)
      ? Criticality.fromPartial(object.criticality)
      : undefined;
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    message.developerOwners = object.developerOwners?.map((e) => ContactInfo.fromPartial(e)) || [];
    message.operatorOwners = object.operatorOwners?.map((e) => ContactInfo.fromPartial(e)) || [];
    message.businessOwners = object.businessOwners?.map((e) => ContactInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCriticality(): Criticality {
  return { type: 0 };
}

export const Criticality: MessageFns<Criticality> = {
  encode(message: Criticality, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Criticality {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriticality();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Criticality {
    return { type: isSet(object.type) ? criticality_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: Criticality): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = criticality_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Criticality>): Criticality {
    return Criticality.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Criticality>): Criticality {
    const message = createBaseCriticality();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseEnvironment(): Environment {
  return { type: 0 };
}

export const Environment: MessageFns<Environment> = {
  encode(message: Environment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment {
    return { type: isSet(object.type) ? environment_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: Environment): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = environment_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Environment>): Environment {
    return Environment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment>): Environment {
    const message = createBaseEnvironment();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseContactInfo(): ContactInfo {
  return { displayName: "", email: "" };
}

export const ContactInfo: MessageFns<ContactInfo> = {
  encode(message: ContactInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContactInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContactInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContactInfo {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: ContactInfo): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create(base?: DeepPartial<ContactInfo>): ContactInfo {
    return ContactInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContactInfo>): ContactInfo {
    const message = createBaseContactInfo();
    message.displayName = object.displayName ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
