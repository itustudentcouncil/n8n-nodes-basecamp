// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apphub/v1/workload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Attributes } from "./attributes.js";

export const protobufPackage = "google.cloud.apphub.v1";

/**
 * Workload is an App Hub data model that contains a discovered workload, which
 * represents a binary deployment (such as managed instance groups (MIGs) and
 * GKE deployments) that performs the smallest logical subset of business
 * functionality.
 */
export interface Workload {
  /**
   * Identifier. The resource name of the Workload. Format:
   * "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
   */
  name: string;
  /**
   * Optional. User-defined name for the Workload.
   * Can have a maximum length of 63 characters.
   */
  displayName: string;
  /**
   * Optional. User-defined description of a Workload.
   * Can have a maximum length of 2048 characters.
   */
  description: string;
  /**
   * Output only. Reference of an underlying compute resource represented by the
   * Workload. These are immutable.
   */
  workloadReference:
    | WorkloadReference
    | undefined;
  /**
   * Output only. Properties of an underlying compute resource represented by
   * the Workload. These are immutable.
   */
  workloadProperties:
    | WorkloadProperties
    | undefined;
  /** Required. Immutable. The resource name of the original discovered workload. */
  discoveredWorkload: string;
  /** Optional. Consumer provided attributes. */
  attributes:
    | Attributes
    | undefined;
  /** Output only. Create time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. A universally unique identifier (UUID) for the `Workload` in
   * the UUID4 format.
   */
  uid: string;
  /** Output only. Workload state. */
  state: Workload_State;
}

/** Workload state. */
export enum Workload_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The Workload is being created. */
  CREATING = 1,
  /** ACTIVE - The Workload is ready. */
  ACTIVE = 2,
  /** DELETING - The Workload is being deleted. */
  DELETING = 3,
  /** DETACHED - The underlying compute resources have been deleted. */
  DETACHED = 4,
  UNRECOGNIZED = -1,
}

export function workload_StateFromJSON(object: any): Workload_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Workload_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Workload_State.CREATING;
    case 2:
    case "ACTIVE":
      return Workload_State.ACTIVE;
    case 3:
    case "DELETING":
      return Workload_State.DELETING;
    case 4:
    case "DETACHED":
      return Workload_State.DETACHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Workload_State.UNRECOGNIZED;
  }
}

export function workload_StateToJSON(object: Workload_State): string {
  switch (object) {
    case Workload_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Workload_State.CREATING:
      return "CREATING";
    case Workload_State.ACTIVE:
      return "ACTIVE";
    case Workload_State.DELETING:
      return "DELETING";
    case Workload_State.DETACHED:
      return "DETACHED";
    case Workload_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reference of an underlying compute resource represented by the Workload. */
export interface WorkloadReference {
  /** Output only. The underlying compute resource uri. */
  uri: string;
}

/** Properties of an underlying compute resource represented by the Workload. */
export interface WorkloadProperties {
  /**
   * Output only. The service project identifier that the underlying cloud
   * resource resides in. Empty for non cloud resources.
   */
  gcpProject: string;
  /**
   * Output only. The location that the underlying compute resource resides in
   * (e.g us-west1).
   */
  location: string;
  /**
   * Output only. The location that the underlying compute resource resides in
   * if it is zonal (e.g us-west1-a).
   */
  zone: string;
}

/**
 * DiscoveredWorkload is a binary deployment (such as managed instance groups
 * (MIGs) and GKE deployments) that performs the smallest logical subset of
 * business functionality. A discovered workload can be registered to an App Hub
 * Workload.
 */
export interface DiscoveredWorkload {
  /**
   * Identifier. The resource name of the discovered workload. Format:
   * "projects/{host-project-id}/locations/{location}/discoveredWorkloads/{uuid}"
   */
  name: string;
  /**
   * Output only. Reference of an underlying compute resource represented by the
   * Workload. These are immutable.
   */
  workloadReference:
    | WorkloadReference
    | undefined;
  /**
   * Output only. Properties of an underlying compute resource represented by
   * the Workload. These are immutable.
   */
  workloadProperties: WorkloadProperties | undefined;
}

function createBaseWorkload(): Workload {
  return {
    name: "",
    displayName: "",
    description: "",
    workloadReference: undefined,
    workloadProperties: undefined,
    discoveredWorkload: "",
    attributes: undefined,
    createTime: undefined,
    updateTime: undefined,
    uid: "",
    state: 0,
  };
}

export const Workload: MessageFns<Workload> = {
  encode(message: Workload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.workloadReference !== undefined) {
      WorkloadReference.encode(message.workloadReference, writer.uint32(34).fork()).join();
    }
    if (message.workloadProperties !== undefined) {
      WorkloadProperties.encode(message.workloadProperties, writer.uint32(42).fork()).join();
    }
    if (message.discoveredWorkload !== "") {
      writer.uint32(50).string(message.discoveredWorkload);
    }
    if (message.attributes !== undefined) {
      Attributes.encode(message.attributes, writer.uint32(58).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    if (message.uid !== "") {
      writer.uint32(82).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.workloadReference = WorkloadReference.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.workloadProperties = WorkloadProperties.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.discoveredWorkload = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.attributes = Attributes.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workload {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      workloadReference: isSet(object.workloadReference)
        ? WorkloadReference.fromJSON(object.workloadReference)
        : undefined,
      workloadProperties: isSet(object.workloadProperties)
        ? WorkloadProperties.fromJSON(object.workloadProperties)
        : undefined,
      discoveredWorkload: isSet(object.discoveredWorkload) ? globalThis.String(object.discoveredWorkload) : "",
      attributes: isSet(object.attributes) ? Attributes.fromJSON(object.attributes) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? workload_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Workload): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.workloadReference !== undefined) {
      obj.workloadReference = WorkloadReference.toJSON(message.workloadReference);
    }
    if (message.workloadProperties !== undefined) {
      obj.workloadProperties = WorkloadProperties.toJSON(message.workloadProperties);
    }
    if (message.discoveredWorkload !== "") {
      obj.discoveredWorkload = message.discoveredWorkload;
    }
    if (message.attributes !== undefined) {
      obj.attributes = Attributes.toJSON(message.attributes);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = workload_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Workload>): Workload {
    return Workload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Workload>): Workload {
    const message = createBaseWorkload();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.workloadReference = (object.workloadReference !== undefined && object.workloadReference !== null)
      ? WorkloadReference.fromPartial(object.workloadReference)
      : undefined;
    message.workloadProperties = (object.workloadProperties !== undefined && object.workloadProperties !== null)
      ? WorkloadProperties.fromPartial(object.workloadProperties)
      : undefined;
    message.discoveredWorkload = object.discoveredWorkload ?? "";
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? Attributes.fromPartial(object.attributes)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseWorkloadReference(): WorkloadReference {
  return { uri: "" };
}

export const WorkloadReference: MessageFns<WorkloadReference> = {
  encode(message: WorkloadReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadReference {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: WorkloadReference): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadReference>): WorkloadReference {
    return WorkloadReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadReference>): WorkloadReference {
    const message = createBaseWorkloadReference();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseWorkloadProperties(): WorkloadProperties {
  return { gcpProject: "", location: "", zone: "" };
}

export const WorkloadProperties: MessageFns<WorkloadProperties> = {
  encode(message: WorkloadProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcpProject !== "") {
      writer.uint32(10).string(message.gcpProject);
    }
    if (message.location !== "") {
      writer.uint32(18).string(message.location);
    }
    if (message.zone !== "") {
      writer.uint32(26).string(message.zone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcpProject = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.zone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadProperties {
    return {
      gcpProject: isSet(object.gcpProject) ? globalThis.String(object.gcpProject) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
    };
  },

  toJSON(message: WorkloadProperties): unknown {
    const obj: any = {};
    if (message.gcpProject !== "") {
      obj.gcpProject = message.gcpProject;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadProperties>): WorkloadProperties {
    return WorkloadProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadProperties>): WorkloadProperties {
    const message = createBaseWorkloadProperties();
    message.gcpProject = object.gcpProject ?? "";
    message.location = object.location ?? "";
    message.zone = object.zone ?? "";
    return message;
  },
};

function createBaseDiscoveredWorkload(): DiscoveredWorkload {
  return { name: "", workloadReference: undefined, workloadProperties: undefined };
}

export const DiscoveredWorkload: MessageFns<DiscoveredWorkload> = {
  encode(message: DiscoveredWorkload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.workloadReference !== undefined) {
      WorkloadReference.encode(message.workloadReference, writer.uint32(18).fork()).join();
    }
    if (message.workloadProperties !== undefined) {
      WorkloadProperties.encode(message.workloadProperties, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveredWorkload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveredWorkload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workloadReference = WorkloadReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.workloadProperties = WorkloadProperties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveredWorkload {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      workloadReference: isSet(object.workloadReference)
        ? WorkloadReference.fromJSON(object.workloadReference)
        : undefined,
      workloadProperties: isSet(object.workloadProperties)
        ? WorkloadProperties.fromJSON(object.workloadProperties)
        : undefined,
    };
  },

  toJSON(message: DiscoveredWorkload): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.workloadReference !== undefined) {
      obj.workloadReference = WorkloadReference.toJSON(message.workloadReference);
    }
    if (message.workloadProperties !== undefined) {
      obj.workloadProperties = WorkloadProperties.toJSON(message.workloadProperties);
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoveredWorkload>): DiscoveredWorkload {
    return DiscoveredWorkload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoveredWorkload>): DiscoveredWorkload {
    const message = createBaseDiscoveredWorkload();
    message.name = object.name ?? "";
    message.workloadReference = (object.workloadReference !== undefined && object.workloadReference !== null)
      ? WorkloadReference.fromPartial(object.workloadReference)
      : undefined;
    message.workloadProperties = (object.workloadProperties !== undefined && object.workloadProperties !== null)
      ? WorkloadProperties.fromPartial(object.workloadProperties)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
