// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkebackup/logging/v1/logged_backup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.gkebackup.logging.v1";

/**
 * Backup as stored in Platform log. It's used to log the details of
 * a createBackup/updateBackup request, so only fields that can be taken
 * from API calls are included here.
 */
export interface LoggedBackup {
  /** A set of custom labels supplied by user. */
  labels: { [key: string]: string };
  /**
   * delete_lock_days specifies the number of days from the create_time of this
   * Backup before which deletion will be blocked.
   */
  deleteLockDays: number;
  /**
   * retain_days specifies the desired number of days from the create_time of
   * this Backup after which it will be automatically deleted.
   */
  retainDays: number;
  /** User specified descriptive string for this Backup. */
  description: string;
  /** Current state of the Backup */
  state: LoggedBackup_State;
  /** Human-readable description of why the backup is in the current `state`. */
  stateReason: string;
}

/** State */
export enum LoggedBackup_State {
  /** STATE_UNSPECIFIED - The Backup resource is in the process of being created. */
  STATE_UNSPECIFIED = 0,
  /**
   * CREATING - The Backup resource has been created and the associated BackupJob
   * Kubernetes resource has been injected into the source cluster.
   */
  CREATING = 1,
  /**
   * IN_PROGRESS - The gkebackup agent in the cluster has begun executing the backup
   * operation.
   */
  IN_PROGRESS = 2,
  /** SUCCEEDED - The backup operation has completed successfully. */
  SUCCEEDED = 3,
  /** FAILED - The backup operation has failed. */
  FAILED = 4,
  /**
   * DELETING - This Backup resource (and its associated artifacts) is in the process
   * of being deleted.
   */
  DELETING = 5,
  UNRECOGNIZED = -1,
}

export function loggedBackup_StateFromJSON(object: any): LoggedBackup_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return LoggedBackup_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return LoggedBackup_State.CREATING;
    case 2:
    case "IN_PROGRESS":
      return LoggedBackup_State.IN_PROGRESS;
    case 3:
    case "SUCCEEDED":
      return LoggedBackup_State.SUCCEEDED;
    case 4:
    case "FAILED":
      return LoggedBackup_State.FAILED;
    case 5:
    case "DELETING":
      return LoggedBackup_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LoggedBackup_State.UNRECOGNIZED;
  }
}

export function loggedBackup_StateToJSON(object: LoggedBackup_State): string {
  switch (object) {
    case LoggedBackup_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case LoggedBackup_State.CREATING:
      return "CREATING";
    case LoggedBackup_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case LoggedBackup_State.SUCCEEDED:
      return "SUCCEEDED";
    case LoggedBackup_State.FAILED:
      return "FAILED";
    case LoggedBackup_State.DELETING:
      return "DELETING";
    case LoggedBackup_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LoggedBackup_LabelsEntry {
  key: string;
  value: string;
}

function createBaseLoggedBackup(): LoggedBackup {
  return { labels: {}, deleteLockDays: 0, retainDays: 0, description: "", state: 0, stateReason: "" };
}

export const LoggedBackup: MessageFns<LoggedBackup> = {
  encode(message: LoggedBackup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.labels).forEach(([key, value]) => {
      LoggedBackup_LabelsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.deleteLockDays !== 0) {
      writer.uint32(16).int32(message.deleteLockDays);
    }
    if (message.retainDays !== 0) {
      writer.uint32(24).int32(message.retainDays);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.stateReason !== "") {
      writer.uint32(50).string(message.stateReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = LoggedBackup_LabelsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.labels[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.deleteLockDays = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.retainDays = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.stateReason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackup {
    return {
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      deleteLockDays: isSet(object.deleteLockDays) ? globalThis.Number(object.deleteLockDays) : 0,
      retainDays: isSet(object.retainDays) ? globalThis.Number(object.retainDays) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? loggedBackup_StateFromJSON(object.state) : 0,
      stateReason: isSet(object.stateReason) ? globalThis.String(object.stateReason) : "",
    };
  },

  toJSON(message: LoggedBackup): unknown {
    const obj: any = {};
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.deleteLockDays !== 0) {
      obj.deleteLockDays = Math.round(message.deleteLockDays);
    }
    if (message.retainDays !== 0) {
      obj.retainDays = Math.round(message.retainDays);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = loggedBackup_StateToJSON(message.state);
    }
    if (message.stateReason !== "") {
      obj.stateReason = message.stateReason;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackup>): LoggedBackup {
    return LoggedBackup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackup>): LoggedBackup {
    const message = createBaseLoggedBackup();
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.deleteLockDays = object.deleteLockDays ?? 0;
    message.retainDays = object.retainDays ?? 0;
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.stateReason = object.stateReason ?? "";
    return message;
  },
};

function createBaseLoggedBackup_LabelsEntry(): LoggedBackup_LabelsEntry {
  return { key: "", value: "" };
}

export const LoggedBackup_LabelsEntry: MessageFns<LoggedBackup_LabelsEntry> = {
  encode(message: LoggedBackup_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackup_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackup_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackup_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LoggedBackup_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackup_LabelsEntry>): LoggedBackup_LabelsEntry {
    return LoggedBackup_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackup_LabelsEntry>): LoggedBackup_LabelsEntry {
    const message = createBaseLoggedBackup_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
