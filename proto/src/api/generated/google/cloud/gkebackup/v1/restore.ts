// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkebackup/v1/restore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  NamespacedNames,
  Namespaces,
  VolumeTypeEnum_VolumeType,
  volumeTypeEnum_VolumeTypeFromJSON,
  volumeTypeEnum_VolumeTypeToJSON,
} from "./common.js";

export const protobufPackage = "google.cloud.gkebackup.v1";

/**
 * Represents both a request to Restore some portion of a Backup into
 * a target GKE cluster and a record of the restore operation itself.
 */
export interface Restore {
  /**
   * Output only. The full name of the Restore resource.
   * Format: `projects/* /locations/* /restorePlans/* /restores/*`
   */
  name: string;
  /**
   * Output only. Server generated global unique identifier of
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
   */
  uid: string;
  /** Output only. The timestamp when this Restore resource was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The timestamp when this Restore resource was last
   * updated.
   */
  updateTime:
    | Date
    | undefined;
  /** User specified descriptive string for this Restore. */
  description: string;
  /**
   * Required. Immutable. A reference to the
   * [Backup][google.cloud.gkebackup.v1.Backup] used as the source from which
   * this Restore will restore. Note that this Backup must be a sub-resource of
   * the RestorePlan's
   * [backup_plan][google.cloud.gkebackup.v1.RestorePlan.backup_plan]. Format:
   * `projects/* /locations/* /backupPlans/* /backups/*`.
   */
  backup: string;
  /**
   * Output only. The target cluster into which this Restore will restore data.
   * Valid formats:
   *
   *   - `projects/* /locations/* /clusters/*`
   *   - `projects/* /zones/* /clusters/*`
   *
   * Inherited from parent RestorePlan's
   * [cluster][google.cloud.gkebackup.v1.RestorePlan.cluster] value.
   */
  cluster: string;
  /**
   * Output only. Configuration of the Restore.  Inherited from parent
   * RestorePlan's
   * [restore_config][google.cloud.gkebackup.v1.RestorePlan.restore_config].
   */
  restoreConfig:
    | RestoreConfig
    | undefined;
  /** A set of custom labels supplied by user. */
  labels: { [key: string]: string };
  /** Output only. The current state of the Restore. */
  state: Restore_State;
  /**
   * Output only. Human-readable description of why the Restore is in its
   * current state.
   */
  stateReason: string;
  /** Output only. Timestamp of when the restore operation completed. */
  completeTime:
    | Date
    | undefined;
  /** Output only. Number of resources restored during the restore execution. */
  resourcesRestoredCount: number;
  /** Output only. Number of resources excluded during the restore execution. */
  resourcesExcludedCount: number;
  /**
   * Output only. Number of resources that failed to be restored during the
   * restore execution.
   */
  resourcesFailedCount: number;
  /** Output only. Number of volumes restored during the restore execution. */
  volumesRestoredCount: number;
  /**
   * Output only. `etag` is used for optimistic concurrency control as a way to
   * help prevent simultaneous updates of a restore from overwriting each other.
   * It is strongly suggested that systems make use of the `etag` in the
   * read-modify-write cycle to perform restore updates in order to avoid
   * race conditions: An `etag` is returned in the response to `GetRestore`,
   * and systems are expected to put that etag in the request to
   * `UpdateRestore` or `DeleteRestore` to ensure that their change will be
   * applied to the same version of the resource.
   */
  etag: string;
  /**
   * Optional. Immutable. Filters resources for `Restore`. If not specified, the
   * scope of the restore will remain the same as defined in the `RestorePlan`.
   * If this is specified, and no resources are matched by the
   * `inclusion_filters` or everyting is excluded by the `exclusion_filters`,
   * nothing will be restored. This filter can only be specified if the value of
   * [namespaced_resource_restore_mode][google.cloud.gkebackup.v1.RestoreConfig.namespaced_resource_restore_mode]
   * is set to `MERGE_SKIP_ON_CONFLICT`, `MERGE_REPLACE_VOLUME_ON_CONFLICT` or
   * `MERGE_REPLACE_ON_CONFLICT`.
   */
  filter:
    | Restore_Filter
    | undefined;
  /**
   * Optional. Immutable. Overrides the volume data restore policies selected in
   * the Restore Config for override-scoped resources.
   */
  volumeDataRestorePolicyOverrides: VolumeDataRestorePolicyOverride[];
}

/** Possible values for state of the Restore. */
export enum Restore_State {
  /** STATE_UNSPECIFIED - The Restore resource is in the process of being created. */
  STATE_UNSPECIFIED = 0,
  /**
   * CREATING - The Restore resource has been created and the associated RestoreJob
   * Kubernetes resource has been injected into target cluster.
   */
  CREATING = 1,
  /**
   * IN_PROGRESS - The gkebackup agent in the cluster has begun executing the restore
   * operation.
   */
  IN_PROGRESS = 2,
  /**
   * SUCCEEDED - The restore operation has completed successfully. Restored workloads may
   * not yet be operational.
   */
  SUCCEEDED = 3,
  /** FAILED - The restore operation has failed. */
  FAILED = 4,
  /** DELETING - This Restore resource is in the process of being deleted. */
  DELETING = 5,
  UNRECOGNIZED = -1,
}

export function restore_StateFromJSON(object: any): Restore_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Restore_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Restore_State.CREATING;
    case 2:
    case "IN_PROGRESS":
      return Restore_State.IN_PROGRESS;
    case 3:
    case "SUCCEEDED":
      return Restore_State.SUCCEEDED;
    case 4:
    case "FAILED":
      return Restore_State.FAILED;
    case 5:
    case "DELETING":
      return Restore_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Restore_State.UNRECOGNIZED;
  }
}

export function restore_StateToJSON(object: Restore_State): string {
  switch (object) {
    case Restore_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Restore_State.CREATING:
      return "CREATING";
    case Restore_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case Restore_State.SUCCEEDED:
      return "SUCCEEDED";
    case Restore_State.FAILED:
      return "FAILED";
    case Restore_State.DELETING:
      return "DELETING";
    case Restore_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines the filter for `Restore`. This filter can be used to further
 * refine the resource selection of the `Restore` beyond the coarse-grained
 * scope defined in the `RestorePlan`. `exclusion_filters` take precedence
 * over `inclusion_filters`. If a resource matches both `inclusion_filters`
 * and `exclusion_filters`, it will not be restored.
 */
export interface Restore_Filter {
  /**
   * Optional. Selects resources for restoration. If specified, only resources
   * which match `inclusion_filters` will be selected for restoration. A
   * resource will be selected if it matches any `ResourceSelector` of the
   * `inclusion_filters`.
   */
  inclusionFilters: ResourceSelector[];
  /**
   * Optional. Excludes resources from restoration. If specified,
   * a resource will not be restored if it matches
   * any `ResourceSelector` of the `exclusion_filters`.
   */
  exclusionFilters: ResourceSelector[];
}

export interface Restore_LabelsEntry {
  key: string;
  value: string;
}

/** Configuration of a restore. */
export interface RestoreConfig {
  /**
   * Optional. Specifies the mechanism to be used to restore volume data.
   * Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as
   * NO_VOLUME_DATA_RESTORATION).
   */
  volumeDataRestorePolicy: RestoreConfig_VolumeDataRestorePolicy;
  /**
   * Optional. Defines the behavior for handling the situation where
   * cluster-scoped resources being restored already exist in the target
   * cluster. This MUST be set to a value other than
   * CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if
   * [cluster_resource_restore_scope][google.cloud.gkebackup.v1.RestoreConfig.cluster_resource_restore_scope]
   * is not empty.
   */
  clusterResourceConflictPolicy: RestoreConfig_ClusterResourceConflictPolicy;
  /**
   * Optional. Defines the behavior for handling the situation where sets of
   * namespaced resources being restored already exist in the target cluster.
   * This MUST be set to a value other than
   * NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
   */
  namespacedResourceRestoreMode: RestoreConfig_NamespacedResourceRestoreMode;
  /**
   * Optional. Identifies the cluster-scoped resources to restore from the
   * Backup. Not specifying it means NO cluster resource will be restored.
   */
  clusterResourceRestoreScope:
    | RestoreConfig_ClusterResourceRestoreScope
    | undefined;
  /**
   * Restore all namespaced resources in the Backup if set to "True".
   * Specifying this field to "False" is an error.
   */
  allNamespaces?:
    | boolean
    | undefined;
  /**
   * A list of selected Namespaces to restore from the Backup. The listed
   * Namespaces and all resources contained in them will be restored.
   */
  selectedNamespaces?:
    | Namespaces
    | undefined;
  /**
   * A list of selected ProtectedApplications to restore. The listed
   * ProtectedApplications and all the resources to which they refer will be
   * restored.
   */
  selectedApplications?:
    | NamespacedNames
    | undefined;
  /**
   * Do not restore any namespaced resources if set to "True".
   * Specifying this field to "False" is not allowed.
   */
  noNamespaces?:
    | boolean
    | undefined;
  /**
   * A list of selected namespaces excluded from restoration. All
   * namespaces except those in this list will be restored.
   */
  excludedNamespaces?:
    | Namespaces
    | undefined;
  /**
   * Optional. A list of transformation rules to be applied against Kubernetes
   * resources as they are selected for restoration from a Backup. Rules are
   * executed in order defined - this order matters, as changes made by a rule
   * may impact the filtering logic of subsequent rules. An empty list means no
   * substitution will occur.
   */
  substitutionRules: RestoreConfig_SubstitutionRule[];
  /**
   * Optional. A list of transformation rules to be applied against Kubernetes
   * resources as they are selected for restoration from a Backup. Rules are
   * executed in order defined - this order matters, as changes made by a rule
   * may impact the filtering logic of subsequent rules. An empty list means no
   * transformation will occur.
   */
  transformationRules: RestoreConfig_TransformationRule[];
  /**
   * Optional. A table that binds volumes by their scope to a restore policy.
   * Bindings must have a unique scope. Any volumes not scoped in the bindings
   * are subject to the policy defined in volume_data_restore_policy.
   */
  volumeDataRestorePolicyBindings: RestoreConfig_VolumeDataRestorePolicyBinding[];
  /** Optional. RestoreOrder contains custom ordering to use on a Restore. */
  restoreOrder: RestoreConfig_RestoreOrder | undefined;
}

/** Defines how volume data should be restored. */
export enum RestoreConfig_VolumeDataRestorePolicy {
  /** VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED - Unspecified (illegal). */
  VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED = 0,
  /**
   * RESTORE_VOLUME_DATA_FROM_BACKUP - For each PVC to be restored, create a new underlying volume and PV
   * from the corresponding VolumeBackup contained within the Backup.
   */
  RESTORE_VOLUME_DATA_FROM_BACKUP = 1,
  /**
   * REUSE_VOLUME_HANDLE_FROM_BACKUP - For each PVC to be restored, attempt to reuse the original PV contained
   * in the Backup (with its original underlying volume). This option
   * is likely only usable when restoring a workload to its original cluster.
   */
  REUSE_VOLUME_HANDLE_FROM_BACKUP = 2,
  /**
   * NO_VOLUME_DATA_RESTORATION - For each PVC to be restored, create PVC without any particular
   * action to restore data. In this case, the normal Kubernetes provisioning
   * logic would kick in, and this would likely result in either dynamically
   * provisioning blank PVs or binding to statically provisioned PVs.
   */
  NO_VOLUME_DATA_RESTORATION = 3,
  UNRECOGNIZED = -1,
}

export function restoreConfig_VolumeDataRestorePolicyFromJSON(object: any): RestoreConfig_VolumeDataRestorePolicy {
  switch (object) {
    case 0:
    case "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED":
      return RestoreConfig_VolumeDataRestorePolicy.VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED;
    case 1:
    case "RESTORE_VOLUME_DATA_FROM_BACKUP":
      return RestoreConfig_VolumeDataRestorePolicy.RESTORE_VOLUME_DATA_FROM_BACKUP;
    case 2:
    case "REUSE_VOLUME_HANDLE_FROM_BACKUP":
      return RestoreConfig_VolumeDataRestorePolicy.REUSE_VOLUME_HANDLE_FROM_BACKUP;
    case 3:
    case "NO_VOLUME_DATA_RESTORATION":
      return RestoreConfig_VolumeDataRestorePolicy.NO_VOLUME_DATA_RESTORATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestoreConfig_VolumeDataRestorePolicy.UNRECOGNIZED;
  }
}

export function restoreConfig_VolumeDataRestorePolicyToJSON(object: RestoreConfig_VolumeDataRestorePolicy): string {
  switch (object) {
    case RestoreConfig_VolumeDataRestorePolicy.VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED:
      return "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED";
    case RestoreConfig_VolumeDataRestorePolicy.RESTORE_VOLUME_DATA_FROM_BACKUP:
      return "RESTORE_VOLUME_DATA_FROM_BACKUP";
    case RestoreConfig_VolumeDataRestorePolicy.REUSE_VOLUME_HANDLE_FROM_BACKUP:
      return "REUSE_VOLUME_HANDLE_FROM_BACKUP";
    case RestoreConfig_VolumeDataRestorePolicy.NO_VOLUME_DATA_RESTORATION:
      return "NO_VOLUME_DATA_RESTORATION";
    case RestoreConfig_VolumeDataRestorePolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines the behavior for handling the situation where cluster-scoped
 * resources being restored already exist in the target cluster.
 */
export enum RestoreConfig_ClusterResourceConflictPolicy {
  /**
   * CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED - Unspecified. Only allowed if no cluster-scoped resources will be
   * restored.
   */
  CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED = 0,
  /** USE_EXISTING_VERSION - Do not attempt to restore the conflicting resource. */
  USE_EXISTING_VERSION = 1,
  /**
   * USE_BACKUP_VERSION - Delete the existing version before re-creating it from the Backup.
   * This is a dangerous option which could cause unintentional
   * data loss if used inappropriately. For example, deleting a CRD will
   * cause Kubernetes to delete all CRs of that type.
   */
  USE_BACKUP_VERSION = 2,
  UNRECOGNIZED = -1,
}

export function restoreConfig_ClusterResourceConflictPolicyFromJSON(
  object: any,
): RestoreConfig_ClusterResourceConflictPolicy {
  switch (object) {
    case 0:
    case "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED":
      return RestoreConfig_ClusterResourceConflictPolicy.CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED;
    case 1:
    case "USE_EXISTING_VERSION":
      return RestoreConfig_ClusterResourceConflictPolicy.USE_EXISTING_VERSION;
    case 2:
    case "USE_BACKUP_VERSION":
      return RestoreConfig_ClusterResourceConflictPolicy.USE_BACKUP_VERSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestoreConfig_ClusterResourceConflictPolicy.UNRECOGNIZED;
  }
}

export function restoreConfig_ClusterResourceConflictPolicyToJSON(
  object: RestoreConfig_ClusterResourceConflictPolicy,
): string {
  switch (object) {
    case RestoreConfig_ClusterResourceConflictPolicy.CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED:
      return "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED";
    case RestoreConfig_ClusterResourceConflictPolicy.USE_EXISTING_VERSION:
      return "USE_EXISTING_VERSION";
    case RestoreConfig_ClusterResourceConflictPolicy.USE_BACKUP_VERSION:
      return "USE_BACKUP_VERSION";
    case RestoreConfig_ClusterResourceConflictPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines the behavior for handling the situation where sets of namespaced
 * resources being restored already exist in the target cluster.
 */
export enum RestoreConfig_NamespacedResourceRestoreMode {
  /** NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED - Unspecified (invalid). */
  NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED = 0,
  /**
   * DELETE_AND_RESTORE - When conflicting top-level resources (either Namespaces or
   * ProtectedApplications, depending upon the scope) are encountered, this
   * will first trigger a delete of the conflicting resource AND ALL OF ITS
   * REFERENCED RESOURCES (e.g., all resources in the Namespace or all
   * resources referenced by the ProtectedApplication) before restoring the
   * resources from the Backup. This mode should only be used when you are
   * intending to revert some portion of a cluster to an earlier state.
   */
  DELETE_AND_RESTORE = 1,
  /**
   * FAIL_ON_CONFLICT - If conflicting top-level resources (either Namespaces or
   * ProtectedApplications, depending upon the scope) are encountered at the
   * beginning of a restore process, the Restore will fail.  If a conflict
   * occurs during the restore process itself (e.g., because an out of band
   * process creates conflicting resources), a conflict will be reported.
   */
  FAIL_ON_CONFLICT = 2,
  /**
   * MERGE_SKIP_ON_CONFLICT - This mode merges the backup and the target cluster and skips the
   * conflicting resources. If a single resource to restore exists in the
   * cluster before restoration, the resource will be skipped, otherwise it
   * will be restored.
   */
  MERGE_SKIP_ON_CONFLICT = 3,
  /**
   * MERGE_REPLACE_VOLUME_ON_CONFLICT - This mode merges the backup and the target cluster and skips the
   * conflicting resources except volume data. If a PVC to restore already
   * exists, this mode will restore/reconnect the volume without overwriting
   * the PVC. It is similar to MERGE_SKIP_ON_CONFLICT except that it will
   * apply the volume data policy for the conflicting PVCs:
   * - RESTORE_VOLUME_DATA_FROM_BACKUP: restore data only and respect the
   *   reclaim policy of the original PV;
   * - REUSE_VOLUME_HANDLE_FROM_BACKUP: reconnect and respect the reclaim
   *   policy of the original PV;
   * - NO_VOLUME_DATA_RESTORATION: new provision and respect the reclaim
   *   policy of the original PV.
   * Note that this mode could cause data loss as the original PV can be
   * retained or deleted depending on its reclaim policy.
   */
  MERGE_REPLACE_VOLUME_ON_CONFLICT = 4,
  /**
   * MERGE_REPLACE_ON_CONFLICT - This mode merges the backup and the target cluster and replaces the
   * conflicting resources with the ones in the backup. If a single resource
   * to restore exists in the cluster before restoration, the resource will be
   * replaced with the one from the backup. To replace an existing resource,
   * the first attempt is to update the resource to match the one from the
   * backup; if the update fails, the second attempt is to delete the resource
   * and restore it from the backup.
   * Note that this mode could cause data loss as it replaces the existing
   * resources in the target cluster, and the original PV can be retained or
   * deleted depending on its reclaim policy.
   */
  MERGE_REPLACE_ON_CONFLICT = 5,
  UNRECOGNIZED = -1,
}

export function restoreConfig_NamespacedResourceRestoreModeFromJSON(
  object: any,
): RestoreConfig_NamespacedResourceRestoreMode {
  switch (object) {
    case 0:
    case "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED":
      return RestoreConfig_NamespacedResourceRestoreMode.NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED;
    case 1:
    case "DELETE_AND_RESTORE":
      return RestoreConfig_NamespacedResourceRestoreMode.DELETE_AND_RESTORE;
    case 2:
    case "FAIL_ON_CONFLICT":
      return RestoreConfig_NamespacedResourceRestoreMode.FAIL_ON_CONFLICT;
    case 3:
    case "MERGE_SKIP_ON_CONFLICT":
      return RestoreConfig_NamespacedResourceRestoreMode.MERGE_SKIP_ON_CONFLICT;
    case 4:
    case "MERGE_REPLACE_VOLUME_ON_CONFLICT":
      return RestoreConfig_NamespacedResourceRestoreMode.MERGE_REPLACE_VOLUME_ON_CONFLICT;
    case 5:
    case "MERGE_REPLACE_ON_CONFLICT":
      return RestoreConfig_NamespacedResourceRestoreMode.MERGE_REPLACE_ON_CONFLICT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestoreConfig_NamespacedResourceRestoreMode.UNRECOGNIZED;
  }
}

export function restoreConfig_NamespacedResourceRestoreModeToJSON(
  object: RestoreConfig_NamespacedResourceRestoreMode,
): string {
  switch (object) {
    case RestoreConfig_NamespacedResourceRestoreMode.NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED:
      return "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED";
    case RestoreConfig_NamespacedResourceRestoreMode.DELETE_AND_RESTORE:
      return "DELETE_AND_RESTORE";
    case RestoreConfig_NamespacedResourceRestoreMode.FAIL_ON_CONFLICT:
      return "FAIL_ON_CONFLICT";
    case RestoreConfig_NamespacedResourceRestoreMode.MERGE_SKIP_ON_CONFLICT:
      return "MERGE_SKIP_ON_CONFLICT";
    case RestoreConfig_NamespacedResourceRestoreMode.MERGE_REPLACE_VOLUME_ON_CONFLICT:
      return "MERGE_REPLACE_VOLUME_ON_CONFLICT";
    case RestoreConfig_NamespacedResourceRestoreMode.MERGE_REPLACE_ON_CONFLICT:
      return "MERGE_REPLACE_ON_CONFLICT";
    case RestoreConfig_NamespacedResourceRestoreMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This is a direct map to the Kubernetes GroupKind type
 * [GroupKind](https://godoc.org/k8s.io/apimachinery/pkg/runtime/schema#GroupKind)
 * and is used for identifying specific "types" of resources to restore.
 */
export interface RestoreConfig_GroupKind {
  /**
   * Optional. API group string of a Kubernetes resource, e.g.
   * "apiextensions.k8s.io", "storage.k8s.io", etc.
   * Note: use empty string for core API group
   */
  resourceGroup: string;
  /**
   * Optional. Kind of a Kubernetes resource, must be in UpperCamelCase
   * (PascalCase) and singular form. E.g. "CustomResourceDefinition",
   * "StorageClass", etc.
   */
  resourceKind: string;
}

/**
 * Defines the scope of cluster-scoped resources to restore.
 *
 * Some group kinds are not reasonable choices for a restore, and will cause
 * an error if selected here. Any scope selection that would restore
 * "all valid" resources automatically excludes these group kinds.
 * - gkebackup.gke.io/BackupJob
 * - gkebackup.gke.io/RestoreJob
 * - metrics.k8s.io/NodeMetrics
 * - migration.k8s.io/StorageState
 * - migration.k8s.io/StorageVersionMigration
 * - Node
 * - snapshot.storage.k8s.io/VolumeSnapshotContent
 * - storage.k8s.io/CSINode
 *
 * Some group kinds are driven by restore configuration elsewhere,
 * and will cause an error if selected here.
 * - Namespace
 * - PersistentVolume
 */
export interface RestoreConfig_ClusterResourceRestoreScope {
  /**
   * Optional. A list of cluster-scoped resource group kinds to restore from
   * the backup. If specified, only the selected resources will be restored.
   * Mutually exclusive to any other field in the message.
   */
  selectedGroupKinds: RestoreConfig_GroupKind[];
  /**
   * Optional. A list of cluster-scoped resource group kinds to NOT restore
   * from the backup. If specified, all valid cluster-scoped resources will be
   * restored except for those specified in the list.
   * Mutually exclusive to any other field in the message.
   */
  excludedGroupKinds: RestoreConfig_GroupKind[];
  /**
   * Optional. If True, all valid cluster-scoped resources will be restored.
   * Mutually exclusive to any other field in the message.
   */
  allGroupKinds: boolean;
  /**
   * Optional. If True, no cluster-scoped resources will be restored.
   * This has the same restore scope as if the message is not defined.
   * Mutually exclusive to any other field in the message.
   */
  noGroupKinds: boolean;
}

/**
 * A transformation rule to be applied against Kubernetes resources as they
 * are selected for restoration from a Backup. A rule contains both filtering
 * logic (which resources are subject to substitution) and substitution logic.
 */
export interface RestoreConfig_SubstitutionRule {
  /**
   * Optional. (Filtering parameter) Any resource subject to substitution must
   * be contained within one of the listed Kubernetes Namespace in the Backup.
   * If this field is not provided, no namespace filtering will be performed
   * (all resources in all Namespaces, including all cluster-scoped resources,
   * will be candidates for substitution).
   * To mix cluster-scoped and namespaced resources in the same rule, use an
   * empty string ("") as one of the target namespaces.
   */
  targetNamespaces: string[];
  /**
   * Optional. (Filtering parameter) Any resource subject to substitution must
   * belong to one of the listed "types". If this field is not provided, no
   * type filtering will be performed (all resources of all types matching
   * previous filtering parameters will be candidates for substitution).
   */
  targetGroupKinds: RestoreConfig_GroupKind[];
  /**
   * Required. This is a [JSONPath]
   * (https://kubernetes.io/docs/reference/kubectl/jsonpath/)
   * expression that matches specific fields of candidate
   * resources and it operates as both a filtering parameter (resources that
   * are not matched with this expression will not be candidates for
   * substitution) as well as a field identifier (identifies exactly which
   * fields out of the candidate resources will be modified).
   */
  targetJsonPath: string;
  /**
   * Optional. (Filtering parameter) This is a [regular expression]
   * (https://en.wikipedia.org/wiki/Regular_expression)
   * that is compared against the fields matched by the target_json_path
   * expression (and must also have passed the previous filters).
   * Substitution will not be performed against fields whose
   * value does not match this expression. If this field is NOT specified,
   * then ALL fields matched by the target_json_path expression will undergo
   * substitution. Note that an empty (e.g., "", rather than unspecified)
   * value for this field will only match empty fields.
   */
  originalValuePattern: string;
  /**
   * Optional. This is the new value to set for any fields that pass the
   * filtering and selection criteria. To remove a value from a Kubernetes
   * resource, either leave this field unspecified, or set it to the empty
   * string ("").
   */
  newValue: string;
}

/**
 * TransformationRuleAction defines a TransformationRule action based on the
 * JSON Patch RFC (https://www.rfc-editor.org/rfc/rfc6902)
 */
export interface RestoreConfig_TransformationRuleAction {
  /** Required. op specifies the operation to perform. */
  op: RestoreConfig_TransformationRuleAction_Op;
  /**
   * Optional. A string containing a JSON Pointer value that references the
   * location in the target document to move the value from.
   */
  fromPath: string;
  /**
   * Optional. A string containing a JSON-Pointer value that references a
   * location within the target document where the operation is performed.
   */
  path: string;
  /**
   * Optional. A string that specifies the desired value in string format to
   * use for transformation.
   */
  value: string;
}

/** Possible values for operations of a transformation rule action. */
export enum RestoreConfig_TransformationRuleAction_Op {
  /** OP_UNSPECIFIED - Unspecified operation */
  OP_UNSPECIFIED = 0,
  /** REMOVE - The "remove" operation removes the value at the target location. */
  REMOVE = 1,
  /**
   * MOVE - The "move" operation removes the value at a specified location and
   * adds it to the target location.
   */
  MOVE = 2,
  /**
   * COPY - The "copy" operation copies the value at a specified location to the
   * target location.
   */
  COPY = 3,
  /**
   * ADD - The "add" operation performs one of the following functions,
   * depending upon what the target location references:
   * 1. If the target location specifies an array index, a new value is
   * inserted into the array at the specified index.
   * 2. If the target location specifies an object member that does not
   * already exist, a new member is added to the object.
   * 3. If the target location specifies an object member that does exist,
   * that member's value is replaced.
   */
  ADD = 4,
  /**
   * TEST - The "test" operation tests that a value at the target location is
   * equal to a specified value.
   */
  TEST = 5,
  /**
   * REPLACE - The "replace" operation replaces the value at the target location
   * with a new value.  The operation object MUST contain a "value" member
   * whose content specifies the replacement value.
   */
  REPLACE = 6,
  UNRECOGNIZED = -1,
}

export function restoreConfig_TransformationRuleAction_OpFromJSON(
  object: any,
): RestoreConfig_TransformationRuleAction_Op {
  switch (object) {
    case 0:
    case "OP_UNSPECIFIED":
      return RestoreConfig_TransformationRuleAction_Op.OP_UNSPECIFIED;
    case 1:
    case "REMOVE":
      return RestoreConfig_TransformationRuleAction_Op.REMOVE;
    case 2:
    case "MOVE":
      return RestoreConfig_TransformationRuleAction_Op.MOVE;
    case 3:
    case "COPY":
      return RestoreConfig_TransformationRuleAction_Op.COPY;
    case 4:
    case "ADD":
      return RestoreConfig_TransformationRuleAction_Op.ADD;
    case 5:
    case "TEST":
      return RestoreConfig_TransformationRuleAction_Op.TEST;
    case 6:
    case "REPLACE":
      return RestoreConfig_TransformationRuleAction_Op.REPLACE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestoreConfig_TransformationRuleAction_Op.UNRECOGNIZED;
  }
}

export function restoreConfig_TransformationRuleAction_OpToJSON(
  object: RestoreConfig_TransformationRuleAction_Op,
): string {
  switch (object) {
    case RestoreConfig_TransformationRuleAction_Op.OP_UNSPECIFIED:
      return "OP_UNSPECIFIED";
    case RestoreConfig_TransformationRuleAction_Op.REMOVE:
      return "REMOVE";
    case RestoreConfig_TransformationRuleAction_Op.MOVE:
      return "MOVE";
    case RestoreConfig_TransformationRuleAction_Op.COPY:
      return "COPY";
    case RestoreConfig_TransformationRuleAction_Op.ADD:
      return "ADD";
    case RestoreConfig_TransformationRuleAction_Op.TEST:
      return "TEST";
    case RestoreConfig_TransformationRuleAction_Op.REPLACE:
      return "REPLACE";
    case RestoreConfig_TransformationRuleAction_Op.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * ResourceFilter specifies matching criteria to limit the scope of a
 * change to a specific set of kubernetes resources that are selected for
 * restoration from a backup.
 */
export interface RestoreConfig_ResourceFilter {
  /**
   * Optional. (Filtering parameter) Any resource subject to transformation
   * must be contained within one of the listed Kubernetes Namespace in the
   * Backup. If this field is not provided, no namespace filtering will be
   * performed (all resources in all Namespaces, including all cluster-scoped
   * resources, will be candidates for transformation).
   */
  namespaces: string[];
  /**
   * Optional. (Filtering parameter) Any resource subject to transformation
   * must belong to one of the listed "types". If this field is not provided,
   * no type filtering will be performed (all resources of all types matching
   * previous filtering parameters will be candidates for transformation).
   */
  groupKinds: RestoreConfig_GroupKind[];
  /**
   * Optional. This is a [JSONPath]
   * (https://github.com/json-path/JsonPath/blob/master/README.md)
   * expression that matches specific fields of candidate
   * resources and it operates as a filtering parameter (resources that
   * are not matched with this expression will not be candidates for
   * transformation).
   */
  jsonPath: string;
}

/**
 * A transformation rule to be applied against Kubernetes resources as they
 * are selected for restoration from a Backup. A rule contains both filtering
 * logic (which resources are subject to transform) and transformation logic.
 */
export interface RestoreConfig_TransformationRule {
  /**
   * Required. A list of transformation rule actions to take against candidate
   * resources. Actions are executed in order defined - this order matters, as
   * they could potentially interfere with each other and the first operation
   * could affect the outcome of the second operation.
   */
  fieldActions: RestoreConfig_TransformationRuleAction[];
  /**
   * Optional. This field is used to specify a set of fields that should be
   * used to determine which resources in backup should be acted upon by the
   * supplied transformation rule actions, and this will ensure that only
   * specific resources are affected by transformation rule actions.
   */
  resourceFilter:
    | RestoreConfig_ResourceFilter
    | undefined;
  /**
   * Optional. The description is a user specified string description of the
   * transformation rule.
   */
  description: string;
}

/** Binds resources in the scope to the given VolumeDataRestorePolicy. */
export interface RestoreConfig_VolumeDataRestorePolicyBinding {
  /**
   * Required. The VolumeDataRestorePolicy to apply when restoring volumes in
   * scope.
   */
  policy: RestoreConfig_VolumeDataRestorePolicy;
  /**
   * The volume type, as determined by the PVC's bound PV,
   * to apply the policy to.
   */
  volumeType?: VolumeTypeEnum_VolumeType | undefined;
}

/**
 * Allows customers to specify dependencies between resources
 * that Backup for GKE can use to compute a resasonable restore order.
 */
export interface RestoreConfig_RestoreOrder {
  /**
   * Optional. Contains a list of group kind dependency pairs provided
   * by the customer, that is used by Backup for GKE to
   * generate a group kind restore order.
   */
  groupKindDependencies: RestoreConfig_RestoreOrder_GroupKindDependency[];
}

/** Defines a dependency between two group kinds. */
export interface RestoreConfig_RestoreOrder_GroupKindDependency {
  /**
   * Required. The satisfying group kind must be restored first
   * in order to satisfy the dependency.
   */
  satisfying:
    | RestoreConfig_GroupKind
    | undefined;
  /**
   * Required. The requiring group kind requires that the other
   * group kind be restored first.
   */
  requiring: RestoreConfig_GroupKind | undefined;
}

/**
 * Defines a selector to identify a single or a group of resources.
 * Conditions in the selector are optional, but at least one field
 * should be set to a non-empty value. If a condition is not specified,
 * no restrictions will be applied on that dimension.
 * If more than one condition is specified, a resource will be selected
 * if and only if all conditions are met.
 */
export interface ResourceSelector {
  /**
   * Optional. Selects resources using their Kubernetes GroupKinds. If
   * specified, only resources of provided GroupKind will be selected.
   */
  groupKind:
    | RestoreConfig_GroupKind
    | undefined;
  /**
   * Optional. Selects resources using their resource names. If specified,
   * only resources with the provided name will be selected.
   */
  name: string;
  /**
   * Optional. Selects resources using their namespaces. This only applies to
   * namespace scoped resources and cannot be used for selecting
   * cluster scoped resources. If specified, only resources in the provided
   * namespace will be selected. If not specified, the filter will apply to
   * both cluster scoped and namespace scoped resources (e.g. name or label).
   * The [Namespace](https://pkg.go.dev/k8s.io/api/core/v1#Namespace) resource
   * itself will be restored if and only if any resources within the namespace
   * are restored.
   */
  namespace: string;
  /**
   * Optional. Selects resources using Kubernetes
   * [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
   * If specified, a resource will be selected if and only if the resource
   * has all of the provided labels and all the label values match.
   */
  labels: { [key: string]: string };
}

export interface ResourceSelector_LabelsEntry {
  key: string;
  value: string;
}

/** Defines an override to apply a VolumeDataRestorePolicy for scoped resources. */
export interface VolumeDataRestorePolicyOverride {
  /**
   * Required. The VolumeDataRestorePolicy to apply when restoring volumes in
   * scope.
   */
  policy: RestoreConfig_VolumeDataRestorePolicy;
  /** A list of PVCs to apply the policy override to. */
  selectedPvcs?: NamespacedNames | undefined;
}

function createBaseRestore(): Restore {
  return {
    name: "",
    uid: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    backup: "",
    cluster: "",
    restoreConfig: undefined,
    labels: {},
    state: 0,
    stateReason: "",
    completeTime: undefined,
    resourcesRestoredCount: 0,
    resourcesExcludedCount: 0,
    resourcesFailedCount: 0,
    volumesRestoredCount: 0,
    etag: "",
    filter: undefined,
    volumeDataRestorePolicyOverrides: [],
  };
}

export const Restore: MessageFns<Restore> = {
  encode(message: Restore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.backup !== "") {
      writer.uint32(50).string(message.backup);
    }
    if (message.cluster !== "") {
      writer.uint32(58).string(message.cluster);
    }
    if (message.restoreConfig !== undefined) {
      RestoreConfig.encode(message.restoreConfig, writer.uint32(66).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Restore_LabelsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.stateReason !== "") {
      writer.uint32(90).string(message.stateReason);
    }
    if (message.completeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completeTime), writer.uint32(98).fork()).join();
    }
    if (message.resourcesRestoredCount !== 0) {
      writer.uint32(104).int32(message.resourcesRestoredCount);
    }
    if (message.resourcesExcludedCount !== 0) {
      writer.uint32(112).int32(message.resourcesExcludedCount);
    }
    if (message.resourcesFailedCount !== 0) {
      writer.uint32(120).int32(message.resourcesFailedCount);
    }
    if (message.volumesRestoredCount !== 0) {
      writer.uint32(128).int32(message.volumesRestoredCount);
    }
    if (message.etag !== "") {
      writer.uint32(138).string(message.etag);
    }
    if (message.filter !== undefined) {
      Restore_Filter.encode(message.filter, writer.uint32(146).fork()).join();
    }
    for (const v of message.volumeDataRestorePolicyOverrides) {
      VolumeDataRestorePolicyOverride.encode(v!, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Restore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.backup = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.cluster = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.restoreConfig = RestoreConfig.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = Restore_LabelsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.labels[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.stateReason = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.completeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.resourcesRestoredCount = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.resourcesExcludedCount = reader.int32();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.resourcesFailedCount = reader.int32();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.volumesRestoredCount = reader.int32();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.filter = Restore_Filter.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.volumeDataRestorePolicyOverrides.push(
            VolumeDataRestorePolicyOverride.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Restore {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      backup: isSet(object.backup) ? globalThis.String(object.backup) : "",
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : "",
      restoreConfig: isSet(object.restoreConfig) ? RestoreConfig.fromJSON(object.restoreConfig) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? restore_StateFromJSON(object.state) : 0,
      stateReason: isSet(object.stateReason) ? globalThis.String(object.stateReason) : "",
      completeTime: isSet(object.completeTime) ? fromJsonTimestamp(object.completeTime) : undefined,
      resourcesRestoredCount: isSet(object.resourcesRestoredCount)
        ? globalThis.Number(object.resourcesRestoredCount)
        : 0,
      resourcesExcludedCount: isSet(object.resourcesExcludedCount)
        ? globalThis.Number(object.resourcesExcludedCount)
        : 0,
      resourcesFailedCount: isSet(object.resourcesFailedCount) ? globalThis.Number(object.resourcesFailedCount) : 0,
      volumesRestoredCount: isSet(object.volumesRestoredCount) ? globalThis.Number(object.volumesRestoredCount) : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      filter: isSet(object.filter) ? Restore_Filter.fromJSON(object.filter) : undefined,
      volumeDataRestorePolicyOverrides: globalThis.Array.isArray(object?.volumeDataRestorePolicyOverrides)
        ? object.volumeDataRestorePolicyOverrides.map((e: any) => VolumeDataRestorePolicyOverride.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Restore): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.backup !== "") {
      obj.backup = message.backup;
    }
    if (message.cluster !== "") {
      obj.cluster = message.cluster;
    }
    if (message.restoreConfig !== undefined) {
      obj.restoreConfig = RestoreConfig.toJSON(message.restoreConfig);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = restore_StateToJSON(message.state);
    }
    if (message.stateReason !== "") {
      obj.stateReason = message.stateReason;
    }
    if (message.completeTime !== undefined) {
      obj.completeTime = message.completeTime.toISOString();
    }
    if (message.resourcesRestoredCount !== 0) {
      obj.resourcesRestoredCount = Math.round(message.resourcesRestoredCount);
    }
    if (message.resourcesExcludedCount !== 0) {
      obj.resourcesExcludedCount = Math.round(message.resourcesExcludedCount);
    }
    if (message.resourcesFailedCount !== 0) {
      obj.resourcesFailedCount = Math.round(message.resourcesFailedCount);
    }
    if (message.volumesRestoredCount !== 0) {
      obj.volumesRestoredCount = Math.round(message.volumesRestoredCount);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.filter !== undefined) {
      obj.filter = Restore_Filter.toJSON(message.filter);
    }
    if (message.volumeDataRestorePolicyOverrides?.length) {
      obj.volumeDataRestorePolicyOverrides = message.volumeDataRestorePolicyOverrides.map((e) =>
        VolumeDataRestorePolicyOverride.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Restore>): Restore {
    return Restore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Restore>): Restore {
    const message = createBaseRestore();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.backup = object.backup ?? "";
    message.cluster = object.cluster ?? "";
    message.restoreConfig = (object.restoreConfig !== undefined && object.restoreConfig !== null)
      ? RestoreConfig.fromPartial(object.restoreConfig)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    message.stateReason = object.stateReason ?? "";
    message.completeTime = object.completeTime ?? undefined;
    message.resourcesRestoredCount = object.resourcesRestoredCount ?? 0;
    message.resourcesExcludedCount = object.resourcesExcludedCount ?? 0;
    message.resourcesFailedCount = object.resourcesFailedCount ?? 0;
    message.volumesRestoredCount = object.volumesRestoredCount ?? 0;
    message.etag = object.etag ?? "";
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? Restore_Filter.fromPartial(object.filter)
      : undefined;
    message.volumeDataRestorePolicyOverrides =
      object.volumeDataRestorePolicyOverrides?.map((e) => VolumeDataRestorePolicyOverride.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRestore_Filter(): Restore_Filter {
  return { inclusionFilters: [], exclusionFilters: [] };
}

export const Restore_Filter: MessageFns<Restore_Filter> = {
  encode(message: Restore_Filter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inclusionFilters) {
      ResourceSelector.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.exclusionFilters) {
      ResourceSelector.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Restore_Filter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestore_Filter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inclusionFilters.push(ResourceSelector.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.exclusionFilters.push(ResourceSelector.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Restore_Filter {
    return {
      inclusionFilters: globalThis.Array.isArray(object?.inclusionFilters)
        ? object.inclusionFilters.map((e: any) => ResourceSelector.fromJSON(e))
        : [],
      exclusionFilters: globalThis.Array.isArray(object?.exclusionFilters)
        ? object.exclusionFilters.map((e: any) => ResourceSelector.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Restore_Filter): unknown {
    const obj: any = {};
    if (message.inclusionFilters?.length) {
      obj.inclusionFilters = message.inclusionFilters.map((e) => ResourceSelector.toJSON(e));
    }
    if (message.exclusionFilters?.length) {
      obj.exclusionFilters = message.exclusionFilters.map((e) => ResourceSelector.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Restore_Filter>): Restore_Filter {
    return Restore_Filter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Restore_Filter>): Restore_Filter {
    const message = createBaseRestore_Filter();
    message.inclusionFilters = object.inclusionFilters?.map((e) => ResourceSelector.fromPartial(e)) || [];
    message.exclusionFilters = object.exclusionFilters?.map((e) => ResourceSelector.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRestore_LabelsEntry(): Restore_LabelsEntry {
  return { key: "", value: "" };
}

export const Restore_LabelsEntry: MessageFns<Restore_LabelsEntry> = {
  encode(message: Restore_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Restore_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestore_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Restore_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Restore_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Restore_LabelsEntry>): Restore_LabelsEntry {
    return Restore_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Restore_LabelsEntry>): Restore_LabelsEntry {
    const message = createBaseRestore_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRestoreConfig(): RestoreConfig {
  return {
    volumeDataRestorePolicy: 0,
    clusterResourceConflictPolicy: 0,
    namespacedResourceRestoreMode: 0,
    clusterResourceRestoreScope: undefined,
    allNamespaces: undefined,
    selectedNamespaces: undefined,
    selectedApplications: undefined,
    noNamespaces: undefined,
    excludedNamespaces: undefined,
    substitutionRules: [],
    transformationRules: [],
    volumeDataRestorePolicyBindings: [],
    restoreOrder: undefined,
  };
}

export const RestoreConfig: MessageFns<RestoreConfig> = {
  encode(message: RestoreConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.volumeDataRestorePolicy !== 0) {
      writer.uint32(8).int32(message.volumeDataRestorePolicy);
    }
    if (message.clusterResourceConflictPolicy !== 0) {
      writer.uint32(16).int32(message.clusterResourceConflictPolicy);
    }
    if (message.namespacedResourceRestoreMode !== 0) {
      writer.uint32(24).int32(message.namespacedResourceRestoreMode);
    }
    if (message.clusterResourceRestoreScope !== undefined) {
      RestoreConfig_ClusterResourceRestoreScope.encode(message.clusterResourceRestoreScope, writer.uint32(34).fork())
        .join();
    }
    if (message.allNamespaces !== undefined) {
      writer.uint32(40).bool(message.allNamespaces);
    }
    if (message.selectedNamespaces !== undefined) {
      Namespaces.encode(message.selectedNamespaces, writer.uint32(50).fork()).join();
    }
    if (message.selectedApplications !== undefined) {
      NamespacedNames.encode(message.selectedApplications, writer.uint32(58).fork()).join();
    }
    if (message.noNamespaces !== undefined) {
      writer.uint32(72).bool(message.noNamespaces);
    }
    if (message.excludedNamespaces !== undefined) {
      Namespaces.encode(message.excludedNamespaces, writer.uint32(82).fork()).join();
    }
    for (const v of message.substitutionRules) {
      RestoreConfig_SubstitutionRule.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.transformationRules) {
      RestoreConfig_TransformationRule.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.volumeDataRestorePolicyBindings) {
      RestoreConfig_VolumeDataRestorePolicyBinding.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.restoreOrder !== undefined) {
      RestoreConfig_RestoreOrder.encode(message.restoreOrder, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.volumeDataRestorePolicy = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.clusterResourceConflictPolicy = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.namespacedResourceRestoreMode = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clusterResourceRestoreScope = RestoreConfig_ClusterResourceRestoreScope.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allNamespaces = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.selectedNamespaces = Namespaces.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.selectedApplications = NamespacedNames.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.noNamespaces = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.excludedNamespaces = Namespaces.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.substitutionRules.push(RestoreConfig_SubstitutionRule.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.transformationRules.push(RestoreConfig_TransformationRule.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.volumeDataRestorePolicyBindings.push(
            RestoreConfig_VolumeDataRestorePolicyBinding.decode(reader, reader.uint32()),
          );
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.restoreOrder = RestoreConfig_RestoreOrder.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig {
    return {
      volumeDataRestorePolicy: isSet(object.volumeDataRestorePolicy)
        ? restoreConfig_VolumeDataRestorePolicyFromJSON(object.volumeDataRestorePolicy)
        : 0,
      clusterResourceConflictPolicy: isSet(object.clusterResourceConflictPolicy)
        ? restoreConfig_ClusterResourceConflictPolicyFromJSON(object.clusterResourceConflictPolicy)
        : 0,
      namespacedResourceRestoreMode: isSet(object.namespacedResourceRestoreMode)
        ? restoreConfig_NamespacedResourceRestoreModeFromJSON(object.namespacedResourceRestoreMode)
        : 0,
      clusterResourceRestoreScope: isSet(object.clusterResourceRestoreScope)
        ? RestoreConfig_ClusterResourceRestoreScope.fromJSON(object.clusterResourceRestoreScope)
        : undefined,
      allNamespaces: isSet(object.allNamespaces) ? globalThis.Boolean(object.allNamespaces) : undefined,
      selectedNamespaces: isSet(object.selectedNamespaces) ? Namespaces.fromJSON(object.selectedNamespaces) : undefined,
      selectedApplications: isSet(object.selectedApplications)
        ? NamespacedNames.fromJSON(object.selectedApplications)
        : undefined,
      noNamespaces: isSet(object.noNamespaces) ? globalThis.Boolean(object.noNamespaces) : undefined,
      excludedNamespaces: isSet(object.excludedNamespaces) ? Namespaces.fromJSON(object.excludedNamespaces) : undefined,
      substitutionRules: globalThis.Array.isArray(object?.substitutionRules)
        ? object.substitutionRules.map((e: any) => RestoreConfig_SubstitutionRule.fromJSON(e))
        : [],
      transformationRules: globalThis.Array.isArray(object?.transformationRules)
        ? object.transformationRules.map((e: any) => RestoreConfig_TransformationRule.fromJSON(e))
        : [],
      volumeDataRestorePolicyBindings: globalThis.Array.isArray(object?.volumeDataRestorePolicyBindings)
        ? object.volumeDataRestorePolicyBindings.map((e: any) =>
          RestoreConfig_VolumeDataRestorePolicyBinding.fromJSON(e)
        )
        : [],
      restoreOrder: isSet(object.restoreOrder) ? RestoreConfig_RestoreOrder.fromJSON(object.restoreOrder) : undefined,
    };
  },

  toJSON(message: RestoreConfig): unknown {
    const obj: any = {};
    if (message.volumeDataRestorePolicy !== 0) {
      obj.volumeDataRestorePolicy = restoreConfig_VolumeDataRestorePolicyToJSON(message.volumeDataRestorePolicy);
    }
    if (message.clusterResourceConflictPolicy !== 0) {
      obj.clusterResourceConflictPolicy = restoreConfig_ClusterResourceConflictPolicyToJSON(
        message.clusterResourceConflictPolicy,
      );
    }
    if (message.namespacedResourceRestoreMode !== 0) {
      obj.namespacedResourceRestoreMode = restoreConfig_NamespacedResourceRestoreModeToJSON(
        message.namespacedResourceRestoreMode,
      );
    }
    if (message.clusterResourceRestoreScope !== undefined) {
      obj.clusterResourceRestoreScope = RestoreConfig_ClusterResourceRestoreScope.toJSON(
        message.clusterResourceRestoreScope,
      );
    }
    if (message.allNamespaces !== undefined) {
      obj.allNamespaces = message.allNamespaces;
    }
    if (message.selectedNamespaces !== undefined) {
      obj.selectedNamespaces = Namespaces.toJSON(message.selectedNamespaces);
    }
    if (message.selectedApplications !== undefined) {
      obj.selectedApplications = NamespacedNames.toJSON(message.selectedApplications);
    }
    if (message.noNamespaces !== undefined) {
      obj.noNamespaces = message.noNamespaces;
    }
    if (message.excludedNamespaces !== undefined) {
      obj.excludedNamespaces = Namespaces.toJSON(message.excludedNamespaces);
    }
    if (message.substitutionRules?.length) {
      obj.substitutionRules = message.substitutionRules.map((e) => RestoreConfig_SubstitutionRule.toJSON(e));
    }
    if (message.transformationRules?.length) {
      obj.transformationRules = message.transformationRules.map((e) => RestoreConfig_TransformationRule.toJSON(e));
    }
    if (message.volumeDataRestorePolicyBindings?.length) {
      obj.volumeDataRestorePolicyBindings = message.volumeDataRestorePolicyBindings.map((e) =>
        RestoreConfig_VolumeDataRestorePolicyBinding.toJSON(e)
      );
    }
    if (message.restoreOrder !== undefined) {
      obj.restoreOrder = RestoreConfig_RestoreOrder.toJSON(message.restoreOrder);
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig>): RestoreConfig {
    return RestoreConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig>): RestoreConfig {
    const message = createBaseRestoreConfig();
    message.volumeDataRestorePolicy = object.volumeDataRestorePolicy ?? 0;
    message.clusterResourceConflictPolicy = object.clusterResourceConflictPolicy ?? 0;
    message.namespacedResourceRestoreMode = object.namespacedResourceRestoreMode ?? 0;
    message.clusterResourceRestoreScope =
      (object.clusterResourceRestoreScope !== undefined && object.clusterResourceRestoreScope !== null)
        ? RestoreConfig_ClusterResourceRestoreScope.fromPartial(object.clusterResourceRestoreScope)
        : undefined;
    message.allNamespaces = object.allNamespaces ?? undefined;
    message.selectedNamespaces = (object.selectedNamespaces !== undefined && object.selectedNamespaces !== null)
      ? Namespaces.fromPartial(object.selectedNamespaces)
      : undefined;
    message.selectedApplications = (object.selectedApplications !== undefined && object.selectedApplications !== null)
      ? NamespacedNames.fromPartial(object.selectedApplications)
      : undefined;
    message.noNamespaces = object.noNamespaces ?? undefined;
    message.excludedNamespaces = (object.excludedNamespaces !== undefined && object.excludedNamespaces !== null)
      ? Namespaces.fromPartial(object.excludedNamespaces)
      : undefined;
    message.substitutionRules = object.substitutionRules?.map((e) => RestoreConfig_SubstitutionRule.fromPartial(e)) ||
      [];
    message.transformationRules =
      object.transformationRules?.map((e) => RestoreConfig_TransformationRule.fromPartial(e)) || [];
    message.volumeDataRestorePolicyBindings =
      object.volumeDataRestorePolicyBindings?.map((e) => RestoreConfig_VolumeDataRestorePolicyBinding.fromPartial(e)) ||
      [];
    message.restoreOrder = (object.restoreOrder !== undefined && object.restoreOrder !== null)
      ? RestoreConfig_RestoreOrder.fromPartial(object.restoreOrder)
      : undefined;
    return message;
  },
};

function createBaseRestoreConfig_GroupKind(): RestoreConfig_GroupKind {
  return { resourceGroup: "", resourceKind: "" };
}

export const RestoreConfig_GroupKind: MessageFns<RestoreConfig_GroupKind> = {
  encode(message: RestoreConfig_GroupKind, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceGroup !== "") {
      writer.uint32(10).string(message.resourceGroup);
    }
    if (message.resourceKind !== "") {
      writer.uint32(18).string(message.resourceKind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_GroupKind {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_GroupKind();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceGroup = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceKind = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_GroupKind {
    return {
      resourceGroup: isSet(object.resourceGroup) ? globalThis.String(object.resourceGroup) : "",
      resourceKind: isSet(object.resourceKind) ? globalThis.String(object.resourceKind) : "",
    };
  },

  toJSON(message: RestoreConfig_GroupKind): unknown {
    const obj: any = {};
    if (message.resourceGroup !== "") {
      obj.resourceGroup = message.resourceGroup;
    }
    if (message.resourceKind !== "") {
      obj.resourceKind = message.resourceKind;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_GroupKind>): RestoreConfig_GroupKind {
    return RestoreConfig_GroupKind.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig_GroupKind>): RestoreConfig_GroupKind {
    const message = createBaseRestoreConfig_GroupKind();
    message.resourceGroup = object.resourceGroup ?? "";
    message.resourceKind = object.resourceKind ?? "";
    return message;
  },
};

function createBaseRestoreConfig_ClusterResourceRestoreScope(): RestoreConfig_ClusterResourceRestoreScope {
  return { selectedGroupKinds: [], excludedGroupKinds: [], allGroupKinds: false, noGroupKinds: false };
}

export const RestoreConfig_ClusterResourceRestoreScope: MessageFns<RestoreConfig_ClusterResourceRestoreScope> = {
  encode(message: RestoreConfig_ClusterResourceRestoreScope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.selectedGroupKinds) {
      RestoreConfig_GroupKind.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.excludedGroupKinds) {
      RestoreConfig_GroupKind.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.allGroupKinds !== false) {
      writer.uint32(24).bool(message.allGroupKinds);
    }
    if (message.noGroupKinds !== false) {
      writer.uint32(32).bool(message.noGroupKinds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_ClusterResourceRestoreScope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_ClusterResourceRestoreScope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.selectedGroupKinds.push(RestoreConfig_GroupKind.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.excludedGroupKinds.push(RestoreConfig_GroupKind.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allGroupKinds = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.noGroupKinds = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_ClusterResourceRestoreScope {
    return {
      selectedGroupKinds: globalThis.Array.isArray(object?.selectedGroupKinds)
        ? object.selectedGroupKinds.map((e: any) => RestoreConfig_GroupKind.fromJSON(e))
        : [],
      excludedGroupKinds: globalThis.Array.isArray(object?.excludedGroupKinds)
        ? object.excludedGroupKinds.map((e: any) => RestoreConfig_GroupKind.fromJSON(e))
        : [],
      allGroupKinds: isSet(object.allGroupKinds) ? globalThis.Boolean(object.allGroupKinds) : false,
      noGroupKinds: isSet(object.noGroupKinds) ? globalThis.Boolean(object.noGroupKinds) : false,
    };
  },

  toJSON(message: RestoreConfig_ClusterResourceRestoreScope): unknown {
    const obj: any = {};
    if (message.selectedGroupKinds?.length) {
      obj.selectedGroupKinds = message.selectedGroupKinds.map((e) => RestoreConfig_GroupKind.toJSON(e));
    }
    if (message.excludedGroupKinds?.length) {
      obj.excludedGroupKinds = message.excludedGroupKinds.map((e) => RestoreConfig_GroupKind.toJSON(e));
    }
    if (message.allGroupKinds !== false) {
      obj.allGroupKinds = message.allGroupKinds;
    }
    if (message.noGroupKinds !== false) {
      obj.noGroupKinds = message.noGroupKinds;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_ClusterResourceRestoreScope>): RestoreConfig_ClusterResourceRestoreScope {
    return RestoreConfig_ClusterResourceRestoreScope.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RestoreConfig_ClusterResourceRestoreScope>,
  ): RestoreConfig_ClusterResourceRestoreScope {
    const message = createBaseRestoreConfig_ClusterResourceRestoreScope();
    message.selectedGroupKinds = object.selectedGroupKinds?.map((e) => RestoreConfig_GroupKind.fromPartial(e)) || [];
    message.excludedGroupKinds = object.excludedGroupKinds?.map((e) => RestoreConfig_GroupKind.fromPartial(e)) || [];
    message.allGroupKinds = object.allGroupKinds ?? false;
    message.noGroupKinds = object.noGroupKinds ?? false;
    return message;
  },
};

function createBaseRestoreConfig_SubstitutionRule(): RestoreConfig_SubstitutionRule {
  return { targetNamespaces: [], targetGroupKinds: [], targetJsonPath: "", originalValuePattern: "", newValue: "" };
}

export const RestoreConfig_SubstitutionRule: MessageFns<RestoreConfig_SubstitutionRule> = {
  encode(message: RestoreConfig_SubstitutionRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targetNamespaces) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.targetGroupKinds) {
      RestoreConfig_GroupKind.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.targetJsonPath !== "") {
      writer.uint32(26).string(message.targetJsonPath);
    }
    if (message.originalValuePattern !== "") {
      writer.uint32(34).string(message.originalValuePattern);
    }
    if (message.newValue !== "") {
      writer.uint32(42).string(message.newValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_SubstitutionRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_SubstitutionRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetNamespaces.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetGroupKinds.push(RestoreConfig_GroupKind.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetJsonPath = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.originalValuePattern = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.newValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_SubstitutionRule {
    return {
      targetNamespaces: globalThis.Array.isArray(object?.targetNamespaces)
        ? object.targetNamespaces.map((e: any) => globalThis.String(e))
        : [],
      targetGroupKinds: globalThis.Array.isArray(object?.targetGroupKinds)
        ? object.targetGroupKinds.map((e: any) => RestoreConfig_GroupKind.fromJSON(e))
        : [],
      targetJsonPath: isSet(object.targetJsonPath) ? globalThis.String(object.targetJsonPath) : "",
      originalValuePattern: isSet(object.originalValuePattern) ? globalThis.String(object.originalValuePattern) : "",
      newValue: isSet(object.newValue) ? globalThis.String(object.newValue) : "",
    };
  },

  toJSON(message: RestoreConfig_SubstitutionRule): unknown {
    const obj: any = {};
    if (message.targetNamespaces?.length) {
      obj.targetNamespaces = message.targetNamespaces;
    }
    if (message.targetGroupKinds?.length) {
      obj.targetGroupKinds = message.targetGroupKinds.map((e) => RestoreConfig_GroupKind.toJSON(e));
    }
    if (message.targetJsonPath !== "") {
      obj.targetJsonPath = message.targetJsonPath;
    }
    if (message.originalValuePattern !== "") {
      obj.originalValuePattern = message.originalValuePattern;
    }
    if (message.newValue !== "") {
      obj.newValue = message.newValue;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_SubstitutionRule>): RestoreConfig_SubstitutionRule {
    return RestoreConfig_SubstitutionRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig_SubstitutionRule>): RestoreConfig_SubstitutionRule {
    const message = createBaseRestoreConfig_SubstitutionRule();
    message.targetNamespaces = object.targetNamespaces?.map((e) => e) || [];
    message.targetGroupKinds = object.targetGroupKinds?.map((e) => RestoreConfig_GroupKind.fromPartial(e)) || [];
    message.targetJsonPath = object.targetJsonPath ?? "";
    message.originalValuePattern = object.originalValuePattern ?? "";
    message.newValue = object.newValue ?? "";
    return message;
  },
};

function createBaseRestoreConfig_TransformationRuleAction(): RestoreConfig_TransformationRuleAction {
  return { op: 0, fromPath: "", path: "", value: "" };
}

export const RestoreConfig_TransformationRuleAction: MessageFns<RestoreConfig_TransformationRuleAction> = {
  encode(message: RestoreConfig_TransformationRuleAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.op !== 0) {
      writer.uint32(8).int32(message.op);
    }
    if (message.fromPath !== "") {
      writer.uint32(18).string(message.fromPath);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_TransformationRuleAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_TransformationRuleAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fromPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_TransformationRuleAction {
    return {
      op: isSet(object.op) ? restoreConfig_TransformationRuleAction_OpFromJSON(object.op) : 0,
      fromPath: isSet(object.fromPath) ? globalThis.String(object.fromPath) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RestoreConfig_TransformationRuleAction): unknown {
    const obj: any = {};
    if (message.op !== 0) {
      obj.op = restoreConfig_TransformationRuleAction_OpToJSON(message.op);
    }
    if (message.fromPath !== "") {
      obj.fromPath = message.fromPath;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_TransformationRuleAction>): RestoreConfig_TransformationRuleAction {
    return RestoreConfig_TransformationRuleAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig_TransformationRuleAction>): RestoreConfig_TransformationRuleAction {
    const message = createBaseRestoreConfig_TransformationRuleAction();
    message.op = object.op ?? 0;
    message.fromPath = object.fromPath ?? "";
    message.path = object.path ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRestoreConfig_ResourceFilter(): RestoreConfig_ResourceFilter {
  return { namespaces: [], groupKinds: [], jsonPath: "" };
}

export const RestoreConfig_ResourceFilter: MessageFns<RestoreConfig_ResourceFilter> = {
  encode(message: RestoreConfig_ResourceFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.namespaces) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.groupKinds) {
      RestoreConfig_GroupKind.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.jsonPath !== "") {
      writer.uint32(26).string(message.jsonPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_ResourceFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_ResourceFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespaces.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.groupKinds.push(RestoreConfig_GroupKind.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jsonPath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_ResourceFilter {
    return {
      namespaces: globalThis.Array.isArray(object?.namespaces)
        ? object.namespaces.map((e: any) => globalThis.String(e))
        : [],
      groupKinds: globalThis.Array.isArray(object?.groupKinds)
        ? object.groupKinds.map((e: any) => RestoreConfig_GroupKind.fromJSON(e))
        : [],
      jsonPath: isSet(object.jsonPath) ? globalThis.String(object.jsonPath) : "",
    };
  },

  toJSON(message: RestoreConfig_ResourceFilter): unknown {
    const obj: any = {};
    if (message.namespaces?.length) {
      obj.namespaces = message.namespaces;
    }
    if (message.groupKinds?.length) {
      obj.groupKinds = message.groupKinds.map((e) => RestoreConfig_GroupKind.toJSON(e));
    }
    if (message.jsonPath !== "") {
      obj.jsonPath = message.jsonPath;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_ResourceFilter>): RestoreConfig_ResourceFilter {
    return RestoreConfig_ResourceFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig_ResourceFilter>): RestoreConfig_ResourceFilter {
    const message = createBaseRestoreConfig_ResourceFilter();
    message.namespaces = object.namespaces?.map((e) => e) || [];
    message.groupKinds = object.groupKinds?.map((e) => RestoreConfig_GroupKind.fromPartial(e)) || [];
    message.jsonPath = object.jsonPath ?? "";
    return message;
  },
};

function createBaseRestoreConfig_TransformationRule(): RestoreConfig_TransformationRule {
  return { fieldActions: [], resourceFilter: undefined, description: "" };
}

export const RestoreConfig_TransformationRule: MessageFns<RestoreConfig_TransformationRule> = {
  encode(message: RestoreConfig_TransformationRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fieldActions) {
      RestoreConfig_TransformationRuleAction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.resourceFilter !== undefined) {
      RestoreConfig_ResourceFilter.encode(message.resourceFilter, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_TransformationRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_TransformationRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldActions.push(RestoreConfig_TransformationRuleAction.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceFilter = RestoreConfig_ResourceFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_TransformationRule {
    return {
      fieldActions: globalThis.Array.isArray(object?.fieldActions)
        ? object.fieldActions.map((e: any) => RestoreConfig_TransformationRuleAction.fromJSON(e))
        : [],
      resourceFilter: isSet(object.resourceFilter)
        ? RestoreConfig_ResourceFilter.fromJSON(object.resourceFilter)
        : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: RestoreConfig_TransformationRule): unknown {
    const obj: any = {};
    if (message.fieldActions?.length) {
      obj.fieldActions = message.fieldActions.map((e) => RestoreConfig_TransformationRuleAction.toJSON(e));
    }
    if (message.resourceFilter !== undefined) {
      obj.resourceFilter = RestoreConfig_ResourceFilter.toJSON(message.resourceFilter);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_TransformationRule>): RestoreConfig_TransformationRule {
    return RestoreConfig_TransformationRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig_TransformationRule>): RestoreConfig_TransformationRule {
    const message = createBaseRestoreConfig_TransformationRule();
    message.fieldActions = object.fieldActions?.map((e) => RestoreConfig_TransformationRuleAction.fromPartial(e)) || [];
    message.resourceFilter = (object.resourceFilter !== undefined && object.resourceFilter !== null)
      ? RestoreConfig_ResourceFilter.fromPartial(object.resourceFilter)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseRestoreConfig_VolumeDataRestorePolicyBinding(): RestoreConfig_VolumeDataRestorePolicyBinding {
  return { policy: 0, volumeType: undefined };
}

export const RestoreConfig_VolumeDataRestorePolicyBinding: MessageFns<RestoreConfig_VolumeDataRestorePolicyBinding> = {
  encode(
    message: RestoreConfig_VolumeDataRestorePolicyBinding,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.policy !== 0) {
      writer.uint32(8).int32(message.policy);
    }
    if (message.volumeType !== undefined) {
      writer.uint32(16).int32(message.volumeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_VolumeDataRestorePolicyBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_VolumeDataRestorePolicyBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.policy = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.volumeType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_VolumeDataRestorePolicyBinding {
    return {
      policy: isSet(object.policy) ? restoreConfig_VolumeDataRestorePolicyFromJSON(object.policy) : 0,
      volumeType: isSet(object.volumeType) ? volumeTypeEnum_VolumeTypeFromJSON(object.volumeType) : undefined,
    };
  },

  toJSON(message: RestoreConfig_VolumeDataRestorePolicyBinding): unknown {
    const obj: any = {};
    if (message.policy !== 0) {
      obj.policy = restoreConfig_VolumeDataRestorePolicyToJSON(message.policy);
    }
    if (message.volumeType !== undefined) {
      obj.volumeType = volumeTypeEnum_VolumeTypeToJSON(message.volumeType);
    }
    return obj;
  },

  create(
    base?: DeepPartial<RestoreConfig_VolumeDataRestorePolicyBinding>,
  ): RestoreConfig_VolumeDataRestorePolicyBinding {
    return RestoreConfig_VolumeDataRestorePolicyBinding.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RestoreConfig_VolumeDataRestorePolicyBinding>,
  ): RestoreConfig_VolumeDataRestorePolicyBinding {
    const message = createBaseRestoreConfig_VolumeDataRestorePolicyBinding();
    message.policy = object.policy ?? 0;
    message.volumeType = object.volumeType ?? undefined;
    return message;
  },
};

function createBaseRestoreConfig_RestoreOrder(): RestoreConfig_RestoreOrder {
  return { groupKindDependencies: [] };
}

export const RestoreConfig_RestoreOrder: MessageFns<RestoreConfig_RestoreOrder> = {
  encode(message: RestoreConfig_RestoreOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groupKindDependencies) {
      RestoreConfig_RestoreOrder_GroupKindDependency.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_RestoreOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_RestoreOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupKindDependencies.push(
            RestoreConfig_RestoreOrder_GroupKindDependency.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_RestoreOrder {
    return {
      groupKindDependencies: globalThis.Array.isArray(object?.groupKindDependencies)
        ? object.groupKindDependencies.map((e: any) => RestoreConfig_RestoreOrder_GroupKindDependency.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RestoreConfig_RestoreOrder): unknown {
    const obj: any = {};
    if (message.groupKindDependencies?.length) {
      obj.groupKindDependencies = message.groupKindDependencies.map((e) =>
        RestoreConfig_RestoreOrder_GroupKindDependency.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreConfig_RestoreOrder>): RestoreConfig_RestoreOrder {
    return RestoreConfig_RestoreOrder.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreConfig_RestoreOrder>): RestoreConfig_RestoreOrder {
    const message = createBaseRestoreConfig_RestoreOrder();
    message.groupKindDependencies =
      object.groupKindDependencies?.map((e) => RestoreConfig_RestoreOrder_GroupKindDependency.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRestoreConfig_RestoreOrder_GroupKindDependency(): RestoreConfig_RestoreOrder_GroupKindDependency {
  return { satisfying: undefined, requiring: undefined };
}

export const RestoreConfig_RestoreOrder_GroupKindDependency: MessageFns<
  RestoreConfig_RestoreOrder_GroupKindDependency
> = {
  encode(
    message: RestoreConfig_RestoreOrder_GroupKindDependency,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.satisfying !== undefined) {
      RestoreConfig_GroupKind.encode(message.satisfying, writer.uint32(10).fork()).join();
    }
    if (message.requiring !== undefined) {
      RestoreConfig_GroupKind.encode(message.requiring, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreConfig_RestoreOrder_GroupKindDependency {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreConfig_RestoreOrder_GroupKindDependency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.satisfying = RestoreConfig_GroupKind.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requiring = RestoreConfig_GroupKind.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreConfig_RestoreOrder_GroupKindDependency {
    return {
      satisfying: isSet(object.satisfying) ? RestoreConfig_GroupKind.fromJSON(object.satisfying) : undefined,
      requiring: isSet(object.requiring) ? RestoreConfig_GroupKind.fromJSON(object.requiring) : undefined,
    };
  },

  toJSON(message: RestoreConfig_RestoreOrder_GroupKindDependency): unknown {
    const obj: any = {};
    if (message.satisfying !== undefined) {
      obj.satisfying = RestoreConfig_GroupKind.toJSON(message.satisfying);
    }
    if (message.requiring !== undefined) {
      obj.requiring = RestoreConfig_GroupKind.toJSON(message.requiring);
    }
    return obj;
  },

  create(
    base?: DeepPartial<RestoreConfig_RestoreOrder_GroupKindDependency>,
  ): RestoreConfig_RestoreOrder_GroupKindDependency {
    return RestoreConfig_RestoreOrder_GroupKindDependency.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RestoreConfig_RestoreOrder_GroupKindDependency>,
  ): RestoreConfig_RestoreOrder_GroupKindDependency {
    const message = createBaseRestoreConfig_RestoreOrder_GroupKindDependency();
    message.satisfying = (object.satisfying !== undefined && object.satisfying !== null)
      ? RestoreConfig_GroupKind.fromPartial(object.satisfying)
      : undefined;
    message.requiring = (object.requiring !== undefined && object.requiring !== null)
      ? RestoreConfig_GroupKind.fromPartial(object.requiring)
      : undefined;
    return message;
  },
};

function createBaseResourceSelector(): ResourceSelector {
  return { groupKind: undefined, name: "", namespace: "", labels: {} };
}

export const ResourceSelector: MessageFns<ResourceSelector> = {
  encode(message: ResourceSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupKind !== undefined) {
      RestoreConfig_GroupKind.encode(message.groupKind, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.namespace !== "") {
      writer.uint32(26).string(message.namespace);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ResourceSelector_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupKind = RestoreConfig_GroupKind.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.namespace = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = ResourceSelector_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceSelector {
    return {
      groupKind: isSet(object.groupKind) ? RestoreConfig_GroupKind.fromJSON(object.groupKind) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ResourceSelector): unknown {
    const obj: any = {};
    if (message.groupKind !== undefined) {
      obj.groupKind = RestoreConfig_GroupKind.toJSON(message.groupKind);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceSelector>): ResourceSelector {
    return ResourceSelector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceSelector>): ResourceSelector {
    const message = createBaseResourceSelector();
    message.groupKind = (object.groupKind !== undefined && object.groupKind !== null)
      ? RestoreConfig_GroupKind.fromPartial(object.groupKind)
      : undefined;
    message.name = object.name ?? "";
    message.namespace = object.namespace ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseResourceSelector_LabelsEntry(): ResourceSelector_LabelsEntry {
  return { key: "", value: "" };
}

export const ResourceSelector_LabelsEntry: MessageFns<ResourceSelector_LabelsEntry> = {
  encode(message: ResourceSelector_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceSelector_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceSelector_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceSelector_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ResourceSelector_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceSelector_LabelsEntry>): ResourceSelector_LabelsEntry {
    return ResourceSelector_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceSelector_LabelsEntry>): ResourceSelector_LabelsEntry {
    const message = createBaseResourceSelector_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseVolumeDataRestorePolicyOverride(): VolumeDataRestorePolicyOverride {
  return { policy: 0, selectedPvcs: undefined };
}

export const VolumeDataRestorePolicyOverride: MessageFns<VolumeDataRestorePolicyOverride> = {
  encode(message: VolumeDataRestorePolicyOverride, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== 0) {
      writer.uint32(8).int32(message.policy);
    }
    if (message.selectedPvcs !== undefined) {
      NamespacedNames.encode(message.selectedPvcs, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VolumeDataRestorePolicyOverride {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVolumeDataRestorePolicyOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.policy = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.selectedPvcs = NamespacedNames.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VolumeDataRestorePolicyOverride {
    return {
      policy: isSet(object.policy) ? restoreConfig_VolumeDataRestorePolicyFromJSON(object.policy) : 0,
      selectedPvcs: isSet(object.selectedPvcs) ? NamespacedNames.fromJSON(object.selectedPvcs) : undefined,
    };
  },

  toJSON(message: VolumeDataRestorePolicyOverride): unknown {
    const obj: any = {};
    if (message.policy !== 0) {
      obj.policy = restoreConfig_VolumeDataRestorePolicyToJSON(message.policy);
    }
    if (message.selectedPvcs !== undefined) {
      obj.selectedPvcs = NamespacedNames.toJSON(message.selectedPvcs);
    }
    return obj;
  },

  create(base?: DeepPartial<VolumeDataRestorePolicyOverride>): VolumeDataRestorePolicyOverride {
    return VolumeDataRestorePolicyOverride.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VolumeDataRestorePolicyOverride>): VolumeDataRestorePolicyOverride {
    const message = createBaseVolumeDataRestorePolicyOverride();
    message.policy = object.policy ?? 0;
    message.selectedPvcs = (object.selectedPvcs !== undefined && object.selectedPvcs !== null)
      ? NamespacedNames.fromPartial(object.selectedPvcs)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
