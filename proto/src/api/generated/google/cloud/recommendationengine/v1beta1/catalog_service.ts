// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommendationengine/v1beta1/catalog_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { CatalogItem } from "./catalog.js";
import { ImportCatalogItemsRequest } from "./import.js";

export const protobufPackage = "google.cloud.recommendationengine.v1beta1";

/** Request message for CreateCatalogItem method. */
export interface CreateCatalogItemRequest {
  /**
   * Required. The parent catalog resource name, such as
   * `projects/* /locations/global/catalogs/default_catalog`.
   */
  parent: string;
  /** Required. The catalog item to create. */
  catalogItem: CatalogItem | undefined;
}

/** Request message for GetCatalogItem method. */
export interface GetCatalogItemRequest {
  /**
   * Required. Full resource name of catalog item, such as
   * `projects/* /locations/global/catalogs/default_catalog/catalogitems/some_catalog_item_id`.
   */
  name: string;
}

/** Request message for ListCatalogItems method. */
export interface ListCatalogItemsRequest {
  /**
   * Required. The parent catalog resource name, such as
   * `projects/* /locations/global/catalogs/default_catalog`.
   */
  parent: string;
  /**
   * Optional. Maximum number of results to return per page. If zero, the
   * service will choose a reasonable default.
   */
  pageSize: number;
  /** Optional. The previous ListCatalogItemsResponse.next_page_token. */
  pageToken: string;
  /** Optional. A filter to apply on the list results. */
  filter: string;
}

/** Response message for ListCatalogItems method. */
export interface ListCatalogItemsResponse {
  /** The catalog items. */
  catalogItems: CatalogItem[];
  /**
   * If empty, the list is complete. If nonempty, the token to pass to the next
   * request's ListCatalogItemRequest.page_token.
   */
  nextPageToken: string;
}

/** Request message for UpdateCatalogItem method. */
export interface UpdateCatalogItemRequest {
  /**
   * Required. Full resource name of catalog item, such as
   * `projects/* /locations/global/catalogs/default_catalog/catalogItems/some_catalog_item_id`.
   */
  name: string;
  /**
   * Required. The catalog item to update/create. The 'catalog_item_id' field
   * has to match that in the 'name'.
   */
  catalogItem:
    | CatalogItem
    | undefined;
  /**
   * Optional. Indicates which fields in the provided 'item' to update. If not
   * set, will by default update all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteCatalogItem method. */
export interface DeleteCatalogItemRequest {
  /**
   * Required. Full resource name of catalog item, such as
   * `projects/* /locations/global/catalogs/default_catalog/catalogItems/some_catalog_item_id`.
   */
  name: string;
}

function createBaseCreateCatalogItemRequest(): CreateCatalogItemRequest {
  return { parent: "", catalogItem: undefined };
}

export const CreateCatalogItemRequest: MessageFns<CreateCatalogItemRequest> = {
  encode(message: CreateCatalogItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.catalogItem !== undefined) {
      CatalogItem.encode(message.catalogItem, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCatalogItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCatalogItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.catalogItem = CatalogItem.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCatalogItemRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      catalogItem: isSet(object.catalogItem) ? CatalogItem.fromJSON(object.catalogItem) : undefined,
    };
  },

  toJSON(message: CreateCatalogItemRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.catalogItem !== undefined) {
      obj.catalogItem = CatalogItem.toJSON(message.catalogItem);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCatalogItemRequest>): CreateCatalogItemRequest {
    return CreateCatalogItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCatalogItemRequest>): CreateCatalogItemRequest {
    const message = createBaseCreateCatalogItemRequest();
    message.parent = object.parent ?? "";
    message.catalogItem = (object.catalogItem !== undefined && object.catalogItem !== null)
      ? CatalogItem.fromPartial(object.catalogItem)
      : undefined;
    return message;
  },
};

function createBaseGetCatalogItemRequest(): GetCatalogItemRequest {
  return { name: "" };
}

export const GetCatalogItemRequest: MessageFns<GetCatalogItemRequest> = {
  encode(message: GetCatalogItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCatalogItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCatalogItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCatalogItemRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCatalogItemRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCatalogItemRequest>): GetCatalogItemRequest {
    return GetCatalogItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCatalogItemRequest>): GetCatalogItemRequest {
    const message = createBaseGetCatalogItemRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCatalogItemsRequest(): ListCatalogItemsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListCatalogItemsRequest: MessageFns<ListCatalogItemsRequest> = {
  encode(message: ListCatalogItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCatalogItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCatalogItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCatalogItemsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListCatalogItemsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCatalogItemsRequest>): ListCatalogItemsRequest {
    return ListCatalogItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCatalogItemsRequest>): ListCatalogItemsRequest {
    const message = createBaseListCatalogItemsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListCatalogItemsResponse(): ListCatalogItemsResponse {
  return { catalogItems: [], nextPageToken: "" };
}

export const ListCatalogItemsResponse: MessageFns<ListCatalogItemsResponse> = {
  encode(message: ListCatalogItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.catalogItems) {
      CatalogItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCatalogItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCatalogItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalogItems.push(CatalogItem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCatalogItemsResponse {
    return {
      catalogItems: globalThis.Array.isArray(object?.catalogItems)
        ? object.catalogItems.map((e: any) => CatalogItem.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCatalogItemsResponse): unknown {
    const obj: any = {};
    if (message.catalogItems?.length) {
      obj.catalogItems = message.catalogItems.map((e) => CatalogItem.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCatalogItemsResponse>): ListCatalogItemsResponse {
    return ListCatalogItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCatalogItemsResponse>): ListCatalogItemsResponse {
    const message = createBaseListCatalogItemsResponse();
    message.catalogItems = object.catalogItems?.map((e) => CatalogItem.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateCatalogItemRequest(): UpdateCatalogItemRequest {
  return { name: "", catalogItem: undefined, updateMask: undefined };
}

export const UpdateCatalogItemRequest: MessageFns<UpdateCatalogItemRequest> = {
  encode(message: UpdateCatalogItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.catalogItem !== undefined) {
      CatalogItem.encode(message.catalogItem, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCatalogItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCatalogItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.catalogItem = CatalogItem.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCatalogItemRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      catalogItem: isSet(object.catalogItem) ? CatalogItem.fromJSON(object.catalogItem) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCatalogItemRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.catalogItem !== undefined) {
      obj.catalogItem = CatalogItem.toJSON(message.catalogItem);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCatalogItemRequest>): UpdateCatalogItemRequest {
    return UpdateCatalogItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCatalogItemRequest>): UpdateCatalogItemRequest {
    const message = createBaseUpdateCatalogItemRequest();
    message.name = object.name ?? "";
    message.catalogItem = (object.catalogItem !== undefined && object.catalogItem !== null)
      ? CatalogItem.fromPartial(object.catalogItem)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteCatalogItemRequest(): DeleteCatalogItemRequest {
  return { name: "" };
}

export const DeleteCatalogItemRequest: MessageFns<DeleteCatalogItemRequest> = {
  encode(message: DeleteCatalogItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCatalogItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCatalogItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCatalogItemRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCatalogItemRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCatalogItemRequest>): DeleteCatalogItemRequest {
    return DeleteCatalogItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCatalogItemRequest>): DeleteCatalogItemRequest {
    const message = createBaseDeleteCatalogItemRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service for ingesting catalog information of the customer's website. */
export type CatalogServiceDefinition = typeof CatalogServiceDefinition;
export const CatalogServiceDefinition = {
  name: "CatalogService",
  fullName: "google.cloud.recommendationengine.v1beta1.CatalogService",
  methods: {
    /** Creates a catalog item. */
    createCatalogItem: {
      name: "CreateCatalogItem",
      requestType: CreateCatalogItemRequest,
      requestStream: false,
      responseType: CatalogItem,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 112, 97, 114, 101, 110, 116, 44, 99, 97, 116, 97, 108, 111, 103, 95, 105, 116, 101, 109]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              12,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              95,
              105,
              116,
              101,
              109,
              34,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a specific catalog item. */
    getCatalogItem: {
      name: "GetCatalogItem",
      requestType: GetCatalogItemRequest,
      requestStream: false,
      responseType: CatalogItem,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a list of catalog items. */
    listCatalogItems: {
      name: "ListCatalogItems",
      requestType: ListCatalogItemsRequest,
      requestStream: false,
      responseType: ListCatalogItemsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a catalog item. Partial updating is supported. Non-existing
     * items will be created.
     */
    updateCatalogItem: {
      name: "UpdateCatalogItem",
      requestType: UpdateCatalogItemRequest,
      requestStream: false,
      responseType: CatalogItem,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              110,
              97,
              109,
              101,
              44,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              95,
              105,
              116,
              101,
              109,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              12,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              95,
              105,
              116,
              101,
              109,
              50,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a catalog item. */
    deleteCatalogItem: {
      name: "DeleteCatalogItem",
      requestType: DeleteCatalogItemRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              42,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of multiple catalog items. Request processing may be
     * synchronous. No partial updating supported. Non-existing items will be
     * created.
     *
     * Operation.response is of type ImportResponse. Note that it is
     * possible for a subset of the items to be successfully updated.
     */
    importCatalogItems: {
      name: "ImportCatalogItems",
      requestType: ImportCatalogItemsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              128,
              1,
              10,
              68,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              44,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              105,
              110,
              112,
              117,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              101,
              114,
              114,
              111,
              114,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              73,
              116,
              101,
              109,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CatalogServiceImplementation<CallContextExt = {}> {
  /** Creates a catalog item. */
  createCatalogItem(
    request: CreateCatalogItemRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CatalogItem>>;
  /** Gets a specific catalog item. */
  getCatalogItem(
    request: GetCatalogItemRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CatalogItem>>;
  /** Gets a list of catalog items. */
  listCatalogItems(
    request: ListCatalogItemsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCatalogItemsResponse>>;
  /**
   * Updates a catalog item. Partial updating is supported. Non-existing
   * items will be created.
   */
  updateCatalogItem(
    request: UpdateCatalogItemRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CatalogItem>>;
  /** Deletes a catalog item. */
  deleteCatalogItem(
    request: DeleteCatalogItemRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Bulk import of multiple catalog items. Request processing may be
   * synchronous. No partial updating supported. Non-existing items will be
   * created.
   *
   * Operation.response is of type ImportResponse. Note that it is
   * possible for a subset of the items to be successfully updated.
   */
  importCatalogItems(
    request: ImportCatalogItemsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface CatalogServiceClient<CallOptionsExt = {}> {
  /** Creates a catalog item. */
  createCatalogItem(
    request: DeepPartial<CreateCatalogItemRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CatalogItem>;
  /** Gets a specific catalog item. */
  getCatalogItem(
    request: DeepPartial<GetCatalogItemRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CatalogItem>;
  /** Gets a list of catalog items. */
  listCatalogItems(
    request: DeepPartial<ListCatalogItemsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCatalogItemsResponse>;
  /**
   * Updates a catalog item. Partial updating is supported. Non-existing
   * items will be created.
   */
  updateCatalogItem(
    request: DeepPartial<UpdateCatalogItemRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CatalogItem>;
  /** Deletes a catalog item. */
  deleteCatalogItem(
    request: DeepPartial<DeleteCatalogItemRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Bulk import of multiple catalog items. Request processing may be
   * synchronous. No partial updating supported. Non-existing items will be
   * created.
   *
   * Operation.response is of type ImportResponse. Note that it is
   * possible for a subset of the items to be successfully updated.
   */
  importCatalogItems(
    request: DeepPartial<ImportCatalogItemsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
