// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommendationengine/v1beta1/import.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { CatalogItem } from "./catalog.js";
import { UserEvent } from "./user_event.js";

export const protobufPackage = "google.cloud.recommendationengine.v1beta1";

/**
 * Google Cloud Storage location for input content.
 * format.
 */
export interface GcsSource {
  /**
   * Required. Google Cloud Storage URIs to input files. URI can be up to
   * 2000 characters long. URIs can match the full object path (for example,
   * `gs://bucket/directory/object.json`) or a pattern matching one or more
   * files, such as `gs://bucket/directory/*.json`. A request can
   * contain at most 100 files, and each file can be up to 2 GB. See
   * [Importing catalog information](/recommendations-ai/docs/upload-catalog)
   * for the expected file format and setup instructions.
   */
  inputUris: string[];
}

/** The inline source for the input config for ImportCatalogItems method. */
export interface CatalogInlineSource {
  /**
   * Optional. A list of catalog items to update/create. Recommended max of 10k
   * items.
   */
  catalogItems: CatalogItem[];
}

/** The inline source for the input config for ImportUserEvents method. */
export interface UserEventInlineSource {
  /** Optional. A list of user events to import. Recommended max of 10k items. */
  userEvents: UserEvent[];
}

/** Configuration of destination for Import related errors. */
export interface ImportErrorsConfig {
  /**
   * Google Cloud Storage path for import errors. This must be an empty,
   * existing Cloud Storage bucket. Import errors will be written to a file in
   * this bucket, one per line, as a JSON-encoded
   * `google.rpc.Status` message.
   */
  gcsPrefix?: string | undefined;
}

/** Request message for Import methods. */
export interface ImportCatalogItemsRequest {
  /** Required. `projects/1234/locations/global/catalogs/default_catalog` */
  parent: string;
  /**
   * Optional. Unique identifier provided by client, within the ancestor
   * dataset scope. Ensures idempotency and used for request deduplication.
   * Server-generated if unspecified. Up to 128 characters long. This is
   * returned as google.longrunning.Operation.name in the response.
   */
  requestId: string;
  /** Required. The desired input location of the data. */
  inputConfig:
    | InputConfig
    | undefined;
  /** Optional. The desired location of errors incurred during the Import. */
  errorsConfig: ImportErrorsConfig | undefined;
}

/** Request message for the ImportUserEvents request. */
export interface ImportUserEventsRequest {
  /**
   * Required.
   * `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`
   */
  parent: string;
  /**
   * Optional. Unique identifier provided by client, within the ancestor
   * dataset scope. Ensures idempotency for expensive long running operations.
   * Server-generated if unspecified. Up to 128 characters long. This is
   * returned as google.longrunning.Operation.name in the response. Note that
   * this field must not be set if the desired input config is
   * catalog_inline_source.
   */
  requestId: string;
  /** Required. The desired input location of the data. */
  inputConfig:
    | InputConfig
    | undefined;
  /** Optional. The desired location of errors incurred during the Import. */
  errorsConfig: ImportErrorsConfig | undefined;
}

/** The input config source. */
export interface InputConfig {
  /** The Inline source for the input content for Catalog items. */
  catalogInlineSource?:
    | CatalogInlineSource
    | undefined;
  /** Google Cloud Storage location for the input content. */
  gcsSource?:
    | GcsSource
    | undefined;
  /** The Inline source for the input content for UserEvents. */
  userEventInlineSource?: UserEventInlineSource | undefined;
}

/**
 * Metadata related to the progress of the Import operation. This will be
 * returned by the google.longrunning.Operation.metadata field.
 */
export interface ImportMetadata {
  /** Name of the operation. */
  operationName: string;
  /**
   * Id of the request / operation. This is parroting back the requestId that
   * was passed in the request.
   */
  requestId: string;
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /** Count of entries that were processed successfully. */
  successCount: Long;
  /** Count of entries that encountered errors while processing. */
  failureCount: Long;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Response of the ImportCatalogItemsRequest. If the long running
 * operation is done, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 */
export interface ImportCatalogItemsResponse {
  /** A sample of errors encountered while processing the request. */
  errorSamples: Status[];
  /** Echoes the destination for the complete errors in the request if set. */
  errorsConfig: ImportErrorsConfig | undefined;
}

/**
 * Response of the ImportUserEventsRequest. If the long running
 * operation was successful, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 */
export interface ImportUserEventsResponse {
  /** A sample of errors encountered while processing the request. */
  errorSamples: Status[];
  /**
   * Echoes the destination for the complete errors if this field was set in
   * the request.
   */
  errorsConfig:
    | ImportErrorsConfig
    | undefined;
  /** Aggregated statistics of user event import status. */
  importSummary: UserEventImportSummary | undefined;
}

/**
 * A summary of import result. The UserEventImportSummary summarizes
 * the import status for user events.
 */
export interface UserEventImportSummary {
  /** Count of user events imported with complete existing catalog information. */
  joinedEventsCount: Long;
  /**
   * Count of user events imported, but with catalog information not found
   * in the imported catalog.
   */
  unjoinedEventsCount: Long;
}

function createBaseGcsSource(): GcsSource {
  return { inputUris: [] };
}

export const GcsSource: MessageFns<GcsSource> = {
  encode(message: GcsSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inputUris) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputUris.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsSource {
    return {
      inputUris: globalThis.Array.isArray(object?.inputUris)
        ? object.inputUris.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GcsSource): unknown {
    const obj: any = {};
    if (message.inputUris?.length) {
      obj.inputUris = message.inputUris;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsSource>): GcsSource {
    return GcsSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsSource>): GcsSource {
    const message = createBaseGcsSource();
    message.inputUris = object.inputUris?.map((e) => e) || [];
    return message;
  },
};

function createBaseCatalogInlineSource(): CatalogInlineSource {
  return { catalogItems: [] };
}

export const CatalogInlineSource: MessageFns<CatalogInlineSource> = {
  encode(message: CatalogInlineSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.catalogItems) {
      CatalogItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CatalogInlineSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCatalogInlineSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalogItems.push(CatalogItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CatalogInlineSource {
    return {
      catalogItems: globalThis.Array.isArray(object?.catalogItems)
        ? object.catalogItems.map((e: any) => CatalogItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CatalogInlineSource): unknown {
    const obj: any = {};
    if (message.catalogItems?.length) {
      obj.catalogItems = message.catalogItems.map((e) => CatalogItem.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CatalogInlineSource>): CatalogInlineSource {
    return CatalogInlineSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CatalogInlineSource>): CatalogInlineSource {
    const message = createBaseCatalogInlineSource();
    message.catalogItems = object.catalogItems?.map((e) => CatalogItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserEventInlineSource(): UserEventInlineSource {
  return { userEvents: [] };
}

export const UserEventInlineSource: MessageFns<UserEventInlineSource> = {
  encode(message: UserEventInlineSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userEvents) {
      UserEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserEventInlineSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserEventInlineSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userEvents.push(UserEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserEventInlineSource {
    return {
      userEvents: globalThis.Array.isArray(object?.userEvents)
        ? object.userEvents.map((e: any) => UserEvent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UserEventInlineSource): unknown {
    const obj: any = {};
    if (message.userEvents?.length) {
      obj.userEvents = message.userEvents.map((e) => UserEvent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UserEventInlineSource>): UserEventInlineSource {
    return UserEventInlineSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserEventInlineSource>): UserEventInlineSource {
    const message = createBaseUserEventInlineSource();
    message.userEvents = object.userEvents?.map((e) => UserEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportErrorsConfig(): ImportErrorsConfig {
  return { gcsPrefix: undefined };
}

export const ImportErrorsConfig: MessageFns<ImportErrorsConfig> = {
  encode(message: ImportErrorsConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsPrefix !== undefined) {
      writer.uint32(10).string(message.gcsPrefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportErrorsConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportErrorsConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsPrefix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportErrorsConfig {
    return { gcsPrefix: isSet(object.gcsPrefix) ? globalThis.String(object.gcsPrefix) : undefined };
  },

  toJSON(message: ImportErrorsConfig): unknown {
    const obj: any = {};
    if (message.gcsPrefix !== undefined) {
      obj.gcsPrefix = message.gcsPrefix;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportErrorsConfig>): ImportErrorsConfig {
    return ImportErrorsConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportErrorsConfig>): ImportErrorsConfig {
    const message = createBaseImportErrorsConfig();
    message.gcsPrefix = object.gcsPrefix ?? undefined;
    return message;
  },
};

function createBaseImportCatalogItemsRequest(): ImportCatalogItemsRequest {
  return { parent: "", requestId: "", inputConfig: undefined, errorsConfig: undefined };
}

export const ImportCatalogItemsRequest: MessageFns<ImportCatalogItemsRequest> = {
  encode(message: ImportCatalogItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.inputConfig !== undefined) {
      InputConfig.encode(message.inputConfig, writer.uint32(26).fork()).join();
    }
    if (message.errorsConfig !== undefined) {
      ImportErrorsConfig.encode(message.errorsConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportCatalogItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportCatalogItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inputConfig = InputConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.errorsConfig = ImportErrorsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportCatalogItemsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      inputConfig: isSet(object.inputConfig) ? InputConfig.fromJSON(object.inputConfig) : undefined,
      errorsConfig: isSet(object.errorsConfig) ? ImportErrorsConfig.fromJSON(object.errorsConfig) : undefined,
    };
  },

  toJSON(message: ImportCatalogItemsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.inputConfig !== undefined) {
      obj.inputConfig = InputConfig.toJSON(message.inputConfig);
    }
    if (message.errorsConfig !== undefined) {
      obj.errorsConfig = ImportErrorsConfig.toJSON(message.errorsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportCatalogItemsRequest>): ImportCatalogItemsRequest {
    return ImportCatalogItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportCatalogItemsRequest>): ImportCatalogItemsRequest {
    const message = createBaseImportCatalogItemsRequest();
    message.parent = object.parent ?? "";
    message.requestId = object.requestId ?? "";
    message.inputConfig = (object.inputConfig !== undefined && object.inputConfig !== null)
      ? InputConfig.fromPartial(object.inputConfig)
      : undefined;
    message.errorsConfig = (object.errorsConfig !== undefined && object.errorsConfig !== null)
      ? ImportErrorsConfig.fromPartial(object.errorsConfig)
      : undefined;
    return message;
  },
};

function createBaseImportUserEventsRequest(): ImportUserEventsRequest {
  return { parent: "", requestId: "", inputConfig: undefined, errorsConfig: undefined };
}

export const ImportUserEventsRequest: MessageFns<ImportUserEventsRequest> = {
  encode(message: ImportUserEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.inputConfig !== undefined) {
      InputConfig.encode(message.inputConfig, writer.uint32(26).fork()).join();
    }
    if (message.errorsConfig !== undefined) {
      ImportErrorsConfig.encode(message.errorsConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportUserEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportUserEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inputConfig = InputConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.errorsConfig = ImportErrorsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportUserEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      inputConfig: isSet(object.inputConfig) ? InputConfig.fromJSON(object.inputConfig) : undefined,
      errorsConfig: isSet(object.errorsConfig) ? ImportErrorsConfig.fromJSON(object.errorsConfig) : undefined,
    };
  },

  toJSON(message: ImportUserEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.inputConfig !== undefined) {
      obj.inputConfig = InputConfig.toJSON(message.inputConfig);
    }
    if (message.errorsConfig !== undefined) {
      obj.errorsConfig = ImportErrorsConfig.toJSON(message.errorsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportUserEventsRequest>): ImportUserEventsRequest {
    return ImportUserEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportUserEventsRequest>): ImportUserEventsRequest {
    const message = createBaseImportUserEventsRequest();
    message.parent = object.parent ?? "";
    message.requestId = object.requestId ?? "";
    message.inputConfig = (object.inputConfig !== undefined && object.inputConfig !== null)
      ? InputConfig.fromPartial(object.inputConfig)
      : undefined;
    message.errorsConfig = (object.errorsConfig !== undefined && object.errorsConfig !== null)
      ? ImportErrorsConfig.fromPartial(object.errorsConfig)
      : undefined;
    return message;
  },
};

function createBaseInputConfig(): InputConfig {
  return { catalogInlineSource: undefined, gcsSource: undefined, userEventInlineSource: undefined };
}

export const InputConfig: MessageFns<InputConfig> = {
  encode(message: InputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.catalogInlineSource !== undefined) {
      CatalogInlineSource.encode(message.catalogInlineSource, writer.uint32(10).fork()).join();
    }
    if (message.gcsSource !== undefined) {
      GcsSource.encode(message.gcsSource, writer.uint32(18).fork()).join();
    }
    if (message.userEventInlineSource !== undefined) {
      UserEventInlineSource.encode(message.userEventInlineSource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalogInlineSource = CatalogInlineSource.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsSource = GcsSource.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userEventInlineSource = UserEventInlineSource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputConfig {
    return {
      catalogInlineSource: isSet(object.catalogInlineSource)
        ? CatalogInlineSource.fromJSON(object.catalogInlineSource)
        : undefined,
      gcsSource: isSet(object.gcsSource) ? GcsSource.fromJSON(object.gcsSource) : undefined,
      userEventInlineSource: isSet(object.userEventInlineSource)
        ? UserEventInlineSource.fromJSON(object.userEventInlineSource)
        : undefined,
    };
  },

  toJSON(message: InputConfig): unknown {
    const obj: any = {};
    if (message.catalogInlineSource !== undefined) {
      obj.catalogInlineSource = CatalogInlineSource.toJSON(message.catalogInlineSource);
    }
    if (message.gcsSource !== undefined) {
      obj.gcsSource = GcsSource.toJSON(message.gcsSource);
    }
    if (message.userEventInlineSource !== undefined) {
      obj.userEventInlineSource = UserEventInlineSource.toJSON(message.userEventInlineSource);
    }
    return obj;
  },

  create(base?: DeepPartial<InputConfig>): InputConfig {
    return InputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InputConfig>): InputConfig {
    const message = createBaseInputConfig();
    message.catalogInlineSource = (object.catalogInlineSource !== undefined && object.catalogInlineSource !== null)
      ? CatalogInlineSource.fromPartial(object.catalogInlineSource)
      : undefined;
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? GcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.userEventInlineSource =
      (object.userEventInlineSource !== undefined && object.userEventInlineSource !== null)
        ? UserEventInlineSource.fromPartial(object.userEventInlineSource)
        : undefined;
    return message;
  },
};

function createBaseImportMetadata(): ImportMetadata {
  return {
    operationName: "",
    requestId: "",
    createTime: undefined,
    successCount: Long.ZERO,
    failureCount: Long.ZERO,
    updateTime: undefined,
  };
}

export const ImportMetadata: MessageFns<ImportMetadata> = {
  encode(message: ImportMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationName !== "") {
      writer.uint32(42).string(message.operationName);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (!message.successCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.successCount.toString());
    }
    if (!message.failureCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.failureCount.toString());
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.operationName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.successCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.failureCount = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportMetadata {
    return {
      operationName: isSet(object.operationName) ? globalThis.String(object.operationName) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      successCount: isSet(object.successCount) ? Long.fromValue(object.successCount) : Long.ZERO,
      failureCount: isSet(object.failureCount) ? Long.fromValue(object.failureCount) : Long.ZERO,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: ImportMetadata): unknown {
    const obj: any = {};
    if (message.operationName !== "") {
      obj.operationName = message.operationName;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (!message.successCount.equals(Long.ZERO)) {
      obj.successCount = (message.successCount || Long.ZERO).toString();
    }
    if (!message.failureCount.equals(Long.ZERO)) {
      obj.failureCount = (message.failureCount || Long.ZERO).toString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ImportMetadata>): ImportMetadata {
    return ImportMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportMetadata>): ImportMetadata {
    const message = createBaseImportMetadata();
    message.operationName = object.operationName ?? "";
    message.requestId = object.requestId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.successCount = (object.successCount !== undefined && object.successCount !== null)
      ? Long.fromValue(object.successCount)
      : Long.ZERO;
    message.failureCount = (object.failureCount !== undefined && object.failureCount !== null)
      ? Long.fromValue(object.failureCount)
      : Long.ZERO;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseImportCatalogItemsResponse(): ImportCatalogItemsResponse {
  return { errorSamples: [], errorsConfig: undefined };
}

export const ImportCatalogItemsResponse: MessageFns<ImportCatalogItemsResponse> = {
  encode(message: ImportCatalogItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errorSamples) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.errorsConfig !== undefined) {
      ImportErrorsConfig.encode(message.errorsConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportCatalogItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportCatalogItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorSamples.push(Status.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorsConfig = ImportErrorsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportCatalogItemsResponse {
    return {
      errorSamples: globalThis.Array.isArray(object?.errorSamples)
        ? object.errorSamples.map((e: any) => Status.fromJSON(e))
        : [],
      errorsConfig: isSet(object.errorsConfig) ? ImportErrorsConfig.fromJSON(object.errorsConfig) : undefined,
    };
  },

  toJSON(message: ImportCatalogItemsResponse): unknown {
    const obj: any = {};
    if (message.errorSamples?.length) {
      obj.errorSamples = message.errorSamples.map((e) => Status.toJSON(e));
    }
    if (message.errorsConfig !== undefined) {
      obj.errorsConfig = ImportErrorsConfig.toJSON(message.errorsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportCatalogItemsResponse>): ImportCatalogItemsResponse {
    return ImportCatalogItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportCatalogItemsResponse>): ImportCatalogItemsResponse {
    const message = createBaseImportCatalogItemsResponse();
    message.errorSamples = object.errorSamples?.map((e) => Status.fromPartial(e)) || [];
    message.errorsConfig = (object.errorsConfig !== undefined && object.errorsConfig !== null)
      ? ImportErrorsConfig.fromPartial(object.errorsConfig)
      : undefined;
    return message;
  },
};

function createBaseImportUserEventsResponse(): ImportUserEventsResponse {
  return { errorSamples: [], errorsConfig: undefined, importSummary: undefined };
}

export const ImportUserEventsResponse: MessageFns<ImportUserEventsResponse> = {
  encode(message: ImportUserEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errorSamples) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.errorsConfig !== undefined) {
      ImportErrorsConfig.encode(message.errorsConfig, writer.uint32(18).fork()).join();
    }
    if (message.importSummary !== undefined) {
      UserEventImportSummary.encode(message.importSummary, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportUserEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportUserEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorSamples.push(Status.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorsConfig = ImportErrorsConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.importSummary = UserEventImportSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportUserEventsResponse {
    return {
      errorSamples: globalThis.Array.isArray(object?.errorSamples)
        ? object.errorSamples.map((e: any) => Status.fromJSON(e))
        : [],
      errorsConfig: isSet(object.errorsConfig) ? ImportErrorsConfig.fromJSON(object.errorsConfig) : undefined,
      importSummary: isSet(object.importSummary) ? UserEventImportSummary.fromJSON(object.importSummary) : undefined,
    };
  },

  toJSON(message: ImportUserEventsResponse): unknown {
    const obj: any = {};
    if (message.errorSamples?.length) {
      obj.errorSamples = message.errorSamples.map((e) => Status.toJSON(e));
    }
    if (message.errorsConfig !== undefined) {
      obj.errorsConfig = ImportErrorsConfig.toJSON(message.errorsConfig);
    }
    if (message.importSummary !== undefined) {
      obj.importSummary = UserEventImportSummary.toJSON(message.importSummary);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportUserEventsResponse>): ImportUserEventsResponse {
    return ImportUserEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportUserEventsResponse>): ImportUserEventsResponse {
    const message = createBaseImportUserEventsResponse();
    message.errorSamples = object.errorSamples?.map((e) => Status.fromPartial(e)) || [];
    message.errorsConfig = (object.errorsConfig !== undefined && object.errorsConfig !== null)
      ? ImportErrorsConfig.fromPartial(object.errorsConfig)
      : undefined;
    message.importSummary = (object.importSummary !== undefined && object.importSummary !== null)
      ? UserEventImportSummary.fromPartial(object.importSummary)
      : undefined;
    return message;
  },
};

function createBaseUserEventImportSummary(): UserEventImportSummary {
  return { joinedEventsCount: Long.ZERO, unjoinedEventsCount: Long.ZERO };
}

export const UserEventImportSummary: MessageFns<UserEventImportSummary> = {
  encode(message: UserEventImportSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.joinedEventsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.joinedEventsCount.toString());
    }
    if (!message.unjoinedEventsCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.unjoinedEventsCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserEventImportSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserEventImportSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.joinedEventsCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.unjoinedEventsCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserEventImportSummary {
    return {
      joinedEventsCount: isSet(object.joinedEventsCount) ? Long.fromValue(object.joinedEventsCount) : Long.ZERO,
      unjoinedEventsCount: isSet(object.unjoinedEventsCount) ? Long.fromValue(object.unjoinedEventsCount) : Long.ZERO,
    };
  },

  toJSON(message: UserEventImportSummary): unknown {
    const obj: any = {};
    if (!message.joinedEventsCount.equals(Long.ZERO)) {
      obj.joinedEventsCount = (message.joinedEventsCount || Long.ZERO).toString();
    }
    if (!message.unjoinedEventsCount.equals(Long.ZERO)) {
      obj.unjoinedEventsCount = (message.unjoinedEventsCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<UserEventImportSummary>): UserEventImportSummary {
    return UserEventImportSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserEventImportSummary>): UserEventImportSummary {
    const message = createBaseUserEventImportSummary();
    message.joinedEventsCount = (object.joinedEventsCount !== undefined && object.joinedEventsCount !== null)
      ? Long.fromValue(object.joinedEventsCount)
      : Long.ZERO;
    message.unjoinedEventsCount = (object.unjoinedEventsCount !== undefined && object.unjoinedEventsCount !== null)
      ? Long.fromValue(object.unjoinedEventsCount)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
