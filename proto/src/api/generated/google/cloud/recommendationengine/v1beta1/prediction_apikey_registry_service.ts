// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommendationengine/v1beta1/prediction_apikey_registry_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";

export const protobufPackage = "google.cloud.recommendationengine.v1beta1";

/** Registered Api Key. */
export interface PredictionApiKeyRegistration {
  /** The API key. */
  apiKey: string;
}

/** Request message for the `CreatePredictionApiKeyRegistration` method. */
export interface CreatePredictionApiKeyRegistrationRequest {
  /**
   * Required. The parent resource path.
   * `projects/* /locations/global/catalogs/default_catalog/eventStores/default_event_store`.
   */
  parent: string;
  /** Required. The prediction API key registration. */
  predictionApiKeyRegistration: PredictionApiKeyRegistration | undefined;
}

/** Request message for the `ListPredictionApiKeyRegistrations`. */
export interface ListPredictionApiKeyRegistrationsRequest {
  /**
   * Required. The parent placement resource name such as
   * `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`
   */
  parent: string;
  /**
   * Optional. Maximum number of results to return per page. If unset, the
   * service will choose a reasonable default.
   */
  pageSize: number;
  /** Optional. The previous `ListPredictionApiKeyRegistration.nextPageToken`. */
  pageToken: string;
}

/** Response message for the `ListPredictionApiKeyRegistrations`. */
export interface ListPredictionApiKeyRegistrationsResponse {
  /** The list of registered API keys. */
  predictionApiKeyRegistrations: PredictionApiKeyRegistration[];
  /**
   * If empty, the list is complete. If nonempty, pass the token to the next
   * request's `ListPredictionApiKeysRegistrationsRequest.pageToken`.
   */
  nextPageToken: string;
}

/** Request message for `DeletePredictionApiKeyRegistration` method. */
export interface DeletePredictionApiKeyRegistrationRequest {
  /**
   * Required. The API key to unregister including full resource path.
   * `projects/* /locations/global/catalogs/default_catalog/eventStores/default_event_store/predictionApiKeyRegistrations/<YOUR_API_KEY>`
   */
  name: string;
}

function createBasePredictionApiKeyRegistration(): PredictionApiKeyRegistration {
  return { apiKey: "" };
}

export const PredictionApiKeyRegistration: MessageFns<PredictionApiKeyRegistration> = {
  encode(message: PredictionApiKeyRegistration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKey !== "") {
      writer.uint32(10).string(message.apiKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictionApiKeyRegistration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictionApiKeyRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictionApiKeyRegistration {
    return { apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "" };
  },

  toJSON(message: PredictionApiKeyRegistration): unknown {
    const obj: any = {};
    if (message.apiKey !== "") {
      obj.apiKey = message.apiKey;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictionApiKeyRegistration>): PredictionApiKeyRegistration {
    return PredictionApiKeyRegistration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictionApiKeyRegistration>): PredictionApiKeyRegistration {
    const message = createBasePredictionApiKeyRegistration();
    message.apiKey = object.apiKey ?? "";
    return message;
  },
};

function createBaseCreatePredictionApiKeyRegistrationRequest(): CreatePredictionApiKeyRegistrationRequest {
  return { parent: "", predictionApiKeyRegistration: undefined };
}

export const CreatePredictionApiKeyRegistrationRequest: MessageFns<CreatePredictionApiKeyRegistrationRequest> = {
  encode(message: CreatePredictionApiKeyRegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.predictionApiKeyRegistration !== undefined) {
      PredictionApiKeyRegistration.encode(message.predictionApiKeyRegistration, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePredictionApiKeyRegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePredictionApiKeyRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.predictionApiKeyRegistration = PredictionApiKeyRegistration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePredictionApiKeyRegistrationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      predictionApiKeyRegistration: isSet(object.predictionApiKeyRegistration)
        ? PredictionApiKeyRegistration.fromJSON(object.predictionApiKeyRegistration)
        : undefined,
    };
  },

  toJSON(message: CreatePredictionApiKeyRegistrationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.predictionApiKeyRegistration !== undefined) {
      obj.predictionApiKeyRegistration = PredictionApiKeyRegistration.toJSON(message.predictionApiKeyRegistration);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePredictionApiKeyRegistrationRequest>): CreatePredictionApiKeyRegistrationRequest {
    return CreatePredictionApiKeyRegistrationRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreatePredictionApiKeyRegistrationRequest>,
  ): CreatePredictionApiKeyRegistrationRequest {
    const message = createBaseCreatePredictionApiKeyRegistrationRequest();
    message.parent = object.parent ?? "";
    message.predictionApiKeyRegistration =
      (object.predictionApiKeyRegistration !== undefined && object.predictionApiKeyRegistration !== null)
        ? PredictionApiKeyRegistration.fromPartial(object.predictionApiKeyRegistration)
        : undefined;
    return message;
  },
};

function createBaseListPredictionApiKeyRegistrationsRequest(): ListPredictionApiKeyRegistrationsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPredictionApiKeyRegistrationsRequest: MessageFns<ListPredictionApiKeyRegistrationsRequest> = {
  encode(message: ListPredictionApiKeyRegistrationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPredictionApiKeyRegistrationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPredictionApiKeyRegistrationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPredictionApiKeyRegistrationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPredictionApiKeyRegistrationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPredictionApiKeyRegistrationsRequest>): ListPredictionApiKeyRegistrationsRequest {
    return ListPredictionApiKeyRegistrationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPredictionApiKeyRegistrationsRequest>): ListPredictionApiKeyRegistrationsRequest {
    const message = createBaseListPredictionApiKeyRegistrationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPredictionApiKeyRegistrationsResponse(): ListPredictionApiKeyRegistrationsResponse {
  return { predictionApiKeyRegistrations: [], nextPageToken: "" };
}

export const ListPredictionApiKeyRegistrationsResponse: MessageFns<ListPredictionApiKeyRegistrationsResponse> = {
  encode(message: ListPredictionApiKeyRegistrationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.predictionApiKeyRegistrations) {
      PredictionApiKeyRegistration.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPredictionApiKeyRegistrationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPredictionApiKeyRegistrationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.predictionApiKeyRegistrations.push(PredictionApiKeyRegistration.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPredictionApiKeyRegistrationsResponse {
    return {
      predictionApiKeyRegistrations: globalThis.Array.isArray(object?.predictionApiKeyRegistrations)
        ? object.predictionApiKeyRegistrations.map((e: any) => PredictionApiKeyRegistration.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPredictionApiKeyRegistrationsResponse): unknown {
    const obj: any = {};
    if (message.predictionApiKeyRegistrations?.length) {
      obj.predictionApiKeyRegistrations = message.predictionApiKeyRegistrations.map((e) =>
        PredictionApiKeyRegistration.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPredictionApiKeyRegistrationsResponse>): ListPredictionApiKeyRegistrationsResponse {
    return ListPredictionApiKeyRegistrationsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListPredictionApiKeyRegistrationsResponse>,
  ): ListPredictionApiKeyRegistrationsResponse {
    const message = createBaseListPredictionApiKeyRegistrationsResponse();
    message.predictionApiKeyRegistrations =
      object.predictionApiKeyRegistrations?.map((e) => PredictionApiKeyRegistration.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeletePredictionApiKeyRegistrationRequest(): DeletePredictionApiKeyRegistrationRequest {
  return { name: "" };
}

export const DeletePredictionApiKeyRegistrationRequest: MessageFns<DeletePredictionApiKeyRegistrationRequest> = {
  encode(message: DeletePredictionApiKeyRegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePredictionApiKeyRegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePredictionApiKeyRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePredictionApiKeyRegistrationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePredictionApiKeyRegistrationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePredictionApiKeyRegistrationRequest>): DeletePredictionApiKeyRegistrationRequest {
    return DeletePredictionApiKeyRegistrationRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeletePredictionApiKeyRegistrationRequest>,
  ): DeletePredictionApiKeyRegistrationRequest {
    const message = createBaseDeletePredictionApiKeyRegistrationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service for registering API keys for use with the `predict` method. If you
 * use an API key to request predictions, you must first register the API key.
 * Otherwise, your prediction request is rejected. If you use OAuth to
 * authenticate your `predict` method call, you do not need to register an API
 * key. You can register up to 20 API keys per project.
 */
export type PredictionApiKeyRegistryDefinition = typeof PredictionApiKeyRegistryDefinition;
export const PredictionApiKeyRegistryDefinition = {
  name: "PredictionApiKeyRegistry",
  fullName: "google.cloud.recommendationengine.v1beta1.PredictionApiKeyRegistry",
  methods: {
    /** Register an API key for use with predict method. */
    createPredictionApiKeyRegistration: {
      name: "CreatePredictionApiKeyRegistration",
      requestType: CreatePredictionApiKeyRegistrationRequest,
      requestStream: false,
      responseType: PredictionApiKeyRegistration,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              38,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              95,
              97,
              112,
              105,
              95,
              107,
              101,
              121,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              1,
              42,
              34,
              95,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              65,
              112,
              105,
              75,
              101,
              121,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** List the registered apiKeys for use with predict method. */
    listPredictionApiKeyRegistrations: {
      name: "ListPredictionApiKeyRegistrations",
      requestType: ListPredictionApiKeyRegistrationsRequest,
      requestStream: false,
      responseType: ListPredictionApiKeyRegistrationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              97,
              18,
              95,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              65,
              112,
              105,
              75,
              101,
              121,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Unregister an apiKey from using for predict method. */
    deletePredictionApiKeyRegistration: {
      name: "DeletePredictionApiKeyRegistration",
      requestType: DeletePredictionApiKeyRegistrationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              97,
              42,
              95,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              65,
              112,
              105,
              75,
              101,
              121,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PredictionApiKeyRegistryServiceImplementation<CallContextExt = {}> {
  /** Register an API key for use with predict method. */
  createPredictionApiKeyRegistration(
    request: CreatePredictionApiKeyRegistrationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PredictionApiKeyRegistration>>;
  /** List the registered apiKeys for use with predict method. */
  listPredictionApiKeyRegistrations(
    request: ListPredictionApiKeyRegistrationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPredictionApiKeyRegistrationsResponse>>;
  /** Unregister an apiKey from using for predict method. */
  deletePredictionApiKeyRegistration(
    request: DeletePredictionApiKeyRegistrationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface PredictionApiKeyRegistryClient<CallOptionsExt = {}> {
  /** Register an API key for use with predict method. */
  createPredictionApiKeyRegistration(
    request: DeepPartial<CreatePredictionApiKeyRegistrationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PredictionApiKeyRegistration>;
  /** List the registered apiKeys for use with predict method. */
  listPredictionApiKeyRegistrations(
    request: DeepPartial<ListPredictionApiKeyRegistrationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPredictionApiKeyRegistrationsResponse>;
  /** Unregister an apiKey from using for predict method. */
  deletePredictionApiKeyRegistration(
    request: DeepPartial<DeletePredictionApiKeyRegistrationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
