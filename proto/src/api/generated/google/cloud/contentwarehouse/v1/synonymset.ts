// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/synonymset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/**
 * Represents a list of synonyms for a given context.
 * For example a context "sales" could contain:
 * Synonym 1: sale, invoice, bill, order
 * Synonym 2: money, credit, finance, payment
 * Synonym 3: shipping, freight, transport
 * Each SynonymSets should be disjoint
 */
export interface SynonymSet {
  /**
   * The resource name of the SynonymSet
   * This is mandatory for google.api.resource.
   * Format:
   * projects/{project_number}/locations/{location}/synonymSets/{context}.
   */
  name: string;
  /**
   * This is a freeform field. Example contexts can be "sales," "engineering,"
   * "real estate," "accounting," etc.
   * The context can be supplied during search requests.
   */
  context: string;
  /** List of Synonyms for the context. */
  synonyms: SynonymSet_Synonym[];
}

/**
 * Represents a list of words given by the customer
 * All these words are synonyms of each other.
 */
export interface SynonymSet_Synonym {
  /** For example: sale, invoice, bill, order */
  words: string[];
}

function createBaseSynonymSet(): SynonymSet {
  return { name: "", context: "", synonyms: [] };
}

export const SynonymSet: MessageFns<SynonymSet> = {
  encode(message: SynonymSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.context !== "") {
      writer.uint32(18).string(message.context);
    }
    for (const v of message.synonyms) {
      SynonymSet_Synonym.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynonymSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynonymSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.context = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.synonyms.push(SynonymSet_Synonym.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynonymSet {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      context: isSet(object.context) ? globalThis.String(object.context) : "",
      synonyms: globalThis.Array.isArray(object?.synonyms)
        ? object.synonyms.map((e: any) => SynonymSet_Synonym.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SynonymSet): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.context !== "") {
      obj.context = message.context;
    }
    if (message.synonyms?.length) {
      obj.synonyms = message.synonyms.map((e) => SynonymSet_Synonym.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SynonymSet>): SynonymSet {
    return SynonymSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynonymSet>): SynonymSet {
    const message = createBaseSynonymSet();
    message.name = object.name ?? "";
    message.context = object.context ?? "";
    message.synonyms = object.synonyms?.map((e) => SynonymSet_Synonym.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSynonymSet_Synonym(): SynonymSet_Synonym {
  return { words: [] };
}

export const SynonymSet_Synonym: MessageFns<SynonymSet_Synonym> = {
  encode(message: SynonymSet_Synonym, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.words) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynonymSet_Synonym {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynonymSet_Synonym();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.words.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynonymSet_Synonym {
    return { words: globalThis.Array.isArray(object?.words) ? object.words.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: SynonymSet_Synonym): unknown {
    const obj: any = {};
    if (message.words?.length) {
      obj.words = message.words;
    }
    return obj;
  },

  create(base?: DeepPartial<SynonymSet_Synonym>): SynonymSet_Synonym {
    return SynonymSet_Synonym.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynonymSet_Synonym>): SynonymSet_Synonym {
    const message = createBaseSynonymSet_Synonym();
    message.words = object.words?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
