// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/synonymset_service_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { SynonymSet } from "./synonymset.js";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/** Request message for SynonymSetService.CreateSynonymSet. */
export interface CreateSynonymSetRequest {
  /**
   * Required. The parent name.
   * Format: projects/{project_number}/locations/{location}.
   */
  parent: string;
  /** Required. The synonymSet to be created for a context */
  synonymSet: SynonymSet | undefined;
}

/**
 * Request message for SynonymSetService.GetSynonymSet.
 * Will return synonymSet for a certain context.
 */
export interface GetSynonymSetRequest {
  /**
   * Required. The name of the synonymSet to retrieve
   * Format:
   * projects/{project_number}/locations/{location}/synonymSets/{context}.
   */
  name: string;
}

/**
 * Request message for SynonymSetService.ListSynonymSets.
 * Will return all synonymSets belonging to the customer project.
 */
export interface ListSynonymSetsRequest {
  /**
   * Required. The parent name.
   * Format: projects/{project_number}/locations/{location}.
   */
  parent: string;
  /**
   * The maximum number of synonymSets to return. The service may return
   * fewer than this value.
   * If unspecified, at most 50 rule sets will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListSynonymSets` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListSynonymSets`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for SynonymSetService.ListSynonymSets. */
export interface ListSynonymSetsResponse {
  /** The synonymSets from the specified parent. */
  synonymSets: SynonymSet[];
  /**
   * A page token, received from a previous `ListSynonymSets` call.
   * Provide this to retrieve the subsequent page.
   */
  nextPageToken: string;
}

/**
 * Request message for SynonymSetService.UpdateSynonymSet.
 * Removes the SynonymSet for the specified context and replaces
 * it with the SynonymSet in this request.
 */
export interface UpdateSynonymSetRequest {
  /**
   * Required. The name of the synonymSet to update
   * Format:
   * projects/{project_number}/locations/{location}/synonymSets/{context}.
   */
  name: string;
  /** Required. The synonymSet to be updated for the customer */
  synonymSet: SynonymSet | undefined;
}

/** Request message for SynonymSetService.DeleteSynonymSet. */
export interface DeleteSynonymSetRequest {
  /**
   * Required. The name of the synonymSet to delete
   * Format:
   * projects/{project_number}/locations/{location}/synonymSets/{context}.
   */
  name: string;
}

function createBaseCreateSynonymSetRequest(): CreateSynonymSetRequest {
  return { parent: "", synonymSet: undefined };
}

export const CreateSynonymSetRequest: MessageFns<CreateSynonymSetRequest> = {
  encode(message: CreateSynonymSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.synonymSet !== undefined) {
      SynonymSet.encode(message.synonymSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSynonymSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSynonymSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.synonymSet = SynonymSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSynonymSetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      synonymSet: isSet(object.synonymSet) ? SynonymSet.fromJSON(object.synonymSet) : undefined,
    };
  },

  toJSON(message: CreateSynonymSetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.synonymSet !== undefined) {
      obj.synonymSet = SynonymSet.toJSON(message.synonymSet);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSynonymSetRequest>): CreateSynonymSetRequest {
    return CreateSynonymSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSynonymSetRequest>): CreateSynonymSetRequest {
    const message = createBaseCreateSynonymSetRequest();
    message.parent = object.parent ?? "";
    message.synonymSet = (object.synonymSet !== undefined && object.synonymSet !== null)
      ? SynonymSet.fromPartial(object.synonymSet)
      : undefined;
    return message;
  },
};

function createBaseGetSynonymSetRequest(): GetSynonymSetRequest {
  return { name: "" };
}

export const GetSynonymSetRequest: MessageFns<GetSynonymSetRequest> = {
  encode(message: GetSynonymSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSynonymSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSynonymSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSynonymSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSynonymSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSynonymSetRequest>): GetSynonymSetRequest {
    return GetSynonymSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSynonymSetRequest>): GetSynonymSetRequest {
    const message = createBaseGetSynonymSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSynonymSetsRequest(): ListSynonymSetsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSynonymSetsRequest: MessageFns<ListSynonymSetsRequest> = {
  encode(message: ListSynonymSetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSynonymSetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSynonymSetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSynonymSetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSynonymSetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSynonymSetsRequest>): ListSynonymSetsRequest {
    return ListSynonymSetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSynonymSetsRequest>): ListSynonymSetsRequest {
    const message = createBaseListSynonymSetsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSynonymSetsResponse(): ListSynonymSetsResponse {
  return { synonymSets: [], nextPageToken: "" };
}

export const ListSynonymSetsResponse: MessageFns<ListSynonymSetsResponse> = {
  encode(message: ListSynonymSetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.synonymSets) {
      SynonymSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSynonymSetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSynonymSetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.synonymSets.push(SynonymSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSynonymSetsResponse {
    return {
      synonymSets: globalThis.Array.isArray(object?.synonymSets)
        ? object.synonymSets.map((e: any) => SynonymSet.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSynonymSetsResponse): unknown {
    const obj: any = {};
    if (message.synonymSets?.length) {
      obj.synonymSets = message.synonymSets.map((e) => SynonymSet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSynonymSetsResponse>): ListSynonymSetsResponse {
    return ListSynonymSetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSynonymSetsResponse>): ListSynonymSetsResponse {
    const message = createBaseListSynonymSetsResponse();
    message.synonymSets = object.synonymSets?.map((e) => SynonymSet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateSynonymSetRequest(): UpdateSynonymSetRequest {
  return { name: "", synonymSet: undefined };
}

export const UpdateSynonymSetRequest: MessageFns<UpdateSynonymSetRequest> = {
  encode(message: UpdateSynonymSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.synonymSet !== undefined) {
      SynonymSet.encode(message.synonymSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSynonymSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSynonymSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.synonymSet = SynonymSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSynonymSetRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      synonymSet: isSet(object.synonymSet) ? SynonymSet.fromJSON(object.synonymSet) : undefined,
    };
  },

  toJSON(message: UpdateSynonymSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.synonymSet !== undefined) {
      obj.synonymSet = SynonymSet.toJSON(message.synonymSet);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSynonymSetRequest>): UpdateSynonymSetRequest {
    return UpdateSynonymSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSynonymSetRequest>): UpdateSynonymSetRequest {
    const message = createBaseUpdateSynonymSetRequest();
    message.name = object.name ?? "";
    message.synonymSet = (object.synonymSet !== undefined && object.synonymSet !== null)
      ? SynonymSet.fromPartial(object.synonymSet)
      : undefined;
    return message;
  },
};

function createBaseDeleteSynonymSetRequest(): DeleteSynonymSetRequest {
  return { name: "" };
}

export const DeleteSynonymSetRequest: MessageFns<DeleteSynonymSetRequest> = {
  encode(message: DeleteSynonymSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSynonymSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSynonymSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSynonymSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSynonymSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSynonymSetRequest>): DeleteSynonymSetRequest {
    return DeleteSynonymSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSynonymSetRequest>): DeleteSynonymSetRequest {
    const message = createBaseDeleteSynonymSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
