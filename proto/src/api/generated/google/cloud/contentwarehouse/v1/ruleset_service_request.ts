// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/ruleset_service_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { RuleSet } from "./rule_engine.js";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/** Request message for RuleSetService.CreateRuleSet. */
export interface CreateRuleSetRequest {
  /**
   * Required. The parent name.
   * Format: projects/{project_number}/locations/{location}.
   */
  parent: string;
  /** Required. The rule set to create. */
  ruleSet: RuleSet | undefined;
}

/** Request message for RuleSetService.GetRuleSet. */
export interface GetRuleSetRequest {
  /**
   * Required. The name of the rule set to retrieve.
   * Format:
   * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
   */
  name: string;
}

/** Request message for RuleSetService.UpdateRuleSet. */
export interface UpdateRuleSetRequest {
  /**
   * Required. The name of the rule set to update.
   * Format:
   * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
   */
  name: string;
  /** Required. The rule set to update. */
  ruleSet: RuleSet | undefined;
}

/** Request message for RuleSetService.DeleteRuleSet. */
export interface DeleteRuleSetRequest {
  /**
   * Required. The name of the rule set to delete.
   * Format:
   * projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.
   */
  name: string;
}

/** Request message for RuleSetService.ListRuleSets. */
export interface ListRuleSetsRequest {
  /**
   * Required. The parent, which owns this collection of document.
   * Format: projects/{project_number}/locations/{location}.
   */
  parent: string;
  /**
   * The maximum number of rule sets to return. The service may return
   * fewer than this value.
   * If unspecified, at most 50 rule sets will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListRuleSets` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListRuleSets`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for RuleSetService.ListRuleSets. */
export interface ListRuleSetsResponse {
  /** The rule sets from the specified parent. */
  ruleSets: RuleSet[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseCreateRuleSetRequest(): CreateRuleSetRequest {
  return { parent: "", ruleSet: undefined };
}

export const CreateRuleSetRequest: MessageFns<CreateRuleSetRequest> = {
  encode(message: CreateRuleSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.ruleSet !== undefined) {
      RuleSet.encode(message.ruleSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRuleSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRuleSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ruleSet = RuleSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRuleSetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      ruleSet: isSet(object.ruleSet) ? RuleSet.fromJSON(object.ruleSet) : undefined,
    };
  },

  toJSON(message: CreateRuleSetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.ruleSet !== undefined) {
      obj.ruleSet = RuleSet.toJSON(message.ruleSet);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRuleSetRequest>): CreateRuleSetRequest {
    return CreateRuleSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRuleSetRequest>): CreateRuleSetRequest {
    const message = createBaseCreateRuleSetRequest();
    message.parent = object.parent ?? "";
    message.ruleSet = (object.ruleSet !== undefined && object.ruleSet !== null)
      ? RuleSet.fromPartial(object.ruleSet)
      : undefined;
    return message;
  },
};

function createBaseGetRuleSetRequest(): GetRuleSetRequest {
  return { name: "" };
}

export const GetRuleSetRequest: MessageFns<GetRuleSetRequest> = {
  encode(message: GetRuleSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRuleSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRuleSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRuleSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRuleSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRuleSetRequest>): GetRuleSetRequest {
    return GetRuleSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRuleSetRequest>): GetRuleSetRequest {
    const message = createBaseGetRuleSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateRuleSetRequest(): UpdateRuleSetRequest {
  return { name: "", ruleSet: undefined };
}

export const UpdateRuleSetRequest: MessageFns<UpdateRuleSetRequest> = {
  encode(message: UpdateRuleSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.ruleSet !== undefined) {
      RuleSet.encode(message.ruleSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRuleSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRuleSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ruleSet = RuleSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRuleSetRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ruleSet: isSet(object.ruleSet) ? RuleSet.fromJSON(object.ruleSet) : undefined,
    };
  },

  toJSON(message: UpdateRuleSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ruleSet !== undefined) {
      obj.ruleSet = RuleSet.toJSON(message.ruleSet);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRuleSetRequest>): UpdateRuleSetRequest {
    return UpdateRuleSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRuleSetRequest>): UpdateRuleSetRequest {
    const message = createBaseUpdateRuleSetRequest();
    message.name = object.name ?? "";
    message.ruleSet = (object.ruleSet !== undefined && object.ruleSet !== null)
      ? RuleSet.fromPartial(object.ruleSet)
      : undefined;
    return message;
  },
};

function createBaseDeleteRuleSetRequest(): DeleteRuleSetRequest {
  return { name: "" };
}

export const DeleteRuleSetRequest: MessageFns<DeleteRuleSetRequest> = {
  encode(message: DeleteRuleSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRuleSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRuleSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRuleSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRuleSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRuleSetRequest>): DeleteRuleSetRequest {
    return DeleteRuleSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRuleSetRequest>): DeleteRuleSetRequest {
    const message = createBaseDeleteRuleSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRuleSetsRequest(): ListRuleSetsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRuleSetsRequest: MessageFns<ListRuleSetsRequest> = {
  encode(message: ListRuleSetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRuleSetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRuleSetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRuleSetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRuleSetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRuleSetsRequest>): ListRuleSetsRequest {
    return ListRuleSetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRuleSetsRequest>): ListRuleSetsRequest {
    const message = createBaseListRuleSetsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRuleSetsResponse(): ListRuleSetsResponse {
  return { ruleSets: [], nextPageToken: "" };
}

export const ListRuleSetsResponse: MessageFns<ListRuleSetsResponse> = {
  encode(message: ListRuleSetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ruleSets) {
      RuleSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRuleSetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRuleSetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ruleSets.push(RuleSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRuleSetsResponse {
    return {
      ruleSets: globalThis.Array.isArray(object?.ruleSets) ? object.ruleSets.map((e: any) => RuleSet.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRuleSetsResponse): unknown {
    const obj: any = {};
    if (message.ruleSets?.length) {
      obj.ruleSets = message.ruleSets.map((e) => RuleSet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRuleSetsResponse>): ListRuleSetsResponse {
    return ListRuleSetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRuleSetsResponse>): ListRuleSetsResponse {
    const message = createBaseListRuleSetsResponse();
    message.ruleSets = object.ruleSets?.map((e) => RuleSet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
