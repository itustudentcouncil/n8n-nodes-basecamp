// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/document_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { ResponseMetadata } from "./common.js";
import { Document } from "./document.js";
import {
  CreateDocumentRequest,
  DeleteDocumentRequest,
  FetchAclRequest,
  GetDocumentRequest,
  LockDocumentRequest,
  SearchDocumentsRequest,
  SetAclRequest,
  UpdateDocumentRequest,
} from "./document_service_request.js";
import { HistogramQueryResult } from "./histogram.js";
import { RuleEngineOutput } from "./rule_engine.js";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/** Response message for DocumentService.CreateDocument. */
export interface CreateDocumentResponse {
  /** Document created after executing create request. */
  document:
    | Document
    | undefined;
  /**
   * Output from Rule Engine recording the rule evaluator and action executor's
   * output.
   *
   * Refer format in: google/cloud/contentwarehouse/v1/rule_engine.proto
   */
  ruleEngineOutput:
    | RuleEngineOutput
    | undefined;
  /**
   * Additional information for the API invocation, such as the request tracking
   * id.
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /** post-processing LROs */
  longRunningOperations: Operation[];
}

/** Response message for DocumentService.UpdateDocument. */
export interface UpdateDocumentResponse {
  /** Updated document after executing update request. */
  document:
    | Document
    | undefined;
  /**
   * Output from Rule Engine recording the rule evaluator and action executor's
   * output.
   *
   * Refer format in: google/cloud/contentwarehouse/v1/rule_engine.proto
   */
  ruleEngineOutput:
    | RuleEngineOutput
    | undefined;
  /**
   * Additional information for the API invocation, such as the request tracking
   * id.
   */
  metadata: ResponseMetadata | undefined;
}

/** Additional result info for the question-answering feature. */
export interface QAResult {
  /** Highlighted sections in the snippet. */
  highlights: QAResult_Highlight[];
  /**
   * The calibrated confidence score for this document, in the range
   * [0., 1.]. This represents the confidence level for whether the returned
   * document and snippet answers the user's query.
   */
  confidenceScore: number;
}

/**
 * A text span in the search text snippet that represents a highlighted
 * section (answer context, highly relevant sentence, etc.).
 */
export interface QAResult_Highlight {
  /** Start index of the highlight. */
  startIndex: number;
  /** End index of the highlight, exclusive. */
  endIndex: number;
}

/** Response message for DocumentService.SearchDocuments. */
export interface SearchDocumentsResponse {
  /**
   * The document entities that match the specified
   * [SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest].
   */
  matchingDocuments: SearchDocumentsResponse_MatchingDocument[];
  /**
   * The token that specifies the starting position of the next page of results.
   * This field is empty if there are no more results.
   */
  nextPageToken: string;
  /**
   * The total number of matched documents which is available only if the client
   * set
   * [SearchDocumentsRequest.require_total_size][google.cloud.contentwarehouse.v1.SearchDocumentsRequest.require_total_size]
   * to `true` or set
   * [SearchDocumentsRequest.total_result_size][google.cloud.contentwarehouse.v1.SearchDocumentsRequest.total_result_size]
   * to `ESTIMATED_SIZE` or `ACTUAL_SIZE`. Otherwise, the value will be `-1`.
   * Typically a UI would handle this condition by displaying &quot;of
   * many&quot;, for example: &quot;Displaying 10 of many&quot;.
   */
  totalSize: number;
  /**
   * Additional information for the API invocation, such as the request tracking
   * id.
   */
  metadata:
    | ResponseMetadata
    | undefined;
  /**
   * The histogram results that match with the specified
   * [SearchDocumentsRequest.histogram_queries][google.cloud.contentwarehouse.v1.SearchDocumentsRequest.histogram_queries].
   */
  histogramQueryResults: HistogramQueryResult[];
  /**
   * Experimental.
   * Question answer from the query against the document.
   */
  questionAnswer: string;
}

/**
 * Document entry with metadata inside
 * [SearchDocumentsResponse][google.cloud.contentwarehouse.v1.SearchDocumentsResponse]
 */
export interface SearchDocumentsResponse_MatchingDocument {
  /**
   * Document that matches the specified
   * [SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest].
   * This document only contains indexed metadata information.
   */
  document:
    | Document
    | undefined;
  /**
   * Contains snippets of text from the document full raw text that most
   * closely match a search query's keywords, if available. All HTML tags in
   * the original fields are stripped when returned in this field, and
   * matching query keywords are enclosed in HTML bold tags.
   *
   * If the question-answering feature is enabled, this field will instead
   * contain a snippet that answers the user's natural-language query. No HTML
   * bold tags will be present, and highlights in the answer snippet can be
   * found in
   * [QAResult.highlights][google.cloud.contentwarehouse.v1.QAResult.highlights].
   */
  searchTextSnippet: string;
  /**
   * Experimental.
   * Additional result info if the question-answering feature is enabled.
   */
  qaResult:
    | QAResult
    | undefined;
  /**
   * Return the 1-based page indices where those pages have one or more
   * matched tokens.
   */
  matchedTokenPageIndices: Long[];
}

/** Response message for DocumentService.FetchAcl. */
export interface FetchAclResponse {
  /** The IAM policy. */
  policy:
    | Policy
    | undefined;
  /**
   * Additional information for the API invocation, such as the request tracking
   * id.
   */
  metadata: ResponseMetadata | undefined;
}

/** Response message for DocumentService.SetAcl. */
export interface SetAclResponse {
  /** The policy will be attached to a resource (e.g. projecct, document). */
  policy:
    | Policy
    | undefined;
  /**
   * Additional information for the API invocation, such as the request tracking
   * id.
   */
  metadata: ResponseMetadata | undefined;
}

function createBaseCreateDocumentResponse(): CreateDocumentResponse {
  return { document: undefined, ruleEngineOutput: undefined, metadata: undefined, longRunningOperations: [] };
}

export const CreateDocumentResponse: MessageFns<CreateDocumentResponse> = {
  encode(message: CreateDocumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.ruleEngineOutput !== undefined) {
      RuleEngineOutput.encode(message.ruleEngineOutput, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    for (const v of message.longRunningOperations) {
      Operation.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDocumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ruleEngineOutput = RuleEngineOutput.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.longRunningOperations.push(Operation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDocumentResponse {
    return {
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      ruleEngineOutput: isSet(object.ruleEngineOutput) ? RuleEngineOutput.fromJSON(object.ruleEngineOutput) : undefined,
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
      longRunningOperations: globalThis.Array.isArray(object?.longRunningOperations)
        ? object.longRunningOperations.map((e: any) => Operation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateDocumentResponse): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.ruleEngineOutput !== undefined) {
      obj.ruleEngineOutput = RuleEngineOutput.toJSON(message.ruleEngineOutput);
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    if (message.longRunningOperations?.length) {
      obj.longRunningOperations = message.longRunningOperations.map((e) => Operation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDocumentResponse>): CreateDocumentResponse {
    return CreateDocumentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDocumentResponse>): CreateDocumentResponse {
    const message = createBaseCreateDocumentResponse();
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.ruleEngineOutput = (object.ruleEngineOutput !== undefined && object.ruleEngineOutput !== null)
      ? RuleEngineOutput.fromPartial(object.ruleEngineOutput)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    message.longRunningOperations = object.longRunningOperations?.map((e) => Operation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateDocumentResponse(): UpdateDocumentResponse {
  return { document: undefined, ruleEngineOutput: undefined, metadata: undefined };
}

export const UpdateDocumentResponse: MessageFns<UpdateDocumentResponse> = {
  encode(message: UpdateDocumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.ruleEngineOutput !== undefined) {
      RuleEngineOutput.encode(message.ruleEngineOutput, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDocumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ruleEngineOutput = RuleEngineOutput.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDocumentResponse {
    return {
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      ruleEngineOutput: isSet(object.ruleEngineOutput) ? RuleEngineOutput.fromJSON(object.ruleEngineOutput) : undefined,
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: UpdateDocumentResponse): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.ruleEngineOutput !== undefined) {
      obj.ruleEngineOutput = RuleEngineOutput.toJSON(message.ruleEngineOutput);
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDocumentResponse>): UpdateDocumentResponse {
    return UpdateDocumentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDocumentResponse>): UpdateDocumentResponse {
    const message = createBaseUpdateDocumentResponse();
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.ruleEngineOutput = (object.ruleEngineOutput !== undefined && object.ruleEngineOutput !== null)
      ? RuleEngineOutput.fromPartial(object.ruleEngineOutput)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseQAResult(): QAResult {
  return { highlights: [], confidenceScore: 0 };
}

export const QAResult: MessageFns<QAResult> = {
  encode(message: QAResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.highlights) {
      QAResult_Highlight.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.confidenceScore !== 0) {
      writer.uint32(21).float(message.confidenceScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QAResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQAResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.highlights.push(QAResult_Highlight.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidenceScore = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QAResult {
    return {
      highlights: globalThis.Array.isArray(object?.highlights)
        ? object.highlights.map((e: any) => QAResult_Highlight.fromJSON(e))
        : [],
      confidenceScore: isSet(object.confidenceScore) ? globalThis.Number(object.confidenceScore) : 0,
    };
  },

  toJSON(message: QAResult): unknown {
    const obj: any = {};
    if (message.highlights?.length) {
      obj.highlights = message.highlights.map((e) => QAResult_Highlight.toJSON(e));
    }
    if (message.confidenceScore !== 0) {
      obj.confidenceScore = message.confidenceScore;
    }
    return obj;
  },

  create(base?: DeepPartial<QAResult>): QAResult {
    return QAResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QAResult>): QAResult {
    const message = createBaseQAResult();
    message.highlights = object.highlights?.map((e) => QAResult_Highlight.fromPartial(e)) || [];
    message.confidenceScore = object.confidenceScore ?? 0;
    return message;
  },
};

function createBaseQAResult_Highlight(): QAResult_Highlight {
  return { startIndex: 0, endIndex: 0 };
}

export const QAResult_Highlight: MessageFns<QAResult_Highlight> = {
  encode(message: QAResult_Highlight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startIndex !== 0) {
      writer.uint32(8).int32(message.startIndex);
    }
    if (message.endIndex !== 0) {
      writer.uint32(16).int32(message.endIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QAResult_Highlight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQAResult_Highlight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.endIndex = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QAResult_Highlight {
    return {
      startIndex: isSet(object.startIndex) ? globalThis.Number(object.startIndex) : 0,
      endIndex: isSet(object.endIndex) ? globalThis.Number(object.endIndex) : 0,
    };
  },

  toJSON(message: QAResult_Highlight): unknown {
    const obj: any = {};
    if (message.startIndex !== 0) {
      obj.startIndex = Math.round(message.startIndex);
    }
    if (message.endIndex !== 0) {
      obj.endIndex = Math.round(message.endIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<QAResult_Highlight>): QAResult_Highlight {
    return QAResult_Highlight.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QAResult_Highlight>): QAResult_Highlight {
    const message = createBaseQAResult_Highlight();
    message.startIndex = object.startIndex ?? 0;
    message.endIndex = object.endIndex ?? 0;
    return message;
  },
};

function createBaseSearchDocumentsResponse(): SearchDocumentsResponse {
  return {
    matchingDocuments: [],
    nextPageToken: "",
    totalSize: 0,
    metadata: undefined,
    histogramQueryResults: [],
    questionAnswer: "",
  };
}

export const SearchDocumentsResponse: MessageFns<SearchDocumentsResponse> = {
  encode(message: SearchDocumentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.matchingDocuments) {
      SearchDocumentsResponse_MatchingDocument.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    for (const v of message.histogramQueryResults) {
      HistogramQueryResult.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.questionAnswer !== "") {
      writer.uint32(58).string(message.questionAnswer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchDocumentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchDocumentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matchingDocuments.push(SearchDocumentsResponse_MatchingDocument.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.histogramQueryResults.push(HistogramQueryResult.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.questionAnswer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchDocumentsResponse {
    return {
      matchingDocuments: globalThis.Array.isArray(object?.matchingDocuments)
        ? object.matchingDocuments.map((e: any) => SearchDocumentsResponse_MatchingDocument.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
      histogramQueryResults: globalThis.Array.isArray(object?.histogramQueryResults)
        ? object.histogramQueryResults.map((e: any) => HistogramQueryResult.fromJSON(e))
        : [],
      questionAnswer: isSet(object.questionAnswer) ? globalThis.String(object.questionAnswer) : "",
    };
  },

  toJSON(message: SearchDocumentsResponse): unknown {
    const obj: any = {};
    if (message.matchingDocuments?.length) {
      obj.matchingDocuments = message.matchingDocuments.map((e) => SearchDocumentsResponse_MatchingDocument.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    if (message.histogramQueryResults?.length) {
      obj.histogramQueryResults = message.histogramQueryResults.map((e) => HistogramQueryResult.toJSON(e));
    }
    if (message.questionAnswer !== "") {
      obj.questionAnswer = message.questionAnswer;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchDocumentsResponse>): SearchDocumentsResponse {
    return SearchDocumentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchDocumentsResponse>): SearchDocumentsResponse {
    const message = createBaseSearchDocumentsResponse();
    message.matchingDocuments =
      object.matchingDocuments?.map((e) => SearchDocumentsResponse_MatchingDocument.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    message.histogramQueryResults = object.histogramQueryResults?.map((e) => HistogramQueryResult.fromPartial(e)) || [];
    message.questionAnswer = object.questionAnswer ?? "";
    return message;
  },
};

function createBaseSearchDocumentsResponse_MatchingDocument(): SearchDocumentsResponse_MatchingDocument {
  return { document: undefined, searchTextSnippet: "", qaResult: undefined, matchedTokenPageIndices: [] };
}

export const SearchDocumentsResponse_MatchingDocument: MessageFns<SearchDocumentsResponse_MatchingDocument> = {
  encode(message: SearchDocumentsResponse_MatchingDocument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.searchTextSnippet !== "") {
      writer.uint32(18).string(message.searchTextSnippet);
    }
    if (message.qaResult !== undefined) {
      QAResult.encode(message.qaResult, writer.uint32(26).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.matchedTokenPageIndices) {
      writer.int64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchDocumentsResponse_MatchingDocument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchDocumentsResponse_MatchingDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.searchTextSnippet = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.qaResult = QAResult.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag === 32) {
            message.matchedTokenPageIndices.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.matchedTokenPageIndices.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchDocumentsResponse_MatchingDocument {
    return {
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      searchTextSnippet: isSet(object.searchTextSnippet) ? globalThis.String(object.searchTextSnippet) : "",
      qaResult: isSet(object.qaResult) ? QAResult.fromJSON(object.qaResult) : undefined,
      matchedTokenPageIndices: globalThis.Array.isArray(object?.matchedTokenPageIndices)
        ? object.matchedTokenPageIndices.map((e: any) => Long.fromValue(e))
        : [],
    };
  },

  toJSON(message: SearchDocumentsResponse_MatchingDocument): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.searchTextSnippet !== "") {
      obj.searchTextSnippet = message.searchTextSnippet;
    }
    if (message.qaResult !== undefined) {
      obj.qaResult = QAResult.toJSON(message.qaResult);
    }
    if (message.matchedTokenPageIndices?.length) {
      obj.matchedTokenPageIndices = message.matchedTokenPageIndices.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<SearchDocumentsResponse_MatchingDocument>): SearchDocumentsResponse_MatchingDocument {
    return SearchDocumentsResponse_MatchingDocument.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchDocumentsResponse_MatchingDocument>): SearchDocumentsResponse_MatchingDocument {
    const message = createBaseSearchDocumentsResponse_MatchingDocument();
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.searchTextSnippet = object.searchTextSnippet ?? "";
    message.qaResult = (object.qaResult !== undefined && object.qaResult !== null)
      ? QAResult.fromPartial(object.qaResult)
      : undefined;
    message.matchedTokenPageIndices = object.matchedTokenPageIndices?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

function createBaseFetchAclResponse(): FetchAclResponse {
  return { policy: undefined, metadata: undefined };
}

export const FetchAclResponse: MessageFns<FetchAclResponse> = {
  encode(message: FetchAclResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchAclResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchAclResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchAclResponse {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: FetchAclResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<FetchAclResponse>): FetchAclResponse {
    return FetchAclResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchAclResponse>): FetchAclResponse {
    const message = createBaseFetchAclResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetAclResponse(): SetAclResponse {
  return { policy: undefined, metadata: undefined };
}

export const SetAclResponse: MessageFns<SetAclResponse> = {
  encode(message: SetAclResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAclResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAclResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAclResponse {
    return {
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SetAclResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<SetAclResponse>): SetAclResponse {
    return SetAclResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetAclResponse>): SetAclResponse {
    const message = createBaseSetAclResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

/** This service lets you manage document. */
export type DocumentServiceDefinition = typeof DocumentServiceDefinition;
export const DocumentServiceDefinition = {
  name: "DocumentService",
  fullName: "google.cloud.contentwarehouse.v1.DocumentService",
  methods: {
    /** Creates a document. */
    createDocument: {
      name: "CreateDocument",
      requestType: CreateDocumentRequest,
      requestStream: false,
      responseType: CreateDocumentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 100, 111, 99, 117, 109, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              58,
              1,
              42,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a document. Returns NOT_FOUND if the document does not exist. */
    getDocument: {
      name: "GetDocument",
      requestType: GetDocumentRequest,
      requestStream: false,
      responseType: Document,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              122,
              58,
              1,
              42,
              90,
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              73,
              100,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a document. Returns INVALID_ARGUMENT if the name of the document
     * is non-empty and does not equal the existing name.
     */
    updateDocument: {
      name: "UpdateDocument",
      requestType: UpdateDocumentRequest,
      requestStream: false,
      responseType: UpdateDocumentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 110, 97, 109, 101, 44, 100, 111, 99, 117, 109, 101, 110, 116])],
          578365826: [
            Buffer.from([
              114,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              50,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              73,
              100,
              47,
              42,
              125,
              50,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a document. Returns NOT_FOUND if the document does not exist. */
    deleteDocument: {
      name: "DeleteDocument",
      requestType: DeleteDocumentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              128,
              1,
              58,
              1,
              42,
              90,
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              73,
              100,
              47,
              42,
              125,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Searches for documents using provided
     * [SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest].
     * This call only returns documents that the caller has permission to search
     * against.
     */
    searchDocuments: {
      name: "SearchDocuments",
      requestType: SearchDocumentsRequest,
      requestStream: false,
      responseType: SearchDocumentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Lock the document so the document cannot be updated by other users. */
    lockDocument: {
      name: "LockDocument",
      requestType: LockDocumentRequest,
      requestStream: false,
      responseType: Document,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              108,
              111,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a resource. Returns NOT_FOUND error if
     * the resource does not exist. Returns an empty policy if the resource exists
     * but does not have a policy set.
     */
    fetchAcl: {
      name: "FetchAcl",
      requestType: FetchAclRequest,
      requestStream: false,
      responseType: FetchAclResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              104,
              58,
              1,
              42,
              90,
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              65,
              99,
              108,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              65,
              99,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy for a resource. Replaces any existing
     * policy.
     */
    setAcl: {
      name: "SetAcl",
      requestType: SetAclRequest,
      requestStream: false,
      responseType: SetAclResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              100,
              58,
              1,
              42,
              90,
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              65,
              99,
              108,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              65,
              99,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DocumentServiceImplementation<CallContextExt = {}> {
  /** Creates a document. */
  createDocument(
    request: CreateDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateDocumentResponse>>;
  /** Gets a document. Returns NOT_FOUND if the document does not exist. */
  getDocument(request: GetDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Document>>;
  /**
   * Updates a document. Returns INVALID_ARGUMENT if the name of the document
   * is non-empty and does not equal the existing name.
   */
  updateDocument(
    request: UpdateDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateDocumentResponse>>;
  /** Deletes a document. Returns NOT_FOUND if the document does not exist. */
  deleteDocument(request: DeleteDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Searches for documents using provided
   * [SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest].
   * This call only returns documents that the caller has permission to search
   * against.
   */
  searchDocuments(
    request: SearchDocumentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchDocumentsResponse>>;
  /** Lock the document so the document cannot be updated by other users. */
  lockDocument(request: LockDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Document>>;
  /**
   * Gets the access control policy for a resource. Returns NOT_FOUND error if
   * the resource does not exist. Returns an empty policy if the resource exists
   * but does not have a policy set.
   */
  fetchAcl(request: FetchAclRequest, context: CallContext & CallContextExt): Promise<DeepPartial<FetchAclResponse>>;
  /**
   * Sets the access control policy for a resource. Replaces any existing
   * policy.
   */
  setAcl(request: SetAclRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SetAclResponse>>;
}

export interface DocumentServiceClient<CallOptionsExt = {}> {
  /** Creates a document. */
  createDocument(
    request: DeepPartial<CreateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateDocumentResponse>;
  /** Gets a document. Returns NOT_FOUND if the document does not exist. */
  getDocument(request: DeepPartial<GetDocumentRequest>, options?: CallOptions & CallOptionsExt): Promise<Document>;
  /**
   * Updates a document. Returns INVALID_ARGUMENT if the name of the document
   * is non-empty and does not equal the existing name.
   */
  updateDocument(
    request: DeepPartial<UpdateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateDocumentResponse>;
  /** Deletes a document. Returns NOT_FOUND if the document does not exist. */
  deleteDocument(request: DeepPartial<DeleteDocumentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Searches for documents using provided
   * [SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest].
   * This call only returns documents that the caller has permission to search
   * against.
   */
  searchDocuments(
    request: DeepPartial<SearchDocumentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchDocumentsResponse>;
  /** Lock the document so the document cannot be updated by other users. */
  lockDocument(request: DeepPartial<LockDocumentRequest>, options?: CallOptions & CallOptionsExt): Promise<Document>;
  /**
   * Gets the access control policy for a resource. Returns NOT_FOUND error if
   * the resource does not exist. Returns an empty policy if the resource exists
   * but does not have a policy set.
   */
  fetchAcl(request: DeepPartial<FetchAclRequest>, options?: CallOptions & CallOptionsExt): Promise<FetchAclResponse>;
  /**
   * Sets the access control policy for a resource. Replaces any existing
   * policy.
   */
  setAcl(request: DeepPartial<SetAclRequest>, options?: CallOptions & CallOptionsExt): Promise<SetAclResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
