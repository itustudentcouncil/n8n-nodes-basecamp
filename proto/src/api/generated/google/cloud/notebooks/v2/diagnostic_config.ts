// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v2/diagnostic_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.notebooks.v2";

/** Defines flags that are used to run the diagnostic tool */
export interface DiagnosticConfig {
  /**
   * Required. User Cloud Storage bucket location (REQUIRED).
   * Must be formatted with path prefix (`gs://$GCS_BUCKET`).
   *
   * Permissions:
   * User Managed Notebooks:
   * - storage.buckets.writer: Must be given to the project's service account
   *   attached to VM.
   * Google Managed Notebooks:
   * - storage.buckets.writer: Must be given to the project's service account or
   *   user credentials attached to VM depending on authentication mode.
   *
   * Cloud Storage bucket Log file will be written to
   * `gs://$GCS_BUCKET/$RELATIVE_PATH/$VM_DATE_$TIME.tar.gz`
   */
  gcsBucket: string;
  /**
   * Optional. Defines the relative storage path in the Cloud Storage bucket
   * where the diagnostic logs will be written: Default path will be the root
   * directory of the Cloud Storage bucket
   * (`gs://$GCS_BUCKET/$DATE_$TIME.tar.gz`) Example of full path where Log file
   * will be written: `gs://$GCS_BUCKET/$RELATIVE_PATH/`
   */
  relativePath: string;
  /** Optional. Enables flag to repair service for instance */
  enableRepairFlag: boolean;
  /** Optional. Enables flag to capture packets from the instance for 30 seconds */
  enablePacketCaptureFlag: boolean;
  /** Optional. Enables flag to copy all `/home/jupyter` folder contents */
  enableCopyHomeFilesFlag: boolean;
}

function createBaseDiagnosticConfig(): DiagnosticConfig {
  return {
    gcsBucket: "",
    relativePath: "",
    enableRepairFlag: false,
    enablePacketCaptureFlag: false,
    enableCopyHomeFilesFlag: false,
  };
}

export const DiagnosticConfig: MessageFns<DiagnosticConfig> = {
  encode(message: DiagnosticConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsBucket !== "") {
      writer.uint32(10).string(message.gcsBucket);
    }
    if (message.relativePath !== "") {
      writer.uint32(18).string(message.relativePath);
    }
    if (message.enableRepairFlag !== false) {
      writer.uint32(24).bool(message.enableRepairFlag);
    }
    if (message.enablePacketCaptureFlag !== false) {
      writer.uint32(32).bool(message.enablePacketCaptureFlag);
    }
    if (message.enableCopyHomeFilesFlag !== false) {
      writer.uint32(40).bool(message.enableCopyHomeFilesFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiagnosticConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiagnosticConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsBucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relativePath = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableRepairFlag = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enablePacketCaptureFlag = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.enableCopyHomeFilesFlag = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiagnosticConfig {
    return {
      gcsBucket: isSet(object.gcsBucket) ? globalThis.String(object.gcsBucket) : "",
      relativePath: isSet(object.relativePath) ? globalThis.String(object.relativePath) : "",
      enableRepairFlag: isSet(object.enableRepairFlag) ? globalThis.Boolean(object.enableRepairFlag) : false,
      enablePacketCaptureFlag: isSet(object.enablePacketCaptureFlag)
        ? globalThis.Boolean(object.enablePacketCaptureFlag)
        : false,
      enableCopyHomeFilesFlag: isSet(object.enableCopyHomeFilesFlag)
        ? globalThis.Boolean(object.enableCopyHomeFilesFlag)
        : false,
    };
  },

  toJSON(message: DiagnosticConfig): unknown {
    const obj: any = {};
    if (message.gcsBucket !== "") {
      obj.gcsBucket = message.gcsBucket;
    }
    if (message.relativePath !== "") {
      obj.relativePath = message.relativePath;
    }
    if (message.enableRepairFlag !== false) {
      obj.enableRepairFlag = message.enableRepairFlag;
    }
    if (message.enablePacketCaptureFlag !== false) {
      obj.enablePacketCaptureFlag = message.enablePacketCaptureFlag;
    }
    if (message.enableCopyHomeFilesFlag !== false) {
      obj.enableCopyHomeFilesFlag = message.enableCopyHomeFilesFlag;
    }
    return obj;
  },

  create(base?: DeepPartial<DiagnosticConfig>): DiagnosticConfig {
    return DiagnosticConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiagnosticConfig>): DiagnosticConfig {
    const message = createBaseDiagnosticConfig();
    message.gcsBucket = object.gcsBucket ?? "";
    message.relativePath = object.relativePath ?? "";
    message.enableRepairFlag = object.enableRepairFlag ?? false;
    message.enablePacketCaptureFlag = object.enablePacketCaptureFlag ?? false;
    message.enableCopyHomeFilesFlag = object.enableCopyHomeFilesFlag ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
