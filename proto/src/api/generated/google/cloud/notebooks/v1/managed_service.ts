// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v1/managed_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DiagnosticConfig } from "./diagnostic_config.js";
import { Event } from "./event.js";
import { Runtime, RuntimeAcceleratorConfig } from "./runtime.js";

export const protobufPackage = "google.cloud.notebooks.v1";

/** Request for listing Managed Notebook Runtimes. */
export interface ListRuntimesRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   */
  pageToken: string;
}

/** Response for listing Managed Notebook Runtimes. */
export interface ListRuntimesResponse {
  /** A list of returned Runtimes. */
  runtimes: Runtime[];
  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   */
  nextPageToken: string;
  /**
   * Locations that could not be reached. For example,
   * `['us-west1', 'us-central1']`.
   * A ListRuntimesResponse will only contain either runtimes or unreachables,
   */
  unreachable: string[];
}

/** Request for getting a Managed Notebook Runtime. */
export interface GetRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
}

/** Request for creating a Managed Notebook Runtime. */
export interface CreateRuntimeRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Required. User-defined unique ID of this Runtime. */
  runtimeId: string;
  /** Required. The Runtime to be created. */
  runtime:
    | Runtime
    | undefined;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for deleting a Managed Notebook Runtime. */
export interface DeleteRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for starting a Managed Notebook Runtime. */
export interface StartRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for stopping a Managed Notebook Runtime. */
export interface StopRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for switching a Managed Notebook Runtime. */
export interface SwitchRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /** machine type. */
  machineType: string;
  /** accelerator config. */
  acceleratorConfig:
    | RuntimeAcceleratorConfig
    | undefined;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for resetting a Managed Notebook Runtime. */
export interface ResetRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /** Idempotent request UUID. */
  requestId: string;
}

/**
 * Request for upgrading a Managed Notebook Runtime to the latest version.
 * option (google.api.message_visibility).restriction =
 *     "TRUSTED_TESTER,SPECIAL_TESTER";
 */
export interface UpgradeRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for reporting a Managed Notebook Event. */
export interface ReportRuntimeEventRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   */
  vmId: string;
  /** Required. The Event to be reported. */
  event: Event | undefined;
}

/** Request for updating a Managed Notebook configuration. */
export interface UpdateRuntimeRequest {
  /** Required. The Runtime to be updated. */
  runtime:
    | Runtime
    | undefined;
  /**
   * Required. Specifies the path, relative to `Runtime`, of
   * the field to update. For example, to change the software configuration
   * kernels, the `update_mask` parameter would be
   * specified as `software_config.kernels`,
   * and the `PATCH` request body would specify the new value, as follows:
   *
   *     {
   *       "software_config":{
   *         "kernels": [{
   *            'repository':
   *            'gcr.io/deeplearning-platform-release/pytorch-gpu', 'tag':
   *            'latest' }],
   *         }
   *     }
   *
   * Currently, only the following fields can be updated:
   * - `software_config.kernels`
   * - `software_config.post_startup_script`
   * - `software_config.custom_gpu_driver_path`
   * - `software_config.idle_shutdown`
   * - `software_config.idle_shutdown_timeout`
   * - `software_config.disable_terminal`
   */
  updateMask:
    | string[]
    | undefined;
  /** Idempotent request UUID. */
  requestId: string;
}

/** Request for getting a new access token. */
export interface RefreshRuntimeTokenInternalRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtime_id}`
   */
  name: string;
  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   */
  vmId: string;
}

/** Response with a new access token. */
export interface RefreshRuntimeTokenInternalResponse {
  /** The OAuth 2.0 access token. */
  accessToken: string;
  /** Output only. Token expiration time. */
  expireTime: Date | undefined;
}

/** Request for creating a notebook instance diagnostic file. */
export interface DiagnoseRuntimeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/runtimes/{runtimes_id}`
   */
  name: string;
  /** Required. Defines flags that are used to run the diagnostic tool */
  diagnosticConfig: DiagnosticConfig | undefined;
}

function createBaseListRuntimesRequest(): ListRuntimesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRuntimesRequest: MessageFns<ListRuntimesRequest> = {
  encode(message: ListRuntimesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRuntimesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRuntimesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRuntimesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRuntimesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRuntimesRequest>): ListRuntimesRequest {
    return ListRuntimesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRuntimesRequest>): ListRuntimesRequest {
    const message = createBaseListRuntimesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRuntimesResponse(): ListRuntimesResponse {
  return { runtimes: [], nextPageToken: "", unreachable: [] };
}

export const ListRuntimesResponse: MessageFns<ListRuntimesResponse> = {
  encode(message: ListRuntimesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.runtimes) {
      Runtime.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRuntimesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRuntimesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runtimes.push(Runtime.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRuntimesResponse {
    return {
      runtimes: globalThis.Array.isArray(object?.runtimes) ? object.runtimes.map((e: any) => Runtime.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRuntimesResponse): unknown {
    const obj: any = {};
    if (message.runtimes?.length) {
      obj.runtimes = message.runtimes.map((e) => Runtime.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRuntimesResponse>): ListRuntimesResponse {
    return ListRuntimesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRuntimesResponse>): ListRuntimesResponse {
    const message = createBaseListRuntimesResponse();
    message.runtimes = object.runtimes?.map((e) => Runtime.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetRuntimeRequest(): GetRuntimeRequest {
  return { name: "" };
}

export const GetRuntimeRequest: MessageFns<GetRuntimeRequest> = {
  encode(message: GetRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRuntimeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRuntimeRequest>): GetRuntimeRequest {
    return GetRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRuntimeRequest>): GetRuntimeRequest {
    const message = createBaseGetRuntimeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRuntimeRequest(): CreateRuntimeRequest {
  return { parent: "", runtimeId: "", runtime: undefined, requestId: "" };
}

export const CreateRuntimeRequest: MessageFns<CreateRuntimeRequest> = {
  encode(message: CreateRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.runtimeId !== "") {
      writer.uint32(18).string(message.runtimeId);
    }
    if (message.runtime !== undefined) {
      Runtime.encode(message.runtime, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runtimeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.runtime = Runtime.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRuntimeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      runtimeId: isSet(object.runtimeId) ? globalThis.String(object.runtimeId) : "",
      runtime: isSet(object.runtime) ? Runtime.fromJSON(object.runtime) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateRuntimeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.runtimeId !== "") {
      obj.runtimeId = message.runtimeId;
    }
    if (message.runtime !== undefined) {
      obj.runtime = Runtime.toJSON(message.runtime);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRuntimeRequest>): CreateRuntimeRequest {
    return CreateRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRuntimeRequest>): CreateRuntimeRequest {
    const message = createBaseCreateRuntimeRequest();
    message.parent = object.parent ?? "";
    message.runtimeId = object.runtimeId ?? "";
    message.runtime = (object.runtime !== undefined && object.runtime !== null)
      ? Runtime.fromPartial(object.runtime)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteRuntimeRequest(): DeleteRuntimeRequest {
  return { name: "", requestId: "" };
}

export const DeleteRuntimeRequest: MessageFns<DeleteRuntimeRequest> = {
  encode(message: DeleteRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRuntimeRequest>): DeleteRuntimeRequest {
    return DeleteRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRuntimeRequest>): DeleteRuntimeRequest {
    const message = createBaseDeleteRuntimeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseStartRuntimeRequest(): StartRuntimeRequest {
  return { name: "", requestId: "" };
}

export const StartRuntimeRequest: MessageFns<StartRuntimeRequest> = {
  encode(message: StartRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: StartRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<StartRuntimeRequest>): StartRuntimeRequest {
    return StartRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartRuntimeRequest>): StartRuntimeRequest {
    const message = createBaseStartRuntimeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseStopRuntimeRequest(): StopRuntimeRequest {
  return { name: "", requestId: "" };
}

export const StopRuntimeRequest: MessageFns<StopRuntimeRequest> = {
  encode(message: StopRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: StopRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<StopRuntimeRequest>): StopRuntimeRequest {
    return StopRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopRuntimeRequest>): StopRuntimeRequest {
    const message = createBaseStopRuntimeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseSwitchRuntimeRequest(): SwitchRuntimeRequest {
  return { name: "", machineType: "", acceleratorConfig: undefined, requestId: "" };
}

export const SwitchRuntimeRequest: MessageFns<SwitchRuntimeRequest> = {
  encode(message: SwitchRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.machineType !== "") {
      writer.uint32(18).string(message.machineType);
    }
    if (message.acceleratorConfig !== undefined) {
      RuntimeAcceleratorConfig.encode(message.acceleratorConfig, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SwitchRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitchRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.machineType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.acceleratorConfig = RuntimeAcceleratorConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwitchRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
      acceleratorConfig: isSet(object.acceleratorConfig)
        ? RuntimeAcceleratorConfig.fromJSON(object.acceleratorConfig)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: SwitchRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    if (message.acceleratorConfig !== undefined) {
      obj.acceleratorConfig = RuntimeAcceleratorConfig.toJSON(message.acceleratorConfig);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<SwitchRuntimeRequest>): SwitchRuntimeRequest {
    return SwitchRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SwitchRuntimeRequest>): SwitchRuntimeRequest {
    const message = createBaseSwitchRuntimeRequest();
    message.name = object.name ?? "";
    message.machineType = object.machineType ?? "";
    message.acceleratorConfig = (object.acceleratorConfig !== undefined && object.acceleratorConfig !== null)
      ? RuntimeAcceleratorConfig.fromPartial(object.acceleratorConfig)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseResetRuntimeRequest(): ResetRuntimeRequest {
  return { name: "", requestId: "" };
}

export const ResetRuntimeRequest: MessageFns<ResetRuntimeRequest> = {
  encode(message: ResetRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: ResetRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetRuntimeRequest>): ResetRuntimeRequest {
    return ResetRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetRuntimeRequest>): ResetRuntimeRequest {
    const message = createBaseResetRuntimeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpgradeRuntimeRequest(): UpgradeRuntimeRequest {
  return { name: "", requestId: "" };
}

export const UpgradeRuntimeRequest: MessageFns<UpgradeRuntimeRequest> = {
  encode(message: UpgradeRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpgradeRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeRuntimeRequest>): UpgradeRuntimeRequest {
    return UpgradeRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeRuntimeRequest>): UpgradeRuntimeRequest {
    const message = createBaseUpgradeRuntimeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseReportRuntimeEventRequest(): ReportRuntimeEventRequest {
  return { name: "", vmId: "", event: undefined };
}

export const ReportRuntimeEventRequest: MessageFns<ReportRuntimeEventRequest> = {
  encode(message: ReportRuntimeEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vmId !== "") {
      writer.uint32(18).string(message.vmId);
    }
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportRuntimeEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportRuntimeEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportRuntimeEventRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vmId: isSet(object.vmId) ? globalThis.String(object.vmId) : "",
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: ReportRuntimeEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vmId !== "") {
      obj.vmId = message.vmId;
    }
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportRuntimeEventRequest>): ReportRuntimeEventRequest {
    return ReportRuntimeEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportRuntimeEventRequest>): ReportRuntimeEventRequest {
    const message = createBaseReportRuntimeEventRequest();
    message.name = object.name ?? "";
    message.vmId = object.vmId ?? "";
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

function createBaseUpdateRuntimeRequest(): UpdateRuntimeRequest {
  return { runtime: undefined, updateMask: undefined, requestId: "" };
}

export const UpdateRuntimeRequest: MessageFns<UpdateRuntimeRequest> = {
  encode(message: UpdateRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.runtime !== undefined) {
      Runtime.encode(message.runtime, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runtime = Runtime.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRuntimeRequest {
    return {
      runtime: isSet(object.runtime) ? Runtime.fromJSON(object.runtime) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateRuntimeRequest): unknown {
    const obj: any = {};
    if (message.runtime !== undefined) {
      obj.runtime = Runtime.toJSON(message.runtime);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRuntimeRequest>): UpdateRuntimeRequest {
    return UpdateRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRuntimeRequest>): UpdateRuntimeRequest {
    const message = createBaseUpdateRuntimeRequest();
    message.runtime = (object.runtime !== undefined && object.runtime !== null)
      ? Runtime.fromPartial(object.runtime)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseRefreshRuntimeTokenInternalRequest(): RefreshRuntimeTokenInternalRequest {
  return { name: "", vmId: "" };
}

export const RefreshRuntimeTokenInternalRequest: MessageFns<RefreshRuntimeTokenInternalRequest> = {
  encode(message: RefreshRuntimeTokenInternalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vmId !== "") {
      writer.uint32(18).string(message.vmId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshRuntimeTokenInternalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshRuntimeTokenInternalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshRuntimeTokenInternalRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vmId: isSet(object.vmId) ? globalThis.String(object.vmId) : "",
    };
  },

  toJSON(message: RefreshRuntimeTokenInternalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vmId !== "") {
      obj.vmId = message.vmId;
    }
    return obj;
  },

  create(base?: DeepPartial<RefreshRuntimeTokenInternalRequest>): RefreshRuntimeTokenInternalRequest {
    return RefreshRuntimeTokenInternalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefreshRuntimeTokenInternalRequest>): RefreshRuntimeTokenInternalRequest {
    const message = createBaseRefreshRuntimeTokenInternalRequest();
    message.name = object.name ?? "";
    message.vmId = object.vmId ?? "";
    return message;
  },
};

function createBaseRefreshRuntimeTokenInternalResponse(): RefreshRuntimeTokenInternalResponse {
  return { accessToken: "", expireTime: undefined };
}

export const RefreshRuntimeTokenInternalResponse: MessageFns<RefreshRuntimeTokenInternalResponse> = {
  encode(message: RefreshRuntimeTokenInternalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshRuntimeTokenInternalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshRuntimeTokenInternalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshRuntimeTokenInternalResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: RefreshRuntimeTokenInternalResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RefreshRuntimeTokenInternalResponse>): RefreshRuntimeTokenInternalResponse {
    return RefreshRuntimeTokenInternalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefreshRuntimeTokenInternalResponse>): RefreshRuntimeTokenInternalResponse {
    const message = createBaseRefreshRuntimeTokenInternalResponse();
    message.accessToken = object.accessToken ?? "";
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseDiagnoseRuntimeRequest(): DiagnoseRuntimeRequest {
  return { name: "", diagnosticConfig: undefined };
}

export const DiagnoseRuntimeRequest: MessageFns<DiagnoseRuntimeRequest> = {
  encode(message: DiagnoseRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.diagnosticConfig !== undefined) {
      DiagnosticConfig.encode(message.diagnosticConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiagnoseRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiagnoseRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.diagnosticConfig = DiagnosticConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiagnoseRuntimeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      diagnosticConfig: isSet(object.diagnosticConfig) ? DiagnosticConfig.fromJSON(object.diagnosticConfig) : undefined,
    };
  },

  toJSON(message: DiagnoseRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.diagnosticConfig !== undefined) {
      obj.diagnosticConfig = DiagnosticConfig.toJSON(message.diagnosticConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<DiagnoseRuntimeRequest>): DiagnoseRuntimeRequest {
    return DiagnoseRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiagnoseRuntimeRequest>): DiagnoseRuntimeRequest {
    const message = createBaseDiagnoseRuntimeRequest();
    message.name = object.name ?? "";
    message.diagnosticConfig = (object.diagnosticConfig !== undefined && object.diagnosticConfig !== null)
      ? DiagnosticConfig.fromPartial(object.diagnosticConfig)
      : undefined;
    return message;
  },
};

/** API v1 service for Managed Notebooks. */
export type ManagedNotebookServiceDefinition = typeof ManagedNotebookServiceDefinition;
export const ManagedNotebookServiceDefinition = {
  name: "ManagedNotebookService",
  fullName: "google.cloud.notebooks.v1.ManagedNotebookService",
  methods: {
    /** Lists Runtimes in a given project and location. */
    listRuntimes: {
      name: "ListRuntimes",
      requestType: ListRuntimesRequest,
      requestStream: false,
      responseType: ListRuntimesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets details of a single Runtime. The location must be a regional endpoint
     * rather than zonal.
     */
    getRuntime: {
      name: "GetRuntime",
      requestType: GetRuntimeRequest,
      requestStream: false,
      responseType: Runtime,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Runtime in a given project and location. */
    createRuntime: {
      name: "CreateRuntime",
      requestType: CreateRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              105,
              100,
              44,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Update Notebook Runtime configuration. */
    updateRuntime: {
      name: "UpdateRuntime",
      requestType: UpdateRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              7,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              50,
              52,
              47,
              118,
              49,
              47,
              123,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Runtime. */
    deleteRuntime: {
      name: "DeleteRuntime",
      requestType: DeleteRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a Managed Notebook Runtime.
     * Perform "Start" on GPU instances; "Resume" on CPU instances
     * See:
     * https://cloud.google.com/compute/docs/instances/stop-start-instance
     * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
     */
    startRuntime: {
      name: "StartRuntime",
      requestType: StartRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Stops a Managed Notebook Runtime.
     * Perform "Stop" on GPU instances; "Suspend" on CPU instances
     * See:
     * https://cloud.google.com/compute/docs/instances/stop-start-instance
     * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
     */
    stopRuntime: {
      name: "StopRuntime",
      requestType: StopRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
    /** Switch a Managed Notebook Runtime. */
    switchRuntime: {
      name: "SwitchRuntime",
      requestType: SwitchRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              119,
              105,
              116,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Resets a Managed Notebook Runtime. */
    resetRuntime: {
      name: "ResetRuntime",
      requestType: ResetRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /** Upgrades a Managed Notebook Runtime to the latest version. */
    upgradeRuntime: {
      name: "UpgradeRuntime",
      requestType: UpgradeRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
            ]),
          ],
        },
      },
    },
    /** Report and process a runtime event. */
    reportRuntimeEvent: {
      name: "ReportRuntimeEvent",
      requestType: ReportRuntimeEventRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
              69,
              118,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an access token for the consumer service account that the customer
     * attached to the runtime. Only accessible from the tenant instance.
     */
    refreshRuntimeTokenInternal: {
      name: "RefreshRuntimeTokenInternal",
      requestType: RefreshRuntimeTokenInternalRequest,
      requestStream: false,
      responseType: RefreshRuntimeTokenInternalResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 118, 109, 95, 105, 100])],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              102,
              114,
              101,
              115,
              104,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              111,
              107,
              101,
              110,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
            ]),
          ],
        },
      },
    },
    /** Creates a Diagnostic File and runs Diagnostic Tool given a Runtime. */
    diagnoseRuntime: {
      name: "DiagnoseRuntime",
      requestType: DiagnoseRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              110,
              97,
              109,
              101,
              44,
              100,
              105,
              97,
              103,
              110,
              111,
              115,
              116,
              105,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              97,
              103,
              110,
              111,
              115,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ManagedNotebookServiceImplementation<CallContextExt = {}> {
  /** Lists Runtimes in a given project and location. */
  listRuntimes(
    request: ListRuntimesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRuntimesResponse>>;
  /**
   * Gets details of a single Runtime. The location must be a regional endpoint
   * rather than zonal.
   */
  getRuntime(request: GetRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Runtime>>;
  /** Creates a new Runtime in a given project and location. */
  createRuntime(request: CreateRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Update Notebook Runtime configuration. */
  updateRuntime(request: UpdateRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a single Runtime. */
  deleteRuntime(request: DeleteRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Starts a Managed Notebook Runtime.
   * Perform "Start" on GPU instances; "Resume" on CPU instances
   * See:
   * https://cloud.google.com/compute/docs/instances/stop-start-instance
   * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
   */
  startRuntime(request: StartRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Stops a Managed Notebook Runtime.
   * Perform "Stop" on GPU instances; "Suspend" on CPU instances
   * See:
   * https://cloud.google.com/compute/docs/instances/stop-start-instance
   * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
   */
  stopRuntime(request: StopRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Switch a Managed Notebook Runtime. */
  switchRuntime(request: SwitchRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Resets a Managed Notebook Runtime. */
  resetRuntime(request: ResetRuntimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Upgrades a Managed Notebook Runtime to the latest version. */
  upgradeRuntime(
    request: UpgradeRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Report and process a runtime event. */
  reportRuntimeEvent(
    request: ReportRuntimeEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets an access token for the consumer service account that the customer
   * attached to the runtime. Only accessible from the tenant instance.
   */
  refreshRuntimeTokenInternal(
    request: RefreshRuntimeTokenInternalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RefreshRuntimeTokenInternalResponse>>;
  /** Creates a Diagnostic File and runs Diagnostic Tool given a Runtime. */
  diagnoseRuntime(
    request: DiagnoseRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ManagedNotebookServiceClient<CallOptionsExt = {}> {
  /** Lists Runtimes in a given project and location. */
  listRuntimes(
    request: DeepPartial<ListRuntimesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRuntimesResponse>;
  /**
   * Gets details of a single Runtime. The location must be a regional endpoint
   * rather than zonal.
   */
  getRuntime(request: DeepPartial<GetRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Runtime>;
  /** Creates a new Runtime in a given project and location. */
  createRuntime(request: DeepPartial<CreateRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Update Notebook Runtime configuration. */
  updateRuntime(request: DeepPartial<UpdateRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a single Runtime. */
  deleteRuntime(request: DeepPartial<DeleteRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Starts a Managed Notebook Runtime.
   * Perform "Start" on GPU instances; "Resume" on CPU instances
   * See:
   * https://cloud.google.com/compute/docs/instances/stop-start-instance
   * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
   */
  startRuntime(request: DeepPartial<StartRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Stops a Managed Notebook Runtime.
   * Perform "Stop" on GPU instances; "Suspend" on CPU instances
   * See:
   * https://cloud.google.com/compute/docs/instances/stop-start-instance
   * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
   */
  stopRuntime(request: DeepPartial<StopRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Switch a Managed Notebook Runtime. */
  switchRuntime(request: DeepPartial<SwitchRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Resets a Managed Notebook Runtime. */
  resetRuntime(request: DeepPartial<ResetRuntimeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Upgrades a Managed Notebook Runtime to the latest version. */
  upgradeRuntime(
    request: DeepPartial<UpgradeRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Report and process a runtime event. */
  reportRuntimeEvent(
    request: DeepPartial<ReportRuntimeEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets an access token for the consumer service account that the customer
   * attached to the runtime. Only accessible from the tenant instance.
   */
  refreshRuntimeTokenInternal(
    request: DeepPartial<RefreshRuntimeTokenInternalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RefreshRuntimeTokenInternalResponse>;
  /** Creates a Diagnostic File and runs Diagnostic Tool given a Runtime. */
  diagnoseRuntime(
    request: DeepPartial<DiagnoseRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
