// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v1/schedule.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Execution, ExecutionTemplate } from "./execution.js";

export const protobufPackage = "google.cloud.notebooks.v1";

/** The definition of a schedule. */
export interface Schedule {
  /**
   * Output only. The name of this schedule. Format:
   * `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   */
  name: string;
  /**
   * Output only. Display name used for UI purposes.
   * Name can only contain alphanumeric characters, hyphens `-`,
   * and underscores `_`.
   */
  displayName: string;
  /** A brief description of this environment. */
  description: string;
  state: Schedule_State;
  /**
   * Cron-tab formatted schedule by which the job will execute.
   * Format: minute, hour, day of month, month, day of week,
   * e.g. `0 0 * * WED` = every Wednesday
   * More examples: https://crontab.guru/examples.html
   */
  cronSchedule: string;
  /**
   * Timezone on which the cron_schedule.
   * The value of this field must be a time zone name from the tz database.
   * TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
   *
   * Note that some time zones include a provision for daylight savings time.
   * The rules for daylight saving time are determined by the chosen tz.
   * For UTC use the string "utc". If a time zone is not specified,
   * the default will be in UTC (also known as GMT).
   */
  timeZone: string;
  /** Output only. Time the schedule was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time the schedule was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Notebook Execution Template corresponding to this schedule. */
  executionTemplate:
    | ExecutionTemplate
    | undefined;
  /**
   * Output only. The most recent execution names triggered from this schedule and their
   * corresponding states.
   */
  recentExecutions: Execution[];
}

/** State of the job. */
export enum Schedule_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** ENABLED - The job is executing normally. */
  ENABLED = 1,
  /**
   * PAUSED - The job is paused by the user. It will not execute. A user can
   * intentionally pause the job using
   * [PauseJobRequest][].
   */
  PAUSED = 2,
  /**
   * DISABLED - The job is disabled by the system due to error. The user
   * cannot directly set a job to be disabled.
   */
  DISABLED = 3,
  /**
   * UPDATE_FAILED - The job state resulting from a failed [CloudScheduler.UpdateJob][]
   * operation. To recover a job from this state, retry
   * [CloudScheduler.UpdateJob][] until a successful response is received.
   */
  UPDATE_FAILED = 4,
  /** INITIALIZING - The schedule resource is being created. */
  INITIALIZING = 5,
  /** DELETING - The schedule resource is being deleted. */
  DELETING = 6,
  UNRECOGNIZED = -1,
}

export function schedule_StateFromJSON(object: any): Schedule_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Schedule_State.STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return Schedule_State.ENABLED;
    case 2:
    case "PAUSED":
      return Schedule_State.PAUSED;
    case 3:
    case "DISABLED":
      return Schedule_State.DISABLED;
    case 4:
    case "UPDATE_FAILED":
      return Schedule_State.UPDATE_FAILED;
    case 5:
    case "INITIALIZING":
      return Schedule_State.INITIALIZING;
    case 6:
    case "DELETING":
      return Schedule_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Schedule_State.UNRECOGNIZED;
  }
}

export function schedule_StateToJSON(object: Schedule_State): string {
  switch (object) {
    case Schedule_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Schedule_State.ENABLED:
      return "ENABLED";
    case Schedule_State.PAUSED:
      return "PAUSED";
    case Schedule_State.DISABLED:
      return "DISABLED";
    case Schedule_State.UPDATE_FAILED:
      return "UPDATE_FAILED";
    case Schedule_State.INITIALIZING:
      return "INITIALIZING";
    case Schedule_State.DELETING:
      return "DELETING";
    case Schedule_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSchedule(): Schedule {
  return {
    name: "",
    displayName: "",
    description: "",
    state: 0,
    cronSchedule: "",
    timeZone: "",
    createTime: undefined,
    updateTime: undefined,
    executionTemplate: undefined,
    recentExecutions: [],
  };
}

export const Schedule: MessageFns<Schedule> = {
  encode(message: Schedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.cronSchedule !== "") {
      writer.uint32(42).string(message.cronSchedule);
    }
    if (message.timeZone !== "") {
      writer.uint32(50).string(message.timeZone);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.executionTemplate !== undefined) {
      ExecutionTemplate.encode(message.executionTemplate, writer.uint32(74).fork()).join();
    }
    for (const v of message.recentExecutions) {
      Execution.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Schedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.cronSchedule = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.executionTemplate = ExecutionTemplate.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.recentExecutions.push(Execution.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Schedule {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? schedule_StateFromJSON(object.state) : 0,
      cronSchedule: isSet(object.cronSchedule) ? globalThis.String(object.cronSchedule) : "",
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      executionTemplate: isSet(object.executionTemplate)
        ? ExecutionTemplate.fromJSON(object.executionTemplate)
        : undefined,
      recentExecutions: globalThis.Array.isArray(object?.recentExecutions)
        ? object.recentExecutions.map((e: any) => Execution.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Schedule): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = schedule_StateToJSON(message.state);
    }
    if (message.cronSchedule !== "") {
      obj.cronSchedule = message.cronSchedule;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.executionTemplate !== undefined) {
      obj.executionTemplate = ExecutionTemplate.toJSON(message.executionTemplate);
    }
    if (message.recentExecutions?.length) {
      obj.recentExecutions = message.recentExecutions.map((e) => Execution.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Schedule>): Schedule {
    return Schedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Schedule>): Schedule {
    const message = createBaseSchedule();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.cronSchedule = object.cronSchedule ?? "";
    message.timeZone = object.timeZone ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.executionTemplate = (object.executionTemplate !== undefined && object.executionTemplate !== null)
      ? ExecutionTemplate.fromPartial(object.executionTemplate)
      : undefined;
    message.recentExecutions = object.recentExecutions?.map((e) => Execution.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
