// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v1/environment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.notebooks.v1";

/**
 * Definition of a software environment that is used to start a notebook
 * instance.
 */
export interface Environment {
  /**
   * Output only. Name of this environment.
   * Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   */
  name: string;
  /** Display name of this environment for the UI. */
  displayName: string;
  /** A brief description of this environment. */
  description: string;
  /** Use a Compute Engine VM image to start the notebook instance. */
  vmImage?:
    | VmImage
    | undefined;
  /** Use a container image to start the notebook instance. */
  containerImage?:
    | ContainerImage
    | undefined;
  /**
   * Path to a Bash script that automatically runs after a notebook instance
   * fully boots up. The path must be a URL or
   * Cloud Storage path. Example: `"gs://path-to-file/file-name"`
   */
  postStartupScript: string;
  /** Output only. The time at which this environment was created. */
  createTime: Date | undefined;
}

/**
 * Definition of a custom Compute Engine virtual machine image for starting a
 * notebook instance with the environment installed directly on the VM.
 */
export interface VmImage {
  /**
   * Required. The name of the Google Cloud project that this VM image belongs to.
   * Format: `{project_id}`
   */
  project: string;
  /** Use VM image name to find the image. */
  imageName?:
    | string
    | undefined;
  /**
   * Use this VM image family to find the image; the newest image in this
   * family will be used.
   */
  imageFamily?: string | undefined;
}

/**
 * Definition of a container image for starting a notebook instance with the
 * environment installed in a container.
 */
export interface ContainerImage {
  /**
   * Required. The path to the container image repository. For example:
   * `gcr.io/{project_id}/{image_name}`
   */
  repository: string;
  /**
   * The tag of the container image. If not specified, this defaults
   * to the latest tag.
   */
  tag: string;
}

function createBaseEnvironment(): Environment {
  return {
    name: "",
    displayName: "",
    description: "",
    vmImage: undefined,
    containerImage: undefined,
    postStartupScript: "",
    createTime: undefined,
  };
}

export const Environment: MessageFns<Environment> = {
  encode(message: Environment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.vmImage !== undefined) {
      VmImage.encode(message.vmImage, writer.uint32(50).fork()).join();
    }
    if (message.containerImage !== undefined) {
      ContainerImage.encode(message.containerImage, writer.uint32(58).fork()).join();
    }
    if (message.postStartupScript !== "") {
      writer.uint32(66).string(message.postStartupScript);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.vmImage = VmImage.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.containerImage = ContainerImage.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.postStartupScript = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      vmImage: isSet(object.vmImage) ? VmImage.fromJSON(object.vmImage) : undefined,
      containerImage: isSet(object.containerImage) ? ContainerImage.fromJSON(object.containerImage) : undefined,
      postStartupScript: isSet(object.postStartupScript) ? globalThis.String(object.postStartupScript) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: Environment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.vmImage !== undefined) {
      obj.vmImage = VmImage.toJSON(message.vmImage);
    }
    if (message.containerImage !== undefined) {
      obj.containerImage = ContainerImage.toJSON(message.containerImage);
    }
    if (message.postStartupScript !== "") {
      obj.postStartupScript = message.postStartupScript;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Environment>): Environment {
    return Environment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment>): Environment {
    const message = createBaseEnvironment();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.vmImage = (object.vmImage !== undefined && object.vmImage !== null)
      ? VmImage.fromPartial(object.vmImage)
      : undefined;
    message.containerImage = (object.containerImage !== undefined && object.containerImage !== null)
      ? ContainerImage.fromPartial(object.containerImage)
      : undefined;
    message.postStartupScript = object.postStartupScript ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseVmImage(): VmImage {
  return { project: "", imageName: undefined, imageFamily: undefined };
}

export const VmImage: MessageFns<VmImage> = {
  encode(message: VmImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.imageName !== undefined) {
      writer.uint32(18).string(message.imageName);
    }
    if (message.imageFamily !== undefined) {
      writer.uint32(26).string(message.imageFamily);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VmImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVmImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.imageName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.imageFamily = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VmImage {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      imageName: isSet(object.imageName) ? globalThis.String(object.imageName) : undefined,
      imageFamily: isSet(object.imageFamily) ? globalThis.String(object.imageFamily) : undefined,
    };
  },

  toJSON(message: VmImage): unknown {
    const obj: any = {};
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.imageName !== undefined) {
      obj.imageName = message.imageName;
    }
    if (message.imageFamily !== undefined) {
      obj.imageFamily = message.imageFamily;
    }
    return obj;
  },

  create(base?: DeepPartial<VmImage>): VmImage {
    return VmImage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VmImage>): VmImage {
    const message = createBaseVmImage();
    message.project = object.project ?? "";
    message.imageName = object.imageName ?? undefined;
    message.imageFamily = object.imageFamily ?? undefined;
    return message;
  },
};

function createBaseContainerImage(): ContainerImage {
  return { repository: "", tag: "" };
}

export const ContainerImage: MessageFns<ContainerImage> = {
  encode(message: ContainerImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repository !== "") {
      writer.uint32(10).string(message.repository);
    }
    if (message.tag !== "") {
      writer.uint32(18).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContainerImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContainerImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repository = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContainerImage {
    return {
      repository: isSet(object.repository) ? globalThis.String(object.repository) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
    };
  },

  toJSON(message: ContainerImage): unknown {
    const obj: any = {};
    if (message.repository !== "") {
      obj.repository = message.repository;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<ContainerImage>): ContainerImage {
    return ContainerImage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContainerImage>): ContainerImage {
    const message = createBaseContainerImage();
    message.repository = object.repository ?? "";
    message.tag = object.tag ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
