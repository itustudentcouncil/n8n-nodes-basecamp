// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/beyondcorp/clientgateways/v1/client_gateways_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.beyondcorp.clientgateways.v1";

/** Message describing ClientGateway object. */
export interface ClientGateway {
  /** Required. name of resource. The name is ignored during creation. */
  name: string;
  /** Output only. [Output only] Create time stamp. */
  createTime:
    | Date
    | undefined;
  /** Output only. [Output only] Update time stamp. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The operational state of the gateway. */
  state: ClientGateway_State;
  /** Output only. A unique identifier for the instance generated by the system. */
  id: string;
  /**
   * Output only. The client connector service name that the client gateway is
   * associated to. Client Connector Services, named as follows:
   *   `projects/{project_id}/locations/{location_id}/client_connector_services/{client_connector_service_id}`.
   */
  clientConnectorService: string;
}

/** Represents the different states of a gateway. */
export enum ClientGateway_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Gateway is being created. */
  CREATING = 1,
  /** UPDATING - Gateway is being updated. */
  UPDATING = 2,
  /** DELETING - Gateway is being deleted. */
  DELETING = 3,
  /** RUNNING - Gateway is running. */
  RUNNING = 4,
  /**
   * DOWN - Gateway is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  /** ERROR - ClientGateway encountered an error and is in indeterministic state. */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function clientGateway_StateFromJSON(object: any): ClientGateway_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ClientGateway_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ClientGateway_State.CREATING;
    case 2:
    case "UPDATING":
      return ClientGateway_State.UPDATING;
    case 3:
    case "DELETING":
      return ClientGateway_State.DELETING;
    case 4:
    case "RUNNING":
      return ClientGateway_State.RUNNING;
    case 5:
    case "DOWN":
      return ClientGateway_State.DOWN;
    case 6:
    case "ERROR":
      return ClientGateway_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientGateway_State.UNRECOGNIZED;
  }
}

export function clientGateway_StateToJSON(object: ClientGateway_State): string {
  switch (object) {
    case ClientGateway_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ClientGateway_State.CREATING:
      return "CREATING";
    case ClientGateway_State.UPDATING:
      return "UPDATING";
    case ClientGateway_State.DELETING:
      return "DELETING";
    case ClientGateway_State.RUNNING:
      return "RUNNING";
    case ClientGateway_State.DOWN:
      return "DOWN";
    case ClientGateway_State.ERROR:
      return "ERROR";
    case ClientGateway_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message for requesting list of ClientGateways. */
export interface ListClientGatewaysRequest {
  /** Required. Parent value for ListClientGatewaysRequest. */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Message for response to listing ClientGateways. */
export interface ListClientGatewaysResponse {
  /** The list of ClientGateway. */
  clientGateways: ClientGateway[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a ClientGateway. */
export interface GetClientGatewayRequest {
  /** Required. Name of the resource */
  name: string;
}

/** Message for creating a ClientGateway. */
export interface CreateClientGatewayRequest {
  /** Required. Value for parent. */
  parent: string;
  /**
   * Optional. User-settable client gateway resource ID.
   *  * Must start with a letter.
   *  * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
   *  * Must end with a number or a letter.
   */
  clientGatewayId: string;
  /** Required. The resource being created. */
  clientGateway:
    | ClientGateway
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Message for deleting a ClientGateway */
export interface DeleteClientGatewayRequest {
  /** Required. Name of the resource */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Represents the metadata of the long-running operation. */
export interface ClientGatewayOperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseClientGateway(): ClientGateway {
  return { name: "", createTime: undefined, updateTime: undefined, state: 0, id: "", clientConnectorService: "" };
}

export const ClientGateway: MessageFns<ClientGateway> = {
  encode(message: ClientGateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.id !== "") {
      writer.uint32(42).string(message.id);
    }
    if (message.clientConnectorService !== "") {
      writer.uint32(50).string(message.clientConnectorService);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientGateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.clientConnectorService = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientGateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      state: isSet(object.state) ? clientGateway_StateFromJSON(object.state) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clientConnectorService: isSet(object.clientConnectorService)
        ? globalThis.String(object.clientConnectorService)
        : "",
    };
  },

  toJSON(message: ClientGateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = clientGateway_StateToJSON(message.state);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clientConnectorService !== "") {
      obj.clientConnectorService = message.clientConnectorService;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientGateway>): ClientGateway {
    return ClientGateway.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientGateway>): ClientGateway {
    const message = createBaseClientGateway();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? 0;
    message.id = object.id ?? "";
    message.clientConnectorService = object.clientConnectorService ?? "";
    return message;
  },
};

function createBaseListClientGatewaysRequest(): ListClientGatewaysRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListClientGatewaysRequest: MessageFns<ListClientGatewaysRequest> = {
  encode(message: ListClientGatewaysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClientGatewaysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClientGatewaysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClientGatewaysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListClientGatewaysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClientGatewaysRequest>): ListClientGatewaysRequest {
    return ListClientGatewaysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClientGatewaysRequest>): ListClientGatewaysRequest {
    const message = createBaseListClientGatewaysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListClientGatewaysResponse(): ListClientGatewaysResponse {
  return { clientGateways: [], nextPageToken: "", unreachable: [] };
}

export const ListClientGatewaysResponse: MessageFns<ListClientGatewaysResponse> = {
  encode(message: ListClientGatewaysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clientGateways) {
      ClientGateway.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClientGatewaysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClientGatewaysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientGateways.push(ClientGateway.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClientGatewaysResponse {
    return {
      clientGateways: globalThis.Array.isArray(object?.clientGateways)
        ? object.clientGateways.map((e: any) => ClientGateway.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListClientGatewaysResponse): unknown {
    const obj: any = {};
    if (message.clientGateways?.length) {
      obj.clientGateways = message.clientGateways.map((e) => ClientGateway.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClientGatewaysResponse>): ListClientGatewaysResponse {
    return ListClientGatewaysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClientGatewaysResponse>): ListClientGatewaysResponse {
    const message = createBaseListClientGatewaysResponse();
    message.clientGateways = object.clientGateways?.map((e) => ClientGateway.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetClientGatewayRequest(): GetClientGatewayRequest {
  return { name: "" };
}

export const GetClientGatewayRequest: MessageFns<GetClientGatewayRequest> = {
  encode(message: GetClientGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClientGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClientGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClientGatewayRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetClientGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetClientGatewayRequest>): GetClientGatewayRequest {
    return GetClientGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClientGatewayRequest>): GetClientGatewayRequest {
    const message = createBaseGetClientGatewayRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateClientGatewayRequest(): CreateClientGatewayRequest {
  return { parent: "", clientGatewayId: "", clientGateway: undefined, requestId: "", validateOnly: false };
}

export const CreateClientGatewayRequest: MessageFns<CreateClientGatewayRequest> = {
  encode(message: CreateClientGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.clientGatewayId !== "") {
      writer.uint32(18).string(message.clientGatewayId);
    }
    if (message.clientGateway !== undefined) {
      ClientGateway.encode(message.clientGateway, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientGatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientGateway = ClientGateway.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClientGatewayRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      clientGatewayId: isSet(object.clientGatewayId) ? globalThis.String(object.clientGatewayId) : "",
      clientGateway: isSet(object.clientGateway) ? ClientGateway.fromJSON(object.clientGateway) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateClientGatewayRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.clientGatewayId !== "") {
      obj.clientGatewayId = message.clientGatewayId;
    }
    if (message.clientGateway !== undefined) {
      obj.clientGateway = ClientGateway.toJSON(message.clientGateway);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClientGatewayRequest>): CreateClientGatewayRequest {
    return CreateClientGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClientGatewayRequest>): CreateClientGatewayRequest {
    const message = createBaseCreateClientGatewayRequest();
    message.parent = object.parent ?? "";
    message.clientGatewayId = object.clientGatewayId ?? "";
    message.clientGateway = (object.clientGateway !== undefined && object.clientGateway !== null)
      ? ClientGateway.fromPartial(object.clientGateway)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteClientGatewayRequest(): DeleteClientGatewayRequest {
  return { name: "", requestId: "", validateOnly: false };
}

export const DeleteClientGatewayRequest: MessageFns<DeleteClientGatewayRequest> = {
  encode(message: DeleteClientGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClientGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClientGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClientGatewayRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteClientGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClientGatewayRequest>): DeleteClientGatewayRequest {
    return DeleteClientGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClientGatewayRequest>): DeleteClientGatewayRequest {
    const message = createBaseDeleteClientGatewayRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseClientGatewayOperationMetadata(): ClientGatewayOperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const ClientGatewayOperationMetadata: MessageFns<ClientGatewayOperationMetadata> = {
  encode(message: ClientGatewayOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientGatewayOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientGatewayOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientGatewayOperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: ClientGatewayOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientGatewayOperationMetadata>): ClientGatewayOperationMetadata {
    return ClientGatewayOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientGatewayOperationMetadata>): ClientGatewayOperationMetadata {
    const message = createBaseClientGatewayOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * API Overview:
 *
 * The `beyondcorp.googleapis.com` service implements the Google Cloud
 * BeyondCorp API.
 *
 * Data Model:
 *
 * The ClientGatewaysService exposes the following resources:
 *
 * * Client Gateways, named as follows:
 *   `projects/{project_id}/locations/{location_id}/clientGateways/{client_gateway_id}`.
 */
export type ClientGatewaysServiceDefinition = typeof ClientGatewaysServiceDefinition;
export const ClientGatewaysServiceDefinition = {
  name: "ClientGatewaysService",
  fullName: "google.cloud.beyondcorp.clientgateways.v1.ClientGatewaysService",
  methods: {
    /** Lists ClientGateways in a given project and location. */
    listClientGateways: {
      name: "ListClientGateways",
      requestType: ListClientGatewaysRequest,
      requestStream: false,
      responseType: ListClientGatewaysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single ClientGateway. */
    getClientGateway: {
      name: "GetClientGateway",
      requestType: GetClientGatewayRequest,
      requestStream: false,
      responseType: ClientGateway,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new ClientGateway in a given project and location. */
    createClientGateway: {
      name: "CreateClientGateway",
      requestType: CreateClientGatewayRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              13,
              67,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              18,
              30,
              67,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              44,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              14,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single ClientGateway. */
    deleteClientGateway: {
      name: "DeleteClientGateway",
      requestType: DeleteClientGatewayRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              30,
              67,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ClientGatewaysServiceImplementation<CallContextExt = {}> {
  /** Lists ClientGateways in a given project and location. */
  listClientGateways(
    request: ListClientGatewaysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListClientGatewaysResponse>>;
  /** Gets details of a single ClientGateway. */
  getClientGateway(
    request: GetClientGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ClientGateway>>;
  /** Creates a new ClientGateway in a given project and location. */
  createClientGateway(
    request: CreateClientGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single ClientGateway. */
  deleteClientGateway(
    request: DeleteClientGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ClientGatewaysServiceClient<CallOptionsExt = {}> {
  /** Lists ClientGateways in a given project and location. */
  listClientGateways(
    request: DeepPartial<ListClientGatewaysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListClientGatewaysResponse>;
  /** Gets details of a single ClientGateway. */
  getClientGateway(
    request: DeepPartial<GetClientGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ClientGateway>;
  /** Creates a new ClientGateway in a given project and location. */
  createClientGateway(
    request: DeepPartial<CreateClientGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single ClientGateway. */
  deleteClientGateway(
    request: DeepPartial<DeleteClientGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
