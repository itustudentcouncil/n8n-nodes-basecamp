// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/beyondcorp/appgateways/v1/app_gateways_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.beyondcorp.appgateways.v1";

/** Request message for BeyondCorp.ListAppGateways. */
export interface ListAppGatewaysRequest {
  /**
   * Required. The resource name of the AppGateway location using the form:
   * `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the page_size value, the response may include a partial list
   * and a caller should only rely on response's
   * [next_page_token][BeyondCorp.ListAppGatewaysResponse.next_page_token] to
   * determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous
   * ListAppGatewaysRequest, if any.
   */
  pageToken: string;
  /** Optional. A filter specifying constraints of a list operation. */
  filter: string;
  /**
   * Optional. Specifies the ordering of results. See
   * [Sorting
   * order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
   * for more information.
   */
  orderBy: string;
}

/** Response message for BeyondCorp.ListAppGateways. */
export interface ListAppGatewaysResponse {
  /** A list of BeyondCorp AppGateways in the project. */
  appGateways: AppGateway[];
  /**
   * A token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** A list of locations that could not be reached. */
  unreachable: string[];
}

/** Request message for BeyondCorp.GetAppGateway. */
export interface GetAppGatewayRequest {
  /**
   * Required. BeyondCorp AppGateway name using the form:
   * `projects/{project_id}/locations/{location_id}/appGateways/{app_gateway_id}`
   */
  name: string;
}

/** Request message for BeyondCorp.CreateAppGateway. */
export interface CreateAppGatewayRequest {
  /**
   * Required. The resource project name of the AppGateway location using the
   * form: `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Optional. User-settable AppGateway resource ID.
   *  * Must start with a letter.
   *  * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
   *  * Must end with a number or a letter.
   */
  appGatewayId: string;
  /** Required. A BeyondCorp AppGateway resource. */
  appGateway:
    | AppGateway
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Request message for BeyondCorp.DeleteAppGateway. */
export interface DeleteAppGatewayRequest {
  /**
   * Required. BeyondCorp AppGateway name using the form:
   * `projects/{project_id}/locations/{location_id}/appGateways/{app_gateway_id}`
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/**
 * A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway
 * to a remote application. It creates all the necessary GCP components needed
 * for creating a BeyondCorp protected AppGateway. Multiple connectors can be
 * authorised for a single AppGateway.
 */
export interface AppGateway {
  /**
   * Required. Unique resource name of the AppGateway.
   * The name is ignored when creating an AppGateway.
   */
  name: string;
  /** Output only. Timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when the resource was last modified. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /**
   * Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed
   * 64 characters.
   */
  displayName: string;
  /**
   * Output only. A unique identifier for the instance generated by the
   * system.
   */
  uid: string;
  /** Required. The type of network connectivity used by the AppGateway. */
  type: AppGateway_Type;
  /** Output only. The current state of the AppGateway. */
  state: AppGateway_State;
  /** Output only. Server-defined URI for this resource. */
  uri: string;
  /** Output only. A list of connections allocated for the Gateway */
  allocatedConnections: AppGateway_AllocatedConnection[];
  /** Required. The type of hosting used by the AppGateway. */
  hostType: AppGateway_HostType;
}

/**
 * Enum containing list of all possible network connectivity options
 * supported by BeyondCorp AppGateway.
 */
export enum AppGateway_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /** TCP_PROXY - TCP Proxy based BeyondCorp Connection. API will default to this if unset. */
  TCP_PROXY = 1,
  UNRECOGNIZED = -1,
}

export function appGateway_TypeFromJSON(object: any): AppGateway_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AppGateway_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TCP_PROXY":
      return AppGateway_Type.TCP_PROXY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppGateway_Type.UNRECOGNIZED;
  }
}

export function appGateway_TypeToJSON(object: AppGateway_Type): string {
  switch (object) {
    case AppGateway_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AppGateway_Type.TCP_PROXY:
      return "TCP_PROXY";
    case AppGateway_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the different states of an AppGateway. */
export enum AppGateway_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - AppGateway is being created. */
  CREATING = 1,
  /** CREATED - AppGateway has been created. */
  CREATED = 2,
  /** UPDATING - AppGateway's configuration is being updated. */
  UPDATING = 3,
  /** DELETING - AppGateway is being deleted. */
  DELETING = 4,
  /**
   * DOWN - AppGateway is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  UNRECOGNIZED = -1,
}

export function appGateway_StateFromJSON(object: any): AppGateway_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AppGateway_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return AppGateway_State.CREATING;
    case 2:
    case "CREATED":
      return AppGateway_State.CREATED;
    case 3:
    case "UPDATING":
      return AppGateway_State.UPDATING;
    case 4:
    case "DELETING":
      return AppGateway_State.DELETING;
    case 5:
    case "DOWN":
      return AppGateway_State.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppGateway_State.UNRECOGNIZED;
  }
}

export function appGateway_StateToJSON(object: AppGateway_State): string {
  switch (object) {
    case AppGateway_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AppGateway_State.CREATING:
      return "CREATING";
    case AppGateway_State.CREATED:
      return "CREATED";
    case AppGateway_State.UPDATING:
      return "UPDATING";
    case AppGateway_State.DELETING:
      return "DELETING";
    case AppGateway_State.DOWN:
      return "DOWN";
    case AppGateway_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Enum containing list of all possible host types supported by BeyondCorp
 * Connection.
 */
export enum AppGateway_HostType {
  /** HOST_TYPE_UNSPECIFIED - Default value. This value is unused. */
  HOST_TYPE_UNSPECIFIED = 0,
  /** GCP_REGIONAL_MIG - AppGateway hosted in a GCP regional managed instance group. */
  GCP_REGIONAL_MIG = 1,
  UNRECOGNIZED = -1,
}

export function appGateway_HostTypeFromJSON(object: any): AppGateway_HostType {
  switch (object) {
    case 0:
    case "HOST_TYPE_UNSPECIFIED":
      return AppGateway_HostType.HOST_TYPE_UNSPECIFIED;
    case 1:
    case "GCP_REGIONAL_MIG":
      return AppGateway_HostType.GCP_REGIONAL_MIG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppGateway_HostType.UNRECOGNIZED;
  }
}

export function appGateway_HostTypeToJSON(object: AppGateway_HostType): string {
  switch (object) {
    case AppGateway_HostType.HOST_TYPE_UNSPECIFIED:
      return "HOST_TYPE_UNSPECIFIED";
    case AppGateway_HostType.GCP_REGIONAL_MIG:
      return "GCP_REGIONAL_MIG";
    case AppGateway_HostType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Allocated connection of the AppGateway. */
export interface AppGateway_AllocatedConnection {
  /** Required. The PSC uri of an allocated connection */
  pscUri: string;
  /** Required. The ingress port of an allocated connection */
  ingressPort: number;
}

export interface AppGateway_LabelsEntry {
  key: string;
  value: string;
}

/** Represents the metadata of the long-running operation. */
export interface AppGatewayOperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseListAppGatewaysRequest(): ListAppGatewaysRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListAppGatewaysRequest: MessageFns<ListAppGatewaysRequest> = {
  encode(message: ListAppGatewaysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppGatewaysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppGatewaysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppGatewaysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAppGatewaysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppGatewaysRequest>): ListAppGatewaysRequest {
    return ListAppGatewaysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppGatewaysRequest>): ListAppGatewaysRequest {
    const message = createBaseListAppGatewaysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAppGatewaysResponse(): ListAppGatewaysResponse {
  return { appGateways: [], nextPageToken: "", unreachable: [] };
}

export const ListAppGatewaysResponse: MessageFns<ListAppGatewaysResponse> = {
  encode(message: ListAppGatewaysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appGateways) {
      AppGateway.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppGatewaysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppGatewaysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appGateways.push(AppGateway.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppGatewaysResponse {
    return {
      appGateways: globalThis.Array.isArray(object?.appGateways)
        ? object.appGateways.map((e: any) => AppGateway.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAppGatewaysResponse): unknown {
    const obj: any = {};
    if (message.appGateways?.length) {
      obj.appGateways = message.appGateways.map((e) => AppGateway.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppGatewaysResponse>): ListAppGatewaysResponse {
    return ListAppGatewaysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppGatewaysResponse>): ListAppGatewaysResponse {
    const message = createBaseListAppGatewaysResponse();
    message.appGateways = object.appGateways?.map((e) => AppGateway.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAppGatewayRequest(): GetAppGatewayRequest {
  return { name: "" };
}

export const GetAppGatewayRequest: MessageFns<GetAppGatewayRequest> = {
  encode(message: GetAppGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAppGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppGatewayRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAppGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAppGatewayRequest>): GetAppGatewayRequest {
    return GetAppGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppGatewayRequest>): GetAppGatewayRequest {
    const message = createBaseGetAppGatewayRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAppGatewayRequest(): CreateAppGatewayRequest {
  return { parent: "", appGatewayId: "", appGateway: undefined, requestId: "", validateOnly: false };
}

export const CreateAppGatewayRequest: MessageFns<CreateAppGatewayRequest> = {
  encode(message: CreateAppGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.appGatewayId !== "") {
      writer.uint32(18).string(message.appGatewayId);
    }
    if (message.appGateway !== undefined) {
      AppGateway.encode(message.appGateway, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAppGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAppGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appGatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appGateway = AppGateway.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAppGatewayRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      appGatewayId: isSet(object.appGatewayId) ? globalThis.String(object.appGatewayId) : "",
      appGateway: isSet(object.appGateway) ? AppGateway.fromJSON(object.appGateway) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAppGatewayRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.appGatewayId !== "") {
      obj.appGatewayId = message.appGatewayId;
    }
    if (message.appGateway !== undefined) {
      obj.appGateway = AppGateway.toJSON(message.appGateway);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAppGatewayRequest>): CreateAppGatewayRequest {
    return CreateAppGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAppGatewayRequest>): CreateAppGatewayRequest {
    const message = createBaseCreateAppGatewayRequest();
    message.parent = object.parent ?? "";
    message.appGatewayId = object.appGatewayId ?? "";
    message.appGateway = (object.appGateway !== undefined && object.appGateway !== null)
      ? AppGateway.fromPartial(object.appGateway)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteAppGatewayRequest(): DeleteAppGatewayRequest {
  return { name: "", requestId: "", validateOnly: false };
}

export const DeleteAppGatewayRequest: MessageFns<DeleteAppGatewayRequest> = {
  encode(message: DeleteAppGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAppGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAppGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAppGatewayRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteAppGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAppGatewayRequest>): DeleteAppGatewayRequest {
    return DeleteAppGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAppGatewayRequest>): DeleteAppGatewayRequest {
    const message = createBaseDeleteAppGatewayRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseAppGateway(): AppGateway {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    uid: "",
    type: 0,
    state: 0,
    uri: "",
    allocatedConnections: [],
    hostType: 0,
  };
}

export const AppGateway: MessageFns<AppGateway> = {
  encode(message: AppGateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AppGateway_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    if (message.uri !== "") {
      writer.uint32(74).string(message.uri);
    }
    for (const v of message.allocatedConnections) {
      AppGateway_AllocatedConnection.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.hostType !== 0) {
      writer.uint32(88).int32(message.hostType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = AppGateway_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.allocatedConnections.push(AppGateway_AllocatedConnection.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.hostType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      type: isSet(object.type) ? appGateway_TypeFromJSON(object.type) : 0,
      state: isSet(object.state) ? appGateway_StateFromJSON(object.state) : 0,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      allocatedConnections: globalThis.Array.isArray(object?.allocatedConnections)
        ? object.allocatedConnections.map((e: any) => AppGateway_AllocatedConnection.fromJSON(e))
        : [],
      hostType: isSet(object.hostType) ? appGateway_HostTypeFromJSON(object.hostType) : 0,
    };
  },

  toJSON(message: AppGateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.type !== 0) {
      obj.type = appGateway_TypeToJSON(message.type);
    }
    if (message.state !== 0) {
      obj.state = appGateway_StateToJSON(message.state);
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.allocatedConnections?.length) {
      obj.allocatedConnections = message.allocatedConnections.map((e) => AppGateway_AllocatedConnection.toJSON(e));
    }
    if (message.hostType !== 0) {
      obj.hostType = appGateway_HostTypeToJSON(message.hostType);
    }
    return obj;
  },

  create(base?: DeepPartial<AppGateway>): AppGateway {
    return AppGateway.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppGateway>): AppGateway {
    const message = createBaseAppGateway();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.uid = object.uid ?? "";
    message.type = object.type ?? 0;
    message.state = object.state ?? 0;
    message.uri = object.uri ?? "";
    message.allocatedConnections =
      object.allocatedConnections?.map((e) => AppGateway_AllocatedConnection.fromPartial(e)) || [];
    message.hostType = object.hostType ?? 0;
    return message;
  },
};

function createBaseAppGateway_AllocatedConnection(): AppGateway_AllocatedConnection {
  return { pscUri: "", ingressPort: 0 };
}

export const AppGateway_AllocatedConnection: MessageFns<AppGateway_AllocatedConnection> = {
  encode(message: AppGateway_AllocatedConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pscUri !== "") {
      writer.uint32(10).string(message.pscUri);
    }
    if (message.ingressPort !== 0) {
      writer.uint32(16).int32(message.ingressPort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGateway_AllocatedConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGateway_AllocatedConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pscUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ingressPort = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGateway_AllocatedConnection {
    return {
      pscUri: isSet(object.pscUri) ? globalThis.String(object.pscUri) : "",
      ingressPort: isSet(object.ingressPort) ? globalThis.Number(object.ingressPort) : 0,
    };
  },

  toJSON(message: AppGateway_AllocatedConnection): unknown {
    const obj: any = {};
    if (message.pscUri !== "") {
      obj.pscUri = message.pscUri;
    }
    if (message.ingressPort !== 0) {
      obj.ingressPort = Math.round(message.ingressPort);
    }
    return obj;
  },

  create(base?: DeepPartial<AppGateway_AllocatedConnection>): AppGateway_AllocatedConnection {
    return AppGateway_AllocatedConnection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppGateway_AllocatedConnection>): AppGateway_AllocatedConnection {
    const message = createBaseAppGateway_AllocatedConnection();
    message.pscUri = object.pscUri ?? "";
    message.ingressPort = object.ingressPort ?? 0;
    return message;
  },
};

function createBaseAppGateway_LabelsEntry(): AppGateway_LabelsEntry {
  return { key: "", value: "" };
}

export const AppGateway_LabelsEntry: MessageFns<AppGateway_LabelsEntry> = {
  encode(message: AppGateway_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGateway_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGateway_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGateway_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AppGateway_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AppGateway_LabelsEntry>): AppGateway_LabelsEntry {
    return AppGateway_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppGateway_LabelsEntry>): AppGateway_LabelsEntry {
    const message = createBaseAppGateway_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAppGatewayOperationMetadata(): AppGatewayOperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const AppGatewayOperationMetadata: MessageFns<AppGatewayOperationMetadata> = {
  encode(message: AppGatewayOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppGatewayOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppGatewayOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppGatewayOperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: AppGatewayOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<AppGatewayOperationMetadata>): AppGatewayOperationMetadata {
    return AppGatewayOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppGatewayOperationMetadata>): AppGatewayOperationMetadata {
    const message = createBaseAppGatewayOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * API Overview:
 *
 * The `beyondcorp.googleapis.com` service implements the Google Cloud
 * BeyondCorp API.
 *
 * Data Model:
 *
 * The AppGatewaysService exposes the following resources:
 *
 * * AppGateways, named as follows:
 *   `projects/{project_id}/locations/{location_id}/appGateways/{app_gateway_id}`.
 *
 * The AppGatewaysService service provides methods to manage
 * (create/read/update/delete) BeyondCorp AppGateways.
 */
export type AppGatewaysServiceDefinition = typeof AppGatewaysServiceDefinition;
export const AppGatewaysServiceDefinition = {
  name: "AppGatewaysService",
  fullName: "google.cloud.beyondcorp.appgateways.v1.AppGatewaysService",
  methods: {
    /** Lists AppGateways in a given project and location. */
    listAppGateways: {
      name: "ListAppGateways",
      requestType: ListAppGatewaysRequest,
      requestStream: false,
      responseType: ListAppGatewaysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single AppGateway. */
    getAppGateway: {
      name: "GetAppGateway",
      requestType: GetAppGatewayRequest,
      requestStream: false,
      responseType: AppGateway,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new AppGateway in a given project and location. */
    createAppGateway: {
      name: "CreateAppGateway",
      requestType: CreateAppGatewayRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              10,
              65,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              18,
              27,
              65,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              112,
              95,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              44,
              97,
              112,
              112,
              95,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              97,
              112,
              112,
              95,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single AppGateway. */
    deleteAppGateway: {
      name: "DeleteAppGateway",
      requestType: DeleteAppGatewayRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              52,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              27,
              65,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AppGatewaysServiceImplementation<CallContextExt = {}> {
  /** Lists AppGateways in a given project and location. */
  listAppGateways(
    request: ListAppGatewaysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAppGatewaysResponse>>;
  /** Gets details of a single AppGateway. */
  getAppGateway(request: GetAppGatewayRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AppGateway>>;
  /** Creates a new AppGateway in a given project and location. */
  createAppGateway(
    request: CreateAppGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single AppGateway. */
  deleteAppGateway(
    request: DeleteAppGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface AppGatewaysServiceClient<CallOptionsExt = {}> {
  /** Lists AppGateways in a given project and location. */
  listAppGateways(
    request: DeepPartial<ListAppGatewaysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAppGatewaysResponse>;
  /** Gets details of a single AppGateway. */
  getAppGateway(
    request: DeepPartial<GetAppGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AppGateway>;
  /** Creates a new AppGateway in a given project and location. */
  createAppGateway(
    request: DeepPartial<CreateAppGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single AppGateway. */
  deleteAppGateway(
    request: DeepPartial<DeleteAppGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
