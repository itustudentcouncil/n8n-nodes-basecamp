// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/beyondcorp/appconnectors/v1/app_connectors_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { ResourceInfo } from "./resource_info.js";

export const protobufPackage = "google.cloud.beyondcorp.appconnectors.v1";

/** Request message for BeyondCorp.ListAppConnectors. */
export interface ListAppConnectorsRequest {
  /**
   * Required. The resource name of the AppConnector location using the form:
   * `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the page_size value, the response may include a partial list
   * and a caller should only rely on response's
   * [next_page_token][BeyondCorp.ListAppConnectorsResponse.next_page_token] to
   * determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous
   * ListAppConnectorsRequest, if any.
   */
  pageToken: string;
  /** Optional. A filter specifying constraints of a list operation. */
  filter: string;
  /**
   * Optional. Specifies the ordering of results. See
   * [Sorting
   * order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
   * for more information.
   */
  orderBy: string;
}

/** Response message for BeyondCorp.ListAppConnectors. */
export interface ListAppConnectorsResponse {
  /** A list of BeyondCorp AppConnectors in the project. */
  appConnectors: AppConnector[];
  /**
   * A token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** A list of locations that could not be reached. */
  unreachable: string[];
}

/** Request message for BeyondCorp.GetAppConnector. */
export interface GetAppConnectorRequest {
  /**
   * Required. BeyondCorp AppConnector name using the form:
   * `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`
   */
  name: string;
}

/** Request message for BeyondCorp.CreateAppConnector. */
export interface CreateAppConnectorRequest {
  /**
   * Required. The resource project name of the AppConnector location using the
   * form: `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Optional. User-settable AppConnector resource ID.
   *
   *  * Must start with a letter.
   *  * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
   *  * Must end with a number or a letter.
   */
  appConnectorId: string;
  /** Required. A BeyondCorp AppConnector resource. */
  appConnector:
    | AppConnector
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Request message for BeyondCorp.UpdateAppConnector. */
export interface UpdateAppConnectorRequest {
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field. The elements of the repeated paths field may only include these
   * fields from [BeyondCorp.AppConnector]:
   * * `labels`
   * * `display_name`
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. AppConnector message with updated fields. Only supported fields
   * specified in update_mask are updated.
   */
  appConnector:
    | AppConnector
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Request message for BeyondCorp.DeleteAppConnector. */
export interface DeleteAppConnectorRequest {
  /**
   * Required. BeyondCorp AppConnector name using the form:
   * `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Request report the connector status. */
export interface ReportStatusRequest {
  /**
   * Required. BeyondCorp Connector name using the form:
   * `projects/{project_id}/locations/{location_id}/connectors/{connector}`
   */
  appConnector: string;
  /** Required. Resource info of the connector. */
  resourceInfo:
    | ResourceInfo
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/**
 * A BeyondCorp connector resource that represents an application facing
 * component deployed proximal to and with direct access to the application
 * instances. It is used to establish connectivity between the remote enterprise
 * environment and GCP. It initiates connections to the applications and can
 * proxy the data from users over the connection.
 */
export interface AppConnector {
  /**
   * Required. Unique resource name of the AppConnector.
   * The name is ignored when creating a AppConnector.
   */
  name: string;
  /** Output only. Timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when the resource was last modified. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /**
   * Optional. An arbitrary user-provided name for the AppConnector. Cannot
   * exceed 64 characters.
   */
  displayName: string;
  /**
   * Output only. A unique identifier for the instance generated by the
   * system.
   */
  uid: string;
  /** Output only. The current state of the AppConnector. */
  state: AppConnector_State;
  /** Required. Principal information about the Identity of the AppConnector. */
  principalInfo:
    | AppConnector_PrincipalInfo
    | undefined;
  /** Optional. Resource info of the connector. */
  resourceInfo: ResourceInfo | undefined;
}

/** Represents the different states of a AppConnector. */
export enum AppConnector_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - AppConnector is being created. */
  CREATING = 1,
  /** CREATED - AppConnector has been created. */
  CREATED = 2,
  /** UPDATING - AppConnector's configuration is being updated. */
  UPDATING = 3,
  /** DELETING - AppConnector is being deleted. */
  DELETING = 4,
  /**
   * DOWN - AppConnector is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  UNRECOGNIZED = -1,
}

export function appConnector_StateFromJSON(object: any): AppConnector_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AppConnector_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return AppConnector_State.CREATING;
    case 2:
    case "CREATED":
      return AppConnector_State.CREATED;
    case 3:
    case "UPDATING":
      return AppConnector_State.UPDATING;
    case 4:
    case "DELETING":
      return AppConnector_State.DELETING;
    case 5:
    case "DOWN":
      return AppConnector_State.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppConnector_State.UNRECOGNIZED;
  }
}

export function appConnector_StateToJSON(object: AppConnector_State): string {
  switch (object) {
    case AppConnector_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AppConnector_State.CREATING:
      return "CREATING";
    case AppConnector_State.CREATED:
      return "CREATED";
    case AppConnector_State.UPDATING:
      return "UPDATING";
    case AppConnector_State.DELETING:
      return "DELETING";
    case AppConnector_State.DOWN:
      return "DOWN";
    case AppConnector_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** PrincipalInfo represents an Identity oneof. */
export interface AppConnector_PrincipalInfo {
  /** A GCP service account. */
  serviceAccount?: AppConnector_PrincipalInfo_ServiceAccount | undefined;
}

/** ServiceAccount represents a GCP service account. */
export interface AppConnector_PrincipalInfo_ServiceAccount {
  /** Email address of the service account. */
  email: string;
}

export interface AppConnector_LabelsEntry {
  key: string;
  value: string;
}

/** Represents the metadata of the long-running operation. */
export interface AppConnectorOperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseListAppConnectorsRequest(): ListAppConnectorsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListAppConnectorsRequest: MessageFns<ListAppConnectorsRequest> = {
  encode(message: ListAppConnectorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppConnectorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppConnectorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppConnectorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAppConnectorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppConnectorsRequest>): ListAppConnectorsRequest {
    return ListAppConnectorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppConnectorsRequest>): ListAppConnectorsRequest {
    const message = createBaseListAppConnectorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAppConnectorsResponse(): ListAppConnectorsResponse {
  return { appConnectors: [], nextPageToken: "", unreachable: [] };
}

export const ListAppConnectorsResponse: MessageFns<ListAppConnectorsResponse> = {
  encode(message: ListAppConnectorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appConnectors) {
      AppConnector.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppConnectorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppConnectorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appConnectors.push(AppConnector.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppConnectorsResponse {
    return {
      appConnectors: globalThis.Array.isArray(object?.appConnectors)
        ? object.appConnectors.map((e: any) => AppConnector.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAppConnectorsResponse): unknown {
    const obj: any = {};
    if (message.appConnectors?.length) {
      obj.appConnectors = message.appConnectors.map((e) => AppConnector.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppConnectorsResponse>): ListAppConnectorsResponse {
    return ListAppConnectorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppConnectorsResponse>): ListAppConnectorsResponse {
    const message = createBaseListAppConnectorsResponse();
    message.appConnectors = object.appConnectors?.map((e) => AppConnector.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAppConnectorRequest(): GetAppConnectorRequest {
  return { name: "" };
}

export const GetAppConnectorRequest: MessageFns<GetAppConnectorRequest> = {
  encode(message: GetAppConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAppConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppConnectorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAppConnectorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAppConnectorRequest>): GetAppConnectorRequest {
    return GetAppConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppConnectorRequest>): GetAppConnectorRequest {
    const message = createBaseGetAppConnectorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAppConnectorRequest(): CreateAppConnectorRequest {
  return { parent: "", appConnectorId: "", appConnector: undefined, requestId: "", validateOnly: false };
}

export const CreateAppConnectorRequest: MessageFns<CreateAppConnectorRequest> = {
  encode(message: CreateAppConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.appConnectorId !== "") {
      writer.uint32(18).string(message.appConnectorId);
    }
    if (message.appConnector !== undefined) {
      AppConnector.encode(message.appConnector, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAppConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAppConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appConnectorId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appConnector = AppConnector.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAppConnectorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      appConnectorId: isSet(object.appConnectorId) ? globalThis.String(object.appConnectorId) : "",
      appConnector: isSet(object.appConnector) ? AppConnector.fromJSON(object.appConnector) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAppConnectorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.appConnectorId !== "") {
      obj.appConnectorId = message.appConnectorId;
    }
    if (message.appConnector !== undefined) {
      obj.appConnector = AppConnector.toJSON(message.appConnector);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAppConnectorRequest>): CreateAppConnectorRequest {
    return CreateAppConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAppConnectorRequest>): CreateAppConnectorRequest {
    const message = createBaseCreateAppConnectorRequest();
    message.parent = object.parent ?? "";
    message.appConnectorId = object.appConnectorId ?? "";
    message.appConnector = (object.appConnector !== undefined && object.appConnector !== null)
      ? AppConnector.fromPartial(object.appConnector)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateAppConnectorRequest(): UpdateAppConnectorRequest {
  return { updateMask: undefined, appConnector: undefined, requestId: "", validateOnly: false };
}

export const UpdateAppConnectorRequest: MessageFns<UpdateAppConnectorRequest> = {
  encode(message: UpdateAppConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.appConnector !== undefined) {
      AppConnector.encode(message.appConnector, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAppConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appConnector = AppConnector.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppConnectorRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      appConnector: isSet(object.appConnector) ? AppConnector.fromJSON(object.appConnector) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateAppConnectorRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.appConnector !== undefined) {
      obj.appConnector = AppConnector.toJSON(message.appConnector);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAppConnectorRequest>): UpdateAppConnectorRequest {
    return UpdateAppConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppConnectorRequest>): UpdateAppConnectorRequest {
    const message = createBaseUpdateAppConnectorRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.appConnector = (object.appConnector !== undefined && object.appConnector !== null)
      ? AppConnector.fromPartial(object.appConnector)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteAppConnectorRequest(): DeleteAppConnectorRequest {
  return { name: "", requestId: "", validateOnly: false };
}

export const DeleteAppConnectorRequest: MessageFns<DeleteAppConnectorRequest> = {
  encode(message: DeleteAppConnectorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAppConnectorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAppConnectorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAppConnectorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteAppConnectorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAppConnectorRequest>): DeleteAppConnectorRequest {
    return DeleteAppConnectorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAppConnectorRequest>): DeleteAppConnectorRequest {
    const message = createBaseDeleteAppConnectorRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseReportStatusRequest(): ReportStatusRequest {
  return { appConnector: "", resourceInfo: undefined, requestId: "", validateOnly: false };
}

export const ReportStatusRequest: MessageFns<ReportStatusRequest> = {
  encode(message: ReportStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appConnector !== "") {
      writer.uint32(10).string(message.appConnector);
    }
    if (message.resourceInfo !== undefined) {
      ResourceInfo.encode(message.resourceInfo, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appConnector = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceInfo = ResourceInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportStatusRequest {
    return {
      appConnector: isSet(object.appConnector) ? globalThis.String(object.appConnector) : "",
      resourceInfo: isSet(object.resourceInfo) ? ResourceInfo.fromJSON(object.resourceInfo) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: ReportStatusRequest): unknown {
    const obj: any = {};
    if (message.appConnector !== "") {
      obj.appConnector = message.appConnector;
    }
    if (message.resourceInfo !== undefined) {
      obj.resourceInfo = ResourceInfo.toJSON(message.resourceInfo);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportStatusRequest>): ReportStatusRequest {
    return ReportStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportStatusRequest>): ReportStatusRequest {
    const message = createBaseReportStatusRequest();
    message.appConnector = object.appConnector ?? "";
    message.resourceInfo = (object.resourceInfo !== undefined && object.resourceInfo !== null)
      ? ResourceInfo.fromPartial(object.resourceInfo)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseAppConnector(): AppConnector {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    uid: "",
    state: 0,
    principalInfo: undefined,
    resourceInfo: undefined,
  };
}

export const AppConnector: MessageFns<AppConnector> = {
  encode(message: AppConnector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AppConnector_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.principalInfo !== undefined) {
      AppConnector_PrincipalInfo.encode(message.principalInfo, writer.uint32(66).fork()).join();
    }
    if (message.resourceInfo !== undefined) {
      ResourceInfo.encode(message.resourceInfo, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = AppConnector_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.principalInfo = AppConnector_PrincipalInfo.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.resourceInfo = ResourceInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? appConnector_StateFromJSON(object.state) : 0,
      principalInfo: isSet(object.principalInfo)
        ? AppConnector_PrincipalInfo.fromJSON(object.principalInfo)
        : undefined,
      resourceInfo: isSet(object.resourceInfo) ? ResourceInfo.fromJSON(object.resourceInfo) : undefined,
    };
  },

  toJSON(message: AppConnector): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = appConnector_StateToJSON(message.state);
    }
    if (message.principalInfo !== undefined) {
      obj.principalInfo = AppConnector_PrincipalInfo.toJSON(message.principalInfo);
    }
    if (message.resourceInfo !== undefined) {
      obj.resourceInfo = ResourceInfo.toJSON(message.resourceInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnector>): AppConnector {
    return AppConnector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnector>): AppConnector {
    const message = createBaseAppConnector();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    message.principalInfo = (object.principalInfo !== undefined && object.principalInfo !== null)
      ? AppConnector_PrincipalInfo.fromPartial(object.principalInfo)
      : undefined;
    message.resourceInfo = (object.resourceInfo !== undefined && object.resourceInfo !== null)
      ? ResourceInfo.fromPartial(object.resourceInfo)
      : undefined;
    return message;
  },
};

function createBaseAppConnector_PrincipalInfo(): AppConnector_PrincipalInfo {
  return { serviceAccount: undefined };
}

export const AppConnector_PrincipalInfo: MessageFns<AppConnector_PrincipalInfo> = {
  encode(message: AppConnector_PrincipalInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceAccount !== undefined) {
      AppConnector_PrincipalInfo_ServiceAccount.encode(message.serviceAccount, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector_PrincipalInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector_PrincipalInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceAccount = AppConnector_PrincipalInfo_ServiceAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector_PrincipalInfo {
    return {
      serviceAccount: isSet(object.serviceAccount)
        ? AppConnector_PrincipalInfo_ServiceAccount.fromJSON(object.serviceAccount)
        : undefined,
    };
  },

  toJSON(message: AppConnector_PrincipalInfo): unknown {
    const obj: any = {};
    if (message.serviceAccount !== undefined) {
      obj.serviceAccount = AppConnector_PrincipalInfo_ServiceAccount.toJSON(message.serviceAccount);
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnector_PrincipalInfo>): AppConnector_PrincipalInfo {
    return AppConnector_PrincipalInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnector_PrincipalInfo>): AppConnector_PrincipalInfo {
    const message = createBaseAppConnector_PrincipalInfo();
    message.serviceAccount = (object.serviceAccount !== undefined && object.serviceAccount !== null)
      ? AppConnector_PrincipalInfo_ServiceAccount.fromPartial(object.serviceAccount)
      : undefined;
    return message;
  },
};

function createBaseAppConnector_PrincipalInfo_ServiceAccount(): AppConnector_PrincipalInfo_ServiceAccount {
  return { email: "" };
}

export const AppConnector_PrincipalInfo_ServiceAccount: MessageFns<AppConnector_PrincipalInfo_ServiceAccount> = {
  encode(message: AppConnector_PrincipalInfo_ServiceAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector_PrincipalInfo_ServiceAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector_PrincipalInfo_ServiceAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector_PrincipalInfo_ServiceAccount {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: AppConnector_PrincipalInfo_ServiceAccount): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnector_PrincipalInfo_ServiceAccount>): AppConnector_PrincipalInfo_ServiceAccount {
    return AppConnector_PrincipalInfo_ServiceAccount.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppConnector_PrincipalInfo_ServiceAccount>,
  ): AppConnector_PrincipalInfo_ServiceAccount {
    const message = createBaseAppConnector_PrincipalInfo_ServiceAccount();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseAppConnector_LabelsEntry(): AppConnector_LabelsEntry {
  return { key: "", value: "" };
}

export const AppConnector_LabelsEntry: MessageFns<AppConnector_LabelsEntry> = {
  encode(message: AppConnector_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnector_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnector_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnector_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AppConnector_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnector_LabelsEntry>): AppConnector_LabelsEntry {
    return AppConnector_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnector_LabelsEntry>): AppConnector_LabelsEntry {
    const message = createBaseAppConnector_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAppConnectorOperationMetadata(): AppConnectorOperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const AppConnectorOperationMetadata: MessageFns<AppConnectorOperationMetadata> = {
  encode(message: AppConnectorOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnectorOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnectorOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnectorOperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: AppConnectorOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnectorOperationMetadata>): AppConnectorOperationMetadata {
    return AppConnectorOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnectorOperationMetadata>): AppConnectorOperationMetadata {
    const message = createBaseAppConnectorOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * API Overview:
 *
 * The `beyondcorp.googleapis.com` service implements the Google Cloud
 * BeyondCorp API.
 *
 * Data Model:
 *
 * The AppConnectorsService exposes the following resource:
 *
 * * AppConnectors, named as follows:
 *   `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`.
 *
 * The AppConnectorsService provides methods to manage
 * (create/read/update/delete) BeyondCorp AppConnectors.
 */
export type AppConnectorsServiceDefinition = typeof AppConnectorsServiceDefinition;
export const AppConnectorsServiceDefinition = {
  name: "AppConnectorsService",
  fullName: "google.cloud.beyondcorp.appconnectors.v1.AppConnectorsService",
  methods: {
    /** Lists AppConnectors in a given project and location. */
    listAppConnectors: {
      name: "ListAppConnectors",
      requestType: ListAppConnectorsRequest,
      requestStream: false,
      responseType: ListAppConnectorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single AppConnector. */
    getAppConnector: {
      name: "GetAppConnector",
      requestType: GetAppConnectorRequest,
      requestStream: false,
      responseType: AppConnector,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new AppConnector in a given project and location. */
    createAppConnector: {
      name: "CreateAppConnector",
      requestType: CreateAppConnectorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              12,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              18,
              29,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              44,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              13,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single AppConnector. */
    updateAppConnector: {
      name: "UpdateAppConnector",
      requestType: UpdateAppConnectorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              12,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              18,
              29,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              13,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single AppConnector. */
    deleteAppConnector: {
      name: "DeleteAppConnector",
      requestType: DeleteAppConnectorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              54,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              29,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Report status for a given connector. */
    reportStatus: {
      name: "ReportStatus",
      requestType: ReportStatusRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              12,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              18,
              29,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              105,
              110,
              102,
              111,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AppConnectorsServiceImplementation<CallContextExt = {}> {
  /** Lists AppConnectors in a given project and location. */
  listAppConnectors(
    request: ListAppConnectorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAppConnectorsResponse>>;
  /** Gets details of a single AppConnector. */
  getAppConnector(
    request: GetAppConnectorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AppConnector>>;
  /** Creates a new AppConnector in a given project and location. */
  createAppConnector(
    request: CreateAppConnectorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single AppConnector. */
  updateAppConnector(
    request: UpdateAppConnectorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single AppConnector. */
  deleteAppConnector(
    request: DeleteAppConnectorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Report status for a given connector. */
  reportStatus(request: ReportStatusRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface AppConnectorsServiceClient<CallOptionsExt = {}> {
  /** Lists AppConnectors in a given project and location. */
  listAppConnectors(
    request: DeepPartial<ListAppConnectorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAppConnectorsResponse>;
  /** Gets details of a single AppConnector. */
  getAppConnector(
    request: DeepPartial<GetAppConnectorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AppConnector>;
  /** Creates a new AppConnector in a given project and location. */
  createAppConnector(
    request: DeepPartial<CreateAppConnectorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single AppConnector. */
  updateAppConnector(
    request: DeepPartial<UpdateAppConnectorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single AppConnector. */
  deleteAppConnector(
    request: DeepPartial<DeleteAppConnectorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Report status for a given connector. */
  reportStatus(request: DeepPartial<ReportStatusRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
