// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/workflows/executions/v1/executions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../../protobuf/duration.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.workflows.executions.v1";

/** Defines possible views for execution resource. */
export enum ExecutionView {
  /** EXECUTION_VIEW_UNSPECIFIED - The default / unset value. */
  EXECUTION_VIEW_UNSPECIFIED = 0,
  /**
   * BASIC - Includes only basic metadata about the execution.
   * The following fields are returned: name, start_time, end_time, duration,
   * state, and workflow_revision_id.
   */
  BASIC = 1,
  /** FULL - Includes all data. */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function executionViewFromJSON(object: any): ExecutionView {
  switch (object) {
    case 0:
    case "EXECUTION_VIEW_UNSPECIFIED":
      return ExecutionView.EXECUTION_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return ExecutionView.BASIC;
    case 2:
    case "FULL":
      return ExecutionView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExecutionView.UNRECOGNIZED;
  }
}

export function executionViewToJSON(object: ExecutionView): string {
  switch (object) {
    case ExecutionView.EXECUTION_VIEW_UNSPECIFIED:
      return "EXECUTION_VIEW_UNSPECIFIED";
    case ExecutionView.BASIC:
      return "BASIC";
    case ExecutionView.FULL:
      return "FULL";
    case ExecutionView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A running instance of a
 * [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
 */
export interface Execution {
  /**
   * Output only. The resource name of the execution.
   * Format:
   * projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
   */
  name: string;
  /** Output only. Marks the beginning of execution. */
  startTime:
    | Date
    | undefined;
  /** Output only. Marks the end of execution, successful or not. */
  endTime:
    | Date
    | undefined;
  /** Output only. Measures the duration of the execution. */
  duration:
    | Duration
    | undefined;
  /** Output only. Current state of the execution. */
  state: Execution_State;
  /**
   * Input parameters of the execution represented as a JSON string.
   * The size limit is 32KB.
   *
   * *Note*: If you are using the REST API directly to run your workflow, you
   * must escape any JSON string value of `argument`. Example:
   * `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
   */
  argument: string;
  /**
   * Output only. Output of the execution represented as a JSON string. The
   * value can only be present if the execution's state is `SUCCEEDED`.
   */
  result: string;
  /**
   * Output only. The error which caused the execution to finish prematurely.
   * The value is only present if the execution's state is `FAILED`
   * or `CANCELLED`.
   */
  error:
    | Execution_Error
    | undefined;
  /** Output only. Revision of the workflow this execution is using. */
  workflowRevisionId: string;
  /** The call logging level associated to this execution. */
  callLogLevel: Execution_CallLogLevel;
  /**
   * Output only. Status tracks the current steps and progress data of this
   * execution.
   */
  status:
    | Execution_Status
    | undefined;
  /**
   * Labels associated with this execution.
   * Labels can contain at most 64 entries. Keys and values can be no longer
   * than 63 characters and can only contain lowercase letters, numeric
   * characters, underscores, and dashes. Label keys must start with a letter.
   * International characters are allowed.
   * By default, labels are inherited from the workflow but are overridden by
   * any labels associated with the execution.
   */
  labels: { [key: string]: string };
  /**
   * Output only. Error regarding the state of the Execution resource. For
   * example, this field will have error details if the execution data is
   * unavailable due to revoked KMS key permissions.
   */
  stateError: Execution_StateError | undefined;
}

/**
 * Describes the current state of the execution. More states might be added
 * in the future.
 */
export enum Execution_State {
  /** STATE_UNSPECIFIED - Invalid state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The execution is in progress. */
  ACTIVE = 1,
  /** SUCCEEDED - The execution finished successfully. */
  SUCCEEDED = 2,
  /** FAILED - The execution failed with an error. */
  FAILED = 3,
  /** CANCELLED - The execution was stopped intentionally. */
  CANCELLED = 4,
  /** UNAVAILABLE - Execution data is unavailable. See the `state_error` field. */
  UNAVAILABLE = 5,
  /** QUEUED - Request has been placed in the backlog for processing at a later time. */
  QUEUED = 6,
  UNRECOGNIZED = -1,
}

export function execution_StateFromJSON(object: any): Execution_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Execution_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Execution_State.ACTIVE;
    case 2:
    case "SUCCEEDED":
      return Execution_State.SUCCEEDED;
    case 3:
    case "FAILED":
      return Execution_State.FAILED;
    case 4:
    case "CANCELLED":
      return Execution_State.CANCELLED;
    case 5:
    case "UNAVAILABLE":
      return Execution_State.UNAVAILABLE;
    case 6:
    case "QUEUED":
      return Execution_State.QUEUED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Execution_State.UNRECOGNIZED;
  }
}

export function execution_StateToJSON(object: Execution_State): string {
  switch (object) {
    case Execution_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Execution_State.ACTIVE:
      return "ACTIVE";
    case Execution_State.SUCCEEDED:
      return "SUCCEEDED";
    case Execution_State.FAILED:
      return "FAILED";
    case Execution_State.CANCELLED:
      return "CANCELLED";
    case Execution_State.UNAVAILABLE:
      return "UNAVAILABLE";
    case Execution_State.QUEUED:
      return "QUEUED";
    case Execution_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Describes the level of platform logging to apply to calls and call
 * responses during workflow executions.
 */
export enum Execution_CallLogLevel {
  /** CALL_LOG_LEVEL_UNSPECIFIED - No call logging level specified. */
  CALL_LOG_LEVEL_UNSPECIFIED = 0,
  /**
   * LOG_ALL_CALLS - Log all call steps within workflows, all call returns, and all exceptions
   * raised.
   */
  LOG_ALL_CALLS = 1,
  /** LOG_ERRORS_ONLY - Log only exceptions that are raised from call steps within workflows. */
  LOG_ERRORS_ONLY = 2,
  /** LOG_NONE - Explicitly log nothing. */
  LOG_NONE = 3,
  UNRECOGNIZED = -1,
}

export function execution_CallLogLevelFromJSON(object: any): Execution_CallLogLevel {
  switch (object) {
    case 0:
    case "CALL_LOG_LEVEL_UNSPECIFIED":
      return Execution_CallLogLevel.CALL_LOG_LEVEL_UNSPECIFIED;
    case 1:
    case "LOG_ALL_CALLS":
      return Execution_CallLogLevel.LOG_ALL_CALLS;
    case 2:
    case "LOG_ERRORS_ONLY":
      return Execution_CallLogLevel.LOG_ERRORS_ONLY;
    case 3:
    case "LOG_NONE":
      return Execution_CallLogLevel.LOG_NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Execution_CallLogLevel.UNRECOGNIZED;
  }
}

export function execution_CallLogLevelToJSON(object: Execution_CallLogLevel): string {
  switch (object) {
    case Execution_CallLogLevel.CALL_LOG_LEVEL_UNSPECIFIED:
      return "CALL_LOG_LEVEL_UNSPECIFIED";
    case Execution_CallLogLevel.LOG_ALL_CALLS:
      return "LOG_ALL_CALLS";
    case Execution_CallLogLevel.LOG_ERRORS_ONLY:
      return "LOG_ERRORS_ONLY";
    case Execution_CallLogLevel.LOG_NONE:
      return "LOG_NONE";
    case Execution_CallLogLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A single stack element (frame) where an error occurred. */
export interface Execution_StackTraceElement {
  /** The step the error occurred at. */
  step: string;
  /** The routine where the error occurred. */
  routine: string;
  /** The source position information of the stack trace element. */
  position: Execution_StackTraceElement_Position | undefined;
}

/**
 * Position contains source position information about the stack trace
 * element such as line number, column number and length of the code block
 * in bytes.
 */
export interface Execution_StackTraceElement_Position {
  /** The source code line number the current instruction was generated from. */
  line: Long;
  /**
   * The source code column position (of the line) the current instruction
   * was generated from.
   */
  column: Long;
  /** The number of bytes of source code making up this stack trace element. */
  length: Long;
}

/** A collection of stack elements (frames) where an error occurred. */
export interface Execution_StackTrace {
  /** An array of stack elements. */
  elements: Execution_StackTraceElement[];
}

/** Error describes why the execution was abnormally terminated. */
export interface Execution_Error {
  /** Error message and data returned represented as a JSON string. */
  payload: string;
  /** Human-readable stack trace string. */
  context: string;
  /** Stack trace with detailed information of where error was generated. */
  stackTrace: Execution_StackTrace | undefined;
}

/** Represents the current status of this execution. */
export interface Execution_Status {
  /**
   * A list of currently executing or last executed step names for the
   * workflow execution currently running. If the workflow has succeeded or
   * failed, this is the last attempted or executed step. Presently, if the
   * current step is inside a subworkflow, the list only includes that step.
   * In the future, the list will contain items for each step in the call
   * stack, starting with the outermost step in the `main` subworkflow, and
   * ending with the most deeply nested step.
   */
  currentSteps: Execution_Status_Step[];
}

/** Represents a step of the workflow this execution is running. */
export interface Execution_Status_Step {
  /** Name of a routine within the workflow. */
  routine: string;
  /** Name of a step within the routine. */
  step: string;
}

/** Describes an error related to the current state of the Execution resource. */
export interface Execution_StateError {
  /** Provides specifics about the error. */
  details: string;
  /** The type of this state error. */
  type: Execution_StateError_Type;
}

/** Describes the possible types of a state error. */
export enum Execution_StateError_Type {
  /** TYPE_UNSPECIFIED - No type specified. */
  TYPE_UNSPECIFIED = 0,
  /** KMS_ERROR - Caused by an issue with KMS. */
  KMS_ERROR = 1,
  UNRECOGNIZED = -1,
}

export function execution_StateError_TypeFromJSON(object: any): Execution_StateError_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Execution_StateError_Type.TYPE_UNSPECIFIED;
    case 1:
    case "KMS_ERROR":
      return Execution_StateError_Type.KMS_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Execution_StateError_Type.UNRECOGNIZED;
  }
}

export function execution_StateError_TypeToJSON(object: Execution_StateError_Type): string {
  switch (object) {
    case Execution_StateError_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Execution_StateError_Type.KMS_ERROR:
      return "KMS_ERROR";
    case Execution_StateError_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Execution_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Request for the
 * [ListExecutions][]
 * method.
 */
export interface ListExecutionsRequest {
  /**
   * Required. Name of the workflow for which the executions should be listed.
   * Format: projects/{project}/locations/{location}/workflows/{workflow}
   */
  parent: string;
  /**
   * Maximum number of executions to return per call.
   * Max supported value depends on the selected Execution view: it's 1000 for
   * BASIC and 100 for FULL. The default value used if the field is not
   * specified is 100, regardless of the selected view. Values greater than
   * the max value will be coerced down to it.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListExecutions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListExecutions` must
   * match the call that provided the page token.
   *
   * Note that pagination is applied to dynamic data. The list of executions
   * returned can change between page requests.
   */
  pageToken: string;
  /**
   * Optional. A view defining which fields should be filled in the returned
   * executions. The API will default to the BASIC view.
   */
  view: ExecutionView;
  /**
   * Optional. Filters applied to the [Executions.ListExecutions] results.
   * The following fields are supported for filtering:
   * executionID, state, startTime, endTime, duration, workflowRevisionID,
   * stepName, and label.
   */
  filter: string;
  /**
   * Optional. The ordering applied to the [Executions.ListExecutions] results.
   * By default the ordering is based on descending start time.
   * The following fields are supported for order by:
   * executionID, startTime, endTime, duration, state, and workflowRevisionID.
   */
  orderBy: string;
}

/**
 * Response for the
 * [ListExecutions][google.cloud.workflows.executions.v1.Executions.ListExecutions]
 * method.
 */
export interface ListExecutionsResponse {
  /** The executions which match the request. */
  executions: Execution[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request for the
 * [CreateExecution][google.cloud.workflows.executions.v1.Executions.CreateExecution]
 * method.
 */
export interface CreateExecutionRequest {
  /**
   * Required. Name of the workflow for which an execution should be created.
   * Format: projects/{project}/locations/{location}/workflows/{workflow}
   * The latest revision of the workflow will be used.
   */
  parent: string;
  /** Required. Execution to be created. */
  execution: Execution | undefined;
}

/**
 * Request for the
 * [GetExecution][google.cloud.workflows.executions.v1.Executions.GetExecution]
 * method.
 */
export interface GetExecutionRequest {
  /**
   * Required. Name of the execution to be retrieved.
   * Format:
   * projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
   */
  name: string;
  /**
   * Optional. A view defining which fields should be filled in the returned
   * execution. The API will default to the FULL view.
   */
  view: ExecutionView;
}

/**
 * Request for the
 * [CancelExecution][google.cloud.workflows.executions.v1.Executions.CancelExecution]
 * method.
 */
export interface CancelExecutionRequest {
  /**
   * Required. Name of the execution to be cancelled.
   * Format:
   * projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
   */
  name: string;
}

function createBaseExecution(): Execution {
  return {
    name: "",
    startTime: undefined,
    endTime: undefined,
    duration: undefined,
    state: 0,
    argument: "",
    result: "",
    error: undefined,
    workflowRevisionId: "",
    callLogLevel: 0,
    status: undefined,
    labels: {},
    stateError: undefined,
  };
}

export const Execution: MessageFns<Execution> = {
  encode(message: Execution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(98).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.argument !== "") {
      writer.uint32(42).string(message.argument);
    }
    if (message.result !== "") {
      writer.uint32(50).string(message.result);
    }
    if (message.error !== undefined) {
      Execution_Error.encode(message.error, writer.uint32(58).fork()).join();
    }
    if (message.workflowRevisionId !== "") {
      writer.uint32(66).string(message.workflowRevisionId);
    }
    if (message.callLogLevel !== 0) {
      writer.uint32(72).int32(message.callLogLevel);
    }
    if (message.status !== undefined) {
      Execution_Status.encode(message.status, writer.uint32(82).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Execution_LabelsEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
    });
    if (message.stateError !== undefined) {
      Execution_StateError.encode(message.stateError, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.argument = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.result = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.error = Execution_Error.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.workflowRevisionId = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.callLogLevel = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.status = Execution_Status.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          const entry11 = Execution_LabelsEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.labels[entry11.key] = entry11.value;
          }
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.stateError = Execution_StateError.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      state: isSet(object.state) ? execution_StateFromJSON(object.state) : 0,
      argument: isSet(object.argument) ? globalThis.String(object.argument) : "",
      result: isSet(object.result) ? globalThis.String(object.result) : "",
      error: isSet(object.error) ? Execution_Error.fromJSON(object.error) : undefined,
      workflowRevisionId: isSet(object.workflowRevisionId) ? globalThis.String(object.workflowRevisionId) : "",
      callLogLevel: isSet(object.callLogLevel) ? execution_CallLogLevelFromJSON(object.callLogLevel) : 0,
      status: isSet(object.status) ? Execution_Status.fromJSON(object.status) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      stateError: isSet(object.stateError) ? Execution_StateError.fromJSON(object.stateError) : undefined,
    };
  },

  toJSON(message: Execution): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.state !== 0) {
      obj.state = execution_StateToJSON(message.state);
    }
    if (message.argument !== "") {
      obj.argument = message.argument;
    }
    if (message.result !== "") {
      obj.result = message.result;
    }
    if (message.error !== undefined) {
      obj.error = Execution_Error.toJSON(message.error);
    }
    if (message.workflowRevisionId !== "") {
      obj.workflowRevisionId = message.workflowRevisionId;
    }
    if (message.callLogLevel !== 0) {
      obj.callLogLevel = execution_CallLogLevelToJSON(message.callLogLevel);
    }
    if (message.status !== undefined) {
      obj.status = Execution_Status.toJSON(message.status);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.stateError !== undefined) {
      obj.stateError = Execution_StateError.toJSON(message.stateError);
    }
    return obj;
  },

  create(base?: DeepPartial<Execution>): Execution {
    return Execution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution>): Execution {
    const message = createBaseExecution();
    message.name = object.name ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.state = object.state ?? 0;
    message.argument = object.argument ?? "";
    message.result = object.result ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Execution_Error.fromPartial(object.error)
      : undefined;
    message.workflowRevisionId = object.workflowRevisionId ?? "";
    message.callLogLevel = object.callLogLevel ?? 0;
    message.status = (object.status !== undefined && object.status !== null)
      ? Execution_Status.fromPartial(object.status)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.stateError = (object.stateError !== undefined && object.stateError !== null)
      ? Execution_StateError.fromPartial(object.stateError)
      : undefined;
    return message;
  },
};

function createBaseExecution_StackTraceElement(): Execution_StackTraceElement {
  return { step: "", routine: "", position: undefined };
}

export const Execution_StackTraceElement: MessageFns<Execution_StackTraceElement> = {
  encode(message: Execution_StackTraceElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.step !== "") {
      writer.uint32(10).string(message.step);
    }
    if (message.routine !== "") {
      writer.uint32(18).string(message.routine);
    }
    if (message.position !== undefined) {
      Execution_StackTraceElement_Position.encode(message.position, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_StackTraceElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_StackTraceElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.step = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.routine = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.position = Execution_StackTraceElement_Position.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_StackTraceElement {
    return {
      step: isSet(object.step) ? globalThis.String(object.step) : "",
      routine: isSet(object.routine) ? globalThis.String(object.routine) : "",
      position: isSet(object.position) ? Execution_StackTraceElement_Position.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: Execution_StackTraceElement): unknown {
    const obj: any = {};
    if (message.step !== "") {
      obj.step = message.step;
    }
    if (message.routine !== "") {
      obj.routine = message.routine;
    }
    if (message.position !== undefined) {
      obj.position = Execution_StackTraceElement_Position.toJSON(message.position);
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_StackTraceElement>): Execution_StackTraceElement {
    return Execution_StackTraceElement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_StackTraceElement>): Execution_StackTraceElement {
    const message = createBaseExecution_StackTraceElement();
    message.step = object.step ?? "";
    message.routine = object.routine ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Execution_StackTraceElement_Position.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseExecution_StackTraceElement_Position(): Execution_StackTraceElement_Position {
  return { line: Long.ZERO, column: Long.ZERO, length: Long.ZERO };
}

export const Execution_StackTraceElement_Position: MessageFns<Execution_StackTraceElement_Position> = {
  encode(message: Execution_StackTraceElement_Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.line.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.line.toString());
    }
    if (!message.column.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.column.toString());
    }
    if (!message.length.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.length.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_StackTraceElement_Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_StackTraceElement_Position();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.line = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.column = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.length = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_StackTraceElement_Position {
    return {
      line: isSet(object.line) ? Long.fromValue(object.line) : Long.ZERO,
      column: isSet(object.column) ? Long.fromValue(object.column) : Long.ZERO,
      length: isSet(object.length) ? Long.fromValue(object.length) : Long.ZERO,
    };
  },

  toJSON(message: Execution_StackTraceElement_Position): unknown {
    const obj: any = {};
    if (!message.line.equals(Long.ZERO)) {
      obj.line = (message.line || Long.ZERO).toString();
    }
    if (!message.column.equals(Long.ZERO)) {
      obj.column = (message.column || Long.ZERO).toString();
    }
    if (!message.length.equals(Long.ZERO)) {
      obj.length = (message.length || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_StackTraceElement_Position>): Execution_StackTraceElement_Position {
    return Execution_StackTraceElement_Position.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_StackTraceElement_Position>): Execution_StackTraceElement_Position {
    const message = createBaseExecution_StackTraceElement_Position();
    message.line = (object.line !== undefined && object.line !== null) ? Long.fromValue(object.line) : Long.ZERO;
    message.column = (object.column !== undefined && object.column !== null)
      ? Long.fromValue(object.column)
      : Long.ZERO;
    message.length = (object.length !== undefined && object.length !== null)
      ? Long.fromValue(object.length)
      : Long.ZERO;
    return message;
  },
};

function createBaseExecution_StackTrace(): Execution_StackTrace {
  return { elements: [] };
}

export const Execution_StackTrace: MessageFns<Execution_StackTrace> = {
  encode(message: Execution_StackTrace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.elements) {
      Execution_StackTraceElement.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_StackTrace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_StackTrace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.elements.push(Execution_StackTraceElement.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_StackTrace {
    return {
      elements: globalThis.Array.isArray(object?.elements)
        ? object.elements.map((e: any) => Execution_StackTraceElement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Execution_StackTrace): unknown {
    const obj: any = {};
    if (message.elements?.length) {
      obj.elements = message.elements.map((e) => Execution_StackTraceElement.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_StackTrace>): Execution_StackTrace {
    return Execution_StackTrace.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_StackTrace>): Execution_StackTrace {
    const message = createBaseExecution_StackTrace();
    message.elements = object.elements?.map((e) => Execution_StackTraceElement.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExecution_Error(): Execution_Error {
  return { payload: "", context: "", stackTrace: undefined };
}

export const Execution_Error: MessageFns<Execution_Error> = {
  encode(message: Execution_Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== "") {
      writer.uint32(10).string(message.payload);
    }
    if (message.context !== "") {
      writer.uint32(18).string(message.context);
    }
    if (message.stackTrace !== undefined) {
      Execution_StackTrace.encode(message.stackTrace, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.context = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stackTrace = Execution_StackTrace.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_Error {
    return {
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      context: isSet(object.context) ? globalThis.String(object.context) : "",
      stackTrace: isSet(object.stackTrace) ? Execution_StackTrace.fromJSON(object.stackTrace) : undefined,
    };
  },

  toJSON(message: Execution_Error): unknown {
    const obj: any = {};
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.context !== "") {
      obj.context = message.context;
    }
    if (message.stackTrace !== undefined) {
      obj.stackTrace = Execution_StackTrace.toJSON(message.stackTrace);
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_Error>): Execution_Error {
    return Execution_Error.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_Error>): Execution_Error {
    const message = createBaseExecution_Error();
    message.payload = object.payload ?? "";
    message.context = object.context ?? "";
    message.stackTrace = (object.stackTrace !== undefined && object.stackTrace !== null)
      ? Execution_StackTrace.fromPartial(object.stackTrace)
      : undefined;
    return message;
  },
};

function createBaseExecution_Status(): Execution_Status {
  return { currentSteps: [] };
}

export const Execution_Status: MessageFns<Execution_Status> = {
  encode(message: Execution_Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.currentSteps) {
      Execution_Status_Step.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_Status();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.currentSteps.push(Execution_Status_Step.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_Status {
    return {
      currentSteps: globalThis.Array.isArray(object?.currentSteps)
        ? object.currentSteps.map((e: any) => Execution_Status_Step.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Execution_Status): unknown {
    const obj: any = {};
    if (message.currentSteps?.length) {
      obj.currentSteps = message.currentSteps.map((e) => Execution_Status_Step.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_Status>): Execution_Status {
    return Execution_Status.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_Status>): Execution_Status {
    const message = createBaseExecution_Status();
    message.currentSteps = object.currentSteps?.map((e) => Execution_Status_Step.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExecution_Status_Step(): Execution_Status_Step {
  return { routine: "", step: "" };
}

export const Execution_Status_Step: MessageFns<Execution_Status_Step> = {
  encode(message: Execution_Status_Step, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routine !== "") {
      writer.uint32(10).string(message.routine);
    }
    if (message.step !== "") {
      writer.uint32(18).string(message.step);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_Status_Step {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_Status_Step();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routine = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.step = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_Status_Step {
    return {
      routine: isSet(object.routine) ? globalThis.String(object.routine) : "",
      step: isSet(object.step) ? globalThis.String(object.step) : "",
    };
  },

  toJSON(message: Execution_Status_Step): unknown {
    const obj: any = {};
    if (message.routine !== "") {
      obj.routine = message.routine;
    }
    if (message.step !== "") {
      obj.step = message.step;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_Status_Step>): Execution_Status_Step {
    return Execution_Status_Step.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_Status_Step>): Execution_Status_Step {
    const message = createBaseExecution_Status_Step();
    message.routine = object.routine ?? "";
    message.step = object.step ?? "";
    return message;
  },
};

function createBaseExecution_StateError(): Execution_StateError {
  return { details: "", type: 0 };
}

export const Execution_StateError: MessageFns<Execution_StateError> = {
  encode(message: Execution_StateError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== "") {
      writer.uint32(10).string(message.details);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_StateError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_StateError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_StateError {
    return {
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      type: isSet(object.type) ? execution_StateError_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Execution_StateError): unknown {
    const obj: any = {};
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.type !== 0) {
      obj.type = execution_StateError_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_StateError>): Execution_StateError {
    return Execution_StateError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_StateError>): Execution_StateError {
    const message = createBaseExecution_StateError();
    message.details = object.details ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseExecution_LabelsEntry(): Execution_LabelsEntry {
  return { key: "", value: "" };
}

export const Execution_LabelsEntry: MessageFns<Execution_LabelsEntry> = {
  encode(message: Execution_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Execution_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_LabelsEntry>): Execution_LabelsEntry {
    return Execution_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_LabelsEntry>): Execution_LabelsEntry {
    const message = createBaseExecution_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListExecutionsRequest(): ListExecutionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", view: 0, filter: "", orderBy: "" };
}

export const ListExecutionsRequest: MessageFns<ListExecutionsRequest> = {
  encode(message: ListExecutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? executionViewFromJSON(object.view) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListExecutionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = executionViewToJSON(message.view);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    return ListExecutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    const message = createBaseListExecutionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListExecutionsResponse(): ListExecutionsResponse {
  return { executions: [], nextPageToken: "" };
}

export const ListExecutionsResponse: MessageFns<ListExecutionsResponse> = {
  encode(message: ListExecutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.executions) {
      Execution.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executions.push(Execution.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsResponse {
    return {
      executions: globalThis.Array.isArray(object?.executions)
        ? object.executions.map((e: any) => Execution.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExecutionsResponse): unknown {
    const obj: any = {};
    if (message.executions?.length) {
      obj.executions = message.executions.map((e) => Execution.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    return ListExecutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    const message = createBaseListExecutionsResponse();
    message.executions = object.executions?.map((e) => Execution.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateExecutionRequest(): CreateExecutionRequest {
  return { parent: "", execution: undefined };
}

export const CreateExecutionRequest: MessageFns<CreateExecutionRequest> = {
  encode(message: CreateExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.execution !== undefined) {
      Execution.encode(message.execution, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.execution = Execution.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExecutionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      execution: isSet(object.execution) ? Execution.fromJSON(object.execution) : undefined,
    };
  },

  toJSON(message: CreateExecutionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.execution !== undefined) {
      obj.execution = Execution.toJSON(message.execution);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExecutionRequest>): CreateExecutionRequest {
    return CreateExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExecutionRequest>): CreateExecutionRequest {
    const message = createBaseCreateExecutionRequest();
    message.parent = object.parent ?? "";
    message.execution = (object.execution !== undefined && object.execution !== null)
      ? Execution.fromPartial(object.execution)
      : undefined;
    return message;
  },
};

function createBaseGetExecutionRequest(): GetExecutionRequest {
  return { name: "", view: 0 };
}

export const GetExecutionRequest: MessageFns<GetExecutionRequest> = {
  encode(message: GetExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExecutionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? executionViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = executionViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    return GetExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    const message = createBaseGetExecutionRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseCancelExecutionRequest(): CancelExecutionRequest {
  return { name: "" };
}

export const CancelExecutionRequest: MessageFns<CancelExecutionRequest> = {
  encode(message: CancelExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelExecutionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelExecutionRequest>): CancelExecutionRequest {
    return CancelExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelExecutionRequest>): CancelExecutionRequest {
    const message = createBaseCancelExecutionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Executions is used to start and manage running instances of
 * [Workflows][google.cloud.workflows.v1.Workflow] called executions.
 */
export type ExecutionsDefinition = typeof ExecutionsDefinition;
export const ExecutionsDefinition = {
  name: "Executions",
  fullName: "google.cloud.workflows.executions.v1.Executions",
  methods: {
    /**
     * Returns a list of executions which belong to the workflow with
     * the given name. The method returns executions of all workflow
     * revisions. Returned executions are ordered by their start time (newest
     * first).
     */
    listExecutions: {
      name: "ListExecutions",
      requestType: ListExecutionsRequest,
      requestStream: false,
      responseType: ListExecutionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new execution using the latest revision of the given workflow. */
    createExecution: {
      name: "CreateExecution",
      requestType: CreateExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 101, 120, 101, 99, 117, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              71,
              58,
              9,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns an execution of the given name. */
    getExecution: {
      name: "GetExecution",
      requestType: GetExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Cancels an execution of the given name. */
    cancelExecution: {
      name: "CancelExecution",
      requestType: CancelExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExecutionsServiceImplementation<CallContextExt = {}> {
  /**
   * Returns a list of executions which belong to the workflow with
   * the given name. The method returns executions of all workflow
   * revisions. Returned executions are ordered by their start time (newest
   * first).
   */
  listExecutions(
    request: ListExecutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExecutionsResponse>>;
  /** Creates a new execution using the latest revision of the given workflow. */
  createExecution(
    request: CreateExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Execution>>;
  /** Returns an execution of the given name. */
  getExecution(request: GetExecutionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Execution>>;
  /** Cancels an execution of the given name. */
  cancelExecution(
    request: CancelExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Execution>>;
}

export interface ExecutionsClient<CallOptionsExt = {}> {
  /**
   * Returns a list of executions which belong to the workflow with
   * the given name. The method returns executions of all workflow
   * revisions. Returned executions are ordered by their start time (newest
   * first).
   */
  listExecutions(
    request: DeepPartial<ListExecutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExecutionsResponse>;
  /** Creates a new execution using the latest revision of the given workflow. */
  createExecution(
    request: DeepPartial<CreateExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Execution>;
  /** Returns an execution of the given name. */
  getExecution(request: DeepPartial<GetExecutionRequest>, options?: CallOptions & CallOptionsExt): Promise<Execution>;
  /** Cancels an execution of the given name. */
  cancelExecution(
    request: DeepPartial<CancelExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Execution>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
