// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/workflows/v1beta/workflows.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.workflows.v1beta";

/** Workflow program to be executed by Workflows. */
export interface Workflow {
  /**
   * The resource name of the workflow.
   * Format: projects/{project}/locations/{location}/workflows/{workflow}
   */
  name: string;
  /**
   * Description of the workflow provided by the user.
   * Must be at most 1000 unicode characters long.
   */
  description: string;
  /** Output only. State of the workflow deployment. */
  state: Workflow_State;
  /**
   * Output only. The revision of the workflow.
   * A new revision of a workflow is created as a result of updating the
   * following fields of a workflow:
   * - `source_code`
   * - `service_account`
   * The format is "000001-a4d", where the first 6 characters define
   * the zero-padded revision ordinal number. They are followed by a hyphen and
   * 3 hexadecimal random characters.
   */
  revisionId: string;
  /** Output only. The timestamp of when the workflow was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last update timestamp of the workflow. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The timestamp that the latest revision of the workflow
   * was created.
   */
  revisionCreateTime:
    | Date
    | undefined;
  /**
   * Labels associated with this workflow.
   * Labels can contain at most 64 entries. Keys and values can be no longer
   * than 63 characters and can only contain lowercase letters, numeric
   * characters, underscores and dashes. Label keys must start with a letter.
   * International characters are allowed.
   */
  labels: { [key: string]: string };
  /**
   * Name of the service account associated with the latest workflow version.
   * This service account represents the identity of the workflow and determines
   * what permissions the workflow has.
   * Format: projects/{project}/serviceAccounts/{account}
   *
   * Using `-` as a wildcard for the `{project}` will infer the project from
   * the account. The `{account}` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * If not provided, workflow will use the project's default service account.
   * Modifying this field for an existing workflow results in a new workflow
   * revision.
   */
  serviceAccount: string;
  /** Workflow code to be executed. The size limit is 32KB. */
  sourceContents?: string | undefined;
}

/**
 * Describes the current state of workflow deployment. More states may be
 * added in the future.
 */
export enum Workflow_State {
  /** STATE_UNSPECIFIED - Invalid state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The workflow has been deployed successfully and is serving. */
  ACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function workflow_StateFromJSON(object: any): Workflow_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Workflow_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Workflow_State.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Workflow_State.UNRECOGNIZED;
  }
}

export function workflow_StateToJSON(object: Workflow_State): string {
  switch (object) {
    case Workflow_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Workflow_State.ACTIVE:
      return "ACTIVE";
    case Workflow_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Workflow_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Request for the
 * [ListWorkflows][google.cloud.workflows.v1beta.Workflows.ListWorkflows]
 * method.
 */
export interface ListWorkflowsRequest {
  /**
   * Required. Project and location from which the workflows should be listed.
   * Format: projects/{project}/locations/{location}
   */
  parent: string;
  /**
   * Maximum number of workflows to return per call. The service may return
   * fewer than this value. If the value is not specified, a default value of
   * 500 will be used. The maximum permitted value is 1000 and values greater
   * than 1000 will be coerced down to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListWorkflows` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListWorkflows` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /** Filter to restrict results to specific workflows. */
  filter: string;
  /**
   * Comma-separated list of fields that that specify the order of the results.
   * Default sorting order for a field is ascending. To specify descending order
   * for a field, append a " desc" suffix.
   * If not specified, the results will be returned in an unspecified order.
   */
  orderBy: string;
}

/**
 * Response for the
 * [ListWorkflows][google.cloud.workflows.v1beta.Workflows.ListWorkflows]
 * method.
 */
export interface ListWorkflowsResponse {
  /** The workflows which match the request. */
  workflows: Workflow[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Unreachable resources. */
  unreachable: string[];
}

/**
 * Request for the
 * [GetWorkflow][google.cloud.workflows.v1beta.Workflows.GetWorkflow] method.
 */
export interface GetWorkflowRequest {
  /**
   * Required. Name of the workflow which information should be retrieved.
   * Format: projects/{project}/locations/{location}/workflows/{workflow}
   */
  name: string;
}

/**
 * Request for the
 * [CreateWorkflow][google.cloud.workflows.v1beta.Workflows.CreateWorkflow]
 * method.
 */
export interface CreateWorkflowRequest {
  /**
   * Required. Project and location in which the workflow should be created.
   * Format:  projects/{project}/locations/{location}
   */
  parent: string;
  /** Required. Workflow to be created. */
  workflow:
    | Workflow
    | undefined;
  /**
   * Required. The ID of the workflow to be created. It has to fulfill the
   * following requirements:
   *
   * * Must contain only letters, numbers, underscores and hyphens.
   * * Must start with a letter.
   * * Must be between 1-64 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the customer project and location.
   */
  workflowId: string;
}

/**
 * Request for the
 * [DeleteWorkflow][google.cloud.workflows.v1beta.Workflows.DeleteWorkflow]
 * method.
 */
export interface DeleteWorkflowRequest {
  /**
   * Required. Name of the workflow to be deleted.
   * Format: projects/{project}/locations/{location}/workflows/{workflow}
   */
  name: string;
}

/**
 * Request for the
 * [UpdateWorkflow][google.cloud.workflows.v1beta.Workflows.UpdateWorkflow]
 * method.
 */
export interface UpdateWorkflowRequest {
  /** Required. Workflow to be updated. */
  workflow:
    | Workflow
    | undefined;
  /**
   * List of fields to be updated. If not present, the entire workflow
   * will be updated.
   */
  updateMask: string[] | undefined;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Server-defined resource path for the target of the operation. */
  target: string;
  /** Name of the verb executed by the operation. */
  verb: string;
  /** API version used to start the operation. */
  apiVersion: string;
}

function createBaseWorkflow(): Workflow {
  return {
    name: "",
    description: "",
    state: 0,
    revisionId: "",
    createTime: undefined,
    updateTime: undefined,
    revisionCreateTime: undefined,
    labels: {},
    serviceAccount: "",
    sourceContents: undefined,
  };
}

export const Workflow: MessageFns<Workflow> = {
  encode(message: Workflow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.revisionId !== "") {
      writer.uint32(34).string(message.revisionId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.revisionCreateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.revisionCreateTime), writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Workflow_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.serviceAccount !== "") {
      writer.uint32(74).string(message.serviceAccount);
    }
    if (message.sourceContents !== undefined) {
      writer.uint32(82).string(message.sourceContents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workflow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.revisionCreateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = Workflow_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.sourceContents = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workflow {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? workflow_StateFromJSON(object.state) : 0,
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      revisionCreateTime: isSet(object.revisionCreateTime) ? fromJsonTimestamp(object.revisionCreateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      sourceContents: isSet(object.sourceContents) ? globalThis.String(object.sourceContents) : undefined,
    };
  },

  toJSON(message: Workflow): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = workflow_StateToJSON(message.state);
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.revisionCreateTime !== undefined) {
      obj.revisionCreateTime = message.revisionCreateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.sourceContents !== undefined) {
      obj.sourceContents = message.sourceContents;
    }
    return obj;
  },

  create(base?: DeepPartial<Workflow>): Workflow {
    return Workflow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Workflow>): Workflow {
    const message = createBaseWorkflow();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.revisionId = object.revisionId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.revisionCreateTime = object.revisionCreateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.serviceAccount = object.serviceAccount ?? "";
    message.sourceContents = object.sourceContents ?? undefined;
    return message;
  },
};

function createBaseWorkflow_LabelsEntry(): Workflow_LabelsEntry {
  return { key: "", value: "" };
}

export const Workflow_LabelsEntry: MessageFns<Workflow_LabelsEntry> = {
  encode(message: Workflow_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workflow_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflow_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workflow_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Workflow_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Workflow_LabelsEntry>): Workflow_LabelsEntry {
    return Workflow_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Workflow_LabelsEntry>): Workflow_LabelsEntry {
    const message = createBaseWorkflow_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListWorkflowsRequest(): ListWorkflowsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListWorkflowsRequest: MessageFns<ListWorkflowsRequest> = {
  encode(message: ListWorkflowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkflowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkflowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkflowsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListWorkflowsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkflowsRequest>): ListWorkflowsRequest {
    return ListWorkflowsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkflowsRequest>): ListWorkflowsRequest {
    const message = createBaseListWorkflowsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListWorkflowsResponse(): ListWorkflowsResponse {
  return { workflows: [], nextPageToken: "", unreachable: [] };
}

export const ListWorkflowsResponse: MessageFns<ListWorkflowsResponse> = {
  encode(message: ListWorkflowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workflows) {
      Workflow.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkflowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkflowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workflows.push(Workflow.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkflowsResponse {
    return {
      workflows: globalThis.Array.isArray(object?.workflows)
        ? object.workflows.map((e: any) => Workflow.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListWorkflowsResponse): unknown {
    const obj: any = {};
    if (message.workflows?.length) {
      obj.workflows = message.workflows.map((e) => Workflow.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkflowsResponse>): ListWorkflowsResponse {
    return ListWorkflowsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkflowsResponse>): ListWorkflowsResponse {
    const message = createBaseListWorkflowsResponse();
    message.workflows = object.workflows?.map((e) => Workflow.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetWorkflowRequest(): GetWorkflowRequest {
  return { name: "" };
}

export const GetWorkflowRequest: MessageFns<GetWorkflowRequest> = {
  encode(message: GetWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkflowRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWorkflowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkflowRequest>): GetWorkflowRequest {
    return GetWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkflowRequest>): GetWorkflowRequest {
    const message = createBaseGetWorkflowRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateWorkflowRequest(): CreateWorkflowRequest {
  return { parent: "", workflow: undefined, workflowId: "" };
}

export const CreateWorkflowRequest: MessageFns<CreateWorkflowRequest> = {
  encode(message: CreateWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.workflow !== undefined) {
      Workflow.encode(message.workflow, writer.uint32(18).fork()).join();
    }
    if (message.workflowId !== "") {
      writer.uint32(26).string(message.workflowId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workflow = Workflow.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.workflowId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorkflowRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      workflow: isSet(object.workflow) ? Workflow.fromJSON(object.workflow) : undefined,
      workflowId: isSet(object.workflowId) ? globalThis.String(object.workflowId) : "",
    };
  },

  toJSON(message: CreateWorkflowRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.workflow !== undefined) {
      obj.workflow = Workflow.toJSON(message.workflow);
    }
    if (message.workflowId !== "") {
      obj.workflowId = message.workflowId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWorkflowRequest>): CreateWorkflowRequest {
    return CreateWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWorkflowRequest>): CreateWorkflowRequest {
    const message = createBaseCreateWorkflowRequest();
    message.parent = object.parent ?? "";
    message.workflow = (object.workflow !== undefined && object.workflow !== null)
      ? Workflow.fromPartial(object.workflow)
      : undefined;
    message.workflowId = object.workflowId ?? "";
    return message;
  },
};

function createBaseDeleteWorkflowRequest(): DeleteWorkflowRequest {
  return { name: "" };
}

export const DeleteWorkflowRequest: MessageFns<DeleteWorkflowRequest> = {
  encode(message: DeleteWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWorkflowRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteWorkflowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWorkflowRequest>): DeleteWorkflowRequest {
    return DeleteWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWorkflowRequest>): DeleteWorkflowRequest {
    const message = createBaseDeleteWorkflowRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateWorkflowRequest(): UpdateWorkflowRequest {
  return { workflow: undefined, updateMask: undefined };
}

export const UpdateWorkflowRequest: MessageFns<UpdateWorkflowRequest> = {
  encode(message: UpdateWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow !== undefined) {
      Workflow.encode(message.workflow, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workflow = Workflow.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWorkflowRequest {
    return {
      workflow: isSet(object.workflow) ? Workflow.fromJSON(object.workflow) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateWorkflowRequest): unknown {
    const obj: any = {};
    if (message.workflow !== undefined) {
      obj.workflow = Workflow.toJSON(message.workflow);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkflowRequest>): UpdateWorkflowRequest {
    return UpdateWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateWorkflowRequest>): UpdateWorkflowRequest {
    const message = createBaseUpdateWorkflowRequest();
    message.workflow = (object.workflow !== undefined && object.workflow !== null)
      ? Workflow.fromPartial(object.workflow)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return { createTime: undefined, endTime: undefined, target: "", verb: "", apiVersion: "" };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.apiVersion !== "") {
      writer.uint32(42).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * Workflows is used to deploy and execute workflow programs.
 * Workflows makes sure the program executes reliably, despite hardware and
 * networking interruptions.
 */
export type WorkflowsDefinition = typeof WorkflowsDefinition;
export const WorkflowsDefinition = {
  name: "Workflows",
  fullName: "google.cloud.workflows.v1beta.Workflows",
  methods: {
    /**
     * Lists Workflows in a given project and location.
     * The default order is not specified.
     */
    listWorkflows: {
      name: "ListWorkflows",
      requestType: ListWorkflowsRequest,
      requestStream: false,
      responseType: ListWorkflowsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Workflow. */
    getWorkflow: {
      name: "GetWorkflow",
      requestType: GetWorkflowRequest,
      requestStream: false,
      responseType: Workflow,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new workflow. If a workflow with the specified name already
     * exists in the specified project and location, the long running operation
     * will return [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
     */
    createWorkflow: {
      name: "CreateWorkflow",
      requestType: CreateWorkflowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              44,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              8,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              34,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a workflow with the specified name.
     * This method also cancels and deletes all running executions of the
     * workflow.
     */
    deleteWorkflow: {
      name: "DeleteWorkflow",
      requestType: DeleteWorkflowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing workflow.
     * Running this method has no impact on already running executions of the
     * workflow. A new revision of the workflow may be created as a result of a
     * successful update operation. In that case, such revision will be used
     * in new workflow executions.
     */
    updateWorkflow: {
      name: "UpdateWorkflow",
      requestType: UpdateWorkflowRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              8,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              50,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface WorkflowsServiceImplementation<CallContextExt = {}> {
  /**
   * Lists Workflows in a given project and location.
   * The default order is not specified.
   */
  listWorkflows(
    request: ListWorkflowsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWorkflowsResponse>>;
  /** Gets details of a single Workflow. */
  getWorkflow(request: GetWorkflowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Workflow>>;
  /**
   * Creates a new workflow. If a workflow with the specified name already
   * exists in the specified project and location, the long running operation
   * will return [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
   */
  createWorkflow(
    request: CreateWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a workflow with the specified name.
   * This method also cancels and deletes all running executions of the
   * workflow.
   */
  deleteWorkflow(
    request: DeleteWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing workflow.
   * Running this method has no impact on already running executions of the
   * workflow. A new revision of the workflow may be created as a result of a
   * successful update operation. In that case, such revision will be used
   * in new workflow executions.
   */
  updateWorkflow(
    request: UpdateWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface WorkflowsClient<CallOptionsExt = {}> {
  /**
   * Lists Workflows in a given project and location.
   * The default order is not specified.
   */
  listWorkflows(
    request: DeepPartial<ListWorkflowsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWorkflowsResponse>;
  /** Gets details of a single Workflow. */
  getWorkflow(request: DeepPartial<GetWorkflowRequest>, options?: CallOptions & CallOptionsExt): Promise<Workflow>;
  /**
   * Creates a new workflow. If a workflow with the specified name already
   * exists in the specified project and location, the long running operation
   * will return [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
   */
  createWorkflow(
    request: DeepPartial<CreateWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a workflow with the specified name.
   * This method also cancels and deletes all running executions of the
   * workflow.
   */
  deleteWorkflow(
    request: DeepPartial<DeleteWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates an existing workflow.
   * Running this method has no impact on already running executions of the
   * workflow. A new revision of the workflow may be created as a result of a
   * successful update operation. In that case, such revision will be used
   * in new workflow executions.
   */
  updateWorkflow(
    request: DeepPartial<UpdateWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
