// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/workflows/type/engine_call.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.workflows.type";

/**
 * Logged during a workflow execution if the customer has requested call
 * logging.
 */
export interface EngineCallLog {
  /** The execution ID of the execution where the call occurred. */
  executionId: string;
  /** The point in time when the activity occurred. */
  activityTime:
    | Date
    | undefined;
  /** The state of the function execution. */
  state: EngineCallLog_State;
  /** The name of the step in which the call took place, truncated if necessary. */
  step: string;
  /** The name of the target of the call, truncated if necessary. */
  callee: string;
  /** Appears at the start of a call. */
  begun?:
    | EngineCallLog_Begun
    | undefined;
  /** Appears when a call returns successfully. */
  succeeded?:
    | EngineCallLog_Succeeded
    | undefined;
  /** Appears when a call returns because an exception was raised. */
  exceptionRaised?:
    | EngineCallLog_ExceptionRaised
    | undefined;
  /** Appears when an exception is handled and normal execution resumes. */
  exceptionHandled?: EngineCallLog_ExceptionHandled | undefined;
}

/** The state of a function call. */
export enum EngineCallLog_State {
  /** STATE_UNSPECIFIED - Function call state is unspecified or unknown. */
  STATE_UNSPECIFIED = 0,
  /** BEGUN - Function call is starting. */
  BEGUN = 1,
  /** SUCCEEDED - Function call has completed successfully. */
  SUCCEEDED = 2,
  /** EXCEPTION_RAISED - Function call did not succeed because an exception was raised. */
  EXCEPTION_RAISED = 3,
  /** EXCEPTION_HANDLED - Function call handled an exception and is continuing. */
  EXCEPTION_HANDLED = 4,
  UNRECOGNIZED = -1,
}

export function engineCallLog_StateFromJSON(object: any): EngineCallLog_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return EngineCallLog_State.STATE_UNSPECIFIED;
    case 1:
    case "BEGUN":
      return EngineCallLog_State.BEGUN;
    case 2:
    case "SUCCEEDED":
      return EngineCallLog_State.SUCCEEDED;
    case 3:
    case "EXCEPTION_RAISED":
      return EngineCallLog_State.EXCEPTION_RAISED;
    case 4:
    case "EXCEPTION_HANDLED":
      return EngineCallLog_State.EXCEPTION_HANDLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EngineCallLog_State.UNRECOGNIZED;
  }
}

export function engineCallLog_StateToJSON(object: EngineCallLog_State): string {
  switch (object) {
    case EngineCallLog_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case EngineCallLog_State.BEGUN:
      return "BEGUN";
    case EngineCallLog_State.SUCCEEDED:
      return "SUCCEEDED";
    case EngineCallLog_State.EXCEPTION_RAISED:
      return "EXCEPTION_RAISED";
    case EngineCallLog_State.EXCEPTION_HANDLED:
      return "EXCEPTION_HANDLED";
    case EngineCallLog_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Information about an argument to a called function. */
export interface EngineCallLog_CallArg {
  /**
   * A function argument, serialized to a string. This may be truncated for
   * size reasons.
   */
  argument: string;
}

/** Information about the start of a call. */
export interface EngineCallLog_Begun {
  /**
   * The arguments passed to the function. Only one of 'args' and 'named_args'
   * will be populated.
   */
  args: EngineCallLog_CallArg[];
  /**
   * The arguments passed to the function, as a map with the argument names as
   * the keys. The values may be JSON values or they may be the serialized
   * string forms of the arguments truncated for size reasons. Only one of
   * 'args' and 'named_args' will be populated.
   */
  namedArgs: { [key: string]: any | undefined };
}

export interface EngineCallLog_Begun_NamedArgsEntry {
  key: string;
  value: any | undefined;
}

/** Information about the end of a successful call. */
export interface EngineCallLog_Succeeded {
  /** The time when the call started. */
  callStartTime:
    | Date
    | undefined;
  /**
   * The result of the call, if the call succeeded, serialized to a string.
   * This may be truncated for size reasons.
   */
  response: string;
}

/** Information about the end of a failed call. */
export interface EngineCallLog_ExceptionRaised {
  /** The time when the call started. */
  callStartTime:
    | Date
    | undefined;
  /** The exception message which terminated the call, truncated if necessary. */
  exception: string;
  /**
   * The name of the step where the failure originates, if known. Truncated
   * if necessary.
   */
  origin: string;
}

/** Information about an exception which was handled. */
export interface EngineCallLog_ExceptionHandled {
  /** The time when the call started. */
  callStartTime:
    | Date
    | undefined;
  /** The exception message which was handled, truncated if necessary. */
  exception: string;
  /**
   * The name of the step where the failure originates, if known. Truncated
   * if necessary.
   */
  origin: string;
}

function createBaseEngineCallLog(): EngineCallLog {
  return {
    executionId: "",
    activityTime: undefined,
    state: 0,
    step: "",
    callee: "",
    begun: undefined,
    succeeded: undefined,
    exceptionRaised: undefined,
    exceptionHandled: undefined,
  };
}

export const EngineCallLog: MessageFns<EngineCallLog> = {
  encode(message: EngineCallLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.executionId !== "") {
      writer.uint32(10).string(message.executionId);
    }
    if (message.activityTime !== undefined) {
      Timestamp.encode(toTimestamp(message.activityTime), writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.step !== "") {
      writer.uint32(34).string(message.step);
    }
    if (message.callee !== "") {
      writer.uint32(42).string(message.callee);
    }
    if (message.begun !== undefined) {
      EngineCallLog_Begun.encode(message.begun, writer.uint32(50).fork()).join();
    }
    if (message.succeeded !== undefined) {
      EngineCallLog_Succeeded.encode(message.succeeded, writer.uint32(58).fork()).join();
    }
    if (message.exceptionRaised !== undefined) {
      EngineCallLog_ExceptionRaised.encode(message.exceptionRaised, writer.uint32(66).fork()).join();
    }
    if (message.exceptionHandled !== undefined) {
      EngineCallLog_ExceptionHandled.encode(message.exceptionHandled, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executionId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.activityTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.step = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.callee = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.begun = EngineCallLog_Begun.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.succeeded = EngineCallLog_Succeeded.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.exceptionRaised = EngineCallLog_ExceptionRaised.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.exceptionHandled = EngineCallLog_ExceptionHandled.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog {
    return {
      executionId: isSet(object.executionId) ? globalThis.String(object.executionId) : "",
      activityTime: isSet(object.activityTime) ? fromJsonTimestamp(object.activityTime) : undefined,
      state: isSet(object.state) ? engineCallLog_StateFromJSON(object.state) : 0,
      step: isSet(object.step) ? globalThis.String(object.step) : "",
      callee: isSet(object.callee) ? globalThis.String(object.callee) : "",
      begun: isSet(object.begun) ? EngineCallLog_Begun.fromJSON(object.begun) : undefined,
      succeeded: isSet(object.succeeded) ? EngineCallLog_Succeeded.fromJSON(object.succeeded) : undefined,
      exceptionRaised: isSet(object.exceptionRaised)
        ? EngineCallLog_ExceptionRaised.fromJSON(object.exceptionRaised)
        : undefined,
      exceptionHandled: isSet(object.exceptionHandled)
        ? EngineCallLog_ExceptionHandled.fromJSON(object.exceptionHandled)
        : undefined,
    };
  },

  toJSON(message: EngineCallLog): unknown {
    const obj: any = {};
    if (message.executionId !== "") {
      obj.executionId = message.executionId;
    }
    if (message.activityTime !== undefined) {
      obj.activityTime = message.activityTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = engineCallLog_StateToJSON(message.state);
    }
    if (message.step !== "") {
      obj.step = message.step;
    }
    if (message.callee !== "") {
      obj.callee = message.callee;
    }
    if (message.begun !== undefined) {
      obj.begun = EngineCallLog_Begun.toJSON(message.begun);
    }
    if (message.succeeded !== undefined) {
      obj.succeeded = EngineCallLog_Succeeded.toJSON(message.succeeded);
    }
    if (message.exceptionRaised !== undefined) {
      obj.exceptionRaised = EngineCallLog_ExceptionRaised.toJSON(message.exceptionRaised);
    }
    if (message.exceptionHandled !== undefined) {
      obj.exceptionHandled = EngineCallLog_ExceptionHandled.toJSON(message.exceptionHandled);
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog>): EngineCallLog {
    return EngineCallLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog>): EngineCallLog {
    const message = createBaseEngineCallLog();
    message.executionId = object.executionId ?? "";
    message.activityTime = object.activityTime ?? undefined;
    message.state = object.state ?? 0;
    message.step = object.step ?? "";
    message.callee = object.callee ?? "";
    message.begun = (object.begun !== undefined && object.begun !== null)
      ? EngineCallLog_Begun.fromPartial(object.begun)
      : undefined;
    message.succeeded = (object.succeeded !== undefined && object.succeeded !== null)
      ? EngineCallLog_Succeeded.fromPartial(object.succeeded)
      : undefined;
    message.exceptionRaised = (object.exceptionRaised !== undefined && object.exceptionRaised !== null)
      ? EngineCallLog_ExceptionRaised.fromPartial(object.exceptionRaised)
      : undefined;
    message.exceptionHandled = (object.exceptionHandled !== undefined && object.exceptionHandled !== null)
      ? EngineCallLog_ExceptionHandled.fromPartial(object.exceptionHandled)
      : undefined;
    return message;
  },
};

function createBaseEngineCallLog_CallArg(): EngineCallLog_CallArg {
  return { argument: "" };
}

export const EngineCallLog_CallArg: MessageFns<EngineCallLog_CallArg> = {
  encode(message: EngineCallLog_CallArg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.argument !== "") {
      writer.uint32(10).string(message.argument);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog_CallArg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog_CallArg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.argument = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog_CallArg {
    return { argument: isSet(object.argument) ? globalThis.String(object.argument) : "" };
  },

  toJSON(message: EngineCallLog_CallArg): unknown {
    const obj: any = {};
    if (message.argument !== "") {
      obj.argument = message.argument;
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog_CallArg>): EngineCallLog_CallArg {
    return EngineCallLog_CallArg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog_CallArg>): EngineCallLog_CallArg {
    const message = createBaseEngineCallLog_CallArg();
    message.argument = object.argument ?? "";
    return message;
  },
};

function createBaseEngineCallLog_Begun(): EngineCallLog_Begun {
  return { args: [], namedArgs: {} };
}

export const EngineCallLog_Begun: MessageFns<EngineCallLog_Begun> = {
  encode(message: EngineCallLog_Begun, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.args) {
      EngineCallLog_CallArg.encode(v!, writer.uint32(10).fork()).join();
    }
    Object.entries(message.namedArgs).forEach(([key, value]) => {
      if (value !== undefined) {
        EngineCallLog_Begun_NamedArgsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog_Begun {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog_Begun();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.args.push(EngineCallLog_CallArg.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = EngineCallLog_Begun_NamedArgsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.namedArgs[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog_Begun {
    return {
      args: globalThis.Array.isArray(object?.args)
        ? object.args.map((e: any) => EngineCallLog_CallArg.fromJSON(e))
        : [],
      namedArgs: isObject(object.namedArgs)
        ? Object.entries(object.namedArgs).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: EngineCallLog_Begun): unknown {
    const obj: any = {};
    if (message.args?.length) {
      obj.args = message.args.map((e) => EngineCallLog_CallArg.toJSON(e));
    }
    if (message.namedArgs) {
      const entries = Object.entries(message.namedArgs);
      if (entries.length > 0) {
        obj.namedArgs = {};
        entries.forEach(([k, v]) => {
          obj.namedArgs[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog_Begun>): EngineCallLog_Begun {
    return EngineCallLog_Begun.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog_Begun>): EngineCallLog_Begun {
    const message = createBaseEngineCallLog_Begun();
    message.args = object.args?.map((e) => EngineCallLog_CallArg.fromPartial(e)) || [];
    message.namedArgs = Object.entries(object.namedArgs ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseEngineCallLog_Begun_NamedArgsEntry(): EngineCallLog_Begun_NamedArgsEntry {
  return { key: "", value: undefined };
}

export const EngineCallLog_Begun_NamedArgsEntry: MessageFns<EngineCallLog_Begun_NamedArgsEntry> = {
  encode(message: EngineCallLog_Begun_NamedArgsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog_Begun_NamedArgsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog_Begun_NamedArgsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog_Begun_NamedArgsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: EngineCallLog_Begun_NamedArgsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog_Begun_NamedArgsEntry>): EngineCallLog_Begun_NamedArgsEntry {
    return EngineCallLog_Begun_NamedArgsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog_Begun_NamedArgsEntry>): EngineCallLog_Begun_NamedArgsEntry {
    const message = createBaseEngineCallLog_Begun_NamedArgsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseEngineCallLog_Succeeded(): EngineCallLog_Succeeded {
  return { callStartTime: undefined, response: "" };
}

export const EngineCallLog_Succeeded: MessageFns<EngineCallLog_Succeeded> = {
  encode(message: EngineCallLog_Succeeded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.callStartTime), writer.uint32(10).fork()).join();
    }
    if (message.response !== "") {
      writer.uint32(18).string(message.response);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog_Succeeded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog_Succeeded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog_Succeeded {
    return {
      callStartTime: isSet(object.callStartTime) ? fromJsonTimestamp(object.callStartTime) : undefined,
      response: isSet(object.response) ? globalThis.String(object.response) : "",
    };
  },

  toJSON(message: EngineCallLog_Succeeded): unknown {
    const obj: any = {};
    if (message.callStartTime !== undefined) {
      obj.callStartTime = message.callStartTime.toISOString();
    }
    if (message.response !== "") {
      obj.response = message.response;
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog_Succeeded>): EngineCallLog_Succeeded {
    return EngineCallLog_Succeeded.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog_Succeeded>): EngineCallLog_Succeeded {
    const message = createBaseEngineCallLog_Succeeded();
    message.callStartTime = object.callStartTime ?? undefined;
    message.response = object.response ?? "";
    return message;
  },
};

function createBaseEngineCallLog_ExceptionRaised(): EngineCallLog_ExceptionRaised {
  return { callStartTime: undefined, exception: "", origin: "" };
}

export const EngineCallLog_ExceptionRaised: MessageFns<EngineCallLog_ExceptionRaised> = {
  encode(message: EngineCallLog_ExceptionRaised, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.callStartTime), writer.uint32(10).fork()).join();
    }
    if (message.exception !== "") {
      writer.uint32(18).string(message.exception);
    }
    if (message.origin !== "") {
      writer.uint32(26).string(message.origin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog_ExceptionRaised {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog_ExceptionRaised();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.exception = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.origin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog_ExceptionRaised {
    return {
      callStartTime: isSet(object.callStartTime) ? fromJsonTimestamp(object.callStartTime) : undefined,
      exception: isSet(object.exception) ? globalThis.String(object.exception) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
    };
  },

  toJSON(message: EngineCallLog_ExceptionRaised): unknown {
    const obj: any = {};
    if (message.callStartTime !== undefined) {
      obj.callStartTime = message.callStartTime.toISOString();
    }
    if (message.exception !== "") {
      obj.exception = message.exception;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog_ExceptionRaised>): EngineCallLog_ExceptionRaised {
    return EngineCallLog_ExceptionRaised.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog_ExceptionRaised>): EngineCallLog_ExceptionRaised {
    const message = createBaseEngineCallLog_ExceptionRaised();
    message.callStartTime = object.callStartTime ?? undefined;
    message.exception = object.exception ?? "";
    message.origin = object.origin ?? "";
    return message;
  },
};

function createBaseEngineCallLog_ExceptionHandled(): EngineCallLog_ExceptionHandled {
  return { callStartTime: undefined, exception: "", origin: "" };
}

export const EngineCallLog_ExceptionHandled: MessageFns<EngineCallLog_ExceptionHandled> = {
  encode(message: EngineCallLog_ExceptionHandled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.callStartTime), writer.uint32(10).fork()).join();
    }
    if (message.exception !== "") {
      writer.uint32(18).string(message.exception);
    }
    if (message.origin !== "") {
      writer.uint32(26).string(message.origin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EngineCallLog_ExceptionHandled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngineCallLog_ExceptionHandled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.exception = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.origin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EngineCallLog_ExceptionHandled {
    return {
      callStartTime: isSet(object.callStartTime) ? fromJsonTimestamp(object.callStartTime) : undefined,
      exception: isSet(object.exception) ? globalThis.String(object.exception) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
    };
  },

  toJSON(message: EngineCallLog_ExceptionHandled): unknown {
    const obj: any = {};
    if (message.callStartTime !== undefined) {
      obj.callStartTime = message.callStartTime.toISOString();
    }
    if (message.exception !== "") {
      obj.exception = message.exception;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    return obj;
  },

  create(base?: DeepPartial<EngineCallLog_ExceptionHandled>): EngineCallLog_ExceptionHandled {
    return EngineCallLog_ExceptionHandled.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EngineCallLog_ExceptionHandled>): EngineCallLog_ExceptionHandled {
    const message = createBaseEngineCallLog_ExceptionHandled();
    message.callStartTime = object.callStartTime ?? undefined;
    message.exception = object.exception ?? "";
    message.origin = object.origin ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
