// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/enterpriseknowledgegraph/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { ListValue, Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Int32Value } from "../../../protobuf/wrappers.js";
import { Status } from "../../../rpc/status.js";
import { JobState, jobStateFromJSON, jobStateToJSON } from "./job_state.js";
import { CommonOperationMetadata } from "./operation_metadata.js";

export const protobufPackage = "google.cloud.enterpriseknowledgegraph.v1";

/** The desired input location and metadata. */
export interface InputConfig {
  /** Set of input BigQuery tables. */
  bigqueryInputConfigs: BigQueryInputConfig[];
  /** Entity type */
  entityType: InputConfig_EntityType;
  /**
   * Optional. Provide the bigquery table containing the previous results if
   * cluster ID stability is desired. Format is
   * `projects/* /datasets/* /tables/*`.
   */
  previousResultBigqueryTable: string;
}

/**
 * The type of entities we will support. Currently, we only support people,
 * establishment, property, and product types. If the type is
 * unspecified, it will be generic type.
 */
export enum InputConfig_EntityType {
  /** ENTITY_TYPE_UNSPECIFIED - The default value. */
  ENTITY_TYPE_UNSPECIFIED = 0,
  /**
   * PEOPLE - People entity.
   *
   * @deprecated
   */
  PEOPLE = 1,
  /**
   * ESTABLISHMENT - Establishment entity.
   *
   * @deprecated
   */
  ESTABLISHMENT = 2,
  /**
   * PROPERTY - Property entity. e.g. real estate property.
   *
   * @deprecated
   */
  PROPERTY = 3,
  /** PRODUCT - Product entity. */
  PRODUCT = 4,
  /** ORGANIZATION - Organization entity. */
  ORGANIZATION = 5,
  /** LOCAL_BUSINESS - Local Business entity. */
  LOCAL_BUSINESS = 6,
  /** PERSON - Person entity. */
  PERSON = 7,
  UNRECOGNIZED = -1,
}

export function inputConfig_EntityTypeFromJSON(object: any): InputConfig_EntityType {
  switch (object) {
    case 0:
    case "ENTITY_TYPE_UNSPECIFIED":
      return InputConfig_EntityType.ENTITY_TYPE_UNSPECIFIED;
    case 1:
    case "PEOPLE":
      return InputConfig_EntityType.PEOPLE;
    case 2:
    case "ESTABLISHMENT":
      return InputConfig_EntityType.ESTABLISHMENT;
    case 3:
    case "PROPERTY":
      return InputConfig_EntityType.PROPERTY;
    case 4:
    case "PRODUCT":
      return InputConfig_EntityType.PRODUCT;
    case 5:
    case "ORGANIZATION":
      return InputConfig_EntityType.ORGANIZATION;
    case 6:
    case "LOCAL_BUSINESS":
      return InputConfig_EntityType.LOCAL_BUSINESS;
    case 7:
    case "PERSON":
      return InputConfig_EntityType.PERSON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InputConfig_EntityType.UNRECOGNIZED;
  }
}

export function inputConfig_EntityTypeToJSON(object: InputConfig_EntityType): string {
  switch (object) {
    case InputConfig_EntityType.ENTITY_TYPE_UNSPECIFIED:
      return "ENTITY_TYPE_UNSPECIFIED";
    case InputConfig_EntityType.PEOPLE:
      return "PEOPLE";
    case InputConfig_EntityType.ESTABLISHMENT:
      return "ESTABLISHMENT";
    case InputConfig_EntityType.PROPERTY:
      return "PROPERTY";
    case InputConfig_EntityType.PRODUCT:
      return "PRODUCT";
    case InputConfig_EntityType.ORGANIZATION:
      return "ORGANIZATION";
    case InputConfig_EntityType.LOCAL_BUSINESS:
      return "LOCAL_BUSINESS";
    case InputConfig_EntityType.PERSON:
      return "PERSON";
    case InputConfig_EntityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The input config for BigQuery tables. */
export interface BigQueryInputConfig {
  /** Required. Format is `projects/* /datasets/* /tables/*`. */
  bigqueryTable: string;
  /** Required. Schema mapping file */
  gcsUri: string;
}

/** The desired output location and metadata. */
export interface OutputConfig {
  /** Format is “projects/* /datasets/*”. */
  bigqueryDataset: string;
}

/** Recon configs */
export interface ReconConfig {
  /** Configs for connected components. */
  connectedComponentsConfig?:
    | ConnectedComponentsConfig
    | undefined;
  /** Configs for affinity clustering. */
  affinityClusteringConfig?:
    | AffinityClusteringConfig
    | undefined;
  /** Extra options that affect entity clustering behavior. */
  options:
    | ReconConfig_Options
    | undefined;
  /** Model Configs */
  modelConfig: ReconConfig_ModelConfig | undefined;
}

/** Options for experimental changes on entity clustering behavior. */
export interface ReconConfig_Options {
  /**
   * If true, separate clusters by their geographic region (from geocoding).
   * Uses the following entity features:
   *
   * - schema.org/addressLocality
   * - schema.org/addressRegion
   * - schema.org/addressCountry
   * Warning: processing will no longer be regionalized!
   */
  enableGeocodingSeparation: boolean;
}

/** Model Configs */
export interface ReconConfig_ModelConfig {
  /**
   * Model name. Refer to external documentation for valid names.
   * If unspecified, it defaults to the one mentioned in the documentation.
   */
  modelName: string;
  /**
   * Model version tag. Refer to external documentation for valid tags.
   * If unspecified, it defaults to the one mentioned in the documentation.
   */
  versionTag: string;
}

/** Options for connected components. */
export interface ConnectedComponentsConfig {
  /** Threshold used for connected components. Default value is 0.85. */
  weightThreshold: number;
}

/** Options for affinity clustering. */
export interface AffinityClusteringConfig {
  /** Number of iterations to perform. Default value is 1. */
  compressionRoundCount: Long;
}

/** Details of operations that perform deletes of any entities. */
export interface DeleteOperationMetadata {
  /** The common part of the operation metadata. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/** Request message for CreateEntityReconciliationJob. */
export interface CreateEntityReconciliationJobRequest {
  /**
   * Required. The resource name of the Location to create the
   * EntityReconciliationJob in. Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The EntityReconciliationJob to create. */
  entityReconciliationJob: EntityReconciliationJob | undefined;
}

/** Request message for GetEntityReconciliationJob. */
export interface GetEntityReconciliationJobRequest {
  /**
   * Required. The name of the EntityReconciliationJob resource.
   * Format:
   * `projects/{project}/locations/{location}/entityReconciliationJobs/{entity_reconciliation_job}`
   */
  name: string;
}

/**
 * Request message for
 * [EnterpriseKnowledgeGraphService.ListEntityReconciliationJobs][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.ListEntityReconciliationJobs].
 */
export interface ListEntityReconciliationJobsRequest {
  /**
   * Required. The name of the EntityReconciliationJob's parent resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * An expression for filtering the results of the request. For field names
   * both snake_case and camelCase are supported.
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
}

/**
 * Response message for
 * [EnterpriseKnowledgeGraphService.ListEntityReconciliationJobs][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.ListEntityReconciliationJobs].
 */
export interface ListEntityReconciliationJobsResponse {
  /**
   * A list of EntityReconciliationJobs that matches the specified filter in the
   * request.
   */
  entityReconciliationJobs: EntityReconciliationJob[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/** Request message for CancelEntityReconciliationJob. */
export interface CancelEntityReconciliationJobRequest {
  /**
   * Required. The name of the EntityReconciliationJob resource.
   * Format:
   * `projects/{project}/locations/{location}/entityReconciliationJobs/{entity_reconciliation_job}`
   */
  name: string;
}

/** Request message for DeleteEntityReconciliationJob. */
export interface DeleteEntityReconciliationJobRequest {
  /**
   * Required. The name of the EntityReconciliationJob resource.
   * Format:
   * `projects/{project}/locations/{location}/entityReconciliationJobs/{entity_reconciliation_job}`
   */
  name: string;
}

/** Entity reconciliation job message. */
export interface EntityReconciliationJob {
  /** Output only. Resource name of the EntityReconciliationJob. */
  name: string;
  /** Required. Information about the input BigQuery tables. */
  inputConfig:
    | InputConfig
    | undefined;
  /** Required. The desired output location. */
  outputConfig:
    | OutputConfig
    | undefined;
  /** Output only. The detailed state of the job. */
  state: JobState;
  /**
   * Output only. Only populated when the job's state is JOB_STATE_FAILED or
   * JOB_STATE_CANCELLED.
   */
  error:
    | Status
    | undefined;
  /** Output only. Time when the EntityReconciliationJob was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Time when the EntityReconciliationJob entered any of the
   * following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`,
   * `JOB_STATE_CANCELLED`.
   */
  endTime:
    | Date
    | undefined;
  /**
   * Output only. Time when the EntityReconciliationJob was most recently
   * updated.
   */
  updateTime:
    | Date
    | undefined;
  /** Optional. Recon configs to adjust the clustering behavior. */
  reconConfig: ReconConfig | undefined;
}

/**
 * Request message for
 * [EnterpriseKnowledgeGraphService.Lookup][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.Lookup].
 */
export interface LookupRequest {
  /**
   * Required. The name of the Entity's parent resource.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The list of entity ids to be used for lookup. */
  ids: string[];
  /**
   * The list of language codes (defined in ISO 693) to run the query with,
   * e.g. 'en'.
   */
  languages: string[];
}

/**
 * Response message for
 * [EnterpriseKnowledgeGraphService.Lookup][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.Lookup].
 */
export interface LookupResponse {
  /**
   * The local context applicable for the response. See more details at
   * http://www.w3.org/TR/json-ld/#context-definitions.
   */
  context:
    | any
    | undefined;
  /** The schema type of top-level JSON-LD object, e.g. ItemList. */
  type:
    | any
    | undefined;
  /** The item list of search results. */
  itemListElement: Array<any> | undefined;
}

/**
 * Request message for
 * [EnterpriseKnowledgeGraphService.Search][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.Search].
 */
export interface SearchRequest {
  /**
   * Required. The name of the Entity's parent resource.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The literal query string for search. */
  query: string;
  /**
   * The list of language codes (defined in ISO 693) to run the query with,
   * e.g. 'en'.
   */
  languages: string[];
  /**
   * Restricts returned entities with these types, e.g. Person
   * (as defined in http://schema.org/Person). If multiple types are specified,
   * returned entities will contain one or more of these types.
   */
  types: string[];
  /** Limits the number of entities to be returned. */
  limit: number | undefined;
}

/**
 * Response message for
 * [EnterpriseKnowledgeGraphService.Search][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.Search].
 */
export interface SearchResponse {
  /**
   * The local context applicable for the response. See more details at
   * http://www.w3.org/TR/json-ld/#context-definitions.
   */
  context:
    | any
    | undefined;
  /** The schema type of top-level JSON-LD object, e.g. ItemList. */
  type:
    | any
    | undefined;
  /** The item list of search results. */
  itemListElement: Array<any> | undefined;
}

/**
 * Request message for
 * [EnterpriseKnowledgeGraphService.LookupPublicKg][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.LookupPublicKg].
 */
export interface LookupPublicKgRequest {
  /**
   * Required. The name of the Entity's parent resource.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The list of entity ids to be used for lookup. */
  ids: string[];
  /**
   * The list of language codes (defined in ISO 693) to run the query with,
   * e.g. 'en'.
   */
  languages: string[];
}

/**
 * Response message for
 * [EnterpriseKnowledgeGraphService.LookupPublicKg][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.LookupPublicKg].
 */
export interface LookupPublicKgResponse {
  /**
   * The local context applicable for the response. See more details at
   * http://www.w3.org/TR/json-ld/#context-definitions.
   */
  context:
    | any
    | undefined;
  /** The schema type of top-level JSON-LD object, e.g. ItemList. */
  type:
    | any
    | undefined;
  /** The item list of search results. */
  itemListElement: Array<any> | undefined;
}

/**
 * Request message for
 * [EnterpriseKnowledgeGraphService.Search][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.Search].
 */
export interface SearchPublicKgRequest {
  /**
   * Required. The name of the Entity's parent resource.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The literal query string for search. */
  query: string;
  /**
   * The list of language codes (defined in ISO 693) to run the query with,
   * e.g. 'en'.
   */
  languages: string[];
  /**
   * Restricts returned entities with these types, e.g. Person
   * (as defined in http://schema.org/Person). If multiple types are specified,
   * returned entities will contain one or more of these types.
   */
  types: string[];
  /** Limits the number of entities to be returned. */
  limit: number | undefined;
}

/**
 * Response message for
 * [EnterpriseKnowledgeGraphService.Search][google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService.Search].
 */
export interface SearchPublicKgResponse {
  /**
   * The local context applicable for the response. See more details at
   * http://www.w3.org/TR/json-ld/#context-definitions.
   */
  context:
    | any
    | undefined;
  /** The schema type of top-level JSON-LD object, e.g. ItemList. */
  type:
    | any
    | undefined;
  /** The item list of search results. */
  itemListElement: Array<any> | undefined;
}

function createBaseInputConfig(): InputConfig {
  return { bigqueryInputConfigs: [], entityType: 0, previousResultBigqueryTable: "" };
}

export const InputConfig: MessageFns<InputConfig> = {
  encode(message: InputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bigqueryInputConfigs) {
      BigQueryInputConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.entityType !== 0) {
      writer.uint32(16).int32(message.entityType);
    }
    if (message.previousResultBigqueryTable !== "") {
      writer.uint32(26).string(message.previousResultBigqueryTable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryInputConfigs.push(BigQueryInputConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.entityType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.previousResultBigqueryTable = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputConfig {
    return {
      bigqueryInputConfigs: globalThis.Array.isArray(object?.bigqueryInputConfigs)
        ? object.bigqueryInputConfigs.map((e: any) => BigQueryInputConfig.fromJSON(e))
        : [],
      entityType: isSet(object.entityType) ? inputConfig_EntityTypeFromJSON(object.entityType) : 0,
      previousResultBigqueryTable: isSet(object.previousResultBigqueryTable)
        ? globalThis.String(object.previousResultBigqueryTable)
        : "",
    };
  },

  toJSON(message: InputConfig): unknown {
    const obj: any = {};
    if (message.bigqueryInputConfigs?.length) {
      obj.bigqueryInputConfigs = message.bigqueryInputConfigs.map((e) => BigQueryInputConfig.toJSON(e));
    }
    if (message.entityType !== 0) {
      obj.entityType = inputConfig_EntityTypeToJSON(message.entityType);
    }
    if (message.previousResultBigqueryTable !== "") {
      obj.previousResultBigqueryTable = message.previousResultBigqueryTable;
    }
    return obj;
  },

  create(base?: DeepPartial<InputConfig>): InputConfig {
    return InputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InputConfig>): InputConfig {
    const message = createBaseInputConfig();
    message.bigqueryInputConfigs = object.bigqueryInputConfigs?.map((e) => BigQueryInputConfig.fromPartial(e)) || [];
    message.entityType = object.entityType ?? 0;
    message.previousResultBigqueryTable = object.previousResultBigqueryTable ?? "";
    return message;
  },
};

function createBaseBigQueryInputConfig(): BigQueryInputConfig {
  return { bigqueryTable: "", gcsUri: "" };
}

export const BigQueryInputConfig: MessageFns<BigQueryInputConfig> = {
  encode(message: BigQueryInputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigqueryTable !== "") {
      writer.uint32(10).string(message.bigqueryTable);
    }
    if (message.gcsUri !== "") {
      writer.uint32(18).string(message.gcsUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryInputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryInputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryTable = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryInputConfig {
    return {
      bigqueryTable: isSet(object.bigqueryTable) ? globalThis.String(object.bigqueryTable) : "",
      gcsUri: isSet(object.gcsUri) ? globalThis.String(object.gcsUri) : "",
    };
  },

  toJSON(message: BigQueryInputConfig): unknown {
    const obj: any = {};
    if (message.bigqueryTable !== "") {
      obj.bigqueryTable = message.bigqueryTable;
    }
    if (message.gcsUri !== "") {
      obj.gcsUri = message.gcsUri;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryInputConfig>): BigQueryInputConfig {
    return BigQueryInputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryInputConfig>): BigQueryInputConfig {
    const message = createBaseBigQueryInputConfig();
    message.bigqueryTable = object.bigqueryTable ?? "";
    message.gcsUri = object.gcsUri ?? "";
    return message;
  },
};

function createBaseOutputConfig(): OutputConfig {
  return { bigqueryDataset: "" };
}

export const OutputConfig: MessageFns<OutputConfig> = {
  encode(message: OutputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigqueryDataset !== "") {
      writer.uint32(10).string(message.bigqueryDataset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryDataset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputConfig {
    return { bigqueryDataset: isSet(object.bigqueryDataset) ? globalThis.String(object.bigqueryDataset) : "" };
  },

  toJSON(message: OutputConfig): unknown {
    const obj: any = {};
    if (message.bigqueryDataset !== "") {
      obj.bigqueryDataset = message.bigqueryDataset;
    }
    return obj;
  },

  create(base?: DeepPartial<OutputConfig>): OutputConfig {
    return OutputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutputConfig>): OutputConfig {
    const message = createBaseOutputConfig();
    message.bigqueryDataset = object.bigqueryDataset ?? "";
    return message;
  },
};

function createBaseReconConfig(): ReconConfig {
  return {
    connectedComponentsConfig: undefined,
    affinityClusteringConfig: undefined,
    options: undefined,
    modelConfig: undefined,
  };
}

export const ReconConfig: MessageFns<ReconConfig> = {
  encode(message: ReconConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectedComponentsConfig !== undefined) {
      ConnectedComponentsConfig.encode(message.connectedComponentsConfig, writer.uint32(10).fork()).join();
    }
    if (message.affinityClusteringConfig !== undefined) {
      AffinityClusteringConfig.encode(message.affinityClusteringConfig, writer.uint32(18).fork()).join();
    }
    if (message.options !== undefined) {
      ReconConfig_Options.encode(message.options, writer.uint32(26).fork()).join();
    }
    if (message.modelConfig !== undefined) {
      ReconConfig_ModelConfig.encode(message.modelConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectedComponentsConfig = ConnectedComponentsConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.affinityClusteringConfig = AffinityClusteringConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.options = ReconConfig_Options.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.modelConfig = ReconConfig_ModelConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconConfig {
    return {
      connectedComponentsConfig: isSet(object.connectedComponentsConfig)
        ? ConnectedComponentsConfig.fromJSON(object.connectedComponentsConfig)
        : undefined,
      affinityClusteringConfig: isSet(object.affinityClusteringConfig)
        ? AffinityClusteringConfig.fromJSON(object.affinityClusteringConfig)
        : undefined,
      options: isSet(object.options) ? ReconConfig_Options.fromJSON(object.options) : undefined,
      modelConfig: isSet(object.modelConfig) ? ReconConfig_ModelConfig.fromJSON(object.modelConfig) : undefined,
    };
  },

  toJSON(message: ReconConfig): unknown {
    const obj: any = {};
    if (message.connectedComponentsConfig !== undefined) {
      obj.connectedComponentsConfig = ConnectedComponentsConfig.toJSON(message.connectedComponentsConfig);
    }
    if (message.affinityClusteringConfig !== undefined) {
      obj.affinityClusteringConfig = AffinityClusteringConfig.toJSON(message.affinityClusteringConfig);
    }
    if (message.options !== undefined) {
      obj.options = ReconConfig_Options.toJSON(message.options);
    }
    if (message.modelConfig !== undefined) {
      obj.modelConfig = ReconConfig_ModelConfig.toJSON(message.modelConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ReconConfig>): ReconConfig {
    return ReconConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconConfig>): ReconConfig {
    const message = createBaseReconConfig();
    message.connectedComponentsConfig =
      (object.connectedComponentsConfig !== undefined && object.connectedComponentsConfig !== null)
        ? ConnectedComponentsConfig.fromPartial(object.connectedComponentsConfig)
        : undefined;
    message.affinityClusteringConfig =
      (object.affinityClusteringConfig !== undefined && object.affinityClusteringConfig !== null)
        ? AffinityClusteringConfig.fromPartial(object.affinityClusteringConfig)
        : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? ReconConfig_Options.fromPartial(object.options)
      : undefined;
    message.modelConfig = (object.modelConfig !== undefined && object.modelConfig !== null)
      ? ReconConfig_ModelConfig.fromPartial(object.modelConfig)
      : undefined;
    return message;
  },
};

function createBaseReconConfig_Options(): ReconConfig_Options {
  return { enableGeocodingSeparation: false };
}

export const ReconConfig_Options: MessageFns<ReconConfig_Options> = {
  encode(message: ReconConfig_Options, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableGeocodingSeparation !== false) {
      writer.uint32(800).bool(message.enableGeocodingSeparation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconConfig_Options {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconConfig_Options();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100:
          if (tag !== 800) {
            break;
          }

          message.enableGeocodingSeparation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconConfig_Options {
    return {
      enableGeocodingSeparation: isSet(object.enableGeocodingSeparation)
        ? globalThis.Boolean(object.enableGeocodingSeparation)
        : false,
    };
  },

  toJSON(message: ReconConfig_Options): unknown {
    const obj: any = {};
    if (message.enableGeocodingSeparation !== false) {
      obj.enableGeocodingSeparation = message.enableGeocodingSeparation;
    }
    return obj;
  },

  create(base?: DeepPartial<ReconConfig_Options>): ReconConfig_Options {
    return ReconConfig_Options.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconConfig_Options>): ReconConfig_Options {
    const message = createBaseReconConfig_Options();
    message.enableGeocodingSeparation = object.enableGeocodingSeparation ?? false;
    return message;
  },
};

function createBaseReconConfig_ModelConfig(): ReconConfig_ModelConfig {
  return { modelName: "", versionTag: "" };
}

export const ReconConfig_ModelConfig: MessageFns<ReconConfig_ModelConfig> = {
  encode(message: ReconConfig_ModelConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    if (message.versionTag !== "") {
      writer.uint32(18).string(message.versionTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconConfig_ModelConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconConfig_ModelConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.versionTag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconConfig_ModelConfig {
    return {
      modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
      versionTag: isSet(object.versionTag) ? globalThis.String(object.versionTag) : "",
    };
  },

  toJSON(message: ReconConfig_ModelConfig): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    if (message.versionTag !== "") {
      obj.versionTag = message.versionTag;
    }
    return obj;
  },

  create(base?: DeepPartial<ReconConfig_ModelConfig>): ReconConfig_ModelConfig {
    return ReconConfig_ModelConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconConfig_ModelConfig>): ReconConfig_ModelConfig {
    const message = createBaseReconConfig_ModelConfig();
    message.modelName = object.modelName ?? "";
    message.versionTag = object.versionTag ?? "";
    return message;
  },
};

function createBaseConnectedComponentsConfig(): ConnectedComponentsConfig {
  return { weightThreshold: 0 };
}

export const ConnectedComponentsConfig: MessageFns<ConnectedComponentsConfig> = {
  encode(message: ConnectedComponentsConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weightThreshold !== 0) {
      writer.uint32(13).float(message.weightThreshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectedComponentsConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectedComponentsConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.weightThreshold = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectedComponentsConfig {
    return { weightThreshold: isSet(object.weightThreshold) ? globalThis.Number(object.weightThreshold) : 0 };
  },

  toJSON(message: ConnectedComponentsConfig): unknown {
    const obj: any = {};
    if (message.weightThreshold !== 0) {
      obj.weightThreshold = message.weightThreshold;
    }
    return obj;
  },

  create(base?: DeepPartial<ConnectedComponentsConfig>): ConnectedComponentsConfig {
    return ConnectedComponentsConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConnectedComponentsConfig>): ConnectedComponentsConfig {
    const message = createBaseConnectedComponentsConfig();
    message.weightThreshold = object.weightThreshold ?? 0;
    return message;
  },
};

function createBaseAffinityClusteringConfig(): AffinityClusteringConfig {
  return { compressionRoundCount: Long.ZERO };
}

export const AffinityClusteringConfig: MessageFns<AffinityClusteringConfig> = {
  encode(message: AffinityClusteringConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.compressionRoundCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.compressionRoundCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AffinityClusteringConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAffinityClusteringConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.compressionRoundCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AffinityClusteringConfig {
    return {
      compressionRoundCount: isSet(object.compressionRoundCount)
        ? Long.fromValue(object.compressionRoundCount)
        : Long.ZERO,
    };
  },

  toJSON(message: AffinityClusteringConfig): unknown {
    const obj: any = {};
    if (!message.compressionRoundCount.equals(Long.ZERO)) {
      obj.compressionRoundCount = (message.compressionRoundCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<AffinityClusteringConfig>): AffinityClusteringConfig {
    return AffinityClusteringConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AffinityClusteringConfig>): AffinityClusteringConfig {
    const message = createBaseAffinityClusteringConfig();
    message.compressionRoundCount =
      (object.compressionRoundCount !== undefined && object.compressionRoundCount !== null)
        ? Long.fromValue(object.compressionRoundCount)
        : Long.ZERO;
    return message;
  },
};

function createBaseDeleteOperationMetadata(): DeleteOperationMetadata {
  return { commonMetadata: undefined };
}

export const DeleteOperationMetadata: MessageFns<DeleteOperationMetadata> = {
  encode(message: DeleteOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteOperationMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: DeleteOperationMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteOperationMetadata>): DeleteOperationMetadata {
    return DeleteOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteOperationMetadata>): DeleteOperationMetadata {
    const message = createBaseDeleteOperationMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseCreateEntityReconciliationJobRequest(): CreateEntityReconciliationJobRequest {
  return { parent: "", entityReconciliationJob: undefined };
}

export const CreateEntityReconciliationJobRequest: MessageFns<CreateEntityReconciliationJobRequest> = {
  encode(message: CreateEntityReconciliationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.entityReconciliationJob !== undefined) {
      EntityReconciliationJob.encode(message.entityReconciliationJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEntityReconciliationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEntityReconciliationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityReconciliationJob = EntityReconciliationJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEntityReconciliationJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entityReconciliationJob: isSet(object.entityReconciliationJob)
        ? EntityReconciliationJob.fromJSON(object.entityReconciliationJob)
        : undefined,
    };
  },

  toJSON(message: CreateEntityReconciliationJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entityReconciliationJob !== undefined) {
      obj.entityReconciliationJob = EntityReconciliationJob.toJSON(message.entityReconciliationJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEntityReconciliationJobRequest>): CreateEntityReconciliationJobRequest {
    return CreateEntityReconciliationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEntityReconciliationJobRequest>): CreateEntityReconciliationJobRequest {
    const message = createBaseCreateEntityReconciliationJobRequest();
    message.parent = object.parent ?? "";
    message.entityReconciliationJob =
      (object.entityReconciliationJob !== undefined && object.entityReconciliationJob !== null)
        ? EntityReconciliationJob.fromPartial(object.entityReconciliationJob)
        : undefined;
    return message;
  },
};

function createBaseGetEntityReconciliationJobRequest(): GetEntityReconciliationJobRequest {
  return { name: "" };
}

export const GetEntityReconciliationJobRequest: MessageFns<GetEntityReconciliationJobRequest> = {
  encode(message: GetEntityReconciliationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEntityReconciliationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEntityReconciliationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEntityReconciliationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEntityReconciliationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEntityReconciliationJobRequest>): GetEntityReconciliationJobRequest {
    return GetEntityReconciliationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEntityReconciliationJobRequest>): GetEntityReconciliationJobRequest {
    const message = createBaseGetEntityReconciliationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEntityReconciliationJobsRequest(): ListEntityReconciliationJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListEntityReconciliationJobsRequest: MessageFns<ListEntityReconciliationJobsRequest> = {
  encode(message: ListEntityReconciliationJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntityReconciliationJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntityReconciliationJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntityReconciliationJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEntityReconciliationJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntityReconciliationJobsRequest>): ListEntityReconciliationJobsRequest {
    return ListEntityReconciliationJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntityReconciliationJobsRequest>): ListEntityReconciliationJobsRequest {
    const message = createBaseListEntityReconciliationJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEntityReconciliationJobsResponse(): ListEntityReconciliationJobsResponse {
  return { entityReconciliationJobs: [], nextPageToken: "" };
}

export const ListEntityReconciliationJobsResponse: MessageFns<ListEntityReconciliationJobsResponse> = {
  encode(message: ListEntityReconciliationJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entityReconciliationJobs) {
      EntityReconciliationJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntityReconciliationJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntityReconciliationJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityReconciliationJobs.push(EntityReconciliationJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntityReconciliationJobsResponse {
    return {
      entityReconciliationJobs: globalThis.Array.isArray(object?.entityReconciliationJobs)
        ? object.entityReconciliationJobs.map((e: any) => EntityReconciliationJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEntityReconciliationJobsResponse): unknown {
    const obj: any = {};
    if (message.entityReconciliationJobs?.length) {
      obj.entityReconciliationJobs = message.entityReconciliationJobs.map((e) => EntityReconciliationJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntityReconciliationJobsResponse>): ListEntityReconciliationJobsResponse {
    return ListEntityReconciliationJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntityReconciliationJobsResponse>): ListEntityReconciliationJobsResponse {
    const message = createBaseListEntityReconciliationJobsResponse();
    message.entityReconciliationJobs =
      object.entityReconciliationJobs?.map((e) => EntityReconciliationJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCancelEntityReconciliationJobRequest(): CancelEntityReconciliationJobRequest {
  return { name: "" };
}

export const CancelEntityReconciliationJobRequest: MessageFns<CancelEntityReconciliationJobRequest> = {
  encode(message: CancelEntityReconciliationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelEntityReconciliationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelEntityReconciliationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelEntityReconciliationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelEntityReconciliationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelEntityReconciliationJobRequest>): CancelEntityReconciliationJobRequest {
    return CancelEntityReconciliationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelEntityReconciliationJobRequest>): CancelEntityReconciliationJobRequest {
    const message = createBaseCancelEntityReconciliationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteEntityReconciliationJobRequest(): DeleteEntityReconciliationJobRequest {
  return { name: "" };
}

export const DeleteEntityReconciliationJobRequest: MessageFns<DeleteEntityReconciliationJobRequest> = {
  encode(message: DeleteEntityReconciliationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEntityReconciliationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEntityReconciliationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEntityReconciliationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEntityReconciliationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEntityReconciliationJobRequest>): DeleteEntityReconciliationJobRequest {
    return DeleteEntityReconciliationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEntityReconciliationJobRequest>): DeleteEntityReconciliationJobRequest {
    const message = createBaseDeleteEntityReconciliationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEntityReconciliationJob(): EntityReconciliationJob {
  return {
    name: "",
    inputConfig: undefined,
    outputConfig: undefined,
    state: 0,
    error: undefined,
    createTime: undefined,
    endTime: undefined,
    updateTime: undefined,
    reconConfig: undefined,
  };
}

export const EntityReconciliationJob: MessageFns<EntityReconciliationJob> = {
  encode(message: EntityReconciliationJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.inputConfig !== undefined) {
      InputConfig.encode(message.inputConfig, writer.uint32(18).fork()).join();
    }
    if (message.outputConfig !== undefined) {
      OutputConfig.encode(message.outputConfig, writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.reconConfig !== undefined) {
      ReconConfig.encode(message.reconConfig, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityReconciliationJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityReconciliationJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inputConfig = InputConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputConfig = OutputConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.reconConfig = ReconConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityReconciliationJob {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      inputConfig: isSet(object.inputConfig) ? InputConfig.fromJSON(object.inputConfig) : undefined,
      outputConfig: isSet(object.outputConfig) ? OutputConfig.fromJSON(object.outputConfig) : undefined,
      state: isSet(object.state) ? jobStateFromJSON(object.state) : 0,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      reconConfig: isSet(object.reconConfig) ? ReconConfig.fromJSON(object.reconConfig) : undefined,
    };
  },

  toJSON(message: EntityReconciliationJob): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.inputConfig !== undefined) {
      obj.inputConfig = InputConfig.toJSON(message.inputConfig);
    }
    if (message.outputConfig !== undefined) {
      obj.outputConfig = OutputConfig.toJSON(message.outputConfig);
    }
    if (message.state !== 0) {
      obj.state = jobStateToJSON(message.state);
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.reconConfig !== undefined) {
      obj.reconConfig = ReconConfig.toJSON(message.reconConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<EntityReconciliationJob>): EntityReconciliationJob {
    return EntityReconciliationJob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntityReconciliationJob>): EntityReconciliationJob {
    const message = createBaseEntityReconciliationJob();
    message.name = object.name ?? "";
    message.inputConfig = (object.inputConfig !== undefined && object.inputConfig !== null)
      ? InputConfig.fromPartial(object.inputConfig)
      : undefined;
    message.outputConfig = (object.outputConfig !== undefined && object.outputConfig !== null)
      ? OutputConfig.fromPartial(object.outputConfig)
      : undefined;
    message.state = object.state ?? 0;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.reconConfig = (object.reconConfig !== undefined && object.reconConfig !== null)
      ? ReconConfig.fromPartial(object.reconConfig)
      : undefined;
    return message;
  },
};

function createBaseLookupRequest(): LookupRequest {
  return { parent: "", ids: [], languages: [] };
}

export const LookupRequest: MessageFns<LookupRequest> = {
  encode(message: LookupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.ids) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.languages) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: LookupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupRequest>): LookupRequest {
    return LookupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupRequest>): LookupRequest {
    const message = createBaseLookupRequest();
    message.parent = object.parent ?? "";
    message.ids = object.ids?.map((e) => e) || [];
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseLookupResponse(): LookupResponse {
  return { context: undefined, type: undefined, itemListElement: undefined };
}

export const LookupResponse: MessageFns<LookupResponse> = {
  encode(message: LookupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      Value.encode(Value.wrap(message.context), writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      Value.encode(Value.wrap(message.type), writer.uint32(18).fork()).join();
    }
    if (message.itemListElement !== undefined) {
      ListValue.encode(ListValue.wrap(message.itemListElement), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemListElement = ListValue.unwrap(ListValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupResponse {
    return {
      context: isSet(object?.context) ? object.context : undefined,
      type: isSet(object?.type) ? object.type : undefined,
      itemListElement: globalThis.Array.isArray(object.itemListElement) ? [...object.itemListElement] : undefined,
    };
  },

  toJSON(message: LookupResponse): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = message.context;
    }
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.itemListElement !== undefined) {
      obj.itemListElement = message.itemListElement;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupResponse>): LookupResponse {
    return LookupResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupResponse>): LookupResponse {
    const message = createBaseLookupResponse();
    message.context = object.context ?? undefined;
    message.type = object.type ?? undefined;
    message.itemListElement = object.itemListElement ?? undefined;
    return message;
  },
};

function createBaseSearchRequest(): SearchRequest {
  return { parent: "", query: "", languages: [], types: [], limit: undefined };
}

export const SearchRequest: MessageFns<SearchRequest> = {
  encode(message: SearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    for (const v of message.languages) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.types) {
      writer.uint32(34).string(v!);
    }
    if (message.limit !== undefined) {
      Int32Value.encode({ value: message.limit! }, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languages.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.types.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.limit = Int32Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
      types: globalThis.Array.isArray(object?.types) ? object.types.map((e: any) => globalThis.String(e)) : [],
      limit: isSet(object.limit) ? Number(object.limit) : undefined,
    };
  },

  toJSON(message: SearchRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    if (message.types?.length) {
      obj.types = message.types;
    }
    if (message.limit !== undefined) {
      obj.limit = message.limit;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchRequest>): SearchRequest {
    return SearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchRequest>): SearchRequest {
    const message = createBaseSearchRequest();
    message.parent = object.parent ?? "";
    message.query = object.query ?? "";
    message.languages = object.languages?.map((e) => e) || [];
    message.types = object.types?.map((e) => e) || [];
    message.limit = object.limit ?? undefined;
    return message;
  },
};

function createBaseSearchResponse(): SearchResponse {
  return { context: undefined, type: undefined, itemListElement: undefined };
}

export const SearchResponse: MessageFns<SearchResponse> = {
  encode(message: SearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      Value.encode(Value.wrap(message.context), writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      Value.encode(Value.wrap(message.type), writer.uint32(18).fork()).join();
    }
    if (message.itemListElement !== undefined) {
      ListValue.encode(ListValue.wrap(message.itemListElement), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemListElement = ListValue.unwrap(ListValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResponse {
    return {
      context: isSet(object?.context) ? object.context : undefined,
      type: isSet(object?.type) ? object.type : undefined,
      itemListElement: globalThis.Array.isArray(object.itemListElement) ? [...object.itemListElement] : undefined,
    };
  },

  toJSON(message: SearchResponse): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = message.context;
    }
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.itemListElement !== undefined) {
      obj.itemListElement = message.itemListElement;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchResponse>): SearchResponse {
    return SearchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchResponse>): SearchResponse {
    const message = createBaseSearchResponse();
    message.context = object.context ?? undefined;
    message.type = object.type ?? undefined;
    message.itemListElement = object.itemListElement ?? undefined;
    return message;
  },
};

function createBaseLookupPublicKgRequest(): LookupPublicKgRequest {
  return { parent: "", ids: [], languages: [] };
}

export const LookupPublicKgRequest: MessageFns<LookupPublicKgRequest> = {
  encode(message: LookupPublicKgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.ids) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.languages) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupPublicKgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupPublicKgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupPublicKgRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: LookupPublicKgRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupPublicKgRequest>): LookupPublicKgRequest {
    return LookupPublicKgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupPublicKgRequest>): LookupPublicKgRequest {
    const message = createBaseLookupPublicKgRequest();
    message.parent = object.parent ?? "";
    message.ids = object.ids?.map((e) => e) || [];
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseLookupPublicKgResponse(): LookupPublicKgResponse {
  return { context: undefined, type: undefined, itemListElement: undefined };
}

export const LookupPublicKgResponse: MessageFns<LookupPublicKgResponse> = {
  encode(message: LookupPublicKgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      Value.encode(Value.wrap(message.context), writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      Value.encode(Value.wrap(message.type), writer.uint32(18).fork()).join();
    }
    if (message.itemListElement !== undefined) {
      ListValue.encode(ListValue.wrap(message.itemListElement), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupPublicKgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupPublicKgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemListElement = ListValue.unwrap(ListValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupPublicKgResponse {
    return {
      context: isSet(object?.context) ? object.context : undefined,
      type: isSet(object?.type) ? object.type : undefined,
      itemListElement: globalThis.Array.isArray(object.itemListElement) ? [...object.itemListElement] : undefined,
    };
  },

  toJSON(message: LookupPublicKgResponse): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = message.context;
    }
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.itemListElement !== undefined) {
      obj.itemListElement = message.itemListElement;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupPublicKgResponse>): LookupPublicKgResponse {
    return LookupPublicKgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupPublicKgResponse>): LookupPublicKgResponse {
    const message = createBaseLookupPublicKgResponse();
    message.context = object.context ?? undefined;
    message.type = object.type ?? undefined;
    message.itemListElement = object.itemListElement ?? undefined;
    return message;
  },
};

function createBaseSearchPublicKgRequest(): SearchPublicKgRequest {
  return { parent: "", query: "", languages: [], types: [], limit: undefined };
}

export const SearchPublicKgRequest: MessageFns<SearchPublicKgRequest> = {
  encode(message: SearchPublicKgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    for (const v of message.languages) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.types) {
      writer.uint32(34).string(v!);
    }
    if (message.limit !== undefined) {
      Int32Value.encode({ value: message.limit! }, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchPublicKgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchPublicKgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languages.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.types.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.limit = Int32Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchPublicKgRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
      types: globalThis.Array.isArray(object?.types) ? object.types.map((e: any) => globalThis.String(e)) : [],
      limit: isSet(object.limit) ? Number(object.limit) : undefined,
    };
  },

  toJSON(message: SearchPublicKgRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    if (message.types?.length) {
      obj.types = message.types;
    }
    if (message.limit !== undefined) {
      obj.limit = message.limit;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchPublicKgRequest>): SearchPublicKgRequest {
    return SearchPublicKgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchPublicKgRequest>): SearchPublicKgRequest {
    const message = createBaseSearchPublicKgRequest();
    message.parent = object.parent ?? "";
    message.query = object.query ?? "";
    message.languages = object.languages?.map((e) => e) || [];
    message.types = object.types?.map((e) => e) || [];
    message.limit = object.limit ?? undefined;
    return message;
  },
};

function createBaseSearchPublicKgResponse(): SearchPublicKgResponse {
  return { context: undefined, type: undefined, itemListElement: undefined };
}

export const SearchPublicKgResponse: MessageFns<SearchPublicKgResponse> = {
  encode(message: SearchPublicKgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      Value.encode(Value.wrap(message.context), writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      Value.encode(Value.wrap(message.type), writer.uint32(18).fork()).join();
    }
    if (message.itemListElement !== undefined) {
      ListValue.encode(ListValue.wrap(message.itemListElement), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchPublicKgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchPublicKgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemListElement = ListValue.unwrap(ListValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchPublicKgResponse {
    return {
      context: isSet(object?.context) ? object.context : undefined,
      type: isSet(object?.type) ? object.type : undefined,
      itemListElement: globalThis.Array.isArray(object.itemListElement) ? [...object.itemListElement] : undefined,
    };
  },

  toJSON(message: SearchPublicKgResponse): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = message.context;
    }
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.itemListElement !== undefined) {
      obj.itemListElement = message.itemListElement;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchPublicKgResponse>): SearchPublicKgResponse {
    return SearchPublicKgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchPublicKgResponse>): SearchPublicKgResponse {
    const message = createBaseSearchPublicKgResponse();
    message.context = object.context ?? undefined;
    message.type = object.type ?? undefined;
    message.itemListElement = object.itemListElement ?? undefined;
    return message;
  },
};

/** APIs for enterprise knowledge graph product. */
export type EnterpriseKnowledgeGraphServiceDefinition = typeof EnterpriseKnowledgeGraphServiceDefinition;
export const EnterpriseKnowledgeGraphServiceDefinition = {
  name: "EnterpriseKnowledgeGraphService",
  fullName: "google.cloud.enterpriseknowledgegraph.v1.EnterpriseKnowledgeGraphService",
  methods: {
    /**
     * Creates a EntityReconciliationJob. A EntityReconciliationJob once created
     * will right away be attempted to start.
     */
    createEntityReconciliationJob: {
      name: "CreateEntityReconciliationJob",
      requestType: CreateEntityReconciliationJobRequest,
      requestStream: false,
      responseType: EntityReconciliationJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              114,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
            ]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              25,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              114,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a EntityReconciliationJob. */
    getEntityReconciliationJob: {
      name: "GetEntityReconciliationJob",
      requestType: GetEntityReconciliationJobRequest,
      requestStream: false,
      responseType: EntityReconciliationJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Entity Reconciliation Jobs. */
    listEntityReconciliationJobs: {
      name: "ListEntityReconciliationJobs",
      requestType: ListEntityReconciliationJobsRequest,
      requestStream: false,
      responseType: ListEntityReconciliationJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a EntityReconciliationJob. Success of cancellation is not
     * guaranteed.
     */
    cancelEntityReconciliationJob: {
      name: "CancelEntityReconciliationJob",
      requestType: CancelEntityReconciliationJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a EntityReconciliationJob.
     * It only deletes the job when the job state is in FAILED, SUCCEEDED, and
     * CANCELLED.
     */
    deleteEntityReconciliationJob: {
      name: "DeleteEntityReconciliationJob",
      requestType: DeleteEntityReconciliationJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              82,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              105,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Finds the Cloud KG entities with CKG ID(s). */
    lookup: {
      name: "Lookup",
      requestType: LookupRequest,
      requestStream: false,
      responseType: LookupResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 105, 100, 115])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              111,
              117,
              100,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              71,
              114,
              97,
              112,
              104,
              69,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              76,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /** Searches the Cloud KG entities with entity name. */
    search: {
      name: "Search",
      requestType: SearchRequest,
      requestStream: false,
      responseType: SearchResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              111,
              117,
              100,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              71,
              114,
              97,
              112,
              104,
              69,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              83,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Finds the public KG entities with public KG ID(s). */
    lookupPublicKg: {
      name: "LookupPublicKg",
      requestType: LookupPublicKgRequest,
      requestStream: false,
      responseType: LookupPublicKgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 105, 100, 115])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              117,
              98,
              108,
              105,
              99,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              71,
              114,
              97,
              112,
              104,
              69,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              76,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /** Searches the public KG entities with entity name. */
    searchPublicKg: {
      name: "SearchPublicKg",
      requestType: SearchPublicKgRequest,
      requestStream: false,
      responseType: SearchPublicKgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              117,
              98,
              108,
              105,
              99,
              75,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              71,
              114,
              97,
              112,
              104,
              69,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
              58,
              83,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EnterpriseKnowledgeGraphServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a EntityReconciliationJob. A EntityReconciliationJob once created
   * will right away be attempted to start.
   */
  createEntityReconciliationJob(
    request: CreateEntityReconciliationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EntityReconciliationJob>>;
  /** Gets a EntityReconciliationJob. */
  getEntityReconciliationJob(
    request: GetEntityReconciliationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EntityReconciliationJob>>;
  /** Lists Entity Reconciliation Jobs. */
  listEntityReconciliationJobs(
    request: ListEntityReconciliationJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEntityReconciliationJobsResponse>>;
  /**
   * Cancels a EntityReconciliationJob. Success of cancellation is not
   * guaranteed.
   */
  cancelEntityReconciliationJob(
    request: CancelEntityReconciliationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Deletes a EntityReconciliationJob.
   * It only deletes the job when the job state is in FAILED, SUCCEEDED, and
   * CANCELLED.
   */
  deleteEntityReconciliationJob(
    request: DeleteEntityReconciliationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Finds the Cloud KG entities with CKG ID(s). */
  lookup(request: LookupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LookupResponse>>;
  /** Searches the Cloud KG entities with entity name. */
  search(request: SearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SearchResponse>>;
  /** Finds the public KG entities with public KG ID(s). */
  lookupPublicKg(
    request: LookupPublicKgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupPublicKgResponse>>;
  /** Searches the public KG entities with entity name. */
  searchPublicKg(
    request: SearchPublicKgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchPublicKgResponse>>;
}

export interface EnterpriseKnowledgeGraphServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a EntityReconciliationJob. A EntityReconciliationJob once created
   * will right away be attempted to start.
   */
  createEntityReconciliationJob(
    request: DeepPartial<CreateEntityReconciliationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntityReconciliationJob>;
  /** Gets a EntityReconciliationJob. */
  getEntityReconciliationJob(
    request: DeepPartial<GetEntityReconciliationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EntityReconciliationJob>;
  /** Lists Entity Reconciliation Jobs. */
  listEntityReconciliationJobs(
    request: DeepPartial<ListEntityReconciliationJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEntityReconciliationJobsResponse>;
  /**
   * Cancels a EntityReconciliationJob. Success of cancellation is not
   * guaranteed.
   */
  cancelEntityReconciliationJob(
    request: DeepPartial<CancelEntityReconciliationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Deletes a EntityReconciliationJob.
   * It only deletes the job when the job state is in FAILED, SUCCEEDED, and
   * CANCELLED.
   */
  deleteEntityReconciliationJob(
    request: DeepPartial<DeleteEntityReconciliationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Finds the Cloud KG entities with CKG ID(s). */
  lookup(request: DeepPartial<LookupRequest>, options?: CallOptions & CallOptionsExt): Promise<LookupResponse>;
  /** Searches the Cloud KG entities with entity name. */
  search(request: DeepPartial<SearchRequest>, options?: CallOptions & CallOptionsExt): Promise<SearchResponse>;
  /** Finds the public KG entities with public KG ID(s). */
  lookupPublicKg(
    request: DeepPartial<LookupPublicKgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupPublicKgResponse>;
  /** Searches the public KG entities with entity name. */
  searchPublicKg(
    request: DeepPartial<SearchPublicKgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchPublicKgResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
