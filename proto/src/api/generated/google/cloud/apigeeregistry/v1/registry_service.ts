// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apigeeregistry/v1/registry_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { HttpBody } from "../../../api/httpbody.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Api, ApiDeployment, ApiSpec, ApiVersion, Artifact } from "./registry_models.js";

export const protobufPackage = "google.cloud.apigeeregistry.v1";

/** Request message for ListApis. */
export interface ListApisRequest {
  /**
   * Required. The parent, which owns this collection of APIs.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /**
   * The maximum number of APIs to return.
   * The service may return fewer than this value.
   * If unspecified, at most 50 values will be returned.
   * The maximum is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListApis` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListApis` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * An expression that can be used to filter the list. Filters use the Common
   * Expression Language and can refer to all message fields.
   */
  filter: string;
}

/** Response message for ListApis. */
export interface ListApisResponse {
  /** The APIs from the specified publisher. */
  apis: Api[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetApi. */
export interface GetApiRequest {
  /**
   * Required. The name of the API to retrieve.
   * Format: `projects/* /locations/* /apis/*`
   */
  name: string;
}

/** Request message for CreateApi. */
export interface CreateApiRequest {
  /**
   * Required. The parent, which owns this collection of APIs.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /** Required. The API to create. */
  api:
    | Api
    | undefined;
  /**
   * Required. The ID to use for the API, which will become the final component of
   * the API's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * Following AIP-162, IDs must not have the form of a UUID.
   */
  apiId: string;
}

/** Request message for UpdateApi. */
export interface UpdateApiRequest {
  /**
   * Required. The API to update.
   *
   * The `name` field is used to identify the API to update.
   * Format: `projects/* /locations/* /apis/*`
   */
  api:
    | Api
    | undefined;
  /**
   * The list of fields to be updated. If omitted, all fields are updated that
   * are set in the request message (fields set to default values are ignored).
   * If an asterisk "*" is specified, all fields are updated, including fields
   * that are unspecified/default in the request.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the API is not found, a new API will be created.
   * In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/** Request message for DeleteApi. */
export interface DeleteApiRequest {
  /**
   * Required. The name of the API to delete.
   * Format: `projects/* /locations/* /apis/*`
   */
  name: string;
  /**
   * If set to true, any child resources will also be deleted.
   * (Otherwise, the request will only work if there are no child resources.)
   */
  force: boolean;
}

/** Request message for ListApiVersions. */
export interface ListApiVersionsRequest {
  /**
   * Required. The parent, which owns this collection of versions.
   * Format: `projects/* /locations/* /apis/*`
   */
  parent: string;
  /**
   * The maximum number of versions to return.
   * The service may return fewer than this value.
   * If unspecified, at most 50 values will be returned.
   * The maximum is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListApiVersions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListApiVersions` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * An expression that can be used to filter the list. Filters use the Common
   * Expression Language and can refer to all message fields.
   */
  filter: string;
}

/** Response message for ListApiVersions. */
export interface ListApiVersionsResponse {
  /** The versions from the specified publisher. */
  apiVersions: ApiVersion[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetApiVersion. */
export interface GetApiVersionRequest {
  /**
   * Required. The name of the version to retrieve.
   * Format: `projects/* /locations/* /apis/* /versions/*`
   */
  name: string;
}

/** Request message for CreateApiVersion. */
export interface CreateApiVersionRequest {
  /**
   * Required. The parent, which owns this collection of versions.
   * Format: `projects/* /locations/* /apis/*`
   */
  parent: string;
  /** Required. The version to create. */
  apiVersion:
    | ApiVersion
    | undefined;
  /**
   * Required. The ID to use for the version, which will become the final component of
   * the version's resource name.
   *
   * This value should be 1-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * Following AIP-162, IDs must not have the form of a UUID.
   */
  apiVersionId: string;
}

/** Request message for UpdateApiVersion. */
export interface UpdateApiVersionRequest {
  /**
   * Required. The version to update.
   *
   * The `name` field is used to identify the version to update.
   * Format: `projects/* /locations/* /apis/* /versions/*`
   */
  apiVersion:
    | ApiVersion
    | undefined;
  /**
   * The list of fields to be updated. If omitted, all fields are updated that
   * are set in the request message (fields set to default values are ignored).
   * If an asterisk "*" is specified, all fields are updated, including fields
   * that are unspecified/default in the request.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the version is not found, a new version will be
   * created. In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/** Request message for DeleteApiVersion. */
export interface DeleteApiVersionRequest {
  /**
   * Required. The name of the version to delete.
   * Format: `projects/* /locations/* /apis/* /versions/*`
   */
  name: string;
  /**
   * If set to true, any child resources will also be deleted.
   * (Otherwise, the request will only work if there are no child resources.)
   */
  force: boolean;
}

/** Request message for ListApiSpecs. */
export interface ListApiSpecsRequest {
  /**
   * Required. The parent, which owns this collection of specs.
   * Format: `projects/* /locations/* /apis/* /versions/*`
   */
  parent: string;
  /**
   * The maximum number of specs to return.
   * The service may return fewer than this value.
   * If unspecified, at most 50 values will be returned.
   * The maximum is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListApiSpecs` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListApiSpecs` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * An expression that can be used to filter the list. Filters use the Common
   * Expression Language and can refer to all message fields except contents.
   */
  filter: string;
}

/** Response message for ListApiSpecs. */
export interface ListApiSpecsResponse {
  /** The specs from the specified publisher. */
  apiSpecs: ApiSpec[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetApiSpec. */
export interface GetApiSpecRequest {
  /**
   * Required. The name of the spec to retrieve.
   * Format: `projects/* /locations/* /apis/* /versions/* /specs/*`
   */
  name: string;
}

/** Request message for GetApiSpecContents. */
export interface GetApiSpecContentsRequest {
  /**
   * Required. The name of the spec whose contents should be retrieved.
   * Format: `projects/* /locations/* /apis/* /versions/* /specs/*`
   */
  name: string;
}

/** Request message for CreateApiSpec. */
export interface CreateApiSpecRequest {
  /**
   * Required. The parent, which owns this collection of specs.
   * Format: `projects/* /locations/* /apis/* /versions/*`
   */
  parent: string;
  /** Required. The spec to create. */
  apiSpec:
    | ApiSpec
    | undefined;
  /**
   * Required. The ID to use for the spec, which will become the final component of
   * the spec's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * Following AIP-162, IDs must not have the form of a UUID.
   */
  apiSpecId: string;
}

/** Request message for UpdateApiSpec. */
export interface UpdateApiSpecRequest {
  /**
   * Required. The spec to update.
   *
   * The `name` field is used to identify the spec to update.
   * Format: `projects/* /locations/* /apis/* /versions/* /specs/*`
   */
  apiSpec:
    | ApiSpec
    | undefined;
  /**
   * The list of fields to be updated. If omitted, all fields are updated that
   * are set in the request message (fields set to default values are ignored).
   * If an asterisk "*" is specified, all fields are updated, including fields
   * that are unspecified/default in the request.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the spec is not found, a new spec will be created.
   * In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/** Request message for DeleteApiSpec. */
export interface DeleteApiSpecRequest {
  /**
   * Required. The name of the spec to delete.
   * Format: `projects/* /locations/* /apis/* /versions/* /specs/*`
   */
  name: string;
  /**
   * If set to true, any child resources will also be deleted.
   * (Otherwise, the request will only work if there are no child resources.)
   */
  force: boolean;
}

/** Request message for TagApiSpecRevision. */
export interface TagApiSpecRevisionRequest {
  /** Required. The name of the spec to be tagged, including the revision ID. */
  name: string;
  /**
   * Required. The tag to apply.
   * The tag should be at most 40 characters, and match `[a-z][a-z0-9-]{3,39}`.
   */
  tag: string;
}

/** Request message for ListApiSpecRevisions. */
export interface ListApiSpecRevisionsRequest {
  /** Required. The name of the spec to list revisions for. */
  name: string;
  /** The maximum number of revisions to return per page. */
  pageSize: number;
  /**
   * The page token, received from a previous ListApiSpecRevisions call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Response message for ListApiSpecRevisionsResponse. */
export interface ListApiSpecRevisionsResponse {
  /** The revisions of the spec. */
  apiSpecs: ApiSpec[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for RollbackApiSpec. */
export interface RollbackApiSpecRequest {
  /** Required. The spec being rolled back. */
  name: string;
  /**
   * Required. The revision ID to roll back to.
   * It must be a revision of the same spec.
   *
   *   Example: `c7cfa2a8`
   */
  revisionId: string;
}

/** Request message for DeleteApiSpecRevision. */
export interface DeleteApiSpecRevisionRequest {
  /**
   * Required. The name of the spec revision to be deleted,
   * with a revision ID explicitly included.
   *
   * Example:
   * `projects/sample/locations/global/apis/petstore/versions/1.0.0/specs/openapi.yaml@c7cfa2a8`
   */
  name: string;
}

/** Request message for ListApiDeployments. */
export interface ListApiDeploymentsRequest {
  /**
   * Required. The parent, which owns this collection of deployments.
   * Format: `projects/* /locations/* /apis/*`
   */
  parent: string;
  /**
   * The maximum number of deployments to return.
   * The service may return fewer than this value.
   * If unspecified, at most 50 values will be returned.
   * The maximum is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListApiDeployments` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListApiDeployments` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * An expression that can be used to filter the list. Filters use the Common
   * Expression Language and can refer to all message fields.
   */
  filter: string;
}

/** Response message for ListApiDeployments. */
export interface ListApiDeploymentsResponse {
  /** The deployments from the specified publisher. */
  apiDeployments: ApiDeployment[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetApiDeployment. */
export interface GetApiDeploymentRequest {
  /**
   * Required. The name of the deployment to retrieve.
   * Format: `projects/* /locations/* /apis/* /deployments/*`
   */
  name: string;
}

/** Request message for CreateApiDeployment. */
export interface CreateApiDeploymentRequest {
  /**
   * Required. The parent, which owns this collection of deployments.
   * Format: `projects/* /locations/* /apis/*`
   */
  parent: string;
  /** Required. The deployment to create. */
  apiDeployment:
    | ApiDeployment
    | undefined;
  /**
   * Required. The ID to use for the deployment, which will become the final component of
   * the deployment's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * Following AIP-162, IDs must not have the form of a UUID.
   */
  apiDeploymentId: string;
}

/** Request message for UpdateApiDeployment. */
export interface UpdateApiDeploymentRequest {
  /**
   * Required. The deployment to update.
   *
   * The `name` field is used to identify the deployment to update.
   * Format: `projects/* /locations/* /apis/* /deployments/*`
   */
  apiDeployment:
    | ApiDeployment
    | undefined;
  /**
   * The list of fields to be updated. If omitted, all fields are updated that
   * are set in the request message (fields set to default values are ignored).
   * If an asterisk "*" is specified, all fields are updated, including fields
   * that are unspecified/default in the request.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the deployment is not found, a new deployment will be
   * created. In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/** Request message for DeleteApiDeployment. */
export interface DeleteApiDeploymentRequest {
  /**
   * Required. The name of the deployment to delete.
   * Format: `projects/* /locations/* /apis/* /deployments/*`
   */
  name: string;
  /**
   * If set to true, any child resources will also be deleted.
   * (Otherwise, the request will only work if there are no child resources.)
   */
  force: boolean;
}

/** Request message for TagApiDeploymentRevision. */
export interface TagApiDeploymentRevisionRequest {
  /** Required. The name of the deployment to be tagged, including the revision ID. */
  name: string;
  /**
   * Required. The tag to apply.
   * The tag should be at most 40 characters, and match `[a-z][a-z0-9-]{3,39}`.
   */
  tag: string;
}

/** Request message for ListApiDeploymentRevisions. */
export interface ListApiDeploymentRevisionsRequest {
  /** Required. The name of the deployment to list revisions for. */
  name: string;
  /** The maximum number of revisions to return per page. */
  pageSize: number;
  /**
   * The page token, received from a previous ListApiDeploymentRevisions call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Response message for ListApiDeploymentRevisionsResponse. */
export interface ListApiDeploymentRevisionsResponse {
  /** The revisions of the deployment. */
  apiDeployments: ApiDeployment[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for RollbackApiDeployment. */
export interface RollbackApiDeploymentRequest {
  /** Required. The deployment being rolled back. */
  name: string;
  /**
   * Required. The revision ID to roll back to.
   * It must be a revision of the same deployment.
   *
   *   Example: `c7cfa2a8`
   */
  revisionId: string;
}

/** Request message for DeleteApiDeploymentRevision. */
export interface DeleteApiDeploymentRevisionRequest {
  /**
   * Required. The name of the deployment revision to be deleted,
   * with a revision ID explicitly included.
   *
   * Example:
   * `projects/sample/locations/global/apis/petstore/deployments/prod@c7cfa2a8`
   */
  name: string;
}

/** Request message for ListArtifacts. */
export interface ListArtifactsRequest {
  /**
   * Required. The parent, which owns this collection of artifacts.
   * Format: `{parent}`
   */
  parent: string;
  /**
   * The maximum number of artifacts to return.
   * The service may return fewer than this value.
   * If unspecified, at most 50 values will be returned.
   * The maximum is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListArtifacts` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListArtifacts` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * An expression that can be used to filter the list. Filters use the Common
   * Expression Language and can refer to all message fields except contents.
   */
  filter: string;
}

/** Response message for ListArtifacts. */
export interface ListArtifactsResponse {
  /** The artifacts from the specified publisher. */
  artifacts: Artifact[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetArtifact. */
export interface GetArtifactRequest {
  /**
   * Required. The name of the artifact to retrieve.
   * Format: `{parent}/artifacts/*`
   */
  name: string;
}

/** Request message for GetArtifactContents. */
export interface GetArtifactContentsRequest {
  /**
   * Required. The name of the artifact whose contents should be retrieved.
   * Format: `{parent}/artifacts/*`
   */
  name: string;
}

/** Request message for CreateArtifact. */
export interface CreateArtifactRequest {
  /**
   * Required. The parent, which owns this collection of artifacts.
   * Format: `{parent}`
   */
  parent: string;
  /** Required. The artifact to create. */
  artifact:
    | Artifact
    | undefined;
  /**
   * Required. The ID to use for the artifact, which will become the final component of
   * the artifact's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * Following AIP-162, IDs must not have the form of a UUID.
   */
  artifactId: string;
}

/** Request message for ReplaceArtifact. */
export interface ReplaceArtifactRequest {
  /**
   * Required. The artifact to replace.
   *
   * The `name` field is used to identify the artifact to replace.
   * Format: `{parent}/artifacts/*`
   */
  artifact: Artifact | undefined;
}

/** Request message for DeleteArtifact. */
export interface DeleteArtifactRequest {
  /**
   * Required. The name of the artifact to delete.
   * Format: `{parent}/artifacts/*`
   */
  name: string;
}

function createBaseListApisRequest(): ListApisRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListApisRequest: MessageFns<ListApisRequest> = {
  encode(message: ListApisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListApisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApisRequest>): ListApisRequest {
    return ListApisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApisRequest>): ListApisRequest {
    const message = createBaseListApisRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListApisResponse(): ListApisResponse {
  return { apis: [], nextPageToken: "" };
}

export const ListApisResponse: MessageFns<ListApisResponse> = {
  encode(message: ListApisResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apis) {
      Api.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApisResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apis.push(Api.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApisResponse {
    return {
      apis: globalThis.Array.isArray(object?.apis) ? object.apis.map((e: any) => Api.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApisResponse): unknown {
    const obj: any = {};
    if (message.apis?.length) {
      obj.apis = message.apis.map((e) => Api.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApisResponse>): ListApisResponse {
    return ListApisResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApisResponse>): ListApisResponse {
    const message = createBaseListApisResponse();
    message.apis = object.apis?.map((e) => Api.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetApiRequest(): GetApiRequest {
  return { name: "" };
}

export const GetApiRequest: MessageFns<GetApiRequest> = {
  encode(message: GetApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiRequest>): GetApiRequest {
    return GetApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiRequest>): GetApiRequest {
    const message = createBaseGetApiRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateApiRequest(): CreateApiRequest {
  return { parent: "", api: undefined, apiId: "" };
}

export const CreateApiRequest: MessageFns<CreateApiRequest> = {
  encode(message: CreateApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(18).fork()).join();
    }
    if (message.apiId !== "") {
      writer.uint32(26).string(message.apiId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
      apiId: isSet(object.apiId) ? globalThis.String(object.apiId) : "",
    };
  },

  toJSON(message: CreateApiRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    if (message.apiId !== "") {
      obj.apiId = message.apiId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiRequest>): CreateApiRequest {
    return CreateApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiRequest>): CreateApiRequest {
    const message = createBaseCreateApiRequest();
    message.parent = object.parent ?? "";
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    message.apiId = object.apiId ?? "";
    return message;
  },
};

function createBaseUpdateApiRequest(): UpdateApiRequest {
  return { api: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateApiRequest: MessageFns<UpdateApiRequest> = {
  encode(message: UpdateApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiRequest {
    return {
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateApiRequest): unknown {
    const obj: any = {};
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiRequest>): UpdateApiRequest {
    return UpdateApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiRequest>): UpdateApiRequest {
    const message = createBaseUpdateApiRequest();
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteApiRequest(): DeleteApiRequest {
  return { name: "", force: false };
}

export const DeleteApiRequest: MessageFns<DeleteApiRequest> = {
  encode(message: DeleteApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiRequest>): DeleteApiRequest {
    return DeleteApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiRequest>): DeleteApiRequest {
    const message = createBaseDeleteApiRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListApiVersionsRequest(): ListApiVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListApiVersionsRequest: MessageFns<ListApiVersionsRequest> = {
  encode(message: ListApiVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListApiVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiVersionsRequest>): ListApiVersionsRequest {
    return ListApiVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiVersionsRequest>): ListApiVersionsRequest {
    const message = createBaseListApiVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListApiVersionsResponse(): ListApiVersionsResponse {
  return { apiVersions: [], nextPageToken: "" };
}

export const ListApiVersionsResponse: MessageFns<ListApiVersionsResponse> = {
  encode(message: ListApiVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiVersions) {
      ApiVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiVersions.push(ApiVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiVersionsResponse {
    return {
      apiVersions: globalThis.Array.isArray(object?.apiVersions)
        ? object.apiVersions.map((e: any) => ApiVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApiVersionsResponse): unknown {
    const obj: any = {};
    if (message.apiVersions?.length) {
      obj.apiVersions = message.apiVersions.map((e) => ApiVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiVersionsResponse>): ListApiVersionsResponse {
    return ListApiVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiVersionsResponse>): ListApiVersionsResponse {
    const message = createBaseListApiVersionsResponse();
    message.apiVersions = object.apiVersions?.map((e) => ApiVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetApiVersionRequest(): GetApiVersionRequest {
  return { name: "" };
}

export const GetApiVersionRequest: MessageFns<GetApiVersionRequest> = {
  encode(message: GetApiVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiVersionRequest>): GetApiVersionRequest {
    return GetApiVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiVersionRequest>): GetApiVersionRequest {
    const message = createBaseGetApiVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateApiVersionRequest(): CreateApiVersionRequest {
  return { parent: "", apiVersion: undefined, apiVersionId: "" };
}

export const CreateApiVersionRequest: MessageFns<CreateApiVersionRequest> = {
  encode(message: CreateApiVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiVersion !== undefined) {
      ApiVersion.encode(message.apiVersion, writer.uint32(18).fork()).join();
    }
    if (message.apiVersionId !== "") {
      writer.uint32(26).string(message.apiVersionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiVersion = ApiVersion.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiVersionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiVersion: isSet(object.apiVersion) ? ApiVersion.fromJSON(object.apiVersion) : undefined,
      apiVersionId: isSet(object.apiVersionId) ? globalThis.String(object.apiVersionId) : "",
    };
  },

  toJSON(message: CreateApiVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiVersion !== undefined) {
      obj.apiVersion = ApiVersion.toJSON(message.apiVersion);
    }
    if (message.apiVersionId !== "") {
      obj.apiVersionId = message.apiVersionId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiVersionRequest>): CreateApiVersionRequest {
    return CreateApiVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiVersionRequest>): CreateApiVersionRequest {
    const message = createBaseCreateApiVersionRequest();
    message.parent = object.parent ?? "";
    message.apiVersion = (object.apiVersion !== undefined && object.apiVersion !== null)
      ? ApiVersion.fromPartial(object.apiVersion)
      : undefined;
    message.apiVersionId = object.apiVersionId ?? "";
    return message;
  },
};

function createBaseUpdateApiVersionRequest(): UpdateApiVersionRequest {
  return { apiVersion: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateApiVersionRequest: MessageFns<UpdateApiVersionRequest> = {
  encode(message: UpdateApiVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiVersion !== undefined) {
      ApiVersion.encode(message.apiVersion, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiVersion = ApiVersion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiVersionRequest {
    return {
      apiVersion: isSet(object.apiVersion) ? ApiVersion.fromJSON(object.apiVersion) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateApiVersionRequest): unknown {
    const obj: any = {};
    if (message.apiVersion !== undefined) {
      obj.apiVersion = ApiVersion.toJSON(message.apiVersion);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiVersionRequest>): UpdateApiVersionRequest {
    return UpdateApiVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiVersionRequest>): UpdateApiVersionRequest {
    const message = createBaseUpdateApiVersionRequest();
    message.apiVersion = (object.apiVersion !== undefined && object.apiVersion !== null)
      ? ApiVersion.fromPartial(object.apiVersion)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteApiVersionRequest(): DeleteApiVersionRequest {
  return { name: "", force: false };
}

export const DeleteApiVersionRequest: MessageFns<DeleteApiVersionRequest> = {
  encode(message: DeleteApiVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteApiVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiVersionRequest>): DeleteApiVersionRequest {
    return DeleteApiVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiVersionRequest>): DeleteApiVersionRequest {
    const message = createBaseDeleteApiVersionRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListApiSpecsRequest(): ListApiSpecsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListApiSpecsRequest: MessageFns<ListApiSpecsRequest> = {
  encode(message: ListApiSpecsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiSpecsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiSpecsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiSpecsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListApiSpecsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiSpecsRequest>): ListApiSpecsRequest {
    return ListApiSpecsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiSpecsRequest>): ListApiSpecsRequest {
    const message = createBaseListApiSpecsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListApiSpecsResponse(): ListApiSpecsResponse {
  return { apiSpecs: [], nextPageToken: "" };
}

export const ListApiSpecsResponse: MessageFns<ListApiSpecsResponse> = {
  encode(message: ListApiSpecsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiSpecs) {
      ApiSpec.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiSpecsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiSpecsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiSpecs.push(ApiSpec.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiSpecsResponse {
    return {
      apiSpecs: globalThis.Array.isArray(object?.apiSpecs) ? object.apiSpecs.map((e: any) => ApiSpec.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApiSpecsResponse): unknown {
    const obj: any = {};
    if (message.apiSpecs?.length) {
      obj.apiSpecs = message.apiSpecs.map((e) => ApiSpec.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiSpecsResponse>): ListApiSpecsResponse {
    return ListApiSpecsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiSpecsResponse>): ListApiSpecsResponse {
    const message = createBaseListApiSpecsResponse();
    message.apiSpecs = object.apiSpecs?.map((e) => ApiSpec.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetApiSpecRequest(): GetApiSpecRequest {
  return { name: "" };
}

export const GetApiSpecRequest: MessageFns<GetApiSpecRequest> = {
  encode(message: GetApiSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiSpecRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiSpecRequest>): GetApiSpecRequest {
    return GetApiSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiSpecRequest>): GetApiSpecRequest {
    const message = createBaseGetApiSpecRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetApiSpecContentsRequest(): GetApiSpecContentsRequest {
  return { name: "" };
}

export const GetApiSpecContentsRequest: MessageFns<GetApiSpecContentsRequest> = {
  encode(message: GetApiSpecContentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiSpecContentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiSpecContentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiSpecContentsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiSpecContentsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiSpecContentsRequest>): GetApiSpecContentsRequest {
    return GetApiSpecContentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiSpecContentsRequest>): GetApiSpecContentsRequest {
    const message = createBaseGetApiSpecContentsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateApiSpecRequest(): CreateApiSpecRequest {
  return { parent: "", apiSpec: undefined, apiSpecId: "" };
}

export const CreateApiSpecRequest: MessageFns<CreateApiSpecRequest> = {
  encode(message: CreateApiSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiSpec !== undefined) {
      ApiSpec.encode(message.apiSpec, writer.uint32(18).fork()).join();
    }
    if (message.apiSpecId !== "") {
      writer.uint32(26).string(message.apiSpecId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiSpec = ApiSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiSpecId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiSpecRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiSpec: isSet(object.apiSpec) ? ApiSpec.fromJSON(object.apiSpec) : undefined,
      apiSpecId: isSet(object.apiSpecId) ? globalThis.String(object.apiSpecId) : "",
    };
  },

  toJSON(message: CreateApiSpecRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiSpec !== undefined) {
      obj.apiSpec = ApiSpec.toJSON(message.apiSpec);
    }
    if (message.apiSpecId !== "") {
      obj.apiSpecId = message.apiSpecId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiSpecRequest>): CreateApiSpecRequest {
    return CreateApiSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiSpecRequest>): CreateApiSpecRequest {
    const message = createBaseCreateApiSpecRequest();
    message.parent = object.parent ?? "";
    message.apiSpec = (object.apiSpec !== undefined && object.apiSpec !== null)
      ? ApiSpec.fromPartial(object.apiSpec)
      : undefined;
    message.apiSpecId = object.apiSpecId ?? "";
    return message;
  },
};

function createBaseUpdateApiSpecRequest(): UpdateApiSpecRequest {
  return { apiSpec: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateApiSpecRequest: MessageFns<UpdateApiSpecRequest> = {
  encode(message: UpdateApiSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiSpec !== undefined) {
      ApiSpec.encode(message.apiSpec, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiSpec = ApiSpec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiSpecRequest {
    return {
      apiSpec: isSet(object.apiSpec) ? ApiSpec.fromJSON(object.apiSpec) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateApiSpecRequest): unknown {
    const obj: any = {};
    if (message.apiSpec !== undefined) {
      obj.apiSpec = ApiSpec.toJSON(message.apiSpec);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiSpecRequest>): UpdateApiSpecRequest {
    return UpdateApiSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiSpecRequest>): UpdateApiSpecRequest {
    const message = createBaseUpdateApiSpecRequest();
    message.apiSpec = (object.apiSpec !== undefined && object.apiSpec !== null)
      ? ApiSpec.fromPartial(object.apiSpec)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteApiSpecRequest(): DeleteApiSpecRequest {
  return { name: "", force: false };
}

export const DeleteApiSpecRequest: MessageFns<DeleteApiSpecRequest> = {
  encode(message: DeleteApiSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiSpecRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteApiSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiSpecRequest>): DeleteApiSpecRequest {
    return DeleteApiSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiSpecRequest>): DeleteApiSpecRequest {
    const message = createBaseDeleteApiSpecRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseTagApiSpecRevisionRequest(): TagApiSpecRevisionRequest {
  return { name: "", tag: "" };
}

export const TagApiSpecRevisionRequest: MessageFns<TagApiSpecRevisionRequest> = {
  encode(message: TagApiSpecRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.tag !== "") {
      writer.uint32(18).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagApiSpecRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagApiSpecRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagApiSpecRevisionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
    };
  },

  toJSON(message: TagApiSpecRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<TagApiSpecRevisionRequest>): TagApiSpecRevisionRequest {
    return TagApiSpecRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagApiSpecRevisionRequest>): TagApiSpecRevisionRequest {
    const message = createBaseTagApiSpecRevisionRequest();
    message.name = object.name ?? "";
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBaseListApiSpecRevisionsRequest(): ListApiSpecRevisionsRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const ListApiSpecRevisionsRequest: MessageFns<ListApiSpecRevisionsRequest> = {
  encode(message: ListApiSpecRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiSpecRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiSpecRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiSpecRevisionsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListApiSpecRevisionsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiSpecRevisionsRequest>): ListApiSpecRevisionsRequest {
    return ListApiSpecRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiSpecRevisionsRequest>): ListApiSpecRevisionsRequest {
    const message = createBaseListApiSpecRevisionsRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListApiSpecRevisionsResponse(): ListApiSpecRevisionsResponse {
  return { apiSpecs: [], nextPageToken: "" };
}

export const ListApiSpecRevisionsResponse: MessageFns<ListApiSpecRevisionsResponse> = {
  encode(message: ListApiSpecRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiSpecs) {
      ApiSpec.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiSpecRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiSpecRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiSpecs.push(ApiSpec.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiSpecRevisionsResponse {
    return {
      apiSpecs: globalThis.Array.isArray(object?.apiSpecs) ? object.apiSpecs.map((e: any) => ApiSpec.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApiSpecRevisionsResponse): unknown {
    const obj: any = {};
    if (message.apiSpecs?.length) {
      obj.apiSpecs = message.apiSpecs.map((e) => ApiSpec.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiSpecRevisionsResponse>): ListApiSpecRevisionsResponse {
    return ListApiSpecRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiSpecRevisionsResponse>): ListApiSpecRevisionsResponse {
    const message = createBaseListApiSpecRevisionsResponse();
    message.apiSpecs = object.apiSpecs?.map((e) => ApiSpec.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseRollbackApiSpecRequest(): RollbackApiSpecRequest {
  return { name: "", revisionId: "" };
}

export const RollbackApiSpecRequest: MessageFns<RollbackApiSpecRequest> = {
  encode(message: RollbackApiSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.revisionId !== "") {
      writer.uint32(18).string(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackApiSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackApiSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollbackApiSpecRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
    };
  },

  toJSON(message: RollbackApiSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<RollbackApiSpecRequest>): RollbackApiSpecRequest {
    return RollbackApiSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RollbackApiSpecRequest>): RollbackApiSpecRequest {
    const message = createBaseRollbackApiSpecRequest();
    message.name = object.name ?? "";
    message.revisionId = object.revisionId ?? "";
    return message;
  },
};

function createBaseDeleteApiSpecRevisionRequest(): DeleteApiSpecRevisionRequest {
  return { name: "" };
}

export const DeleteApiSpecRevisionRequest: MessageFns<DeleteApiSpecRevisionRequest> = {
  encode(message: DeleteApiSpecRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiSpecRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiSpecRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiSpecRevisionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteApiSpecRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiSpecRevisionRequest>): DeleteApiSpecRevisionRequest {
    return DeleteApiSpecRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiSpecRevisionRequest>): DeleteApiSpecRevisionRequest {
    const message = createBaseDeleteApiSpecRevisionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListApiDeploymentsRequest(): ListApiDeploymentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListApiDeploymentsRequest: MessageFns<ListApiDeploymentsRequest> = {
  encode(message: ListApiDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiDeploymentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListApiDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiDeploymentsRequest>): ListApiDeploymentsRequest {
    return ListApiDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiDeploymentsRequest>): ListApiDeploymentsRequest {
    const message = createBaseListApiDeploymentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListApiDeploymentsResponse(): ListApiDeploymentsResponse {
  return { apiDeployments: [], nextPageToken: "" };
}

export const ListApiDeploymentsResponse: MessageFns<ListApiDeploymentsResponse> = {
  encode(message: ListApiDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiDeployments) {
      ApiDeployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiDeployments.push(ApiDeployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiDeploymentsResponse {
    return {
      apiDeployments: globalThis.Array.isArray(object?.apiDeployments)
        ? object.apiDeployments.map((e: any) => ApiDeployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApiDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.apiDeployments?.length) {
      obj.apiDeployments = message.apiDeployments.map((e) => ApiDeployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiDeploymentsResponse>): ListApiDeploymentsResponse {
    return ListApiDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiDeploymentsResponse>): ListApiDeploymentsResponse {
    const message = createBaseListApiDeploymentsResponse();
    message.apiDeployments = object.apiDeployments?.map((e) => ApiDeployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetApiDeploymentRequest(): GetApiDeploymentRequest {
  return { name: "" };
}

export const GetApiDeploymentRequest: MessageFns<GetApiDeploymentRequest> = {
  encode(message: GetApiDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiDeploymentRequest>): GetApiDeploymentRequest {
    return GetApiDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiDeploymentRequest>): GetApiDeploymentRequest {
    const message = createBaseGetApiDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateApiDeploymentRequest(): CreateApiDeploymentRequest {
  return { parent: "", apiDeployment: undefined, apiDeploymentId: "" };
}

export const CreateApiDeploymentRequest: MessageFns<CreateApiDeploymentRequest> = {
  encode(message: CreateApiDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiDeployment !== undefined) {
      ApiDeployment.encode(message.apiDeployment, writer.uint32(18).fork()).join();
    }
    if (message.apiDeploymentId !== "") {
      writer.uint32(26).string(message.apiDeploymentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiDeployment = ApiDeployment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiDeploymentId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiDeploymentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiDeployment: isSet(object.apiDeployment) ? ApiDeployment.fromJSON(object.apiDeployment) : undefined,
      apiDeploymentId: isSet(object.apiDeploymentId) ? globalThis.String(object.apiDeploymentId) : "",
    };
  },

  toJSON(message: CreateApiDeploymentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiDeployment !== undefined) {
      obj.apiDeployment = ApiDeployment.toJSON(message.apiDeployment);
    }
    if (message.apiDeploymentId !== "") {
      obj.apiDeploymentId = message.apiDeploymentId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiDeploymentRequest>): CreateApiDeploymentRequest {
    return CreateApiDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiDeploymentRequest>): CreateApiDeploymentRequest {
    const message = createBaseCreateApiDeploymentRequest();
    message.parent = object.parent ?? "";
    message.apiDeployment = (object.apiDeployment !== undefined && object.apiDeployment !== null)
      ? ApiDeployment.fromPartial(object.apiDeployment)
      : undefined;
    message.apiDeploymentId = object.apiDeploymentId ?? "";
    return message;
  },
};

function createBaseUpdateApiDeploymentRequest(): UpdateApiDeploymentRequest {
  return { apiDeployment: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateApiDeploymentRequest: MessageFns<UpdateApiDeploymentRequest> = {
  encode(message: UpdateApiDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiDeployment !== undefined) {
      ApiDeployment.encode(message.apiDeployment, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiDeployment = ApiDeployment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiDeploymentRequest {
    return {
      apiDeployment: isSet(object.apiDeployment) ? ApiDeployment.fromJSON(object.apiDeployment) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateApiDeploymentRequest): unknown {
    const obj: any = {};
    if (message.apiDeployment !== undefined) {
      obj.apiDeployment = ApiDeployment.toJSON(message.apiDeployment);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiDeploymentRequest>): UpdateApiDeploymentRequest {
    return UpdateApiDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiDeploymentRequest>): UpdateApiDeploymentRequest {
    const message = createBaseUpdateApiDeploymentRequest();
    message.apiDeployment = (object.apiDeployment !== undefined && object.apiDeployment !== null)
      ? ApiDeployment.fromPartial(object.apiDeployment)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteApiDeploymentRequest(): DeleteApiDeploymentRequest {
  return { name: "", force: false };
}

export const DeleteApiDeploymentRequest: MessageFns<DeleteApiDeploymentRequest> = {
  encode(message: DeleteApiDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiDeploymentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteApiDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiDeploymentRequest>): DeleteApiDeploymentRequest {
    return DeleteApiDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiDeploymentRequest>): DeleteApiDeploymentRequest {
    const message = createBaseDeleteApiDeploymentRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseTagApiDeploymentRevisionRequest(): TagApiDeploymentRevisionRequest {
  return { name: "", tag: "" };
}

export const TagApiDeploymentRevisionRequest: MessageFns<TagApiDeploymentRevisionRequest> = {
  encode(message: TagApiDeploymentRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.tag !== "") {
      writer.uint32(18).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagApiDeploymentRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagApiDeploymentRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagApiDeploymentRevisionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
    };
  },

  toJSON(message: TagApiDeploymentRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<TagApiDeploymentRevisionRequest>): TagApiDeploymentRevisionRequest {
    return TagApiDeploymentRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagApiDeploymentRevisionRequest>): TagApiDeploymentRevisionRequest {
    const message = createBaseTagApiDeploymentRevisionRequest();
    message.name = object.name ?? "";
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBaseListApiDeploymentRevisionsRequest(): ListApiDeploymentRevisionsRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const ListApiDeploymentRevisionsRequest: MessageFns<ListApiDeploymentRevisionsRequest> = {
  encode(message: ListApiDeploymentRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiDeploymentRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiDeploymentRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiDeploymentRevisionsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListApiDeploymentRevisionsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiDeploymentRevisionsRequest>): ListApiDeploymentRevisionsRequest {
    return ListApiDeploymentRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiDeploymentRevisionsRequest>): ListApiDeploymentRevisionsRequest {
    const message = createBaseListApiDeploymentRevisionsRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListApiDeploymentRevisionsResponse(): ListApiDeploymentRevisionsResponse {
  return { apiDeployments: [], nextPageToken: "" };
}

export const ListApiDeploymentRevisionsResponse: MessageFns<ListApiDeploymentRevisionsResponse> = {
  encode(message: ListApiDeploymentRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiDeployments) {
      ApiDeployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiDeploymentRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiDeploymentRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiDeployments.push(ApiDeployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiDeploymentRevisionsResponse {
    return {
      apiDeployments: globalThis.Array.isArray(object?.apiDeployments)
        ? object.apiDeployments.map((e: any) => ApiDeployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApiDeploymentRevisionsResponse): unknown {
    const obj: any = {};
    if (message.apiDeployments?.length) {
      obj.apiDeployments = message.apiDeployments.map((e) => ApiDeployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiDeploymentRevisionsResponse>): ListApiDeploymentRevisionsResponse {
    return ListApiDeploymentRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiDeploymentRevisionsResponse>): ListApiDeploymentRevisionsResponse {
    const message = createBaseListApiDeploymentRevisionsResponse();
    message.apiDeployments = object.apiDeployments?.map((e) => ApiDeployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseRollbackApiDeploymentRequest(): RollbackApiDeploymentRequest {
  return { name: "", revisionId: "" };
}

export const RollbackApiDeploymentRequest: MessageFns<RollbackApiDeploymentRequest> = {
  encode(message: RollbackApiDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.revisionId !== "") {
      writer.uint32(18).string(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackApiDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackApiDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollbackApiDeploymentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
    };
  },

  toJSON(message: RollbackApiDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<RollbackApiDeploymentRequest>): RollbackApiDeploymentRequest {
    return RollbackApiDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RollbackApiDeploymentRequest>): RollbackApiDeploymentRequest {
    const message = createBaseRollbackApiDeploymentRequest();
    message.name = object.name ?? "";
    message.revisionId = object.revisionId ?? "";
    return message;
  },
};

function createBaseDeleteApiDeploymentRevisionRequest(): DeleteApiDeploymentRevisionRequest {
  return { name: "" };
}

export const DeleteApiDeploymentRevisionRequest: MessageFns<DeleteApiDeploymentRevisionRequest> = {
  encode(message: DeleteApiDeploymentRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiDeploymentRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiDeploymentRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiDeploymentRevisionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteApiDeploymentRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiDeploymentRevisionRequest>): DeleteApiDeploymentRevisionRequest {
    return DeleteApiDeploymentRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiDeploymentRevisionRequest>): DeleteApiDeploymentRevisionRequest {
    const message = createBaseDeleteApiDeploymentRevisionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListArtifactsRequest(): ListArtifactsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListArtifactsRequest: MessageFns<ListArtifactsRequest> = {
  encode(message: ListArtifactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListArtifactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtifactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtifactsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListArtifactsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListArtifactsRequest>): ListArtifactsRequest {
    return ListArtifactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListArtifactsRequest>): ListArtifactsRequest {
    const message = createBaseListArtifactsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListArtifactsResponse(): ListArtifactsResponse {
  return { artifacts: [], nextPageToken: "" };
}

export const ListArtifactsResponse: MessageFns<ListArtifactsResponse> = {
  encode(message: ListArtifactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.artifacts) {
      Artifact.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListArtifactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArtifactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifacts.push(Artifact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArtifactsResponse {
    return {
      artifacts: globalThis.Array.isArray(object?.artifacts)
        ? object.artifacts.map((e: any) => Artifact.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListArtifactsResponse): unknown {
    const obj: any = {};
    if (message.artifacts?.length) {
      obj.artifacts = message.artifacts.map((e) => Artifact.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListArtifactsResponse>): ListArtifactsResponse {
    return ListArtifactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListArtifactsResponse>): ListArtifactsResponse {
    const message = createBaseListArtifactsResponse();
    message.artifacts = object.artifacts?.map((e) => Artifact.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetArtifactRequest(): GetArtifactRequest {
  return { name: "" };
}

export const GetArtifactRequest: MessageFns<GetArtifactRequest> = {
  encode(message: GetArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArtifactRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetArtifactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetArtifactRequest>): GetArtifactRequest {
    return GetArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetArtifactRequest>): GetArtifactRequest {
    const message = createBaseGetArtifactRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetArtifactContentsRequest(): GetArtifactContentsRequest {
  return { name: "" };
}

export const GetArtifactContentsRequest: MessageFns<GetArtifactContentsRequest> = {
  encode(message: GetArtifactContentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArtifactContentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArtifactContentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArtifactContentsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetArtifactContentsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetArtifactContentsRequest>): GetArtifactContentsRequest {
    return GetArtifactContentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetArtifactContentsRequest>): GetArtifactContentsRequest {
    const message = createBaseGetArtifactContentsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateArtifactRequest(): CreateArtifactRequest {
  return { parent: "", artifact: undefined, artifactId: "" };
}

export const CreateArtifactRequest: MessageFns<CreateArtifactRequest> = {
  encode(message: CreateArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.artifact !== undefined) {
      Artifact.encode(message.artifact, writer.uint32(18).fork()).join();
    }
    if (message.artifactId !== "") {
      writer.uint32(26).string(message.artifactId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artifact = Artifact.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.artifactId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArtifactRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      artifact: isSet(object.artifact) ? Artifact.fromJSON(object.artifact) : undefined,
      artifactId: isSet(object.artifactId) ? globalThis.String(object.artifactId) : "",
    };
  },

  toJSON(message: CreateArtifactRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.artifact !== undefined) {
      obj.artifact = Artifact.toJSON(message.artifact);
    }
    if (message.artifactId !== "") {
      obj.artifactId = message.artifactId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateArtifactRequest>): CreateArtifactRequest {
    return CreateArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateArtifactRequest>): CreateArtifactRequest {
    const message = createBaseCreateArtifactRequest();
    message.parent = object.parent ?? "";
    message.artifact = (object.artifact !== undefined && object.artifact !== null)
      ? Artifact.fromPartial(object.artifact)
      : undefined;
    message.artifactId = object.artifactId ?? "";
    return message;
  },
};

function createBaseReplaceArtifactRequest(): ReplaceArtifactRequest {
  return { artifact: undefined };
}

export const ReplaceArtifactRequest: MessageFns<ReplaceArtifactRequest> = {
  encode(message: ReplaceArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artifact !== undefined) {
      Artifact.encode(message.artifact, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artifact = Artifact.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceArtifactRequest {
    return { artifact: isSet(object.artifact) ? Artifact.fromJSON(object.artifact) : undefined };
  },

  toJSON(message: ReplaceArtifactRequest): unknown {
    const obj: any = {};
    if (message.artifact !== undefined) {
      obj.artifact = Artifact.toJSON(message.artifact);
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceArtifactRequest>): ReplaceArtifactRequest {
    return ReplaceArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceArtifactRequest>): ReplaceArtifactRequest {
    const message = createBaseReplaceArtifactRequest();
    message.artifact = (object.artifact !== undefined && object.artifact !== null)
      ? Artifact.fromPartial(object.artifact)
      : undefined;
    return message;
  },
};

function createBaseDeleteArtifactRequest(): DeleteArtifactRequest {
  return { name: "" };
}

export const DeleteArtifactRequest: MessageFns<DeleteArtifactRequest> = {
  encode(message: DeleteArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteArtifactRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteArtifactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteArtifactRequest>): DeleteArtifactRequest {
    return DeleteArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteArtifactRequest>): DeleteArtifactRequest {
    const message = createBaseDeleteArtifactRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** The Registry service allows teams to manage descriptions of APIs. */
export type RegistryDefinition = typeof RegistryDefinition;
export const RegistryDefinition = {
  name: "Registry",
  fullName: "google.cloud.apigeeregistry.v1.Registry",
  methods: {
    /** Returns matching APIs. */
    listApis: {
      name: "ListApis",
      requestType: ListApisRequest,
      requestStream: false,
      responseType: ListApisResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              105,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns a specified API. */
    getApi: {
      name: "GetApi",
      requestType: GetApiRequest,
      requestStream: false,
      responseType: Api,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a specified API. */
    createApi: {
      name: "CreateApi",
      requestType: CreateApiRequest,
      requestStream: false,
      responseType: Api,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 97, 112, 105, 44, 97, 112, 105, 95, 105, 100])],
          578365826: [
            Buffer.from([
              47,
              58,
              3,
              97,
              112,
              105,
              34,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              105,
              115,
            ]),
          ],
        },
      },
    },
    /** Used to modify a specified API. */
    updateApi: {
      name: "UpdateApi",
      requestType: UpdateApiRequest,
      requestStream: false,
      responseType: Api,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 97, 112, 105, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              51,
              58,
              3,
              97,
              112,
              105,
              50,
              44,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              105,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Removes a specified API and all of the resources that it
     * owns.
     */
    deleteApi: {
      name: "DeleteApi",
      requestType: DeleteApiRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              42,
              40,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns matching versions. */
    listApiVersions: {
      name: "ListApiVersions",
      requestType: ListApiVersionsRequest,
      requestStream: false,
      responseType: ListApiVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns a specified version. */
    getApiVersion: {
      name: "GetApiVersion",
      requestType: GetApiVersionRequest,
      requestStream: false,
      responseType: ApiVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a specified version. */
    createApiVersion: {
      name: "CreateApiVersion",
      requestType: CreateApiVersionRequest,
      requestStream: false,
      responseType: ApiVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              105,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              97,
              112,
              105,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              11,
              97,
              112,
              105,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Used to modify a specified version. */
    updateApiVersion: {
      name: "UpdateApiVersion",
      requestType: UpdateApiVersionRequest,
      requestStream: false,
      responseType: ApiVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              97,
              112,
              105,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              11,
              97,
              112,
              105,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              105,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Removes a specified version and all of the resources that
     * it owns.
     */
    deleteApiVersion: {
      name: "DeleteApiVersion",
      requestType: DeleteApiVersionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns matching specs. */
    listApiSpecs: {
      name: "ListApiSpecs",
      requestType: ListApiSpecsRequest,
      requestStream: false,
      responseType: ListApiSpecsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              101,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns a specified spec. */
    getApiSpec: {
      name: "GetApiSpec",
      requestType: GetApiSpecRequest,
      requestStream: false,
      responseType: ApiSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the contents of a specified spec.
     * If specs are stored with GZip compression, the default behavior
     * is to return the spec uncompressed (the mime_type response field
     * indicates the exact format returned).
     */
    getApiSpecContents: {
      name: "GetApiSpecContents",
      requestType: GetApiSpecContentsRequest,
      requestStream: false,
      responseType: HttpBody,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a specified spec. */
    createApiSpec: {
      name: "CreateApiSpec",
      requestType: CreateApiSpecRequest,
      requestStream: false,
      responseType: ApiSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              105,
              95,
              115,
              112,
              101,
              99,
              44,
              97,
              112,
              105,
              95,
              115,
              112,
              101,
              99,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              8,
              97,
              112,
              105,
              95,
              115,
              112,
              101,
              99,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              101,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Used to modify a specified spec. */
    updateApiSpec: {
      name: "UpdateApiSpec",
      requestType: UpdateApiSpecRequest,
      requestStream: false,
      responseType: ApiSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              97,
              112,
              105,
              95,
              115,
              112,
              101,
              99,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              8,
              97,
              112,
              105,
              95,
              115,
              112,
              101,
              99,
              50,
              68,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              105,
              95,
              115,
              112,
              101,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Removes a specified spec, all revisions, and all child
     * resources (e.g., artifacts).
     */
    deleteApiSpec: {
      name: "DeleteApiSpec",
      requestType: DeleteApiSpecRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Adds a tag to a specified revision of a spec. */
    tagApiSpecRevision: {
      name: "TagApiSpecRevision",
      requestType: TagApiSpecRevisionRequest,
      requestStream: false,
      responseType: ApiSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              116,
              97,
              103,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all revisions of a spec.
     * Revisions are returned in descending order of revision creation time.
     */
    listApiSpecRevisions: {
      name: "ListApiSpecRevisions",
      requestType: ListApiSpecRevisionsRequest,
      requestStream: false,
      responseType: ListApiSpecRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the current revision to a specified prior revision.
     * Note that this creates a new revision with a new revision ID.
     */
    rollbackApiSpec: {
      name: "RollbackApiSpec",
      requestType: RollbackApiSpecRequest,
      requestStream: false,
      responseType: ApiSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              114,
              111,
              108,
              108,
              98,
              97,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Deletes a revision of a spec. */
    deleteApiSpecRevision: {
      name: "DeleteApiSpecRevision",
      requestType: DeleteApiSpecRevisionRequest,
      requestStream: false,
      responseType: ApiSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              42,
              74,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Returns matching deployments. */
    listApiDeployments: {
      name: "ListApiDeployments",
      requestType: ListApiDeploymentsRequest,
      requestStream: false,
      responseType: ListApiDeploymentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns a specified deployment. */
    getApiDeployment: {
      name: "GetApiDeployment",
      requestType: GetApiDeploymentRequest,
      requestStream: false,
      responseType: ApiDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a specified deployment. */
    createApiDeployment: {
      name: "CreateApiDeployment",
      requestType: CreateApiDeploymentRequest,
      requestStream: false,
      responseType: ApiDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              105,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              97,
              112,
              105,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              14,
              97,
              112,
              105,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Used to modify a specified deployment. */
    updateApiDeployment: {
      name: "UpdateApiDeployment",
      requestType: UpdateApiDeploymentRequest,
      requestStream: false,
      responseType: ApiDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              97,
              112,
              105,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              14,
              97,
              112,
              105,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              50,
              69,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              105,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Removes a specified deployment, all revisions, and all
     * child resources (e.g., artifacts).
     */
    deleteApiDeployment: {
      name: "DeleteApiDeployment",
      requestType: DeleteApiDeploymentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Adds a tag to a specified revision of a
     * deployment.
     */
    tagApiDeploymentRevision: {
      name: "TagApiDeploymentRevision",
      requestType: TagApiDeploymentRevisionRequest,
      requestStream: false,
      responseType: ApiDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              116,
              97,
              103,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all revisions of a deployment.
     * Revisions are returned in descending order of revision creation time.
     */
    listApiDeploymentRevisions: {
      name: "ListApiDeploymentRevisions",
      requestType: ListApiDeploymentRevisionsRequest,
      requestStream: false,
      responseType: ListApiDeploymentRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the current revision to a specified prior
     * revision. Note that this creates a new revision with a new revision ID.
     */
    rollbackApiDeployment: {
      name: "RollbackApiDeployment",
      requestType: RollbackApiDeploymentRequest,
      requestStream: false,
      responseType: ApiDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              111,
              108,
              108,
              98,
              97,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Deletes a revision of a deployment. */
    deleteApiDeploymentRevision: {
      name: "DeleteApiDeploymentRevision",
      requestType: DeleteApiDeploymentRevisionRequest,
      requestStream: false,
      responseType: ApiDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              42,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Returns matching artifacts. */
    listArtifacts: {
      name: "ListArtifacts",
      requestType: ListArtifactsRequest,
      requestStream: false,
      responseType: ListArtifactsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              187,
              2,
              90,
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              90,
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns a specified artifact. */
    getArtifact: {
      name: "GetArtifact",
      requestType: GetArtifactRequest,
      requestStream: false,
      responseType: Artifact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              187,
              2,
              90,
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the contents of a specified artifact.
     * If artifacts are stored with GZip compression, the default behavior
     * is to return the artifact uncompressed (the mime_type response field
     * indicates the exact format returned).
     */
    getArtifactContents: {
      name: "GetArtifactContents",
      requestType: GetArtifactContentsRequest,
      requestStream: false,
      responseType: HttpBody,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              247,
              2,
              90,
              66,
              18,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
              90,
              77,
              18,
              75,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
              90,
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
              90,
              80,
              18,
              78,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a specified artifact. */
    createArtifact: {
      name: "CreateArtifact",
      requestType: CreateArtifactRequest,
      requestStream: false,
      responseType: Artifact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              44,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              237,
              2,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              90,
              64,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              90,
              75,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              90,
              83,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              90,
              78,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              34,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Used to replace a specified artifact. */
    replaceArtifact: {
      name: "ReplaceArtifact",
      requestType: ReplaceArtifactRequest,
      requestStream: false,
      responseType: Artifact,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 97, 114, 116, 105, 102, 97, 99, 116])],
          578365826: [
            Buffer.from([
              154,
              3,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              90,
              73,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              26,
              61,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              84,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              26,
              72,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              92,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              26,
              80,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              87,
              58,
              8,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              26,
              75,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              26,
              54,
              47,
              118,
              49,
              47,
              123,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Removes a specified artifact. */
    deleteArtifact: {
      name: "DeleteArtifact",
      requestType: DeleteArtifactRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              187,
              2,
              90,
              54,
              42,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              65,
              42,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              73,
              42,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              90,
              68,
              42,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              114,
              116,
              105,
              102,
              97,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RegistryServiceImplementation<CallContextExt = {}> {
  /** Returns matching APIs. */
  listApis(request: ListApisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListApisResponse>>;
  /** Returns a specified API. */
  getApi(request: GetApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Api>>;
  /** Creates a specified API. */
  createApi(request: CreateApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Api>>;
  /** Used to modify a specified API. */
  updateApi(request: UpdateApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Api>>;
  /**
   * Removes a specified API and all of the resources that it
   * owns.
   */
  deleteApi(request: DeleteApiRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Returns matching versions. */
  listApiVersions(
    request: ListApiVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApiVersionsResponse>>;
  /** Returns a specified version. */
  getApiVersion(request: GetApiVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ApiVersion>>;
  /** Creates a specified version. */
  createApiVersion(
    request: CreateApiVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiVersion>>;
  /** Used to modify a specified version. */
  updateApiVersion(
    request: UpdateApiVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiVersion>>;
  /**
   * Removes a specified version and all of the resources that
   * it owns.
   */
  deleteApiVersion(
    request: DeleteApiVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Returns matching specs. */
  listApiSpecs(
    request: ListApiSpecsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApiSpecsResponse>>;
  /** Returns a specified spec. */
  getApiSpec(request: GetApiSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ApiSpec>>;
  /**
   * Returns the contents of a specified spec.
   * If specs are stored with GZip compression, the default behavior
   * is to return the spec uncompressed (the mime_type response field
   * indicates the exact format returned).
   */
  getApiSpecContents(
    request: GetApiSpecContentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpBody>>;
  /** Creates a specified spec. */
  createApiSpec(request: CreateApiSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ApiSpec>>;
  /** Used to modify a specified spec. */
  updateApiSpec(request: UpdateApiSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ApiSpec>>;
  /**
   * Removes a specified spec, all revisions, and all child
   * resources (e.g., artifacts).
   */
  deleteApiSpec(request: DeleteApiSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Adds a tag to a specified revision of a spec. */
  tagApiSpecRevision(
    request: TagApiSpecRevisionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiSpec>>;
  /**
   * Lists all revisions of a spec.
   * Revisions are returned in descending order of revision creation time.
   */
  listApiSpecRevisions(
    request: ListApiSpecRevisionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApiSpecRevisionsResponse>>;
  /**
   * Sets the current revision to a specified prior revision.
   * Note that this creates a new revision with a new revision ID.
   */
  rollbackApiSpec(
    request: RollbackApiSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiSpec>>;
  /** Deletes a revision of a spec. */
  deleteApiSpecRevision(
    request: DeleteApiSpecRevisionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiSpec>>;
  /** Returns matching deployments. */
  listApiDeployments(
    request: ListApiDeploymentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApiDeploymentsResponse>>;
  /** Returns a specified deployment. */
  getApiDeployment(
    request: GetApiDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiDeployment>>;
  /** Creates a specified deployment. */
  createApiDeployment(
    request: CreateApiDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiDeployment>>;
  /** Used to modify a specified deployment. */
  updateApiDeployment(
    request: UpdateApiDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiDeployment>>;
  /**
   * Removes a specified deployment, all revisions, and all
   * child resources (e.g., artifacts).
   */
  deleteApiDeployment(
    request: DeleteApiDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Adds a tag to a specified revision of a
   * deployment.
   */
  tagApiDeploymentRevision(
    request: TagApiDeploymentRevisionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiDeployment>>;
  /**
   * Lists all revisions of a deployment.
   * Revisions are returned in descending order of revision creation time.
   */
  listApiDeploymentRevisions(
    request: ListApiDeploymentRevisionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListApiDeploymentRevisionsResponse>>;
  /**
   * Sets the current revision to a specified prior
   * revision. Note that this creates a new revision with a new revision ID.
   */
  rollbackApiDeployment(
    request: RollbackApiDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiDeployment>>;
  /** Deletes a revision of a deployment. */
  deleteApiDeploymentRevision(
    request: DeleteApiDeploymentRevisionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiDeployment>>;
  /** Returns matching artifacts. */
  listArtifacts(
    request: ListArtifactsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListArtifactsResponse>>;
  /** Returns a specified artifact. */
  getArtifact(request: GetArtifactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Artifact>>;
  /**
   * Returns the contents of a specified artifact.
   * If artifacts are stored with GZip compression, the default behavior
   * is to return the artifact uncompressed (the mime_type response field
   * indicates the exact format returned).
   */
  getArtifactContents(
    request: GetArtifactContentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpBody>>;
  /** Creates a specified artifact. */
  createArtifact(request: CreateArtifactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Artifact>>;
  /** Used to replace a specified artifact. */
  replaceArtifact(
    request: ReplaceArtifactRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Artifact>>;
  /** Removes a specified artifact. */
  deleteArtifact(request: DeleteArtifactRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface RegistryClient<CallOptionsExt = {}> {
  /** Returns matching APIs. */
  listApis(request: DeepPartial<ListApisRequest>, options?: CallOptions & CallOptionsExt): Promise<ListApisResponse>;
  /** Returns a specified API. */
  getApi(request: DeepPartial<GetApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Api>;
  /** Creates a specified API. */
  createApi(request: DeepPartial<CreateApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Api>;
  /** Used to modify a specified API. */
  updateApi(request: DeepPartial<UpdateApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Api>;
  /**
   * Removes a specified API and all of the resources that it
   * owns.
   */
  deleteApi(request: DeepPartial<DeleteApiRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Returns matching versions. */
  listApiVersions(
    request: DeepPartial<ListApiVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApiVersionsResponse>;
  /** Returns a specified version. */
  getApiVersion(
    request: DeepPartial<GetApiVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiVersion>;
  /** Creates a specified version. */
  createApiVersion(
    request: DeepPartial<CreateApiVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiVersion>;
  /** Used to modify a specified version. */
  updateApiVersion(
    request: DeepPartial<UpdateApiVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiVersion>;
  /**
   * Removes a specified version and all of the resources that
   * it owns.
   */
  deleteApiVersion(
    request: DeepPartial<DeleteApiVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Returns matching specs. */
  listApiSpecs(
    request: DeepPartial<ListApiSpecsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApiSpecsResponse>;
  /** Returns a specified spec. */
  getApiSpec(request: DeepPartial<GetApiSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<ApiSpec>;
  /**
   * Returns the contents of a specified spec.
   * If specs are stored with GZip compression, the default behavior
   * is to return the spec uncompressed (the mime_type response field
   * indicates the exact format returned).
   */
  getApiSpecContents(
    request: DeepPartial<GetApiSpecContentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpBody>;
  /** Creates a specified spec. */
  createApiSpec(request: DeepPartial<CreateApiSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<ApiSpec>;
  /** Used to modify a specified spec. */
  updateApiSpec(request: DeepPartial<UpdateApiSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<ApiSpec>;
  /**
   * Removes a specified spec, all revisions, and all child
   * resources (e.g., artifacts).
   */
  deleteApiSpec(request: DeepPartial<DeleteApiSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Adds a tag to a specified revision of a spec. */
  tagApiSpecRevision(
    request: DeepPartial<TagApiSpecRevisionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiSpec>;
  /**
   * Lists all revisions of a spec.
   * Revisions are returned in descending order of revision creation time.
   */
  listApiSpecRevisions(
    request: DeepPartial<ListApiSpecRevisionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApiSpecRevisionsResponse>;
  /**
   * Sets the current revision to a specified prior revision.
   * Note that this creates a new revision with a new revision ID.
   */
  rollbackApiSpec(
    request: DeepPartial<RollbackApiSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiSpec>;
  /** Deletes a revision of a spec. */
  deleteApiSpecRevision(
    request: DeepPartial<DeleteApiSpecRevisionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiSpec>;
  /** Returns matching deployments. */
  listApiDeployments(
    request: DeepPartial<ListApiDeploymentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApiDeploymentsResponse>;
  /** Returns a specified deployment. */
  getApiDeployment(
    request: DeepPartial<GetApiDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiDeployment>;
  /** Creates a specified deployment. */
  createApiDeployment(
    request: DeepPartial<CreateApiDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiDeployment>;
  /** Used to modify a specified deployment. */
  updateApiDeployment(
    request: DeepPartial<UpdateApiDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiDeployment>;
  /**
   * Removes a specified deployment, all revisions, and all
   * child resources (e.g., artifacts).
   */
  deleteApiDeployment(
    request: DeepPartial<DeleteApiDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Adds a tag to a specified revision of a
   * deployment.
   */
  tagApiDeploymentRevision(
    request: DeepPartial<TagApiDeploymentRevisionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiDeployment>;
  /**
   * Lists all revisions of a deployment.
   * Revisions are returned in descending order of revision creation time.
   */
  listApiDeploymentRevisions(
    request: DeepPartial<ListApiDeploymentRevisionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListApiDeploymentRevisionsResponse>;
  /**
   * Sets the current revision to a specified prior
   * revision. Note that this creates a new revision with a new revision ID.
   */
  rollbackApiDeployment(
    request: DeepPartial<RollbackApiDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiDeployment>;
  /** Deletes a revision of a deployment. */
  deleteApiDeploymentRevision(
    request: DeepPartial<DeleteApiDeploymentRevisionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiDeployment>;
  /** Returns matching artifacts. */
  listArtifacts(
    request: DeepPartial<ListArtifactsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListArtifactsResponse>;
  /** Returns a specified artifact. */
  getArtifact(request: DeepPartial<GetArtifactRequest>, options?: CallOptions & CallOptionsExt): Promise<Artifact>;
  /**
   * Returns the contents of a specified artifact.
   * If artifacts are stored with GZip compression, the default behavior
   * is to return the artifact uncompressed (the mime_type response field
   * indicates the exact format returned).
   */
  getArtifactContents(
    request: DeepPartial<GetArtifactContentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpBody>;
  /** Creates a specified artifact. */
  createArtifact(
    request: DeepPartial<CreateArtifactRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Artifact>;
  /** Used to replace a specified artifact. */
  replaceArtifact(
    request: DeepPartial<ReplaceArtifactRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Artifact>;
  /** Removes a specified artifact. */
  deleteArtifact(request: DeepPartial<DeleteArtifactRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
