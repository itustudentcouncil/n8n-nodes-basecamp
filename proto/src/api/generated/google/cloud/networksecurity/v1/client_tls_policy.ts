// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networksecurity/v1/client_tls_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { CertificateProvider, ValidationCA } from "./tls.js";

export const protobufPackage = "google.cloud.networksecurity.v1";

/**
 * ClientTlsPolicy is a resource that specifies how a client should authenticate
 * connections to backends of a service. This resource itself does not affect
 * configuration unless it is attached to a backend service resource.
 */
export interface ClientTlsPolicy {
  /**
   * Required. Name of the ClientTlsPolicy resource. It matches the pattern
   * `projects/* /locations/{location}/clientTlsPolicies/{client_tls_policy}`
   */
  name: string;
  /** Optional. Free-text description of the resource. */
  description: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Set of label tags associated with the resource. */
  labels: { [key: string]: string };
  /**
   * Optional. Server Name Indication string to present to the server during TLS
   * handshake. E.g: "secure.example.com".
   */
  sni: string;
  /**
   * Optional. Defines a mechanism to provision client identity (public and private keys)
   * for peer to peer authentication. The presence of this dictates mTLS.
   */
  clientCertificate:
    | CertificateProvider
    | undefined;
  /**
   * Optional. Defines the mechanism to obtain the Certificate Authority certificate to
   * validate the server certificate. If empty, client does not validate the
   * server certificate.
   */
  serverValidationCa: ValidationCA[];
}

export interface ClientTlsPolicy_LabelsEntry {
  key: string;
  value: string;
}

/** Request used by the ListClientTlsPolicies method. */
export interface ListClientTlsPoliciesRequest {
  /**
   * Required. The project and location from which the ClientTlsPolicies should
   * be listed, specified in the format `projects/* /locations/{location}`.
   */
  parent: string;
  /** Maximum number of ClientTlsPolicies to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListClientTlsPoliciesResponse`
   * Indicates that this is a continuation of a prior
   * `ListClientTlsPolicies` call, and that the system
   * should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListClientTlsPolicies method. */
export interface ListClientTlsPoliciesResponse {
  /** List of ClientTlsPolicy resources. */
  clientTlsPolicies: ClientTlsPolicy[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetClientTlsPolicy method. */
export interface GetClientTlsPolicyRequest {
  /**
   * Required. A name of the ClientTlsPolicy to get. Must be in the format
   * `projects/* /locations/{location}/clientTlsPolicies/*`.
   */
  name: string;
}

/** Request used by the CreateClientTlsPolicy method. */
export interface CreateClientTlsPolicyRequest {
  /**
   * Required. The parent resource of the ClientTlsPolicy. Must be in
   * the format `projects/* /locations/{location}`.
   */
  parent: string;
  /**
   * Required. Short name of the ClientTlsPolicy resource to be created. This value should
   * be 1-63 characters long, containing only letters, numbers, hyphens, and
   * underscores, and should not start with a number. E.g. "client_mtls_policy".
   */
  clientTlsPolicyId: string;
  /** Required. ClientTlsPolicy resource to be created. */
  clientTlsPolicy: ClientTlsPolicy | undefined;
}

/** Request used by UpdateClientTlsPolicy method. */
export interface UpdateClientTlsPolicyRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * ClientTlsPolicy resource by the update.  The fields
   * specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the
   * mask. If the user does not provide a mask then all fields will be
   * overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated ClientTlsPolicy resource. */
  clientTlsPolicy: ClientTlsPolicy | undefined;
}

/** Request used by the DeleteClientTlsPolicy method. */
export interface DeleteClientTlsPolicyRequest {
  /**
   * Required. A name of the ClientTlsPolicy to delete. Must be in
   * the format `projects/* /locations/{location}/clientTlsPolicies/*`.
   */
  name: string;
}

function createBaseClientTlsPolicy(): ClientTlsPolicy {
  return {
    name: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    sni: "",
    clientCertificate: undefined,
    serverValidationCa: [],
  };
}

export const ClientTlsPolicy: MessageFns<ClientTlsPolicy> = {
  encode(message: ClientTlsPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ClientTlsPolicy_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.sni !== "") {
      writer.uint32(50).string(message.sni);
    }
    if (message.clientCertificate !== undefined) {
      CertificateProvider.encode(message.clientCertificate, writer.uint32(58).fork()).join();
    }
    for (const v of message.serverValidationCa) {
      ValidationCA.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientTlsPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientTlsPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = ClientTlsPolicy_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sni = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.clientCertificate = CertificateProvider.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.serverValidationCa.push(ValidationCA.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientTlsPolicy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      sni: isSet(object.sni) ? globalThis.String(object.sni) : "",
      clientCertificate: isSet(object.clientCertificate)
        ? CertificateProvider.fromJSON(object.clientCertificate)
        : undefined,
      serverValidationCa: globalThis.Array.isArray(object?.serverValidationCa)
        ? object.serverValidationCa.map((e: any) => ValidationCA.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClientTlsPolicy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.sni !== "") {
      obj.sni = message.sni;
    }
    if (message.clientCertificate !== undefined) {
      obj.clientCertificate = CertificateProvider.toJSON(message.clientCertificate);
    }
    if (message.serverValidationCa?.length) {
      obj.serverValidationCa = message.serverValidationCa.map((e) => ValidationCA.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ClientTlsPolicy>): ClientTlsPolicy {
    return ClientTlsPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientTlsPolicy>): ClientTlsPolicy {
    const message = createBaseClientTlsPolicy();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.sni = object.sni ?? "";
    message.clientCertificate = (object.clientCertificate !== undefined && object.clientCertificate !== null)
      ? CertificateProvider.fromPartial(object.clientCertificate)
      : undefined;
    message.serverValidationCa = object.serverValidationCa?.map((e) => ValidationCA.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClientTlsPolicy_LabelsEntry(): ClientTlsPolicy_LabelsEntry {
  return { key: "", value: "" };
}

export const ClientTlsPolicy_LabelsEntry: MessageFns<ClientTlsPolicy_LabelsEntry> = {
  encode(message: ClientTlsPolicy_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientTlsPolicy_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientTlsPolicy_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientTlsPolicy_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ClientTlsPolicy_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientTlsPolicy_LabelsEntry>): ClientTlsPolicy_LabelsEntry {
    return ClientTlsPolicy_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientTlsPolicy_LabelsEntry>): ClientTlsPolicy_LabelsEntry {
    const message = createBaseClientTlsPolicy_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListClientTlsPoliciesRequest(): ListClientTlsPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListClientTlsPoliciesRequest: MessageFns<ListClientTlsPoliciesRequest> = {
  encode(message: ListClientTlsPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClientTlsPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClientTlsPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClientTlsPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListClientTlsPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClientTlsPoliciesRequest>): ListClientTlsPoliciesRequest {
    return ListClientTlsPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClientTlsPoliciesRequest>): ListClientTlsPoliciesRequest {
    const message = createBaseListClientTlsPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListClientTlsPoliciesResponse(): ListClientTlsPoliciesResponse {
  return { clientTlsPolicies: [], nextPageToken: "" };
}

export const ListClientTlsPoliciesResponse: MessageFns<ListClientTlsPoliciesResponse> = {
  encode(message: ListClientTlsPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clientTlsPolicies) {
      ClientTlsPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClientTlsPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClientTlsPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientTlsPolicies.push(ClientTlsPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClientTlsPoliciesResponse {
    return {
      clientTlsPolicies: globalThis.Array.isArray(object?.clientTlsPolicies)
        ? object.clientTlsPolicies.map((e: any) => ClientTlsPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListClientTlsPoliciesResponse): unknown {
    const obj: any = {};
    if (message.clientTlsPolicies?.length) {
      obj.clientTlsPolicies = message.clientTlsPolicies.map((e) => ClientTlsPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClientTlsPoliciesResponse>): ListClientTlsPoliciesResponse {
    return ListClientTlsPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClientTlsPoliciesResponse>): ListClientTlsPoliciesResponse {
    const message = createBaseListClientTlsPoliciesResponse();
    message.clientTlsPolicies = object.clientTlsPolicies?.map((e) => ClientTlsPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetClientTlsPolicyRequest(): GetClientTlsPolicyRequest {
  return { name: "" };
}

export const GetClientTlsPolicyRequest: MessageFns<GetClientTlsPolicyRequest> = {
  encode(message: GetClientTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClientTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClientTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClientTlsPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetClientTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetClientTlsPolicyRequest>): GetClientTlsPolicyRequest {
    return GetClientTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClientTlsPolicyRequest>): GetClientTlsPolicyRequest {
    const message = createBaseGetClientTlsPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateClientTlsPolicyRequest(): CreateClientTlsPolicyRequest {
  return { parent: "", clientTlsPolicyId: "", clientTlsPolicy: undefined };
}

export const CreateClientTlsPolicyRequest: MessageFns<CreateClientTlsPolicyRequest> = {
  encode(message: CreateClientTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.clientTlsPolicyId !== "") {
      writer.uint32(18).string(message.clientTlsPolicyId);
    }
    if (message.clientTlsPolicy !== undefined) {
      ClientTlsPolicy.encode(message.clientTlsPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientTlsPolicyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientTlsPolicy = ClientTlsPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClientTlsPolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      clientTlsPolicyId: isSet(object.clientTlsPolicyId) ? globalThis.String(object.clientTlsPolicyId) : "",
      clientTlsPolicy: isSet(object.clientTlsPolicy) ? ClientTlsPolicy.fromJSON(object.clientTlsPolicy) : undefined,
    };
  },

  toJSON(message: CreateClientTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.clientTlsPolicyId !== "") {
      obj.clientTlsPolicyId = message.clientTlsPolicyId;
    }
    if (message.clientTlsPolicy !== undefined) {
      obj.clientTlsPolicy = ClientTlsPolicy.toJSON(message.clientTlsPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClientTlsPolicyRequest>): CreateClientTlsPolicyRequest {
    return CreateClientTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClientTlsPolicyRequest>): CreateClientTlsPolicyRequest {
    const message = createBaseCreateClientTlsPolicyRequest();
    message.parent = object.parent ?? "";
    message.clientTlsPolicyId = object.clientTlsPolicyId ?? "";
    message.clientTlsPolicy = (object.clientTlsPolicy !== undefined && object.clientTlsPolicy !== null)
      ? ClientTlsPolicy.fromPartial(object.clientTlsPolicy)
      : undefined;
    return message;
  },
};

function createBaseUpdateClientTlsPolicyRequest(): UpdateClientTlsPolicyRequest {
  return { updateMask: undefined, clientTlsPolicy: undefined };
}

export const UpdateClientTlsPolicyRequest: MessageFns<UpdateClientTlsPolicyRequest> = {
  encode(message: UpdateClientTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.clientTlsPolicy !== undefined) {
      ClientTlsPolicy.encode(message.clientTlsPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClientTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClientTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientTlsPolicy = ClientTlsPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateClientTlsPolicyRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      clientTlsPolicy: isSet(object.clientTlsPolicy) ? ClientTlsPolicy.fromJSON(object.clientTlsPolicy) : undefined,
    };
  },

  toJSON(message: UpdateClientTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.clientTlsPolicy !== undefined) {
      obj.clientTlsPolicy = ClientTlsPolicy.toJSON(message.clientTlsPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateClientTlsPolicyRequest>): UpdateClientTlsPolicyRequest {
    return UpdateClientTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateClientTlsPolicyRequest>): UpdateClientTlsPolicyRequest {
    const message = createBaseUpdateClientTlsPolicyRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.clientTlsPolicy = (object.clientTlsPolicy !== undefined && object.clientTlsPolicy !== null)
      ? ClientTlsPolicy.fromPartial(object.clientTlsPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeleteClientTlsPolicyRequest(): DeleteClientTlsPolicyRequest {
  return { name: "" };
}

export const DeleteClientTlsPolicyRequest: MessageFns<DeleteClientTlsPolicyRequest> = {
  encode(message: DeleteClientTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClientTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClientTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClientTlsPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteClientTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClientTlsPolicyRequest>): DeleteClientTlsPolicyRequest {
    return DeleteClientTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClientTlsPolicyRequest>): DeleteClientTlsPolicyRequest {
    const message = createBaseDeleteClientTlsPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
