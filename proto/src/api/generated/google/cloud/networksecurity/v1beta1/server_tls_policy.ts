// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networksecurity/v1beta1/server_tls_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { CertificateProvider, ValidationCA } from "./tls.js";

export const protobufPackage = "google.cloud.networksecurity.v1beta1";

/**
 * ServerTlsPolicy is a resource that specifies how a server should authenticate
 * incoming requests. This resource itself does not affect configuration unless
 * it is attached to a target https proxy or endpoint config selector resource.
 */
export interface ServerTlsPolicy {
  /**
   * Required. Name of the ServerTlsPolicy resource. It matches the pattern
   * `projects/* /locations/{location}/serverTlsPolicies/{server_tls_policy}`
   */
  name: string;
  /** Free-text description of the resource. */
  description: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /** Set of label tags associated with the resource. */
  labels: { [key: string]: string };
  /**
   * Determines if server allows plaintext connections. If set to true, server
   * allows plain text connections. By default, it is set to false. This setting
   * is not exclusive of other encryption modes. For example, if `allow_open`
   * and `mtls_policy` are set, server allows both plain text and mTLS
   * connections. See documentation of other encryption modes to confirm
   * compatibility.
   *
   * Consider using it if you wish to upgrade in place your deployment to TLS
   * while having mixed TLS and non-TLS traffic reaching port :80.
   */
  allowOpen: boolean;
  /**
   * Defines a mechanism to provision server identity (public and private keys).
   * Cannot be combined with `allow_open` as a permissive mode that allows both
   * plain text and TLS is not supported.
   */
  serverCertificate:
    | CertificateProvider
    | undefined;
  /**
   * Defines a mechanism to provision peer validation certificates for peer to
   * peer authentication (Mutual TLS - mTLS). If not specified, client
   * certificate will not be requested. The connection is treated as TLS and not
   * mTLS. If `allow_open` and `mtls_policy` are set, server allows both plain
   * text and mTLS connections.
   */
  mtlsPolicy: ServerTlsPolicy_MTLSPolicy | undefined;
}

/** Specification of the MTLSPolicy. */
export interface ServerTlsPolicy_MTLSPolicy {
  /**
   * Defines the mechanism to obtain the Certificate Authority certificate to
   * validate the client certificate.
   */
  clientValidationCa: ValidationCA[];
}

export interface ServerTlsPolicy_LabelsEntry {
  key: string;
  value: string;
}

/** Request used by the ListServerTlsPolicies method. */
export interface ListServerTlsPoliciesRequest {
  /**
   * Required. The project and location from which the ServerTlsPolicies should
   * be listed, specified in the format `projects/* /locations/{location}`.
   */
  parent: string;
  /** Maximum number of ServerTlsPolicies to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListServerTlsPoliciesResponse`
   * Indicates that this is a continuation of a prior
   * `ListServerTlsPolicies` call, and that the system
   * should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListServerTlsPolicies method. */
export interface ListServerTlsPoliciesResponse {
  /** List of ServerTlsPolicy resources. */
  serverTlsPolicies: ServerTlsPolicy[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetServerTlsPolicy method. */
export interface GetServerTlsPolicyRequest {
  /**
   * Required. A name of the ServerTlsPolicy to get. Must be in the format
   * `projects/* /locations/{location}/serverTlsPolicies/*`.
   */
  name: string;
}

/** Request used by the CreateServerTlsPolicy method. */
export interface CreateServerTlsPolicyRequest {
  /**
   * Required. The parent resource of the ServerTlsPolicy. Must be in
   * the format `projects/* /locations/{location}`.
   */
  parent: string;
  /**
   * Required. Short name of the ServerTlsPolicy resource to be created. This
   * value should be 1-63 characters long, containing only letters, numbers,
   * hyphens, and underscores, and should not start with a number. E.g.
   * "server_mtls_policy".
   */
  serverTlsPolicyId: string;
  /** Required. ServerTlsPolicy resource to be created. */
  serverTlsPolicy: ServerTlsPolicy | undefined;
}

/** Request used by UpdateServerTlsPolicy method. */
export interface UpdateServerTlsPolicyRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * ServerTlsPolicy resource by the update.  The fields
   * specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the
   * mask. If the user does not provide a mask then all fields will be
   * overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated ServerTlsPolicy resource. */
  serverTlsPolicy: ServerTlsPolicy | undefined;
}

/** Request used by the DeleteServerTlsPolicy method. */
export interface DeleteServerTlsPolicyRequest {
  /**
   * Required. A name of the ServerTlsPolicy to delete. Must be in
   * the format `projects/* /locations/{location}/serverTlsPolicies/*`.
   */
  name: string;
}

function createBaseServerTlsPolicy(): ServerTlsPolicy {
  return {
    name: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    allowOpen: false,
    serverCertificate: undefined,
    mtlsPolicy: undefined,
  };
}

export const ServerTlsPolicy: MessageFns<ServerTlsPolicy> = {
  encode(message: ServerTlsPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ServerTlsPolicy_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.allowOpen !== false) {
      writer.uint32(48).bool(message.allowOpen);
    }
    if (message.serverCertificate !== undefined) {
      CertificateProvider.encode(message.serverCertificate, writer.uint32(58).fork()).join();
    }
    if (message.mtlsPolicy !== undefined) {
      ServerTlsPolicy_MTLSPolicy.encode(message.mtlsPolicy, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerTlsPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerTlsPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = ServerTlsPolicy_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.allowOpen = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.serverCertificate = CertificateProvider.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.mtlsPolicy = ServerTlsPolicy_MTLSPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerTlsPolicy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      allowOpen: isSet(object.allowOpen) ? globalThis.Boolean(object.allowOpen) : false,
      serverCertificate: isSet(object.serverCertificate)
        ? CertificateProvider.fromJSON(object.serverCertificate)
        : undefined,
      mtlsPolicy: isSet(object.mtlsPolicy) ? ServerTlsPolicy_MTLSPolicy.fromJSON(object.mtlsPolicy) : undefined,
    };
  },

  toJSON(message: ServerTlsPolicy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.allowOpen !== false) {
      obj.allowOpen = message.allowOpen;
    }
    if (message.serverCertificate !== undefined) {
      obj.serverCertificate = CertificateProvider.toJSON(message.serverCertificate);
    }
    if (message.mtlsPolicy !== undefined) {
      obj.mtlsPolicy = ServerTlsPolicy_MTLSPolicy.toJSON(message.mtlsPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<ServerTlsPolicy>): ServerTlsPolicy {
    return ServerTlsPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerTlsPolicy>): ServerTlsPolicy {
    const message = createBaseServerTlsPolicy();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.allowOpen = object.allowOpen ?? false;
    message.serverCertificate = (object.serverCertificate !== undefined && object.serverCertificate !== null)
      ? CertificateProvider.fromPartial(object.serverCertificate)
      : undefined;
    message.mtlsPolicy = (object.mtlsPolicy !== undefined && object.mtlsPolicy !== null)
      ? ServerTlsPolicy_MTLSPolicy.fromPartial(object.mtlsPolicy)
      : undefined;
    return message;
  },
};

function createBaseServerTlsPolicy_MTLSPolicy(): ServerTlsPolicy_MTLSPolicy {
  return { clientValidationCa: [] };
}

export const ServerTlsPolicy_MTLSPolicy: MessageFns<ServerTlsPolicy_MTLSPolicy> = {
  encode(message: ServerTlsPolicy_MTLSPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clientValidationCa) {
      ValidationCA.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerTlsPolicy_MTLSPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerTlsPolicy_MTLSPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientValidationCa.push(ValidationCA.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerTlsPolicy_MTLSPolicy {
    return {
      clientValidationCa: globalThis.Array.isArray(object?.clientValidationCa)
        ? object.clientValidationCa.map((e: any) => ValidationCA.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ServerTlsPolicy_MTLSPolicy): unknown {
    const obj: any = {};
    if (message.clientValidationCa?.length) {
      obj.clientValidationCa = message.clientValidationCa.map((e) => ValidationCA.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ServerTlsPolicy_MTLSPolicy>): ServerTlsPolicy_MTLSPolicy {
    return ServerTlsPolicy_MTLSPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerTlsPolicy_MTLSPolicy>): ServerTlsPolicy_MTLSPolicy {
    const message = createBaseServerTlsPolicy_MTLSPolicy();
    message.clientValidationCa = object.clientValidationCa?.map((e) => ValidationCA.fromPartial(e)) || [];
    return message;
  },
};

function createBaseServerTlsPolicy_LabelsEntry(): ServerTlsPolicy_LabelsEntry {
  return { key: "", value: "" };
}

export const ServerTlsPolicy_LabelsEntry: MessageFns<ServerTlsPolicy_LabelsEntry> = {
  encode(message: ServerTlsPolicy_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerTlsPolicy_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerTlsPolicy_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerTlsPolicy_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ServerTlsPolicy_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ServerTlsPolicy_LabelsEntry>): ServerTlsPolicy_LabelsEntry {
    return ServerTlsPolicy_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerTlsPolicy_LabelsEntry>): ServerTlsPolicy_LabelsEntry {
    const message = createBaseServerTlsPolicy_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListServerTlsPoliciesRequest(): ListServerTlsPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListServerTlsPoliciesRequest: MessageFns<ListServerTlsPoliciesRequest> = {
  encode(message: ListServerTlsPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServerTlsPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServerTlsPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServerTlsPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListServerTlsPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServerTlsPoliciesRequest>): ListServerTlsPoliciesRequest {
    return ListServerTlsPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServerTlsPoliciesRequest>): ListServerTlsPoliciesRequest {
    const message = createBaseListServerTlsPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListServerTlsPoliciesResponse(): ListServerTlsPoliciesResponse {
  return { serverTlsPolicies: [], nextPageToken: "" };
}

export const ListServerTlsPoliciesResponse: MessageFns<ListServerTlsPoliciesResponse> = {
  encode(message: ListServerTlsPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.serverTlsPolicies) {
      ServerTlsPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServerTlsPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServerTlsPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serverTlsPolicies.push(ServerTlsPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServerTlsPoliciesResponse {
    return {
      serverTlsPolicies: globalThis.Array.isArray(object?.serverTlsPolicies)
        ? object.serverTlsPolicies.map((e: any) => ServerTlsPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServerTlsPoliciesResponse): unknown {
    const obj: any = {};
    if (message.serverTlsPolicies?.length) {
      obj.serverTlsPolicies = message.serverTlsPolicies.map((e) => ServerTlsPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServerTlsPoliciesResponse>): ListServerTlsPoliciesResponse {
    return ListServerTlsPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServerTlsPoliciesResponse>): ListServerTlsPoliciesResponse {
    const message = createBaseListServerTlsPoliciesResponse();
    message.serverTlsPolicies = object.serverTlsPolicies?.map((e) => ServerTlsPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServerTlsPolicyRequest(): GetServerTlsPolicyRequest {
  return { name: "" };
}

export const GetServerTlsPolicyRequest: MessageFns<GetServerTlsPolicyRequest> = {
  encode(message: GetServerTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServerTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServerTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServerTlsPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServerTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServerTlsPolicyRequest>): GetServerTlsPolicyRequest {
    return GetServerTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServerTlsPolicyRequest>): GetServerTlsPolicyRequest {
    const message = createBaseGetServerTlsPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateServerTlsPolicyRequest(): CreateServerTlsPolicyRequest {
  return { parent: "", serverTlsPolicyId: "", serverTlsPolicy: undefined };
}

export const CreateServerTlsPolicyRequest: MessageFns<CreateServerTlsPolicyRequest> = {
  encode(message: CreateServerTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serverTlsPolicyId !== "") {
      writer.uint32(18).string(message.serverTlsPolicyId);
    }
    if (message.serverTlsPolicy !== undefined) {
      ServerTlsPolicy.encode(message.serverTlsPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServerTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServerTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serverTlsPolicyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serverTlsPolicy = ServerTlsPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServerTlsPolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serverTlsPolicyId: isSet(object.serverTlsPolicyId) ? globalThis.String(object.serverTlsPolicyId) : "",
      serverTlsPolicy: isSet(object.serverTlsPolicy) ? ServerTlsPolicy.fromJSON(object.serverTlsPolicy) : undefined,
    };
  },

  toJSON(message: CreateServerTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serverTlsPolicyId !== "") {
      obj.serverTlsPolicyId = message.serverTlsPolicyId;
    }
    if (message.serverTlsPolicy !== undefined) {
      obj.serverTlsPolicy = ServerTlsPolicy.toJSON(message.serverTlsPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServerTlsPolicyRequest>): CreateServerTlsPolicyRequest {
    return CreateServerTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServerTlsPolicyRequest>): CreateServerTlsPolicyRequest {
    const message = createBaseCreateServerTlsPolicyRequest();
    message.parent = object.parent ?? "";
    message.serverTlsPolicyId = object.serverTlsPolicyId ?? "";
    message.serverTlsPolicy = (object.serverTlsPolicy !== undefined && object.serverTlsPolicy !== null)
      ? ServerTlsPolicy.fromPartial(object.serverTlsPolicy)
      : undefined;
    return message;
  },
};

function createBaseUpdateServerTlsPolicyRequest(): UpdateServerTlsPolicyRequest {
  return { updateMask: undefined, serverTlsPolicy: undefined };
}

export const UpdateServerTlsPolicyRequest: MessageFns<UpdateServerTlsPolicyRequest> = {
  encode(message: UpdateServerTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.serverTlsPolicy !== undefined) {
      ServerTlsPolicy.encode(message.serverTlsPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServerTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServerTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serverTlsPolicy = ServerTlsPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServerTlsPolicyRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      serverTlsPolicy: isSet(object.serverTlsPolicy) ? ServerTlsPolicy.fromJSON(object.serverTlsPolicy) : undefined,
    };
  },

  toJSON(message: UpdateServerTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.serverTlsPolicy !== undefined) {
      obj.serverTlsPolicy = ServerTlsPolicy.toJSON(message.serverTlsPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServerTlsPolicyRequest>): UpdateServerTlsPolicyRequest {
    return UpdateServerTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServerTlsPolicyRequest>): UpdateServerTlsPolicyRequest {
    const message = createBaseUpdateServerTlsPolicyRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.serverTlsPolicy = (object.serverTlsPolicy !== undefined && object.serverTlsPolicy !== null)
      ? ServerTlsPolicy.fromPartial(object.serverTlsPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeleteServerTlsPolicyRequest(): DeleteServerTlsPolicyRequest {
  return { name: "" };
}

export const DeleteServerTlsPolicyRequest: MessageFns<DeleteServerTlsPolicyRequest> = {
  encode(message: DeleteServerTlsPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServerTlsPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServerTlsPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServerTlsPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteServerTlsPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServerTlsPolicyRequest>): DeleteServerTlsPolicyRequest {
    return DeleteServerTlsPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServerTlsPolicyRequest>): DeleteServerTlsPolicyRequest {
    const message = createBaseDeleteServerTlsPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
