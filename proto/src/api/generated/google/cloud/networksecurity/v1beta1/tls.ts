// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networksecurity/v1beta1/tls.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.networksecurity.v1beta1";

/** Specification of the GRPC Endpoint. */
export interface GrpcEndpoint {
  /**
   * Required. The target URI of the gRPC endpoint. Only UDS path is supported,
   * and should start with "unix:".
   */
  targetUri: string;
}

/**
 * Specification of ValidationCA. Defines the mechanism to obtain the
 * Certificate Authority certificate to validate the peer certificate.
 */
export interface ValidationCA {
  /**
   * gRPC specific configuration to access the gRPC server to
   * obtain the CA certificate.
   */
  grpcEndpoint?:
    | GrpcEndpoint
    | undefined;
  /**
   * The certificate provider instance specification that will be passed to
   * the data plane, which will be used to load necessary credential
   * information.
   */
  certificateProviderInstance?: CertificateProviderInstance | undefined;
}

/**
 * Specification of a TLS certificate provider instance. Workloads may have one
 * or more CertificateProvider instances (plugins) and one of them is enabled
 * and configured by specifying this message. Workloads use the values from this
 * message to locate and load the CertificateProvider instance configuration.
 */
export interface CertificateProviderInstance {
  /**
   * Required. Plugin instance name, used to locate and load CertificateProvider
   * instance configuration. Set to "google_cloud_private_spiffe" to use
   * Certificate Authority Service certificate provider instance.
   */
  pluginInstance: string;
}

/**
 * Specification of certificate provider. Defines the mechanism to obtain the
 * certificate and private key for peer to peer authentication.
 */
export interface CertificateProvider {
  /**
   * gRPC specific configuration to access the gRPC server to
   * obtain the cert and private key.
   */
  grpcEndpoint?:
    | GrpcEndpoint
    | undefined;
  /**
   * The certificate provider instance specification that will be passed to
   * the data plane, which will be used to load necessary credential
   * information.
   */
  certificateProviderInstance?: CertificateProviderInstance | undefined;
}

function createBaseGrpcEndpoint(): GrpcEndpoint {
  return { targetUri: "" };
}

export const GrpcEndpoint: MessageFns<GrpcEndpoint> = {
  encode(message: GrpcEndpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetUri !== "") {
      writer.uint32(10).string(message.targetUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcEndpoint {
    return { targetUri: isSet(object.targetUri) ? globalThis.String(object.targetUri) : "" };
  },

  toJSON(message: GrpcEndpoint): unknown {
    const obj: any = {};
    if (message.targetUri !== "") {
      obj.targetUri = message.targetUri;
    }
    return obj;
  },

  create(base?: DeepPartial<GrpcEndpoint>): GrpcEndpoint {
    return GrpcEndpoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GrpcEndpoint>): GrpcEndpoint {
    const message = createBaseGrpcEndpoint();
    message.targetUri = object.targetUri ?? "";
    return message;
  },
};

function createBaseValidationCA(): ValidationCA {
  return { grpcEndpoint: undefined, certificateProviderInstance: undefined };
}

export const ValidationCA: MessageFns<ValidationCA> = {
  encode(message: ValidationCA, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpcEndpoint !== undefined) {
      GrpcEndpoint.encode(message.grpcEndpoint, writer.uint32(18).fork()).join();
    }
    if (message.certificateProviderInstance !== undefined) {
      CertificateProviderInstance.encode(message.certificateProviderInstance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationCA {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationCA();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grpcEndpoint = GrpcEndpoint.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.certificateProviderInstance = CertificateProviderInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationCA {
    return {
      grpcEndpoint: isSet(object.grpcEndpoint) ? GrpcEndpoint.fromJSON(object.grpcEndpoint) : undefined,
      certificateProviderInstance: isSet(object.certificateProviderInstance)
        ? CertificateProviderInstance.fromJSON(object.certificateProviderInstance)
        : undefined,
    };
  },

  toJSON(message: ValidationCA): unknown {
    const obj: any = {};
    if (message.grpcEndpoint !== undefined) {
      obj.grpcEndpoint = GrpcEndpoint.toJSON(message.grpcEndpoint);
    }
    if (message.certificateProviderInstance !== undefined) {
      obj.certificateProviderInstance = CertificateProviderInstance.toJSON(message.certificateProviderInstance);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationCA>): ValidationCA {
    return ValidationCA.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationCA>): ValidationCA {
    const message = createBaseValidationCA();
    message.grpcEndpoint = (object.grpcEndpoint !== undefined && object.grpcEndpoint !== null)
      ? GrpcEndpoint.fromPartial(object.grpcEndpoint)
      : undefined;
    message.certificateProviderInstance =
      (object.certificateProviderInstance !== undefined && object.certificateProviderInstance !== null)
        ? CertificateProviderInstance.fromPartial(object.certificateProviderInstance)
        : undefined;
    return message;
  },
};

function createBaseCertificateProviderInstance(): CertificateProviderInstance {
  return { pluginInstance: "" };
}

export const CertificateProviderInstance: MessageFns<CertificateProviderInstance> = {
  encode(message: CertificateProviderInstance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pluginInstance !== "") {
      writer.uint32(10).string(message.pluginInstance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateProviderInstance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateProviderInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pluginInstance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateProviderInstance {
    return { pluginInstance: isSet(object.pluginInstance) ? globalThis.String(object.pluginInstance) : "" };
  },

  toJSON(message: CertificateProviderInstance): unknown {
    const obj: any = {};
    if (message.pluginInstance !== "") {
      obj.pluginInstance = message.pluginInstance;
    }
    return obj;
  },

  create(base?: DeepPartial<CertificateProviderInstance>): CertificateProviderInstance {
    return CertificateProviderInstance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CertificateProviderInstance>): CertificateProviderInstance {
    const message = createBaseCertificateProviderInstance();
    message.pluginInstance = object.pluginInstance ?? "";
    return message;
  },
};

function createBaseCertificateProvider(): CertificateProvider {
  return { grpcEndpoint: undefined, certificateProviderInstance: undefined };
}

export const CertificateProvider: MessageFns<CertificateProvider> = {
  encode(message: CertificateProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpcEndpoint !== undefined) {
      GrpcEndpoint.encode(message.grpcEndpoint, writer.uint32(18).fork()).join();
    }
    if (message.certificateProviderInstance !== undefined) {
      CertificateProviderInstance.encode(message.certificateProviderInstance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grpcEndpoint = GrpcEndpoint.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.certificateProviderInstance = CertificateProviderInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateProvider {
    return {
      grpcEndpoint: isSet(object.grpcEndpoint) ? GrpcEndpoint.fromJSON(object.grpcEndpoint) : undefined,
      certificateProviderInstance: isSet(object.certificateProviderInstance)
        ? CertificateProviderInstance.fromJSON(object.certificateProviderInstance)
        : undefined,
    };
  },

  toJSON(message: CertificateProvider): unknown {
    const obj: any = {};
    if (message.grpcEndpoint !== undefined) {
      obj.grpcEndpoint = GrpcEndpoint.toJSON(message.grpcEndpoint);
    }
    if (message.certificateProviderInstance !== undefined) {
      obj.certificateProviderInstance = CertificateProviderInstance.toJSON(message.certificateProviderInstance);
    }
    return obj;
  },

  create(base?: DeepPartial<CertificateProvider>): CertificateProvider {
    return CertificateProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CertificateProvider>): CertificateProvider {
    const message = createBaseCertificateProvider();
    message.grpcEndpoint = (object.grpcEndpoint !== undefined && object.grpcEndpoint !== null)
      ? GrpcEndpoint.fromPartial(object.grpcEndpoint)
      : undefined;
    message.certificateProviderInstance =
      (object.certificateProviderInstance !== undefined && object.certificateProviderInstance !== null)
        ? CertificateProviderInstance.fromPartial(object.certificateProviderInstance)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
