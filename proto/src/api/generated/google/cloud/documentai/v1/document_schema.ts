// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/documentai/v1/document_schema.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.documentai.v1";

/** The schema defines the output of the processed document by a processor. */
export interface DocumentSchema {
  /** Display name to show to users. */
  displayName: string;
  /** Description of the schema. */
  description: string;
  /** Entity types of the schema. */
  entityTypes: DocumentSchema_EntityType[];
  /** Metadata of the schema. */
  metadata: DocumentSchema_Metadata | undefined;
}

/**
 * EntityType is the wrapper of a label of the corresponding model with
 * detailed attributes and limitations for entity-based processors. Multiple
 * types can also compose a dependency tree to represent nested types.
 */
export interface DocumentSchema_EntityType {
  /**
   * If specified, lists all the possible values for this entity.  This
   * should not be more than a handful of values.  If the number of values
   * is >10 or could change frequently use the `EntityType.value_ontology`
   * field and specify a list of all possible values in a value ontology
   * file.
   */
  enumValues?:
    | DocumentSchema_EntityType_EnumValues
    | undefined;
  /** User defined name for the type. */
  displayName: string;
  /**
   * Name of the type. It must be unique within the schema file and
   * cannot be a "Common Type".  The following naming conventions are used:
   *
   * - Use `snake_casing`.
   * - Name matching is case-sensitive.
   * - Maximum 64 characters.
   * - Must start with a letter.
   * - Allowed characters: ASCII letters `[a-z0-9_-]`.  (For backward
   *   compatibility internal infrastructure and tooling can handle any ascii
   *   character.)
   * - The `/` is sometimes used to denote a property of a type.  For example
   *   `line_item/amount`.  This convention is deprecated, but will still be
   *   honored for backward compatibility.
   */
  name: string;
  /**
   * The entity type that this type is derived from.  For now, one and only
   * one should be set.
   */
  baseTypes: string[];
  /** Description the nested structure, or composition of an entity. */
  properties: DocumentSchema_EntityType_Property[];
}

/** Defines the a list of enum values. */
export interface DocumentSchema_EntityType_EnumValues {
  /** The individual values that this enum values type can include. */
  values: string[];
}

/** Defines properties that can be part of the entity type. */
export interface DocumentSchema_EntityType_Property {
  /**
   * The name of the property.  Follows the same guidelines as the
   * EntityType name.
   */
  name: string;
  /** User defined name for the property. */
  displayName: string;
  /**
   * A reference to the value type of the property.  This type is subject
   * to the same conventions as the `Entity.base_types` field.
   */
  valueType: string;
  /**
   * Occurrence type limits the number of instances an entity type appears
   * in the document.
   */
  occurrenceType: DocumentSchema_EntityType_Property_OccurrenceType;
}

/**
 * Types of occurrences of the entity type in the document.  This
 * represents the number of instances, not mentions, of an entity.
 * For example, a bank statement might only have one
 * `account_number`, but this account number can be mentioned in several
 * places on the document.  In this case, the `account_number` is
 * considered a `REQUIRED_ONCE` entity type. If, on the other hand, we
 * expect a bank statement to contain the status of multiple different
 * accounts for the customers, the occurrence type is set to
 * `REQUIRED_MULTIPLE`.
 */
export enum DocumentSchema_EntityType_Property_OccurrenceType {
  /** OCCURRENCE_TYPE_UNSPECIFIED - Unspecified occurrence type. */
  OCCURRENCE_TYPE_UNSPECIFIED = 0,
  /**
   * OPTIONAL_ONCE - There will be zero or one instance of this entity type.  The same
   * entity instance may be mentioned multiple times.
   */
  OPTIONAL_ONCE = 1,
  /** OPTIONAL_MULTIPLE - The entity type will appear zero or multiple times. */
  OPTIONAL_MULTIPLE = 2,
  /**
   * REQUIRED_ONCE - The entity type will only appear exactly once.  The same
   * entity instance may be mentioned multiple times.
   */
  REQUIRED_ONCE = 3,
  /** REQUIRED_MULTIPLE - The entity type will appear once or more times. */
  REQUIRED_MULTIPLE = 4,
  UNRECOGNIZED = -1,
}

export function documentSchema_EntityType_Property_OccurrenceTypeFromJSON(
  object: any,
): DocumentSchema_EntityType_Property_OccurrenceType {
  switch (object) {
    case 0:
    case "OCCURRENCE_TYPE_UNSPECIFIED":
      return DocumentSchema_EntityType_Property_OccurrenceType.OCCURRENCE_TYPE_UNSPECIFIED;
    case 1:
    case "OPTIONAL_ONCE":
      return DocumentSchema_EntityType_Property_OccurrenceType.OPTIONAL_ONCE;
    case 2:
    case "OPTIONAL_MULTIPLE":
      return DocumentSchema_EntityType_Property_OccurrenceType.OPTIONAL_MULTIPLE;
    case 3:
    case "REQUIRED_ONCE":
      return DocumentSchema_EntityType_Property_OccurrenceType.REQUIRED_ONCE;
    case 4:
    case "REQUIRED_MULTIPLE":
      return DocumentSchema_EntityType_Property_OccurrenceType.REQUIRED_MULTIPLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DocumentSchema_EntityType_Property_OccurrenceType.UNRECOGNIZED;
  }
}

export function documentSchema_EntityType_Property_OccurrenceTypeToJSON(
  object: DocumentSchema_EntityType_Property_OccurrenceType,
): string {
  switch (object) {
    case DocumentSchema_EntityType_Property_OccurrenceType.OCCURRENCE_TYPE_UNSPECIFIED:
      return "OCCURRENCE_TYPE_UNSPECIFIED";
    case DocumentSchema_EntityType_Property_OccurrenceType.OPTIONAL_ONCE:
      return "OPTIONAL_ONCE";
    case DocumentSchema_EntityType_Property_OccurrenceType.OPTIONAL_MULTIPLE:
      return "OPTIONAL_MULTIPLE";
    case DocumentSchema_EntityType_Property_OccurrenceType.REQUIRED_ONCE:
      return "REQUIRED_ONCE";
    case DocumentSchema_EntityType_Property_OccurrenceType.REQUIRED_MULTIPLE:
      return "REQUIRED_MULTIPLE";
    case DocumentSchema_EntityType_Property_OccurrenceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata for global schema behavior. */
export interface DocumentSchema_Metadata {
  /**
   * If true, a `document` entity type can be applied to subdocument
   * (splitting). Otherwise, it can only be applied to the entire document
   * (classification).
   */
  documentSplitter: boolean;
  /**
   * If true, on a given page, there can be multiple `document` annotations
   * covering it.
   */
  documentAllowMultipleLabels: boolean;
  /** If set, all the nested entities must be prefixed with the parents. */
  prefixedNamingOnProperties: boolean;
  /**
   * If set, we will skip the naming format validation in the schema. So the
   * string values in `DocumentSchema.EntityType.name` and
   * `DocumentSchema.EntityType.Property.name` will not be checked.
   */
  skipNamingValidation: boolean;
}

function createBaseDocumentSchema(): DocumentSchema {
  return { displayName: "", description: "", entityTypes: [], metadata: undefined };
}

export const DocumentSchema: MessageFns<DocumentSchema> = {
  encode(message: DocumentSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.entityTypes) {
      DocumentSchema_EntityType.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      DocumentSchema_Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entityTypes.push(DocumentSchema_EntityType.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = DocumentSchema_Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentSchema {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      entityTypes: globalThis.Array.isArray(object?.entityTypes)
        ? object.entityTypes.map((e: any) => DocumentSchema_EntityType.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? DocumentSchema_Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: DocumentSchema): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.entityTypes?.length) {
      obj.entityTypes = message.entityTypes.map((e) => DocumentSchema_EntityType.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = DocumentSchema_Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentSchema>): DocumentSchema {
    return DocumentSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentSchema>): DocumentSchema {
    const message = createBaseDocumentSchema();
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.entityTypes = object.entityTypes?.map((e) => DocumentSchema_EntityType.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? DocumentSchema_Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseDocumentSchema_EntityType(): DocumentSchema_EntityType {
  return { enumValues: undefined, displayName: "", name: "", baseTypes: [], properties: [] };
}

export const DocumentSchema_EntityType: MessageFns<DocumentSchema_EntityType> = {
  encode(message: DocumentSchema_EntityType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enumValues !== undefined) {
      DocumentSchema_EntityType_EnumValues.encode(message.enumValues, writer.uint32(114).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(106).string(message.displayName);
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.baseTypes) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.properties) {
      DocumentSchema_EntityType_Property.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentSchema_EntityType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentSchema_EntityType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 14:
          if (tag !== 114) {
            break;
          }

          message.enumValues = DocumentSchema_EntityType_EnumValues.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.baseTypes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.properties.push(DocumentSchema_EntityType_Property.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentSchema_EntityType {
    return {
      enumValues: isSet(object.enumValues)
        ? DocumentSchema_EntityType_EnumValues.fromJSON(object.enumValues)
        : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      baseTypes: globalThis.Array.isArray(object?.baseTypes)
        ? object.baseTypes.map((e: any) => globalThis.String(e))
        : [],
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => DocumentSchema_EntityType_Property.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DocumentSchema_EntityType): unknown {
    const obj: any = {};
    if (message.enumValues !== undefined) {
      obj.enumValues = DocumentSchema_EntityType_EnumValues.toJSON(message.enumValues);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.baseTypes?.length) {
      obj.baseTypes = message.baseTypes;
    }
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => DocumentSchema_EntityType_Property.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentSchema_EntityType>): DocumentSchema_EntityType {
    return DocumentSchema_EntityType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentSchema_EntityType>): DocumentSchema_EntityType {
    const message = createBaseDocumentSchema_EntityType();
    message.enumValues = (object.enumValues !== undefined && object.enumValues !== null)
      ? DocumentSchema_EntityType_EnumValues.fromPartial(object.enumValues)
      : undefined;
    message.displayName = object.displayName ?? "";
    message.name = object.name ?? "";
    message.baseTypes = object.baseTypes?.map((e) => e) || [];
    message.properties = object.properties?.map((e) => DocumentSchema_EntityType_Property.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDocumentSchema_EntityType_EnumValues(): DocumentSchema_EntityType_EnumValues {
  return { values: [] };
}

export const DocumentSchema_EntityType_EnumValues: MessageFns<DocumentSchema_EntityType_EnumValues> = {
  encode(message: DocumentSchema_EntityType_EnumValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentSchema_EntityType_EnumValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentSchema_EntityType_EnumValues();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentSchema_EntityType_EnumValues {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: DocumentSchema_EntityType_EnumValues): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentSchema_EntityType_EnumValues>): DocumentSchema_EntityType_EnumValues {
    return DocumentSchema_EntityType_EnumValues.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentSchema_EntityType_EnumValues>): DocumentSchema_EntityType_EnumValues {
    const message = createBaseDocumentSchema_EntityType_EnumValues();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseDocumentSchema_EntityType_Property(): DocumentSchema_EntityType_Property {
  return { name: "", displayName: "", valueType: "", occurrenceType: 0 };
}

export const DocumentSchema_EntityType_Property: MessageFns<DocumentSchema_EntityType_Property> = {
  encode(message: DocumentSchema_EntityType_Property, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    if (message.valueType !== "") {
      writer.uint32(18).string(message.valueType);
    }
    if (message.occurrenceType !== 0) {
      writer.uint32(24).int32(message.occurrenceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentSchema_EntityType_Property {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentSchema_EntityType_Property();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valueType = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.occurrenceType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentSchema_EntityType_Property {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      valueType: isSet(object.valueType) ? globalThis.String(object.valueType) : "",
      occurrenceType: isSet(object.occurrenceType)
        ? documentSchema_EntityType_Property_OccurrenceTypeFromJSON(object.occurrenceType)
        : 0,
    };
  },

  toJSON(message: DocumentSchema_EntityType_Property): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.valueType !== "") {
      obj.valueType = message.valueType;
    }
    if (message.occurrenceType !== 0) {
      obj.occurrenceType = documentSchema_EntityType_Property_OccurrenceTypeToJSON(message.occurrenceType);
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentSchema_EntityType_Property>): DocumentSchema_EntityType_Property {
    return DocumentSchema_EntityType_Property.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentSchema_EntityType_Property>): DocumentSchema_EntityType_Property {
    const message = createBaseDocumentSchema_EntityType_Property();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.valueType = object.valueType ?? "";
    message.occurrenceType = object.occurrenceType ?? 0;
    return message;
  },
};

function createBaseDocumentSchema_Metadata(): DocumentSchema_Metadata {
  return {
    documentSplitter: false,
    documentAllowMultipleLabels: false,
    prefixedNamingOnProperties: false,
    skipNamingValidation: false,
  };
}

export const DocumentSchema_Metadata: MessageFns<DocumentSchema_Metadata> = {
  encode(message: DocumentSchema_Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.documentSplitter !== false) {
      writer.uint32(8).bool(message.documentSplitter);
    }
    if (message.documentAllowMultipleLabels !== false) {
      writer.uint32(16).bool(message.documentAllowMultipleLabels);
    }
    if (message.prefixedNamingOnProperties !== false) {
      writer.uint32(48).bool(message.prefixedNamingOnProperties);
    }
    if (message.skipNamingValidation !== false) {
      writer.uint32(56).bool(message.skipNamingValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentSchema_Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentSchema_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.documentSplitter = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.documentAllowMultipleLabels = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.prefixedNamingOnProperties = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.skipNamingValidation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentSchema_Metadata {
    return {
      documentSplitter: isSet(object.documentSplitter) ? globalThis.Boolean(object.documentSplitter) : false,
      documentAllowMultipleLabels: isSet(object.documentAllowMultipleLabels)
        ? globalThis.Boolean(object.documentAllowMultipleLabels)
        : false,
      prefixedNamingOnProperties: isSet(object.prefixedNamingOnProperties)
        ? globalThis.Boolean(object.prefixedNamingOnProperties)
        : false,
      skipNamingValidation: isSet(object.skipNamingValidation)
        ? globalThis.Boolean(object.skipNamingValidation)
        : false,
    };
  },

  toJSON(message: DocumentSchema_Metadata): unknown {
    const obj: any = {};
    if (message.documentSplitter !== false) {
      obj.documentSplitter = message.documentSplitter;
    }
    if (message.documentAllowMultipleLabels !== false) {
      obj.documentAllowMultipleLabels = message.documentAllowMultipleLabels;
    }
    if (message.prefixedNamingOnProperties !== false) {
      obj.prefixedNamingOnProperties = message.prefixedNamingOnProperties;
    }
    if (message.skipNamingValidation !== false) {
      obj.skipNamingValidation = message.skipNamingValidation;
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentSchema_Metadata>): DocumentSchema_Metadata {
    return DocumentSchema_Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentSchema_Metadata>): DocumentSchema_Metadata {
    const message = createBaseDocumentSchema_Metadata();
    message.documentSplitter = object.documentSplitter ?? false;
    message.documentAllowMultipleLabels = object.documentAllowMultipleLabels ?? false;
    message.prefixedNamingOnProperties = object.prefixedNamingOnProperties ?? false;
    message.skipNamingValidation = object.skipNamingValidation ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
