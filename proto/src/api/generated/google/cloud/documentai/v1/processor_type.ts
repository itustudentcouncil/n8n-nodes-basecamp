// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/documentai/v1/processor_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LaunchStage, launchStageFromJSON, launchStageToJSON } from "../../../api/launch_stage.js";

export const protobufPackage = "google.cloud.documentai.v1";

/**
 * A processor type is responsible for performing a certain document
 * understanding task on a certain type of document.
 */
export interface ProcessorType {
  /**
   * The resource name of the processor type.
   * Format: `projects/{project}/processorTypes/{processor_type}`
   */
  name: string;
  /** The processor type, such as: `OCR_PROCESSOR`, `INVOICE_PROCESSOR`. */
  type: string;
  /** The processor category, used by UI to group processor types. */
  category: string;
  /** The locations in which this processor is available. */
  availableLocations: ProcessorType_LocationInfo[];
  /**
   * Whether the processor type allows creation. If true, users can create a
   * processor of this processor type. Otherwise, users need to request access.
   */
  allowCreation: boolean;
  /** Launch stage of the processor type */
  launchStage: LaunchStage;
  /** A set of Cloud Storage URIs of sample documents for this processor. */
  sampleDocumentUris: string[];
}

/** The location information about where the processor is available. */
export interface ProcessorType_LocationInfo {
  /**
   * The location ID. For supported locations, refer to [regional and
   * multi-regional support](/document-ai/docs/regions).
   */
  locationId: string;
}

function createBaseProcessorType(): ProcessorType {
  return {
    name: "",
    type: "",
    category: "",
    availableLocations: [],
    allowCreation: false,
    launchStage: 0,
    sampleDocumentUris: [],
  };
}

export const ProcessorType: MessageFns<ProcessorType> = {
  encode(message: ProcessorType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.category !== "") {
      writer.uint32(26).string(message.category);
    }
    for (const v of message.availableLocations) {
      ProcessorType_LocationInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.allowCreation !== false) {
      writer.uint32(48).bool(message.allowCreation);
    }
    if (message.launchStage !== 0) {
      writer.uint32(64).int32(message.launchStage);
    }
    for (const v of message.sampleDocumentUris) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessorType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessorType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.category = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.availableLocations.push(ProcessorType_LocationInfo.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.allowCreation = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.launchStage = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sampleDocumentUris.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessorType {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      availableLocations: globalThis.Array.isArray(object?.availableLocations)
        ? object.availableLocations.map((e: any) => ProcessorType_LocationInfo.fromJSON(e))
        : [],
      allowCreation: isSet(object.allowCreation) ? globalThis.Boolean(object.allowCreation) : false,
      launchStage: isSet(object.launchStage) ? launchStageFromJSON(object.launchStage) : 0,
      sampleDocumentUris: globalThis.Array.isArray(object?.sampleDocumentUris)
        ? object.sampleDocumentUris.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ProcessorType): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.availableLocations?.length) {
      obj.availableLocations = message.availableLocations.map((e) => ProcessorType_LocationInfo.toJSON(e));
    }
    if (message.allowCreation !== false) {
      obj.allowCreation = message.allowCreation;
    }
    if (message.launchStage !== 0) {
      obj.launchStage = launchStageToJSON(message.launchStage);
    }
    if (message.sampleDocumentUris?.length) {
      obj.sampleDocumentUris = message.sampleDocumentUris;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessorType>): ProcessorType {
    return ProcessorType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessorType>): ProcessorType {
    const message = createBaseProcessorType();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.category = object.category ?? "";
    message.availableLocations = object.availableLocations?.map((e) => ProcessorType_LocationInfo.fromPartial(e)) || [];
    message.allowCreation = object.allowCreation ?? false;
    message.launchStage = object.launchStage ?? 0;
    message.sampleDocumentUris = object.sampleDocumentUris?.map((e) => e) || [];
    return message;
  },
};

function createBaseProcessorType_LocationInfo(): ProcessorType_LocationInfo {
  return { locationId: "" };
}

export const ProcessorType_LocationInfo: MessageFns<ProcessorType_LocationInfo> = {
  encode(message: ProcessorType_LocationInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationId !== "") {
      writer.uint32(10).string(message.locationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessorType_LocationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessorType_LocationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessorType_LocationInfo {
    return { locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "" };
  },

  toJSON(message: ProcessorType_LocationInfo): unknown {
    const obj: any = {};
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessorType_LocationInfo>): ProcessorType_LocationInfo {
    return ProcessorType_LocationInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessorType_LocationInfo>): ProcessorType_LocationInfo {
    const message = createBaseProcessorType_LocationInfo();
    message.locationId = object.locationId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
