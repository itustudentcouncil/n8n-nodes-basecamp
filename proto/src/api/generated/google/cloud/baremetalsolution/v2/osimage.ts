// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/baremetalsolution/v2/osimage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.baremetalsolution.v2";

/** Operation System image. */
export interface OSImage {
  /** Output only. OS Image's unique name. */
  name: string;
  /** OS Image code. */
  code: string;
  /** OS Image description. */
  description: string;
  /**
   * Instance types this image is applicable to.
   * [Available
   * types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   */
  applicableInstanceTypes: string[];
  /** Network templates that can be used with this OS Image. */
  supportedNetworkTemplates: string[];
}

/** Request for getting all available OS images. */
export interface ListOSImagesRequest {
  /** Required. Parent value for ListProvisioningQuotasRequest. */
  parent: string;
  /**
   * Requested page size. The server might return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   * Notice that page_size field is not supported and won't be respected in
   * the API request for now, will be updated when pagination is supported.
   */
  pageSize: number;
  /** A token identifying a page of results from the server. */
  pageToken: string;
}

/** Request for getting all available OS images. */
export interface ListOSImagesResponse {
  /** The OS images available. */
  osImages: OSImage[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

function createBaseOSImage(): OSImage {
  return { name: "", code: "", description: "", applicableInstanceTypes: [], supportedNetworkTemplates: [] };
}

export const OSImage: MessageFns<OSImage> = {
  encode(message: OSImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.applicableInstanceTypes) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.supportedNetworkTemplates) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OSImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOSImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.applicableInstanceTypes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.supportedNetworkTemplates.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OSImage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      applicableInstanceTypes: globalThis.Array.isArray(object?.applicableInstanceTypes)
        ? object.applicableInstanceTypes.map((e: any) => globalThis.String(e))
        : [],
      supportedNetworkTemplates: globalThis.Array.isArray(object?.supportedNetworkTemplates)
        ? object.supportedNetworkTemplates.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: OSImage): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.applicableInstanceTypes?.length) {
      obj.applicableInstanceTypes = message.applicableInstanceTypes;
    }
    if (message.supportedNetworkTemplates?.length) {
      obj.supportedNetworkTemplates = message.supportedNetworkTemplates;
    }
    return obj;
  },

  create(base?: DeepPartial<OSImage>): OSImage {
    return OSImage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OSImage>): OSImage {
    const message = createBaseOSImage();
    message.name = object.name ?? "";
    message.code = object.code ?? "";
    message.description = object.description ?? "";
    message.applicableInstanceTypes = object.applicableInstanceTypes?.map((e) => e) || [];
    message.supportedNetworkTemplates = object.supportedNetworkTemplates?.map((e) => e) || [];
    return message;
  },
};

function createBaseListOSImagesRequest(): ListOSImagesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListOSImagesRequest: MessageFns<ListOSImagesRequest> = {
  encode(message: ListOSImagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOSImagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOSImagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOSImagesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListOSImagesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOSImagesRequest>): ListOSImagesRequest {
    return ListOSImagesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOSImagesRequest>): ListOSImagesRequest {
    const message = createBaseListOSImagesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListOSImagesResponse(): ListOSImagesResponse {
  return { osImages: [], nextPageToken: "" };
}

export const ListOSImagesResponse: MessageFns<ListOSImagesResponse> = {
  encode(message: ListOSImagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.osImages) {
      OSImage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOSImagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOSImagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.osImages.push(OSImage.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOSImagesResponse {
    return {
      osImages: globalThis.Array.isArray(object?.osImages) ? object.osImages.map((e: any) => OSImage.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListOSImagesResponse): unknown {
    const obj: any = {};
    if (message.osImages?.length) {
      obj.osImages = message.osImages.map((e) => OSImage.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOSImagesResponse>): ListOSImagesResponse {
    return ListOSImagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOSImagesResponse>): ListOSImagesResponse {
    const message = createBaseListOSImagesResponse();
    message.osImages = object.osImages?.map((e) => OSImage.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
