// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/secretmanager/logging/v1/secret_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.secretmanager.logging.v1";

/** Logged event relating to a specific secret */
export interface SecretEvent {
  /** Resource name of the secret in the format `projects/* /secrets/*` */
  name: string;
  /** Type of event that is being logged for the secret */
  type: SecretEvent_EventType;
  /** Human readable message describing the event */
  logMessage: string;
}

/**
 * Describes the type of event that is being logged. All logs have exactly one
 * EventType.
 */
export enum SecretEvent_EventType {
  /** EVENT_TYPE_UNSPECIFIED - An unrecognized event type. Should never be used. */
  EVENT_TYPE_UNSPECIFIED = 0,
  /** EXPIRES_IN_30_DAYS - The secret is scheduled to expire in 30 days. */
  EXPIRES_IN_30_DAYS = 1,
  /** EXPIRES_IN_7_DAYS - The secret is scheduled to expire in 7 days. */
  EXPIRES_IN_7_DAYS = 2,
  /** EXPIRES_IN_1_DAY - The secret is scheduled to expire in 1 day. */
  EXPIRES_IN_1_DAY = 3,
  /** EXPIRES_IN_6_HOURS - The secret is scheduled to expire in 6 hours. */
  EXPIRES_IN_6_HOURS = 4,
  /** EXPIRES_IN_1_HOUR - The secret is scheduled to expire in 1 hour. */
  EXPIRES_IN_1_HOUR = 5,
  /** EXPIRED - The secret's expire-time has passed and it has expired. */
  EXPIRED = 6,
  /** TOPIC_NOT_FOUND - A Pub/Sub topic configured on the secret could not be found. */
  TOPIC_NOT_FOUND = 7,
  /**
   * TOPIC_PERMISSION_DENIED - A Pub/Sub topic configured on the secret does not have the needed
   * permissions. The Secret Manager P4SA must be granted
   * 'pubsub.topic.publish' permission (or 'roles/pubsub.publisher') on the
   * topic.
   */
  TOPIC_PERMISSION_DENIED = 8,
  UNRECOGNIZED = -1,
}

export function secretEvent_EventTypeFromJSON(object: any): SecretEvent_EventType {
  switch (object) {
    case 0:
    case "EVENT_TYPE_UNSPECIFIED":
      return SecretEvent_EventType.EVENT_TYPE_UNSPECIFIED;
    case 1:
    case "EXPIRES_IN_30_DAYS":
      return SecretEvent_EventType.EXPIRES_IN_30_DAYS;
    case 2:
    case "EXPIRES_IN_7_DAYS":
      return SecretEvent_EventType.EXPIRES_IN_7_DAYS;
    case 3:
    case "EXPIRES_IN_1_DAY":
      return SecretEvent_EventType.EXPIRES_IN_1_DAY;
    case 4:
    case "EXPIRES_IN_6_HOURS":
      return SecretEvent_EventType.EXPIRES_IN_6_HOURS;
    case 5:
    case "EXPIRES_IN_1_HOUR":
      return SecretEvent_EventType.EXPIRES_IN_1_HOUR;
    case 6:
    case "EXPIRED":
      return SecretEvent_EventType.EXPIRED;
    case 7:
    case "TOPIC_NOT_FOUND":
      return SecretEvent_EventType.TOPIC_NOT_FOUND;
    case 8:
    case "TOPIC_PERMISSION_DENIED":
      return SecretEvent_EventType.TOPIC_PERMISSION_DENIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecretEvent_EventType.UNRECOGNIZED;
  }
}

export function secretEvent_EventTypeToJSON(object: SecretEvent_EventType): string {
  switch (object) {
    case SecretEvent_EventType.EVENT_TYPE_UNSPECIFIED:
      return "EVENT_TYPE_UNSPECIFIED";
    case SecretEvent_EventType.EXPIRES_IN_30_DAYS:
      return "EXPIRES_IN_30_DAYS";
    case SecretEvent_EventType.EXPIRES_IN_7_DAYS:
      return "EXPIRES_IN_7_DAYS";
    case SecretEvent_EventType.EXPIRES_IN_1_DAY:
      return "EXPIRES_IN_1_DAY";
    case SecretEvent_EventType.EXPIRES_IN_6_HOURS:
      return "EXPIRES_IN_6_HOURS";
    case SecretEvent_EventType.EXPIRES_IN_1_HOUR:
      return "EXPIRES_IN_1_HOUR";
    case SecretEvent_EventType.EXPIRED:
      return "EXPIRED";
    case SecretEvent_EventType.TOPIC_NOT_FOUND:
      return "TOPIC_NOT_FOUND";
    case SecretEvent_EventType.TOPIC_PERMISSION_DENIED:
      return "TOPIC_PERMISSION_DENIED";
    case SecretEvent_EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSecretEvent(): SecretEvent {
  return { name: "", type: 0, logMessage: "" };
}

export const SecretEvent: MessageFns<SecretEvent> = {
  encode(message: SecretEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.logMessage !== "") {
      writer.uint32(26).string(message.logMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? secretEvent_EventTypeFromJSON(object.type) : 0,
      logMessage: isSet(object.logMessage) ? globalThis.String(object.logMessage) : "",
    };
  },

  toJSON(message: SecretEvent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = secretEvent_EventTypeToJSON(message.type);
    }
    if (message.logMessage !== "") {
      obj.logMessage = message.logMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<SecretEvent>): SecretEvent {
    return SecretEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecretEvent>): SecretEvent {
    const message = createBaseSecretEvent();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.logMessage = object.logMessage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
