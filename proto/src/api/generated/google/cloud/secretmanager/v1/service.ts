// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/secretmanager/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Secret, SecretPayload, SecretVersion } from "./resources.js";

export const protobufPackage = "google.cloud.secretmanager.v1";

/**
 * Request message for
 * [SecretManagerService.ListSecrets][google.cloud.secretmanager.v1.SecretManagerService.ListSecrets].
 */
export interface ListSecretsRequest {
  /**
   * Required. The resource name of the project associated with the
   * [Secrets][google.cloud.secretmanager.v1.Secret], in the format `projects/*`
   * or `projects/* /locations/*`
   */
  parent: string;
  /**
   * Optional. The maximum number of results to be returned in a single page. If
   * set to 0, the server decides the number of results to return. If the
   * number is greater than 25000, it is capped at 25000.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * [ListSecretsResponse.next_page_token][google.cloud.secretmanager.v1.ListSecretsResponse.next_page_token].
   */
  pageToken: string;
  /**
   * Optional. Filter string, adhering to the rules in
   * [List-operation
   * filtering](https://cloud.google.com/secret-manager/docs/filtering). List
   * only secrets matching the filter. If filter is empty, all secrets are
   * listed.
   */
  filter: string;
}

/**
 * Response message for
 * [SecretManagerService.ListSecrets][google.cloud.secretmanager.v1.SecretManagerService.ListSecrets].
 */
export interface ListSecretsResponse {
  /**
   * The list of [Secrets][google.cloud.secretmanager.v1.Secret] sorted in
   * reverse by create_time (newest first).
   */
  secrets: Secret[];
  /**
   * A token to retrieve the next page of results. Pass this value in
   * [ListSecretsRequest.page_token][google.cloud.secretmanager.v1.ListSecretsRequest.page_token]
   * to retrieve the next page.
   */
  nextPageToken: string;
  /**
   * The total number of [Secrets][google.cloud.secretmanager.v1.Secret] but 0
   * when the
   * [ListSecretsRequest.filter][google.cloud.secretmanager.v1.ListSecretsRequest.filter]
   * field is set.
   */
  totalSize: number;
}

/**
 * Request message for
 * [SecretManagerService.CreateSecret][google.cloud.secretmanager.v1.SecretManagerService.CreateSecret].
 */
export interface CreateSecretRequest {
  /**
   * Required. The resource name of the project to associate with the
   * [Secret][google.cloud.secretmanager.v1.Secret], in the format `projects/*`
   * or `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Required. This must be unique within the project.
   *
   * A secret ID is a string with a maximum length of 255 characters and can
   * contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and
   * underscore (`_`) characters.
   */
  secretId: string;
  /**
   * Required. A [Secret][google.cloud.secretmanager.v1.Secret] with initial
   * field values.
   */
  secret: Secret | undefined;
}

/**
 * Request message for
 * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AddSecretVersion].
 */
export interface AddSecretVersionRequest {
  /**
   * Required. The resource name of the
   * [Secret][google.cloud.secretmanager.v1.Secret] to associate with the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] in the format
   * `projects/* /secrets/*` or `projects/* /locations/* /secrets/*`.
   */
  parent: string;
  /**
   * Required. The secret payload of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  payload: SecretPayload | undefined;
}

/**
 * Request message for
 * [SecretManagerService.GetSecret][google.cloud.secretmanager.v1.SecretManagerService.GetSecret].
 */
export interface GetSecretRequest {
  /**
   * Required. The resource name of the
   * [Secret][google.cloud.secretmanager.v1.Secret], in the format
   * `projects/* /secrets/*` or `projects/* /locations/* /secrets/*`.
   */
  name: string;
}

/**
 * Request message for
 * [SecretManagerService.ListSecretVersions][google.cloud.secretmanager.v1.SecretManagerService.ListSecretVersions].
 */
export interface ListSecretVersionsRequest {
  /**
   * Required. The resource name of the
   * [Secret][google.cloud.secretmanager.v1.Secret] associated with the
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] to list, in
   * the format `projects/* /secrets/*` or `projects/* /locations/* /secrets/*`.
   */
  parent: string;
  /**
   * Optional. The maximum number of results to be returned in a single page. If
   * set to 0, the server decides the number of results to return. If the
   * number is greater than 25000, it is capped at 25000.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * ListSecretVersionsResponse.next_page_token][].
   */
  pageToken: string;
  /**
   * Optional. Filter string, adhering to the rules in
   * [List-operation
   * filtering](https://cloud.google.com/secret-manager/docs/filtering). List
   * only secret versions matching the filter. If filter is empty, all secret
   * versions are listed.
   */
  filter: string;
}

/**
 * Response message for
 * [SecretManagerService.ListSecretVersions][google.cloud.secretmanager.v1.SecretManagerService.ListSecretVersions].
 */
export interface ListSecretVersionsResponse {
  /**
   * The list of [SecretVersions][google.cloud.secretmanager.v1.SecretVersion]
   * sorted in reverse by create_time (newest first).
   */
  versions: SecretVersion[];
  /**
   * A token to retrieve the next page of results. Pass this value in
   * [ListSecretVersionsRequest.page_token][google.cloud.secretmanager.v1.ListSecretVersionsRequest.page_token]
   * to retrieve the next page.
   */
  nextPageToken: string;
  /**
   * The total number of
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] but 0 when
   * the
   * [ListSecretsRequest.filter][google.cloud.secretmanager.v1.ListSecretsRequest.filter]
   * field is set.
   */
  totalSize: number;
}

/**
 * Request message for
 * [SecretManagerService.GetSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.GetSecretVersion].
 */
export interface GetSecretVersionRequest {
  /**
   * Required. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] in the format
   * `projects/* /secrets/* /versions/*` or
   * `projects/* /locations/* /secrets/* /versions/*`.
   *
   * `projects/* /secrets/* /versions/latest` or
   * `projects/* /locations/* /secrets/* /versions/latest` is an alias to the most
   * recently created
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  name: string;
}

/**
 * Request message for
 * [SecretManagerService.UpdateSecret][google.cloud.secretmanager.v1.SecretManagerService.UpdateSecret].
 */
export interface UpdateSecretRequest {
  /**
   * Required. [Secret][google.cloud.secretmanager.v1.Secret] with updated field
   * values.
   */
  secret:
    | Secret
    | undefined;
  /** Required. Specifies the fields to be updated. */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [SecretManagerService.AccessSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AccessSecretVersion].
 */
export interface AccessSecretVersionRequest {
  /**
   * Required. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] in the format
   * `projects/* /secrets/* /versions/*` or
   * `projects/* /locations/* /secrets/* /versions/*`.
   *
   * `projects/* /secrets/* /versions/latest` or
   * `projects/* /locations/* /secrets/* /versions/latest` is an alias to the most
   * recently created
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  name: string;
}

/**
 * Response message for
 * [SecretManagerService.AccessSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AccessSecretVersion].
 */
export interface AccessSecretVersionResponse {
  /**
   * The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] in the format
   * `projects/* /secrets/* /versions/*` or
   * `projects/* /locations/* /secrets/* /versions/*`.
   */
  name: string;
  /** Secret payload */
  payload: SecretPayload | undefined;
}

/**
 * Request message for
 * [SecretManagerService.DeleteSecret][google.cloud.secretmanager.v1.SecretManagerService.DeleteSecret].
 */
export interface DeleteSecretRequest {
  /**
   * Required. The resource name of the
   * [Secret][google.cloud.secretmanager.v1.Secret] to delete in the format
   * `projects/* /secrets/*`.
   */
  name: string;
  /**
   * Optional. Etag of the [Secret][google.cloud.secretmanager.v1.Secret]. The
   * request succeeds if it matches the etag of the currently stored secret
   * object. If the etag is omitted, the request succeeds.
   */
  etag: string;
}

/**
 * Request message for
 * [SecretManagerService.DisableSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.DisableSecretVersion].
 */
export interface DisableSecretVersionRequest {
  /**
   * Required. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to disable in
   * the format `projects/* /secrets/* /versions/*` or
   * `projects/* /locations/* /secrets/* /versions/*`.
   */
  name: string;
  /**
   * Optional. Etag of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]. The request
   * succeeds if it matches the etag of the currently stored secret version
   * object. If the etag is omitted, the request succeeds.
   */
  etag: string;
}

/**
 * Request message for
 * [SecretManagerService.EnableSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.EnableSecretVersion].
 */
export interface EnableSecretVersionRequest {
  /**
   * Required. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to enable in
   * the format `projects/* /secrets/* /versions/*` or
   * `projects/* /locations/* /secrets/* /versions/*`.
   */
  name: string;
  /**
   * Optional. Etag of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]. The request
   * succeeds if it matches the etag of the currently stored secret version
   * object. If the etag is omitted, the request succeeds.
   */
  etag: string;
}

/**
 * Request message for
 * [SecretManagerService.DestroySecretVersion][google.cloud.secretmanager.v1.SecretManagerService.DestroySecretVersion].
 */
export interface DestroySecretVersionRequest {
  /**
   * Required. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to destroy in
   * the format `projects/* /secrets/* /versions/*` or
   * `projects/* /locations/* /secrets/* /versions/*`.
   */
  name: string;
  /**
   * Optional. Etag of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]. The request
   * succeeds if it matches the etag of the currently stored secret version
   * object. If the etag is omitted, the request succeeds.
   */
  etag: string;
}

function createBaseListSecretsRequest(): ListSecretsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListSecretsRequest: MessageFns<ListSecretsRequest> = {
  encode(message: ListSecretsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecretsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSecretsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecretsRequest>): ListSecretsRequest {
    return ListSecretsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecretsRequest>): ListSecretsRequest {
    const message = createBaseListSecretsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSecretsResponse(): ListSecretsResponse {
  return { secrets: [], nextPageToken: "", totalSize: 0 };
}

export const ListSecretsResponse: MessageFns<ListSecretsResponse> = {
  encode(message: ListSecretsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.secrets) {
      Secret.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecretsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.secrets.push(Secret.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretsResponse {
    return {
      secrets: globalThis.Array.isArray(object?.secrets) ? object.secrets.map((e: any) => Secret.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListSecretsResponse): unknown {
    const obj: any = {};
    if (message.secrets?.length) {
      obj.secrets = message.secrets.map((e) => Secret.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecretsResponse>): ListSecretsResponse {
    return ListSecretsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecretsResponse>): ListSecretsResponse {
    const message = createBaseListSecretsResponse();
    message.secrets = object.secrets?.map((e) => Secret.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseCreateSecretRequest(): CreateSecretRequest {
  return { parent: "", secretId: "", secret: undefined };
}

export const CreateSecretRequest: MessageFns<CreateSecretRequest> = {
  encode(message: CreateSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.secretId !== "") {
      writer.uint32(18).string(message.secretId);
    }
    if (message.secret !== undefined) {
      Secret.encode(message.secret, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.secretId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.secret = Secret.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSecretRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      secretId: isSet(object.secretId) ? globalThis.String(object.secretId) : "",
      secret: isSet(object.secret) ? Secret.fromJSON(object.secret) : undefined,
    };
  },

  toJSON(message: CreateSecretRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.secretId !== "") {
      obj.secretId = message.secretId;
    }
    if (message.secret !== undefined) {
      obj.secret = Secret.toJSON(message.secret);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSecretRequest>): CreateSecretRequest {
    return CreateSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSecretRequest>): CreateSecretRequest {
    const message = createBaseCreateSecretRequest();
    message.parent = object.parent ?? "";
    message.secretId = object.secretId ?? "";
    message.secret = (object.secret !== undefined && object.secret !== null)
      ? Secret.fromPartial(object.secret)
      : undefined;
    return message;
  },
};

function createBaseAddSecretVersionRequest(): AddSecretVersionRequest {
  return { parent: "", payload: undefined };
}

export const AddSecretVersionRequest: MessageFns<AddSecretVersionRequest> = {
  encode(message: AddSecretVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.payload !== undefined) {
      SecretPayload.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSecretVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecretVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = SecretPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecretVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      payload: isSet(object.payload) ? SecretPayload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: AddSecretVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.payload !== undefined) {
      obj.payload = SecretPayload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<AddSecretVersionRequest>): AddSecretVersionRequest {
    return AddSecretVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSecretVersionRequest>): AddSecretVersionRequest {
    const message = createBaseAddSecretVersionRequest();
    message.parent = object.parent ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? SecretPayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseGetSecretRequest(): GetSecretRequest {
  return { name: "" };
}

export const GetSecretRequest: MessageFns<GetSecretRequest> = {
  encode(message: GetSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSecretRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecretRequest>): GetSecretRequest {
    return GetSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecretRequest>): GetSecretRequest {
    const message = createBaseGetSecretRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSecretVersionsRequest(): ListSecretVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListSecretVersionsRequest: MessageFns<ListSecretVersionsRequest> = {
  encode(message: ListSecretVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecretVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSecretVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecretVersionsRequest>): ListSecretVersionsRequest {
    return ListSecretVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecretVersionsRequest>): ListSecretVersionsRequest {
    const message = createBaseListSecretVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSecretVersionsResponse(): ListSecretVersionsResponse {
  return { versions: [], nextPageToken: "", totalSize: 0 };
}

export const ListSecretVersionsResponse: MessageFns<ListSecretVersionsResponse> = {
  encode(message: ListSecretVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      SecretVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecretVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versions.push(SecretVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretVersionsResponse {
    return {
      versions: globalThis.Array.isArray(object?.versions)
        ? object.versions.map((e: any) => SecretVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListSecretVersionsResponse): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => SecretVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecretVersionsResponse>): ListSecretVersionsResponse {
    return ListSecretVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecretVersionsResponse>): ListSecretVersionsResponse {
    const message = createBaseListSecretVersionsResponse();
    message.versions = object.versions?.map((e) => SecretVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGetSecretVersionRequest(): GetSecretVersionRequest {
  return { name: "" };
}

export const GetSecretVersionRequest: MessageFns<GetSecretVersionRequest> = {
  encode(message: GetSecretVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSecretVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecretVersionRequest>): GetSecretVersionRequest {
    return GetSecretVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecretVersionRequest>): GetSecretVersionRequest {
    const message = createBaseGetSecretVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSecretRequest(): UpdateSecretRequest {
  return { secret: undefined, updateMask: undefined };
}

export const UpdateSecretRequest: MessageFns<UpdateSecretRequest> = {
  encode(message: UpdateSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secret !== undefined) {
      Secret.encode(message.secret, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.secret = Secret.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecretRequest {
    return {
      secret: isSet(object.secret) ? Secret.fromJSON(object.secret) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSecretRequest): unknown {
    const obj: any = {};
    if (message.secret !== undefined) {
      obj.secret = Secret.toJSON(message.secret);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSecretRequest>): UpdateSecretRequest {
    return UpdateSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSecretRequest>): UpdateSecretRequest {
    const message = createBaseUpdateSecretRequest();
    message.secret = (object.secret !== undefined && object.secret !== null)
      ? Secret.fromPartial(object.secret)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseAccessSecretVersionRequest(): AccessSecretVersionRequest {
  return { name: "" };
}

export const AccessSecretVersionRequest: MessageFns<AccessSecretVersionRequest> = {
  encode(message: AccessSecretVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessSecretVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessSecretVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessSecretVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: AccessSecretVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<AccessSecretVersionRequest>): AccessSecretVersionRequest {
    return AccessSecretVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessSecretVersionRequest>): AccessSecretVersionRequest {
    const message = createBaseAccessSecretVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAccessSecretVersionResponse(): AccessSecretVersionResponse {
  return { name: "", payload: undefined };
}

export const AccessSecretVersionResponse: MessageFns<AccessSecretVersionResponse> = {
  encode(message: AccessSecretVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.payload !== undefined) {
      SecretPayload.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessSecretVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessSecretVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = SecretPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessSecretVersionResponse {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      payload: isSet(object.payload) ? SecretPayload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: AccessSecretVersionResponse): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.payload !== undefined) {
      obj.payload = SecretPayload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<AccessSecretVersionResponse>): AccessSecretVersionResponse {
    return AccessSecretVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessSecretVersionResponse>): AccessSecretVersionResponse {
    const message = createBaseAccessSecretVersionResponse();
    message.name = object.name ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? SecretPayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseDeleteSecretRequest(): DeleteSecretRequest {
  return { name: "", etag: "" };
}

export const DeleteSecretRequest: MessageFns<DeleteSecretRequest> = {
  encode(message: DeleteSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSecretRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteSecretRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSecretRequest>): DeleteSecretRequest {
    return DeleteSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSecretRequest>): DeleteSecretRequest {
    const message = createBaseDeleteSecretRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseDisableSecretVersionRequest(): DisableSecretVersionRequest {
  return { name: "", etag: "" };
}

export const DisableSecretVersionRequest: MessageFns<DisableSecretVersionRequest> = {
  encode(message: DisableSecretVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableSecretVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableSecretVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableSecretVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DisableSecretVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableSecretVersionRequest>): DisableSecretVersionRequest {
    return DisableSecretVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableSecretVersionRequest>): DisableSecretVersionRequest {
    const message = createBaseDisableSecretVersionRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseEnableSecretVersionRequest(): EnableSecretVersionRequest {
  return { name: "", etag: "" };
}

export const EnableSecretVersionRequest: MessageFns<EnableSecretVersionRequest> = {
  encode(message: EnableSecretVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableSecretVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableSecretVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableSecretVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: EnableSecretVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableSecretVersionRequest>): EnableSecretVersionRequest {
    return EnableSecretVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableSecretVersionRequest>): EnableSecretVersionRequest {
    const message = createBaseEnableSecretVersionRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseDestroySecretVersionRequest(): DestroySecretVersionRequest {
  return { name: "", etag: "" };
}

export const DestroySecretVersionRequest: MessageFns<DestroySecretVersionRequest> = {
  encode(message: DestroySecretVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestroySecretVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestroySecretVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestroySecretVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DestroySecretVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DestroySecretVersionRequest>): DestroySecretVersionRequest {
    return DestroySecretVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DestroySecretVersionRequest>): DestroySecretVersionRequest {
    const message = createBaseDestroySecretVersionRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

/**
 * Secret Manager Service
 *
 * Manages secrets and operations using those secrets. Implements a REST
 * model with the following objects:
 *
 * * [Secret][google.cloud.secretmanager.v1.Secret]
 * * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]
 */
export type SecretManagerServiceDefinition = typeof SecretManagerServiceDefinition;
export const SecretManagerServiceDefinition = {
  name: "SecretManagerService",
  fullName: "google.cloud.secretmanager.v1.SecretManagerService",
  methods: {
    /** Lists [Secrets][google.cloud.secretmanager.v1.Secret]. */
    listSecrets: {
      name: "ListSecrets",
      requestType: ListSecretsRequest,
      requestStream: false,
      responseType: ListSecretsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              80,
              90,
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new [Secret][google.cloud.secretmanager.v1.Secret] containing no
     * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
     */
    createSecret: {
      name: "CreateSecret",
      requestType: CreateSecretRequest,
      requestStream: false,
      responseType: Secret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              99,
              114,
              101,
              116,
              95,
              105,
              100,
              44,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              6,
              115,
              101,
              99,
              114,
              101,
              116,
              90,
              53,
              58,
              6,
              115,
              101,
              99,
              114,
              101,
              116,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              34,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]
     * containing secret data and attaches it to an existing
     * [Secret][google.cloud.secretmanager.v1.Secret].
     */
    addSecretVersion: {
      name: "AddSecretVersion",
      requestType: AddSecretVersionRequest,
      requestStream: false,
      responseType: SecretVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 112, 97, 121, 108, 111, 97, 100])],
          578365826: [
            Buffer.from([
              112,
              58,
              1,
              42,
              90,
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Gets metadata for a given [Secret][google.cloud.secretmanager.v1.Secret]. */
    getSecret: {
      name: "GetSecret",
      requestType: GetSecretRequest,
      requestStream: false,
      responseType: Secret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              80,
              90,
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              18,
              31,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates metadata of an existing
     * [Secret][google.cloud.secretmanager.v1.Secret].
     */
    updateSecret: {
      name: "UpdateSecret",
      requestType: UpdateSecretRequest,
      requestStream: false,
      responseType: Secret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 115, 101, 99, 114, 101, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              110,
              58,
              6,
              115,
              101,
              99,
              114,
              101,
              116,
              90,
              60,
              58,
              6,
              115,
              101,
              99,
              114,
              101,
              116,
              50,
              50,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              114,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              50,
              38,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              114,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Secret][google.cloud.secretmanager.v1.Secret]. */
    deleteSecret: {
      name: "DeleteSecret",
      requestType: DeleteSecretRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              80,
              90,
              45,
              42,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              42,
              31,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists [SecretVersions][google.cloud.secretmanager.v1.SecretVersion]. This
     * call does not return secret data.
     */
    listSecretVersions: {
      name: "ListSecretVersions",
      requestType: ListSecretVersionsRequest,
      requestStream: false,
      responseType: ListSecretVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              102,
              90,
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets metadata for a
     * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     *
     * `projects/* /secrets/* /versions/latest` is an alias to the most recently
     * created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     */
    getSecretVersion: {
      name: "GetSecretVersion",
      requestType: GetSecretVersionRequest,
      requestStream: false,
      responseType: SecretVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              102,
              90,
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Accesses a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     * This call returns the secret data.
     *
     * `projects/* /secrets/* /versions/latest` is an alias to the most recently
     * created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     */
    accessSecretVersion: {
      name: "AccessSecretVersion",
      requestType: AccessSecretVersionRequest,
      requestStream: false,
      responseType: AccessSecretVersionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              116,
              90,
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              97,
              99,
              99,
              101,
              115,
              115,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              97,
              99,
              99,
              101,
              115,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Disables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     *
     * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
     * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
     * [DISABLED][google.cloud.secretmanager.v1.SecretVersion.State.DISABLED].
     */
    disableSecretVersion: {
      name: "DisableSecretVersion",
      requestType: DisableSecretVersionRequest,
      requestStream: false,
      responseType: SecretVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              124,
              58,
              1,
              42,
              90,
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Enables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     *
     * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
     * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
     * [ENABLED][google.cloud.secretmanager.v1.SecretVersion.State.ENABLED].
     */
    enableSecretVersion: {
      name: "EnableSecretVersion",
      requestType: EnableSecretVersionRequest,
      requestStream: false,
      responseType: SecretVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              122,
              58,
              1,
              42,
              90,
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Destroys a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
     *
     * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
     * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
     * [DESTROYED][google.cloud.secretmanager.v1.SecretVersion.State.DESTROYED]
     * and irrevocably destroys the secret data.
     */
    destroySecretVersion: {
      name: "DestroySecretVersion",
      requestType: DestroySecretVersionRequest,
      requestStream: false,
      responseType: SecretVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              124,
              58,
              1,
              42,
              90,
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              115,
              116,
              114,
              111,
              121,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              115,
              116,
              114,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on the specified secret. Replaces any
     * existing policy.
     *
     * Permissions on
     * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] are enforced
     * according to the policy set on the associated
     * [Secret][google.cloud.secretmanager.v1.Secret].
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              120,
              58,
              1,
              42,
              90,
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a secret.
     * Returns empty policy if the secret exists and does not have a policy set.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              114,
              90,
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has for the specified secret.
     * If the secret does not exist, this call returns an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building permission-aware
     * UIs and command-line tools, not for authorization checking. This operation
     * may "fail open" without warning.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              132,
              1,
              58,
              1,
              42,
              90,
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SecretManagerServiceImplementation<CallContextExt = {}> {
  /** Lists [Secrets][google.cloud.secretmanager.v1.Secret]. */
  listSecrets(
    request: ListSecretsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSecretsResponse>>;
  /**
   * Creates a new [Secret][google.cloud.secretmanager.v1.Secret] containing no
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
   */
  createSecret(request: CreateSecretRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Secret>>;
  /**
   * Creates a new [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]
   * containing secret data and attaches it to an existing
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  addSecretVersion(
    request: AddSecretVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecretVersion>>;
  /** Gets metadata for a given [Secret][google.cloud.secretmanager.v1.Secret]. */
  getSecret(request: GetSecretRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Secret>>;
  /**
   * Updates metadata of an existing
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  updateSecret(request: UpdateSecretRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Secret>>;
  /** Deletes a [Secret][google.cloud.secretmanager.v1.Secret]. */
  deleteSecret(request: DeleteSecretRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Lists [SecretVersions][google.cloud.secretmanager.v1.SecretVersion]. This
   * call does not return secret data.
   */
  listSecretVersions(
    request: ListSecretVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSecretVersionsResponse>>;
  /**
   * Gets metadata for a
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * `projects/* /secrets/* /versions/latest` is an alias to the most recently
   * created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  getSecretVersion(
    request: GetSecretVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecretVersion>>;
  /**
   * Accesses a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   * This call returns the secret data.
   *
   * `projects/* /secrets/* /versions/latest` is an alias to the most recently
   * created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  accessSecretVersion(
    request: AccessSecretVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccessSecretVersionResponse>>;
  /**
   * Disables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
   * [DISABLED][google.cloud.secretmanager.v1.SecretVersion.State.DISABLED].
   */
  disableSecretVersion(
    request: DisableSecretVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecretVersion>>;
  /**
   * Enables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
   * [ENABLED][google.cloud.secretmanager.v1.SecretVersion.State.ENABLED].
   */
  enableSecretVersion(
    request: EnableSecretVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecretVersion>>;
  /**
   * Destroys a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
   * [DESTROYED][google.cloud.secretmanager.v1.SecretVersion.State.DESTROYED]
   * and irrevocably destroys the secret data.
   */
  destroySecretVersion(
    request: DestroySecretVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecretVersion>>;
  /**
   * Sets the access control policy on the specified secret. Replaces any
   * existing policy.
   *
   * Permissions on
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] are enforced
   * according to the policy set on the associated
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the access control policy for a secret.
   * Returns empty policy if the secret exists and does not have a policy set.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has for the specified secret.
   * If the secret does not exist, this call returns an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface SecretManagerServiceClient<CallOptionsExt = {}> {
  /** Lists [Secrets][google.cloud.secretmanager.v1.Secret]. */
  listSecrets(
    request: DeepPartial<ListSecretsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSecretsResponse>;
  /**
   * Creates a new [Secret][google.cloud.secretmanager.v1.Secret] containing no
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
   */
  createSecret(request: DeepPartial<CreateSecretRequest>, options?: CallOptions & CallOptionsExt): Promise<Secret>;
  /**
   * Creates a new [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]
   * containing secret data and attaches it to an existing
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  addSecretVersion(
    request: DeepPartial<AddSecretVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecretVersion>;
  /** Gets metadata for a given [Secret][google.cloud.secretmanager.v1.Secret]. */
  getSecret(request: DeepPartial<GetSecretRequest>, options?: CallOptions & CallOptionsExt): Promise<Secret>;
  /**
   * Updates metadata of an existing
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  updateSecret(request: DeepPartial<UpdateSecretRequest>, options?: CallOptions & CallOptionsExt): Promise<Secret>;
  /** Deletes a [Secret][google.cloud.secretmanager.v1.Secret]. */
  deleteSecret(request: DeepPartial<DeleteSecretRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Lists [SecretVersions][google.cloud.secretmanager.v1.SecretVersion]. This
   * call does not return secret data.
   */
  listSecretVersions(
    request: DeepPartial<ListSecretVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSecretVersionsResponse>;
  /**
   * Gets metadata for a
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * `projects/* /secrets/* /versions/latest` is an alias to the most recently
   * created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  getSecretVersion(
    request: DeepPartial<GetSecretVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecretVersion>;
  /**
   * Accesses a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   * This call returns the secret data.
   *
   * `projects/* /secrets/* /versions/latest` is an alias to the most recently
   * created [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  accessSecretVersion(
    request: DeepPartial<AccessSecretVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccessSecretVersionResponse>;
  /**
   * Disables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
   * [DISABLED][google.cloud.secretmanager.v1.SecretVersion.State.DISABLED].
   */
  disableSecretVersion(
    request: DeepPartial<DisableSecretVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecretVersion>;
  /**
   * Enables a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
   * [ENABLED][google.cloud.secretmanager.v1.SecretVersion.State.ENABLED].
   */
  enableSecretVersion(
    request: DeepPartial<EnableSecretVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecretVersion>;
  /**
   * Destroys a [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   *
   * Sets the [state][google.cloud.secretmanager.v1.SecretVersion.state] of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] to
   * [DESTROYED][google.cloud.secretmanager.v1.SecretVersion.State.DESTROYED]
   * and irrevocably destroys the secret data.
   */
  destroySecretVersion(
    request: DeepPartial<DestroySecretVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecretVersion>;
  /**
   * Sets the access control policy on the specified secret. Replaces any
   * existing policy.
   *
   * Permissions on
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] are enforced
   * according to the policy set on the associated
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the access control policy for a secret.
   * Returns empty policy if the secret exists and does not have a policy set.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has for the specified secret.
   * If the secret does not exist, this call returns an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
