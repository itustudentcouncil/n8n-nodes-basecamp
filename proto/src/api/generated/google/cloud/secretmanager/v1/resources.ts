// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/secretmanager/v1/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.secretmanager.v1";

/**
 * A [Secret][google.cloud.secretmanager.v1.Secret] is a logical secret whose
 * value and versions can be accessed.
 *
 * A [Secret][google.cloud.secretmanager.v1.Secret] is made up of zero or more
 * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] that represent
 * the secret data.
 */
export interface Secret {
  /**
   * Output only. The resource name of the
   * [Secret][google.cloud.secretmanager.v1.Secret] in the format
   * `projects/* /secrets/*`.
   */
  name: string;
  /**
   * Optional. Immutable. The replication policy of the secret data attached to
   * the [Secret][google.cloud.secretmanager.v1.Secret].
   *
   * The replication policy cannot be changed after the Secret has been created.
   */
  replication:
    | Replication
    | undefined;
  /**
   * Output only. The time at which the
   * [Secret][google.cloud.secretmanager.v1.Secret] was created.
   */
  createTime:
    | Date
    | undefined;
  /**
   * The labels assigned to this Secret.
   *
   * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
   * of maximum 128 bytes, and must conform to the following PCRE regular
   * expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`
   *
   * Label values must be between 0 and 63 characters long, have a UTF-8
   * encoding of maximum 128 bytes, and must conform to the following PCRE
   * regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`
   *
   * No more than 64 labels can be assigned to a given resource.
   */
  labels: { [key: string]: string };
  /**
   * Optional. A list of up to 10 Pub/Sub topics to which messages are published
   * when control plane operations are called on the secret or its versions.
   */
  topics: Topic[];
  /**
   * Optional. Timestamp in UTC when the
   * [Secret][google.cloud.secretmanager.v1.Secret] is scheduled to expire.
   * This is always provided on output, regardless of what was sent on input.
   */
  expireTime?:
    | Date
    | undefined;
  /**
   * Input only. The TTL for the
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  ttl?:
    | Duration
    | undefined;
  /**
   * Optional. Etag of the currently stored
   * [Secret][google.cloud.secretmanager.v1.Secret].
   */
  etag: string;
  /**
   * Optional. Rotation policy attached to the
   * [Secret][google.cloud.secretmanager.v1.Secret]. May be excluded if there is
   * no rotation policy.
   */
  rotation:
    | Rotation
    | undefined;
  /**
   * Optional. Mapping from version alias to version name.
   *
   * A version alias is a string with a maximum length of 63 characters and can
   * contain uppercase and lowercase letters, numerals, and the hyphen (`-`)
   * and underscore ('_') characters. An alias string must start with a
   * letter and cannot be the string 'latest' or 'NEW'.
   * No more than 50 aliases can be assigned to a given secret.
   *
   * Version-Alias pairs will be viewable via GetSecret and modifiable via
   * UpdateSecret. Access by alias is only be supported on
   * GetSecretVersion and AccessSecretVersion.
   */
  versionAliases: { [key: string]: Long };
  /**
   * Optional. Custom metadata about the secret.
   *
   * Annotations are distinct from various forms of labels.
   * Annotations exist to allow client tools to store their own state
   * information without requiring a database.
   *
   * Annotation keys must be between 1 and 63 characters long, have a UTF-8
   * encoding of maximum 128 bytes, begin and end with an alphanumeric character
   * ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and
   * alphanumerics in between these symbols.
   *
   * The total size of annotation keys and values must be less than 16KiB.
   */
  annotations: { [key: string]: string };
  /**
   * Optional. Secret Version TTL after destruction request
   *
   * This is a part of the Delayed secret version destroy feature.
   * For secret with TTL>0, version destruction doesn't happen immediately
   * on calling destroy instead the version goes to a disabled state and
   * destruction happens after the TTL expires.
   */
  versionDestroyTtl:
    | Duration
    | undefined;
  /**
   * Optional. The customer-managed encryption configuration of the Regionalised
   * Secrets. If no configuration is provided, Google-managed default encryption
   * is used.
   *
   * Updates to the [Secret][google.cloud.secretmanager.v1.Secret] encryption
   * configuration only apply to
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] added
   * afterwards. They do not apply retroactively to existing
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
   */
  customerManagedEncryption: CustomerManagedEncryption | undefined;
}

export interface Secret_LabelsEntry {
  key: string;
  value: string;
}

export interface Secret_VersionAliasesEntry {
  key: string;
  value: Long;
}

export interface Secret_AnnotationsEntry {
  key: string;
  value: string;
}

/** A secret version resource in the Secret Manager API. */
export interface SecretVersion {
  /**
   * Output only. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] in the format
   * `projects/* /secrets/* /versions/*`.
   *
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] IDs in a
   * [Secret][google.cloud.secretmanager.v1.Secret] start at 1 and are
   * incremented for each subsequent version of the secret.
   */
  name: string;
  /**
   * Output only. The time at which the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] was created.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The time this
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] was destroyed.
   * Only present if [state][google.cloud.secretmanager.v1.SecretVersion.state]
   * is
   * [DESTROYED][google.cloud.secretmanager.v1.SecretVersion.State.DESTROYED].
   */
  destroyTime:
    | Date
    | undefined;
  /**
   * Output only. The current state of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  state: SecretVersion_State;
  /**
   * The replication status of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  replicationStatus:
    | ReplicationStatus
    | undefined;
  /**
   * Output only. Etag of the currently stored
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  etag: string;
  /**
   * Output only. True if payload checksum specified in
   * [SecretPayload][google.cloud.secretmanager.v1.SecretPayload] object has
   * been received by
   * [SecretManagerService][google.cloud.secretmanager.v1.SecretManagerService]
   * on
   * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AddSecretVersion].
   */
  clientSpecifiedPayloadChecksum: boolean;
  /**
   * Optional. Output only. Scheduled destroy time for secret version.
   * This is a part of the Delayed secret version destroy feature. For a
   * Secret with a valid version destroy TTL, when a secert version is
   * destroyed, the version is moved to disabled state and it is scheduled for
   * destruction. The version is destroyed only after the
   * `scheduled_destroy_time`.
   */
  scheduledDestroyTime:
    | Date
    | undefined;
  /**
   * Output only. The customer-managed encryption status of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]. Only
   * populated if customer-managed encryption is used and
   * [Secret][google.cloud.secretmanager.v1.Secret] is a Regionalised Secret.
   */
  customerManagedEncryption: CustomerManagedEncryptionStatus | undefined;
}

/**
 * The state of a
 * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion], indicating if
 * it can be accessed.
 */
export enum SecretVersion_State {
  /** STATE_UNSPECIFIED - Not specified. This value is unused and invalid. */
  STATE_UNSPECIFIED = 0,
  /**
   * ENABLED - The [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] may be
   * accessed.
   */
  ENABLED = 1,
  /**
   * DISABLED - The [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] may not
   * be accessed, but the secret data is still available and can be placed
   * back into the
   * [ENABLED][google.cloud.secretmanager.v1.SecretVersion.State.ENABLED]
   * state.
   */
  DISABLED = 2,
  /**
   * DESTROYED - The [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] is
   * destroyed and the secret data is no longer stored. A version may not
   * leave this state once entered.
   */
  DESTROYED = 3,
  UNRECOGNIZED = -1,
}

export function secretVersion_StateFromJSON(object: any): SecretVersion_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return SecretVersion_State.STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return SecretVersion_State.ENABLED;
    case 2:
    case "DISABLED":
      return SecretVersion_State.DISABLED;
    case 3:
    case "DESTROYED":
      return SecretVersion_State.DESTROYED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecretVersion_State.UNRECOGNIZED;
  }
}

export function secretVersion_StateToJSON(object: SecretVersion_State): string {
  switch (object) {
    case SecretVersion_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case SecretVersion_State.ENABLED:
      return "ENABLED";
    case SecretVersion_State.DISABLED:
      return "DISABLED";
    case SecretVersion_State.DESTROYED:
      return "DESTROYED";
    case SecretVersion_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A policy that defines the replication and encryption configuration of data. */
export interface Replication {
  /**
   * The [Secret][google.cloud.secretmanager.v1.Secret] will automatically be
   * replicated without any restrictions.
   */
  automatic?:
    | Replication_Automatic
    | undefined;
  /**
   * The [Secret][google.cloud.secretmanager.v1.Secret] will only be
   * replicated into the locations specified.
   */
  userManaged?: Replication_UserManaged | undefined;
}

/**
 * A replication policy that replicates the
 * [Secret][google.cloud.secretmanager.v1.Secret] payload without any
 * restrictions.
 */
export interface Replication_Automatic {
  /**
   * Optional. The customer-managed encryption configuration of the
   * [Secret][google.cloud.secretmanager.v1.Secret]. If no configuration is
   * provided, Google-managed default encryption is used.
   *
   * Updates to the [Secret][google.cloud.secretmanager.v1.Secret] encryption
   * configuration only apply to
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] added
   * afterwards. They do not apply retroactively to existing
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
   */
  customerManagedEncryption: CustomerManagedEncryption | undefined;
}

/**
 * A replication policy that replicates the
 * [Secret][google.cloud.secretmanager.v1.Secret] payload into the locations
 * specified in [Secret.replication.user_managed.replicas][]
 */
export interface Replication_UserManaged {
  /**
   * Required. The list of Replicas for this
   * [Secret][google.cloud.secretmanager.v1.Secret].
   *
   * Cannot be empty.
   */
  replicas: Replication_UserManaged_Replica[];
}

/**
 * Represents a Replica for this
 * [Secret][google.cloud.secretmanager.v1.Secret].
 */
export interface Replication_UserManaged_Replica {
  /**
   * The canonical IDs of the location to replicate data.
   * For example: `"us-east1"`.
   */
  location: string;
  /**
   * Optional. The customer-managed encryption configuration of the
   * [User-Managed Replica][Replication.UserManaged.Replica]. If no
   * configuration is provided, Google-managed default encryption is used.
   *
   * Updates to the [Secret][google.cloud.secretmanager.v1.Secret]
   * encryption configuration only apply to
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion] added
   * afterwards. They do not apply retroactively to existing
   * [SecretVersions][google.cloud.secretmanager.v1.SecretVersion].
   */
  customerManagedEncryption: CustomerManagedEncryption | undefined;
}

/**
 * Configuration for encrypting secret payloads using customer-managed
 * encryption keys (CMEK).
 */
export interface CustomerManagedEncryption {
  /**
   * Required. The resource name of the Cloud KMS CryptoKey used to encrypt
   * secret payloads.
   *
   * For secrets using the
   * [UserManaged][google.cloud.secretmanager.v1.Replication.UserManaged]
   * replication policy type, Cloud KMS CryptoKeys must reside in the same
   * location as the [replica location][Secret.UserManaged.Replica.location].
   *
   * For secrets using the
   * [Automatic][google.cloud.secretmanager.v1.Replication.Automatic]
   * replication policy type, Cloud KMS CryptoKeys must reside in `global`.
   *
   * The expected format is `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  kmsKeyName: string;
}

/**
 * The replication status of a
 * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
 */
export interface ReplicationStatus {
  /**
   * Describes the replication status of a
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] with
   * automatic replication.
   *
   * Only populated if the parent
   * [Secret][google.cloud.secretmanager.v1.Secret] has an automatic
   * replication policy.
   */
  automatic?:
    | ReplicationStatus_AutomaticStatus
    | undefined;
  /**
   * Describes the replication status of a
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] with
   * user-managed replication.
   *
   * Only populated if the parent
   * [Secret][google.cloud.secretmanager.v1.Secret] has a user-managed
   * replication policy.
   */
  userManaged?: ReplicationStatus_UserManagedStatus | undefined;
}

/**
 * The replication status of a
 * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] using
 * automatic replication.
 *
 * Only populated if the parent [Secret][google.cloud.secretmanager.v1.Secret]
 * has an automatic replication policy.
 */
export interface ReplicationStatus_AutomaticStatus {
  /**
   * Output only. The customer-managed encryption status of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]. Only
   * populated if customer-managed encryption is used.
   */
  customerManagedEncryption: CustomerManagedEncryptionStatus | undefined;
}

/**
 * The replication status of a
 * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion] using
 * user-managed replication.
 *
 * Only populated if the parent [Secret][google.cloud.secretmanager.v1.Secret]
 * has a user-managed replication policy.
 */
export interface ReplicationStatus_UserManagedStatus {
  /**
   * Output only. The list of replica statuses for the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
   */
  replicas: ReplicationStatus_UserManagedStatus_ReplicaStatus[];
}

/**
 * Describes the status of a user-managed replica for the
 * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
 */
export interface ReplicationStatus_UserManagedStatus_ReplicaStatus {
  /**
   * Output only. The canonical ID of the replica location.
   * For example: `"us-east1"`.
   */
  location: string;
  /**
   * Output only. The customer-managed encryption status of the
   * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion]. Only
   * populated if customer-managed encryption is used.
   */
  customerManagedEncryption: CustomerManagedEncryptionStatus | undefined;
}

/** Describes the status of customer-managed encryption. */
export interface CustomerManagedEncryptionStatus {
  /**
   * Required. The resource name of the Cloud KMS CryptoKeyVersion used to
   * encrypt the secret payload, in the following format:
   * `projects/* /locations/* /keyRings/* /cryptoKeys/* /versions/*`.
   */
  kmsKeyVersionName: string;
}

/**
 * A Pub/Sub topic which Secret Manager will publish to when control plane
 * events occur on this secret.
 */
export interface Topic {
  /**
   * Required. The resource name of the Pub/Sub topic that will be published to,
   * in the following format: `projects/* /topics/*`. For publication to succeed,
   * the Secret Manager service agent must have the `pubsub.topic.publish`
   * permission on the topic. The Pub/Sub Publisher role
   * (`roles/pubsub.publisher`) includes this permission.
   */
  name: string;
}

/**
 * The rotation time and period for a
 * [Secret][google.cloud.secretmanager.v1.Secret]. At next_rotation_time, Secret
 * Manager will send a Pub/Sub notification to the topics configured on the
 * Secret. [Secret.topics][google.cloud.secretmanager.v1.Secret.topics] must be
 * set to configure rotation.
 */
export interface Rotation {
  /**
   * Optional. Timestamp in UTC at which the
   * [Secret][google.cloud.secretmanager.v1.Secret] is scheduled to rotate.
   * Cannot be set to less than 300s (5 min) in the future and at most
   * 3153600000s (100 years).
   *
   * [next_rotation_time][google.cloud.secretmanager.v1.Rotation.next_rotation_time]
   * MUST  be set if
   * [rotation_period][google.cloud.secretmanager.v1.Rotation.rotation_period]
   * is set.
   */
  nextRotationTime:
    | Date
    | undefined;
  /**
   * Input only. The Duration between rotation notifications. Must be in seconds
   * and at least 3600s (1h) and at most 3153600000s (100 years).
   *
   * If
   * [rotation_period][google.cloud.secretmanager.v1.Rotation.rotation_period]
   * is set,
   * [next_rotation_time][google.cloud.secretmanager.v1.Rotation.next_rotation_time]
   * must be set.
   * [next_rotation_time][google.cloud.secretmanager.v1.Rotation.next_rotation_time]
   * will be advanced by this period when the service automatically sends
   * rotation notifications.
   */
  rotationPeriod: Duration | undefined;
}

/**
 * A secret payload resource in the Secret Manager API. This contains the
 * sensitive secret payload that is associated with a
 * [SecretVersion][google.cloud.secretmanager.v1.SecretVersion].
 */
export interface SecretPayload {
  /** The secret data. Must be no larger than 64KiB. */
  data: Buffer;
  /**
   * Optional. If specified,
   * [SecretManagerService][google.cloud.secretmanager.v1.SecretManagerService]
   * will verify the integrity of the received
   * [data][google.cloud.secretmanager.v1.SecretPayload.data] on
   * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AddSecretVersion]
   * calls using the crc32c checksum and store it to include in future
   * [SecretManagerService.AccessSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AccessSecretVersion]
   * responses. If a checksum is not provided in the
   * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1.SecretManagerService.AddSecretVersion]
   * request, the
   * [SecretManagerService][google.cloud.secretmanager.v1.SecretManagerService]
   * will generate and store one for you.
   *
   * The CRC32C value is encoded as a Int64 for compatibility, and can be
   * safely downconverted to uint32 in languages that support this type.
   * https://cloud.google.com/apis/design/design_patterns#integer_types
   */
  dataCrc32c?: Long | undefined;
}

function createBaseSecret(): Secret {
  return {
    name: "",
    replication: undefined,
    createTime: undefined,
    labels: {},
    topics: [],
    expireTime: undefined,
    ttl: undefined,
    etag: "",
    rotation: undefined,
    versionAliases: {},
    annotations: {},
    versionDestroyTtl: undefined,
    customerManagedEncryption: undefined,
  };
}

export const Secret: MessageFns<Secret> = {
  encode(message: Secret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.replication !== undefined) {
      Replication.encode(message.replication, writer.uint32(18).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Secret_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    for (const v of message.topics) {
      Topic.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(50).fork()).join();
    }
    if (message.ttl !== undefined) {
      Duration.encode(message.ttl, writer.uint32(58).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    if (message.rotation !== undefined) {
      Rotation.encode(message.rotation, writer.uint32(74).fork()).join();
    }
    Object.entries(message.versionAliases).forEach(([key, value]) => {
      Secret_VersionAliasesEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      Secret_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(106).fork()).join();
    });
    if (message.versionDestroyTtl !== undefined) {
      Duration.encode(message.versionDestroyTtl, writer.uint32(114).fork()).join();
    }
    if (message.customerManagedEncryption !== undefined) {
      CustomerManagedEncryption.encode(message.customerManagedEncryption, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.replication = Replication.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Secret_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.topics.push(Topic.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ttl = Duration.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.rotation = Rotation.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          const entry11 = Secret_VersionAliasesEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.versionAliases[entry11.key] = entry11.value;
          }
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          const entry13 = Secret_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry13.value !== undefined) {
            message.annotations[entry13.key] = entry13.value;
          }
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.versionDestroyTtl = Duration.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.customerManagedEncryption = CustomerManagedEncryption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      replication: isSet(object.replication) ? Replication.fromJSON(object.replication) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => Topic.fromJSON(e)) : [],
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      ttl: isSet(object.ttl) ? Duration.fromJSON(object.ttl) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      rotation: isSet(object.rotation) ? Rotation.fromJSON(object.rotation) : undefined,
      versionAliases: isObject(object.versionAliases)
        ? Object.entries(object.versionAliases).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
          acc[key] = Long.fromValue(value as Long | string);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      versionDestroyTtl: isSet(object.versionDestroyTtl) ? Duration.fromJSON(object.versionDestroyTtl) : undefined,
      customerManagedEncryption: isSet(object.customerManagedEncryption)
        ? CustomerManagedEncryption.fromJSON(object.customerManagedEncryption)
        : undefined,
    };
  },

  toJSON(message: Secret): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.replication !== undefined) {
      obj.replication = Replication.toJSON(message.replication);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.topics?.length) {
      obj.topics = message.topics.map((e) => Topic.toJSON(e));
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.ttl !== undefined) {
      obj.ttl = Duration.toJSON(message.ttl);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.rotation !== undefined) {
      obj.rotation = Rotation.toJSON(message.rotation);
    }
    if (message.versionAliases) {
      const entries = Object.entries(message.versionAliases);
      if (entries.length > 0) {
        obj.versionAliases = {};
        entries.forEach(([k, v]) => {
          obj.versionAliases[k] = v.toString();
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.versionDestroyTtl !== undefined) {
      obj.versionDestroyTtl = Duration.toJSON(message.versionDestroyTtl);
    }
    if (message.customerManagedEncryption !== undefined) {
      obj.customerManagedEncryption = CustomerManagedEncryption.toJSON(message.customerManagedEncryption);
    }
    return obj;
  },

  create(base?: DeepPartial<Secret>): Secret {
    return Secret.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret>): Secret {
    const message = createBaseSecret();
    message.name = object.name ?? "";
    message.replication = (object.replication !== undefined && object.replication !== null)
      ? Replication.fromPartial(object.replication)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.topics = object.topics?.map((e) => Topic.fromPartial(e)) || [];
    message.expireTime = object.expireTime ?? undefined;
    message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Duration.fromPartial(object.ttl) : undefined;
    message.etag = object.etag ?? "";
    message.rotation = (object.rotation !== undefined && object.rotation !== null)
      ? Rotation.fromPartial(object.rotation)
      : undefined;
    message.versionAliases = Object.entries(object.versionAliases ?? {}).reduce<{ [key: string]: Long }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Long.fromValue(value);
        }
        return acc;
      },
      {},
    );
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.versionDestroyTtl = (object.versionDestroyTtl !== undefined && object.versionDestroyTtl !== null)
      ? Duration.fromPartial(object.versionDestroyTtl)
      : undefined;
    message.customerManagedEncryption =
      (object.customerManagedEncryption !== undefined && object.customerManagedEncryption !== null)
        ? CustomerManagedEncryption.fromPartial(object.customerManagedEncryption)
        : undefined;
    return message;
  },
};

function createBaseSecret_LabelsEntry(): Secret_LabelsEntry {
  return { key: "", value: "" };
}

export const Secret_LabelsEntry: MessageFns<Secret_LabelsEntry> = {
  encode(message: Secret_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Secret_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Secret_LabelsEntry>): Secret_LabelsEntry {
    return Secret_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret_LabelsEntry>): Secret_LabelsEntry {
    const message = createBaseSecret_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSecret_VersionAliasesEntry(): Secret_VersionAliasesEntry {
  return { key: "", value: Long.ZERO };
}

export const Secret_VersionAliasesEntry: MessageFns<Secret_VersionAliasesEntry> = {
  encode(message: Secret_VersionAliasesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (!message.value.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.value.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret_VersionAliasesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret_VersionAliasesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret_VersionAliasesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.ZERO,
    };
  },

  toJSON(message: Secret_VersionAliasesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (!message.value.equals(Long.ZERO)) {
      obj.value = (message.value || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Secret_VersionAliasesEntry>): Secret_VersionAliasesEntry {
    return Secret_VersionAliasesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret_VersionAliasesEntry>): Secret_VersionAliasesEntry {
    const message = createBaseSecret_VersionAliasesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.ZERO;
    return message;
  },
};

function createBaseSecret_AnnotationsEntry(): Secret_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Secret_AnnotationsEntry: MessageFns<Secret_AnnotationsEntry> = {
  encode(message: Secret_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Secret_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Secret_AnnotationsEntry>): Secret_AnnotationsEntry {
    return Secret_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret_AnnotationsEntry>): Secret_AnnotationsEntry {
    const message = createBaseSecret_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSecretVersion(): SecretVersion {
  return {
    name: "",
    createTime: undefined,
    destroyTime: undefined,
    state: 0,
    replicationStatus: undefined,
    etag: "",
    clientSpecifiedPayloadChecksum: false,
    scheduledDestroyTime: undefined,
    customerManagedEncryption: undefined,
  };
}

export const SecretVersion: MessageFns<SecretVersion> = {
  encode(message: SecretVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.destroyTime !== undefined) {
      Timestamp.encode(toTimestamp(message.destroyTime), writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.replicationStatus !== undefined) {
      ReplicationStatus.encode(message.replicationStatus, writer.uint32(42).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(50).string(message.etag);
    }
    if (message.clientSpecifiedPayloadChecksum !== false) {
      writer.uint32(56).bool(message.clientSpecifiedPayloadChecksum);
    }
    if (message.scheduledDestroyTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduledDestroyTime), writer.uint32(66).fork()).join();
    }
    if (message.customerManagedEncryption !== undefined) {
      CustomerManagedEncryptionStatus.encode(message.customerManagedEncryption, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destroyTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.replicationStatus = ReplicationStatus.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.clientSpecifiedPayloadChecksum = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scheduledDestroyTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.customerManagedEncryption = CustomerManagedEncryptionStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretVersion {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      destroyTime: isSet(object.destroyTime) ? fromJsonTimestamp(object.destroyTime) : undefined,
      state: isSet(object.state) ? secretVersion_StateFromJSON(object.state) : 0,
      replicationStatus: isSet(object.replicationStatus)
        ? ReplicationStatus.fromJSON(object.replicationStatus)
        : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      clientSpecifiedPayloadChecksum: isSet(object.clientSpecifiedPayloadChecksum)
        ? globalThis.Boolean(object.clientSpecifiedPayloadChecksum)
        : false,
      scheduledDestroyTime: isSet(object.scheduledDestroyTime)
        ? fromJsonTimestamp(object.scheduledDestroyTime)
        : undefined,
      customerManagedEncryption: isSet(object.customerManagedEncryption)
        ? CustomerManagedEncryptionStatus.fromJSON(object.customerManagedEncryption)
        : undefined,
    };
  },

  toJSON(message: SecretVersion): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.destroyTime !== undefined) {
      obj.destroyTime = message.destroyTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = secretVersion_StateToJSON(message.state);
    }
    if (message.replicationStatus !== undefined) {
      obj.replicationStatus = ReplicationStatus.toJSON(message.replicationStatus);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.clientSpecifiedPayloadChecksum !== false) {
      obj.clientSpecifiedPayloadChecksum = message.clientSpecifiedPayloadChecksum;
    }
    if (message.scheduledDestroyTime !== undefined) {
      obj.scheduledDestroyTime = message.scheduledDestroyTime.toISOString();
    }
    if (message.customerManagedEncryption !== undefined) {
      obj.customerManagedEncryption = CustomerManagedEncryptionStatus.toJSON(message.customerManagedEncryption);
    }
    return obj;
  },

  create(base?: DeepPartial<SecretVersion>): SecretVersion {
    return SecretVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecretVersion>): SecretVersion {
    const message = createBaseSecretVersion();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.destroyTime = object.destroyTime ?? undefined;
    message.state = object.state ?? 0;
    message.replicationStatus = (object.replicationStatus !== undefined && object.replicationStatus !== null)
      ? ReplicationStatus.fromPartial(object.replicationStatus)
      : undefined;
    message.etag = object.etag ?? "";
    message.clientSpecifiedPayloadChecksum = object.clientSpecifiedPayloadChecksum ?? false;
    message.scheduledDestroyTime = object.scheduledDestroyTime ?? undefined;
    message.customerManagedEncryption =
      (object.customerManagedEncryption !== undefined && object.customerManagedEncryption !== null)
        ? CustomerManagedEncryptionStatus.fromPartial(object.customerManagedEncryption)
        : undefined;
    return message;
  },
};

function createBaseReplication(): Replication {
  return { automatic: undefined, userManaged: undefined };
}

export const Replication: MessageFns<Replication> = {
  encode(message: Replication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.automatic !== undefined) {
      Replication_Automatic.encode(message.automatic, writer.uint32(10).fork()).join();
    }
    if (message.userManaged !== undefined) {
      Replication_UserManaged.encode(message.userManaged, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.automatic = Replication_Automatic.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userManaged = Replication_UserManaged.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication {
    return {
      automatic: isSet(object.automatic) ? Replication_Automatic.fromJSON(object.automatic) : undefined,
      userManaged: isSet(object.userManaged) ? Replication_UserManaged.fromJSON(object.userManaged) : undefined,
    };
  },

  toJSON(message: Replication): unknown {
    const obj: any = {};
    if (message.automatic !== undefined) {
      obj.automatic = Replication_Automatic.toJSON(message.automatic);
    }
    if (message.userManaged !== undefined) {
      obj.userManaged = Replication_UserManaged.toJSON(message.userManaged);
    }
    return obj;
  },

  create(base?: DeepPartial<Replication>): Replication {
    return Replication.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication>): Replication {
    const message = createBaseReplication();
    message.automatic = (object.automatic !== undefined && object.automatic !== null)
      ? Replication_Automatic.fromPartial(object.automatic)
      : undefined;
    message.userManaged = (object.userManaged !== undefined && object.userManaged !== null)
      ? Replication_UserManaged.fromPartial(object.userManaged)
      : undefined;
    return message;
  },
};

function createBaseReplication_Automatic(): Replication_Automatic {
  return { customerManagedEncryption: undefined };
}

export const Replication_Automatic: MessageFns<Replication_Automatic> = {
  encode(message: Replication_Automatic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerManagedEncryption !== undefined) {
      CustomerManagedEncryption.encode(message.customerManagedEncryption, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_Automatic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_Automatic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerManagedEncryption = CustomerManagedEncryption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication_Automatic {
    return {
      customerManagedEncryption: isSet(object.customerManagedEncryption)
        ? CustomerManagedEncryption.fromJSON(object.customerManagedEncryption)
        : undefined,
    };
  },

  toJSON(message: Replication_Automatic): unknown {
    const obj: any = {};
    if (message.customerManagedEncryption !== undefined) {
      obj.customerManagedEncryption = CustomerManagedEncryption.toJSON(message.customerManagedEncryption);
    }
    return obj;
  },

  create(base?: DeepPartial<Replication_Automatic>): Replication_Automatic {
    return Replication_Automatic.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication_Automatic>): Replication_Automatic {
    const message = createBaseReplication_Automatic();
    message.customerManagedEncryption =
      (object.customerManagedEncryption !== undefined && object.customerManagedEncryption !== null)
        ? CustomerManagedEncryption.fromPartial(object.customerManagedEncryption)
        : undefined;
    return message;
  },
};

function createBaseReplication_UserManaged(): Replication_UserManaged {
  return { replicas: [] };
}

export const Replication_UserManaged: MessageFns<Replication_UserManaged> = {
  encode(message: Replication_UserManaged, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.replicas) {
      Replication_UserManaged_Replica.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_UserManaged {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_UserManaged();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.replicas.push(Replication_UserManaged_Replica.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication_UserManaged {
    return {
      replicas: globalThis.Array.isArray(object?.replicas)
        ? object.replicas.map((e: any) => Replication_UserManaged_Replica.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Replication_UserManaged): unknown {
    const obj: any = {};
    if (message.replicas?.length) {
      obj.replicas = message.replicas.map((e) => Replication_UserManaged_Replica.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Replication_UserManaged>): Replication_UserManaged {
    return Replication_UserManaged.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication_UserManaged>): Replication_UserManaged {
    const message = createBaseReplication_UserManaged();
    message.replicas = object.replicas?.map((e) => Replication_UserManaged_Replica.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReplication_UserManaged_Replica(): Replication_UserManaged_Replica {
  return { location: "", customerManagedEncryption: undefined };
}

export const Replication_UserManaged_Replica: MessageFns<Replication_UserManaged_Replica> = {
  encode(message: Replication_UserManaged_Replica, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.customerManagedEncryption !== undefined) {
      CustomerManagedEncryption.encode(message.customerManagedEncryption, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_UserManaged_Replica {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_UserManaged_Replica();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customerManagedEncryption = CustomerManagedEncryption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication_UserManaged_Replica {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      customerManagedEncryption: isSet(object.customerManagedEncryption)
        ? CustomerManagedEncryption.fromJSON(object.customerManagedEncryption)
        : undefined,
    };
  },

  toJSON(message: Replication_UserManaged_Replica): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.customerManagedEncryption !== undefined) {
      obj.customerManagedEncryption = CustomerManagedEncryption.toJSON(message.customerManagedEncryption);
    }
    return obj;
  },

  create(base?: DeepPartial<Replication_UserManaged_Replica>): Replication_UserManaged_Replica {
    return Replication_UserManaged_Replica.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication_UserManaged_Replica>): Replication_UserManaged_Replica {
    const message = createBaseReplication_UserManaged_Replica();
    message.location = object.location ?? "";
    message.customerManagedEncryption =
      (object.customerManagedEncryption !== undefined && object.customerManagedEncryption !== null)
        ? CustomerManagedEncryption.fromPartial(object.customerManagedEncryption)
        : undefined;
    return message;
  },
};

function createBaseCustomerManagedEncryption(): CustomerManagedEncryption {
  return { kmsKeyName: "" };
}

export const CustomerManagedEncryption: MessageFns<CustomerManagedEncryption> = {
  encode(message: CustomerManagedEncryption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kmsKeyName !== "") {
      writer.uint32(10).string(message.kmsKeyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerManagedEncryption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerManagedEncryption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerManagedEncryption {
    return { kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "" };
  },

  toJSON(message: CustomerManagedEncryption): unknown {
    const obj: any = {};
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerManagedEncryption>): CustomerManagedEncryption {
    return CustomerManagedEncryption.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerManagedEncryption>): CustomerManagedEncryption {
    const message = createBaseCustomerManagedEncryption();
    message.kmsKeyName = object.kmsKeyName ?? "";
    return message;
  },
};

function createBaseReplicationStatus(): ReplicationStatus {
  return { automatic: undefined, userManaged: undefined };
}

export const ReplicationStatus: MessageFns<ReplicationStatus> = {
  encode(message: ReplicationStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.automatic !== undefined) {
      ReplicationStatus_AutomaticStatus.encode(message.automatic, writer.uint32(10).fork()).join();
    }
    if (message.userManaged !== undefined) {
      ReplicationStatus_UserManagedStatus.encode(message.userManaged, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplicationStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplicationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.automatic = ReplicationStatus_AutomaticStatus.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userManaged = ReplicationStatus_UserManagedStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplicationStatus {
    return {
      automatic: isSet(object.automatic) ? ReplicationStatus_AutomaticStatus.fromJSON(object.automatic) : undefined,
      userManaged: isSet(object.userManaged)
        ? ReplicationStatus_UserManagedStatus.fromJSON(object.userManaged)
        : undefined,
    };
  },

  toJSON(message: ReplicationStatus): unknown {
    const obj: any = {};
    if (message.automatic !== undefined) {
      obj.automatic = ReplicationStatus_AutomaticStatus.toJSON(message.automatic);
    }
    if (message.userManaged !== undefined) {
      obj.userManaged = ReplicationStatus_UserManagedStatus.toJSON(message.userManaged);
    }
    return obj;
  },

  create(base?: DeepPartial<ReplicationStatus>): ReplicationStatus {
    return ReplicationStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplicationStatus>): ReplicationStatus {
    const message = createBaseReplicationStatus();
    message.automatic = (object.automatic !== undefined && object.automatic !== null)
      ? ReplicationStatus_AutomaticStatus.fromPartial(object.automatic)
      : undefined;
    message.userManaged = (object.userManaged !== undefined && object.userManaged !== null)
      ? ReplicationStatus_UserManagedStatus.fromPartial(object.userManaged)
      : undefined;
    return message;
  },
};

function createBaseReplicationStatus_AutomaticStatus(): ReplicationStatus_AutomaticStatus {
  return { customerManagedEncryption: undefined };
}

export const ReplicationStatus_AutomaticStatus: MessageFns<ReplicationStatus_AutomaticStatus> = {
  encode(message: ReplicationStatus_AutomaticStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerManagedEncryption !== undefined) {
      CustomerManagedEncryptionStatus.encode(message.customerManagedEncryption, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplicationStatus_AutomaticStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplicationStatus_AutomaticStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerManagedEncryption = CustomerManagedEncryptionStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplicationStatus_AutomaticStatus {
    return {
      customerManagedEncryption: isSet(object.customerManagedEncryption)
        ? CustomerManagedEncryptionStatus.fromJSON(object.customerManagedEncryption)
        : undefined,
    };
  },

  toJSON(message: ReplicationStatus_AutomaticStatus): unknown {
    const obj: any = {};
    if (message.customerManagedEncryption !== undefined) {
      obj.customerManagedEncryption = CustomerManagedEncryptionStatus.toJSON(message.customerManagedEncryption);
    }
    return obj;
  },

  create(base?: DeepPartial<ReplicationStatus_AutomaticStatus>): ReplicationStatus_AutomaticStatus {
    return ReplicationStatus_AutomaticStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplicationStatus_AutomaticStatus>): ReplicationStatus_AutomaticStatus {
    const message = createBaseReplicationStatus_AutomaticStatus();
    message.customerManagedEncryption =
      (object.customerManagedEncryption !== undefined && object.customerManagedEncryption !== null)
        ? CustomerManagedEncryptionStatus.fromPartial(object.customerManagedEncryption)
        : undefined;
    return message;
  },
};

function createBaseReplicationStatus_UserManagedStatus(): ReplicationStatus_UserManagedStatus {
  return { replicas: [] };
}

export const ReplicationStatus_UserManagedStatus: MessageFns<ReplicationStatus_UserManagedStatus> = {
  encode(message: ReplicationStatus_UserManagedStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.replicas) {
      ReplicationStatus_UserManagedStatus_ReplicaStatus.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplicationStatus_UserManagedStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplicationStatus_UserManagedStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.replicas.push(ReplicationStatus_UserManagedStatus_ReplicaStatus.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplicationStatus_UserManagedStatus {
    return {
      replicas: globalThis.Array.isArray(object?.replicas)
        ? object.replicas.map((e: any) => ReplicationStatus_UserManagedStatus_ReplicaStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReplicationStatus_UserManagedStatus): unknown {
    const obj: any = {};
    if (message.replicas?.length) {
      obj.replicas = message.replicas.map((e) => ReplicationStatus_UserManagedStatus_ReplicaStatus.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReplicationStatus_UserManagedStatus>): ReplicationStatus_UserManagedStatus {
    return ReplicationStatus_UserManagedStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplicationStatus_UserManagedStatus>): ReplicationStatus_UserManagedStatus {
    const message = createBaseReplicationStatus_UserManagedStatus();
    message.replicas = object.replicas?.map((e) => ReplicationStatus_UserManagedStatus_ReplicaStatus.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseReplicationStatus_UserManagedStatus_ReplicaStatus(): ReplicationStatus_UserManagedStatus_ReplicaStatus {
  return { location: "", customerManagedEncryption: undefined };
}

export const ReplicationStatus_UserManagedStatus_ReplicaStatus: MessageFns<
  ReplicationStatus_UserManagedStatus_ReplicaStatus
> = {
  encode(
    message: ReplicationStatus_UserManagedStatus_ReplicaStatus,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.customerManagedEncryption !== undefined) {
      CustomerManagedEncryptionStatus.encode(message.customerManagedEncryption, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplicationStatus_UserManagedStatus_ReplicaStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplicationStatus_UserManagedStatus_ReplicaStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customerManagedEncryption = CustomerManagedEncryptionStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplicationStatus_UserManagedStatus_ReplicaStatus {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      customerManagedEncryption: isSet(object.customerManagedEncryption)
        ? CustomerManagedEncryptionStatus.fromJSON(object.customerManagedEncryption)
        : undefined,
    };
  },

  toJSON(message: ReplicationStatus_UserManagedStatus_ReplicaStatus): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.customerManagedEncryption !== undefined) {
      obj.customerManagedEncryption = CustomerManagedEncryptionStatus.toJSON(message.customerManagedEncryption);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ReplicationStatus_UserManagedStatus_ReplicaStatus>,
  ): ReplicationStatus_UserManagedStatus_ReplicaStatus {
    return ReplicationStatus_UserManagedStatus_ReplicaStatus.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ReplicationStatus_UserManagedStatus_ReplicaStatus>,
  ): ReplicationStatus_UserManagedStatus_ReplicaStatus {
    const message = createBaseReplicationStatus_UserManagedStatus_ReplicaStatus();
    message.location = object.location ?? "";
    message.customerManagedEncryption =
      (object.customerManagedEncryption !== undefined && object.customerManagedEncryption !== null)
        ? CustomerManagedEncryptionStatus.fromPartial(object.customerManagedEncryption)
        : undefined;
    return message;
  },
};

function createBaseCustomerManagedEncryptionStatus(): CustomerManagedEncryptionStatus {
  return { kmsKeyVersionName: "" };
}

export const CustomerManagedEncryptionStatus: MessageFns<CustomerManagedEncryptionStatus> = {
  encode(message: CustomerManagedEncryptionStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kmsKeyVersionName !== "") {
      writer.uint32(10).string(message.kmsKeyVersionName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerManagedEncryptionStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerManagedEncryptionStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kmsKeyVersionName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerManagedEncryptionStatus {
    return { kmsKeyVersionName: isSet(object.kmsKeyVersionName) ? globalThis.String(object.kmsKeyVersionName) : "" };
  },

  toJSON(message: CustomerManagedEncryptionStatus): unknown {
    const obj: any = {};
    if (message.kmsKeyVersionName !== "") {
      obj.kmsKeyVersionName = message.kmsKeyVersionName;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerManagedEncryptionStatus>): CustomerManagedEncryptionStatus {
    return CustomerManagedEncryptionStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerManagedEncryptionStatus>): CustomerManagedEncryptionStatus {
    const message = createBaseCustomerManagedEncryptionStatus();
    message.kmsKeyVersionName = object.kmsKeyVersionName ?? "";
    return message;
  },
};

function createBaseTopic(): Topic {
  return { name: "" };
}

export const Topic: MessageFns<Topic> = {
  encode(message: Topic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Topic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Topic {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Topic): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Topic>): Topic {
    return Topic.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Topic>): Topic {
    const message = createBaseTopic();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRotation(): Rotation {
  return { nextRotationTime: undefined, rotationPeriod: undefined };
}

export const Rotation: MessageFns<Rotation> = {
  encode(message: Rotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextRotationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.nextRotationTime), writer.uint32(10).fork()).join();
    }
    if (message.rotationPeriod !== undefined) {
      Duration.encode(message.rotationPeriod, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nextRotationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rotationPeriod = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rotation {
    return {
      nextRotationTime: isSet(object.nextRotationTime) ? fromJsonTimestamp(object.nextRotationTime) : undefined,
      rotationPeriod: isSet(object.rotationPeriod) ? Duration.fromJSON(object.rotationPeriod) : undefined,
    };
  },

  toJSON(message: Rotation): unknown {
    const obj: any = {};
    if (message.nextRotationTime !== undefined) {
      obj.nextRotationTime = message.nextRotationTime.toISOString();
    }
    if (message.rotationPeriod !== undefined) {
      obj.rotationPeriod = Duration.toJSON(message.rotationPeriod);
    }
    return obj;
  },

  create(base?: DeepPartial<Rotation>): Rotation {
    return Rotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Rotation>): Rotation {
    const message = createBaseRotation();
    message.nextRotationTime = object.nextRotationTime ?? undefined;
    message.rotationPeriod = (object.rotationPeriod !== undefined && object.rotationPeriod !== null)
      ? Duration.fromPartial(object.rotationPeriod)
      : undefined;
    return message;
  },
};

function createBaseSecretPayload(): SecretPayload {
  return { data: Buffer.alloc(0), dataCrc32c: undefined };
}

export const SecretPayload: MessageFns<SecretPayload> = {
  encode(message: SecretPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.dataCrc32c !== undefined) {
      writer.uint32(16).int64(message.dataCrc32c.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataCrc32c = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretPayload {
    return {
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0),
      dataCrc32c: isSet(object.dataCrc32c) ? Long.fromValue(object.dataCrc32c) : undefined,
    };
  },

  toJSON(message: SecretPayload): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.dataCrc32c !== undefined) {
      obj.dataCrc32c = (message.dataCrc32c || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SecretPayload>): SecretPayload {
    return SecretPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecretPayload>): SecretPayload {
    const message = createBaseSecretPayload();
    message.data = object.data ?? Buffer.alloc(0);
    message.dataCrc32c = (object.dataCrc32c !== undefined && object.dataCrc32c !== null)
      ? Long.fromValue(object.dataCrc32c)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
