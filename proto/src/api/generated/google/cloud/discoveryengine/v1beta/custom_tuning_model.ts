// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/custom_tuning_model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/** Metadata that describes a custom tuned model. */
export interface CustomTuningModel {
  /**
   * Required. The fully qualified resource name of the model.
   *
   * Format:
   * `projects/{project_number}/locations/{location}/collections/{collection}/dataStores/{data_store}/customTuningModels/{custom_tuning_model}`
   * model must be an alpha-numerical string with limit of 40 characters.
   */
  name: string;
  /** The display name of the model. */
  displayName: string;
  /** The version of the model. */
  modelVersion: Long;
  /** The state that the model is in (e.g.`TRAINING` or `TRAINING_FAILED`). */
  modelState: CustomTuningModel_ModelState;
  /**
   * Timestamp the Model was created at.
   *
   * @deprecated
   */
  createTime:
    | Date
    | undefined;
  /** Timestamp the model training was initiated. */
  trainingStartTime:
    | Date
    | undefined;
  /** The metrics of the trained model. */
  metrics: { [key: string]: number };
}

/** The state of the model. */
export enum CustomTuningModel_ModelState {
  /** MODEL_STATE_UNSPECIFIED - Default value. */
  MODEL_STATE_UNSPECIFIED = 0,
  /** TRAINING_PAUSED - The model is in a paused training state. */
  TRAINING_PAUSED = 1,
  /** TRAINING - The model is currently training. */
  TRAINING = 2,
  /** TRAINING_COMPLETE - The model has successfully completed training. */
  TRAINING_COMPLETE = 3,
  /** READY_FOR_SERVING - The model is ready for serving. */
  READY_FOR_SERVING = 4,
  /** TRAINING_FAILED - The model training failed. */
  TRAINING_FAILED = 5,
  /** NO_IMPROVEMENT - The model training finished successfully but metrics did not improve. */
  NO_IMPROVEMENT = 6,
  /** INPUT_VALIDATION_FAILED - Input data validation failed. Model training didn't start. */
  INPUT_VALIDATION_FAILED = 7,
  UNRECOGNIZED = -1,
}

export function customTuningModel_ModelStateFromJSON(object: any): CustomTuningModel_ModelState {
  switch (object) {
    case 0:
    case "MODEL_STATE_UNSPECIFIED":
      return CustomTuningModel_ModelState.MODEL_STATE_UNSPECIFIED;
    case 1:
    case "TRAINING_PAUSED":
      return CustomTuningModel_ModelState.TRAINING_PAUSED;
    case 2:
    case "TRAINING":
      return CustomTuningModel_ModelState.TRAINING;
    case 3:
    case "TRAINING_COMPLETE":
      return CustomTuningModel_ModelState.TRAINING_COMPLETE;
    case 4:
    case "READY_FOR_SERVING":
      return CustomTuningModel_ModelState.READY_FOR_SERVING;
    case 5:
    case "TRAINING_FAILED":
      return CustomTuningModel_ModelState.TRAINING_FAILED;
    case 6:
    case "NO_IMPROVEMENT":
      return CustomTuningModel_ModelState.NO_IMPROVEMENT;
    case 7:
    case "INPUT_VALIDATION_FAILED":
      return CustomTuningModel_ModelState.INPUT_VALIDATION_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomTuningModel_ModelState.UNRECOGNIZED;
  }
}

export function customTuningModel_ModelStateToJSON(object: CustomTuningModel_ModelState): string {
  switch (object) {
    case CustomTuningModel_ModelState.MODEL_STATE_UNSPECIFIED:
      return "MODEL_STATE_UNSPECIFIED";
    case CustomTuningModel_ModelState.TRAINING_PAUSED:
      return "TRAINING_PAUSED";
    case CustomTuningModel_ModelState.TRAINING:
      return "TRAINING";
    case CustomTuningModel_ModelState.TRAINING_COMPLETE:
      return "TRAINING_COMPLETE";
    case CustomTuningModel_ModelState.READY_FOR_SERVING:
      return "READY_FOR_SERVING";
    case CustomTuningModel_ModelState.TRAINING_FAILED:
      return "TRAINING_FAILED";
    case CustomTuningModel_ModelState.NO_IMPROVEMENT:
      return "NO_IMPROVEMENT";
    case CustomTuningModel_ModelState.INPUT_VALIDATION_FAILED:
      return "INPUT_VALIDATION_FAILED";
    case CustomTuningModel_ModelState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CustomTuningModel_MetricsEntry {
  key: string;
  value: number;
}

function createBaseCustomTuningModel(): CustomTuningModel {
  return {
    name: "",
    displayName: "",
    modelVersion: Long.ZERO,
    modelState: 0,
    createTime: undefined,
    trainingStartTime: undefined,
    metrics: {},
  };
}

export const CustomTuningModel: MessageFns<CustomTuningModel> = {
  encode(message: CustomTuningModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (!message.modelVersion.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.modelVersion.toString());
    }
    if (message.modelState !== 0) {
      writer.uint32(32).int32(message.modelState);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.trainingStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.trainingStartTime), writer.uint32(50).fork()).join();
    }
    Object.entries(message.metrics).forEach(([key, value]) => {
      CustomTuningModel_MetricsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomTuningModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomTuningModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.modelVersion = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.modelState = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.trainingStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = CustomTuningModel_MetricsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metrics[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomTuningModel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      modelVersion: isSet(object.modelVersion) ? Long.fromValue(object.modelVersion) : Long.ZERO,
      modelState: isSet(object.modelState) ? customTuningModel_ModelStateFromJSON(object.modelState) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      trainingStartTime: isSet(object.trainingStartTime) ? fromJsonTimestamp(object.trainingStartTime) : undefined,
      metrics: isObject(object.metrics)
        ? Object.entries(object.metrics).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: CustomTuningModel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (!message.modelVersion.equals(Long.ZERO)) {
      obj.modelVersion = (message.modelVersion || Long.ZERO).toString();
    }
    if (message.modelState !== 0) {
      obj.modelState = customTuningModel_ModelStateToJSON(message.modelState);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.trainingStartTime !== undefined) {
      obj.trainingStartTime = message.trainingStartTime.toISOString();
    }
    if (message.metrics) {
      const entries = Object.entries(message.metrics);
      if (entries.length > 0) {
        obj.metrics = {};
        entries.forEach(([k, v]) => {
          obj.metrics[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<CustomTuningModel>): CustomTuningModel {
    return CustomTuningModel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomTuningModel>): CustomTuningModel {
    const message = createBaseCustomTuningModel();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.modelVersion = (object.modelVersion !== undefined && object.modelVersion !== null)
      ? Long.fromValue(object.modelVersion)
      : Long.ZERO;
    message.modelState = object.modelState ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.trainingStartTime = object.trainingStartTime ?? undefined;
    message.metrics = Object.entries(object.metrics ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCustomTuningModel_MetricsEntry(): CustomTuningModel_MetricsEntry {
  return { key: "", value: 0 };
}

export const CustomTuningModel_MetricsEntry: MessageFns<CustomTuningModel_MetricsEntry> = {
  encode(message: CustomTuningModel_MetricsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomTuningModel_MetricsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomTuningModel_MetricsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomTuningModel_MetricsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: CustomTuningModel_MetricsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomTuningModel_MetricsEntry>): CustomTuningModel_MetricsEntry {
    return CustomTuningModel_MetricsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomTuningModel_MetricsEntry>): CustomTuningModel_MetricsEntry {
    const message = createBaseCustomTuningModel_MetricsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
