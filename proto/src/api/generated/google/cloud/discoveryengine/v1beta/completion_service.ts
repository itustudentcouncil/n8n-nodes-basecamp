// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/completion_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { ImportCompletionSuggestionsRequest, ImportSuggestionDenyListEntriesRequest } from "./import_config.js";
import { PurgeCompletionSuggestionsRequest, PurgeSuggestionDenyListEntriesRequest } from "./purge_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/**
 * Request message for
 * [CompletionService.CompleteQuery][google.cloud.discoveryengine.v1beta.CompletionService.CompleteQuery]
 * method.
 */
export interface CompleteQueryRequest {
  /**
   * Required. The parent data store resource name for which the completion is
   * performed, such as
   * `projects/* /locations/global/collections/default_collection/dataStores/default_data_store`.
   */
  dataStore: string;
  /**
   * Required. The typeahead input used to fetch suggestions. Maximum length is
   * 128 characters.
   */
  query: string;
  /**
   * Specifies the autocomplete data model. This overrides any model specified
   * in the Configuration > Autocomplete section of the Cloud console. Currently
   * supported values:
   *
   * * `document` - Using suggestions generated from user-imported documents.
   * * `search-history` - Using suggestions generated from the past history of
   * [SearchService.Search][google.cloud.discoveryengine.v1beta.SearchService.Search]
   * API calls. Do not use it when there is no traffic for Search API.
   * * `user-event` - Using suggestions generated from user-imported search
   * events.
   * * `document-completable` - Using suggestions taken directly from
   * user-imported document fields marked as completable.
   *
   * Default values:
   *
   * * `document` is the default model for regular dataStores.
   * * `search-history` is the default model for site search dataStores.
   */
  queryModel: string;
  /**
   * A unique identifier for tracking visitors. For example, this could be
   * implemented with an HTTP cookie, which should be able to uniquely identify
   * a visitor on a single device. This unique identifier should not change if
   * the visitor logs in or out of the website.
   *
   * This field should NOT have a fixed value such as `unknown_visitor`.
   *
   * This should be the same identifier as
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * and
   * [SearchRequest.user_pseudo_id][google.cloud.discoveryengine.v1beta.SearchRequest.user_pseudo_id].
   *
   * The field must be a UTF-8 encoded string with a length limit of 128
   * characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
   */
  userPseudoId: string;
  /**
   * Indicates if tail suggestions should be returned if there are no
   * suggestions that match the full query. Even if set to true, if there are
   * suggestions that match the full query, those are returned and no
   * tail suggestions are returned.
   */
  includeTailSuggestions: boolean;
}

/**
 * Response message for
 * [CompletionService.CompleteQuery][google.cloud.discoveryengine.v1beta.CompletionService.CompleteQuery]
 * method.
 */
export interface CompleteQueryResponse {
  /**
   * Results of the matched query suggestions. The result list is ordered and
   * the first result is a top suggestion.
   */
  querySuggestions: CompleteQueryResponse_QuerySuggestion[];
  /**
   * True if the returned suggestions are all tail suggestions.
   *
   * For tail matching to be triggered, include_tail_suggestions in the request
   * must be true and there must be no suggestions that match the full query.
   */
  tailMatchTriggered: boolean;
}

/** Suggestions as search queries. */
export interface CompleteQueryResponse_QuerySuggestion {
  /** The suggestion for the query. */
  suggestion: string;
  /**
   * The unique document field paths that serve as the source of this
   * suggestion if it was generated from completable fields.
   *
   * This field is only populated for the document-completable model.
   */
  completableFieldPaths: string[];
}

function createBaseCompleteQueryRequest(): CompleteQueryRequest {
  return { dataStore: "", query: "", queryModel: "", userPseudoId: "", includeTailSuggestions: false };
}

export const CompleteQueryRequest: MessageFns<CompleteQueryRequest> = {
  encode(message: CompleteQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataStore !== "") {
      writer.uint32(10).string(message.dataStore);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.queryModel !== "") {
      writer.uint32(26).string(message.queryModel);
    }
    if (message.userPseudoId !== "") {
      writer.uint32(34).string(message.userPseudoId);
    }
    if (message.includeTailSuggestions !== false) {
      writer.uint32(40).bool(message.includeTailSuggestions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStore = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queryModel = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userPseudoId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeTailSuggestions = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteQueryRequest {
    return {
      dataStore: isSet(object.dataStore) ? globalThis.String(object.dataStore) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      queryModel: isSet(object.queryModel) ? globalThis.String(object.queryModel) : "",
      userPseudoId: isSet(object.userPseudoId) ? globalThis.String(object.userPseudoId) : "",
      includeTailSuggestions: isSet(object.includeTailSuggestions)
        ? globalThis.Boolean(object.includeTailSuggestions)
        : false,
    };
  },

  toJSON(message: CompleteQueryRequest): unknown {
    const obj: any = {};
    if (message.dataStore !== "") {
      obj.dataStore = message.dataStore;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.queryModel !== "") {
      obj.queryModel = message.queryModel;
    }
    if (message.userPseudoId !== "") {
      obj.userPseudoId = message.userPseudoId;
    }
    if (message.includeTailSuggestions !== false) {
      obj.includeTailSuggestions = message.includeTailSuggestions;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteQueryRequest>): CompleteQueryRequest {
    return CompleteQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteQueryRequest>): CompleteQueryRequest {
    const message = createBaseCompleteQueryRequest();
    message.dataStore = object.dataStore ?? "";
    message.query = object.query ?? "";
    message.queryModel = object.queryModel ?? "";
    message.userPseudoId = object.userPseudoId ?? "";
    message.includeTailSuggestions = object.includeTailSuggestions ?? false;
    return message;
  },
};

function createBaseCompleteQueryResponse(): CompleteQueryResponse {
  return { querySuggestions: [], tailMatchTriggered: false };
}

export const CompleteQueryResponse: MessageFns<CompleteQueryResponse> = {
  encode(message: CompleteQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.querySuggestions) {
      CompleteQueryResponse_QuerySuggestion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.tailMatchTriggered !== false) {
      writer.uint32(16).bool(message.tailMatchTriggered);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.querySuggestions.push(CompleteQueryResponse_QuerySuggestion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tailMatchTriggered = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteQueryResponse {
    return {
      querySuggestions: globalThis.Array.isArray(object?.querySuggestions)
        ? object.querySuggestions.map((e: any) => CompleteQueryResponse_QuerySuggestion.fromJSON(e))
        : [],
      tailMatchTriggered: isSet(object.tailMatchTriggered) ? globalThis.Boolean(object.tailMatchTriggered) : false,
    };
  },

  toJSON(message: CompleteQueryResponse): unknown {
    const obj: any = {};
    if (message.querySuggestions?.length) {
      obj.querySuggestions = message.querySuggestions.map((e) => CompleteQueryResponse_QuerySuggestion.toJSON(e));
    }
    if (message.tailMatchTriggered !== false) {
      obj.tailMatchTriggered = message.tailMatchTriggered;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteQueryResponse>): CompleteQueryResponse {
    return CompleteQueryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteQueryResponse>): CompleteQueryResponse {
    const message = createBaseCompleteQueryResponse();
    message.querySuggestions =
      object.querySuggestions?.map((e) => CompleteQueryResponse_QuerySuggestion.fromPartial(e)) || [];
    message.tailMatchTriggered = object.tailMatchTriggered ?? false;
    return message;
  },
};

function createBaseCompleteQueryResponse_QuerySuggestion(): CompleteQueryResponse_QuerySuggestion {
  return { suggestion: "", completableFieldPaths: [] };
}

export const CompleteQueryResponse_QuerySuggestion: MessageFns<CompleteQueryResponse_QuerySuggestion> = {
  encode(message: CompleteQueryResponse_QuerySuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.suggestion !== "") {
      writer.uint32(10).string(message.suggestion);
    }
    for (const v of message.completableFieldPaths) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteQueryResponse_QuerySuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteQueryResponse_QuerySuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.suggestion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.completableFieldPaths.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteQueryResponse_QuerySuggestion {
    return {
      suggestion: isSet(object.suggestion) ? globalThis.String(object.suggestion) : "",
      completableFieldPaths: globalThis.Array.isArray(object?.completableFieldPaths)
        ? object.completableFieldPaths.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CompleteQueryResponse_QuerySuggestion): unknown {
    const obj: any = {};
    if (message.suggestion !== "") {
      obj.suggestion = message.suggestion;
    }
    if (message.completableFieldPaths?.length) {
      obj.completableFieldPaths = message.completableFieldPaths;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteQueryResponse_QuerySuggestion>): CompleteQueryResponse_QuerySuggestion {
    return CompleteQueryResponse_QuerySuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteQueryResponse_QuerySuggestion>): CompleteQueryResponse_QuerySuggestion {
    const message = createBaseCompleteQueryResponse_QuerySuggestion();
    message.suggestion = object.suggestion ?? "";
    message.completableFieldPaths = object.completableFieldPaths?.map((e) => e) || [];
    return message;
  },
};

/** Service for Auto-Completion. */
export type CompletionServiceDefinition = typeof CompletionServiceDefinition;
export const CompletionServiceDefinition = {
  name: "CompletionService",
  fullName: "google.cloud.discoveryengine.v1beta.CompletionService",
  methods: {
    /** Completes the specified user input with keyword suggestions. */
    completeQuery: {
      name: "CompleteQuery",
      requestType: CompleteQueryRequest,
      requestStream: false,
      responseType: CompleteQueryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              160,
              1,
              90,
              86,
              18,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              81,
              117,
              101,
              114,
              121,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              81,
              117,
              101,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Imports all
     * [SuggestionDenyListEntry][google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry]
     * for a DataStore.
     */
    importSuggestionDenyListEntries: {
      name: "ImportSuggestionDenyListEntries",
      requestType: ImportSuggestionDenyListEntriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              154,
              1,
              10,
              75,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              75,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              196,
              1,
              58,
              1,
              42,
              90,
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              34,
              99,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Permanently deletes all
     * [SuggestionDenyListEntry][google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry]
     * for a DataStore.
     */
    purgeSuggestionDenyListEntries: {
      name: "PurgeSuggestionDenyListEntries",
      requestType: PurgeSuggestionDenyListEntriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              152,
              1,
              10,
              74,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              74,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              195,
              1,
              58,
              1,
              42,
              90,
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              42,
              125,
              47,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
              34,
              98,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              68,
              101,
              110,
              121,
              76,
              105,
              115,
              116,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Imports
     * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
     * for a DataStore.
     */
    importCompletionSuggestions: {
      name: "ImportCompletionSuggestions",
      requestType: ImportCompletionSuggestionsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              146,
              1,
              10,
              71,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              71,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              188,
              1,
              58,
              1,
              42,
              90,
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              34,
              95,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Permanently deletes all
     * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
     * for a DataStore.
     */
    purgeCompletionSuggestions: {
      name: "PurgeCompletionSuggestions",
      requestType: PurgeCompletionSuggestionsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              144,
              1,
              10,
              70,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              70,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              186,
              1,
              58,
              1,
              42,
              90,
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
              34,
              94,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CompletionServiceImplementation<CallContextExt = {}> {
  /** Completes the specified user input with keyword suggestions. */
  completeQuery(
    request: CompleteQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CompleteQueryResponse>>;
  /**
   * Imports all
   * [SuggestionDenyListEntry][google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry]
   * for a DataStore.
   */
  importSuggestionDenyListEntries(
    request: ImportSuggestionDenyListEntriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Permanently deletes all
   * [SuggestionDenyListEntry][google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry]
   * for a DataStore.
   */
  purgeSuggestionDenyListEntries(
    request: PurgeSuggestionDenyListEntriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Imports
   * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
   * for a DataStore.
   */
  importCompletionSuggestions(
    request: ImportCompletionSuggestionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Permanently deletes all
   * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
   * for a DataStore.
   */
  purgeCompletionSuggestions(
    request: PurgeCompletionSuggestionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface CompletionServiceClient<CallOptionsExt = {}> {
  /** Completes the specified user input with keyword suggestions. */
  completeQuery(
    request: DeepPartial<CompleteQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CompleteQueryResponse>;
  /**
   * Imports all
   * [SuggestionDenyListEntry][google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry]
   * for a DataStore.
   */
  importSuggestionDenyListEntries(
    request: DeepPartial<ImportSuggestionDenyListEntriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Permanently deletes all
   * [SuggestionDenyListEntry][google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry]
   * for a DataStore.
   */
  purgeSuggestionDenyListEntries(
    request: DeepPartial<PurgeSuggestionDenyListEntriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Imports
   * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
   * for a DataStore.
   */
  importCompletionSuggestions(
    request: DeepPartial<ImportCompletionSuggestionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Permanently deletes all
   * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
   * for a DataStore.
   */
  purgeCompletionSuggestions(
    request: DeepPartial<PurgeCompletionSuggestionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
