// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/user_event_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { HttpBody } from "../../../api/httpbody.js";
import { Operation } from "../../../longrunning/operations.js";
import { ImportUserEventsRequest } from "./import_config.js";
import { PurgeUserEventsRequest } from "./purge_config.js";
import { UserEvent } from "./user_event.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/** Request message for WriteUserEvent method. */
export interface WriteUserEventRequest {
  /**
   * Required. The parent resource name.
   * If the write user event action is applied in
   * [DataStore][google.cloud.discoveryengine.v1beta.DataStore] level, the
   * format is:
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
   * If the write user event action is applied in [Location][] level, for
   * example, the event with
   * [Document][google.cloud.discoveryengine.v1beta.Document] across multiple
   * [DataStore][google.cloud.discoveryengine.v1beta.DataStore], the format is:
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /** Required. User event to write. */
  userEvent?:
    | UserEvent
    | undefined;
  /**
   * If set to true, the user event is written asynchronously after
   * validation, and the API responds without waiting for the write.
   */
  writeAsync: boolean;
}

/** Request message for CollectUserEvent method. */
export interface CollectUserEventRequest {
  /**
   * Required. The parent DataStore resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
   */
  parent: string;
  /**
   * Required. URL encoded UserEvent proto with a length limit of 2,000,000
   * characters.
   */
  userEvent: string;
  /**
   * The URL including cgi-parameters but excluding the hash fragment with a
   * length limit of 5,000 characters. This is often more useful than the
   * referer URL, because many browsers only send the domain for third-party
   * requests.
   */
  uri?:
    | string
    | undefined;
  /**
   * The event timestamp in milliseconds. This prevents browser caching of
   * otherwise identical get requests. The name is abbreviated to reduce the
   * payload bytes.
   */
  ets?: Long | undefined;
}

function createBaseWriteUserEventRequest(): WriteUserEventRequest {
  return { parent: "", userEvent: undefined, writeAsync: false };
}

export const WriteUserEventRequest: MessageFns<WriteUserEventRequest> = {
  encode(message: WriteUserEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEvent !== undefined) {
      UserEvent.encode(message.userEvent, writer.uint32(18).fork()).join();
    }
    if (message.writeAsync !== false) {
      writer.uint32(24).bool(message.writeAsync);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteUserEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteUserEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = UserEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.writeAsync = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteUserEventRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEvent: isSet(object.userEvent) ? UserEvent.fromJSON(object.userEvent) : undefined,
      writeAsync: isSet(object.writeAsync) ? globalThis.Boolean(object.writeAsync) : false,
    };
  },

  toJSON(message: WriteUserEventRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEvent !== undefined) {
      obj.userEvent = UserEvent.toJSON(message.userEvent);
    }
    if (message.writeAsync !== false) {
      obj.writeAsync = message.writeAsync;
    }
    return obj;
  },

  create(base?: DeepPartial<WriteUserEventRequest>): WriteUserEventRequest {
    return WriteUserEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteUserEventRequest>): WriteUserEventRequest {
    const message = createBaseWriteUserEventRequest();
    message.parent = object.parent ?? "";
    message.userEvent = (object.userEvent !== undefined && object.userEvent !== null)
      ? UserEvent.fromPartial(object.userEvent)
      : undefined;
    message.writeAsync = object.writeAsync ?? false;
    return message;
  },
};

function createBaseCollectUserEventRequest(): CollectUserEventRequest {
  return { parent: "", userEvent: "", uri: undefined, ets: undefined };
}

export const CollectUserEventRequest: MessageFns<CollectUserEventRequest> = {
  encode(message: CollectUserEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEvent !== "") {
      writer.uint32(18).string(message.userEvent);
    }
    if (message.uri !== undefined) {
      writer.uint32(26).string(message.uri);
    }
    if (message.ets !== undefined) {
      writer.uint32(32).int64(message.ets.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectUserEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectUserEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ets = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectUserEventRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEvent: isSet(object.userEvent) ? globalThis.String(object.userEvent) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      ets: isSet(object.ets) ? Long.fromValue(object.ets) : undefined,
    };
  },

  toJSON(message: CollectUserEventRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEvent !== "") {
      obj.userEvent = message.userEvent;
    }
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.ets !== undefined) {
      obj.ets = (message.ets || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CollectUserEventRequest>): CollectUserEventRequest {
    return CollectUserEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CollectUserEventRequest>): CollectUserEventRequest {
    const message = createBaseCollectUserEventRequest();
    message.parent = object.parent ?? "";
    message.userEvent = object.userEvent ?? "";
    message.uri = object.uri ?? undefined;
    message.ets = (object.ets !== undefined && object.ets !== null) ? Long.fromValue(object.ets) : undefined;
    return message;
  },
};

/** Service for ingesting end user actions on a website to Discovery Engine API. */
export type UserEventServiceDefinition = typeof UserEventServiceDefinition;
export const UserEventServiceDefinition = {
  name: "UserEventService",
  fullName: "google.cloud.discoveryengine.v1beta.UserEventService",
  methods: {
    /** Writes a single user event. */
    writeUserEvent: {
      name: "WriteUserEvent",
      requestType: WriteUserEventRequest,
      requestStream: false,
      responseType: UserEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              254,
              1,
              58,
              10,
              117,
              115,
              101,
              114,
              95,
              101,
              118,
              101,
              110,
              116,
              90,
              97,
              58,
              10,
              117,
              115,
              101,
              114,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              83,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              119,
              114,
              105,
              116,
              101,
              90,
              70,
              58,
              10,
              117,
              115,
              101,
              114,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              56,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              119,
              114,
              105,
              116,
              101,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Writes a single user event from the browser. This uses a GET request to
     * due to browser restriction of POST-ing to a third-party domain.
     *
     * This method is used only by the Discovery Engine API JavaScript pixel and
     * Google Tag Manager. Users should not call this method directly.
     */
    collectUserEvent: {
      name: "CollectUserEvent",
      requestType: CollectUserEventRequest,
      requestStream: false,
      responseType: HttpBody,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              224,
              1,
              90,
              87,
              18,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              90,
              60,
              18,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes permanently all user events specified by the filter provided.
     * Depending on the number of events specified by the filter, this operation
     * could take hours or days to complete. To test a filter, use the list
     * command first.
     */
    purgeUserEvents: {
      name: "PurgeUserEvents",
      requestType: PurgeUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              122,
              10,
              59,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              59,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              164,
              1,
              58,
              1,
              42,
              90,
              88,
              58,
              1,
              42,
              34,
              83,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
              34,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of user events. Request processing might be
     * synchronous. Events that already exist are skipped.
     * Use this method for backfilling historical user events.
     *
     * Operation.response is of type ImportResponse. Note that it is
     * possible for a subset of the items to be successfully inserted.
     * Operation.metadata is of type ImportMetadata.
     */
    importUserEvents: {
      name: "ImportUserEvents",
      requestType: ImportUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              124,
              10,
              60,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              60,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              166,
              1,
              58,
              1,
              42,
              90,
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface UserEventServiceImplementation<CallContextExt = {}> {
  /** Writes a single user event. */
  writeUserEvent(
    request: WriteUserEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UserEvent>>;
  /**
   * Writes a single user event from the browser. This uses a GET request to
   * due to browser restriction of POST-ing to a third-party domain.
   *
   * This method is used only by the Discovery Engine API JavaScript pixel and
   * Google Tag Manager. Users should not call this method directly.
   */
  collectUserEvent(
    request: CollectUserEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpBody>>;
  /**
   * Deletes permanently all user events specified by the filter provided.
   * Depending on the number of events specified by the filter, this operation
   * could take hours or days to complete. To test a filter, use the list
   * command first.
   */
  purgeUserEvents(
    request: PurgeUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Bulk import of user events. Request processing might be
   * synchronous. Events that already exist are skipped.
   * Use this method for backfilling historical user events.
   *
   * Operation.response is of type ImportResponse. Note that it is
   * possible for a subset of the items to be successfully inserted.
   * Operation.metadata is of type ImportMetadata.
   */
  importUserEvents(
    request: ImportUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface UserEventServiceClient<CallOptionsExt = {}> {
  /** Writes a single user event. */
  writeUserEvent(
    request: DeepPartial<WriteUserEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UserEvent>;
  /**
   * Writes a single user event from the browser. This uses a GET request to
   * due to browser restriction of POST-ing to a third-party domain.
   *
   * This method is used only by the Discovery Engine API JavaScript pixel and
   * Google Tag Manager. Users should not call this method directly.
   */
  collectUserEvent(
    request: DeepPartial<CollectUserEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpBody>;
  /**
   * Deletes permanently all user events specified by the filter provided.
   * Depending on the number of events specified by the filter, this operation
   * could take hours or days to complete. To test a filter, use the list
   * command first.
   */
  purgeUserEvents(
    request: DeepPartial<PurgeUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Bulk import of user events. Request processing might be
   * synchronous. Events that already exist are skipped.
   * Use this method for backfilling historical user events.
   *
   * Operation.response is of type ImportResponse. Note that it is
   * possible for a subset of the items to be successfully inserted.
   * Operation.metadata is of type ImportMetadata.
   */
  importUserEvents(
    request: DeepPartial<ImportUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
