// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/serving_config_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { ServingConfig } from "./serving_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/** Request for UpdateServingConfig method. */
export interface UpdateServingConfigRequest {
  /** Required. The ServingConfig to update. */
  servingConfig:
    | ServingConfig
    | undefined;
  /**
   * Indicates which fields in the provided
   * [ServingConfig][google.cloud.discoveryengine.v1beta.ServingConfig] to
   * update. The following are NOT supported:
   *
   * * [ServingConfig.name][google.cloud.discoveryengine.v1beta.ServingConfig.name]
   *
   * If not set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/** Request for GetServingConfig method. */
export interface GetServingConfigRequest {
  /**
   * Required. The resource name of the ServingConfig to get. Format:
   * `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}/servingConfigs/{serving_config_id}`
   */
  name: string;
}

/** Request for ListServingConfigs method. */
export interface ListServingConfigsRequest {
  /**
   * Required. Full resource name of the parent resource. Format:
   * `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}`
   */
  parent: string;
  /**
   * Optional. Maximum number of results to return. If unspecified, defaults
   * to 100. If a value greater than 100 is provided, at most 100 results are
   * returned.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListServingConfigs` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Response for ListServingConfigs method. */
export interface ListServingConfigsResponse {
  /** All the ServingConfigs for a given dataStore. */
  servingConfigs: ServingConfig[];
  /** Pagination token, if not returned indicates the last page. */
  nextPageToken: string;
}

function createBaseUpdateServingConfigRequest(): UpdateServingConfigRequest {
  return { servingConfig: undefined, updateMask: undefined };
}

export const UpdateServingConfigRequest: MessageFns<UpdateServingConfigRequest> = {
  encode(message: UpdateServingConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.servingConfig !== undefined) {
      ServingConfig.encode(message.servingConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServingConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServingConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servingConfig = ServingConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServingConfigRequest {
    return {
      servingConfig: isSet(object.servingConfig) ? ServingConfig.fromJSON(object.servingConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateServingConfigRequest): unknown {
    const obj: any = {};
    if (message.servingConfig !== undefined) {
      obj.servingConfig = ServingConfig.toJSON(message.servingConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServingConfigRequest>): UpdateServingConfigRequest {
    return UpdateServingConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServingConfigRequest>): UpdateServingConfigRequest {
    const message = createBaseUpdateServingConfigRequest();
    message.servingConfig = (object.servingConfig !== undefined && object.servingConfig !== null)
      ? ServingConfig.fromPartial(object.servingConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetServingConfigRequest(): GetServingConfigRequest {
  return { name: "" };
}

export const GetServingConfigRequest: MessageFns<GetServingConfigRequest> = {
  encode(message: GetServingConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServingConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServingConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServingConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServingConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServingConfigRequest>): GetServingConfigRequest {
    return GetServingConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServingConfigRequest>): GetServingConfigRequest {
    const message = createBaseGetServingConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListServingConfigsRequest(): ListServingConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListServingConfigsRequest: MessageFns<ListServingConfigsRequest> = {
  encode(message: ListServingConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServingConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServingConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServingConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListServingConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServingConfigsRequest>): ListServingConfigsRequest {
    return ListServingConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServingConfigsRequest>): ListServingConfigsRequest {
    const message = createBaseListServingConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListServingConfigsResponse(): ListServingConfigsResponse {
  return { servingConfigs: [], nextPageToken: "" };
}

export const ListServingConfigsResponse: MessageFns<ListServingConfigsResponse> = {
  encode(message: ListServingConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servingConfigs) {
      ServingConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServingConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServingConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servingConfigs.push(ServingConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServingConfigsResponse {
    return {
      servingConfigs: globalThis.Array.isArray(object?.servingConfigs)
        ? object.servingConfigs.map((e: any) => ServingConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServingConfigsResponse): unknown {
    const obj: any = {};
    if (message.servingConfigs?.length) {
      obj.servingConfigs = message.servingConfigs.map((e) => ServingConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServingConfigsResponse>): ListServingConfigsResponse {
    return ListServingConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServingConfigsResponse>): ListServingConfigsResponse {
    const message = createBaseListServingConfigsResponse();
    message.servingConfigs = object.servingConfigs?.map((e) => ServingConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service for operations related to
 * [ServingConfig][google.cloud.discoveryengine.v1beta.ServingConfig].
 */
export type ServingConfigServiceDefinition = typeof ServingConfigServiceDefinition;
export const ServingConfigServiceDefinition = {
  name: "ServingConfigService",
  fullName: "google.cloud.discoveryengine.v1beta.ServingConfigService",
  methods: {
    /**
     * Updates a ServingConfig.
     *
     * Returns a NOT_FOUND error if the ServingConfig does not exist.
     */
    updateServingConfig: {
      name: "UpdateServingConfig",
      requestType: UpdateServingConfigRequest,
      requestStream: false,
      responseType: ServingConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              201,
              2,
              58,
              14,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              114,
              58,
              14,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              96,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              111,
              58,
              14,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              93,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              50,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a ServingConfig.
     *
     * Returns a NotFound error if the ServingConfig does not exist.
     */
    getServingConfig: {
      name: "GetServingConfig",
      requestType: GetServingConfigRequest,
      requestStream: false,
      responseType: ServingConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              236,
              1,
              90,
              83,
              18,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              90,
              80,
              18,
              78,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              18,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all ServingConfigs linked to this dataStore. */
    listServingConfigs: {
      name: "ListServingConfigs",
      requestType: ListServingConfigsRequest,
      requestStream: false,
      responseType: ListServingConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              236,
              1,
              90,
              83,
              18,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              90,
              80,
              18,
              78,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServingConfigServiceImplementation<CallContextExt = {}> {
  /**
   * Updates a ServingConfig.
   *
   * Returns a NOT_FOUND error if the ServingConfig does not exist.
   */
  updateServingConfig(
    request: UpdateServingConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServingConfig>>;
  /**
   * Gets a ServingConfig.
   *
   * Returns a NotFound error if the ServingConfig does not exist.
   */
  getServingConfig(
    request: GetServingConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServingConfig>>;
  /** Lists all ServingConfigs linked to this dataStore. */
  listServingConfigs(
    request: ListServingConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServingConfigsResponse>>;
}

export interface ServingConfigServiceClient<CallOptionsExt = {}> {
  /**
   * Updates a ServingConfig.
   *
   * Returns a NOT_FOUND error if the ServingConfig does not exist.
   */
  updateServingConfig(
    request: DeepPartial<UpdateServingConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServingConfig>;
  /**
   * Gets a ServingConfig.
   *
   * Returns a NotFound error if the ServingConfig does not exist.
   */
  getServingConfig(
    request: DeepPartial<GetServingConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServingConfig>;
  /** Lists all ServingConfigs linked to this dataStore. */
  listServingConfigs(
    request: DeepPartial<ListServingConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServingConfigsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
