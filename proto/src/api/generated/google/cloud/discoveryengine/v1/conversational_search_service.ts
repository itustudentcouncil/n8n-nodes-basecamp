// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1/conversational_search_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Answer } from "./answer.js";
import { Conversation, Reply, TextInput } from "./conversation.js";
import {
  SearchRequest_BoostSpec,
  SearchRequest_ContentSearchSpec_SearchResultMode,
  searchRequest_ContentSearchSpec_SearchResultModeFromJSON,
  searchRequest_ContentSearchSpec_SearchResultModeToJSON,
  SearchRequest_ContentSearchSpec_SummarySpec,
  SearchRequest_DataStoreSpec,
  SearchResponse_SearchResult,
} from "./search_service.js";
import { Query, Session } from "./session.js";

export const protobufPackage = "google.cloud.discoveryengine.v1";

/**
 * Request message for
 * [ConversationalSearchService.ConverseConversation][google.cloud.discoveryengine.v1.ConversationalSearchService.ConverseConversation]
 * method.
 */
export interface ConverseConversationRequest {
  /**
   * Required. The resource name of the Conversation to get. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
   * Use
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
   * to activate auto session mode, which automatically creates a new
   * conversation inside a ConverseConversation session.
   */
  name: string;
  /** Required. Current user input. */
  query:
    | TextInput
    | undefined;
  /**
   * The resource name of the Serving Config to use. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`
   * If this is not set, the default serving config will be used.
   */
  servingConfig: string;
  /**
   * The conversation to be used by auto session only. The name field will be
   * ignored as we automatically assign new name for the conversation in auto
   * session.
   */
  conversation:
    | Conversation
    | undefined;
  /** Whether to turn on safe search. */
  safeSearch: boolean;
  /**
   * The user labels applied to a resource must meet the following requirements:
   *
   * * Each resource can have multiple labels, up to a maximum of 64.
   * * Each label must be a key-value pair.
   * * Keys have a minimum length of 1 character and a maximum length of 63
   *   characters and cannot be empty. Values can be empty and have a maximum
   *   length of 63 characters.
   * * Keys and values can contain only lowercase letters, numeric characters,
   *   underscores, and dashes. All characters must use UTF-8 encoding, and
   *   international characters are allowed.
   * * The key portion of a label must be unique. However, you can use the same
   *   key with multiple resources.
   * * Keys must start with a lowercase letter or international character.
   *
   * See [Google Cloud
   * Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   */
  userLabels: { [key: string]: string };
  /** A specification for configuring the summary returned in the response. */
  summarySpec:
    | SearchRequest_ContentSearchSpec_SummarySpec
    | undefined;
  /**
   * The filter syntax consists of an expression language for constructing a
   * predicate from one or more fields of the documents being filtered. Filter
   * expression is case-sensitive. This will be used to filter search results
   * which may affect the summary response.
   *
   * If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   *
   * Filtering in Vertex AI Search is done by mapping the LHS filter key to a
   * key property defined in the Vertex AI Search backend -- this mapping is
   * defined by the customer in their schema. For example a media customer might
   * have a field 'name' in their schema. In this case the filter would look
   * like this: filter --> name:'ANY("king kong")'
   *
   * For more information about filtering including syntax and filter
   * operators, see
   * [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
   */
  filter: string;
  /**
   * Boost specification to boost certain documents in search results which may
   * affect the converse response. For more information on boosting, see
   * [Boosting](https://cloud.google.com/retail/docs/boosting#boost)
   */
  boostSpec: SearchRequest_BoostSpec | undefined;
}

export interface ConverseConversationRequest_UserLabelsEntry {
  key: string;
  value: string;
}

/**
 * Response message for
 * [ConversationalSearchService.ConverseConversation][google.cloud.discoveryengine.v1.ConversationalSearchService.ConverseConversation]
 * method.
 */
export interface ConverseConversationResponse {
  /** Answer to the current query. */
  reply:
    | Reply
    | undefined;
  /** Updated conversation including the answer. */
  conversation:
    | Conversation
    | undefined;
  /** Search Results. */
  searchResults: SearchResponse_SearchResult[];
}

/** Request for CreateConversation method. */
export interface CreateConversationRequest {
  /**
   * Required. Full resource name of parent data store. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   */
  parent: string;
  /** Required. The conversation to create. */
  conversation: Conversation | undefined;
}

/** Request for UpdateConversation method. */
export interface UpdateConversationRequest {
  /** Required. The Conversation to update. */
  conversation:
    | Conversation
    | undefined;
  /**
   * Indicates which fields in the provided
   * [Conversation][google.cloud.discoveryengine.v1.Conversation] to update. The
   * following are NOT supported:
   *
   * * [Conversation.name][google.cloud.discoveryengine.v1.Conversation.name]
   *
   * If not set or empty, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/** Request for DeleteConversation method. */
export interface DeleteConversationRequest {
  /**
   * Required. The resource name of the Conversation to delete. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
   */
  name: string;
}

/** Request for GetConversation method. */
export interface GetConversationRequest {
  /**
   * Required. The resource name of the Conversation to get. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
   */
  name: string;
}

/** Request for ListConversations method. */
export interface ListConversationsRequest {
  /**
   * Required. The data store resource name. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   */
  parent: string;
  /**
   * Maximum number of results to return. If unspecified, defaults
   * to 50. Max allowed value is 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListConversations` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /**
   * A filter to apply on the list results. The supported features are:
   * user_pseudo_id, state.
   *
   * Example:
   * "user_pseudo_id = some_id"
   */
  filter: string;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   * Supported fields:
   *   * `update_time`
   *   * `create_time`
   *   * `conversation_name`
   *
   * Example:
   * "update_time desc"
   * "create_time"
   */
  orderBy: string;
}

/** Response for ListConversations method. */
export interface ListConversationsResponse {
  /** All the Conversations for a given data store. */
  conversations: Conversation[];
  /** Pagination token, if not returned indicates the last page. */
  nextPageToken: string;
}

/**
 * Request message for
 * [ConversationalSearchService.AnswerQuery][google.cloud.discoveryengine.v1.ConversationalSearchService.AnswerQuery]
 * method.
 */
export interface AnswerQueryRequest {
  /**
   * Required. The resource name of the Search serving config, such as
   * `projects/* /locations/global/collections/default_collection/engines/* /servingConfigs/default_serving_config`,
   * or
   * `projects/* /locations/global/collections/default_collection/dataStores/* /servingConfigs/default_serving_config`.
   * This field is used to identify the serving configuration name, set
   * of models used to make the search.
   */
  servingConfig: string;
  /** Required. Current user query. */
  query:
    | Query
    | undefined;
  /**
   * The session resource name. Not required.
   *
   * When session field is not set, the API is in sessionless mode.
   *
   * We support auto session mode: users can use the wildcard symbol `-` as
   * session ID.  A new ID will be automatically generated and assigned.
   */
  session: string;
  /** Model specification. */
  safetySpec:
    | AnswerQueryRequest_SafetySpec
    | undefined;
  /** Related questions specification. */
  relatedQuestionsSpec:
    | AnswerQueryRequest_RelatedQuestionsSpec
    | undefined;
  /** Answer generation specification. */
  answerGenerationSpec:
    | AnswerQueryRequest_AnswerGenerationSpec
    | undefined;
  /** Search specification. */
  searchSpec:
    | AnswerQueryRequest_SearchSpec
    | undefined;
  /** Query understanding specification. */
  queryUnderstandingSpec:
    | AnswerQueryRequest_QueryUnderstandingSpec
    | undefined;
  /**
   * Asynchronous mode control.
   *
   * If enabled, the response will be returned with answer/session resource
   * name without final answer. The API users need to do the polling to get
   * the latest status of answer/session by calling
   * [ConversationalSearchService.GetAnswer][google.cloud.discoveryengine.v1.ConversationalSearchService.GetAnswer]
   * or
   * [ConversationalSearchService.GetSession][google.cloud.discoveryengine.v1.ConversationalSearchService.GetSession]
   * method.
   */
  asynchronousMode: boolean;
  /**
   * A unique identifier for tracking visitors. For example, this could be
   * implemented with an HTTP cookie, which should be able to uniquely identify
   * a visitor on a single device. This unique identifier should not change if
   * the visitor logs in or out of the website.
   *
   * This field should NOT have a fixed value such as `unknown_visitor`.
   *
   * The field must be a UTF-8 encoded string with a length limit of 128
   * characters. Otherwise, an  `INVALID_ARGUMENT`  error is returned.
   */
  userPseudoId: string;
  /**
   * The user labels applied to a resource must meet the following requirements:
   *
   * * Each resource can have multiple labels, up to a maximum of 64.
   * * Each label must be a key-value pair.
   * * Keys have a minimum length of 1 character and a maximum length of 63
   *   characters and cannot be empty. Values can be empty and have a maximum
   *   length of 63 characters.
   * * Keys and values can contain only lowercase letters, numeric characters,
   *   underscores, and dashes. All characters must use UTF-8 encoding, and
   *   international characters are allowed.
   * * The key portion of a label must be unique. However, you can use the same
   *   key with multiple resources.
   * * Keys must start with a lowercase letter or international character.
   *
   * See [Google Cloud
   * Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   */
  userLabels: { [key: string]: string };
}

/** Safety specification. */
export interface AnswerQueryRequest_SafetySpec {
  /**
   * Enable the safety filtering on the answer response. It is false by
   * default.
   */
  enable: boolean;
}

/** Related questions specification. */
export interface AnswerQueryRequest_RelatedQuestionsSpec {
  /** Enable related questions feature if true. */
  enable: boolean;
}

/** Answer generation specification. */
export interface AnswerQueryRequest_AnswerGenerationSpec {
  /** Answer generation model specification. */
  modelSpec:
    | AnswerQueryRequest_AnswerGenerationSpec_ModelSpec
    | undefined;
  /** Answer generation prompt specification. */
  promptSpec:
    | AnswerQueryRequest_AnswerGenerationSpec_PromptSpec
    | undefined;
  /**
   * Specifies whether to include citation metadata in the answer. The default
   * value is `false`.
   */
  includeCitations: boolean;
  /**
   * Language code for Answer. Use language tags defined by
   * [BCP47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).
   * Note: This is an experimental feature.
   */
  answerLanguageCode: string;
  /**
   * Specifies whether to filter out adversarial queries. The default value
   * is `false`.
   *
   * Google employs search-query classification to detect adversarial
   * queries. No answer is returned if the search query is classified as an
   * adversarial query. For example, a user might ask a question regarding
   * negative comments about the company or submit a query designed to
   * generate unsafe, policy-violating output. If this field is set to
   * `true`, we skip generating answers for adversarial queries and return
   * fallback messages instead.
   */
  ignoreAdversarialQuery: boolean;
  /**
   * Specifies whether to filter out queries that are not answer-seeking.
   * The default value is `false`.
   *
   * Google employs search-query classification to detect answer-seeking
   * queries. No answer is returned if the search query is classified as a
   * non-answer seeking query. If this field is set to `true`, we skip
   * generating answers for non-answer seeking queries and return
   * fallback messages instead.
   */
  ignoreNonAnswerSeekingQuery: boolean;
  /**
   * Specifies whether to filter out queries that have low relevance.
   *
   * If this field is set to `false`, all search results are used regardless
   * of relevance to generate answers. If set to `true` or unset, the behavior
   * will be determined automatically by the service.
   */
  ignoreLowRelevantContent?: boolean | undefined;
}

/** Answer Generation Model specification. */
export interface AnswerQueryRequest_AnswerGenerationSpec_ModelSpec {
  /**
   * Model version. If not set, it will use the default stable model.
   * Allowed values are: stable, preview.
   */
  modelVersion: string;
}

/** Answer generation prompt specification. */
export interface AnswerQueryRequest_AnswerGenerationSpec_PromptSpec {
  /** Customized preamble. */
  preamble: string;
}

/** Search specification. */
export interface AnswerQueryRequest_SearchSpec {
  /** Search parameters. */
  searchParams?:
    | AnswerQueryRequest_SearchSpec_SearchParams
    | undefined;
  /** Search result list. */
  searchResultList?: AnswerQueryRequest_SearchSpec_SearchResultList | undefined;
}

/** Search parameters. */
export interface AnswerQueryRequest_SearchSpec_SearchParams {
  /**
   * Number of search results to return.
   * The default value is 10.
   */
  maxReturnResults: number;
  /**
   * The filter syntax consists of an expression language for constructing
   * a predicate from one or more fields of the documents being filtered.
   * Filter expression is case-sensitive. This will be used to filter
   * search results which may affect the Answer response.
   *
   * If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   *
   * Filtering in Vertex AI Search is done by mapping the LHS filter key
   * to a key property defined in the Vertex AI Search backend -- this
   * mapping is defined by the customer in their schema. For example a
   * media customers might have a field 'name' in their schema. In this
   * case the filter would look like this: filter --> name:'ANY("king
   * kong")'
   *
   * For more information about filtering including syntax and filter
   * operators, see
   * [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
   */
  filter: string;
  /**
   * Boost specification to boost certain documents in search results which
   * may affect the answer query response. For more information on boosting,
   * see [Boosting](https://cloud.google.com/retail/docs/boosting#boost)
   */
  boostSpec:
    | SearchRequest_BoostSpec
    | undefined;
  /**
   * The order in which documents are returned. Documents can be ordered
   * by a field in an [Document][google.cloud.discoveryengine.v1.Document]
   * object. Leave it unset if ordered by relevance. `order_by` expression
   * is case-sensitive. For more information on ordering, see
   * [Ordering](https://cloud.google.com/retail/docs/filter-and-order#order)
   *
   * If this field is unrecognizable, an `INVALID_ARGUMENT` is returned.
   */
  orderBy: string;
  /**
   * Specifies the search result mode. If unspecified, the
   * search result mode defaults to `DOCUMENTS`.
   * See [parse and chunk
   * documents](https://cloud.google.com/generative-ai-app-builder/docs/parse-chunk-documents)
   */
  searchResultMode: SearchRequest_ContentSearchSpec_SearchResultMode;
  /**
   * Specs defining dataStores to filter on in a search call and
   * configurations for those dataStores. This is only considered for
   * engines with multiple dataStores use case. For single dataStore within
   * an engine, they should use the specs at the top level.
   */
  dataStoreSpecs: SearchRequest_DataStoreSpec[];
}

/** Search result list. */
export interface AnswerQueryRequest_SearchSpec_SearchResultList {
  /** Search results. */
  searchResults: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult[];
}

/** Search result. */
export interface AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult {
  /** Unstructured document information. */
  unstructuredDocumentInfo?:
    | AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo
    | undefined;
  /** Chunk information. */
  chunkInfo?: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo | undefined;
}

/** Unstructured document information. */
export interface AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo {
  /** Document resource name. */
  document: string;
  /** URI for the document. */
  uri: string;
  /** Title. */
  title: string;
  /** List of document contexts. */
  documentContexts:
    AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext[];
  /** List of extractive segments. */
  extractiveSegments:
    AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment[];
  /** List of extractive answers. */
  extractiveAnswers:
    AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer[];
}

/** Document context. */
export interface AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext {
  /** Page identifier. */
  pageIdentifier: string;
  /** Document content. */
  content: string;
}

/**
 * Extractive segment.
 * [Guide](https://cloud.google.com/generative-ai-app-builder/docs/snippets#extractive-segments)
 */
export interface AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment {
  /** Page identifier. */
  pageIdentifier: string;
  /** Extractive segment content. */
  content: string;
}

/**
 * Extractive answer.
 * [Guide](https://cloud.google.com/generative-ai-app-builder/docs/snippets#get-answers)
 */
export interface AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer {
  /** Page identifier. */
  pageIdentifier: string;
  /** Extractive answer content. */
  content: string;
}

/** Chunk information. */
export interface AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo {
  /** Chunk resource name. */
  chunk: string;
  /** Chunk textual content. */
  content: string;
}

/** Query understanding specification. */
export interface AnswerQueryRequest_QueryUnderstandingSpec {
  /** Query classification specification. */
  queryClassificationSpec:
    | AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec
    | undefined;
  /** Query rephraser specification. */
  queryRephraserSpec: AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec | undefined;
}

/** Query classification specification. */
export interface AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec {
  /** Enabled query classification types. */
  types: AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type[];
}

/** Query classification types. */
export enum AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type {
  /** TYPE_UNSPECIFIED - Unspecified query classification type. */
  TYPE_UNSPECIFIED = 0,
  /** ADVERSARIAL_QUERY - Adversarial query classification type. */
  ADVERSARIAL_QUERY = 1,
  /** NON_ANSWER_SEEKING_QUERY - Non-answer-seeking query classification type. */
  NON_ANSWER_SEEKING_QUERY = 2,
  /** JAIL_BREAKING_QUERY - Jail-breaking query classification type. */
  JAIL_BREAKING_QUERY = 3,
  UNRECOGNIZED = -1,
}

export function answerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_TypeFromJSON(
  object: any,
): AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.TYPE_UNSPECIFIED;
    case 1:
    case "ADVERSARIAL_QUERY":
      return AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.ADVERSARIAL_QUERY;
    case 2:
    case "NON_ANSWER_SEEKING_QUERY":
      return AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.NON_ANSWER_SEEKING_QUERY;
    case 3:
    case "JAIL_BREAKING_QUERY":
      return AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.JAIL_BREAKING_QUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.UNRECOGNIZED;
  }
}

export function answerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_TypeToJSON(
  object: AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type,
): string {
  switch (object) {
    case AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.ADVERSARIAL_QUERY:
      return "ADVERSARIAL_QUERY";
    case AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.NON_ANSWER_SEEKING_QUERY:
      return "NON_ANSWER_SEEKING_QUERY";
    case AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.JAIL_BREAKING_QUERY:
      return "JAIL_BREAKING_QUERY";
    case AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Query rephraser specification. */
export interface AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec {
  /** Disable query rephraser. */
  disable: boolean;
  /**
   * Max rephrase steps.
   * The max number is 5 steps.
   * If not set or set to < 1, it will be set to 1 by default.
   */
  maxRephraseSteps: number;
}

export interface AnswerQueryRequest_UserLabelsEntry {
  key: string;
  value: string;
}

/**
 * Response message for
 * [ConversationalSearchService.AnswerQuery][google.cloud.discoveryengine.v1.ConversationalSearchService.AnswerQuery]
 * method.
 */
export interface AnswerQueryResponse {
  /**
   * Answer resource object.
   * If
   * [AnswerQueryRequest.QueryUnderstandingSpec.QueryRephraserSpec.max_rephrase_steps][google.cloud.discoveryengine.v1.AnswerQueryRequest.QueryUnderstandingSpec.QueryRephraserSpec.max_rephrase_steps]
   * is greater than 1, use
   * [Answer.name][google.cloud.discoveryengine.v1.Answer.name] to fetch answer
   * information using
   * [ConversationalSearchService.GetAnswer][google.cloud.discoveryengine.v1.ConversationalSearchService.GetAnswer]
   * API.
   */
  answer:
    | Answer
    | undefined;
  /**
   * Session resource object.
   * It will be only available when session field is set and valid in the
   * [AnswerQueryRequest][google.cloud.discoveryengine.v1.AnswerQueryRequest]
   * request.
   */
  session:
    | Session
    | undefined;
  /** A global unique ID used for logging. */
  answerQueryToken: string;
}

/** Request for GetAnswer method. */
export interface GetAnswerRequest {
  /**
   * Required. The resource name of the Answer to get. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
   */
  name: string;
}

/** Request for CreateSession method. */
export interface CreateSessionRequest {
  /**
   * Required. Full resource name of parent data store. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   */
  parent: string;
  /** Required. The session to create. */
  session: Session | undefined;
}

/** Request for UpdateSession method. */
export interface UpdateSessionRequest {
  /** Required. The Session to update. */
  session:
    | Session
    | undefined;
  /**
   * Indicates which fields in the provided
   * [Session][google.cloud.discoveryengine.v1.Session] to update. The following
   * are NOT supported:
   *
   * * [Session.name][google.cloud.discoveryengine.v1.Session.name]
   *
   * If not set or empty, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/** Request for DeleteSession method. */
export interface DeleteSessionRequest {
  /**
   * Required. The resource name of the Session to delete. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
   */
  name: string;
}

/** Request for GetSession method. */
export interface GetSessionRequest {
  /**
   * Required. The resource name of the Session to get. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
   */
  name: string;
}

/** Request for ListSessions method. */
export interface ListSessionsRequest {
  /**
   * Required. The data store resource name. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   */
  parent: string;
  /**
   * Maximum number of results to return. If unspecified, defaults
   * to 50. Max allowed value is 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListSessions` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /**
   * A filter to apply on the list results. The supported features are:
   * user_pseudo_id, state.
   *
   * Example:
   * "user_pseudo_id = some_id"
   */
  filter: string;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   * Supported fields:
   *   * `update_time`
   *   * `create_time`
   *   * `session_name`
   *
   * Example:
   * "update_time desc"
   * "create_time"
   */
  orderBy: string;
}

/** Response for ListSessions method. */
export interface ListSessionsResponse {
  /** All the Sessions for a given data store. */
  sessions: Session[];
  /** Pagination token, if not returned indicates the last page. */
  nextPageToken: string;
}

function createBaseConverseConversationRequest(): ConverseConversationRequest {
  return {
    name: "",
    query: undefined,
    servingConfig: "",
    conversation: undefined,
    safeSearch: false,
    userLabels: {},
    summarySpec: undefined,
    filter: "",
    boostSpec: undefined,
  };
}

export const ConverseConversationRequest: MessageFns<ConverseConversationRequest> = {
  encode(message: ConverseConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.query !== undefined) {
      TextInput.encode(message.query, writer.uint32(18).fork()).join();
    }
    if (message.servingConfig !== "") {
      writer.uint32(26).string(message.servingConfig);
    }
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(42).fork()).join();
    }
    if (message.safeSearch !== false) {
      writer.uint32(48).bool(message.safeSearch);
    }
    Object.entries(message.userLabels).forEach(([key, value]) => {
      ConverseConversationRequest_UserLabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.summarySpec !== undefined) {
      SearchRequest_ContentSearchSpec_SummarySpec.encode(message.summarySpec, writer.uint32(66).fork()).join();
    }
    if (message.filter !== "") {
      writer.uint32(74).string(message.filter);
    }
    if (message.boostSpec !== undefined) {
      SearchRequest_BoostSpec.encode(message.boostSpec, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConverseConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConverseConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = TextInput.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.servingConfig = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.safeSearch = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = ConverseConversationRequest_UserLabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.userLabels[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.summarySpec = SearchRequest_ContentSearchSpec_SummarySpec.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.boostSpec = SearchRequest_BoostSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConverseConversationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      query: isSet(object.query) ? TextInput.fromJSON(object.query) : undefined,
      servingConfig: isSet(object.servingConfig) ? globalThis.String(object.servingConfig) : "",
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
      safeSearch: isSet(object.safeSearch) ? globalThis.Boolean(object.safeSearch) : false,
      userLabels: isObject(object.userLabels)
        ? Object.entries(object.userLabels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      summarySpec: isSet(object.summarySpec)
        ? SearchRequest_ContentSearchSpec_SummarySpec.fromJSON(object.summarySpec)
        : undefined,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      boostSpec: isSet(object.boostSpec) ? SearchRequest_BoostSpec.fromJSON(object.boostSpec) : undefined,
    };
  },

  toJSON(message: ConverseConversationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.query !== undefined) {
      obj.query = TextInput.toJSON(message.query);
    }
    if (message.servingConfig !== "") {
      obj.servingConfig = message.servingConfig;
    }
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    if (message.safeSearch !== false) {
      obj.safeSearch = message.safeSearch;
    }
    if (message.userLabels) {
      const entries = Object.entries(message.userLabels);
      if (entries.length > 0) {
        obj.userLabels = {};
        entries.forEach(([k, v]) => {
          obj.userLabels[k] = v;
        });
      }
    }
    if (message.summarySpec !== undefined) {
      obj.summarySpec = SearchRequest_ContentSearchSpec_SummarySpec.toJSON(message.summarySpec);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.boostSpec !== undefined) {
      obj.boostSpec = SearchRequest_BoostSpec.toJSON(message.boostSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<ConverseConversationRequest>): ConverseConversationRequest {
    return ConverseConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConverseConversationRequest>): ConverseConversationRequest {
    const message = createBaseConverseConversationRequest();
    message.name = object.name ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? TextInput.fromPartial(object.query)
      : undefined;
    message.servingConfig = object.servingConfig ?? "";
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    message.safeSearch = object.safeSearch ?? false;
    message.userLabels = Object.entries(object.userLabels ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.summarySpec = (object.summarySpec !== undefined && object.summarySpec !== null)
      ? SearchRequest_ContentSearchSpec_SummarySpec.fromPartial(object.summarySpec)
      : undefined;
    message.filter = object.filter ?? "";
    message.boostSpec = (object.boostSpec !== undefined && object.boostSpec !== null)
      ? SearchRequest_BoostSpec.fromPartial(object.boostSpec)
      : undefined;
    return message;
  },
};

function createBaseConverseConversationRequest_UserLabelsEntry(): ConverseConversationRequest_UserLabelsEntry {
  return { key: "", value: "" };
}

export const ConverseConversationRequest_UserLabelsEntry: MessageFns<ConverseConversationRequest_UserLabelsEntry> = {
  encode(
    message: ConverseConversationRequest_UserLabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConverseConversationRequest_UserLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConverseConversationRequest_UserLabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConverseConversationRequest_UserLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ConverseConversationRequest_UserLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ConverseConversationRequest_UserLabelsEntry>): ConverseConversationRequest_UserLabelsEntry {
    return ConverseConversationRequest_UserLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ConverseConversationRequest_UserLabelsEntry>,
  ): ConverseConversationRequest_UserLabelsEntry {
    const message = createBaseConverseConversationRequest_UserLabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseConverseConversationResponse(): ConverseConversationResponse {
  return { reply: undefined, conversation: undefined, searchResults: [] };
}

export const ConverseConversationResponse: MessageFns<ConverseConversationResponse> = {
  encode(message: ConverseConversationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reply !== undefined) {
      Reply.encode(message.reply, writer.uint32(10).fork()).join();
    }
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(18).fork()).join();
    }
    for (const v of message.searchResults) {
      SearchResponse_SearchResult.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConverseConversationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConverseConversationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reply = Reply.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.searchResults.push(SearchResponse_SearchResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConverseConversationResponse {
    return {
      reply: isSet(object.reply) ? Reply.fromJSON(object.reply) : undefined,
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
      searchResults: globalThis.Array.isArray(object?.searchResults)
        ? object.searchResults.map((e: any) => SearchResponse_SearchResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ConverseConversationResponse): unknown {
    const obj: any = {};
    if (message.reply !== undefined) {
      obj.reply = Reply.toJSON(message.reply);
    }
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    if (message.searchResults?.length) {
      obj.searchResults = message.searchResults.map((e) => SearchResponse_SearchResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ConverseConversationResponse>): ConverseConversationResponse {
    return ConverseConversationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConverseConversationResponse>): ConverseConversationResponse {
    const message = createBaseConverseConversationResponse();
    message.reply = (object.reply !== undefined && object.reply !== null) ? Reply.fromPartial(object.reply) : undefined;
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    message.searchResults = object.searchResults?.map((e) => SearchResponse_SearchResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateConversationRequest(): CreateConversationRequest {
  return { parent: "", conversation: undefined };
}

export const CreateConversationRequest: MessageFns<CreateConversationRequest> = {
  encode(message: CreateConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
    };
  },

  toJSON(message: CreateConversationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversationRequest>): CreateConversationRequest {
    return CreateConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversationRequest>): CreateConversationRequest {
    const message = createBaseCreateConversationRequest();
    message.parent = object.parent ?? "";
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    return message;
  },
};

function createBaseUpdateConversationRequest(): UpdateConversationRequest {
  return { conversation: undefined, updateMask: undefined };
}

export const UpdateConversationRequest: MessageFns<UpdateConversationRequest> = {
  encode(message: UpdateConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversationRequest {
    return {
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateConversationRequest): unknown {
    const obj: any = {};
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversationRequest>): UpdateConversationRequest {
    return UpdateConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversationRequest>): UpdateConversationRequest {
    const message = createBaseUpdateConversationRequest();
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteConversationRequest(): DeleteConversationRequest {
  return { name: "" };
}

export const DeleteConversationRequest: MessageFns<DeleteConversationRequest> = {
  encode(message: DeleteConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConversationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversationRequest>): DeleteConversationRequest {
    return DeleteConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversationRequest>): DeleteConversationRequest {
    const message = createBaseDeleteConversationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetConversationRequest(): GetConversationRequest {
  return { name: "" };
}

export const GetConversationRequest: MessageFns<GetConversationRequest> = {
  encode(message: GetConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConversationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversationRequest>): GetConversationRequest {
    return GetConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversationRequest>): GetConversationRequest {
    const message = createBaseGetConversationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListConversationsRequest(): ListConversationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListConversationsRequest: MessageFns<ListConversationsRequest> = {
  encode(message: ListConversationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListConversationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversationsRequest>): ListConversationsRequest {
    return ListConversationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversationsRequest>): ListConversationsRequest {
    const message = createBaseListConversationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListConversationsResponse(): ListConversationsResponse {
  return { conversations: [], nextPageToken: "" };
}

export const ListConversationsResponse: MessageFns<ListConversationsResponse> = {
  encode(message: ListConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversations) {
      Conversation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversations.push(Conversation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationsResponse {
    return {
      conversations: globalThis.Array.isArray(object?.conversations)
        ? object.conversations.map((e: any) => Conversation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConversationsResponse): unknown {
    const obj: any = {};
    if (message.conversations?.length) {
      obj.conversations = message.conversations.map((e) => Conversation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversationsResponse>): ListConversationsResponse {
    return ListConversationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversationsResponse>): ListConversationsResponse {
    const message = createBaseListConversationsResponse();
    message.conversations = object.conversations?.map((e) => Conversation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseAnswerQueryRequest(): AnswerQueryRequest {
  return {
    servingConfig: "",
    query: undefined,
    session: "",
    safetySpec: undefined,
    relatedQuestionsSpec: undefined,
    answerGenerationSpec: undefined,
    searchSpec: undefined,
    queryUnderstandingSpec: undefined,
    asynchronousMode: false,
    userPseudoId: "",
    userLabels: {},
  };
}

export const AnswerQueryRequest: MessageFns<AnswerQueryRequest> = {
  encode(message: AnswerQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.servingConfig !== "") {
      writer.uint32(10).string(message.servingConfig);
    }
    if (message.query !== undefined) {
      Query.encode(message.query, writer.uint32(18).fork()).join();
    }
    if (message.session !== "") {
      writer.uint32(26).string(message.session);
    }
    if (message.safetySpec !== undefined) {
      AnswerQueryRequest_SafetySpec.encode(message.safetySpec, writer.uint32(34).fork()).join();
    }
    if (message.relatedQuestionsSpec !== undefined) {
      AnswerQueryRequest_RelatedQuestionsSpec.encode(message.relatedQuestionsSpec, writer.uint32(42).fork()).join();
    }
    if (message.answerGenerationSpec !== undefined) {
      AnswerQueryRequest_AnswerGenerationSpec.encode(message.answerGenerationSpec, writer.uint32(58).fork()).join();
    }
    if (message.searchSpec !== undefined) {
      AnswerQueryRequest_SearchSpec.encode(message.searchSpec, writer.uint32(66).fork()).join();
    }
    if (message.queryUnderstandingSpec !== undefined) {
      AnswerQueryRequest_QueryUnderstandingSpec.encode(message.queryUnderstandingSpec, writer.uint32(74).fork()).join();
    }
    if (message.asynchronousMode !== false) {
      writer.uint32(80).bool(message.asynchronousMode);
    }
    if (message.userPseudoId !== "") {
      writer.uint32(98).string(message.userPseudoId);
    }
    Object.entries(message.userLabels).forEach(([key, value]) => {
      AnswerQueryRequest_UserLabelsEntry.encode({ key: key as any, value }, writer.uint32(106).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servingConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = Query.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.session = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.safetySpec = AnswerQueryRequest_SafetySpec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.relatedQuestionsSpec = AnswerQueryRequest_RelatedQuestionsSpec.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.answerGenerationSpec = AnswerQueryRequest_AnswerGenerationSpec.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.searchSpec = AnswerQueryRequest_SearchSpec.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.queryUnderstandingSpec = AnswerQueryRequest_QueryUnderstandingSpec.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.asynchronousMode = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.userPseudoId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          const entry13 = AnswerQueryRequest_UserLabelsEntry.decode(reader, reader.uint32());
          if (entry13.value !== undefined) {
            message.userLabels[entry13.key] = entry13.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest {
    return {
      servingConfig: isSet(object.servingConfig) ? globalThis.String(object.servingConfig) : "",
      query: isSet(object.query) ? Query.fromJSON(object.query) : undefined,
      session: isSet(object.session) ? globalThis.String(object.session) : "",
      safetySpec: isSet(object.safetySpec) ? AnswerQueryRequest_SafetySpec.fromJSON(object.safetySpec) : undefined,
      relatedQuestionsSpec: isSet(object.relatedQuestionsSpec)
        ? AnswerQueryRequest_RelatedQuestionsSpec.fromJSON(object.relatedQuestionsSpec)
        : undefined,
      answerGenerationSpec: isSet(object.answerGenerationSpec)
        ? AnswerQueryRequest_AnswerGenerationSpec.fromJSON(object.answerGenerationSpec)
        : undefined,
      searchSpec: isSet(object.searchSpec) ? AnswerQueryRequest_SearchSpec.fromJSON(object.searchSpec) : undefined,
      queryUnderstandingSpec: isSet(object.queryUnderstandingSpec)
        ? AnswerQueryRequest_QueryUnderstandingSpec.fromJSON(object.queryUnderstandingSpec)
        : undefined,
      asynchronousMode: isSet(object.asynchronousMode) ? globalThis.Boolean(object.asynchronousMode) : false,
      userPseudoId: isSet(object.userPseudoId) ? globalThis.String(object.userPseudoId) : "",
      userLabels: isObject(object.userLabels)
        ? Object.entries(object.userLabels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AnswerQueryRequest): unknown {
    const obj: any = {};
    if (message.servingConfig !== "") {
      obj.servingConfig = message.servingConfig;
    }
    if (message.query !== undefined) {
      obj.query = Query.toJSON(message.query);
    }
    if (message.session !== "") {
      obj.session = message.session;
    }
    if (message.safetySpec !== undefined) {
      obj.safetySpec = AnswerQueryRequest_SafetySpec.toJSON(message.safetySpec);
    }
    if (message.relatedQuestionsSpec !== undefined) {
      obj.relatedQuestionsSpec = AnswerQueryRequest_RelatedQuestionsSpec.toJSON(message.relatedQuestionsSpec);
    }
    if (message.answerGenerationSpec !== undefined) {
      obj.answerGenerationSpec = AnswerQueryRequest_AnswerGenerationSpec.toJSON(message.answerGenerationSpec);
    }
    if (message.searchSpec !== undefined) {
      obj.searchSpec = AnswerQueryRequest_SearchSpec.toJSON(message.searchSpec);
    }
    if (message.queryUnderstandingSpec !== undefined) {
      obj.queryUnderstandingSpec = AnswerQueryRequest_QueryUnderstandingSpec.toJSON(message.queryUnderstandingSpec);
    }
    if (message.asynchronousMode !== false) {
      obj.asynchronousMode = message.asynchronousMode;
    }
    if (message.userPseudoId !== "") {
      obj.userPseudoId = message.userPseudoId;
    }
    if (message.userLabels) {
      const entries = Object.entries(message.userLabels);
      if (entries.length > 0) {
        obj.userLabels = {};
        entries.forEach(([k, v]) => {
          obj.userLabels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest>): AnswerQueryRequest {
    return AnswerQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryRequest>): AnswerQueryRequest {
    const message = createBaseAnswerQueryRequest();
    message.servingConfig = object.servingConfig ?? "";
    message.query = (object.query !== undefined && object.query !== null) ? Query.fromPartial(object.query) : undefined;
    message.session = object.session ?? "";
    message.safetySpec = (object.safetySpec !== undefined && object.safetySpec !== null)
      ? AnswerQueryRequest_SafetySpec.fromPartial(object.safetySpec)
      : undefined;
    message.relatedQuestionsSpec = (object.relatedQuestionsSpec !== undefined && object.relatedQuestionsSpec !== null)
      ? AnswerQueryRequest_RelatedQuestionsSpec.fromPartial(object.relatedQuestionsSpec)
      : undefined;
    message.answerGenerationSpec = (object.answerGenerationSpec !== undefined && object.answerGenerationSpec !== null)
      ? AnswerQueryRequest_AnswerGenerationSpec.fromPartial(object.answerGenerationSpec)
      : undefined;
    message.searchSpec = (object.searchSpec !== undefined && object.searchSpec !== null)
      ? AnswerQueryRequest_SearchSpec.fromPartial(object.searchSpec)
      : undefined;
    message.queryUnderstandingSpec =
      (object.queryUnderstandingSpec !== undefined && object.queryUnderstandingSpec !== null)
        ? AnswerQueryRequest_QueryUnderstandingSpec.fromPartial(object.queryUnderstandingSpec)
        : undefined;
    message.asynchronousMode = object.asynchronousMode ?? false;
    message.userPseudoId = object.userPseudoId ?? "";
    message.userLabels = Object.entries(object.userLabels ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseAnswerQueryRequest_SafetySpec(): AnswerQueryRequest_SafetySpec {
  return { enable: false };
}

export const AnswerQueryRequest_SafetySpec: MessageFns<AnswerQueryRequest_SafetySpec> = {
  encode(message: AnswerQueryRequest_SafetySpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== false) {
      writer.uint32(8).bool(message.enable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_SafetySpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SafetySpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SafetySpec {
    return { enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : false };
  },

  toJSON(message: AnswerQueryRequest_SafetySpec): unknown {
    const obj: any = {};
    if (message.enable !== false) {
      obj.enable = message.enable;
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_SafetySpec>): AnswerQueryRequest_SafetySpec {
    return AnswerQueryRequest_SafetySpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryRequest_SafetySpec>): AnswerQueryRequest_SafetySpec {
    const message = createBaseAnswerQueryRequest_SafetySpec();
    message.enable = object.enable ?? false;
    return message;
  },
};

function createBaseAnswerQueryRequest_RelatedQuestionsSpec(): AnswerQueryRequest_RelatedQuestionsSpec {
  return { enable: false };
}

export const AnswerQueryRequest_RelatedQuestionsSpec: MessageFns<AnswerQueryRequest_RelatedQuestionsSpec> = {
  encode(message: AnswerQueryRequest_RelatedQuestionsSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== false) {
      writer.uint32(8).bool(message.enable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_RelatedQuestionsSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_RelatedQuestionsSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_RelatedQuestionsSpec {
    return { enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : false };
  },

  toJSON(message: AnswerQueryRequest_RelatedQuestionsSpec): unknown {
    const obj: any = {};
    if (message.enable !== false) {
      obj.enable = message.enable;
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_RelatedQuestionsSpec>): AnswerQueryRequest_RelatedQuestionsSpec {
    return AnswerQueryRequest_RelatedQuestionsSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryRequest_RelatedQuestionsSpec>): AnswerQueryRequest_RelatedQuestionsSpec {
    const message = createBaseAnswerQueryRequest_RelatedQuestionsSpec();
    message.enable = object.enable ?? false;
    return message;
  },
};

function createBaseAnswerQueryRequest_AnswerGenerationSpec(): AnswerQueryRequest_AnswerGenerationSpec {
  return {
    modelSpec: undefined,
    promptSpec: undefined,
    includeCitations: false,
    answerLanguageCode: "",
    ignoreAdversarialQuery: false,
    ignoreNonAnswerSeekingQuery: false,
    ignoreLowRelevantContent: undefined,
  };
}

export const AnswerQueryRequest_AnswerGenerationSpec: MessageFns<AnswerQueryRequest_AnswerGenerationSpec> = {
  encode(message: AnswerQueryRequest_AnswerGenerationSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelSpec !== undefined) {
      AnswerQueryRequest_AnswerGenerationSpec_ModelSpec.encode(message.modelSpec, writer.uint32(10).fork()).join();
    }
    if (message.promptSpec !== undefined) {
      AnswerQueryRequest_AnswerGenerationSpec_PromptSpec.encode(message.promptSpec, writer.uint32(18).fork()).join();
    }
    if (message.includeCitations !== false) {
      writer.uint32(24).bool(message.includeCitations);
    }
    if (message.answerLanguageCode !== "") {
      writer.uint32(34).string(message.answerLanguageCode);
    }
    if (message.ignoreAdversarialQuery !== false) {
      writer.uint32(40).bool(message.ignoreAdversarialQuery);
    }
    if (message.ignoreNonAnswerSeekingQuery !== false) {
      writer.uint32(48).bool(message.ignoreNonAnswerSeekingQuery);
    }
    if (message.ignoreLowRelevantContent !== undefined) {
      writer.uint32(56).bool(message.ignoreLowRelevantContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_AnswerGenerationSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_AnswerGenerationSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelSpec = AnswerQueryRequest_AnswerGenerationSpec_ModelSpec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.promptSpec = AnswerQueryRequest_AnswerGenerationSpec_PromptSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeCitations = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.answerLanguageCode = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ignoreAdversarialQuery = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.ignoreNonAnswerSeekingQuery = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreLowRelevantContent = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_AnswerGenerationSpec {
    return {
      modelSpec: isSet(object.modelSpec)
        ? AnswerQueryRequest_AnswerGenerationSpec_ModelSpec.fromJSON(object.modelSpec)
        : undefined,
      promptSpec: isSet(object.promptSpec)
        ? AnswerQueryRequest_AnswerGenerationSpec_PromptSpec.fromJSON(object.promptSpec)
        : undefined,
      includeCitations: isSet(object.includeCitations) ? globalThis.Boolean(object.includeCitations) : false,
      answerLanguageCode: isSet(object.answerLanguageCode) ? globalThis.String(object.answerLanguageCode) : "",
      ignoreAdversarialQuery: isSet(object.ignoreAdversarialQuery)
        ? globalThis.Boolean(object.ignoreAdversarialQuery)
        : false,
      ignoreNonAnswerSeekingQuery: isSet(object.ignoreNonAnswerSeekingQuery)
        ? globalThis.Boolean(object.ignoreNonAnswerSeekingQuery)
        : false,
      ignoreLowRelevantContent: isSet(object.ignoreLowRelevantContent)
        ? globalThis.Boolean(object.ignoreLowRelevantContent)
        : undefined,
    };
  },

  toJSON(message: AnswerQueryRequest_AnswerGenerationSpec): unknown {
    const obj: any = {};
    if (message.modelSpec !== undefined) {
      obj.modelSpec = AnswerQueryRequest_AnswerGenerationSpec_ModelSpec.toJSON(message.modelSpec);
    }
    if (message.promptSpec !== undefined) {
      obj.promptSpec = AnswerQueryRequest_AnswerGenerationSpec_PromptSpec.toJSON(message.promptSpec);
    }
    if (message.includeCitations !== false) {
      obj.includeCitations = message.includeCitations;
    }
    if (message.answerLanguageCode !== "") {
      obj.answerLanguageCode = message.answerLanguageCode;
    }
    if (message.ignoreAdversarialQuery !== false) {
      obj.ignoreAdversarialQuery = message.ignoreAdversarialQuery;
    }
    if (message.ignoreNonAnswerSeekingQuery !== false) {
      obj.ignoreNonAnswerSeekingQuery = message.ignoreNonAnswerSeekingQuery;
    }
    if (message.ignoreLowRelevantContent !== undefined) {
      obj.ignoreLowRelevantContent = message.ignoreLowRelevantContent;
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_AnswerGenerationSpec>): AnswerQueryRequest_AnswerGenerationSpec {
    return AnswerQueryRequest_AnswerGenerationSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryRequest_AnswerGenerationSpec>): AnswerQueryRequest_AnswerGenerationSpec {
    const message = createBaseAnswerQueryRequest_AnswerGenerationSpec();
    message.modelSpec = (object.modelSpec !== undefined && object.modelSpec !== null)
      ? AnswerQueryRequest_AnswerGenerationSpec_ModelSpec.fromPartial(object.modelSpec)
      : undefined;
    message.promptSpec = (object.promptSpec !== undefined && object.promptSpec !== null)
      ? AnswerQueryRequest_AnswerGenerationSpec_PromptSpec.fromPartial(object.promptSpec)
      : undefined;
    message.includeCitations = object.includeCitations ?? false;
    message.answerLanguageCode = object.answerLanguageCode ?? "";
    message.ignoreAdversarialQuery = object.ignoreAdversarialQuery ?? false;
    message.ignoreNonAnswerSeekingQuery = object.ignoreNonAnswerSeekingQuery ?? false;
    message.ignoreLowRelevantContent = object.ignoreLowRelevantContent ?? undefined;
    return message;
  },
};

function createBaseAnswerQueryRequest_AnswerGenerationSpec_ModelSpec(): AnswerQueryRequest_AnswerGenerationSpec_ModelSpec {
  return { modelVersion: "" };
}

export const AnswerQueryRequest_AnswerGenerationSpec_ModelSpec: MessageFns<
  AnswerQueryRequest_AnswerGenerationSpec_ModelSpec
> = {
  encode(
    message: AnswerQueryRequest_AnswerGenerationSpec_ModelSpec,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.modelVersion !== "") {
      writer.uint32(10).string(message.modelVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_AnswerGenerationSpec_ModelSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_AnswerGenerationSpec_ModelSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_AnswerGenerationSpec_ModelSpec {
    return { modelVersion: isSet(object.modelVersion) ? globalThis.String(object.modelVersion) : "" };
  },

  toJSON(message: AnswerQueryRequest_AnswerGenerationSpec_ModelSpec): unknown {
    const obj: any = {};
    if (message.modelVersion !== "") {
      obj.modelVersion = message.modelVersion;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_AnswerGenerationSpec_ModelSpec>,
  ): AnswerQueryRequest_AnswerGenerationSpec_ModelSpec {
    return AnswerQueryRequest_AnswerGenerationSpec_ModelSpec.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_AnswerGenerationSpec_ModelSpec>,
  ): AnswerQueryRequest_AnswerGenerationSpec_ModelSpec {
    const message = createBaseAnswerQueryRequest_AnswerGenerationSpec_ModelSpec();
    message.modelVersion = object.modelVersion ?? "";
    return message;
  },
};

function createBaseAnswerQueryRequest_AnswerGenerationSpec_PromptSpec(): AnswerQueryRequest_AnswerGenerationSpec_PromptSpec {
  return { preamble: "" };
}

export const AnswerQueryRequest_AnswerGenerationSpec_PromptSpec: MessageFns<
  AnswerQueryRequest_AnswerGenerationSpec_PromptSpec
> = {
  encode(
    message: AnswerQueryRequest_AnswerGenerationSpec_PromptSpec,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.preamble !== "") {
      writer.uint32(10).string(message.preamble);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_AnswerGenerationSpec_PromptSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_AnswerGenerationSpec_PromptSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.preamble = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_AnswerGenerationSpec_PromptSpec {
    return { preamble: isSet(object.preamble) ? globalThis.String(object.preamble) : "" };
  },

  toJSON(message: AnswerQueryRequest_AnswerGenerationSpec_PromptSpec): unknown {
    const obj: any = {};
    if (message.preamble !== "") {
      obj.preamble = message.preamble;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_AnswerGenerationSpec_PromptSpec>,
  ): AnswerQueryRequest_AnswerGenerationSpec_PromptSpec {
    return AnswerQueryRequest_AnswerGenerationSpec_PromptSpec.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_AnswerGenerationSpec_PromptSpec>,
  ): AnswerQueryRequest_AnswerGenerationSpec_PromptSpec {
    const message = createBaseAnswerQueryRequest_AnswerGenerationSpec_PromptSpec();
    message.preamble = object.preamble ?? "";
    return message;
  },
};

function createBaseAnswerQueryRequest_SearchSpec(): AnswerQueryRequest_SearchSpec {
  return { searchParams: undefined, searchResultList: undefined };
}

export const AnswerQueryRequest_SearchSpec: MessageFns<AnswerQueryRequest_SearchSpec> = {
  encode(message: AnswerQueryRequest_SearchSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.searchParams !== undefined) {
      AnswerQueryRequest_SearchSpec_SearchParams.encode(message.searchParams, writer.uint32(10).fork()).join();
    }
    if (message.searchResultList !== undefined) {
      AnswerQueryRequest_SearchSpec_SearchResultList.encode(message.searchResultList, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_SearchSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SearchSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.searchParams = AnswerQueryRequest_SearchSpec_SearchParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.searchResultList = AnswerQueryRequest_SearchSpec_SearchResultList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SearchSpec {
    return {
      searchParams: isSet(object.searchParams)
        ? AnswerQueryRequest_SearchSpec_SearchParams.fromJSON(object.searchParams)
        : undefined,
      searchResultList: isSet(object.searchResultList)
        ? AnswerQueryRequest_SearchSpec_SearchResultList.fromJSON(object.searchResultList)
        : undefined,
    };
  },

  toJSON(message: AnswerQueryRequest_SearchSpec): unknown {
    const obj: any = {};
    if (message.searchParams !== undefined) {
      obj.searchParams = AnswerQueryRequest_SearchSpec_SearchParams.toJSON(message.searchParams);
    }
    if (message.searchResultList !== undefined) {
      obj.searchResultList = AnswerQueryRequest_SearchSpec_SearchResultList.toJSON(message.searchResultList);
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_SearchSpec>): AnswerQueryRequest_SearchSpec {
    return AnswerQueryRequest_SearchSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryRequest_SearchSpec>): AnswerQueryRequest_SearchSpec {
    const message = createBaseAnswerQueryRequest_SearchSpec();
    message.searchParams = (object.searchParams !== undefined && object.searchParams !== null)
      ? AnswerQueryRequest_SearchSpec_SearchParams.fromPartial(object.searchParams)
      : undefined;
    message.searchResultList = (object.searchResultList !== undefined && object.searchResultList !== null)
      ? AnswerQueryRequest_SearchSpec_SearchResultList.fromPartial(object.searchResultList)
      : undefined;
    return message;
  },
};

function createBaseAnswerQueryRequest_SearchSpec_SearchParams(): AnswerQueryRequest_SearchSpec_SearchParams {
  return {
    maxReturnResults: 0,
    filter: "",
    boostSpec: undefined,
    orderBy: "",
    searchResultMode: 0,
    dataStoreSpecs: [],
  };
}

export const AnswerQueryRequest_SearchSpec_SearchParams: MessageFns<AnswerQueryRequest_SearchSpec_SearchParams> = {
  encode(message: AnswerQueryRequest_SearchSpec_SearchParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxReturnResults !== 0) {
      writer.uint32(8).int32(message.maxReturnResults);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.boostSpec !== undefined) {
      SearchRequest_BoostSpec.encode(message.boostSpec, writer.uint32(26).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.searchResultMode !== 0) {
      writer.uint32(40).int32(message.searchResultMode);
    }
    for (const v of message.dataStoreSpecs) {
      SearchRequest_DataStoreSpec.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_SearchSpec_SearchParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxReturnResults = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.boostSpec = SearchRequest_BoostSpec.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.searchResultMode = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.dataStoreSpecs.push(SearchRequest_DataStoreSpec.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SearchSpec_SearchParams {
    return {
      maxReturnResults: isSet(object.maxReturnResults) ? globalThis.Number(object.maxReturnResults) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      boostSpec: isSet(object.boostSpec) ? SearchRequest_BoostSpec.fromJSON(object.boostSpec) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      searchResultMode: isSet(object.searchResultMode)
        ? searchRequest_ContentSearchSpec_SearchResultModeFromJSON(object.searchResultMode)
        : 0,
      dataStoreSpecs: globalThis.Array.isArray(object?.dataStoreSpecs)
        ? object.dataStoreSpecs.map((e: any) => SearchRequest_DataStoreSpec.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AnswerQueryRequest_SearchSpec_SearchParams): unknown {
    const obj: any = {};
    if (message.maxReturnResults !== 0) {
      obj.maxReturnResults = Math.round(message.maxReturnResults);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.boostSpec !== undefined) {
      obj.boostSpec = SearchRequest_BoostSpec.toJSON(message.boostSpec);
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.searchResultMode !== 0) {
      obj.searchResultMode = searchRequest_ContentSearchSpec_SearchResultModeToJSON(message.searchResultMode);
    }
    if (message.dataStoreSpecs?.length) {
      obj.dataStoreSpecs = message.dataStoreSpecs.map((e) => SearchRequest_DataStoreSpec.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_SearchSpec_SearchParams>): AnswerQueryRequest_SearchSpec_SearchParams {
    return AnswerQueryRequest_SearchSpec_SearchParams.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_SearchSpec_SearchParams>,
  ): AnswerQueryRequest_SearchSpec_SearchParams {
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchParams();
    message.maxReturnResults = object.maxReturnResults ?? 0;
    message.filter = object.filter ?? "";
    message.boostSpec = (object.boostSpec !== undefined && object.boostSpec !== null)
      ? SearchRequest_BoostSpec.fromPartial(object.boostSpec)
      : undefined;
    message.orderBy = object.orderBy ?? "";
    message.searchResultMode = object.searchResultMode ?? 0;
    message.dataStoreSpecs = object.dataStoreSpecs?.map((e) => SearchRequest_DataStoreSpec.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList(): AnswerQueryRequest_SearchSpec_SearchResultList {
  return { searchResults: [] };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList: MessageFns<
  AnswerQueryRequest_SearchSpec_SearchResultList
> = {
  encode(
    message: AnswerQueryRequest_SearchSpec_SearchResultList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.searchResults) {
      AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_SearchSpec_SearchResultList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.searchResults.push(
            AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SearchSpec_SearchResultList {
    return {
      searchResults: globalThis.Array.isArray(object?.searchResults)
        ? object.searchResults.map((e: any) => AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AnswerQueryRequest_SearchSpec_SearchResultList): unknown {
    const obj: any = {};
    if (message.searchResults?.length) {
      obj.searchResults = message.searchResults.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList {
    return AnswerQueryRequest_SearchSpec_SearchResultList.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList {
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList();
    message.searchResults =
      object.searchResults?.map((e) => AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult(): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult {
  return { unstructuredDocumentInfo: undefined, chunkInfo: undefined };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult: MessageFns<
  AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult
> = {
  encode(
    message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.unstructuredDocumentInfo !== undefined) {
      AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo.encode(
        message.unstructuredDocumentInfo,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.chunkInfo !== undefined) {
      AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo.encode(
        message.chunkInfo,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.unstructuredDocumentInfo =
            AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo.decode(
              reader,
              reader.uint32(),
            );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chunkInfo = AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult {
    return {
      unstructuredDocumentInfo: isSet(object.unstructuredDocumentInfo)
        ? AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo.fromJSON(
          object.unstructuredDocumentInfo,
        )
        : undefined,
      chunkInfo: isSet(object.chunkInfo)
        ? AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo.fromJSON(object.chunkInfo)
        : undefined,
    };
  },

  toJSON(message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult): unknown {
    const obj: any = {};
    if (message.unstructuredDocumentInfo !== undefined) {
      obj.unstructuredDocumentInfo =
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo.toJSON(
          message.unstructuredDocumentInfo,
        );
    }
    if (message.chunkInfo !== undefined) {
      obj.chunkInfo = AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo.toJSON(message.chunkInfo);
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult {
    return AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult {
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult();
    message.unstructuredDocumentInfo =
      (object.unstructuredDocumentInfo !== undefined && object.unstructuredDocumentInfo !== null)
        ? AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo.fromPartial(
          object.unstructuredDocumentInfo,
        )
        : undefined;
    message.chunkInfo = (object.chunkInfo !== undefined && object.chunkInfo !== null)
      ? AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo.fromPartial(object.chunkInfo)
      : undefined;
    return message;
  },
};

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo(): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo {
  return { document: "", uri: "", title: "", documentContexts: [], extractiveSegments: [], extractiveAnswers: [] };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo: MessageFns<
  AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo
> = {
  encode(
    message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.document !== "") {
      writer.uint32(10).string(message.document);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    for (const v of message.documentContexts) {
      AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext.encode(
        v!,
        writer.uint32(34).fork(),
      ).join();
    }
    for (const v of message.extractiveSegments) {
      AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment.encode(
        v!,
        writer.uint32(42).fork(),
      ).join();
    }
    for (const v of message.extractiveAnswers) {
      AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer.encode(
        v!,
        writer.uint32(50).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.documentContexts.push(
            AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.extractiveSegments.push(
            AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment
              .decode(reader, reader.uint32()),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.extractiveAnswers.push(
            AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer
              .decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo {
    return {
      document: isSet(object.document) ? globalThis.String(object.document) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      documentContexts: globalThis.Array.isArray(object?.documentContexts)
        ? object.documentContexts.map((e: any) =>
          AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext.fromJSON(
            e,
          )
        )
        : [],
      extractiveSegments: globalThis.Array.isArray(object?.extractiveSegments)
        ? object.extractiveSegments.map((e: any) =>
          AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment
            .fromJSON(e)
        )
        : [],
      extractiveAnswers: globalThis.Array.isArray(object?.extractiveAnswers)
        ? object.extractiveAnswers.map((e: any) =>
          AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer
            .fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo): unknown {
    const obj: any = {};
    if (message.document !== "") {
      obj.document = message.document;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.documentContexts?.length) {
      obj.documentContexts = message.documentContexts.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext.toJSON(e)
      );
    }
    if (message.extractiveSegments?.length) {
      obj.extractiveSegments = message.extractiveSegments.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment.toJSON(e)
      );
    }
    if (message.extractiveAnswers?.length) {
      obj.extractiveAnswers = message.extractiveAnswers.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo {
    return AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo {
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo();
    message.document = object.document ?? "";
    message.uri = object.uri ?? "";
    message.title = object.title ?? "";
    message.documentContexts =
      object.documentContexts?.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext
          .fromPartial(e)
      ) || [];
    message.extractiveSegments =
      object.extractiveSegments?.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment
          .fromPartial(e)
      ) || [];
    message.extractiveAnswers =
      object.extractiveAnswers?.map((e) =>
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer
          .fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext(): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext {
  return { pageIdentifier: "", content: "" };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext:
  MessageFns<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext> = {
    encode(
      message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.pageIdentifier !== "") {
        writer.uint32(10).string(message.pageIdentifier);
      }
      if (message.content !== "") {
        writer.uint32(18).string(message.content);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.pageIdentifier = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.content = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext {
      return {
        pageIdentifier: isSet(object.pageIdentifier) ? globalThis.String(object.pageIdentifier) : "",
        content: isSet(object.content) ? globalThis.String(object.content) : "",
      };
    },

    toJSON(
      message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext,
    ): unknown {
      const obj: any = {};
      if (message.pageIdentifier !== "") {
        obj.pageIdentifier = message.pageIdentifier;
      }
      if (message.content !== "") {
        obj.content = message.content;
      }
      return obj;
    },

    create(
      base?: DeepPartial<
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext
      >,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext {
      return AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext
        .fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext
      >,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext {
      const message =
        createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_DocumentContext();
      message.pageIdentifier = object.pageIdentifier ?? "";
      message.content = object.content ?? "";
      return message;
    },
  };

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment(): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment {
  return { pageIdentifier: "", content: "" };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment:
  MessageFns<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment> = {
    encode(
      message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.pageIdentifier !== "") {
        writer.uint32(10).string(message.pageIdentifier);
      }
      if (message.content !== "") {
        writer.uint32(18).string(message.content);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.pageIdentifier = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.content = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment {
      return {
        pageIdentifier: isSet(object.pageIdentifier) ? globalThis.String(object.pageIdentifier) : "",
        content: isSet(object.content) ? globalThis.String(object.content) : "",
      };
    },

    toJSON(
      message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment,
    ): unknown {
      const obj: any = {};
      if (message.pageIdentifier !== "") {
        obj.pageIdentifier = message.pageIdentifier;
      }
      if (message.content !== "") {
        obj.content = message.content;
      }
      return obj;
    },

    create(
      base?: DeepPartial<
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment
      >,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment {
      return AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment
        .fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment
      >,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment {
      const message =
        createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveSegment();
      message.pageIdentifier = object.pageIdentifier ?? "";
      message.content = object.content ?? "";
      return message;
    },
  };

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer(): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer {
  return { pageIdentifier: "", content: "" };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer:
  MessageFns<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer> = {
    encode(
      message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.pageIdentifier !== "") {
        writer.uint32(10).string(message.pageIdentifier);
      }
      if (message.content !== "") {
        writer.uint32(18).string(message.content);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.pageIdentifier = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.content = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer {
      return {
        pageIdentifier: isSet(object.pageIdentifier) ? globalThis.String(object.pageIdentifier) : "",
        content: isSet(object.content) ? globalThis.String(object.content) : "",
      };
    },

    toJSON(
      message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer,
    ): unknown {
      const obj: any = {};
      if (message.pageIdentifier !== "") {
        obj.pageIdentifier = message.pageIdentifier;
      }
      if (message.content !== "") {
        obj.content = message.content;
      }
      return obj;
    },

    create(
      base?: DeepPartial<
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer
      >,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer {
      return AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer
        .fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<
        AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer
      >,
    ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer {
      const message =
        createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_UnstructuredDocumentInfo_ExtractiveAnswer();
      message.pageIdentifier = object.pageIdentifier ?? "";
      message.content = object.content ?? "";
      return message;
    },
  };

function createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo(): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo {
  return { chunk: "", content: "" };
}

export const AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo: MessageFns<
  AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo
> = {
  encode(
    message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.chunk !== "") {
      writer.uint32(10).string(message.chunk);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chunk = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo {
    return {
      chunk: isSet(object.chunk) ? globalThis.String(object.chunk) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo): unknown {
    const obj: any = {};
    if (message.chunk !== "") {
      obj.chunk = message.chunk;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo {
    return AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo>,
  ): AnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo {
    const message = createBaseAnswerQueryRequest_SearchSpec_SearchResultList_SearchResult_ChunkInfo();
    message.chunk = object.chunk ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseAnswerQueryRequest_QueryUnderstandingSpec(): AnswerQueryRequest_QueryUnderstandingSpec {
  return { queryClassificationSpec: undefined, queryRephraserSpec: undefined };
}

export const AnswerQueryRequest_QueryUnderstandingSpec: MessageFns<AnswerQueryRequest_QueryUnderstandingSpec> = {
  encode(message: AnswerQueryRequest_QueryUnderstandingSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queryClassificationSpec !== undefined) {
      AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec.encode(
        message.queryClassificationSpec,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.queryRephraserSpec !== undefined) {
      AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec.encode(
        message.queryRephraserSpec,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_QueryUnderstandingSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_QueryUnderstandingSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queryClassificationSpec = AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryRephraserSpec = AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_QueryUnderstandingSpec {
    return {
      queryClassificationSpec: isSet(object.queryClassificationSpec)
        ? AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec.fromJSON(object.queryClassificationSpec)
        : undefined,
      queryRephraserSpec: isSet(object.queryRephraserSpec)
        ? AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec.fromJSON(object.queryRephraserSpec)
        : undefined,
    };
  },

  toJSON(message: AnswerQueryRequest_QueryUnderstandingSpec): unknown {
    const obj: any = {};
    if (message.queryClassificationSpec !== undefined) {
      obj.queryClassificationSpec = AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec.toJSON(
        message.queryClassificationSpec,
      );
    }
    if (message.queryRephraserSpec !== undefined) {
      obj.queryRephraserSpec = AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec.toJSON(
        message.queryRephraserSpec,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_QueryUnderstandingSpec>): AnswerQueryRequest_QueryUnderstandingSpec {
    return AnswerQueryRequest_QueryUnderstandingSpec.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_QueryUnderstandingSpec>,
  ): AnswerQueryRequest_QueryUnderstandingSpec {
    const message = createBaseAnswerQueryRequest_QueryUnderstandingSpec();
    message.queryClassificationSpec =
      (object.queryClassificationSpec !== undefined && object.queryClassificationSpec !== null)
        ? AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec.fromPartial(object.queryClassificationSpec)
        : undefined;
    message.queryRephraserSpec = (object.queryRephraserSpec !== undefined && object.queryRephraserSpec !== null)
      ? AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec.fromPartial(object.queryRephraserSpec)
      : undefined;
    return message;
  },
};

function createBaseAnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec(): AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec {
  return { types: [] };
}

export const AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec: MessageFns<
  AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec
> = {
  encode(
    message: AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.types) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.types.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.types.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec {
    return {
      types: globalThis.Array.isArray(object?.types)
        ? object.types.map((e: any) =>
          answerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_TypeFromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec): unknown {
    const obj: any = {};
    if (message.types?.length) {
      obj.types = message.types.map((e) =>
        answerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec_TypeToJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec>,
  ): AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec {
    return AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec>,
  ): AnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec {
    const message = createBaseAnswerQueryRequest_QueryUnderstandingSpec_QueryClassificationSpec();
    message.types = object.types?.map((e) => e) || [];
    return message;
  },
};

function createBaseAnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec(): AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec {
  return { disable: false, maxRephraseSteps: 0 };
}

export const AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec: MessageFns<
  AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec
> = {
  encode(
    message: AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.disable !== false) {
      writer.uint32(8).bool(message.disable);
    }
    if (message.maxRephraseSteps !== 0) {
      writer.uint32(16).int32(message.maxRephraseSteps);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.disable = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxRephraseSteps = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec {
    return {
      disable: isSet(object.disable) ? globalThis.Boolean(object.disable) : false,
      maxRephraseSteps: isSet(object.maxRephraseSteps) ? globalThis.Number(object.maxRephraseSteps) : 0,
    };
  },

  toJSON(message: AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec): unknown {
    const obj: any = {};
    if (message.disable !== false) {
      obj.disable = message.disable;
    }
    if (message.maxRephraseSteps !== 0) {
      obj.maxRephraseSteps = Math.round(message.maxRephraseSteps);
    }
    return obj;
  },

  create(
    base?: DeepPartial<AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec>,
  ): AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec {
    return AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec>,
  ): AnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec {
    const message = createBaseAnswerQueryRequest_QueryUnderstandingSpec_QueryRephraserSpec();
    message.disable = object.disable ?? false;
    message.maxRephraseSteps = object.maxRephraseSteps ?? 0;
    return message;
  },
};

function createBaseAnswerQueryRequest_UserLabelsEntry(): AnswerQueryRequest_UserLabelsEntry {
  return { key: "", value: "" };
}

export const AnswerQueryRequest_UserLabelsEntry: MessageFns<AnswerQueryRequest_UserLabelsEntry> = {
  encode(message: AnswerQueryRequest_UserLabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryRequest_UserLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryRequest_UserLabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryRequest_UserLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AnswerQueryRequest_UserLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryRequest_UserLabelsEntry>): AnswerQueryRequest_UserLabelsEntry {
    return AnswerQueryRequest_UserLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryRequest_UserLabelsEntry>): AnswerQueryRequest_UserLabelsEntry {
    const message = createBaseAnswerQueryRequest_UserLabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAnswerQueryResponse(): AnswerQueryResponse {
  return { answer: undefined, session: undefined, answerQueryToken: "" };
}

export const AnswerQueryResponse: MessageFns<AnswerQueryResponse> = {
  encode(message: AnswerQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.answer !== undefined) {
      Answer.encode(message.answer, writer.uint32(10).fork()).join();
    }
    if (message.session !== undefined) {
      Session.encode(message.session, writer.uint32(18).fork()).join();
    }
    if (message.answerQueryToken !== "") {
      writer.uint32(26).string(message.answerQueryToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnswerQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnswerQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.answer = Answer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.session = Session.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.answerQueryToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnswerQueryResponse {
    return {
      answer: isSet(object.answer) ? Answer.fromJSON(object.answer) : undefined,
      session: isSet(object.session) ? Session.fromJSON(object.session) : undefined,
      answerQueryToken: isSet(object.answerQueryToken) ? globalThis.String(object.answerQueryToken) : "",
    };
  },

  toJSON(message: AnswerQueryResponse): unknown {
    const obj: any = {};
    if (message.answer !== undefined) {
      obj.answer = Answer.toJSON(message.answer);
    }
    if (message.session !== undefined) {
      obj.session = Session.toJSON(message.session);
    }
    if (message.answerQueryToken !== "") {
      obj.answerQueryToken = message.answerQueryToken;
    }
    return obj;
  },

  create(base?: DeepPartial<AnswerQueryResponse>): AnswerQueryResponse {
    return AnswerQueryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnswerQueryResponse>): AnswerQueryResponse {
    const message = createBaseAnswerQueryResponse();
    message.answer = (object.answer !== undefined && object.answer !== null)
      ? Answer.fromPartial(object.answer)
      : undefined;
    message.session = (object.session !== undefined && object.session !== null)
      ? Session.fromPartial(object.session)
      : undefined;
    message.answerQueryToken = object.answerQueryToken ?? "";
    return message;
  },
};

function createBaseGetAnswerRequest(): GetAnswerRequest {
  return { name: "" };
}

export const GetAnswerRequest: MessageFns<GetAnswerRequest> = {
  encode(message: GetAnswerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnswerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnswerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnswerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnswerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnswerRequest>): GetAnswerRequest {
    return GetAnswerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnswerRequest>): GetAnswerRequest {
    const message = createBaseGetAnswerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSessionRequest(): CreateSessionRequest {
  return { parent: "", session: undefined };
}

export const CreateSessionRequest: MessageFns<CreateSessionRequest> = {
  encode(message: CreateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.session !== undefined) {
      Session.encode(message.session, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.session = Session.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      session: isSet(object.session) ? Session.fromJSON(object.session) : undefined,
    };
  },

  toJSON(message: CreateSessionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.session !== undefined) {
      obj.session = Session.toJSON(message.session);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSessionRequest>): CreateSessionRequest {
    return CreateSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSessionRequest>): CreateSessionRequest {
    const message = createBaseCreateSessionRequest();
    message.parent = object.parent ?? "";
    message.session = (object.session !== undefined && object.session !== null)
      ? Session.fromPartial(object.session)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionRequest(): UpdateSessionRequest {
  return { session: undefined, updateMask: undefined };
}

export const UpdateSessionRequest: MessageFns<UpdateSessionRequest> = {
  encode(message: UpdateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.session !== undefined) {
      Session.encode(message.session, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.session = Session.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionRequest {
    return {
      session: isSet(object.session) ? Session.fromJSON(object.session) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSessionRequest): unknown {
    const obj: any = {};
    if (message.session !== undefined) {
      obj.session = Session.toJSON(message.session);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSessionRequest>): UpdateSessionRequest {
    return UpdateSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSessionRequest>): UpdateSessionRequest {
    const message = createBaseUpdateSessionRequest();
    message.session = (object.session !== undefined && object.session !== null)
      ? Session.fromPartial(object.session)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSessionRequest(): DeleteSessionRequest {
  return { name: "" };
}

export const DeleteSessionRequest: MessageFns<DeleteSessionRequest> = {
  encode(message: DeleteSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSessionRequest>): DeleteSessionRequest {
    return DeleteSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSessionRequest>): DeleteSessionRequest {
    const message = createBaseDeleteSessionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetSessionRequest(): GetSessionRequest {
  return { name: "" };
}

export const GetSessionRequest: MessageFns<GetSessionRequest> = {
  encode(message: GetSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSessionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSessionRequest>): GetSessionRequest {
    return GetSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSessionRequest>): GetSessionRequest {
    const message = createBaseGetSessionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSessionsRequest(): ListSessionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSessionsRequest: MessageFns<ListSessionsRequest> = {
  encode(message: ListSessionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSessionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionsRequest>): ListSessionsRequest {
    return ListSessionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionsRequest>): ListSessionsRequest {
    const message = createBaseListSessionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSessionsResponse(): ListSessionsResponse {
  return { sessions: [], nextPageToken: "" };
}

export const ListSessionsResponse: MessageFns<ListSessionsResponse> = {
  encode(message: ListSessionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      Session.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessions.push(Session.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionsResponse {
    return {
      sessions: globalThis.Array.isArray(object?.sessions) ? object.sessions.map((e: any) => Session.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSessionsResponse): unknown {
    const obj: any = {};
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => Session.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionsResponse>): ListSessionsResponse {
    return ListSessionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionsResponse>): ListSessionsResponse {
    const message = createBaseListSessionsResponse();
    message.sessions = object.sessions?.map((e) => Session.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service for conversational search. */
export type ConversationalSearchServiceDefinition = typeof ConversationalSearchServiceDefinition;
export const ConversationalSearchServiceDefinition = {
  name: "ConversationalSearchService",
  fullName: "google.cloud.discoveryengine.v1.ConversationalSearchService",
  methods: {
    /** Converses a conversation. */
    converseConversation: {
      name: "ConverseConversation",
      requestType: ConverseConversationRequest,
      requestStream: false,
      responseType: ConverseConversationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              129,
              2,
              58,
              1,
              42,
              90,
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              101,
              90,
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              101,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a Conversation.
     *
     * If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
     * create already exists, an ALREADY_EXISTS error is returned.
     */
    createConversation: {
      name: "CreateConversation",
      requestType: CreateConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              135,
              2,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              90,
              92,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              34,
              76,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              90,
              89,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              34,
              73,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a Conversation.
     *
     * If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
     * delete does not exist, a NOT_FOUND error is returned.
     */
    deleteConversation: {
      name: "DeleteConversation",
      requestType: DeleteConversationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              221,
              1,
              90,
              78,
              42,
              76,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              75,
              42,
              73,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              42,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a Conversation.
     *
     * [Conversation][google.cloud.discoveryengine.v1.Conversation] action type
     * cannot be changed. If the
     * [Conversation][google.cloud.discoveryengine.v1.Conversation] to update does
     * not exist, a NOT_FOUND error is returned.
     */
    updateConversation: {
      name: "UpdateConversation",
      requestType: UpdateConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              174,
              2,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              90,
              105,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              50,
              89,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              102,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              50,
              86,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              50,
              75,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a Conversation. */
    getConversation: {
      name: "GetConversation",
      requestType: GetConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              221,
              1,
              90,
              78,
              18,
              76,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all Conversations by their parent
     * [DataStore][google.cloud.discoveryengine.v1.DataStore].
     */
    listConversations: {
      name: "ListConversations",
      requestType: ListConversationsRequest,
      requestStream: false,
      responseType: ListConversationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              221,
              1,
              90,
              78,
              18,
              76,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              90,
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Answer query method. */
    answerQuery: {
      name: "AnswerQuery",
      requestType: AnswerQueryRequest,
      requestStream: false,
      responseType: AnswerQueryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              156,
              2,
              58,
              1,
              42,
              90,
              99,
              58,
              1,
              42,
              34,
              94,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              97,
              110,
              115,
              119,
              101,
              114,
              90,
              96,
              58,
              1,
              42,
              34,
              91,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              97,
              110,
              115,
              119,
              101,
              114,
              34,
              80,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              97,
              110,
              115,
              119,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Gets a Answer. */
    getAnswer: {
      name: "GetAnswer",
      requestType: GetAnswerRequest,
      requestStream: false,
      responseType: Answer,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              236,
              1,
              90,
              83,
              18,
              81,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              110,
              115,
              119,
              101,
              114,
              115,
              47,
              42,
              125,
              90,
              80,
              18,
              78,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              110,
              115,
              119,
              101,
              114,
              115,
              47,
              42,
              125,
              18,
              67,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              110,
              115,
              119,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a Session.
     *
     * If the [Session][google.cloud.discoveryengine.v1.Session] to create already
     * exists, an ALREADY_EXISTS error is returned.
     */
    createSession: {
      name: "CreateSession",
      requestType: CreateSessionRequest,
      requestStream: false,
      responseType: Session,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 115, 101, 115, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              233,
              1,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              90,
              82,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              90,
              79,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a Session.
     *
     * If the [Session][google.cloud.discoveryengine.v1.Session] to delete does
     * not exist, a NOT_FOUND error is returned.
     */
    deleteSession: {
      name: "DeleteSession",
      requestType: DeleteSessionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              206,
              1,
              90,
              73,
              42,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              70,
              42,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              42,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a Session.
     *
     * [Session][google.cloud.discoveryengine.v1.Session] action type cannot be
     * changed. If the [Session][google.cloud.discoveryengine.v1.Session] to
     * update does not exist, a NOT_FOUND error is returned.
     */
    updateSession: {
      name: "UpdateSession",
      requestType: UpdateSessionRequest,
      requestStream: false,
      responseType: Session,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              129,
              2,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              90,
              90,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              50,
              79,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              87,
              58,
              7,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              50,
              76,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a Session. */
    getSession: {
      name: "GetSession",
      requestType: GetSessionRequest,
      requestStream: false,
      responseType: Session,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              206,
              1,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all Sessions by their parent
     * [DataStore][google.cloud.discoveryengine.v1.DataStore].
     */
    listSessions: {
      name: "ListSessions",
      requestType: ListSessionsRequest,
      requestStream: false,
      responseType: ListSessionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              206,
              1,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              90,
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConversationalSearchServiceImplementation<CallContextExt = {}> {
  /** Converses a conversation. */
  converseConversation(
    request: ConverseConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConverseConversationResponse>>;
  /**
   * Creates a Conversation.
   *
   * If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
   * create already exists, an ALREADY_EXISTS error is returned.
   */
  createConversation(
    request: CreateConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Conversation>>;
  /**
   * Deletes a Conversation.
   *
   * If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
   * delete does not exist, a NOT_FOUND error is returned.
   */
  deleteConversation(
    request: DeleteConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Updates a Conversation.
   *
   * [Conversation][google.cloud.discoveryengine.v1.Conversation] action type
   * cannot be changed. If the
   * [Conversation][google.cloud.discoveryengine.v1.Conversation] to update does
   * not exist, a NOT_FOUND error is returned.
   */
  updateConversation(
    request: UpdateConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Conversation>>;
  /** Gets a Conversation. */
  getConversation(
    request: GetConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Conversation>>;
  /**
   * Lists all Conversations by their parent
   * [DataStore][google.cloud.discoveryengine.v1.DataStore].
   */
  listConversations(
    request: ListConversationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversationsResponse>>;
  /** Answer query method. */
  answerQuery(
    request: AnswerQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnswerQueryResponse>>;
  /** Gets a Answer. */
  getAnswer(request: GetAnswerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Answer>>;
  /**
   * Creates a Session.
   *
   * If the [Session][google.cloud.discoveryengine.v1.Session] to create already
   * exists, an ALREADY_EXISTS error is returned.
   */
  createSession(request: CreateSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Session>>;
  /**
   * Deletes a Session.
   *
   * If the [Session][google.cloud.discoveryengine.v1.Session] to delete does
   * not exist, a NOT_FOUND error is returned.
   */
  deleteSession(request: DeleteSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Updates a Session.
   *
   * [Session][google.cloud.discoveryengine.v1.Session] action type cannot be
   * changed. If the [Session][google.cloud.discoveryengine.v1.Session] to
   * update does not exist, a NOT_FOUND error is returned.
   */
  updateSession(request: UpdateSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Session>>;
  /** Gets a Session. */
  getSession(request: GetSessionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Session>>;
  /**
   * Lists all Sessions by their parent
   * [DataStore][google.cloud.discoveryengine.v1.DataStore].
   */
  listSessions(
    request: ListSessionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSessionsResponse>>;
}

export interface ConversationalSearchServiceClient<CallOptionsExt = {}> {
  /** Converses a conversation. */
  converseConversation(
    request: DeepPartial<ConverseConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConverseConversationResponse>;
  /**
   * Creates a Conversation.
   *
   * If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
   * create already exists, an ALREADY_EXISTS error is returned.
   */
  createConversation(
    request: DeepPartial<CreateConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Conversation>;
  /**
   * Deletes a Conversation.
   *
   * If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
   * delete does not exist, a NOT_FOUND error is returned.
   */
  deleteConversation(
    request: DeepPartial<DeleteConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Updates a Conversation.
   *
   * [Conversation][google.cloud.discoveryengine.v1.Conversation] action type
   * cannot be changed. If the
   * [Conversation][google.cloud.discoveryengine.v1.Conversation] to update does
   * not exist, a NOT_FOUND error is returned.
   */
  updateConversation(
    request: DeepPartial<UpdateConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Conversation>;
  /** Gets a Conversation. */
  getConversation(
    request: DeepPartial<GetConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Conversation>;
  /**
   * Lists all Conversations by their parent
   * [DataStore][google.cloud.discoveryengine.v1.DataStore].
   */
  listConversations(
    request: DeepPartial<ListConversationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversationsResponse>;
  /** Answer query method. */
  answerQuery(
    request: DeepPartial<AnswerQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnswerQueryResponse>;
  /** Gets a Answer. */
  getAnswer(request: DeepPartial<GetAnswerRequest>, options?: CallOptions & CallOptionsExt): Promise<Answer>;
  /**
   * Creates a Session.
   *
   * If the [Session][google.cloud.discoveryengine.v1.Session] to create already
   * exists, an ALREADY_EXISTS error is returned.
   */
  createSession(request: DeepPartial<CreateSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Session>;
  /**
   * Deletes a Session.
   *
   * If the [Session][google.cloud.discoveryengine.v1.Session] to delete does
   * not exist, a NOT_FOUND error is returned.
   */
  deleteSession(request: DeepPartial<DeleteSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Updates a Session.
   *
   * [Session][google.cloud.discoveryengine.v1.Session] action type cannot be
   * changed. If the [Session][google.cloud.discoveryengine.v1.Session] to
   * update does not exist, a NOT_FOUND error is returned.
   */
  updateSession(request: DeepPartial<UpdateSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Session>;
  /** Gets a Session. */
  getSession(request: DeepPartial<GetSessionRequest>, options?: CallOptions & CallOptionsExt): Promise<Session>;
  /**
   * Lists all Sessions by their parent
   * [DataStore][google.cloud.discoveryengine.v1.DataStore].
   */
  listSessions(
    request: DeepPartial<ListSessionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSessionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
