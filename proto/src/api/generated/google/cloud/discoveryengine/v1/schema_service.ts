// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1/schema_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Schema } from "./schema.js";

export const protobufPackage = "google.cloud.discoveryengine.v1";

/**
 * Request message for
 * [SchemaService.GetSchema][google.cloud.discoveryengine.v1.SchemaService.GetSchema]
 * method.
 */
export interface GetSchemaRequest {
  /**
   * Required. The full resource name of the schema, in the format of
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
   */
  name: string;
}

/**
 * Request message for
 * [SchemaService.ListSchemas][google.cloud.discoveryengine.v1.SchemaService.ListSchemas]
 * method.
 */
export interface ListSchemasRequest {
  /**
   * Required. The parent data store resource name, in the format of
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
   */
  parent: string;
  /**
   * The maximum number of [Schema][google.cloud.discoveryengine.v1.Schema]s to
   * return. The service may return fewer than this value.
   *
   * If unspecified, at most 100
   * [Schema][google.cloud.discoveryengine.v1.Schema]s are returned.
   *
   * The maximum value is 1000; values above 1000 are set to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [SchemaService.ListSchemas][google.cloud.discoveryengine.v1.SchemaService.ListSchemas]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [SchemaService.ListSchemas][google.cloud.discoveryengine.v1.SchemaService.ListSchemas]
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * Response message for
 * [SchemaService.ListSchemas][google.cloud.discoveryengine.v1.SchemaService.ListSchemas]
 * method.
 */
export interface ListSchemasResponse {
  /** The [Schema][google.cloud.discoveryengine.v1.Schema]s. */
  schemas: Schema[];
  /**
   * A token that can be sent as
   * [ListSchemasRequest.page_token][google.cloud.discoveryengine.v1.ListSchemasRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [SchemaService.CreateSchema][google.cloud.discoveryengine.v1.SchemaService.CreateSchema]
 * method.
 */
export interface CreateSchemaRequest {
  /**
   * Required. The parent data store resource name, in the format of
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
   */
  parent: string;
  /** Required. The [Schema][google.cloud.discoveryengine.v1.Schema] to create. */
  schema:
    | Schema
    | undefined;
  /**
   * Required. The ID to use for the
   * [Schema][google.cloud.discoveryengine.v1.Schema], which becomes the final
   * component of the
   * [Schema.name][google.cloud.discoveryengine.v1.Schema.name].
   *
   * This field should conform to
   * [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length
   * limit of 63 characters.
   */
  schemaId: string;
}

/**
 * Request message for
 * [SchemaService.UpdateSchema][google.cloud.discoveryengine.v1.SchemaService.UpdateSchema]
 * method.
 */
export interface UpdateSchemaRequest {
  /** Required. The [Schema][google.cloud.discoveryengine.v1.Schema] to update. */
  schema:
    | Schema
    | undefined;
  /**
   * If set to true, and the [Schema][google.cloud.discoveryengine.v1.Schema] is
   * not found, a new [Schema][google.cloud.discoveryengine.v1.Schema] is
   * created. In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/**
 * Request message for
 * [SchemaService.DeleteSchema][google.cloud.discoveryengine.v1.SchemaService.DeleteSchema]
 * method.
 */
export interface DeleteSchemaRequest {
  /**
   * Required. The full resource name of the schema, in the format of
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
   */
  name: string;
}

/** Metadata for Create Schema LRO. */
export interface CreateSchemaMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/** Metadata for UpdateSchema LRO. */
export interface UpdateSchemaMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/** Metadata for DeleteSchema LRO. */
export interface DeleteSchemaMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

function createBaseGetSchemaRequest(): GetSchemaRequest {
  return { name: "" };
}

export const GetSchemaRequest: MessageFns<GetSchemaRequest> = {
  encode(message: GetSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSchemaRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSchemaRequest>): GetSchemaRequest {
    return GetSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSchemaRequest>): GetSchemaRequest {
    const message = createBaseGetSchemaRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSchemasRequest(): ListSchemasRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSchemasRequest: MessageFns<ListSchemasRequest> = {
  encode(message: ListSchemasRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSchemasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSchemasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSchemasRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSchemasRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSchemasRequest>): ListSchemasRequest {
    return ListSchemasRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSchemasRequest>): ListSchemasRequest {
    const message = createBaseListSchemasRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSchemasResponse(): ListSchemasResponse {
  return { schemas: [], nextPageToken: "" };
}

export const ListSchemasResponse: MessageFns<ListSchemasResponse> = {
  encode(message: ListSchemasResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.schemas) {
      Schema.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSchemasResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSchemasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schemas.push(Schema.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSchemasResponse {
    return {
      schemas: globalThis.Array.isArray(object?.schemas) ? object.schemas.map((e: any) => Schema.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSchemasResponse): unknown {
    const obj: any = {};
    if (message.schemas?.length) {
      obj.schemas = message.schemas.map((e) => Schema.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSchemasResponse>): ListSchemasResponse {
    return ListSchemasResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSchemasResponse>): ListSchemasResponse {
    const message = createBaseListSchemasResponse();
    message.schemas = object.schemas?.map((e) => Schema.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateSchemaRequest(): CreateSchemaRequest {
  return { parent: "", schema: undefined, schemaId: "" };
}

export const CreateSchemaRequest: MessageFns<CreateSchemaRequest> = {
  encode(message: CreateSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.schema !== undefined) {
      Schema.encode(message.schema, writer.uint32(18).fork()).join();
    }
    if (message.schemaId !== "") {
      writer.uint32(26).string(message.schemaId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schema = Schema.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schemaId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSchemaRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      schema: isSet(object.schema) ? Schema.fromJSON(object.schema) : undefined,
      schemaId: isSet(object.schemaId) ? globalThis.String(object.schemaId) : "",
    };
  },

  toJSON(message: CreateSchemaRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.schema !== undefined) {
      obj.schema = Schema.toJSON(message.schema);
    }
    if (message.schemaId !== "") {
      obj.schemaId = message.schemaId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSchemaRequest>): CreateSchemaRequest {
    return CreateSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSchemaRequest>): CreateSchemaRequest {
    const message = createBaseCreateSchemaRequest();
    message.parent = object.parent ?? "";
    message.schema = (object.schema !== undefined && object.schema !== null)
      ? Schema.fromPartial(object.schema)
      : undefined;
    message.schemaId = object.schemaId ?? "";
    return message;
  },
};

function createBaseUpdateSchemaRequest(): UpdateSchemaRequest {
  return { schema: undefined, allowMissing: false };
}

export const UpdateSchemaRequest: MessageFns<UpdateSchemaRequest> = {
  encode(message: UpdateSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schema !== undefined) {
      Schema.encode(message.schema, writer.uint32(10).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schema = Schema.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSchemaRequest {
    return {
      schema: isSet(object.schema) ? Schema.fromJSON(object.schema) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateSchemaRequest): unknown {
    const obj: any = {};
    if (message.schema !== undefined) {
      obj.schema = Schema.toJSON(message.schema);
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSchemaRequest>): UpdateSchemaRequest {
    return UpdateSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSchemaRequest>): UpdateSchemaRequest {
    const message = createBaseUpdateSchemaRequest();
    message.schema = (object.schema !== undefined && object.schema !== null)
      ? Schema.fromPartial(object.schema)
      : undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteSchemaRequest(): DeleteSchemaRequest {
  return { name: "" };
}

export const DeleteSchemaRequest: MessageFns<DeleteSchemaRequest> = {
  encode(message: DeleteSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSchemaRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSchemaRequest>): DeleteSchemaRequest {
    return DeleteSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSchemaRequest>): DeleteSchemaRequest {
    const message = createBaseDeleteSchemaRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSchemaMetadata(): CreateSchemaMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const CreateSchemaMetadata: MessageFns<CreateSchemaMetadata> = {
  encode(message: CreateSchemaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSchemaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSchemaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSchemaMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: CreateSchemaMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSchemaMetadata>): CreateSchemaMetadata {
    return CreateSchemaMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSchemaMetadata>): CreateSchemaMetadata {
    const message = createBaseCreateSchemaMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseUpdateSchemaMetadata(): UpdateSchemaMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const UpdateSchemaMetadata: MessageFns<UpdateSchemaMetadata> = {
  encode(message: UpdateSchemaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSchemaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSchemaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSchemaMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: UpdateSchemaMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSchemaMetadata>): UpdateSchemaMetadata {
    return UpdateSchemaMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSchemaMetadata>): UpdateSchemaMetadata {
    const message = createBaseUpdateSchemaMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseDeleteSchemaMetadata(): DeleteSchemaMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const DeleteSchemaMetadata: MessageFns<DeleteSchemaMetadata> = {
  encode(message: DeleteSchemaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSchemaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSchemaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSchemaMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DeleteSchemaMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSchemaMetadata>): DeleteSchemaMetadata {
    return DeleteSchemaMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSchemaMetadata>): DeleteSchemaMetadata {
    const message = createBaseDeleteSchemaMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

/** Service for managing [Schema][google.cloud.discoveryengine.v1.Schema]s. */
export type SchemaServiceDefinition = typeof SchemaServiceDefinition;
export const SchemaServiceDefinition = {
  name: "SchemaService",
  fullName: "google.cloud.discoveryengine.v1.SchemaService",
  methods: {
    /** Gets a [Schema][google.cloud.discoveryengine.v1.Schema]. */
    getSchema: {
      name: "GetSchema",
      requestType: GetSchemaRequest,
      requestStream: false,
      responseType: Schema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              132,
              1,
              90,
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a list of [Schema][google.cloud.discoveryengine.v1.Schema]s. */
    listSchemas: {
      name: "ListSchemas",
      requestType: ListSchemasRequest,
      requestStream: false,
      responseType: ListSchemasResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              132,
              1,
              90,
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a [Schema][google.cloud.discoveryengine.v1.Schema]. */
    createSchema: {
      name: "CreateSchema",
      requestType: CreateSchemaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              94,
              10,
              38,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              18,
              52,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              99,
              104,
              101,
              109,
              97,
              44,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              148,
              1,
              58,
              6,
              115,
              99,
              104,
              101,
              109,
              97,
              90,
              80,
              58,
              6,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              70,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a [Schema][google.cloud.discoveryengine.v1.Schema]. */
    updateSchema: {
      name: "UpdateSchema",
      requestType: UpdateSchemaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              94,
              10,
              38,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              83,
              99,
              104,
              101,
              109,
              97,
              18,
              52,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              85,
              112,
              100,
              97,
              116,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              162,
              1,
              58,
              6,
              115,
              99,
              104,
              101,
              109,
              97,
              90,
              87,
              58,
              6,
              115,
              99,
              104,
              101,
              109,
              97,
              50,
              77,
              47,
              118,
              49,
              47,
              123,
              115,
              99,
              104,
              101,
              109,
              97,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              115,
              99,
              104,
              101,
              109,
              97,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Schema][google.cloud.discoveryengine.v1.Schema]. */
    deleteSchema: {
      name: "DeleteSchema",
      requestType: DeleteSchemaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              52,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              132,
              1,
              90,
              72,
              42,
              70,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SchemaServiceImplementation<CallContextExt = {}> {
  /** Gets a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  getSchema(request: GetSchemaRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Schema>>;
  /** Gets a list of [Schema][google.cloud.discoveryengine.v1.Schema]s. */
  listSchemas(
    request: ListSchemasRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSchemasResponse>>;
  /** Creates a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  createSchema(request: CreateSchemaRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  updateSchema(request: UpdateSchemaRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  deleteSchema(request: DeleteSchemaRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface SchemaServiceClient<CallOptionsExt = {}> {
  /** Gets a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  getSchema(request: DeepPartial<GetSchemaRequest>, options?: CallOptions & CallOptionsExt): Promise<Schema>;
  /** Gets a list of [Schema][google.cloud.discoveryengine.v1.Schema]s. */
  listSchemas(
    request: DeepPartial<ListSchemasRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSchemasResponse>;
  /** Creates a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  createSchema(request: DeepPartial<CreateSchemaRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  updateSchema(request: DeepPartial<UpdateSchemaRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a [Schema][google.cloud.discoveryengine.v1.Schema]. */
  deleteSchema(request: DeepPartial<DeleteSchemaRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
