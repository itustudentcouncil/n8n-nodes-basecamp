// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/project_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Project } from "./project.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Request message for
 * [ProjectService.GetProject][google.cloud.discoveryengine.v1alpha.ProjectService.GetProject]
 * method.
 */
export interface GetProjectRequest {
  /**
   * Required. Full resource name of a
   * [Project][google.cloud.discoveryengine.v1alpha.Project], such as
   * `projects/{project_id_or_number}`.
   */
  name: string;
}

/**
 * Request for
 * [ProjectService.ProvisionProject][google.cloud.discoveryengine.v1alpha.ProjectService.ProvisionProject]
 * method.
 */
export interface ProvisionProjectRequest {
  /**
   * Required. Full resource name of a
   * [Project][google.cloud.discoveryengine.v1alpha.Project], such as
   * `projects/{project_id_or_number}`.
   */
  name: string;
  /**
   * Required. Set to `true` to specify that caller has read and would like to
   * give consent to the [Terms for data
   * use](https://cloud.google.com/retail/data-use-terms).
   */
  acceptDataUseTerms: boolean;
  /**
   * Required. The version of the [Terms for data
   * use](https://cloud.google.com/retail/data-use-terms) that caller has read
   * and would like to give consent to.
   *
   * Acceptable version is `2022-11-23`, and this may change over time.
   */
  dataUseTermsVersion: string;
}

/** Metadata associated with a project provision operation. */
export interface ProvisionProjectMetadata {
}

/** Request for ReportConsentChange method. */
export interface ReportConsentChangeRequest {
  /**
   * Required. Whether customer decides to accept or decline service term.
   *
   * At this moment, only accept action is supported.
   */
  consentChangeAction: ReportConsentChangeRequest_ConsentChangeAction;
  /**
   * Required. Full resource name of a
   * [Project][google.cloud.discoveryengine.v1alpha.Project], such as
   * `projects/{project_id_or_number}`.
   */
  project: string;
  /**
   * Required. The unique identifier of the terms of service to update.
   * Available term ids:
   *
   * * `GA_DATA_USE_TERMS`: [Terms for data
   * use](https://cloud.google.com/retail/data-use-terms). When using this
   * service term id, the acceptable
   * [service_term_version][google.cloud.discoveryengine.v1alpha.ReportConsentChangeRequest.service_term_version]
   * to provide is `2022-11-23`.
   */
  serviceTermId: string;
  /** Required. The version string of the terms of service to update. */
  serviceTermVersion: string;
}

/**
 * Type of consent acknowledgement (accept / reject).
 *
 * At this moment, only `ACCEPT` action is supported.
 */
export enum ReportConsentChangeRequest_ConsentChangeAction {
  /** CONSENT_CHANGE_ACTION_UNSPECIFIED - Invalid action, user must specify accept/decline */
  CONSENT_CHANGE_ACTION_UNSPECIFIED = 0,
  /** ACCEPT - User accepts service terms. */
  ACCEPT = 1,
  UNRECOGNIZED = -1,
}

export function reportConsentChangeRequest_ConsentChangeActionFromJSON(
  object: any,
): ReportConsentChangeRequest_ConsentChangeAction {
  switch (object) {
    case 0:
    case "CONSENT_CHANGE_ACTION_UNSPECIFIED":
      return ReportConsentChangeRequest_ConsentChangeAction.CONSENT_CHANGE_ACTION_UNSPECIFIED;
    case 1:
    case "ACCEPT":
      return ReportConsentChangeRequest_ConsentChangeAction.ACCEPT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReportConsentChangeRequest_ConsentChangeAction.UNRECOGNIZED;
  }
}

export function reportConsentChangeRequest_ConsentChangeActionToJSON(
  object: ReportConsentChangeRequest_ConsentChangeAction,
): string {
  switch (object) {
    case ReportConsentChangeRequest_ConsentChangeAction.CONSENT_CHANGE_ACTION_UNSPECIFIED:
      return "CONSENT_CHANGE_ACTION_UNSPECIFIED";
    case ReportConsentChangeRequest_ConsentChangeAction.ACCEPT:
      return "ACCEPT";
    case ReportConsentChangeRequest_ConsentChangeAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseGetProjectRequest(): GetProjectRequest {
  return { name: "" };
}

export const GetProjectRequest: MessageFns<GetProjectRequest> = {
  encode(message: GetProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProjectRequest>): GetProjectRequest {
    return GetProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectRequest>): GetProjectRequest {
    const message = createBaseGetProjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseProvisionProjectRequest(): ProvisionProjectRequest {
  return { name: "", acceptDataUseTerms: false, dataUseTermsVersion: "" };
}

export const ProvisionProjectRequest: MessageFns<ProvisionProjectRequest> = {
  encode(message: ProvisionProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.acceptDataUseTerms !== false) {
      writer.uint32(16).bool(message.acceptDataUseTerms);
    }
    if (message.dataUseTermsVersion !== "") {
      writer.uint32(26).string(message.dataUseTermsVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.acceptDataUseTerms = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataUseTermsVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionProjectRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      acceptDataUseTerms: isSet(object.acceptDataUseTerms) ? globalThis.Boolean(object.acceptDataUseTerms) : false,
      dataUseTermsVersion: isSet(object.dataUseTermsVersion) ? globalThis.String(object.dataUseTermsVersion) : "",
    };
  },

  toJSON(message: ProvisionProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.acceptDataUseTerms !== false) {
      obj.acceptDataUseTerms = message.acceptDataUseTerms;
    }
    if (message.dataUseTermsVersion !== "") {
      obj.dataUseTermsVersion = message.dataUseTermsVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionProjectRequest>): ProvisionProjectRequest {
    return ProvisionProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionProjectRequest>): ProvisionProjectRequest {
    const message = createBaseProvisionProjectRequest();
    message.name = object.name ?? "";
    message.acceptDataUseTerms = object.acceptDataUseTerms ?? false;
    message.dataUseTermsVersion = object.dataUseTermsVersion ?? "";
    return message;
  },
};

function createBaseProvisionProjectMetadata(): ProvisionProjectMetadata {
  return {};
}

export const ProvisionProjectMetadata: MessageFns<ProvisionProjectMetadata> = {
  encode(_: ProvisionProjectMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionProjectMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionProjectMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProvisionProjectMetadata {
    return {};
  },

  toJSON(_: ProvisionProjectMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ProvisionProjectMetadata>): ProvisionProjectMetadata {
    return ProvisionProjectMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ProvisionProjectMetadata>): ProvisionProjectMetadata {
    const message = createBaseProvisionProjectMetadata();
    return message;
  },
};

function createBaseReportConsentChangeRequest(): ReportConsentChangeRequest {
  return { consentChangeAction: 0, project: "", serviceTermId: "", serviceTermVersion: "" };
}

export const ReportConsentChangeRequest: MessageFns<ReportConsentChangeRequest> = {
  encode(message: ReportConsentChangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consentChangeAction !== 0) {
      writer.uint32(8).int32(message.consentChangeAction);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.serviceTermId !== "") {
      writer.uint32(26).string(message.serviceTermId);
    }
    if (message.serviceTermVersion !== "") {
      writer.uint32(34).string(message.serviceTermVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportConsentChangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportConsentChangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.consentChangeAction = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceTermId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceTermVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportConsentChangeRequest {
    return {
      consentChangeAction: isSet(object.consentChangeAction)
        ? reportConsentChangeRequest_ConsentChangeActionFromJSON(object.consentChangeAction)
        : 0,
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      serviceTermId: isSet(object.serviceTermId) ? globalThis.String(object.serviceTermId) : "",
      serviceTermVersion: isSet(object.serviceTermVersion) ? globalThis.String(object.serviceTermVersion) : "",
    };
  },

  toJSON(message: ReportConsentChangeRequest): unknown {
    const obj: any = {};
    if (message.consentChangeAction !== 0) {
      obj.consentChangeAction = reportConsentChangeRequest_ConsentChangeActionToJSON(message.consentChangeAction);
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.serviceTermId !== "") {
      obj.serviceTermId = message.serviceTermId;
    }
    if (message.serviceTermVersion !== "") {
      obj.serviceTermVersion = message.serviceTermVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportConsentChangeRequest>): ReportConsentChangeRequest {
    return ReportConsentChangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportConsentChangeRequest>): ReportConsentChangeRequest {
    const message = createBaseReportConsentChangeRequest();
    message.consentChangeAction = object.consentChangeAction ?? 0;
    message.project = object.project ?? "";
    message.serviceTermId = object.serviceTermId ?? "";
    message.serviceTermVersion = object.serviceTermVersion ?? "";
    return message;
  },
};

/**
 * Service for operations on the
 * [Project][google.cloud.discoveryengine.v1alpha.Project].
 */
export type ProjectServiceDefinition = typeof ProjectServiceDefinition;
export const ProjectServiceDefinition = {
  name: "ProjectService",
  fullName: "google.cloud.discoveryengine.v1alpha.ProjectService",
  methods: {
    /**
     * Gets a [Project][google.cloud.discoveryengine.v1alpha.Project].
     * Returns NOT_FOUND when the project is not yet created.
     */
    getProject: {
      name: "GetProject",
      requestType: GetProjectRequest,
      requestStream: false,
      responseType: Project,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              28,
              18,
              26,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Provisions the project resource. During the
     * process, related systems will get prepared and initialized.
     *
     * Caller must read the [Terms for data
     * use](https://cloud.google.com/retail/data-use-terms), and optionally
     * specify in request to provide consent to that service terms.
     */
    provisionProject: {
      name: "ProvisionProject",
      requestType: ProvisionProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              109,
              10,
              44,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              80,
              114,
              111,
              118,
              105,
              115,
              105,
              111,
              110,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              34,
              36,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              111,
              118,
              105,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Updates service terms for this project.
     *
     * This method can be used to retroactively accept the latest terms.
     *
     * Terms available for update:
     *
     * * [Terms for data use](https://cloud.google.com/retail/data-use-terms)
     */
    reportConsentChange: {
      name: "ReportConsentChange",
      requestType: ReportConsentChangeRequest,
      requestStream: false,
      responseType: Project,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              66,
              99,
              111,
              110,
              115,
              101,
              110,
              116,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              95,
              97,
              99,
              116,
              105,
              111,
              110,
              44,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              116,
              101,
              114,
              109,
              95,
              105,
              100,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              116,
              101,
              114,
              109,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              115,
              101,
              110,
              116,
              67,
              104,
              97,
              110,
              103,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProjectServiceImplementation<CallContextExt = {}> {
  /**
   * Gets a [Project][google.cloud.discoveryengine.v1alpha.Project].
   * Returns NOT_FOUND when the project is not yet created.
   */
  getProject(request: GetProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Project>>;
  /**
   * Provisions the project resource. During the
   * process, related systems will get prepared and initialized.
   *
   * Caller must read the [Terms for data
   * use](https://cloud.google.com/retail/data-use-terms), and optionally
   * specify in request to provide consent to that service terms.
   */
  provisionProject(
    request: ProvisionProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates service terms for this project.
   *
   * This method can be used to retroactively accept the latest terms.
   *
   * Terms available for update:
   *
   * * [Terms for data use](https://cloud.google.com/retail/data-use-terms)
   */
  reportConsentChange(
    request: ReportConsentChangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Project>>;
}

export interface ProjectServiceClient<CallOptionsExt = {}> {
  /**
   * Gets a [Project][google.cloud.discoveryengine.v1alpha.Project].
   * Returns NOT_FOUND when the project is not yet created.
   */
  getProject(request: DeepPartial<GetProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Project>;
  /**
   * Provisions the project resource. During the
   * process, related systems will get prepared and initialized.
   *
   * Caller must read the [Terms for data
   * use](https://cloud.google.com/retail/data-use-terms), and optionally
   * specify in request to provide consent to that service terms.
   */
  provisionProject(
    request: DeepPartial<ProvisionProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates service terms for this project.
   *
   * This method can be used to retroactively accept the latest terms.
   *
   * Terms available for update:
   *
   * * [Terms for data use](https://cloud.google.com/retail/data-use-terms)
   */
  reportConsentChange(
    request: DeepPartial<ReportConsentChangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Project>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
