// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/rank_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Record message for
 * [RankService.Rank][google.cloud.discoveryengine.v1alpha.RankService.Rank]
 * method.
 */
export interface RankingRecord {
  /** The unique ID to represent the record. */
  id: string;
  /**
   * The title of the record. Empty by default.
   * At least one of
   * [title][google.cloud.discoveryengine.v1alpha.RankingRecord.title] or
   * [content][google.cloud.discoveryengine.v1alpha.RankingRecord.content]
   * should be set otherwise an INVALID_ARGUMENT error is thrown.
   */
  title: string;
  /**
   * The content of the record. Empty by default.
   * At least one of
   * [title][google.cloud.discoveryengine.v1alpha.RankingRecord.title] or
   * [content][google.cloud.discoveryengine.v1alpha.RankingRecord.content]
   * should be set otherwise an INVALID_ARGUMENT error is thrown.
   */
  content: string;
  /** The score of this record based on the given query and selected model. */
  score: number;
}

/**
 * Request message for
 * [RankService.Rank][google.cloud.discoveryengine.v1alpha.RankService.Rank]
 * method.
 */
export interface RankRequest {
  /**
   * Required. The resource name of the rank service config, such as
   * `projects/{project_num}/locations/{location_id}/rankingConfigs/default_ranking_config`.
   */
  rankingConfig: string;
  /**
   * The identifier of the model to use. It is one of:
   *
   * * `semantic-ranker-512@latest`: Semantic ranking model with maxiumn input
   * token size 512.
   *
   * It is set to `semantic-ranker-512@latest` by default if unspecified.
   */
  model: string;
  /**
   * The number of results to return. If this is unset or no bigger than zero,
   * returns all results.
   */
  topN: number;
  /** The query to use. */
  query: string;
  /** Required. A list of records to rank. At most 200 records to rank. */
  records: RankingRecord[];
  /**
   * If true, the response will contain only record ID and score. By default, it
   * is false, the response will contain record details.
   */
  ignoreRecordDetailsInResponse: boolean;
  /**
   * The user labels applied to a resource must meet the following requirements:
   *
   * * Each resource can have multiple labels, up to a maximum of 64.
   * * Each label must be a key-value pair.
   * * Keys have a minimum length of 1 character and a maximum length of 63
   *   characters and cannot be empty. Values can be empty and have a maximum
   *   length of 63 characters.
   * * Keys and values can contain only lowercase letters, numeric characters,
   *   underscores, and dashes. All characters must use UTF-8 encoding, and
   *   international characters are allowed.
   * * The key portion of a label must be unique. However, you can use the same
   *   key with multiple resources.
   * * Keys must start with a lowercase letter or international character.
   *
   * See [Google Cloud
   * Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   */
  userLabels: { [key: string]: string };
}

export interface RankRequest_UserLabelsEntry {
  key: string;
  value: string;
}

/**
 * Response message for
 * [RankService.Rank][google.cloud.discoveryengine.v1alpha.RankService.Rank]
 * method.
 */
export interface RankResponse {
  /** A list of records sorted by descending score. */
  records: RankingRecord[];
}

function createBaseRankingRecord(): RankingRecord {
  return { id: "", title: "", content: "", score: 0 };
}

export const RankingRecord: MessageFns<RankingRecord> = {
  encode(message: RankingRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.score !== 0) {
      writer.uint32(37).float(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankingRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankingRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.score = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankingRecord {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: RankingRecord): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    return obj;
  },

  create(base?: DeepPartial<RankingRecord>): RankingRecord {
    return RankingRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankingRecord>): RankingRecord {
    const message = createBaseRankingRecord();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseRankRequest(): RankRequest {
  return {
    rankingConfig: "",
    model: "",
    topN: 0,
    query: "",
    records: [],
    ignoreRecordDetailsInResponse: false,
    userLabels: {},
  };
}

export const RankRequest: MessageFns<RankRequest> = {
  encode(message: RankRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rankingConfig !== "") {
      writer.uint32(10).string(message.rankingConfig);
    }
    if (message.model !== "") {
      writer.uint32(18).string(message.model);
    }
    if (message.topN !== 0) {
      writer.uint32(24).int32(message.topN);
    }
    if (message.query !== "") {
      writer.uint32(34).string(message.query);
    }
    for (const v of message.records) {
      RankingRecord.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.ignoreRecordDetailsInResponse !== false) {
      writer.uint32(48).bool(message.ignoreRecordDetailsInResponse);
    }
    Object.entries(message.userLabels).forEach(([key, value]) => {
      RankRequest_UserLabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rankingConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.topN = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.query = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.records.push(RankingRecord.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.ignoreRecordDetailsInResponse = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = RankRequest_UserLabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.userLabels[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankRequest {
    return {
      rankingConfig: isSet(object.rankingConfig) ? globalThis.String(object.rankingConfig) : "",
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      topN: isSet(object.topN) ? globalThis.Number(object.topN) : 0,
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      records: globalThis.Array.isArray(object?.records)
        ? object.records.map((e: any) => RankingRecord.fromJSON(e))
        : [],
      ignoreRecordDetailsInResponse: isSet(object.ignoreRecordDetailsInResponse)
        ? globalThis.Boolean(object.ignoreRecordDetailsInResponse)
        : false,
      userLabels: isObject(object.userLabels)
        ? Object.entries(object.userLabels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RankRequest): unknown {
    const obj: any = {};
    if (message.rankingConfig !== "") {
      obj.rankingConfig = message.rankingConfig;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.topN !== 0) {
      obj.topN = Math.round(message.topN);
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.records?.length) {
      obj.records = message.records.map((e) => RankingRecord.toJSON(e));
    }
    if (message.ignoreRecordDetailsInResponse !== false) {
      obj.ignoreRecordDetailsInResponse = message.ignoreRecordDetailsInResponse;
    }
    if (message.userLabels) {
      const entries = Object.entries(message.userLabels);
      if (entries.length > 0) {
        obj.userLabels = {};
        entries.forEach(([k, v]) => {
          obj.userLabels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<RankRequest>): RankRequest {
    return RankRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankRequest>): RankRequest {
    const message = createBaseRankRequest();
    message.rankingConfig = object.rankingConfig ?? "";
    message.model = object.model ?? "";
    message.topN = object.topN ?? 0;
    message.query = object.query ?? "";
    message.records = object.records?.map((e) => RankingRecord.fromPartial(e)) || [];
    message.ignoreRecordDetailsInResponse = object.ignoreRecordDetailsInResponse ?? false;
    message.userLabels = Object.entries(object.userLabels ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRankRequest_UserLabelsEntry(): RankRequest_UserLabelsEntry {
  return { key: "", value: "" };
}

export const RankRequest_UserLabelsEntry: MessageFns<RankRequest_UserLabelsEntry> = {
  encode(message: RankRequest_UserLabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankRequest_UserLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankRequest_UserLabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankRequest_UserLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RankRequest_UserLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RankRequest_UserLabelsEntry>): RankRequest_UserLabelsEntry {
    return RankRequest_UserLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankRequest_UserLabelsEntry>): RankRequest_UserLabelsEntry {
    const message = createBaseRankRequest_UserLabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRankResponse(): RankResponse {
  return { records: [] };
}

export const RankResponse: MessageFns<RankResponse> = {
  encode(message: RankResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.records) {
      RankingRecord.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.records.push(RankingRecord.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RankResponse {
    return {
      records: globalThis.Array.isArray(object?.records)
        ? object.records.map((e: any) => RankingRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RankResponse): unknown {
    const obj: any = {};
    if (message.records?.length) {
      obj.records = message.records.map((e) => RankingRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RankResponse>): RankResponse {
    return RankResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankResponse>): RankResponse {
    const message = createBaseRankResponse();
    message.records = object.records?.map((e) => RankingRecord.fromPartial(e)) || [];
    return message;
  },
};

/** Service for ranking text records. */
export type RankServiceDefinition = typeof RankServiceDefinition;
export const RankServiceDefinition = {
  name: "RankService",
  fullName: "google.cloud.discoveryengine.v1alpha.RankService",
  methods: {
    /** Ranks a list of text records based on the given input query. */
    rank: {
      name: "Rank",
      requestType: RankRequest,
      requestStream: false,
      responseType: RankResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              114,
              97,
              110,
              107,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              97,
              110,
              107,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              114,
              97,
              110,
              107,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RankServiceImplementation<CallContextExt = {}> {
  /** Ranks a list of text records based on the given input query. */
  rank(request: RankRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RankResponse>>;
}

export interface RankServiceClient<CallOptionsExt = {}> {
  /** Ranks a list of text records based on the given input query. */
  rank(request: DeepPartial<RankRequest>, options?: CallOptions & CallOptionsExt): Promise<RankResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
