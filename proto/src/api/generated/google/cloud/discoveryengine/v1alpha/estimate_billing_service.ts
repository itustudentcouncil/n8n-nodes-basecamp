// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/estimate_billing_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { BigQuerySource, GcsSource } from "./import_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Request message for
 * [EstimateBillingService.EstimateDataSize][google.cloud.discoveryengine.v1alpha.EstimateBillingService.EstimateDataSize]
 * method
 */
export interface EstimateDataSizeRequest {
  /** Website data. */
  websiteDataSource?:
    | EstimateDataSizeRequest_WebsiteDataSource
    | undefined;
  /** Structured or unstructured data. */
  fileDataSource?:
    | EstimateDataSizeRequest_FileDataSource
    | undefined;
  /**
   * Required. Full resource name of the location, such as
   * `projects/{project}/locations/{location}`.
   */
  location: string;
}

/**
 * Data source is a set of website patterns that we crawl to get
 * the total number of websites.
 */
export interface EstimateDataSizeRequest_WebsiteDataSource {
  /**
   * Required. The URI patterns to estimate the data sizes. At most 10
   * patterns are allowed, otherwise an INVALID_ARGUMENT error is thrown.
   */
  estimatorUriPatterns: EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern[];
}

/** URI patterns that we use to crawl. */
export interface EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern {
  /** User provided URI pattern. For example, `foo.com/bar/*`. */
  providedUriPattern: string;
  /** Whether we infer the generated URI or use the exact provided one. */
  exactMatch: boolean;
  /**
   * Whether the pattern is exclusive or not. If set to true, the pattern is
   * considered exclusive. If unset or set to false, the pattern is
   * considered inclusive by default.
   */
  exclusive: boolean;
}

/** Data source contains files either in Cloud Storage or BigQuery. */
export interface EstimateDataSizeRequest_FileDataSource {
  /** Cloud Storage location for the input content. */
  gcsSource?:
    | GcsSource
    | undefined;
  /** BigQuery input source. */
  bigquerySource?: BigQuerySource | undefined;
}

/**
 * Response of the EstimateDataSize request. If the long running
 * operation was successful, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 */
export interface EstimateDataSizeResponse {
  /** Data size in terms of bytes. */
  dataSizeBytes: Long;
  /** Total number of documents. */
  documentCount: Long;
}

/**
 * Metadata related to the progress of the EstimateDataSize operation. This is
 * returned by the google.longrunning.Operation.metadata field.
 */
export interface EstimateDataSizeMetadata {
  /** Operation create time. */
  createTime: Date | undefined;
}

function createBaseEstimateDataSizeRequest(): EstimateDataSizeRequest {
  return { websiteDataSource: undefined, fileDataSource: undefined, location: "" };
}

export const EstimateDataSizeRequest: MessageFns<EstimateDataSizeRequest> = {
  encode(message: EstimateDataSizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.websiteDataSource !== undefined) {
      EstimateDataSizeRequest_WebsiteDataSource.encode(message.websiteDataSource, writer.uint32(18).fork()).join();
    }
    if (message.fileDataSource !== undefined) {
      EstimateDataSizeRequest_FileDataSource.encode(message.fileDataSource, writer.uint32(26).fork()).join();
    }
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EstimateDataSizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEstimateDataSizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.websiteDataSource = EstimateDataSizeRequest_WebsiteDataSource.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fileDataSource = EstimateDataSizeRequest_FileDataSource.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EstimateDataSizeRequest {
    return {
      websiteDataSource: isSet(object.websiteDataSource)
        ? EstimateDataSizeRequest_WebsiteDataSource.fromJSON(object.websiteDataSource)
        : undefined,
      fileDataSource: isSet(object.fileDataSource)
        ? EstimateDataSizeRequest_FileDataSource.fromJSON(object.fileDataSource)
        : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: EstimateDataSizeRequest): unknown {
    const obj: any = {};
    if (message.websiteDataSource !== undefined) {
      obj.websiteDataSource = EstimateDataSizeRequest_WebsiteDataSource.toJSON(message.websiteDataSource);
    }
    if (message.fileDataSource !== undefined) {
      obj.fileDataSource = EstimateDataSizeRequest_FileDataSource.toJSON(message.fileDataSource);
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<EstimateDataSizeRequest>): EstimateDataSizeRequest {
    return EstimateDataSizeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EstimateDataSizeRequest>): EstimateDataSizeRequest {
    const message = createBaseEstimateDataSizeRequest();
    message.websiteDataSource = (object.websiteDataSource !== undefined && object.websiteDataSource !== null)
      ? EstimateDataSizeRequest_WebsiteDataSource.fromPartial(object.websiteDataSource)
      : undefined;
    message.fileDataSource = (object.fileDataSource !== undefined && object.fileDataSource !== null)
      ? EstimateDataSizeRequest_FileDataSource.fromPartial(object.fileDataSource)
      : undefined;
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseEstimateDataSizeRequest_WebsiteDataSource(): EstimateDataSizeRequest_WebsiteDataSource {
  return { estimatorUriPatterns: [] };
}

export const EstimateDataSizeRequest_WebsiteDataSource: MessageFns<EstimateDataSizeRequest_WebsiteDataSource> = {
  encode(message: EstimateDataSizeRequest_WebsiteDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.estimatorUriPatterns) {
      EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EstimateDataSizeRequest_WebsiteDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEstimateDataSizeRequest_WebsiteDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.estimatorUriPatterns.push(
            EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EstimateDataSizeRequest_WebsiteDataSource {
    return {
      estimatorUriPatterns: globalThis.Array.isArray(object?.estimatorUriPatterns)
        ? object.estimatorUriPatterns.map((e: any) =>
          EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: EstimateDataSizeRequest_WebsiteDataSource): unknown {
    const obj: any = {};
    if (message.estimatorUriPatterns?.length) {
      obj.estimatorUriPatterns = message.estimatorUriPatterns.map((e) =>
        EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<EstimateDataSizeRequest_WebsiteDataSource>): EstimateDataSizeRequest_WebsiteDataSource {
    return EstimateDataSizeRequest_WebsiteDataSource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EstimateDataSizeRequest_WebsiteDataSource>,
  ): EstimateDataSizeRequest_WebsiteDataSource {
    const message = createBaseEstimateDataSizeRequest_WebsiteDataSource();
    message.estimatorUriPatterns =
      object.estimatorUriPatterns?.map((e) =>
        EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseEstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern(): EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern {
  return { providedUriPattern: "", exactMatch: false, exclusive: false };
}

export const EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern: MessageFns<
  EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern
> = {
  encode(
    message: EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.providedUriPattern !== "") {
      writer.uint32(10).string(message.providedUriPattern);
    }
    if (message.exactMatch !== false) {
      writer.uint32(16).bool(message.exactMatch);
    }
    if (message.exclusive !== false) {
      writer.uint32(24).bool(message.exclusive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.providedUriPattern = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.exactMatch = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.exclusive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern {
    return {
      providedUriPattern: isSet(object.providedUriPattern) ? globalThis.String(object.providedUriPattern) : "",
      exactMatch: isSet(object.exactMatch) ? globalThis.Boolean(object.exactMatch) : false,
      exclusive: isSet(object.exclusive) ? globalThis.Boolean(object.exclusive) : false,
    };
  },

  toJSON(message: EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern): unknown {
    const obj: any = {};
    if (message.providedUriPattern !== "") {
      obj.providedUriPattern = message.providedUriPattern;
    }
    if (message.exactMatch !== false) {
      obj.exactMatch = message.exactMatch;
    }
    if (message.exclusive !== false) {
      obj.exclusive = message.exclusive;
    }
    return obj;
  },

  create(
    base?: DeepPartial<EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern>,
  ): EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern {
    return EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern>,
  ): EstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern {
    const message = createBaseEstimateDataSizeRequest_WebsiteDataSource_EstimatorUriPattern();
    message.providedUriPattern = object.providedUriPattern ?? "";
    message.exactMatch = object.exactMatch ?? false;
    message.exclusive = object.exclusive ?? false;
    return message;
  },
};

function createBaseEstimateDataSizeRequest_FileDataSource(): EstimateDataSizeRequest_FileDataSource {
  return { gcsSource: undefined, bigquerySource: undefined };
}

export const EstimateDataSizeRequest_FileDataSource: MessageFns<EstimateDataSizeRequest_FileDataSource> = {
  encode(message: EstimateDataSizeRequest_FileDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsSource !== undefined) {
      GcsSource.encode(message.gcsSource, writer.uint32(10).fork()).join();
    }
    if (message.bigquerySource !== undefined) {
      BigQuerySource.encode(message.bigquerySource, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EstimateDataSizeRequest_FileDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEstimateDataSizeRequest_FileDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsSource = GcsSource.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bigquerySource = BigQuerySource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EstimateDataSizeRequest_FileDataSource {
    return {
      gcsSource: isSet(object.gcsSource) ? GcsSource.fromJSON(object.gcsSource) : undefined,
      bigquerySource: isSet(object.bigquerySource) ? BigQuerySource.fromJSON(object.bigquerySource) : undefined,
    };
  },

  toJSON(message: EstimateDataSizeRequest_FileDataSource): unknown {
    const obj: any = {};
    if (message.gcsSource !== undefined) {
      obj.gcsSource = GcsSource.toJSON(message.gcsSource);
    }
    if (message.bigquerySource !== undefined) {
      obj.bigquerySource = BigQuerySource.toJSON(message.bigquerySource);
    }
    return obj;
  },

  create(base?: DeepPartial<EstimateDataSizeRequest_FileDataSource>): EstimateDataSizeRequest_FileDataSource {
    return EstimateDataSizeRequest_FileDataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EstimateDataSizeRequest_FileDataSource>): EstimateDataSizeRequest_FileDataSource {
    const message = createBaseEstimateDataSizeRequest_FileDataSource();
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? GcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.bigquerySource = (object.bigquerySource !== undefined && object.bigquerySource !== null)
      ? BigQuerySource.fromPartial(object.bigquerySource)
      : undefined;
    return message;
  },
};

function createBaseEstimateDataSizeResponse(): EstimateDataSizeResponse {
  return { dataSizeBytes: Long.ZERO, documentCount: Long.ZERO };
}

export const EstimateDataSizeResponse: MessageFns<EstimateDataSizeResponse> = {
  encode(message: EstimateDataSizeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.dataSizeBytes.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.dataSizeBytes.toString());
    }
    if (!message.documentCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.documentCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EstimateDataSizeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEstimateDataSizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dataSizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.documentCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EstimateDataSizeResponse {
    return {
      dataSizeBytes: isSet(object.dataSizeBytes) ? Long.fromValue(object.dataSizeBytes) : Long.ZERO,
      documentCount: isSet(object.documentCount) ? Long.fromValue(object.documentCount) : Long.ZERO,
    };
  },

  toJSON(message: EstimateDataSizeResponse): unknown {
    const obj: any = {};
    if (!message.dataSizeBytes.equals(Long.ZERO)) {
      obj.dataSizeBytes = (message.dataSizeBytes || Long.ZERO).toString();
    }
    if (!message.documentCount.equals(Long.ZERO)) {
      obj.documentCount = (message.documentCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<EstimateDataSizeResponse>): EstimateDataSizeResponse {
    return EstimateDataSizeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EstimateDataSizeResponse>): EstimateDataSizeResponse {
    const message = createBaseEstimateDataSizeResponse();
    message.dataSizeBytes = (object.dataSizeBytes !== undefined && object.dataSizeBytes !== null)
      ? Long.fromValue(object.dataSizeBytes)
      : Long.ZERO;
    message.documentCount = (object.documentCount !== undefined && object.documentCount !== null)
      ? Long.fromValue(object.documentCount)
      : Long.ZERO;
    return message;
  },
};

function createBaseEstimateDataSizeMetadata(): EstimateDataSizeMetadata {
  return { createTime: undefined };
}

export const EstimateDataSizeMetadata: MessageFns<EstimateDataSizeMetadata> = {
  encode(message: EstimateDataSizeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EstimateDataSizeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEstimateDataSizeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EstimateDataSizeMetadata {
    return { createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined };
  },

  toJSON(message: EstimateDataSizeMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<EstimateDataSizeMetadata>): EstimateDataSizeMetadata {
    return EstimateDataSizeMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EstimateDataSizeMetadata>): EstimateDataSizeMetadata {
    const message = createBaseEstimateDataSizeMetadata();
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** Service for managing billing estimations resources. */
export type EstimateBillingServiceDefinition = typeof EstimateBillingServiceDefinition;
export const EstimateBillingServiceDefinition = {
  name: "EstimateBillingService",
  fullName: "google.cloud.discoveryengine.v1alpha.EstimateBillingService",
  methods: {
    /** Estimates the data size to be used by a customer. */
    estimateDataSize: {
      name: "EstimateDataSize",
      requestType: EstimateDataSizeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              126,
              10,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              69,
              115,
              116,
              105,
              109,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              83,
              105,
              122,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              69,
              115,
              116,
              105,
              109,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              83,
              105,
              122,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              115,
              116,
              105,
              109,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              83,
              105,
              122,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EstimateBillingServiceImplementation<CallContextExt = {}> {
  /** Estimates the data size to be used by a customer. */
  estimateDataSize(
    request: EstimateDataSizeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface EstimateBillingServiceClient<CallOptionsExt = {}> {
  /** Estimates the data size to be used by a customer. */
  estimateDataSize(
    request: DeepPartial<EstimateDataSizeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
