// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/control.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  SearchUseCase,
  searchUseCaseFromJSON,
  searchUseCaseToJSON,
  SolutionType,
  solutionTypeFromJSON,
  solutionTypeToJSON,
} from "./common.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/** Defines circumstances to be checked before allowing a behavior */
export interface Condition {
  /**
   * Search only
   * A list of terms to match the query on.
   *
   * Maximum of 10 query terms.
   */
  queryTerms: Condition_QueryTerm[];
  /**
   * Range of time(s) specifying when condition is active.
   *
   * Maximum of 10 time ranges.
   */
  activeTimeRange: Condition_TimeRange[];
}

/** Matcher for search request query */
export interface Condition_QueryTerm {
  /**
   * The specific query value to match against
   *
   * Must be lowercase, must be UTF-8.
   * Can have at most 3 space separated terms if full_match is true.
   * Cannot be an empty string.
   * Maximum length of 5000 characters.
   */
  value: string;
  /** Whether the search query needs to exactly match the query term. */
  fullMatch: boolean;
}

/** Used for time-dependent conditions. */
export interface Condition_TimeRange {
  /**
   * Start of time range.
   *
   * Range is inclusive.
   */
  startTime:
    | Date
    | undefined;
  /**
   * End of time range.
   *
   * Range is inclusive.
   * Must be in the future.
   */
  endTime: Date | undefined;
}

/**
 * Defines a conditioned behavior to employ during serving.
 * Must be attached to a
 * [ServingConfig][google.cloud.discoveryengine.v1alpha.ServingConfig] to be
 * considered at serving time. Permitted actions dependent on `SolutionType`.
 */
export interface Control {
  /** Defines a boost-type control */
  boostAction?:
    | Control_BoostAction
    | undefined;
  /**
   * Defines a filter-type control
   * Currently not supported by Recommendation
   */
  filterAction?:
    | Control_FilterAction
    | undefined;
  /** Defines a redirect-type control. */
  redirectAction?:
    | Control_RedirectAction
    | undefined;
  /** Treats a group of terms as synonyms of one another. */
  synonymsAction?:
    | Control_SynonymsAction
    | undefined;
  /**
   * Immutable. Fully qualified name
   * `projects/* /locations/global/dataStore/* /controls/*`
   */
  name: string;
  /**
   * Required. Human readable name. The identifier used in UI views.
   *
   * Must be UTF-8 encoded string. Length limit is 128 characters.
   * Otherwise an INVALID ARGUMENT error is thrown.
   */
  displayName: string;
  /**
   * Output only. List of all
   * [ServingConfig][google.cloud.discoveryengine.v1alpha.ServingConfig] IDs
   * this control is attached to. May take up to 10 minutes to update after
   * changes.
   */
  associatedServingConfigIds: string[];
  /**
   * Required. Immutable. What solution the control belongs to.
   *
   * Must be compatible with vertical of resource.
   * Otherwise an INVALID ARGUMENT error is thrown.
   */
  solutionType: SolutionType;
  /**
   * Specifies the use case for the control.
   * Affects what condition fields can be set.
   * Only applies to
   * [SOLUTION_TYPE_SEARCH][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_SEARCH].
   * Currently only allow one use case per control.
   * Must be set when solution_type is
   * [SolutionType.SOLUTION_TYPE_SEARCH][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  useCases: SearchUseCase[];
  /**
   * Determines when the associated action will trigger.
   *
   * Omit to always apply the action.
   * Currently only a single condition may be specified.
   * Otherwise an INVALID ARGUMENT error is thrown.
   */
  conditions: Condition[];
}

/** Adjusts order of products in returned list. */
export interface Control_BoostAction {
  /**
   * Required. Strength of the boost, which should be in [-1, 1]. Negative
   * boost means demotion. Default is 0.0 (No-op).
   */
  boost: number;
  /**
   * Required. Specifies which products to apply the boost to.
   *
   * If no filter is provided all products will be boosted (No-op).
   * Syntax documentation:
   * https://cloud.google.com/retail/docs/filter-and-order
   * Maximum length is 5000 characters.
   * Otherwise an INVALID ARGUMENT error is thrown.
   */
  filter: string;
  /**
   * Required. Specifies which data store's documents can be boosted by this
   * control. Full data store name e.g.
   * projects/123/locations/global/collections/default_collection/dataStores/default_data_store
   */
  dataStore: string;
}

/**
 * Specified which products may be included in results.
 * Uses same filter as boost.
 */
export interface Control_FilterAction {
  /**
   * Required. A filter to apply on the matching condition results.
   *
   * Required
   * Syntax documentation:
   * https://cloud.google.com/retail/docs/filter-and-order
   * Maximum length is 5000 characters. Otherwise an INVALID
   * ARGUMENT error is thrown.
   */
  filter: string;
  /**
   * Required. Specifies which data store's documents can be filtered by this
   * control. Full data store name e.g.
   * projects/123/locations/global/collections/default_collection/dataStores/default_data_store
   */
  dataStore: string;
}

/** Redirects a shopper to the provided URI. */
export interface Control_RedirectAction {
  /**
   * Required. The URI to which the shopper will be redirected.
   *
   * Required.
   * URI must have length equal or less than 2000 characters.
   * Otherwise an INVALID ARGUMENT error is thrown.
   */
  redirectUri: string;
}

/**
 * Creates a set of terms that will act as synonyms of one another.
 *
 * Example: "happy" will also be considered as "glad", "glad" will also be
 * considered as "happy".
 */
export interface Control_SynonymsAction {
  /**
   * Defines a set of synonyms.
   * Can specify up to 100 synonyms.
   * Must specify at least 2 synonyms. Otherwise an INVALID ARGUMENT error is
   * thrown.
   */
  synonyms: string[];
}

function createBaseCondition(): Condition {
  return { queryTerms: [], activeTimeRange: [] };
}

export const Condition: MessageFns<Condition> = {
  encode(message: Condition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.queryTerms) {
      Condition_QueryTerm.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.activeTimeRange) {
      Condition_TimeRange.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Condition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryTerms.push(Condition_QueryTerm.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.activeTimeRange.push(Condition_TimeRange.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Condition {
    return {
      queryTerms: globalThis.Array.isArray(object?.queryTerms)
        ? object.queryTerms.map((e: any) => Condition_QueryTerm.fromJSON(e))
        : [],
      activeTimeRange: globalThis.Array.isArray(object?.activeTimeRange)
        ? object.activeTimeRange.map((e: any) => Condition_TimeRange.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Condition): unknown {
    const obj: any = {};
    if (message.queryTerms?.length) {
      obj.queryTerms = message.queryTerms.map((e) => Condition_QueryTerm.toJSON(e));
    }
    if (message.activeTimeRange?.length) {
      obj.activeTimeRange = message.activeTimeRange.map((e) => Condition_TimeRange.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Condition>): Condition {
    return Condition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Condition>): Condition {
    const message = createBaseCondition();
    message.queryTerms = object.queryTerms?.map((e) => Condition_QueryTerm.fromPartial(e)) || [];
    message.activeTimeRange = object.activeTimeRange?.map((e) => Condition_TimeRange.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCondition_QueryTerm(): Condition_QueryTerm {
  return { value: "", fullMatch: false };
}

export const Condition_QueryTerm: MessageFns<Condition_QueryTerm> = {
  encode(message: Condition_QueryTerm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.fullMatch !== false) {
      writer.uint32(16).bool(message.fullMatch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Condition_QueryTerm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCondition_QueryTerm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fullMatch = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Condition_QueryTerm {
    return {
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      fullMatch: isSet(object.fullMatch) ? globalThis.Boolean(object.fullMatch) : false,
    };
  },

  toJSON(message: Condition_QueryTerm): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.fullMatch !== false) {
      obj.fullMatch = message.fullMatch;
    }
    return obj;
  },

  create(base?: DeepPartial<Condition_QueryTerm>): Condition_QueryTerm {
    return Condition_QueryTerm.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Condition_QueryTerm>): Condition_QueryTerm {
    const message = createBaseCondition_QueryTerm();
    message.value = object.value ?? "";
    message.fullMatch = object.fullMatch ?? false;
    return message;
  },
};

function createBaseCondition_TimeRange(): Condition_TimeRange {
  return { startTime: undefined, endTime: undefined };
}

export const Condition_TimeRange: MessageFns<Condition_TimeRange> = {
  encode(message: Condition_TimeRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Condition_TimeRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCondition_TimeRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Condition_TimeRange {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: Condition_TimeRange): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Condition_TimeRange>): Condition_TimeRange {
    return Condition_TimeRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Condition_TimeRange>): Condition_TimeRange {
    const message = createBaseCondition_TimeRange();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseControl(): Control {
  return {
    boostAction: undefined,
    filterAction: undefined,
    redirectAction: undefined,
    synonymsAction: undefined,
    name: "",
    displayName: "",
    associatedServingConfigIds: [],
    solutionType: 0,
    useCases: [],
    conditions: [],
  };
}

export const Control: MessageFns<Control> = {
  encode(message: Control, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boostAction !== undefined) {
      Control_BoostAction.encode(message.boostAction, writer.uint32(50).fork()).join();
    }
    if (message.filterAction !== undefined) {
      Control_FilterAction.encode(message.filterAction, writer.uint32(58).fork()).join();
    }
    if (message.redirectAction !== undefined) {
      Control_RedirectAction.encode(message.redirectAction, writer.uint32(74).fork()).join();
    }
    if (message.synonymsAction !== undefined) {
      Control_SynonymsAction.encode(message.synonymsAction, writer.uint32(82).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    for (const v of message.associatedServingConfigIds) {
      writer.uint32(26).string(v!);
    }
    if (message.solutionType !== 0) {
      writer.uint32(32).int32(message.solutionType);
    }
    writer.uint32(66).fork();
    for (const v of message.useCases) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Control {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.boostAction = Control_BoostAction.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.filterAction = Control_FilterAction.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.redirectAction = Control_RedirectAction.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.synonymsAction = Control_SynonymsAction.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.associatedServingConfigIds.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.solutionType = reader.int32() as any;
          continue;
        case 8:
          if (tag === 64) {
            message.useCases.push(reader.int32() as any);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.useCases.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Control {
    return {
      boostAction: isSet(object.boostAction) ? Control_BoostAction.fromJSON(object.boostAction) : undefined,
      filterAction: isSet(object.filterAction) ? Control_FilterAction.fromJSON(object.filterAction) : undefined,
      redirectAction: isSet(object.redirectAction) ? Control_RedirectAction.fromJSON(object.redirectAction) : undefined,
      synonymsAction: isSet(object.synonymsAction) ? Control_SynonymsAction.fromJSON(object.synonymsAction) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      associatedServingConfigIds: globalThis.Array.isArray(object?.associatedServingConfigIds)
        ? object.associatedServingConfigIds.map((e: any) => globalThis.String(e))
        : [],
      solutionType: isSet(object.solutionType) ? solutionTypeFromJSON(object.solutionType) : 0,
      useCases: globalThis.Array.isArray(object?.useCases)
        ? object.useCases.map((e: any) => searchUseCaseFromJSON(e))
        : [],
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Control): unknown {
    const obj: any = {};
    if (message.boostAction !== undefined) {
      obj.boostAction = Control_BoostAction.toJSON(message.boostAction);
    }
    if (message.filterAction !== undefined) {
      obj.filterAction = Control_FilterAction.toJSON(message.filterAction);
    }
    if (message.redirectAction !== undefined) {
      obj.redirectAction = Control_RedirectAction.toJSON(message.redirectAction);
    }
    if (message.synonymsAction !== undefined) {
      obj.synonymsAction = Control_SynonymsAction.toJSON(message.synonymsAction);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.associatedServingConfigIds?.length) {
      obj.associatedServingConfigIds = message.associatedServingConfigIds;
    }
    if (message.solutionType !== 0) {
      obj.solutionType = solutionTypeToJSON(message.solutionType);
    }
    if (message.useCases?.length) {
      obj.useCases = message.useCases.map((e) => searchUseCaseToJSON(e));
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Control>): Control {
    return Control.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Control>): Control {
    const message = createBaseControl();
    message.boostAction = (object.boostAction !== undefined && object.boostAction !== null)
      ? Control_BoostAction.fromPartial(object.boostAction)
      : undefined;
    message.filterAction = (object.filterAction !== undefined && object.filterAction !== null)
      ? Control_FilterAction.fromPartial(object.filterAction)
      : undefined;
    message.redirectAction = (object.redirectAction !== undefined && object.redirectAction !== null)
      ? Control_RedirectAction.fromPartial(object.redirectAction)
      : undefined;
    message.synonymsAction = (object.synonymsAction !== undefined && object.synonymsAction !== null)
      ? Control_SynonymsAction.fromPartial(object.synonymsAction)
      : undefined;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.associatedServingConfigIds = object.associatedServingConfigIds?.map((e) => e) || [];
    message.solutionType = object.solutionType ?? 0;
    message.useCases = object.useCases?.map((e) => e) || [];
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseControl_BoostAction(): Control_BoostAction {
  return { boost: 0, filter: "", dataStore: "" };
}

export const Control_BoostAction: MessageFns<Control_BoostAction> = {
  encode(message: Control_BoostAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boost !== 0) {
      writer.uint32(13).float(message.boost);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.dataStore !== "") {
      writer.uint32(26).string(message.dataStore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Control_BoostAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControl_BoostAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.boost = reader.float();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataStore = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Control_BoostAction {
    return {
      boost: isSet(object.boost) ? globalThis.Number(object.boost) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      dataStore: isSet(object.dataStore) ? globalThis.String(object.dataStore) : "",
    };
  },

  toJSON(message: Control_BoostAction): unknown {
    const obj: any = {};
    if (message.boost !== 0) {
      obj.boost = message.boost;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.dataStore !== "") {
      obj.dataStore = message.dataStore;
    }
    return obj;
  },

  create(base?: DeepPartial<Control_BoostAction>): Control_BoostAction {
    return Control_BoostAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Control_BoostAction>): Control_BoostAction {
    const message = createBaseControl_BoostAction();
    message.boost = object.boost ?? 0;
    message.filter = object.filter ?? "";
    message.dataStore = object.dataStore ?? "";
    return message;
  },
};

function createBaseControl_FilterAction(): Control_FilterAction {
  return { filter: "", dataStore: "" };
}

export const Control_FilterAction: MessageFns<Control_FilterAction> = {
  encode(message: Control_FilterAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.dataStore !== "") {
      writer.uint32(18).string(message.dataStore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Control_FilterAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControl_FilterAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataStore = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Control_FilterAction {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      dataStore: isSet(object.dataStore) ? globalThis.String(object.dataStore) : "",
    };
  },

  toJSON(message: Control_FilterAction): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.dataStore !== "") {
      obj.dataStore = message.dataStore;
    }
    return obj;
  },

  create(base?: DeepPartial<Control_FilterAction>): Control_FilterAction {
    return Control_FilterAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Control_FilterAction>): Control_FilterAction {
    const message = createBaseControl_FilterAction();
    message.filter = object.filter ?? "";
    message.dataStore = object.dataStore ?? "";
    return message;
  },
};

function createBaseControl_RedirectAction(): Control_RedirectAction {
  return { redirectUri: "" };
}

export const Control_RedirectAction: MessageFns<Control_RedirectAction> = {
  encode(message: Control_RedirectAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.redirectUri !== "") {
      writer.uint32(10).string(message.redirectUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Control_RedirectAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControl_RedirectAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.redirectUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Control_RedirectAction {
    return { redirectUri: isSet(object.redirectUri) ? globalThis.String(object.redirectUri) : "" };
  },

  toJSON(message: Control_RedirectAction): unknown {
    const obj: any = {};
    if (message.redirectUri !== "") {
      obj.redirectUri = message.redirectUri;
    }
    return obj;
  },

  create(base?: DeepPartial<Control_RedirectAction>): Control_RedirectAction {
    return Control_RedirectAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Control_RedirectAction>): Control_RedirectAction {
    const message = createBaseControl_RedirectAction();
    message.redirectUri = object.redirectUri ?? "";
    return message;
  },
};

function createBaseControl_SynonymsAction(): Control_SynonymsAction {
  return { synonyms: [] };
}

export const Control_SynonymsAction: MessageFns<Control_SynonymsAction> = {
  encode(message: Control_SynonymsAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.synonyms) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Control_SynonymsAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControl_SynonymsAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.synonyms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Control_SynonymsAction {
    return {
      synonyms: globalThis.Array.isArray(object?.synonyms) ? object.synonyms.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Control_SynonymsAction): unknown {
    const obj: any = {};
    if (message.synonyms?.length) {
      obj.synonyms = message.synonyms;
    }
    return obj;
  },

  create(base?: DeepPartial<Control_SynonymsAction>): Control_SynonymsAction {
    return Control_SynonymsAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Control_SynonymsAction>): Control_SynonymsAction {
    const message = createBaseControl_SynonymsAction();
    message.synonyms = object.synonyms?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
