// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/** External session proto definition. */
export interface Session {
  /**
   * Immutable. Fully qualified name
   * `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/*`
   */
  name: string;
  /** The state of the session. */
  state: Session_State;
  /** A unique identifier for tracking users. */
  userPseudoId: string;
  /** Turns. */
  turns: Session_Turn[];
  /** Output only. The time the session started. */
  startTime:
    | Date
    | undefined;
  /** Output only. The time the session finished. */
  endTime: Date | undefined;
}

/** Enumeration of the state of the session. */
export enum Session_State {
  /** STATE_UNSPECIFIED - State is unspecified. */
  STATE_UNSPECIFIED = 0,
  /** IN_PROGRESS - The session is currently open. */
  IN_PROGRESS = 1,
  UNRECOGNIZED = -1,
}

export function session_StateFromJSON(object: any): Session_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Session_State.STATE_UNSPECIFIED;
    case 1:
    case "IN_PROGRESS":
      return Session_State.IN_PROGRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Session_State.UNRECOGNIZED;
  }
}

export function session_StateToJSON(object: Session_State): string {
  switch (object) {
    case Session_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Session_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case Session_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents a turn, including a query from the user and a
 * answer from service.
 */
export interface Session_Turn {
  /** The user query. */
  query:
    | Query
    | undefined;
  /**
   * The resource name of the answer to the user query.
   *
   * Only set if the answer generation (/answer API call) happened in this
   * turn.
   */
  answer: string;
}

/** Defines a user inputed query. */
export interface Query {
  /** Plain text. */
  text?:
    | string
    | undefined;
  /** Unique Id for the query. */
  queryId: string;
}

function createBaseSession(): Session {
  return { name: "", state: 0, userPseudoId: "", turns: [], startTime: undefined, endTime: undefined };
}

export const Session: MessageFns<Session> = {
  encode(message: Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.userPseudoId !== "") {
      writer.uint32(26).string(message.userPseudoId);
    }
    for (const v of message.turns) {
      Session_Turn.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userPseudoId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.turns.push(Session_Turn.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? session_StateFromJSON(object.state) : 0,
      userPseudoId: isSet(object.userPseudoId) ? globalThis.String(object.userPseudoId) : "",
      turns: globalThis.Array.isArray(object?.turns) ? object.turns.map((e: any) => Session_Turn.fromJSON(e)) : [],
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = session_StateToJSON(message.state);
    }
    if (message.userPseudoId !== "") {
      obj.userPseudoId = message.userPseudoId;
    }
    if (message.turns?.length) {
      obj.turns = message.turns.map((e) => Session_Turn.toJSON(e));
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Session>): Session {
    return Session.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Session>): Session {
    const message = createBaseSession();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.userPseudoId = object.userPseudoId ?? "";
    message.turns = object.turns?.map((e) => Session_Turn.fromPartial(e)) || [];
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseSession_Turn(): Session_Turn {
  return { query: undefined, answer: "" };
}

export const Session_Turn: MessageFns<Session_Turn> = {
  encode(message: Session_Turn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      Query.encode(message.query, writer.uint32(10).fork()).join();
    }
    if (message.answer !== "") {
      writer.uint32(18).string(message.answer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session_Turn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession_Turn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = Query.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.answer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session_Turn {
    return {
      query: isSet(object.query) ? Query.fromJSON(object.query) : undefined,
      answer: isSet(object.answer) ? globalThis.String(object.answer) : "",
    };
  },

  toJSON(message: Session_Turn): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = Query.toJSON(message.query);
    }
    if (message.answer !== "") {
      obj.answer = message.answer;
    }
    return obj;
  },

  create(base?: DeepPartial<Session_Turn>): Session_Turn {
    return Session_Turn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Session_Turn>): Session_Turn {
    const message = createBaseSession_Turn();
    message.query = (object.query !== undefined && object.query !== null) ? Query.fromPartial(object.query) : undefined;
    message.answer = object.answer ?? "";
    return message;
  },
};

function createBaseQuery(): Query {
  return { text: undefined, queryId: "" };
}

export const Query: MessageFns<Query> = {
  encode(message: Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    if (message.queryId !== "") {
      writer.uint32(10).string(message.queryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queryId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Query {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      queryId: isSet(object.queryId) ? globalThis.String(object.queryId) : "",
    };
  },

  toJSON(message: Query): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.queryId !== "") {
      obj.queryId = message.queryId;
    }
    return obj;
  },

  create(base?: DeepPartial<Query>): Query {
    return Query.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Query>): Query {
    const message = createBaseQuery();
    message.text = object.text ?? undefined;
    message.queryId = object.queryId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
