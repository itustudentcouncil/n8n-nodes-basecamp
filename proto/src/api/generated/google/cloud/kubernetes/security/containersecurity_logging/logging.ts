// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/kubernetes/security/containersecurity_logging/logging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "cloud.kubernetes.security.containersecurity_logging";

/**
 * FindingType is an enumeration of all possible finding types in GKE Security
 * Posture.
 */
export enum FindingType {
  /** FINDING_TYPE_UNSPECIFIED - Default value, unspecified. */
  FINDING_TYPE_UNSPECIFIED = 0,
  /** FINDING_TYPE_MISCONFIG - Workload misconfiguration policy audit. */
  FINDING_TYPE_MISCONFIG = 1,
  /** FINDING_TYPE_VULNERABILITY - Workload vulnerabilities scanning. */
  FINDING_TYPE_VULNERABILITY = 2,
  UNRECOGNIZED = -1,
}

export function findingTypeFromJSON(object: any): FindingType {
  switch (object) {
    case 0:
    case "FINDING_TYPE_UNSPECIFIED":
      return FindingType.FINDING_TYPE_UNSPECIFIED;
    case 1:
    case "FINDING_TYPE_MISCONFIG":
      return FindingType.FINDING_TYPE_MISCONFIG;
    case 2:
    case "FINDING_TYPE_VULNERABILITY":
      return FindingType.FINDING_TYPE_VULNERABILITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FindingType.UNRECOGNIZED;
  }
}

export function findingTypeToJSON(object: FindingType): string {
  switch (object) {
    case FindingType.FINDING_TYPE_UNSPECIFIED:
      return "FINDING_TYPE_UNSPECIFIED";
    case FindingType.FINDING_TYPE_MISCONFIG:
      return "FINDING_TYPE_MISCONFIG";
    case FindingType.FINDING_TYPE_VULNERABILITY:
      return "FINDING_TYPE_VULNERABILITY";
    case FindingType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Severity is an enumeration of all the possible severities of a violation. */
export enum Severity {
  /** SEVERITY_UNSPECIFIED - Default value, only used to determine that nothing was specified. */
  SEVERITY_UNSPECIFIED = 0,
  /** SEVERITY_CRITICAL - SEVERITY_CRITICAL recommends taking action immediately. */
  SEVERITY_CRITICAL = 1,
  /** SEVERITY_HIGH - SEVERITY_HIGH recommends taking action if possible. */
  SEVERITY_HIGH = 2,
  /** SEVERITY_MEDIUM - SEVERITY_MEDIUM recommends investigation. */
  SEVERITY_MEDIUM = 3,
  /** SEVERITY_LOW - SEVERITY_LOW recommends being aware of the problem. */
  SEVERITY_LOW = 4,
  UNRECOGNIZED = -1,
}

export function severityFromJSON(object: any): Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "SEVERITY_CRITICAL":
      return Severity.SEVERITY_CRITICAL;
    case 2:
    case "SEVERITY_HIGH":
      return Severity.SEVERITY_HIGH;
    case 3:
    case "SEVERITY_MEDIUM":
      return Severity.SEVERITY_MEDIUM;
    case 4:
    case "SEVERITY_LOW":
      return Severity.SEVERITY_LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Severity.UNRECOGNIZED;
  }
}

export function severityToJSON(object: Severity): string {
  switch (object) {
    case Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case Severity.SEVERITY_CRITICAL:
      return "SEVERITY_CRITICAL";
    case Severity.SEVERITY_HIGH:
      return "SEVERITY_HIGH";
    case Severity.SEVERITY_MEDIUM:
      return "SEVERITY_MEDIUM";
    case Severity.SEVERITY_LOW:
      return "SEVERITY_LOW";
    case Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Identifies a package vulnerability found within a workload. */
export interface Vulnerability {
  /** package name where vulnerability detected */
  packageName: string;
  /** affected package version */
  affectedPackageVersion: string;
  /** title of vulnerability assigned by CVE */
  cveId: string;
  /** cpe_uri where vulnerability detected */
  cpeUri: string;
  /** assigned severity for vulnerability */
  severity: Severity;
  /** overall CVSS score */
  cvssScore: number;
  /** detailed CVSS score, format `CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N` */
  cvssVector: string;
  /** cpe_uri where vulnerability is fixed */
  fixedCpeUri: string;
  /** type of package (os, maven, go) */
  packageType: string;
  /** package name where vulnerability is fixed */
  fixedPackage: string;
  /** fixed package version */
  fixedPackageVersion: string;
  /** detailed description */
  description: string;
  /** reference URL for source CVE database */
  relatedUrls: string[];
  /** affected images */
  affectedImages: string[];
}

/**
 * A security concern for an asset(i.e cluster, workload, etc). Each finding
 * corresponds to a type of security concern. A finding is created during the
 * scan of an asset by any one of the GKE Security Posture features that are
 * enabled.
 */
export interface Finding {
  /**
   * Fully qualified resource name of the k8s resource, e.g.:
   * {api}/{version}/namespaces/{namespace}/{kind}/{workload name}
   */
  resourceName: string;
  /** The type of security finding this is. */
  type: FindingType;
  /** State determines whether the finding still exists or has been resolved. */
  state: Finding_State;
  /**
   * The human readable representation of the specific security finding.
   * e.g. RUN_AS_NONROOT, CVE_ID_0 etc depending on the type.
   */
  finding: string;
  /** Severity determines the recommended actions for this finding. */
  severity: Severity;
  /** The time this finding was found/remediated. */
  eventTime: Date | undefined;
  vulnerability?: Vulnerability | undefined;
}

/** The current state of the finding(e.g still active, has been fixed etc). */
export enum Finding_State {
  /** STATE_UNSPECIFIED - Default value, only used to determine that nothing was specified. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - Active state means that the finding exists on the asset. */
  ACTIVE = 1,
  /** REMEDIATED - Remediated means that the finding has been fixed on the asset. */
  REMEDIATED = 2,
  UNRECOGNIZED = -1,
}

export function finding_StateFromJSON(object: any): Finding_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Finding_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Finding_State.ACTIVE;
    case 2:
    case "REMEDIATED":
      return Finding_State.REMEDIATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Finding_State.UNRECOGNIZED;
  }
}

export function finding_StateToJSON(object: Finding_State): string {
  switch (object) {
    case Finding_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Finding_State.ACTIVE:
      return "ACTIVE";
    case Finding_State.REMEDIATED:
      return "REMEDIATED";
    case Finding_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseVulnerability(): Vulnerability {
  return {
    packageName: "",
    affectedPackageVersion: "",
    cveId: "",
    cpeUri: "",
    severity: 0,
    cvssScore: 0,
    cvssVector: "",
    fixedCpeUri: "",
    packageType: "",
    fixedPackage: "",
    fixedPackageVersion: "",
    description: "",
    relatedUrls: [],
    affectedImages: [],
  };
}

export const Vulnerability: MessageFns<Vulnerability> = {
  encode(message: Vulnerability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packageName !== "") {
      writer.uint32(10).string(message.packageName);
    }
    if (message.affectedPackageVersion !== "") {
      writer.uint32(18).string(message.affectedPackageVersion);
    }
    if (message.cveId !== "") {
      writer.uint32(26).string(message.cveId);
    }
    if (message.cpeUri !== "") {
      writer.uint32(34).string(message.cpeUri);
    }
    if (message.severity !== 0) {
      writer.uint32(40).int32(message.severity);
    }
    if (message.cvssScore !== 0) {
      writer.uint32(53).float(message.cvssScore);
    }
    if (message.cvssVector !== "") {
      writer.uint32(58).string(message.cvssVector);
    }
    if (message.fixedCpeUri !== "") {
      writer.uint32(66).string(message.fixedCpeUri);
    }
    if (message.packageType !== "") {
      writer.uint32(74).string(message.packageType);
    }
    if (message.fixedPackage !== "") {
      writer.uint32(82).string(message.fixedPackage);
    }
    if (message.fixedPackageVersion !== "") {
      writer.uint32(90).string(message.fixedPackageVersion);
    }
    if (message.description !== "") {
      writer.uint32(98).string(message.description);
    }
    for (const v of message.relatedUrls) {
      writer.uint32(106).string(v!);
    }
    for (const v of message.affectedImages) {
      writer.uint32(114).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vulnerability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.packageName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.affectedPackageVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cveId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.cpeUri = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.cvssScore = reader.float();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.cvssVector = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fixedCpeUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.packageType = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fixedPackage = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.fixedPackageVersion = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.relatedUrls.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.affectedImages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vulnerability {
    return {
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
      affectedPackageVersion: isSet(object.affectedPackageVersion)
        ? globalThis.String(object.affectedPackageVersion)
        : "",
      cveId: isSet(object.cveId) ? globalThis.String(object.cveId) : "",
      cpeUri: isSet(object.cpeUri) ? globalThis.String(object.cpeUri) : "",
      severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
      cvssScore: isSet(object.cvssScore) ? globalThis.Number(object.cvssScore) : 0,
      cvssVector: isSet(object.cvssVector) ? globalThis.String(object.cvssVector) : "",
      fixedCpeUri: isSet(object.fixedCpeUri) ? globalThis.String(object.fixedCpeUri) : "",
      packageType: isSet(object.packageType) ? globalThis.String(object.packageType) : "",
      fixedPackage: isSet(object.fixedPackage) ? globalThis.String(object.fixedPackage) : "",
      fixedPackageVersion: isSet(object.fixedPackageVersion) ? globalThis.String(object.fixedPackageVersion) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      relatedUrls: globalThis.Array.isArray(object?.relatedUrls)
        ? object.relatedUrls.map((e: any) => globalThis.String(e))
        : [],
      affectedImages: globalThis.Array.isArray(object?.affectedImages)
        ? object.affectedImages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Vulnerability): unknown {
    const obj: any = {};
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.affectedPackageVersion !== "") {
      obj.affectedPackageVersion = message.affectedPackageVersion;
    }
    if (message.cveId !== "") {
      obj.cveId = message.cveId;
    }
    if (message.cpeUri !== "") {
      obj.cpeUri = message.cpeUri;
    }
    if (message.severity !== 0) {
      obj.severity = severityToJSON(message.severity);
    }
    if (message.cvssScore !== 0) {
      obj.cvssScore = message.cvssScore;
    }
    if (message.cvssVector !== "") {
      obj.cvssVector = message.cvssVector;
    }
    if (message.fixedCpeUri !== "") {
      obj.fixedCpeUri = message.fixedCpeUri;
    }
    if (message.packageType !== "") {
      obj.packageType = message.packageType;
    }
    if (message.fixedPackage !== "") {
      obj.fixedPackage = message.fixedPackage;
    }
    if (message.fixedPackageVersion !== "") {
      obj.fixedPackageVersion = message.fixedPackageVersion;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.relatedUrls?.length) {
      obj.relatedUrls = message.relatedUrls;
    }
    if (message.affectedImages?.length) {
      obj.affectedImages = message.affectedImages;
    }
    return obj;
  },

  create(base?: DeepPartial<Vulnerability>): Vulnerability {
    return Vulnerability.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Vulnerability>): Vulnerability {
    const message = createBaseVulnerability();
    message.packageName = object.packageName ?? "";
    message.affectedPackageVersion = object.affectedPackageVersion ?? "";
    message.cveId = object.cveId ?? "";
    message.cpeUri = object.cpeUri ?? "";
    message.severity = object.severity ?? 0;
    message.cvssScore = object.cvssScore ?? 0;
    message.cvssVector = object.cvssVector ?? "";
    message.fixedCpeUri = object.fixedCpeUri ?? "";
    message.packageType = object.packageType ?? "";
    message.fixedPackage = object.fixedPackage ?? "";
    message.fixedPackageVersion = object.fixedPackageVersion ?? "";
    message.description = object.description ?? "";
    message.relatedUrls = object.relatedUrls?.map((e) => e) || [];
    message.affectedImages = object.affectedImages?.map((e) => e) || [];
    return message;
  },
};

function createBaseFinding(): Finding {
  return {
    resourceName: "",
    type: 0,
    state: 0,
    finding: "",
    severity: 0,
    eventTime: undefined,
    vulnerability: undefined,
  };
}

export const Finding: MessageFns<Finding> = {
  encode(message: Finding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.finding !== "") {
      writer.uint32(34).string(message.finding);
    }
    if (message.severity !== 0) {
      writer.uint32(40).int32(message.severity);
    }
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(50).fork()).join();
    }
    if (message.vulnerability !== undefined) {
      Vulnerability.encode(message.vulnerability, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Finding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.finding = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.vulnerability = Vulnerability.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Finding {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      type: isSet(object.type) ? findingTypeFromJSON(object.type) : 0,
      state: isSet(object.state) ? finding_StateFromJSON(object.state) : 0,
      finding: isSet(object.finding) ? globalThis.String(object.finding) : "",
      severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      vulnerability: isSet(object.vulnerability) ? Vulnerability.fromJSON(object.vulnerability) : undefined,
    };
  },

  toJSON(message: Finding): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.type !== 0) {
      obj.type = findingTypeToJSON(message.type);
    }
    if (message.state !== 0) {
      obj.state = finding_StateToJSON(message.state);
    }
    if (message.finding !== "") {
      obj.finding = message.finding;
    }
    if (message.severity !== 0) {
      obj.severity = severityToJSON(message.severity);
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.vulnerability !== undefined) {
      obj.vulnerability = Vulnerability.toJSON(message.vulnerability);
    }
    return obj;
  },

  create(base?: DeepPartial<Finding>): Finding {
    return Finding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Finding>): Finding {
    const message = createBaseFinding();
    message.resourceName = object.resourceName ?? "";
    message.type = object.type ?? 0;
    message.state = object.state ?? 0;
    message.finding = object.finding ?? "";
    message.severity = object.severity ?? 0;
    message.eventTime = object.eventTime ?? undefined;
    message.vulnerability = (object.vulnerability !== undefined && object.vulnerability !== null)
      ? Vulnerability.fromPartial(object.vulnerability)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
