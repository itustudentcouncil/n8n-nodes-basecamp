// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/migration/v2/migration_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { MigrationSubtask, MigrationWorkflow } from "./migration_entities.js";

export const protobufPackage = "google.cloud.bigquery.migration.v2";

/** Request to create a migration workflow resource. */
export interface CreateMigrationWorkflowRequest {
  /**
   * Required. The name of the project to which this migration workflow belongs.
   * Example: `projects/foo/locations/bar`
   */
  parent: string;
  /** Required. The migration workflow to create. */
  migrationWorkflow: MigrationWorkflow | undefined;
}

/** A request to get a previously created migration workflow. */
export interface GetMigrationWorkflowRequest {
  /**
   * Required. The unique identifier for the migration workflow.
   * Example: `projects/123/locations/us/workflows/1234`
   */
  name: string;
  /** The list of fields to be retrieved. */
  readMask: string[] | undefined;
}

/** A request to list previously created migration workflows. */
export interface ListMigrationWorkflowsRequest {
  /**
   * Required. The project and location of the migration workflows to list.
   * Example: `projects/123/locations/us`
   */
  parent: string;
  /** The list of fields to be retrieved. */
  readMask:
    | string[]
    | undefined;
  /**
   * The maximum number of migration workflows to return. The service may return
   * fewer than this number.
   */
  pageSize: number;
  /**
   * A page token, received from previous `ListMigrationWorkflows` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListMigrationWorkflows`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response object for a `ListMigrationWorkflows` call. */
export interface ListMigrationWorkflowsResponse {
  /** The migration workflows for the specified project / location. */
  migrationWorkflows: MigrationWorkflow[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** A request to delete a previously created migration workflow. */
export interface DeleteMigrationWorkflowRequest {
  /**
   * Required. The unique identifier for the migration workflow.
   * Example: `projects/123/locations/us/workflows/1234`
   */
  name: string;
}

/** A request to start a previously created migration workflow. */
export interface StartMigrationWorkflowRequest {
  /**
   * Required. The unique identifier for the migration workflow.
   * Example: `projects/123/locations/us/workflows/1234`
   */
  name: string;
}

/** A request to get a previously created migration subtasks. */
export interface GetMigrationSubtaskRequest {
  /**
   * Required. The unique identifier for the migration subtask.
   * Example: `projects/123/locations/us/workflows/1234/subtasks/543`
   */
  name: string;
  /** Optional. The list of fields to be retrieved. */
  readMask: string[] | undefined;
}

/** A request to list previously created migration subtasks. */
export interface ListMigrationSubtasksRequest {
  /**
   * Required. The migration task of the subtasks to list.
   * Example: `projects/123/locations/us/workflows/1234`
   */
  parent: string;
  /** Optional. The list of fields to be retrieved. */
  readMask:
    | string[]
    | undefined;
  /**
   * Optional. The maximum number of migration tasks to return. The service may
   * return fewer than this number.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from previous `ListMigrationSubtasks`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListMigrationSubtasks`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. The filter to apply. This can be used to get the subtasks of a
   * specific tasks in a workflow, e.g. `migration_task = "ab012"` where
   * `"ab012"` is the task ID (not the name in the named map).
   */
  filter: string;
}

/** Response object for a `ListMigrationSubtasks` call. */
export interface ListMigrationSubtasksResponse {
  /** The migration subtasks for the specified task. */
  migrationSubtasks: MigrationSubtask[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseCreateMigrationWorkflowRequest(): CreateMigrationWorkflowRequest {
  return { parent: "", migrationWorkflow: undefined };
}

export const CreateMigrationWorkflowRequest: MessageFns<CreateMigrationWorkflowRequest> = {
  encode(message: CreateMigrationWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.migrationWorkflow !== undefined) {
      MigrationWorkflow.encode(message.migrationWorkflow, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMigrationWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMigrationWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.migrationWorkflow = MigrationWorkflow.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMigrationWorkflowRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      migrationWorkflow: isSet(object.migrationWorkflow)
        ? MigrationWorkflow.fromJSON(object.migrationWorkflow)
        : undefined,
    };
  },

  toJSON(message: CreateMigrationWorkflowRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.migrationWorkflow !== undefined) {
      obj.migrationWorkflow = MigrationWorkflow.toJSON(message.migrationWorkflow);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMigrationWorkflowRequest>): CreateMigrationWorkflowRequest {
    return CreateMigrationWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMigrationWorkflowRequest>): CreateMigrationWorkflowRequest {
    const message = createBaseCreateMigrationWorkflowRequest();
    message.parent = object.parent ?? "";
    message.migrationWorkflow = (object.migrationWorkflow !== undefined && object.migrationWorkflow !== null)
      ? MigrationWorkflow.fromPartial(object.migrationWorkflow)
      : undefined;
    return message;
  },
};

function createBaseGetMigrationWorkflowRequest(): GetMigrationWorkflowRequest {
  return { name: "", readMask: undefined };
}

export const GetMigrationWorkflowRequest: MessageFns<GetMigrationWorkflowRequest> = {
  encode(message: GetMigrationWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMigrationWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMigrationWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMigrationWorkflowRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetMigrationWorkflowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetMigrationWorkflowRequest>): GetMigrationWorkflowRequest {
    return GetMigrationWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMigrationWorkflowRequest>): GetMigrationWorkflowRequest {
    const message = createBaseGetMigrationWorkflowRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListMigrationWorkflowsRequest(): ListMigrationWorkflowsRequest {
  return { parent: "", readMask: undefined, pageSize: 0, pageToken: "" };
}

export const ListMigrationWorkflowsRequest: MessageFns<ListMigrationWorkflowsRequest> = {
  encode(message: ListMigrationWorkflowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMigrationWorkflowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMigrationWorkflowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMigrationWorkflowsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMigrationWorkflowsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMigrationWorkflowsRequest>): ListMigrationWorkflowsRequest {
    return ListMigrationWorkflowsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMigrationWorkflowsRequest>): ListMigrationWorkflowsRequest {
    const message = createBaseListMigrationWorkflowsRequest();
    message.parent = object.parent ?? "";
    message.readMask = object.readMask ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMigrationWorkflowsResponse(): ListMigrationWorkflowsResponse {
  return { migrationWorkflows: [], nextPageToken: "" };
}

export const ListMigrationWorkflowsResponse: MessageFns<ListMigrationWorkflowsResponse> = {
  encode(message: ListMigrationWorkflowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.migrationWorkflows) {
      MigrationWorkflow.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMigrationWorkflowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMigrationWorkflowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrationWorkflows.push(MigrationWorkflow.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMigrationWorkflowsResponse {
    return {
      migrationWorkflows: globalThis.Array.isArray(object?.migrationWorkflows)
        ? object.migrationWorkflows.map((e: any) => MigrationWorkflow.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMigrationWorkflowsResponse): unknown {
    const obj: any = {};
    if (message.migrationWorkflows?.length) {
      obj.migrationWorkflows = message.migrationWorkflows.map((e) => MigrationWorkflow.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMigrationWorkflowsResponse>): ListMigrationWorkflowsResponse {
    return ListMigrationWorkflowsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMigrationWorkflowsResponse>): ListMigrationWorkflowsResponse {
    const message = createBaseListMigrationWorkflowsResponse();
    message.migrationWorkflows = object.migrationWorkflows?.map((e) => MigrationWorkflow.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteMigrationWorkflowRequest(): DeleteMigrationWorkflowRequest {
  return { name: "" };
}

export const DeleteMigrationWorkflowRequest: MessageFns<DeleteMigrationWorkflowRequest> = {
  encode(message: DeleteMigrationWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMigrationWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMigrationWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMigrationWorkflowRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteMigrationWorkflowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMigrationWorkflowRequest>): DeleteMigrationWorkflowRequest {
    return DeleteMigrationWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMigrationWorkflowRequest>): DeleteMigrationWorkflowRequest {
    const message = createBaseDeleteMigrationWorkflowRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStartMigrationWorkflowRequest(): StartMigrationWorkflowRequest {
  return { name: "" };
}

export const StartMigrationWorkflowRequest: MessageFns<StartMigrationWorkflowRequest> = {
  encode(message: StartMigrationWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartMigrationWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartMigrationWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartMigrationWorkflowRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartMigrationWorkflowRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StartMigrationWorkflowRequest>): StartMigrationWorkflowRequest {
    return StartMigrationWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartMigrationWorkflowRequest>): StartMigrationWorkflowRequest {
    const message = createBaseStartMigrationWorkflowRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetMigrationSubtaskRequest(): GetMigrationSubtaskRequest {
  return { name: "", readMask: undefined };
}

export const GetMigrationSubtaskRequest: MessageFns<GetMigrationSubtaskRequest> = {
  encode(message: GetMigrationSubtaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMigrationSubtaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMigrationSubtaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMigrationSubtaskRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetMigrationSubtaskRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetMigrationSubtaskRequest>): GetMigrationSubtaskRequest {
    return GetMigrationSubtaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMigrationSubtaskRequest>): GetMigrationSubtaskRequest {
    const message = createBaseGetMigrationSubtaskRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListMigrationSubtasksRequest(): ListMigrationSubtasksRequest {
  return { parent: "", readMask: undefined, pageSize: 0, pageToken: "", filter: "" };
}

export const ListMigrationSubtasksRequest: MessageFns<ListMigrationSubtasksRequest> = {
  encode(message: ListMigrationSubtasksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMigrationSubtasksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMigrationSubtasksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMigrationSubtasksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListMigrationSubtasksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMigrationSubtasksRequest>): ListMigrationSubtasksRequest {
    return ListMigrationSubtasksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMigrationSubtasksRequest>): ListMigrationSubtasksRequest {
    const message = createBaseListMigrationSubtasksRequest();
    message.parent = object.parent ?? "";
    message.readMask = object.readMask ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListMigrationSubtasksResponse(): ListMigrationSubtasksResponse {
  return { migrationSubtasks: [], nextPageToken: "" };
}

export const ListMigrationSubtasksResponse: MessageFns<ListMigrationSubtasksResponse> = {
  encode(message: ListMigrationSubtasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.migrationSubtasks) {
      MigrationSubtask.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMigrationSubtasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMigrationSubtasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrationSubtasks.push(MigrationSubtask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMigrationSubtasksResponse {
    return {
      migrationSubtasks: globalThis.Array.isArray(object?.migrationSubtasks)
        ? object.migrationSubtasks.map((e: any) => MigrationSubtask.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMigrationSubtasksResponse): unknown {
    const obj: any = {};
    if (message.migrationSubtasks?.length) {
      obj.migrationSubtasks = message.migrationSubtasks.map((e) => MigrationSubtask.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMigrationSubtasksResponse>): ListMigrationSubtasksResponse {
    return ListMigrationSubtasksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMigrationSubtasksResponse>): ListMigrationSubtasksResponse {
    const message = createBaseListMigrationSubtasksResponse();
    message.migrationSubtasks = object.migrationSubtasks?.map((e) => MigrationSubtask.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service to handle EDW migrations. */
export type MigrationServiceDefinition = typeof MigrationServiceDefinition;
export const MigrationServiceDefinition = {
  name: "MigrationService",
  fullName: "google.cloud.bigquery.migration.v2.MigrationService",
  methods: {
    /** Creates a migration workflow. */
    createMigrationWorkflow: {
      name: "CreateMigrationWorkflow",
      requestType: CreateMigrationWorkflowRequest,
      requestStream: false,
      responseType: MigrationWorkflow,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              18,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              34,
              45,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a previously created migration workflow. */
    getMigrationWorkflow: {
      name: "GetMigrationWorkflow",
      requestType: GetMigrationWorkflowRequest,
      requestStream: false,
      responseType: MigrationWorkflow,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists previously created migration workflow. */
    listMigrationWorkflows: {
      name: "ListMigrationWorkflows",
      requestType: ListMigrationWorkflowsRequest,
      requestStream: false,
      responseType: ListMigrationWorkflowsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a migration workflow by name. */
    deleteMigrationWorkflow: {
      name: "DeleteMigrationWorkflow",
      requestType: DeleteMigrationWorkflowRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a previously created migration workflow. I.e., the state transitions
     * from DRAFT to RUNNING. This is a no-op if the state is already RUNNING.
     * An error will be signaled if the state is anything other than DRAFT or
     * RUNNING.
     */
    startMigrationWorkflow: {
      name: "StartMigrationWorkflow",
      requestType: StartMigrationWorkflowRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets a previously created migration subtask. */
    getMigrationSubtask: {
      name: "GetMigrationSubtask",
      requestType: GetMigrationSubtaskRequest,
      requestStream: false,
      responseType: MigrationSubtask,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              47,
              115,
              117,
              98,
              116,
              97,
              115,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists previously created migration subtasks. */
    listMigrationSubtasks: {
      name: "ListMigrationSubtasks",
      requestType: ListMigrationSubtasksRequest,
      requestStream: false,
      responseType: ListMigrationSubtasksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              98,
              116,
              97,
              115,
              107,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface MigrationServiceImplementation<CallContextExt = {}> {
  /** Creates a migration workflow. */
  createMigrationWorkflow(
    request: CreateMigrationWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MigrationWorkflow>>;
  /** Gets a previously created migration workflow. */
  getMigrationWorkflow(
    request: GetMigrationWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MigrationWorkflow>>;
  /** Lists previously created migration workflow. */
  listMigrationWorkflows(
    request: ListMigrationWorkflowsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMigrationWorkflowsResponse>>;
  /** Deletes a migration workflow by name. */
  deleteMigrationWorkflow(
    request: DeleteMigrationWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Starts a previously created migration workflow. I.e., the state transitions
   * from DRAFT to RUNNING. This is a no-op if the state is already RUNNING.
   * An error will be signaled if the state is anything other than DRAFT or
   * RUNNING.
   */
  startMigrationWorkflow(
    request: StartMigrationWorkflowRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets a previously created migration subtask. */
  getMigrationSubtask(
    request: GetMigrationSubtaskRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MigrationSubtask>>;
  /** Lists previously created migration subtasks. */
  listMigrationSubtasks(
    request: ListMigrationSubtasksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMigrationSubtasksResponse>>;
}

export interface MigrationServiceClient<CallOptionsExt = {}> {
  /** Creates a migration workflow. */
  createMigrationWorkflow(
    request: DeepPartial<CreateMigrationWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MigrationWorkflow>;
  /** Gets a previously created migration workflow. */
  getMigrationWorkflow(
    request: DeepPartial<GetMigrationWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MigrationWorkflow>;
  /** Lists previously created migration workflow. */
  listMigrationWorkflows(
    request: DeepPartial<ListMigrationWorkflowsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMigrationWorkflowsResponse>;
  /** Deletes a migration workflow by name. */
  deleteMigrationWorkflow(
    request: DeepPartial<DeleteMigrationWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Starts a previously created migration workflow. I.e., the state transitions
   * from DRAFT to RUNNING. This is a no-op if the state is already RUNNING.
   * An error will be signaled if the state is anything other than DRAFT or
   * RUNNING.
   */
  startMigrationWorkflow(
    request: DeepPartial<StartMigrationWorkflowRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets a previously created migration subtask. */
  getMigrationSubtask(
    request: DeepPartial<GetMigrationSubtaskRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MigrationSubtask>;
  /** Lists previously created migration subtasks. */
  listMigrationSubtasks(
    request: DeepPartial<ListMigrationSubtasksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMigrationSubtasksResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
