// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/migration/v2/translation_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.migration.v2";

/**
 * The translation details to capture the necessary settings for a translation
 * job.
 */
export interface TranslationDetails {
  /** The mapping from source to target SQL. */
  sourceTargetMapping: SourceTargetMapping[];
  /** The base URI for all writes to persistent storage. */
  targetBaseUri: string;
  /** The default source environment values for the translation. */
  sourceEnvironment:
    | SourceEnvironment
    | undefined;
  /**
   * The list of literal targets that will be directly returned to the response.
   * Each entry consists of the constructed path, EXCLUDING the base path. Not
   * providing a target_base_uri will prevent writing to persistent storage.
   */
  targetReturnLiterals: string[];
  /**
   * The types of output to generate, e.g. sql, metadata,
   * lineage_from_sql_scripts, etc. If not specified, a default set of
   * targets will be generated. Some additional target types may be slower to
   * generate. See the documentation for the set of available target types.
   */
  targetTypes: string[];
}

/** Represents one mapping from a source SQL to a target SQL. */
export interface SourceTargetMapping {
  /** The source SQL or the path to it. */
  sourceSpec:
    | SourceSpec
    | undefined;
  /** The target SQL or the path for it. */
  targetSpec: TargetSpec | undefined;
}

/** Represents one path to the location that holds source data. */
export interface SourceSpec {
  /** The base URI for all files to be read in as sources for translation. */
  baseUri?:
    | string
    | undefined;
  /** Source literal. */
  literal?:
    | Literal
    | undefined;
  /** Optional. The optional field to specify the encoding of the sql bytes. */
  encoding: string;
}

/** Represents one path to the location that holds target data. */
export interface TargetSpec {
  /**
   * The relative path for the target data. Given source file
   * `base_uri/input/sql`, the output would be
   * `target_base_uri/sql/relative_path/input.sql`.
   */
  relativePath: string;
}

/** Literal data. */
export interface Literal {
  /** Literal string data. */
  literalString?:
    | string
    | undefined;
  /** Literal byte data. */
  literalBytes?:
    | Buffer
    | undefined;
  /** Required. The identifier of the literal entry. */
  relativePath: string;
}

/** Represents the default source environment values for the translation. */
export interface SourceEnvironment {
  /**
   * The default database name to fully qualify SQL objects when their database
   * name is missing.
   */
  defaultDatabase: string;
  /**
   * The schema search path. When SQL objects are missing schema name,
   * translation engine will search through this list to find the value.
   */
  schemaSearchPath: string[];
  /**
   * Optional. Expects a validQ BigQuery dataset ID that exists, e.g.,
   * project-123.metadata_store_123.  If specified, translation will search and
   * read the required schema information from a metadata store in this dataset.
   * If metadata store doesn't exist, translation will parse the metadata file
   * and upload the schema info to a temp table in the dataset to speed up
   * future translation jobs.
   */
  metadataStoreDataset: string;
}

function createBaseTranslationDetails(): TranslationDetails {
  return {
    sourceTargetMapping: [],
    targetBaseUri: "",
    sourceEnvironment: undefined,
    targetReturnLiterals: [],
    targetTypes: [],
  };
}

export const TranslationDetails: MessageFns<TranslationDetails> = {
  encode(message: TranslationDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sourceTargetMapping) {
      SourceTargetMapping.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.targetBaseUri !== "") {
      writer.uint32(18).string(message.targetBaseUri);
    }
    if (message.sourceEnvironment !== undefined) {
      SourceEnvironment.encode(message.sourceEnvironment, writer.uint32(26).fork()).join();
    }
    for (const v of message.targetReturnLiterals) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.targetTypes) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceTargetMapping.push(SourceTargetMapping.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetBaseUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sourceEnvironment = SourceEnvironment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.targetReturnLiterals.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.targetTypes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationDetails {
    return {
      sourceTargetMapping: globalThis.Array.isArray(object?.sourceTargetMapping)
        ? object.sourceTargetMapping.map((e: any) => SourceTargetMapping.fromJSON(e))
        : [],
      targetBaseUri: isSet(object.targetBaseUri) ? globalThis.String(object.targetBaseUri) : "",
      sourceEnvironment: isSet(object.sourceEnvironment)
        ? SourceEnvironment.fromJSON(object.sourceEnvironment)
        : undefined,
      targetReturnLiterals: globalThis.Array.isArray(object?.targetReturnLiterals)
        ? object.targetReturnLiterals.map((e: any) => globalThis.String(e))
        : [],
      targetTypes: globalThis.Array.isArray(object?.targetTypes)
        ? object.targetTypes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TranslationDetails): unknown {
    const obj: any = {};
    if (message.sourceTargetMapping?.length) {
      obj.sourceTargetMapping = message.sourceTargetMapping.map((e) => SourceTargetMapping.toJSON(e));
    }
    if (message.targetBaseUri !== "") {
      obj.targetBaseUri = message.targetBaseUri;
    }
    if (message.sourceEnvironment !== undefined) {
      obj.sourceEnvironment = SourceEnvironment.toJSON(message.sourceEnvironment);
    }
    if (message.targetReturnLiterals?.length) {
      obj.targetReturnLiterals = message.targetReturnLiterals;
    }
    if (message.targetTypes?.length) {
      obj.targetTypes = message.targetTypes;
    }
    return obj;
  },

  create(base?: DeepPartial<TranslationDetails>): TranslationDetails {
    return TranslationDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TranslationDetails>): TranslationDetails {
    const message = createBaseTranslationDetails();
    message.sourceTargetMapping = object.sourceTargetMapping?.map((e) => SourceTargetMapping.fromPartial(e)) || [];
    message.targetBaseUri = object.targetBaseUri ?? "";
    message.sourceEnvironment = (object.sourceEnvironment !== undefined && object.sourceEnvironment !== null)
      ? SourceEnvironment.fromPartial(object.sourceEnvironment)
      : undefined;
    message.targetReturnLiterals = object.targetReturnLiterals?.map((e) => e) || [];
    message.targetTypes = object.targetTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseSourceTargetMapping(): SourceTargetMapping {
  return { sourceSpec: undefined, targetSpec: undefined };
}

export const SourceTargetMapping: MessageFns<SourceTargetMapping> = {
  encode(message: SourceTargetMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceSpec !== undefined) {
      SourceSpec.encode(message.sourceSpec, writer.uint32(10).fork()).join();
    }
    if (message.targetSpec !== undefined) {
      TargetSpec.encode(message.targetSpec, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceTargetMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceTargetMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceSpec = SourceSpec.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetSpec = TargetSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceTargetMapping {
    return {
      sourceSpec: isSet(object.sourceSpec) ? SourceSpec.fromJSON(object.sourceSpec) : undefined,
      targetSpec: isSet(object.targetSpec) ? TargetSpec.fromJSON(object.targetSpec) : undefined,
    };
  },

  toJSON(message: SourceTargetMapping): unknown {
    const obj: any = {};
    if (message.sourceSpec !== undefined) {
      obj.sourceSpec = SourceSpec.toJSON(message.sourceSpec);
    }
    if (message.targetSpec !== undefined) {
      obj.targetSpec = TargetSpec.toJSON(message.targetSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<SourceTargetMapping>): SourceTargetMapping {
    return SourceTargetMapping.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceTargetMapping>): SourceTargetMapping {
    const message = createBaseSourceTargetMapping();
    message.sourceSpec = (object.sourceSpec !== undefined && object.sourceSpec !== null)
      ? SourceSpec.fromPartial(object.sourceSpec)
      : undefined;
    message.targetSpec = (object.targetSpec !== undefined && object.targetSpec !== null)
      ? TargetSpec.fromPartial(object.targetSpec)
      : undefined;
    return message;
  },
};

function createBaseSourceSpec(): SourceSpec {
  return { baseUri: undefined, literal: undefined, encoding: "" };
}

export const SourceSpec: MessageFns<SourceSpec> = {
  encode(message: SourceSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseUri !== undefined) {
      writer.uint32(10).string(message.baseUri);
    }
    if (message.literal !== undefined) {
      Literal.encode(message.literal, writer.uint32(18).fork()).join();
    }
    if (message.encoding !== "") {
      writer.uint32(26).string(message.encoding);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.baseUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.literal = Literal.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.encoding = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceSpec {
    return {
      baseUri: isSet(object.baseUri) ? globalThis.String(object.baseUri) : undefined,
      literal: isSet(object.literal) ? Literal.fromJSON(object.literal) : undefined,
      encoding: isSet(object.encoding) ? globalThis.String(object.encoding) : "",
    };
  },

  toJSON(message: SourceSpec): unknown {
    const obj: any = {};
    if (message.baseUri !== undefined) {
      obj.baseUri = message.baseUri;
    }
    if (message.literal !== undefined) {
      obj.literal = Literal.toJSON(message.literal);
    }
    if (message.encoding !== "") {
      obj.encoding = message.encoding;
    }
    return obj;
  },

  create(base?: DeepPartial<SourceSpec>): SourceSpec {
    return SourceSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceSpec>): SourceSpec {
    const message = createBaseSourceSpec();
    message.baseUri = object.baseUri ?? undefined;
    message.literal = (object.literal !== undefined && object.literal !== null)
      ? Literal.fromPartial(object.literal)
      : undefined;
    message.encoding = object.encoding ?? "";
    return message;
  },
};

function createBaseTargetSpec(): TargetSpec {
  return { relativePath: "" };
}

export const TargetSpec: MessageFns<TargetSpec> = {
  encode(message: TargetSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.relativePath !== "") {
      writer.uint32(10).string(message.relativePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.relativePath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetSpec {
    return { relativePath: isSet(object.relativePath) ? globalThis.String(object.relativePath) : "" };
  },

  toJSON(message: TargetSpec): unknown {
    const obj: any = {};
    if (message.relativePath !== "") {
      obj.relativePath = message.relativePath;
    }
    return obj;
  },

  create(base?: DeepPartial<TargetSpec>): TargetSpec {
    return TargetSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetSpec>): TargetSpec {
    const message = createBaseTargetSpec();
    message.relativePath = object.relativePath ?? "";
    return message;
  },
};

function createBaseLiteral(): Literal {
  return { literalString: undefined, literalBytes: undefined, relativePath: "" };
}

export const Literal: MessageFns<Literal> = {
  encode(message: Literal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.literalString !== undefined) {
      writer.uint32(18).string(message.literalString);
    }
    if (message.literalBytes !== undefined) {
      writer.uint32(26).bytes(message.literalBytes);
    }
    if (message.relativePath !== "") {
      writer.uint32(10).string(message.relativePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Literal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiteral();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.literalString = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.literalBytes = Buffer.from(reader.bytes());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.relativePath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Literal {
    return {
      literalString: isSet(object.literalString) ? globalThis.String(object.literalString) : undefined,
      literalBytes: isSet(object.literalBytes) ? Buffer.from(bytesFromBase64(object.literalBytes)) : undefined,
      relativePath: isSet(object.relativePath) ? globalThis.String(object.relativePath) : "",
    };
  },

  toJSON(message: Literal): unknown {
    const obj: any = {};
    if (message.literalString !== undefined) {
      obj.literalString = message.literalString;
    }
    if (message.literalBytes !== undefined) {
      obj.literalBytes = base64FromBytes(message.literalBytes);
    }
    if (message.relativePath !== "") {
      obj.relativePath = message.relativePath;
    }
    return obj;
  },

  create(base?: DeepPartial<Literal>): Literal {
    return Literal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Literal>): Literal {
    const message = createBaseLiteral();
    message.literalString = object.literalString ?? undefined;
    message.literalBytes = object.literalBytes ?? undefined;
    message.relativePath = object.relativePath ?? "";
    return message;
  },
};

function createBaseSourceEnvironment(): SourceEnvironment {
  return { defaultDatabase: "", schemaSearchPath: [], metadataStoreDataset: "" };
}

export const SourceEnvironment: MessageFns<SourceEnvironment> = {
  encode(message: SourceEnvironment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defaultDatabase !== "") {
      writer.uint32(10).string(message.defaultDatabase);
    }
    for (const v of message.schemaSearchPath) {
      writer.uint32(18).string(v!);
    }
    if (message.metadataStoreDataset !== "") {
      writer.uint32(26).string(message.metadataStoreDataset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceEnvironment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.defaultDatabase = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schemaSearchPath.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataStoreDataset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceEnvironment {
    return {
      defaultDatabase: isSet(object.defaultDatabase) ? globalThis.String(object.defaultDatabase) : "",
      schemaSearchPath: globalThis.Array.isArray(object?.schemaSearchPath)
        ? object.schemaSearchPath.map((e: any) => globalThis.String(e))
        : [],
      metadataStoreDataset: isSet(object.metadataStoreDataset) ? globalThis.String(object.metadataStoreDataset) : "",
    };
  },

  toJSON(message: SourceEnvironment): unknown {
    const obj: any = {};
    if (message.defaultDatabase !== "") {
      obj.defaultDatabase = message.defaultDatabase;
    }
    if (message.schemaSearchPath?.length) {
      obj.schemaSearchPath = message.schemaSearchPath;
    }
    if (message.metadataStoreDataset !== "") {
      obj.metadataStoreDataset = message.metadataStoreDataset;
    }
    return obj;
  },

  create(base?: DeepPartial<SourceEnvironment>): SourceEnvironment {
    return SourceEnvironment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceEnvironment>): SourceEnvironment {
    const message = createBaseSourceEnvironment();
    message.defaultDatabase = object.defaultDatabase ?? "";
    message.schemaSearchPath = object.schemaSearchPath?.map((e) => e) || [];
    message.metadataStoreDataset = object.metadataStoreDataset ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
