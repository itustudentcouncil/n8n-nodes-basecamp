// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/biglake/v1alpha1/metastore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.bigquery.biglake.v1alpha1";

/**
 * View on Table. Represents which fields will be populated for calls that
 * return Table objects.
 */
export enum TableView {
  /** TABLE_VIEW_UNSPECIFIED - Default value. The API will default to the BASIC view. */
  TABLE_VIEW_UNSPECIFIED = 0,
  /**
   * BASIC - Include only table names.
   * This is the default value.
   */
  BASIC = 1,
  /** FULL - Include everything. */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function tableViewFromJSON(object: any): TableView {
  switch (object) {
    case 0:
    case "TABLE_VIEW_UNSPECIFIED":
      return TableView.TABLE_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return TableView.BASIC;
    case 2:
    case "FULL":
      return TableView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TableView.UNRECOGNIZED;
  }
}

export function tableViewToJSON(object: TableView): string {
  switch (object) {
    case TableView.TABLE_VIEW_UNSPECIFIED:
      return "TABLE_VIEW_UNSPECIFIED";
    case TableView.BASIC:
      return "BASIC";
    case TableView.FULL:
      return "FULL";
    case TableView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Catalog is the container of databases. */
export interface Catalog {
  /**
   * Output only. The resource name.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
   */
  name: string;
  /** Output only. The creation time of the catalog. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last modification time of the catalog. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The deletion time of the catalog. Only set after the catalog
   * is deleted.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. The time when this catalog is considered expired. Only set
   * after the catalog is deleted.
   */
  expireTime: Date | undefined;
}

/** Database is the container of tables. */
export interface Database {
  /** Options of a Hive database. */
  hiveOptions?:
    | HiveDatabaseOptions
    | undefined;
  /**
   * Output only. The resource name.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  name: string;
  /** Output only. The creation time of the database. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last modification time of the database. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The deletion time of the database. Only set after the database
   * is deleted.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. The time when this database is considered expired. Only set
   * after the database is deleted.
   */
  expireTime:
    | Date
    | undefined;
  /** The database type. */
  type: Database_Type;
}

/** The database type. */
export enum Database_Type {
  /** TYPE_UNSPECIFIED - The type is not specified. */
  TYPE_UNSPECIFIED = 0,
  /**
   * HIVE - Represents a database storing tables compatible with Hive Metastore
   * tables.
   */
  HIVE = 1,
  UNRECOGNIZED = -1,
}

export function database_TypeFromJSON(object: any): Database_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Database_Type.TYPE_UNSPECIFIED;
    case 1:
    case "HIVE":
      return Database_Type.HIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Database_Type.UNRECOGNIZED;
  }
}

export function database_TypeToJSON(object: Database_Type): string {
  switch (object) {
    case Database_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Database_Type.HIVE:
      return "HIVE";
    case Database_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a table. */
export interface Table {
  /** Options of a Hive table. */
  hiveOptions?:
    | HiveTableOptions
    | undefined;
  /**
   * Output only. The resource name.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
   */
  name: string;
  /** Output only. The creation time of the table. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last modification time of the table. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The deletion time of the table. Only set after the table is
   * deleted.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. The time when this table is considered expired. Only set after
   * the table is deleted.
   */
  expireTime:
    | Date
    | undefined;
  /** The table type. */
  type: Table_Type;
  /**
   * The checksum of a table object computed by the server based on the value of
   * other fields. It may be sent on update requests to ensure the client has an
   * up-to-date value before proceeding. It is only checked for update table
   * operations.
   */
  etag: string;
}

/** The table type. */
export enum Table_Type {
  /** TYPE_UNSPECIFIED - The type is not specified. */
  TYPE_UNSPECIFIED = 0,
  /** HIVE - Represents a table compatible with Hive Metastore tables. */
  HIVE = 1,
  UNRECOGNIZED = -1,
}

export function table_TypeFromJSON(object: any): Table_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Table_Type.TYPE_UNSPECIFIED;
    case 1:
    case "HIVE":
      return Table_Type.HIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Table_Type.UNRECOGNIZED;
  }
}

export function table_TypeToJSON(object: Table_Type): string {
  switch (object) {
    case Table_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Table_Type.HIVE:
      return "HIVE";
    case Table_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a lock. */
export interface Lock {
  /**
   * The table ID (not fully qualified name) in the same database that the
   * lock will be created on. The table must exist.
   */
  tableId?:
    | string
    | undefined;
  /**
   * Output only. The resource name.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/locks/{lock_id}
   */
  name: string;
  /** Output only. The creation time of the lock. */
  createTime:
    | Date
    | undefined;
  /** The lock type. */
  type: Lock_Type;
  /** Output only. The lock state. */
  state: Lock_State;
}

/** The lock type. */
export enum Lock_Type {
  /** TYPE_UNSPECIFIED - The type is not specified. */
  TYPE_UNSPECIFIED = 0,
  /**
   * EXCLUSIVE - An exclusive lock prevents another lock from being created on the same
   * resource.
   */
  EXCLUSIVE = 1,
  UNRECOGNIZED = -1,
}

export function lock_TypeFromJSON(object: any): Lock_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Lock_Type.TYPE_UNSPECIFIED;
    case 1:
    case "EXCLUSIVE":
      return Lock_Type.EXCLUSIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lock_Type.UNRECOGNIZED;
  }
}

export function lock_TypeToJSON(object: Lock_Type): string {
  switch (object) {
    case Lock_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Lock_Type.EXCLUSIVE:
      return "EXCLUSIVE";
    case Lock_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The lock state. */
export enum Lock_State {
  /** STATE_UNSPECIFIED - The state is not specified. */
  STATE_UNSPECIFIED = 0,
  /** WAITING - Waiting to acquire the lock. */
  WAITING = 1,
  /** ACQUIRED - The lock has been acquired. */
  ACQUIRED = 2,
  UNRECOGNIZED = -1,
}

export function lock_StateFromJSON(object: any): Lock_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Lock_State.STATE_UNSPECIFIED;
    case 1:
    case "WAITING":
      return Lock_State.WAITING;
    case 2:
    case "ACQUIRED":
      return Lock_State.ACQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lock_State.UNRECOGNIZED;
  }
}

export function lock_StateToJSON(object: Lock_State): string {
  switch (object) {
    case Lock_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Lock_State.WAITING:
      return "WAITING";
    case Lock_State.ACQUIRED:
      return "ACQUIRED";
    case Lock_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for the CreateCatalog method. */
export interface CreateCatalogRequest {
  /**
   * Required. The parent resource where this catalog will be created.
   * Format: projects/{project_id_or_number}/locations/{location_id}
   */
  parent: string;
  /**
   * Required. The catalog to create.
   * The `name` field does not need to be provided.
   */
  catalog:
    | Catalog
    | undefined;
  /**
   * Required. The ID to use for the catalog, which will become the final
   * component of the catalog's resource name.
   */
  catalogId: string;
}

/** Request message for the DeleteCatalog method. */
export interface DeleteCatalogRequest {
  /**
   * Required. The name of the catalog to delete.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
   */
  name: string;
}

/** Request message for the GetCatalog method. */
export interface GetCatalogRequest {
  /**
   * Required. The name of the catalog to retrieve.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
   */
  name: string;
}

/** Request message for the ListCatalogs method. */
export interface ListCatalogsRequest {
  /**
   * Required. The parent, which owns this collection of catalogs.
   * Format: projects/{project_id_or_number}/locations/{location_id}
   */
  parent: string;
  /**
   * The maximum number of catalogs to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 catalogs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCatalogs` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCatalogs` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListCatalogs method. */
export interface ListCatalogsResponse {
  /** The catalogs from the specified project. */
  catalogs: Catalog[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for the CreateDatabase method. */
export interface CreateDatabaseRequest {
  /**
   * Required. The parent resource where this database will be created.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
   */
  parent: string;
  /**
   * Required. The database to create.
   * The `name` field does not need to be provided.
   */
  database:
    | Database
    | undefined;
  /**
   * Required. The ID to use for the database, which will become the final
   * component of the database's resource name.
   */
  databaseId: string;
}

/** Request message for the DeleteDatabase method. */
export interface DeleteDatabaseRequest {
  /**
   * Required. The name of the database to delete.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  name: string;
}

/** Request message for the UpdateDatabase method. */
export interface UpdateDatabaseRequest {
  /**
   * Required. The database to update.
   *
   * The database's `name` field is used to identify the database to update.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  database:
    | Database
    | undefined;
  /**
   * The list of fields to update.
   *
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * If not set, defaults to all of the fields that are allowed to update.
   */
  updateMask: string[] | undefined;
}

/** Request message for the GetDatabase method. */
export interface GetDatabaseRequest {
  /**
   * Required. The name of the database to retrieve.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  name: string;
}

/** Request message for the ListDatabases method. */
export interface ListDatabasesRequest {
  /**
   * Required. The parent, which owns this collection of databases.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
   */
  parent: string;
  /**
   * The maximum number of databases to return. The service may return fewer
   * than this value.
   * If unspecified, at most 50 databases will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDatabases` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDatabases` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListDatabases method. */
export interface ListDatabasesResponse {
  /** The databases from the specified catalog. */
  databases: Database[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for the CreateTable method. */
export interface CreateTableRequest {
  /**
   * Required. The parent resource where this table will be created.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  parent: string;
  /**
   * Required. The table to create. The `name` field does not need to be
   * provided for the table creation.
   */
  table:
    | Table
    | undefined;
  /**
   * Required. The ID to use for the table, which will become the final
   * component of the table's resource name.
   */
  tableId: string;
}

/** Request message for the DeleteTable method. */
export interface DeleteTableRequest {
  /**
   * Required. The name of the table to delete.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
   */
  name: string;
}

/** Request message for the UpdateTable method. */
export interface UpdateTableRequest {
  /**
   * Required. The table to update.
   *
   * The table's `name` field is used to identify the table to update.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
   */
  table:
    | Table
    | undefined;
  /**
   * The list of fields to update.
   *
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * If not set, defaults to all of the fields that are allowed to update.
   */
  updateMask: string[] | undefined;
}

/** Request message for the RenameTable method in MetastoreService */
export interface RenameTableRequest {
  /**
   * Required. The table's `name` field is used to identify the table to rename.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
   */
  name: string;
  /**
   * Required. The new `name` for the specified table, must be in the same
   * database. Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
   */
  newName: string;
}

/** Request message for the GetTable method. */
export interface GetTableRequest {
  /**
   * Required. The name of the table to retrieve.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
   */
  name: string;
}

/** Request message for the ListTables method. */
export interface ListTablesRequest {
  /**
   * Required. The parent, which owns this collection of tables.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  parent: string;
  /**
   * The maximum number of tables to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 tables will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListTables` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListTables` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /** The view for the returned tables. */
  view: TableView;
}

/** Response message for the ListTables method. */
export interface ListTablesResponse {
  /** The tables from the specified database. */
  tables: Table[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for the CreateLock method. */
export interface CreateLockRequest {
  /**
   * Required. The parent resource where this lock will be created.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  parent: string;
  /**
   * Required. The lock to create. The `name` field does not need to be provided
   * for the lock creation.
   */
  lock: Lock | undefined;
}

/** Request message for the DeleteLock method. */
export interface DeleteLockRequest {
  /**
   * Required. The name of the lock to delete.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/locks/{lock_id}
   */
  name: string;
}

/** Request message for the CheckLock method. */
export interface CheckLockRequest {
  /**
   * Required. The name of the lock to check.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/locks/{lock_id}
   */
  name: string;
}

/** Request message for the ListLocks method. */
export interface ListLocksRequest {
  /**
   * Required. The parent, which owns this collection of locks.
   * Format:
   * projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
   */
  parent: string;
  /**
   * The maximum number of locks to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 locks will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListLocks` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListLocks` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListLocks method. */
export interface ListLocksResponse {
  /** The locks from the specified database. */
  locks: Lock[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Options of a Hive database. */
export interface HiveDatabaseOptions {
  /**
   * Cloud Storage folder URI where the database data is stored, starting with
   * "gs://".
   */
  locationUri: string;
  /** Stores user supplied Hive database parameters. */
  parameters: { [key: string]: string };
}

export interface HiveDatabaseOptions_ParametersEntry {
  key: string;
  value: string;
}

/** Options of a Hive table. */
export interface HiveTableOptions {
  /** Stores user supplied Hive table parameters. */
  parameters: { [key: string]: string };
  /** Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE. */
  tableType: string;
  /** Stores physical storage information of the data. */
  storageDescriptor: HiveTableOptions_StorageDescriptor | undefined;
}

/** Serializer and deserializer information. */
export interface HiveTableOptions_SerDeInfo {
  /** The fully qualified Java class name of the serialization library. */
  serializationLib: string;
}

/** Stores physical storage information of the data. */
export interface HiveTableOptions_StorageDescriptor {
  /**
   * Cloud Storage folder URI where the table data is stored, starting with
   * "gs://".
   */
  locationUri: string;
  /** The fully qualified Java class name of the input format. */
  inputFormat: string;
  /** The fully qualified Java class name of the output format. */
  outputFormat: string;
  /** Serializer and deserializer information. */
  serdeInfo: HiveTableOptions_SerDeInfo | undefined;
}

export interface HiveTableOptions_ParametersEntry {
  key: string;
  value: string;
}

function createBaseCatalog(): Catalog {
  return { name: "", createTime: undefined, updateTime: undefined, deleteTime: undefined, expireTime: undefined };
}

export const Catalog: MessageFns<Catalog> = {
  encode(message: Catalog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(34).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Catalog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCatalog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Catalog {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: Catalog): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Catalog>): Catalog {
    return Catalog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Catalog>): Catalog {
    const message = createBaseCatalog();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseDatabase(): Database {
  return {
    hiveOptions: undefined,
    name: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    type: 0,
  };
}

export const Database: MessageFns<Database> = {
  encode(message: Database, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hiveOptions !== undefined) {
      HiveDatabaseOptions.encode(message.hiveOptions, writer.uint32(58).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(34).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Database {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.hiveOptions = HiveDatabaseOptions.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Database {
    return {
      hiveOptions: isSet(object.hiveOptions) ? HiveDatabaseOptions.fromJSON(object.hiveOptions) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      type: isSet(object.type) ? database_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Database): unknown {
    const obj: any = {};
    if (message.hiveOptions !== undefined) {
      obj.hiveOptions = HiveDatabaseOptions.toJSON(message.hiveOptions);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = database_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Database>): Database {
    return Database.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Database>): Database {
    const message = createBaseDatabase();
    message.hiveOptions = (object.hiveOptions !== undefined && object.hiveOptions !== null)
      ? HiveDatabaseOptions.fromPartial(object.hiveOptions)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseTable(): Table {
  return {
    hiveOptions: undefined,
    name: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    type: 0,
    etag: "",
  };
}

export const Table: MessageFns<Table> = {
  encode(message: Table, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hiveOptions !== undefined) {
      HiveTableOptions.encode(message.hiveOptions, writer.uint32(58).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(34).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Table {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.hiveOptions = HiveTableOptions.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Table {
    return {
      hiveOptions: isSet(object.hiveOptions) ? HiveTableOptions.fromJSON(object.hiveOptions) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      type: isSet(object.type) ? table_TypeFromJSON(object.type) : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Table): unknown {
    const obj: any = {};
    if (message.hiveOptions !== undefined) {
      obj.hiveOptions = HiveTableOptions.toJSON(message.hiveOptions);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = table_TypeToJSON(message.type);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Table>): Table {
    return Table.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Table>): Table {
    const message = createBaseTable();
    message.hiveOptions = (object.hiveOptions !== undefined && object.hiveOptions !== null)
      ? HiveTableOptions.fromPartial(object.hiveOptions)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.type = object.type ?? 0;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseLock(): Lock {
  return { tableId: undefined, name: "", createTime: undefined, type: 0, state: 0 };
}

export const Lock: MessageFns<Lock> = {
  encode(message: Lock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tableId !== undefined) {
      writer.uint32(42).string(message.tableId);
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tableId = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lock {
    return {
      tableId: isSet(object.tableId) ? globalThis.String(object.tableId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      type: isSet(object.type) ? lock_TypeFromJSON(object.type) : 0,
      state: isSet(object.state) ? lock_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Lock): unknown {
    const obj: any = {};
    if (message.tableId !== undefined) {
      obj.tableId = message.tableId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = lock_TypeToJSON(message.type);
    }
    if (message.state !== 0) {
      obj.state = lock_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Lock>): Lock {
    return Lock.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Lock>): Lock {
    const message = createBaseLock();
    message.tableId = object.tableId ?? undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.type = object.type ?? 0;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseCreateCatalogRequest(): CreateCatalogRequest {
  return { parent: "", catalog: undefined, catalogId: "" };
}

export const CreateCatalogRequest: MessageFns<CreateCatalogRequest> = {
  encode(message: CreateCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.catalog !== undefined) {
      Catalog.encode(message.catalog, writer.uint32(18).fork()).join();
    }
    if (message.catalogId !== "") {
      writer.uint32(26).string(message.catalogId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.catalog = Catalog.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.catalogId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCatalogRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      catalog: isSet(object.catalog) ? Catalog.fromJSON(object.catalog) : undefined,
      catalogId: isSet(object.catalogId) ? globalThis.String(object.catalogId) : "",
    };
  },

  toJSON(message: CreateCatalogRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.catalog !== undefined) {
      obj.catalog = Catalog.toJSON(message.catalog);
    }
    if (message.catalogId !== "") {
      obj.catalogId = message.catalogId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCatalogRequest>): CreateCatalogRequest {
    return CreateCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCatalogRequest>): CreateCatalogRequest {
    const message = createBaseCreateCatalogRequest();
    message.parent = object.parent ?? "";
    message.catalog = (object.catalog !== undefined && object.catalog !== null)
      ? Catalog.fromPartial(object.catalog)
      : undefined;
    message.catalogId = object.catalogId ?? "";
    return message;
  },
};

function createBaseDeleteCatalogRequest(): DeleteCatalogRequest {
  return { name: "" };
}

export const DeleteCatalogRequest: MessageFns<DeleteCatalogRequest> = {
  encode(message: DeleteCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCatalogRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCatalogRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCatalogRequest>): DeleteCatalogRequest {
    return DeleteCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCatalogRequest>): DeleteCatalogRequest {
    const message = createBaseDeleteCatalogRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCatalogRequest(): GetCatalogRequest {
  return { name: "" };
}

export const GetCatalogRequest: MessageFns<GetCatalogRequest> = {
  encode(message: GetCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCatalogRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCatalogRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCatalogRequest>): GetCatalogRequest {
    return GetCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCatalogRequest>): GetCatalogRequest {
    const message = createBaseGetCatalogRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCatalogsRequest(): ListCatalogsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCatalogsRequest: MessageFns<ListCatalogsRequest> = {
  encode(message: ListCatalogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCatalogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCatalogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCatalogsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCatalogsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCatalogsRequest>): ListCatalogsRequest {
    return ListCatalogsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCatalogsRequest>): ListCatalogsRequest {
    const message = createBaseListCatalogsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCatalogsResponse(): ListCatalogsResponse {
  return { catalogs: [], nextPageToken: "" };
}

export const ListCatalogsResponse: MessageFns<ListCatalogsResponse> = {
  encode(message: ListCatalogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.catalogs) {
      Catalog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCatalogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCatalogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalogs.push(Catalog.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCatalogsResponse {
    return {
      catalogs: globalThis.Array.isArray(object?.catalogs) ? object.catalogs.map((e: any) => Catalog.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCatalogsResponse): unknown {
    const obj: any = {};
    if (message.catalogs?.length) {
      obj.catalogs = message.catalogs.map((e) => Catalog.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCatalogsResponse>): ListCatalogsResponse {
    return ListCatalogsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCatalogsResponse>): ListCatalogsResponse {
    const message = createBaseListCatalogsResponse();
    message.catalogs = object.catalogs?.map((e) => Catalog.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDatabaseRequest(): CreateDatabaseRequest {
  return { parent: "", database: undefined, databaseId: "" };
}

export const CreateDatabaseRequest: MessageFns<CreateDatabaseRequest> = {
  encode(message: CreateDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.database !== undefined) {
      Database.encode(message.database, writer.uint32(18).fork()).join();
    }
    if (message.databaseId !== "") {
      writer.uint32(26).string(message.databaseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.database = Database.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.databaseId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatabaseRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      database: isSet(object.database) ? Database.fromJSON(object.database) : undefined,
      databaseId: isSet(object.databaseId) ? globalThis.String(object.databaseId) : "",
    };
  },

  toJSON(message: CreateDatabaseRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.database !== undefined) {
      obj.database = Database.toJSON(message.database);
    }
    if (message.databaseId !== "") {
      obj.databaseId = message.databaseId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatabaseRequest>): CreateDatabaseRequest {
    return CreateDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatabaseRequest>): CreateDatabaseRequest {
    const message = createBaseCreateDatabaseRequest();
    message.parent = object.parent ?? "";
    message.database = (object.database !== undefined && object.database !== null)
      ? Database.fromPartial(object.database)
      : undefined;
    message.databaseId = object.databaseId ?? "";
    return message;
  },
};

function createBaseDeleteDatabaseRequest(): DeleteDatabaseRequest {
  return { name: "" };
}

export const DeleteDatabaseRequest: MessageFns<DeleteDatabaseRequest> = {
  encode(message: DeleteDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDatabaseRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDatabaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDatabaseRequest>): DeleteDatabaseRequest {
    return DeleteDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDatabaseRequest>): DeleteDatabaseRequest {
    const message = createBaseDeleteDatabaseRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDatabaseRequest(): UpdateDatabaseRequest {
  return { database: undefined, updateMask: undefined };
}

export const UpdateDatabaseRequest: MessageFns<UpdateDatabaseRequest> = {
  encode(message: UpdateDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== undefined) {
      Database.encode(message.database, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = Database.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDatabaseRequest {
    return {
      database: isSet(object.database) ? Database.fromJSON(object.database) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDatabaseRequest): unknown {
    const obj: any = {};
    if (message.database !== undefined) {
      obj.database = Database.toJSON(message.database);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDatabaseRequest>): UpdateDatabaseRequest {
    return UpdateDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDatabaseRequest>): UpdateDatabaseRequest {
    const message = createBaseUpdateDatabaseRequest();
    message.database = (object.database !== undefined && object.database !== null)
      ? Database.fromPartial(object.database)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetDatabaseRequest(): GetDatabaseRequest {
  return { name: "" };
}

export const GetDatabaseRequest: MessageFns<GetDatabaseRequest> = {
  encode(message: GetDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDatabaseRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDatabaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDatabaseRequest>): GetDatabaseRequest {
    return GetDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDatabaseRequest>): GetDatabaseRequest {
    const message = createBaseGetDatabaseRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDatabasesRequest(): ListDatabasesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDatabasesRequest: MessageFns<ListDatabasesRequest> = {
  encode(message: ListDatabasesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatabasesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatabasesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatabasesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDatabasesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatabasesRequest>): ListDatabasesRequest {
    return ListDatabasesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatabasesRequest>): ListDatabasesRequest {
    const message = createBaseListDatabasesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDatabasesResponse(): ListDatabasesResponse {
  return { databases: [], nextPageToken: "" };
}

export const ListDatabasesResponse: MessageFns<ListDatabasesResponse> = {
  encode(message: ListDatabasesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.databases) {
      Database.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatabasesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatabasesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.databases.push(Database.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatabasesResponse {
    return {
      databases: globalThis.Array.isArray(object?.databases)
        ? object.databases.map((e: any) => Database.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDatabasesResponse): unknown {
    const obj: any = {};
    if (message.databases?.length) {
      obj.databases = message.databases.map((e) => Database.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatabasesResponse>): ListDatabasesResponse {
    return ListDatabasesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatabasesResponse>): ListDatabasesResponse {
    const message = createBaseListDatabasesResponse();
    message.databases = object.databases?.map((e) => Database.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateTableRequest(): CreateTableRequest {
  return { parent: "", table: undefined, tableId: "" };
}

export const CreateTableRequest: MessageFns<CreateTableRequest> = {
  encode(message: CreateTableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.table !== undefined) {
      Table.encode(message.table, writer.uint32(18).fork()).join();
    }
    if (message.tableId !== "") {
      writer.uint32(26).string(message.tableId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.table = Table.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tableId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTableRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      table: isSet(object.table) ? Table.fromJSON(object.table) : undefined,
      tableId: isSet(object.tableId) ? globalThis.String(object.tableId) : "",
    };
  },

  toJSON(message: CreateTableRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.table !== undefined) {
      obj.table = Table.toJSON(message.table);
    }
    if (message.tableId !== "") {
      obj.tableId = message.tableId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTableRequest>): CreateTableRequest {
    return CreateTableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTableRequest>): CreateTableRequest {
    const message = createBaseCreateTableRequest();
    message.parent = object.parent ?? "";
    message.table = (object.table !== undefined && object.table !== null) ? Table.fromPartial(object.table) : undefined;
    message.tableId = object.tableId ?? "";
    return message;
  },
};

function createBaseDeleteTableRequest(): DeleteTableRequest {
  return { name: "" };
}

export const DeleteTableRequest: MessageFns<DeleteTableRequest> = {
  encode(message: DeleteTableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTableRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTableRequest>): DeleteTableRequest {
    return DeleteTableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTableRequest>): DeleteTableRequest {
    const message = createBaseDeleteTableRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateTableRequest(): UpdateTableRequest {
  return { table: undefined, updateMask: undefined };
}

export const UpdateTableRequest: MessageFns<UpdateTableRequest> = {
  encode(message: UpdateTableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.table !== undefined) {
      Table.encode(message.table, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.table = Table.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTableRequest {
    return {
      table: isSet(object.table) ? Table.fromJSON(object.table) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTableRequest): unknown {
    const obj: any = {};
    if (message.table !== undefined) {
      obj.table = Table.toJSON(message.table);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTableRequest>): UpdateTableRequest {
    return UpdateTableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTableRequest>): UpdateTableRequest {
    const message = createBaseUpdateTableRequest();
    message.table = (object.table !== undefined && object.table !== null) ? Table.fromPartial(object.table) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseRenameTableRequest(): RenameTableRequest {
  return { name: "", newName: "" };
}

export const RenameTableRequest: MessageFns<RenameTableRequest> = {
  encode(message: RenameTableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.newName !== "") {
      writer.uint32(18).string(message.newName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameTableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenameTableRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      newName: isSet(object.newName) ? globalThis.String(object.newName) : "",
    };
  },

  toJSON(message: RenameTableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.newName !== "") {
      obj.newName = message.newName;
    }
    return obj;
  },

  create(base?: DeepPartial<RenameTableRequest>): RenameTableRequest {
    return RenameTableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameTableRequest>): RenameTableRequest {
    const message = createBaseRenameTableRequest();
    message.name = object.name ?? "";
    message.newName = object.newName ?? "";
    return message;
  },
};

function createBaseGetTableRequest(): GetTableRequest {
  return { name: "" };
}

export const GetTableRequest: MessageFns<GetTableRequest> = {
  encode(message: GetTableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTableRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTableRequest>): GetTableRequest {
    return GetTableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTableRequest>): GetTableRequest {
    const message = createBaseGetTableRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTablesRequest(): ListTablesRequest {
  return { parent: "", pageSize: 0, pageToken: "", view: 0 };
}

export const ListTablesRequest: MessageFns<ListTablesRequest> = {
  encode(message: ListTablesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTablesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTablesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTablesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? tableViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListTablesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = tableViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTablesRequest>): ListTablesRequest {
    return ListTablesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTablesRequest>): ListTablesRequest {
    const message = createBaseListTablesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListTablesResponse(): ListTablesResponse {
  return { tables: [], nextPageToken: "" };
}

export const ListTablesResponse: MessageFns<ListTablesResponse> = {
  encode(message: ListTablesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tables) {
      Table.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTablesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTablesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tables.push(Table.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTablesResponse {
    return {
      tables: globalThis.Array.isArray(object?.tables) ? object.tables.map((e: any) => Table.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTablesResponse): unknown {
    const obj: any = {};
    if (message.tables?.length) {
      obj.tables = message.tables.map((e) => Table.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTablesResponse>): ListTablesResponse {
    return ListTablesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTablesResponse>): ListTablesResponse {
    const message = createBaseListTablesResponse();
    message.tables = object.tables?.map((e) => Table.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateLockRequest(): CreateLockRequest {
  return { parent: "", lock: undefined };
}

export const CreateLockRequest: MessageFns<CreateLockRequest> = {
  encode(message: CreateLockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.lock !== undefined) {
      Lock.encode(message.lock, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lock = Lock.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLockRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      lock: isSet(object.lock) ? Lock.fromJSON(object.lock) : undefined,
    };
  },

  toJSON(message: CreateLockRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.lock !== undefined) {
      obj.lock = Lock.toJSON(message.lock);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLockRequest>): CreateLockRequest {
    return CreateLockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLockRequest>): CreateLockRequest {
    const message = createBaseCreateLockRequest();
    message.parent = object.parent ?? "";
    message.lock = (object.lock !== undefined && object.lock !== null) ? Lock.fromPartial(object.lock) : undefined;
    return message;
  },
};

function createBaseDeleteLockRequest(): DeleteLockRequest {
  return { name: "" };
}

export const DeleteLockRequest: MessageFns<DeleteLockRequest> = {
  encode(message: DeleteLockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLockRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteLockRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLockRequest>): DeleteLockRequest {
    return DeleteLockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLockRequest>): DeleteLockRequest {
    const message = createBaseDeleteLockRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCheckLockRequest(): CheckLockRequest {
  return { name: "" };
}

export const CheckLockRequest: MessageFns<CheckLockRequest> = {
  encode(message: CheckLockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckLockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckLockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckLockRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CheckLockRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckLockRequest>): CheckLockRequest {
    return CheckLockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckLockRequest>): CheckLockRequest {
    const message = createBaseCheckLockRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListLocksRequest(): ListLocksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListLocksRequest: MessageFns<ListLocksRequest> = {
  encode(message: ListLocksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLocksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLocksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLocksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListLocksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLocksRequest>): ListLocksRequest {
    return ListLocksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLocksRequest>): ListLocksRequest {
    const message = createBaseListLocksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListLocksResponse(): ListLocksResponse {
  return { locks: [], nextPageToken: "" };
}

export const ListLocksResponse: MessageFns<ListLocksResponse> = {
  encode(message: ListLocksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.locks) {
      Lock.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLocksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLocksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locks.push(Lock.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLocksResponse {
    return {
      locks: globalThis.Array.isArray(object?.locks) ? object.locks.map((e: any) => Lock.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLocksResponse): unknown {
    const obj: any = {};
    if (message.locks?.length) {
      obj.locks = message.locks.map((e) => Lock.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLocksResponse>): ListLocksResponse {
    return ListLocksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLocksResponse>): ListLocksResponse {
    const message = createBaseListLocksResponse();
    message.locks = object.locks?.map((e) => Lock.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseHiveDatabaseOptions(): HiveDatabaseOptions {
  return { locationUri: "", parameters: {} };
}

export const HiveDatabaseOptions: MessageFns<HiveDatabaseOptions> = {
  encode(message: HiveDatabaseOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationUri !== "") {
      writer.uint32(10).string(message.locationUri);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      HiveDatabaseOptions_ParametersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HiveDatabaseOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHiveDatabaseOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = HiveDatabaseOptions_ParametersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.parameters[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HiveDatabaseOptions {
    return {
      locationUri: isSet(object.locationUri) ? globalThis.String(object.locationUri) : "",
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: HiveDatabaseOptions): unknown {
    const obj: any = {};
    if (message.locationUri !== "") {
      obj.locationUri = message.locationUri;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<HiveDatabaseOptions>): HiveDatabaseOptions {
    return HiveDatabaseOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HiveDatabaseOptions>): HiveDatabaseOptions {
    const message = createBaseHiveDatabaseOptions();
    message.locationUri = object.locationUri ?? "";
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseHiveDatabaseOptions_ParametersEntry(): HiveDatabaseOptions_ParametersEntry {
  return { key: "", value: "" };
}

export const HiveDatabaseOptions_ParametersEntry: MessageFns<HiveDatabaseOptions_ParametersEntry> = {
  encode(message: HiveDatabaseOptions_ParametersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HiveDatabaseOptions_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHiveDatabaseOptions_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HiveDatabaseOptions_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: HiveDatabaseOptions_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<HiveDatabaseOptions_ParametersEntry>): HiveDatabaseOptions_ParametersEntry {
    return HiveDatabaseOptions_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HiveDatabaseOptions_ParametersEntry>): HiveDatabaseOptions_ParametersEntry {
    const message = createBaseHiveDatabaseOptions_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseHiveTableOptions(): HiveTableOptions {
  return { parameters: {}, tableType: "", storageDescriptor: undefined };
}

export const HiveTableOptions: MessageFns<HiveTableOptions> = {
  encode(message: HiveTableOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.parameters).forEach(([key, value]) => {
      HiveTableOptions_ParametersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.tableType !== "") {
      writer.uint32(18).string(message.tableType);
    }
    if (message.storageDescriptor !== undefined) {
      HiveTableOptions_StorageDescriptor.encode(message.storageDescriptor, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HiveTableOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHiveTableOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = HiveTableOptions_ParametersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.parameters[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tableType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.storageDescriptor = HiveTableOptions_StorageDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HiveTableOptions {
    return {
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      tableType: isSet(object.tableType) ? globalThis.String(object.tableType) : "",
      storageDescriptor: isSet(object.storageDescriptor)
        ? HiveTableOptions_StorageDescriptor.fromJSON(object.storageDescriptor)
        : undefined,
    };
  },

  toJSON(message: HiveTableOptions): unknown {
    const obj: any = {};
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.tableType !== "") {
      obj.tableType = message.tableType;
    }
    if (message.storageDescriptor !== undefined) {
      obj.storageDescriptor = HiveTableOptions_StorageDescriptor.toJSON(message.storageDescriptor);
    }
    return obj;
  },

  create(base?: DeepPartial<HiveTableOptions>): HiveTableOptions {
    return HiveTableOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HiveTableOptions>): HiveTableOptions {
    const message = createBaseHiveTableOptions();
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.tableType = object.tableType ?? "";
    message.storageDescriptor = (object.storageDescriptor !== undefined && object.storageDescriptor !== null)
      ? HiveTableOptions_StorageDescriptor.fromPartial(object.storageDescriptor)
      : undefined;
    return message;
  },
};

function createBaseHiveTableOptions_SerDeInfo(): HiveTableOptions_SerDeInfo {
  return { serializationLib: "" };
}

export const HiveTableOptions_SerDeInfo: MessageFns<HiveTableOptions_SerDeInfo> = {
  encode(message: HiveTableOptions_SerDeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serializationLib !== "") {
      writer.uint32(10).string(message.serializationLib);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HiveTableOptions_SerDeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHiveTableOptions_SerDeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serializationLib = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HiveTableOptions_SerDeInfo {
    return { serializationLib: isSet(object.serializationLib) ? globalThis.String(object.serializationLib) : "" };
  },

  toJSON(message: HiveTableOptions_SerDeInfo): unknown {
    const obj: any = {};
    if (message.serializationLib !== "") {
      obj.serializationLib = message.serializationLib;
    }
    return obj;
  },

  create(base?: DeepPartial<HiveTableOptions_SerDeInfo>): HiveTableOptions_SerDeInfo {
    return HiveTableOptions_SerDeInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HiveTableOptions_SerDeInfo>): HiveTableOptions_SerDeInfo {
    const message = createBaseHiveTableOptions_SerDeInfo();
    message.serializationLib = object.serializationLib ?? "";
    return message;
  },
};

function createBaseHiveTableOptions_StorageDescriptor(): HiveTableOptions_StorageDescriptor {
  return { locationUri: "", inputFormat: "", outputFormat: "", serdeInfo: undefined };
}

export const HiveTableOptions_StorageDescriptor: MessageFns<HiveTableOptions_StorageDescriptor> = {
  encode(message: HiveTableOptions_StorageDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationUri !== "") {
      writer.uint32(10).string(message.locationUri);
    }
    if (message.inputFormat !== "") {
      writer.uint32(18).string(message.inputFormat);
    }
    if (message.outputFormat !== "") {
      writer.uint32(26).string(message.outputFormat);
    }
    if (message.serdeInfo !== undefined) {
      HiveTableOptions_SerDeInfo.encode(message.serdeInfo, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HiveTableOptions_StorageDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHiveTableOptions_StorageDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inputFormat = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputFormat = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serdeInfo = HiveTableOptions_SerDeInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HiveTableOptions_StorageDescriptor {
    return {
      locationUri: isSet(object.locationUri) ? globalThis.String(object.locationUri) : "",
      inputFormat: isSet(object.inputFormat) ? globalThis.String(object.inputFormat) : "",
      outputFormat: isSet(object.outputFormat) ? globalThis.String(object.outputFormat) : "",
      serdeInfo: isSet(object.serdeInfo) ? HiveTableOptions_SerDeInfo.fromJSON(object.serdeInfo) : undefined,
    };
  },

  toJSON(message: HiveTableOptions_StorageDescriptor): unknown {
    const obj: any = {};
    if (message.locationUri !== "") {
      obj.locationUri = message.locationUri;
    }
    if (message.inputFormat !== "") {
      obj.inputFormat = message.inputFormat;
    }
    if (message.outputFormat !== "") {
      obj.outputFormat = message.outputFormat;
    }
    if (message.serdeInfo !== undefined) {
      obj.serdeInfo = HiveTableOptions_SerDeInfo.toJSON(message.serdeInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<HiveTableOptions_StorageDescriptor>): HiveTableOptions_StorageDescriptor {
    return HiveTableOptions_StorageDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HiveTableOptions_StorageDescriptor>): HiveTableOptions_StorageDescriptor {
    const message = createBaseHiveTableOptions_StorageDescriptor();
    message.locationUri = object.locationUri ?? "";
    message.inputFormat = object.inputFormat ?? "";
    message.outputFormat = object.outputFormat ?? "";
    message.serdeInfo = (object.serdeInfo !== undefined && object.serdeInfo !== null)
      ? HiveTableOptions_SerDeInfo.fromPartial(object.serdeInfo)
      : undefined;
    return message;
  },
};

function createBaseHiveTableOptions_ParametersEntry(): HiveTableOptions_ParametersEntry {
  return { key: "", value: "" };
}

export const HiveTableOptions_ParametersEntry: MessageFns<HiveTableOptions_ParametersEntry> = {
  encode(message: HiveTableOptions_ParametersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HiveTableOptions_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHiveTableOptions_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HiveTableOptions_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: HiveTableOptions_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<HiveTableOptions_ParametersEntry>): HiveTableOptions_ParametersEntry {
    return HiveTableOptions_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HiveTableOptions_ParametersEntry>): HiveTableOptions_ParametersEntry {
    const message = createBaseHiveTableOptions_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/**
 * BigLake Metastore is a serverless, highly available, multi-tenant runtime
 * metastore for Google Cloud Data Analytics products.
 *
 * The BigLake Metastore API defines the following resource model:
 *
 * * A collection of Google Cloud projects: `/projects/*`
 * * Each project has a collection of available locations: `/locations/*`
 * * Each location has a collection of catalogs: `/catalogs/*`
 * * Each catalog has a collection of databases: `/databases/*`
 * * Each database has a collection of tables: `/tables/*`
 */
export type MetastoreServiceDefinition = typeof MetastoreServiceDefinition;
export const MetastoreServiceDefinition = {
  name: "MetastoreService",
  fullName: "google.cloud.bigquery.biglake.v1alpha1.MetastoreService",
  methods: {
    /** Creates a new catalog. */
    createCatalog: {
      name: "CreateCatalog",
      requestType: CreateCatalogRequest,
      requestStream: false,
      responseType: Catalog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              44,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              7,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              34,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing catalog specified by the catalog ID. */
    deleteCatalog: {
      name: "DeleteCatalog",
      requestType: DeleteCatalogRequest,
      requestStream: false,
      responseType: Catalog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the catalog specified by the resource name. */
    getCatalog: {
      name: "GetCatalog",
      requestType: GetCatalogRequest,
      requestStream: false,
      responseType: Catalog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List all catalogs in a specified project. */
    listCatalogs: {
      name: "ListCatalogs",
      requestType: ListCatalogsRequest,
      requestStream: false,
      responseType: ListCatalogsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new database. */
    createDatabase: {
      name: "CreateDatabase",
      requestType: CreateDatabaseRequest,
      requestStream: false,
      responseType: Database,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              8,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              62,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing database specified by the database ID. */
    deleteDatabase: {
      name: "DeleteDatabase",
      requestType: DeleteDatabaseRequest,
      requestStream: false,
      responseType: Database,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              42,
              62,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an existing database specified by the database ID. */
    updateDatabase: {
      name: "UpdateDatabase",
      requestType: UpdateDatabaseRequest,
      requestStream: false,
      responseType: Database,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              8,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              50,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the database specified by the resource name. */
    getDatabase: {
      name: "GetDatabase",
      requestType: GetDatabaseRequest,
      requestStream: false,
      responseType: Database,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List all databases in a specified catalog. */
    listDatabases: {
      name: "ListDatabases",
      requestType: ListDatabasesRequest,
      requestStream: false,
      responseType: ListDatabasesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new table. */
    createTable: {
      name: "CreateTable",
      requestType: CreateTableRequest,
      requestStream: false,
      responseType: Table,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              97,
              98,
              108,
              101,
              44,
              116,
              97,
              98,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              5,
              116,
              97,
              98,
              108,
              101,
              34,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing table specified by the table ID. */
    deleteTable: {
      name: "DeleteTable",
      requestType: DeleteTableRequest,
      requestStream: false,
      responseType: Table,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an existing table specified by the table ID. */
    updateTable: {
      name: "UpdateTable",
      requestType: UpdateTableRequest,
      requestStream: false,
      responseType: Table,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 116, 97, 98, 108, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              86,
              58,
              5,
              116,
              97,
              98,
              108,
              101,
              50,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              116,
              97,
              98,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Renames an existing table specified by the table ID. */
    renameTable: {
      name: "RenameTable",
      requestType: RenameTableRequest,
      requestStream: false,
      responseType: Table,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 110, 97, 109, 101, 44, 110, 101, 119, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              83,
              58,
              1,
              42,
              34,
              78,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              110,
              97,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets the table specified by the resource name. */
    getTable: {
      name: "GetTable",
      requestType: GetTableRequest,
      requestStream: false,
      responseType: Table,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List all tables in a specified database. */
    listTables: {
      name: "ListTables",
      requestType: ListTablesRequest,
      requestStream: false,
      responseType: ListTablesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new lock. */
    createLock: {
      name: "CreateLock",
      requestType: CreateLockRequest,
      requestStream: false,
      responseType: Lock,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 112, 97, 114, 101, 110, 116, 44, 108, 111, 99, 107])],
          578365826: [
            Buffer.from([
              78,
              58,
              4,
              108,
              111,
              99,
              107,
              34,
              70,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              108,
              111,
              99,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing lock specified by the lock ID. */
    deleteLock: {
      name: "DeleteLock",
      requestType: DeleteLockRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              42,
              70,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Checks the state of a lock specified by the lock ID. */
    checkLock: {
      name: "CheckLock",
      requestType: CheckLockRequest,
      requestStream: false,
      responseType: Lock,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              107,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** List all locks in a specified database. */
    listLocks: {
      name: "ListLocks",
      requestType: ListLocksRequest,
      requestStream: false,
      responseType: ListLocksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              108,
              111,
              99,
              107,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface MetastoreServiceImplementation<CallContextExt = {}> {
  /** Creates a new catalog. */
  createCatalog(request: CreateCatalogRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Catalog>>;
  /** Deletes an existing catalog specified by the catalog ID. */
  deleteCatalog(request: DeleteCatalogRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Catalog>>;
  /** Gets the catalog specified by the resource name. */
  getCatalog(request: GetCatalogRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Catalog>>;
  /** List all catalogs in a specified project. */
  listCatalogs(
    request: ListCatalogsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCatalogsResponse>>;
  /** Creates a new database. */
  createDatabase(request: CreateDatabaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Database>>;
  /** Deletes an existing database specified by the database ID. */
  deleteDatabase(request: DeleteDatabaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Database>>;
  /** Updates an existing database specified by the database ID. */
  updateDatabase(request: UpdateDatabaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Database>>;
  /** Gets the database specified by the resource name. */
  getDatabase(request: GetDatabaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Database>>;
  /** List all databases in a specified catalog. */
  listDatabases(
    request: ListDatabasesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDatabasesResponse>>;
  /** Creates a new table. */
  createTable(request: CreateTableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Table>>;
  /** Deletes an existing table specified by the table ID. */
  deleteTable(request: DeleteTableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Table>>;
  /** Updates an existing table specified by the table ID. */
  updateTable(request: UpdateTableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Table>>;
  /** Renames an existing table specified by the table ID. */
  renameTable(request: RenameTableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Table>>;
  /** Gets the table specified by the resource name. */
  getTable(request: GetTableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Table>>;
  /** List all tables in a specified database. */
  listTables(
    request: ListTablesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTablesResponse>>;
  /** Creates a new lock. */
  createLock(request: CreateLockRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Lock>>;
  /** Deletes an existing lock specified by the lock ID. */
  deleteLock(request: DeleteLockRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Checks the state of a lock specified by the lock ID. */
  checkLock(request: CheckLockRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Lock>>;
  /** List all locks in a specified database. */
  listLocks(request: ListLocksRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListLocksResponse>>;
}

export interface MetastoreServiceClient<CallOptionsExt = {}> {
  /** Creates a new catalog. */
  createCatalog(request: DeepPartial<CreateCatalogRequest>, options?: CallOptions & CallOptionsExt): Promise<Catalog>;
  /** Deletes an existing catalog specified by the catalog ID. */
  deleteCatalog(request: DeepPartial<DeleteCatalogRequest>, options?: CallOptions & CallOptionsExt): Promise<Catalog>;
  /** Gets the catalog specified by the resource name. */
  getCatalog(request: DeepPartial<GetCatalogRequest>, options?: CallOptions & CallOptionsExt): Promise<Catalog>;
  /** List all catalogs in a specified project. */
  listCatalogs(
    request: DeepPartial<ListCatalogsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCatalogsResponse>;
  /** Creates a new database. */
  createDatabase(
    request: DeepPartial<CreateDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Database>;
  /** Deletes an existing database specified by the database ID. */
  deleteDatabase(
    request: DeepPartial<DeleteDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Database>;
  /** Updates an existing database specified by the database ID. */
  updateDatabase(
    request: DeepPartial<UpdateDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Database>;
  /** Gets the database specified by the resource name. */
  getDatabase(request: DeepPartial<GetDatabaseRequest>, options?: CallOptions & CallOptionsExt): Promise<Database>;
  /** List all databases in a specified catalog. */
  listDatabases(
    request: DeepPartial<ListDatabasesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDatabasesResponse>;
  /** Creates a new table. */
  createTable(request: DeepPartial<CreateTableRequest>, options?: CallOptions & CallOptionsExt): Promise<Table>;
  /** Deletes an existing table specified by the table ID. */
  deleteTable(request: DeepPartial<DeleteTableRequest>, options?: CallOptions & CallOptionsExt): Promise<Table>;
  /** Updates an existing table specified by the table ID. */
  updateTable(request: DeepPartial<UpdateTableRequest>, options?: CallOptions & CallOptionsExt): Promise<Table>;
  /** Renames an existing table specified by the table ID. */
  renameTable(request: DeepPartial<RenameTableRequest>, options?: CallOptions & CallOptionsExt): Promise<Table>;
  /** Gets the table specified by the resource name. */
  getTable(request: DeepPartial<GetTableRequest>, options?: CallOptions & CallOptionsExt): Promise<Table>;
  /** List all tables in a specified database. */
  listTables(
    request: DeepPartial<ListTablesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTablesResponse>;
  /** Creates a new lock. */
  createLock(request: DeepPartial<CreateLockRequest>, options?: CallOptions & CallOptionsExt): Promise<Lock>;
  /** Deletes an existing lock specified by the lock ID. */
  deleteLock(request: DeepPartial<DeleteLockRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Checks the state of a lock specified by the lock ID. */
  checkLock(request: DeepPartial<CheckLockRequest>, options?: CallOptions & CallOptionsExt): Promise<Lock>;
  /** List all locks in a specified database. */
  listLocks(request: DeepPartial<ListLocksRequest>, options?: CallOptions & CallOptionsExt): Promise<ListLocksResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
