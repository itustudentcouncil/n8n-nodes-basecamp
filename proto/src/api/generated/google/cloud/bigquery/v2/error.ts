// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/** Error details. */
export interface ErrorProto {
  /** A short error code that summarizes the error. */
  reason: string;
  /** Specifies where the error occurred, if present. */
  location: string;
  /**
   * Debugging information. This property is internal to Google and should not
   * be used.
   */
  debugInfo: string;
  /** A human-readable description of the error. */
  message: string;
}

function createBaseErrorProto(): ErrorProto {
  return { reason: "", location: "", debugInfo: "", message: "" };
}

export const ErrorProto: MessageFns<ErrorProto> = {
  encode(message: ErrorProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    if (message.location !== "") {
      writer.uint32(18).string(message.location);
    }
    if (message.debugInfo !== "") {
      writer.uint32(26).string(message.debugInfo);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.debugInfo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorProto {
    return {
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      debugInfo: isSet(object.debugInfo) ? globalThis.String(object.debugInfo) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ErrorProto): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.debugInfo !== "") {
      obj.debugInfo = message.debugInfo;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorProto>): ErrorProto {
    return ErrorProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorProto>): ErrorProto {
    const message = createBaseErrorProto();
    message.reason = object.reason ?? "";
    message.location = object.location ?? "";
    message.debugInfo = object.debugInfo ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
