// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/data_format_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/** Options for data format adjustments. */
export interface DataFormatOptions {
  /** Optional. Output timestamp as usec int64. Default is false. */
  useInt64Timestamp: boolean;
}

function createBaseDataFormatOptions(): DataFormatOptions {
  return { useInt64Timestamp: false };
}

export const DataFormatOptions: MessageFns<DataFormatOptions> = {
  encode(message: DataFormatOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useInt64Timestamp !== false) {
      writer.uint32(8).bool(message.useInt64Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataFormatOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataFormatOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.useInt64Timestamp = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataFormatOptions {
    return {
      useInt64Timestamp: isSet(object.useInt64Timestamp) ? globalThis.Boolean(object.useInt64Timestamp) : false,
    };
  },

  toJSON(message: DataFormatOptions): unknown {
    const obj: any = {};
    if (message.useInt64Timestamp !== false) {
      obj.useInt64Timestamp = message.useInt64Timestamp;
    }
    return obj;
  },

  create(base?: DeepPartial<DataFormatOptions>): DataFormatOptions {
    return DataFormatOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataFormatOptions>): DataFormatOptions {
    const message = createBaseDataFormatOptions();
    message.useInt64Timestamp = object.useInt64Timestamp ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
