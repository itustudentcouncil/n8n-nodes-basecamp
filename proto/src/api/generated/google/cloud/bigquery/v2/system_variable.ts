// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/system_variable.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { StandardSqlDataType } from "./standard_sql.js";

export const protobufPackage = "google.cloud.bigquery.v2";

/** System variables given to a query. */
export interface SystemVariables {
  /** Output only. Data type for each system variable. */
  types: { [key: string]: StandardSqlDataType };
  /** Output only. Value for each system variable. */
  values: { [key: string]: any } | undefined;
}

export interface SystemVariables_TypesEntry {
  key: string;
  value: StandardSqlDataType | undefined;
}

function createBaseSystemVariables(): SystemVariables {
  return { types: {}, values: undefined };
}

export const SystemVariables: MessageFns<SystemVariables> = {
  encode(message: SystemVariables, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.types).forEach(([key, value]) => {
      SystemVariables_TypesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.values !== undefined) {
      Struct.encode(Struct.wrap(message.values), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemVariables {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemVariables();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = SystemVariables_TypesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.types[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.values = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemVariables {
    return {
      types: isObject(object.types)
        ? Object.entries(object.types).reduce<{ [key: string]: StandardSqlDataType }>((acc, [key, value]) => {
          acc[key] = StandardSqlDataType.fromJSON(value);
          return acc;
        }, {})
        : {},
      values: isObject(object.values) ? object.values : undefined,
    };
  },

  toJSON(message: SystemVariables): unknown {
    const obj: any = {};
    if (message.types) {
      const entries = Object.entries(message.types);
      if (entries.length > 0) {
        obj.types = {};
        entries.forEach(([k, v]) => {
          obj.types[k] = StandardSqlDataType.toJSON(v);
        });
      }
    }
    if (message.values !== undefined) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<SystemVariables>): SystemVariables {
    return SystemVariables.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemVariables>): SystemVariables {
    const message = createBaseSystemVariables();
    message.types = Object.entries(object.types ?? {}).reduce<{ [key: string]: StandardSqlDataType }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = StandardSqlDataType.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.values = object.values ?? undefined;
    return message;
  },
};

function createBaseSystemVariables_TypesEntry(): SystemVariables_TypesEntry {
  return { key: "", value: undefined };
}

export const SystemVariables_TypesEntry: MessageFns<SystemVariables_TypesEntry> = {
  encode(message: SystemVariables_TypesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      StandardSqlDataType.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemVariables_TypesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemVariables_TypesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = StandardSqlDataType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemVariables_TypesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? StandardSqlDataType.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SystemVariables_TypesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = StandardSqlDataType.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<SystemVariables_TypesEntry>): SystemVariables_TypesEntry {
    return SystemVariables_TypesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemVariables_TypesEntry>): SystemVariables_TypesEntry {
    const message = createBaseSystemVariables_TypesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? StandardSqlDataType.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
