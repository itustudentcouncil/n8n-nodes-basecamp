// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/row_access_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { RowAccessPolicyReference } from "./row_access_policy_reference.js";

export const protobufPackage = "google.cloud.bigquery.v2";

/** Request message for the ListRowAccessPolicies method. */
export interface ListRowAccessPoliciesRequest {
  /** Required. Project ID of the row access policies to list. */
  projectId: string;
  /** Required. Dataset ID of row access policies to list. */
  datasetId: string;
  /** Required. Table ID of the table to list row access policies. */
  tableId: string;
  /**
   * Page token, returned by a previous call, to request the next page of
   * results.
   */
  pageToken: string;
  /**
   * The maximum number of results to return in a single response page. Leverage
   * the page tokens to iterate through the entire collection.
   */
  pageSize: number;
}

/** Response message for the ListRowAccessPolicies method. */
export interface ListRowAccessPoliciesResponse {
  /** Row access policies on the requested table. */
  rowAccessPolicies: RowAccessPolicy[];
  /** A token to request the next page of results. */
  nextPageToken: string;
}

/**
 * Represents access on a subset of rows on the specified table, defined by its
 * filter predicate. Access to the subset of rows is controlled by its IAM
 * policy.
 */
export interface RowAccessPolicy {
  /** Output only. A hash of this resource. */
  etag: string;
  /** Required. Reference describing the ID of this row access policy. */
  rowAccessPolicyReference:
    | RowAccessPolicyReference
    | undefined;
  /**
   * Required. A SQL boolean expression that represents the rows defined by this
   * row access policy, similar to the boolean expression in a WHERE clause of a
   * SELECT query on a table.
   * References to other tables, routines, and temporary functions are not
   * supported.
   *
   * Examples: region="EU"
   *           date_field = CAST('2019-9-27' as DATE)
   *           nullable_field is not NULL
   *           numeric_field BETWEEN 1.0 AND 5.0
   */
  filterPredicate: string;
  /**
   * Output only. The time when this row access policy was created, in
   * milliseconds since the epoch.
   */
  creationTime:
    | Date
    | undefined;
  /**
   * Output only. The time when this row access policy was last modified, in
   * milliseconds since the epoch.
   */
  lastModifiedTime: Date | undefined;
}

function createBaseListRowAccessPoliciesRequest(): ListRowAccessPoliciesRequest {
  return { projectId: "", datasetId: "", tableId: "", pageToken: "", pageSize: 0 };
}

export const ListRowAccessPoliciesRequest: MessageFns<ListRowAccessPoliciesRequest> = {
  encode(message: ListRowAccessPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.tableId !== "") {
      writer.uint32(26).string(message.tableId);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRowAccessPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRowAccessPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tableId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRowAccessPoliciesRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      tableId: isSet(object.tableId) ? globalThis.String(object.tableId) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListRowAccessPoliciesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.tableId !== "") {
      obj.tableId = message.tableId;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListRowAccessPoliciesRequest>): ListRowAccessPoliciesRequest {
    return ListRowAccessPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRowAccessPoliciesRequest>): ListRowAccessPoliciesRequest {
    const message = createBaseListRowAccessPoliciesRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.tableId = object.tableId ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListRowAccessPoliciesResponse(): ListRowAccessPoliciesResponse {
  return { rowAccessPolicies: [], nextPageToken: "" };
}

export const ListRowAccessPoliciesResponse: MessageFns<ListRowAccessPoliciesResponse> = {
  encode(message: ListRowAccessPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rowAccessPolicies) {
      RowAccessPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRowAccessPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRowAccessPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rowAccessPolicies.push(RowAccessPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRowAccessPoliciesResponse {
    return {
      rowAccessPolicies: globalThis.Array.isArray(object?.rowAccessPolicies)
        ? object.rowAccessPolicies.map((e: any) => RowAccessPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRowAccessPoliciesResponse): unknown {
    const obj: any = {};
    if (message.rowAccessPolicies?.length) {
      obj.rowAccessPolicies = message.rowAccessPolicies.map((e) => RowAccessPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRowAccessPoliciesResponse>): ListRowAccessPoliciesResponse {
    return ListRowAccessPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRowAccessPoliciesResponse>): ListRowAccessPoliciesResponse {
    const message = createBaseListRowAccessPoliciesResponse();
    message.rowAccessPolicies = object.rowAccessPolicies?.map((e) => RowAccessPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseRowAccessPolicy(): RowAccessPolicy {
  return {
    etag: "",
    rowAccessPolicyReference: undefined,
    filterPredicate: "",
    creationTime: undefined,
    lastModifiedTime: undefined,
  };
}

export const RowAccessPolicy: MessageFns<RowAccessPolicy> = {
  encode(message: RowAccessPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.etag !== "") {
      writer.uint32(10).string(message.etag);
    }
    if (message.rowAccessPolicyReference !== undefined) {
      RowAccessPolicyReference.encode(message.rowAccessPolicyReference, writer.uint32(18).fork()).join();
    }
    if (message.filterPredicate !== "") {
      writer.uint32(26).string(message.filterPredicate);
    }
    if (message.creationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(34).fork()).join();
    }
    if (message.lastModifiedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastModifiedTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RowAccessPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRowAccessPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rowAccessPolicyReference = RowAccessPolicyReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filterPredicate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastModifiedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RowAccessPolicy {
    return {
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      rowAccessPolicyReference: isSet(object.rowAccessPolicyReference)
        ? RowAccessPolicyReference.fromJSON(object.rowAccessPolicyReference)
        : undefined,
      filterPredicate: isSet(object.filterPredicate) ? globalThis.String(object.filterPredicate) : "",
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      lastModifiedTime: isSet(object.lastModifiedTime) ? fromJsonTimestamp(object.lastModifiedTime) : undefined,
    };
  },

  toJSON(message: RowAccessPolicy): unknown {
    const obj: any = {};
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.rowAccessPolicyReference !== undefined) {
      obj.rowAccessPolicyReference = RowAccessPolicyReference.toJSON(message.rowAccessPolicyReference);
    }
    if (message.filterPredicate !== "") {
      obj.filterPredicate = message.filterPredicate;
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.lastModifiedTime !== undefined) {
      obj.lastModifiedTime = message.lastModifiedTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RowAccessPolicy>): RowAccessPolicy {
    return RowAccessPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RowAccessPolicy>): RowAccessPolicy {
    const message = createBaseRowAccessPolicy();
    message.etag = object.etag ?? "";
    message.rowAccessPolicyReference =
      (object.rowAccessPolicyReference !== undefined && object.rowAccessPolicyReference !== null)
        ? RowAccessPolicyReference.fromPartial(object.rowAccessPolicyReference)
        : undefined;
    message.filterPredicate = object.filterPredicate ?? "";
    message.creationTime = object.creationTime ?? undefined;
    message.lastModifiedTime = object.lastModifiedTime ?? undefined;
    return message;
  },
};

/** Service for interacting with row access policies. */
export type RowAccessPolicyServiceDefinition = typeof RowAccessPolicyServiceDefinition;
export const RowAccessPolicyServiceDefinition = {
  name: "RowAccessPolicyService",
  fullName: "google.cloud.bigquery.v2.RowAccessPolicyService",
  methods: {
    /** Lists all row access policies on the specified table. */
    listRowAccessPolicies: {
      name: "ListRowAccessPolicies",
      requestType: ListRowAccessPoliciesRequest,
      requestStream: false,
      responseType: ListRowAccessPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              100,
              18,
              98,
              47,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              47,
              118,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              116,
              97,
              98,
              108,
              101,
              115,
              47,
              123,
              116,
              97,
              98,
              108,
              101,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              114,
              111,
              119,
              65,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RowAccessPolicyServiceImplementation<CallContextExt = {}> {
  /** Lists all row access policies on the specified table. */
  listRowAccessPolicies(
    request: ListRowAccessPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRowAccessPoliciesResponse>>;
}

export interface RowAccessPolicyServiceClient<CallOptionsExt = {}> {
  /** Lists all row access policies on the specified table. */
  listRowAccessPolicies(
    request: DeepPartial<ListRowAccessPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRowAccessPoliciesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
