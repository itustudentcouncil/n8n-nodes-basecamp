// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/query_parameter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { StringValue } from "../../../protobuf/wrappers.js";

export const protobufPackage = "google.cloud.bigquery.v2";

/** The type of a struct parameter. */
export interface QueryParameterStructType {
  /** Optional. The name of this field. */
  name: string;
  /** Required. The type of this field. */
  type:
    | QueryParameterType
    | undefined;
  /** Optional. Human-oriented description of the field. */
  description: string;
}

/** The type of a query parameter. */
export interface QueryParameterType {
  /** Required. The top level type of this field. */
  type: string;
  /** Optional. The type of the array's elements, if this is an array. */
  arrayType:
    | QueryParameterType
    | undefined;
  /**
   * Optional. The types of the fields of this struct, in order, if this is a
   * struct.
   */
  structTypes: QueryParameterStructType[];
  /** Optional. The element type of the range, if this is a range. */
  rangeElementType: QueryParameterType | undefined;
}

/** Represents the value of a range. */
export interface RangeValue {
  /**
   * Optional. The start value of the range. A missing value represents an
   * unbounded start.
   */
  start:
    | QueryParameterValue
    | undefined;
  /**
   * Optional. The end value of the range. A missing value represents an
   * unbounded end.
   */
  end: QueryParameterValue | undefined;
}

/** The value of a query parameter. */
export interface QueryParameterValue {
  /** Optional. The value of this value, if a simple scalar type. */
  value:
    | string
    | undefined;
  /** Optional. The array values, if this is an array type. */
  arrayValues: QueryParameterValue[];
  /** The struct field values. */
  structValues: { [key: string]: QueryParameterValue };
  /** Optional. The range value, if this is a range type. */
  rangeValue:
    | RangeValue
    | undefined;
  /** This field should not be used. */
  altStructValues: any[];
}

export interface QueryParameterValue_StructValuesEntry {
  key: string;
  value: QueryParameterValue | undefined;
}

/** A parameter given to a query. */
export interface QueryParameter {
  /**
   * Optional. If unset, this is a positional parameter. Otherwise, should be
   * unique within a query.
   */
  name: string;
  /** Required. The type of this parameter. */
  parameterType:
    | QueryParameterType
    | undefined;
  /** Required. The value of this parameter. */
  parameterValue: QueryParameterValue | undefined;
}

function createBaseQueryParameterStructType(): QueryParameterStructType {
  return { name: "", type: undefined, description: "" };
}

export const QueryParameterStructType: MessageFns<QueryParameterStructType> = {
  encode(message: QueryParameterStructType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== undefined) {
      QueryParameterType.encode(message.type, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameterStructType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameterStructType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = QueryParameterType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameterStructType {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? QueryParameterType.fromJSON(object.type) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: QueryParameterStructType): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== undefined) {
      obj.type = QueryParameterType.toJSON(message.type);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParameterStructType>): QueryParameterStructType {
    return QueryParameterStructType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParameterStructType>): QueryParameterStructType {
    const message = createBaseQueryParameterStructType();
    message.name = object.name ?? "";
    message.type = (object.type !== undefined && object.type !== null)
      ? QueryParameterType.fromPartial(object.type)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseQueryParameterType(): QueryParameterType {
  return { type: "", arrayType: undefined, structTypes: [], rangeElementType: undefined };
}

export const QueryParameterType: MessageFns<QueryParameterType> = {
  encode(message: QueryParameterType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.arrayType !== undefined) {
      QueryParameterType.encode(message.arrayType, writer.uint32(18).fork()).join();
    }
    for (const v of message.structTypes) {
      QueryParameterStructType.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.rangeElementType !== undefined) {
      QueryParameterType.encode(message.rangeElementType, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameterType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameterType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.arrayType = QueryParameterType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.structTypes.push(QueryParameterStructType.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.rangeElementType = QueryParameterType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameterType {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      arrayType: isSet(object.arrayType) ? QueryParameterType.fromJSON(object.arrayType) : undefined,
      structTypes: globalThis.Array.isArray(object?.structTypes)
        ? object.structTypes.map((e: any) => QueryParameterStructType.fromJSON(e))
        : [],
      rangeElementType: isSet(object.rangeElementType)
        ? QueryParameterType.fromJSON(object.rangeElementType)
        : undefined,
    };
  },

  toJSON(message: QueryParameterType): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.arrayType !== undefined) {
      obj.arrayType = QueryParameterType.toJSON(message.arrayType);
    }
    if (message.structTypes?.length) {
      obj.structTypes = message.structTypes.map((e) => QueryParameterStructType.toJSON(e));
    }
    if (message.rangeElementType !== undefined) {
      obj.rangeElementType = QueryParameterType.toJSON(message.rangeElementType);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParameterType>): QueryParameterType {
    return QueryParameterType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParameterType>): QueryParameterType {
    const message = createBaseQueryParameterType();
    message.type = object.type ?? "";
    message.arrayType = (object.arrayType !== undefined && object.arrayType !== null)
      ? QueryParameterType.fromPartial(object.arrayType)
      : undefined;
    message.structTypes = object.structTypes?.map((e) => QueryParameterStructType.fromPartial(e)) || [];
    message.rangeElementType = (object.rangeElementType !== undefined && object.rangeElementType !== null)
      ? QueryParameterType.fromPartial(object.rangeElementType)
      : undefined;
    return message;
  },
};

function createBaseRangeValue(): RangeValue {
  return { start: undefined, end: undefined };
}

export const RangeValue: MessageFns<RangeValue> = {
  encode(message: RangeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      QueryParameterValue.encode(message.start, writer.uint32(10).fork()).join();
    }
    if (message.end !== undefined) {
      QueryParameterValue.encode(message.end, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RangeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRangeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = QueryParameterValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = QueryParameterValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RangeValue {
    return {
      start: isSet(object.start) ? QueryParameterValue.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? QueryParameterValue.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: RangeValue): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = QueryParameterValue.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = QueryParameterValue.toJSON(message.end);
    }
    return obj;
  },

  create(base?: DeepPartial<RangeValue>): RangeValue {
    return RangeValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RangeValue>): RangeValue {
    const message = createBaseRangeValue();
    message.start = (object.start !== undefined && object.start !== null)
      ? QueryParameterValue.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? QueryParameterValue.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseQueryParameterValue(): QueryParameterValue {
  return { value: undefined, arrayValues: [], structValues: {}, rangeValue: undefined, altStructValues: [] };
}

export const QueryParameterValue: MessageFns<QueryParameterValue> = {
  encode(message: QueryParameterValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      StringValue.encode({ value: message.value! }, writer.uint32(10).fork()).join();
    }
    for (const v of message.arrayValues) {
      QueryParameterValue.encode(v!, writer.uint32(18).fork()).join();
    }
    Object.entries(message.structValues).forEach(([key, value]) => {
      QueryParameterValue_StructValuesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.rangeValue !== undefined) {
      RangeValue.encode(message.rangeValue, writer.uint32(50).fork()).join();
    }
    for (const v of message.altStructValues) {
      Value.encode(Value.wrap(v!), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameterValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameterValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.arrayValues.push(QueryParameterValue.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = QueryParameterValue_StructValuesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.structValues[entry3.key] = entry3.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.rangeValue = RangeValue.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.altStructValues.push(Value.unwrap(Value.decode(reader, reader.uint32())));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameterValue {
    return {
      value: isSet(object.value) ? String(object.value) : undefined,
      arrayValues: globalThis.Array.isArray(object?.arrayValues)
        ? object.arrayValues.map((e: any) => QueryParameterValue.fromJSON(e))
        : [],
      structValues: isObject(object.structValues)
        ? Object.entries(object.structValues).reduce<{ [key: string]: QueryParameterValue }>((acc, [key, value]) => {
          acc[key] = QueryParameterValue.fromJSON(value);
          return acc;
        }, {})
        : {},
      rangeValue: isSet(object.rangeValue) ? RangeValue.fromJSON(object.rangeValue) : undefined,
      altStructValues: globalThis.Array.isArray(object?.altStructValues) ? [...object.altStructValues] : [],
    };
  },

  toJSON(message: QueryParameterValue): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.arrayValues?.length) {
      obj.arrayValues = message.arrayValues.map((e) => QueryParameterValue.toJSON(e));
    }
    if (message.structValues) {
      const entries = Object.entries(message.structValues);
      if (entries.length > 0) {
        obj.structValues = {};
        entries.forEach(([k, v]) => {
          obj.structValues[k] = QueryParameterValue.toJSON(v);
        });
      }
    }
    if (message.rangeValue !== undefined) {
      obj.rangeValue = RangeValue.toJSON(message.rangeValue);
    }
    if (message.altStructValues?.length) {
      obj.altStructValues = message.altStructValues;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParameterValue>): QueryParameterValue {
    return QueryParameterValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParameterValue>): QueryParameterValue {
    const message = createBaseQueryParameterValue();
    message.value = object.value ?? undefined;
    message.arrayValues = object.arrayValues?.map((e) => QueryParameterValue.fromPartial(e)) || [];
    message.structValues = Object.entries(object.structValues ?? {}).reduce<{ [key: string]: QueryParameterValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = QueryParameterValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.rangeValue = (object.rangeValue !== undefined && object.rangeValue !== null)
      ? RangeValue.fromPartial(object.rangeValue)
      : undefined;
    message.altStructValues = object.altStructValues?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryParameterValue_StructValuesEntry(): QueryParameterValue_StructValuesEntry {
  return { key: "", value: undefined };
}

export const QueryParameterValue_StructValuesEntry: MessageFns<QueryParameterValue_StructValuesEntry> = {
  encode(message: QueryParameterValue_StructValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      QueryParameterValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameterValue_StructValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameterValue_StructValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = QueryParameterValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameterValue_StructValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? QueryParameterValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: QueryParameterValue_StructValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = QueryParameterValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParameterValue_StructValuesEntry>): QueryParameterValue_StructValuesEntry {
    return QueryParameterValue_StructValuesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParameterValue_StructValuesEntry>): QueryParameterValue_StructValuesEntry {
    const message = createBaseQueryParameterValue_StructValuesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? QueryParameterValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseQueryParameter(): QueryParameter {
  return { name: "", parameterType: undefined, parameterValue: undefined };
}

export const QueryParameter: MessageFns<QueryParameter> = {
  encode(message: QueryParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parameterType !== undefined) {
      QueryParameterType.encode(message.parameterType, writer.uint32(18).fork()).join();
    }
    if (message.parameterValue !== undefined) {
      QueryParameterValue.encode(message.parameterValue, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parameterType = QueryParameterType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameterValue = QueryParameterValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParameter {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parameterType: isSet(object.parameterType) ? QueryParameterType.fromJSON(object.parameterType) : undefined,
      parameterValue: isSet(object.parameterValue) ? QueryParameterValue.fromJSON(object.parameterValue) : undefined,
    };
  },

  toJSON(message: QueryParameter): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parameterType !== undefined) {
      obj.parameterType = QueryParameterType.toJSON(message.parameterType);
    }
    if (message.parameterValue !== undefined) {
      obj.parameterValue = QueryParameterValue.toJSON(message.parameterValue);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParameter>): QueryParameter {
    return QueryParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParameter>): QueryParameter {
    const message = createBaseQueryParameter();
    message.name = object.name ?? "";
    message.parameterType = (object.parameterType !== undefined && object.parameterType !== null)
      ? QueryParameterType.fromPartial(object.parameterType)
      : undefined;
    message.parameterValue = (object.parameterValue !== undefined && object.parameterValue !== null)
      ? QueryParameterValue.fromPartial(object.parameterValue)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
