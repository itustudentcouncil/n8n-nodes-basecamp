// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/time_partitioning.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Int64Value, StringValue } from "../../../protobuf/wrappers.js";

export const protobufPackage = "google.cloud.bigquery.v2";

export interface TimePartitioning {
  /**
   * Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will
   * generate one partition per day, hour, month, and year, respectively.
   */
  type: string;
  /**
   * Optional. Number of milliseconds for which to keep the storage for a
   * partition.
   * A wrapper is used here because 0 is an invalid value.
   */
  expirationMs:
    | Long
    | undefined;
  /**
   * Optional. If not set, the table is partitioned by pseudo
   * column '_PARTITIONTIME'; if set, the table is partitioned by this field.
   * The field must be a top-level TIMESTAMP or DATE field. Its mode must be
   * NULLABLE or REQUIRED.
   * A wrapper is used here because an empty string is an invalid value.
   */
  field: string | undefined;
}

function createBaseTimePartitioning(): TimePartitioning {
  return { type: "", expirationMs: undefined, field: undefined };
}

export const TimePartitioning: MessageFns<TimePartitioning> = {
  encode(message: TimePartitioning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.expirationMs !== undefined) {
      Int64Value.encode({ value: message.expirationMs! }, writer.uint32(18).fork()).join();
    }
    if (message.field !== undefined) {
      StringValue.encode({ value: message.field! }, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimePartitioning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimePartitioning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationMs = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.field = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimePartitioning {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      expirationMs: isSet(object.expirationMs) ? Long.fromValue(object.expirationMs) : undefined,
      field: isSet(object.field) ? String(object.field) : undefined,
    };
  },

  toJSON(message: TimePartitioning): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.expirationMs !== undefined) {
      obj.expirationMs = message.expirationMs;
    }
    if (message.field !== undefined) {
      obj.field = message.field;
    }
    return obj;
  },

  create(base?: DeepPartial<TimePartitioning>): TimePartitioning {
    return TimePartitioning.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimePartitioning>): TimePartitioning {
    const message = createBaseTimePartitioning();
    message.type = object.type ?? "";
    message.expirationMs = (object.expirationMs !== undefined && object.expirationMs !== null)
      ? Long.fromValue(object.expirationMs)
      : undefined;
    message.field = object.field ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
