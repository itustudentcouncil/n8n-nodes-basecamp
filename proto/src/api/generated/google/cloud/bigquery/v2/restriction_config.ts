// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/restriction_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

export interface RestrictionConfig {
  /** Output only. Specifies the type of dataset/table restriction. */
  type: RestrictionConfig_RestrictionType;
}

/** RestrictionType specifies the type of dataset/table restriction. */
export enum RestrictionConfig_RestrictionType {
  /** RESTRICTION_TYPE_UNSPECIFIED - Should never be used. */
  RESTRICTION_TYPE_UNSPECIFIED = 0,
  /**
   * RESTRICTED_DATA_EGRESS - Restrict data egress. See [Data
   * egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress)
   * for more details.
   */
  RESTRICTED_DATA_EGRESS = 1,
  UNRECOGNIZED = -1,
}

export function restrictionConfig_RestrictionTypeFromJSON(object: any): RestrictionConfig_RestrictionType {
  switch (object) {
    case 0:
    case "RESTRICTION_TYPE_UNSPECIFIED":
      return RestrictionConfig_RestrictionType.RESTRICTION_TYPE_UNSPECIFIED;
    case 1:
    case "RESTRICTED_DATA_EGRESS":
      return RestrictionConfig_RestrictionType.RESTRICTED_DATA_EGRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestrictionConfig_RestrictionType.UNRECOGNIZED;
  }
}

export function restrictionConfig_RestrictionTypeToJSON(object: RestrictionConfig_RestrictionType): string {
  switch (object) {
    case RestrictionConfig_RestrictionType.RESTRICTION_TYPE_UNSPECIFIED:
      return "RESTRICTION_TYPE_UNSPECIFIED";
    case RestrictionConfig_RestrictionType.RESTRICTED_DATA_EGRESS:
      return "RESTRICTED_DATA_EGRESS";
    case RestrictionConfig_RestrictionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseRestrictionConfig(): RestrictionConfig {
  return { type: 0 };
}

export const RestrictionConfig: MessageFns<RestrictionConfig> = {
  encode(message: RestrictionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestrictionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestrictionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestrictionConfig {
    return { type: isSet(object.type) ? restrictionConfig_RestrictionTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RestrictionConfig): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = restrictionConfig_RestrictionTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RestrictionConfig>): RestrictionConfig {
    return RestrictionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestrictionConfig>): RestrictionConfig {
    const message = createBaseRestrictionConfig();
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
