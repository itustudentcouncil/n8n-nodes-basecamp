// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/job_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ErrorProto } from "./error.js";

export const protobufPackage = "google.cloud.bigquery.v2";

export interface JobStatus {
  /**
   * Output only. Final error result of the job. If present, indicates that the
   * job has completed and was unsuccessful.
   */
  errorResult:
    | ErrorProto
    | undefined;
  /**
   * Output only. The first errors encountered during the running of the job.
   * The final message includes the number of errors that caused the process to
   * stop. Errors here do not necessarily mean that the job has not completed or
   * was unsuccessful.
   */
  errors: ErrorProto[];
  /**
   * Output only. Running state of the job.  Valid states include 'PENDING',
   * 'RUNNING', and 'DONE'.
   */
  state: string;
}

function createBaseJobStatus(): JobStatus {
  return { errorResult: undefined, errors: [], state: "" };
}

export const JobStatus: MessageFns<JobStatus> = {
  encode(message: JobStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorResult !== undefined) {
      ErrorProto.encode(message.errorResult, writer.uint32(10).fork()).join();
    }
    for (const v of message.errors) {
      ErrorProto.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.state !== "") {
      writer.uint32(26).string(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorResult = ErrorProto.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(ErrorProto.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.state = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobStatus {
    return {
      errorResult: isSet(object.errorResult) ? ErrorProto.fromJSON(object.errorResult) : undefined,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => ErrorProto.fromJSON(e)) : [],
      state: isSet(object.state) ? globalThis.String(object.state) : "",
    };
  },

  toJSON(message: JobStatus): unknown {
    const obj: any = {};
    if (message.errorResult !== undefined) {
      obj.errorResult = ErrorProto.toJSON(message.errorResult);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ErrorProto.toJSON(e));
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    return obj;
  },

  create(base?: DeepPartial<JobStatus>): JobStatus {
    return JobStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobStatus>): JobStatus {
    const message = createBaseJobStatus();
    message.errorResult = (object.errorResult !== undefined && object.errorResult !== null)
      ? ErrorProto.fromPartial(object.errorResult)
      : undefined;
    message.errors = object.errors?.map((e) => ErrorProto.fromPartial(e)) || [];
    message.state = object.state ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
