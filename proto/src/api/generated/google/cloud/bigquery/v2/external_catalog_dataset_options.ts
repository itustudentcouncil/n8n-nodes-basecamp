// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/external_catalog_dataset_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/**
 * Options defining open source compatible datasets living in the BigQuery
 * catalog. Contains metadata of open source database, schema
 * or namespace represented by the current dataset.
 */
export interface ExternalCatalogDatasetOptions {
  /**
   * Optional. A map of key value pairs defining the parameters and properties
   * of the open source schema. Maximum size of 2Mib.
   */
  parameters: { [key: string]: string };
  /**
   * Optional. The storage location URI for all tables in the dataset.
   * Equivalent to hive metastore's database locationUri. Maximum length of 1024
   * characters.
   */
  defaultStorageLocationUri: string;
}

export interface ExternalCatalogDatasetOptions_ParametersEntry {
  key: string;
  value: string;
}

function createBaseExternalCatalogDatasetOptions(): ExternalCatalogDatasetOptions {
  return { parameters: {}, defaultStorageLocationUri: "" };
}

export const ExternalCatalogDatasetOptions: MessageFns<ExternalCatalogDatasetOptions> = {
  encode(message: ExternalCatalogDatasetOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.parameters).forEach(([key, value]) => {
      ExternalCatalogDatasetOptions_ParametersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.defaultStorageLocationUri !== "") {
      writer.uint32(18).string(message.defaultStorageLocationUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalCatalogDatasetOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalCatalogDatasetOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ExternalCatalogDatasetOptions_ParametersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.parameters[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.defaultStorageLocationUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalCatalogDatasetOptions {
    return {
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      defaultStorageLocationUri: isSet(object.defaultStorageLocationUri)
        ? globalThis.String(object.defaultStorageLocationUri)
        : "",
    };
  },

  toJSON(message: ExternalCatalogDatasetOptions): unknown {
    const obj: any = {};
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.defaultStorageLocationUri !== "") {
      obj.defaultStorageLocationUri = message.defaultStorageLocationUri;
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalCatalogDatasetOptions>): ExternalCatalogDatasetOptions {
    return ExternalCatalogDatasetOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalCatalogDatasetOptions>): ExternalCatalogDatasetOptions {
    const message = createBaseExternalCatalogDatasetOptions();
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.defaultStorageLocationUri = object.defaultStorageLocationUri ?? "";
    return message;
  },
};

function createBaseExternalCatalogDatasetOptions_ParametersEntry(): ExternalCatalogDatasetOptions_ParametersEntry {
  return { key: "", value: "" };
}

export const ExternalCatalogDatasetOptions_ParametersEntry: MessageFns<ExternalCatalogDatasetOptions_ParametersEntry> =
  {
    encode(
      message: ExternalCatalogDatasetOptions_ParametersEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ExternalCatalogDatasetOptions_ParametersEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseExternalCatalogDatasetOptions_ParametersEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ExternalCatalogDatasetOptions_ParametersEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: ExternalCatalogDatasetOptions_ParametersEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== "") {
        obj.value = message.value;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ExternalCatalogDatasetOptions_ParametersEntry>,
    ): ExternalCatalogDatasetOptions_ParametersEntry {
      return ExternalCatalogDatasetOptions_ParametersEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ExternalCatalogDatasetOptions_ParametersEntry>,
    ): ExternalCatalogDatasetOptions_ParametersEntry {
      const message = createBaseExternalCatalogDatasetOptions_ParametersEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
