// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/external_catalog_table_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/**
 * Metadata about open source compatible table. The fields contained in
 * these options correspond to hive metastore's table level properties.
 */
export interface ExternalCatalogTableOptions {
  /**
   * Optional. A map of key value pairs defining the parameters and properties
   * of the open source table. Corresponds with hive meta store table
   * parameters. Maximum size of 4Mib.
   */
  parameters: { [key: string]: string };
  /**
   * Optional. A storage descriptor containing information about the physical
   * storage of this table.
   */
  storageDescriptor:
    | StorageDescriptor
    | undefined;
  /**
   * Optional. The connection specifying the credentials to be used to read
   * external storage, such as Azure Blob, Cloud Storage, or S3. The connection
   * is needed to read the open source table from BigQuery Engine. The
   * connection_id can have the form
   * `<project_id>.<location_id>.<connection_id>` or
   * `projects/<project_id>/locations/<location_id>/connections/<connection_id>`.
   */
  connectionId: string;
}

export interface ExternalCatalogTableOptions_ParametersEntry {
  key: string;
  value: string;
}

/**
 * Contains information about how a table's data is stored and accessed by open
 * source query engines.
 */
export interface StorageDescriptor {
  /**
   * Optional. The physical location of the table
   * (e.g. `gs://spark-dataproc-data/pangea-data/case_sensitive/` or
   * `gs://spark-dataproc-data/pangea-data/*`).
   * The maximum length is 2056 bytes.
   */
  locationUri: string;
  /**
   * Optional. Specifies the fully qualified class name of the InputFormat
   * (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcInputFormat").
   * The maximum length is 128 characters.
   */
  inputFormat: string;
  /**
   * Optional. Specifies the fully qualified class name of the OutputFormat
   * (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat").
   * The maximum length is 128 characters.
   */
  outputFormat: string;
  /** Optional. Serializer and deserializer information. */
  serdeInfo: SerDeInfo | undefined;
}

/** Serializer and deserializer information. */
export interface SerDeInfo {
  /**
   * Optional. Name of the SerDe.
   * The maximum length is 256 characters.
   */
  name: string;
  /**
   * Required. Specifies a fully-qualified class name of the serialization
   * library that is responsible for the translation of data between table
   * representation and the underlying low-level input and output format
   * structures. The maximum length is 256 characters.
   */
  serializationLibrary: string;
  /**
   * Optional. Key-value pairs that define the initialization parameters for the
   * serialization library.
   * Maximum size 10 Kib.
   */
  parameters: { [key: string]: string };
}

export interface SerDeInfo_ParametersEntry {
  key: string;
  value: string;
}

function createBaseExternalCatalogTableOptions(): ExternalCatalogTableOptions {
  return { parameters: {}, storageDescriptor: undefined, connectionId: "" };
}

export const ExternalCatalogTableOptions: MessageFns<ExternalCatalogTableOptions> = {
  encode(message: ExternalCatalogTableOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.parameters).forEach(([key, value]) => {
      ExternalCatalogTableOptions_ParametersEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.storageDescriptor !== undefined) {
      StorageDescriptor.encode(message.storageDescriptor, writer.uint32(18).fork()).join();
    }
    if (message.connectionId !== "") {
      writer.uint32(26).string(message.connectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalCatalogTableOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalCatalogTableOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ExternalCatalogTableOptions_ParametersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.parameters[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storageDescriptor = StorageDescriptor.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connectionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalCatalogTableOptions {
    return {
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      storageDescriptor: isSet(object.storageDescriptor)
        ? StorageDescriptor.fromJSON(object.storageDescriptor)
        : undefined,
      connectionId: isSet(object.connectionId) ? globalThis.String(object.connectionId) : "",
    };
  },

  toJSON(message: ExternalCatalogTableOptions): unknown {
    const obj: any = {};
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.storageDescriptor !== undefined) {
      obj.storageDescriptor = StorageDescriptor.toJSON(message.storageDescriptor);
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalCatalogTableOptions>): ExternalCatalogTableOptions {
    return ExternalCatalogTableOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalCatalogTableOptions>): ExternalCatalogTableOptions {
    const message = createBaseExternalCatalogTableOptions();
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.storageDescriptor = (object.storageDescriptor !== undefined && object.storageDescriptor !== null)
      ? StorageDescriptor.fromPartial(object.storageDescriptor)
      : undefined;
    message.connectionId = object.connectionId ?? "";
    return message;
  },
};

function createBaseExternalCatalogTableOptions_ParametersEntry(): ExternalCatalogTableOptions_ParametersEntry {
  return { key: "", value: "" };
}

export const ExternalCatalogTableOptions_ParametersEntry: MessageFns<ExternalCatalogTableOptions_ParametersEntry> = {
  encode(
    message: ExternalCatalogTableOptions_ParametersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalCatalogTableOptions_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalCatalogTableOptions_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalCatalogTableOptions_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ExternalCatalogTableOptions_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalCatalogTableOptions_ParametersEntry>): ExternalCatalogTableOptions_ParametersEntry {
    return ExternalCatalogTableOptions_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ExternalCatalogTableOptions_ParametersEntry>,
  ): ExternalCatalogTableOptions_ParametersEntry {
    const message = createBaseExternalCatalogTableOptions_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseStorageDescriptor(): StorageDescriptor {
  return { locationUri: "", inputFormat: "", outputFormat: "", serdeInfo: undefined };
}

export const StorageDescriptor: MessageFns<StorageDescriptor> = {
  encode(message: StorageDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationUri !== "") {
      writer.uint32(10).string(message.locationUri);
    }
    if (message.inputFormat !== "") {
      writer.uint32(18).string(message.inputFormat);
    }
    if (message.outputFormat !== "") {
      writer.uint32(26).string(message.outputFormat);
    }
    if (message.serdeInfo !== undefined) {
      SerDeInfo.encode(message.serdeInfo, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inputFormat = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputFormat = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serdeInfo = SerDeInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageDescriptor {
    return {
      locationUri: isSet(object.locationUri) ? globalThis.String(object.locationUri) : "",
      inputFormat: isSet(object.inputFormat) ? globalThis.String(object.inputFormat) : "",
      outputFormat: isSet(object.outputFormat) ? globalThis.String(object.outputFormat) : "",
      serdeInfo: isSet(object.serdeInfo) ? SerDeInfo.fromJSON(object.serdeInfo) : undefined,
    };
  },

  toJSON(message: StorageDescriptor): unknown {
    const obj: any = {};
    if (message.locationUri !== "") {
      obj.locationUri = message.locationUri;
    }
    if (message.inputFormat !== "") {
      obj.inputFormat = message.inputFormat;
    }
    if (message.outputFormat !== "") {
      obj.outputFormat = message.outputFormat;
    }
    if (message.serdeInfo !== undefined) {
      obj.serdeInfo = SerDeInfo.toJSON(message.serdeInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<StorageDescriptor>): StorageDescriptor {
    return StorageDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StorageDescriptor>): StorageDescriptor {
    const message = createBaseStorageDescriptor();
    message.locationUri = object.locationUri ?? "";
    message.inputFormat = object.inputFormat ?? "";
    message.outputFormat = object.outputFormat ?? "";
    message.serdeInfo = (object.serdeInfo !== undefined && object.serdeInfo !== null)
      ? SerDeInfo.fromPartial(object.serdeInfo)
      : undefined;
    return message;
  },
};

function createBaseSerDeInfo(): SerDeInfo {
  return { name: "", serializationLibrary: "", parameters: {} };
}

export const SerDeInfo: MessageFns<SerDeInfo> = {
  encode(message: SerDeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serializationLibrary !== "") {
      writer.uint32(18).string(message.serializationLibrary);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      SerDeInfo_ParametersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SerDeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSerDeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serializationLibrary = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = SerDeInfo_ParametersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.parameters[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SerDeInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serializationLibrary: isSet(object.serializationLibrary) ? globalThis.String(object.serializationLibrary) : "",
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SerDeInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serializationLibrary !== "") {
      obj.serializationLibrary = message.serializationLibrary;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SerDeInfo>): SerDeInfo {
    return SerDeInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SerDeInfo>): SerDeInfo {
    const message = createBaseSerDeInfo();
    message.name = object.name ?? "";
    message.serializationLibrary = object.serializationLibrary ?? "";
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSerDeInfo_ParametersEntry(): SerDeInfo_ParametersEntry {
  return { key: "", value: "" };
}

export const SerDeInfo_ParametersEntry: MessageFns<SerDeInfo_ParametersEntry> = {
  encode(message: SerDeInfo_ParametersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SerDeInfo_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSerDeInfo_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SerDeInfo_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SerDeInfo_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SerDeInfo_ParametersEntry>): SerDeInfo_ParametersEntry {
    return SerDeInfo_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SerDeInfo_ParametersEntry>): SerDeInfo_ParametersEntry {
    const message = createBaseSerDeInfo_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
