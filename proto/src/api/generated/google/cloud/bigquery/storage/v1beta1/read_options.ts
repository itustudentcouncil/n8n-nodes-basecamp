// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/storage/v1beta1/read_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.storage.v1beta1";

/** Options dictating how we read a table. */
export interface TableReadOptions {
  /**
   * Optional. The names of the fields in the table to be returned. If no
   * field names are specified, then all fields in the table are returned.
   *
   * Nested fields -- the child elements of a STRUCT field -- can be selected
   * individually using their fully-qualified names, and will be returned as
   * record fields containing only the selected nested fields. If a STRUCT
   * field is specified in the selected fields list, all of the child elements
   * will be returned.
   *
   * As an example, consider a table with the following schema:
   *
   *   {
   *       "name": "struct_field",
   *       "type": "RECORD",
   *       "mode": "NULLABLE",
   *       "fields": [
   *           {
   *               "name": "string_field1",
   *               "type": "STRING",
   * .              "mode": "NULLABLE"
   *           },
   *           {
   *               "name": "string_field2",
   *               "type": "STRING",
   *               "mode": "NULLABLE"
   *           }
   *       ]
   *   }
   *
   * Specifying "struct_field" in the selected fields list will result in a
   * read session schema with the following logical structure:
   *
   *   struct_field {
   *       string_field1
   *       string_field2
   *   }
   *
   * Specifying "struct_field.string_field1" in the selected fields list will
   * result in a read session schema with the following logical structure:
   *
   *   struct_field {
   *       string_field1
   *   }
   *
   * The order of the fields in the read session schema is derived from the
   * table schema and does not correspond to the order in which the fields are
   * specified in this list.
   */
  selectedFields: string[];
  /**
   * Optional. SQL text filtering statement, similar to a WHERE clause in
   * a SQL query. Aggregates are not supported.
   *
   * Examples: "int_field > 5"
   *           "date_field = CAST('2014-9-27' as DATE)"
   *           "nullable_field is not NULL"
   *           "st_equals(geo_field, st_geofromtext("POINT(2, 2)"))"
   *           "numeric_field BETWEEN 1.0 AND 5.0"
   *
   * Restricted to a maximum length for 1 MB.
   */
  rowRestriction: string;
}

function createBaseTableReadOptions(): TableReadOptions {
  return { selectedFields: [], rowRestriction: "" };
}

export const TableReadOptions: MessageFns<TableReadOptions> = {
  encode(message: TableReadOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.selectedFields) {
      writer.uint32(10).string(v!);
    }
    if (message.rowRestriction !== "") {
      writer.uint32(18).string(message.rowRestriction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableReadOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableReadOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.selectedFields.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rowRestriction = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableReadOptions {
    return {
      selectedFields: globalThis.Array.isArray(object?.selectedFields)
        ? object.selectedFields.map((e: any) => globalThis.String(e))
        : [],
      rowRestriction: isSet(object.rowRestriction) ? globalThis.String(object.rowRestriction) : "",
    };
  },

  toJSON(message: TableReadOptions): unknown {
    const obj: any = {};
    if (message.selectedFields?.length) {
      obj.selectedFields = message.selectedFields;
    }
    if (message.rowRestriction !== "") {
      obj.rowRestriction = message.rowRestriction;
    }
    return obj;
  },

  create(base?: DeepPartial<TableReadOptions>): TableReadOptions {
    return TableReadOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TableReadOptions>): TableReadOptions {
    const message = createBaseTableReadOptions();
    message.selectedFields = object.selectedFields?.map((e) => e) || [];
    message.rowRestriction = object.rowRestriction ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
