// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/storage/v1alpha/partition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.bigquery.storage.v1alpha";

/** Schema description of a metastore partition column. */
export interface FieldSchema {
  /**
   * Required. The name of the column.
   * The maximum length of the name is 1024 characters
   */
  name: string;
  /**
   * Required. The type of the metastore partition column. Maximum allowed
   * length is 1024 characters.
   */
  type: string;
}

/**
 * Contains information about the physical storage of the data in the metastore
 * partition.
 */
export interface StorageDescriptor {
  /**
   * Optional. The physical location of the metastore partition
   * (e.g. `gs://spark-dataproc-data/pangea-data/case_sensitive/` or
   * `gs://spark-dataproc-data/pangea-data/*`).
   */
  locationUri: string;
  /**
   * Optional. Specifies the fully qualified class name of the InputFormat
   * (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcInputFormat").
   * The maximum length is 128 characters.
   */
  inputFormat: string;
  /**
   * Optional. Specifies the fully qualified class name of the OutputFormat
   * (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat").
   * The maximum length is 128 characters.
   */
  outputFormat: string;
  /** Optional. Serializer and deserializer information. */
  serdeInfo: SerDeInfo | undefined;
}

/** Serializer and deserializer information. */
export interface SerDeInfo {
  /**
   * Optional. Name of the SerDe.
   * The maximum length is 256 characters.
   */
  name: string;
  /**
   * Required. Specifies a fully-qualified class name of the serialization
   * library that is responsible for the translation of data between table
   * representation and the underlying low-level input and output format
   * structures. The maximum length is 256 characters.
   */
  serializationLibrary: string;
  /**
   * Optional. Key-value pairs that define the initialization parameters for the
   * serialization library.
   * Maximum size 10 Kib.
   */
  parameters: { [key: string]: string };
}

export interface SerDeInfo_ParametersEntry {
  key: string;
  value: string;
}

/** Information about a Hive partition. */
export interface MetastorePartition {
  /**
   * Required. Represents the values of the partition keys, where each value
   * corresponds to a specific partition key in the order in which the keys are
   * defined. Each value is limited to 1024 characters.
   */
  values: string[];
  /** Output only. The creation time of the partition. */
  createTime:
    | Date
    | undefined;
  /**
   * Optional. Contains information about the physical storage of the data in
   * the partition.
   */
  storageDescriptor:
    | StorageDescriptor
    | undefined;
  /**
   * Optional. Additional parameters or metadata associated with the partition.
   * Maximum size 10 KiB.
   */
  parameters: { [key: string]: string };
  /** Optional. List of columns. */
  fields: FieldSchema[];
}

export interface MetastorePartition_ParametersEntry {
  key: string;
  value: string;
}

/** List of metastore partitions. */
export interface MetastorePartitionList {
  /** Required. List of partitions. */
  partitions: MetastorePartition[];
}

/** Information about a single stream that is used to read partitions. */
export interface ReadStream {
  /**
   * Output only. Identifier. Name of the stream, in the form
   * `projects/{project_id}/locations/{location}/sessions/{session_id}/streams/{stream_id}`.
   */
  name: string;
}

/** List of streams. */
export interface StreamList {
  /** Output only. List of streams. */
  streams: ReadStream[];
}

/** Represents the values of a metastore partition. */
export interface MetastorePartitionValues {
  /**
   * Required. The values of the partition keys, where each value corresponds to
   * a specific partition key in the order in which the keys are defined.
   */
  values: string[];
}

function createBaseFieldSchema(): FieldSchema {
  return { name: "", type: "" };
}

export const FieldSchema: MessageFns<FieldSchema> = {
  encode(message: FieldSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldSchema {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: FieldSchema): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(base?: DeepPartial<FieldSchema>): FieldSchema {
    return FieldSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldSchema>): FieldSchema {
    const message = createBaseFieldSchema();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseStorageDescriptor(): StorageDescriptor {
  return { locationUri: "", inputFormat: "", outputFormat: "", serdeInfo: undefined };
}

export const StorageDescriptor: MessageFns<StorageDescriptor> = {
  encode(message: StorageDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationUri !== "") {
      writer.uint32(10).string(message.locationUri);
    }
    if (message.inputFormat !== "") {
      writer.uint32(18).string(message.inputFormat);
    }
    if (message.outputFormat !== "") {
      writer.uint32(26).string(message.outputFormat);
    }
    if (message.serdeInfo !== undefined) {
      SerDeInfo.encode(message.serdeInfo, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inputFormat = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputFormat = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serdeInfo = SerDeInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageDescriptor {
    return {
      locationUri: isSet(object.locationUri) ? globalThis.String(object.locationUri) : "",
      inputFormat: isSet(object.inputFormat) ? globalThis.String(object.inputFormat) : "",
      outputFormat: isSet(object.outputFormat) ? globalThis.String(object.outputFormat) : "",
      serdeInfo: isSet(object.serdeInfo) ? SerDeInfo.fromJSON(object.serdeInfo) : undefined,
    };
  },

  toJSON(message: StorageDescriptor): unknown {
    const obj: any = {};
    if (message.locationUri !== "") {
      obj.locationUri = message.locationUri;
    }
    if (message.inputFormat !== "") {
      obj.inputFormat = message.inputFormat;
    }
    if (message.outputFormat !== "") {
      obj.outputFormat = message.outputFormat;
    }
    if (message.serdeInfo !== undefined) {
      obj.serdeInfo = SerDeInfo.toJSON(message.serdeInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<StorageDescriptor>): StorageDescriptor {
    return StorageDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StorageDescriptor>): StorageDescriptor {
    const message = createBaseStorageDescriptor();
    message.locationUri = object.locationUri ?? "";
    message.inputFormat = object.inputFormat ?? "";
    message.outputFormat = object.outputFormat ?? "";
    message.serdeInfo = (object.serdeInfo !== undefined && object.serdeInfo !== null)
      ? SerDeInfo.fromPartial(object.serdeInfo)
      : undefined;
    return message;
  },
};

function createBaseSerDeInfo(): SerDeInfo {
  return { name: "", serializationLibrary: "", parameters: {} };
}

export const SerDeInfo: MessageFns<SerDeInfo> = {
  encode(message: SerDeInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serializationLibrary !== "") {
      writer.uint32(18).string(message.serializationLibrary);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      SerDeInfo_ParametersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SerDeInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSerDeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serializationLibrary = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = SerDeInfo_ParametersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.parameters[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SerDeInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serializationLibrary: isSet(object.serializationLibrary) ? globalThis.String(object.serializationLibrary) : "",
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SerDeInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serializationLibrary !== "") {
      obj.serializationLibrary = message.serializationLibrary;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SerDeInfo>): SerDeInfo {
    return SerDeInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SerDeInfo>): SerDeInfo {
    const message = createBaseSerDeInfo();
    message.name = object.name ?? "";
    message.serializationLibrary = object.serializationLibrary ?? "";
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSerDeInfo_ParametersEntry(): SerDeInfo_ParametersEntry {
  return { key: "", value: "" };
}

export const SerDeInfo_ParametersEntry: MessageFns<SerDeInfo_ParametersEntry> = {
  encode(message: SerDeInfo_ParametersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SerDeInfo_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSerDeInfo_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SerDeInfo_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SerDeInfo_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SerDeInfo_ParametersEntry>): SerDeInfo_ParametersEntry {
    return SerDeInfo_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SerDeInfo_ParametersEntry>): SerDeInfo_ParametersEntry {
    const message = createBaseSerDeInfo_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMetastorePartition(): MetastorePartition {
  return { values: [], createTime: undefined, storageDescriptor: undefined, parameters: {}, fields: [] };
}

export const MetastorePartition: MessageFns<MetastorePartition> = {
  encode(message: MetastorePartition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.storageDescriptor !== undefined) {
      StorageDescriptor.encode(message.storageDescriptor, writer.uint32(26).fork()).join();
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      MetastorePartition_ParametersEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    for (const v of message.fields) {
      FieldSchema.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetastorePartition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetastorePartition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.storageDescriptor = StorageDescriptor.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = MetastorePartition_ParametersEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.parameters[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.fields.push(FieldSchema.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetastorePartition {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      storageDescriptor: isSet(object.storageDescriptor)
        ? StorageDescriptor.fromJSON(object.storageDescriptor)
        : undefined,
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e: any) => FieldSchema.fromJSON(e)) : [],
    };
  },

  toJSON(message: MetastorePartition): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.storageDescriptor !== undefined) {
      obj.storageDescriptor = StorageDescriptor.toJSON(message.storageDescriptor);
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => FieldSchema.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MetastorePartition>): MetastorePartition {
    return MetastorePartition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetastorePartition>): MetastorePartition {
    const message = createBaseMetastorePartition();
    message.values = object.values?.map((e) => e) || [];
    message.createTime = object.createTime ?? undefined;
    message.storageDescriptor = (object.storageDescriptor !== undefined && object.storageDescriptor !== null)
      ? StorageDescriptor.fromPartial(object.storageDescriptor)
      : undefined;
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.fields = object.fields?.map((e) => FieldSchema.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMetastorePartition_ParametersEntry(): MetastorePartition_ParametersEntry {
  return { key: "", value: "" };
}

export const MetastorePartition_ParametersEntry: MessageFns<MetastorePartition_ParametersEntry> = {
  encode(message: MetastorePartition_ParametersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetastorePartition_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetastorePartition_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetastorePartition_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MetastorePartition_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<MetastorePartition_ParametersEntry>): MetastorePartition_ParametersEntry {
    return MetastorePartition_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetastorePartition_ParametersEntry>): MetastorePartition_ParametersEntry {
    const message = createBaseMetastorePartition_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMetastorePartitionList(): MetastorePartitionList {
  return { partitions: [] };
}

export const MetastorePartitionList: MessageFns<MetastorePartitionList> = {
  encode(message: MetastorePartitionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.partitions) {
      MetastorePartition.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetastorePartitionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetastorePartitionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.partitions.push(MetastorePartition.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetastorePartitionList {
    return {
      partitions: globalThis.Array.isArray(object?.partitions)
        ? object.partitions.map((e: any) => MetastorePartition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MetastorePartitionList): unknown {
    const obj: any = {};
    if (message.partitions?.length) {
      obj.partitions = message.partitions.map((e) => MetastorePartition.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MetastorePartitionList>): MetastorePartitionList {
    return MetastorePartitionList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetastorePartitionList>): MetastorePartitionList {
    const message = createBaseMetastorePartitionList();
    message.partitions = object.partitions?.map((e) => MetastorePartition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadStream(): ReadStream {
  return { name: "" };
}

export const ReadStream: MessageFns<ReadStream> = {
  encode(message: ReadStream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadStream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadStream {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ReadStream): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadStream>): ReadStream {
    return ReadStream.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadStream>): ReadStream {
    const message = createBaseReadStream();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStreamList(): StreamList {
  return { streams: [] };
}

export const StreamList: MessageFns<StreamList> = {
  encode(message: StreamList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.streams) {
      ReadStream.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.streams.push(ReadStream.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamList {
    return {
      streams: globalThis.Array.isArray(object?.streams) ? object.streams.map((e: any) => ReadStream.fromJSON(e)) : [],
    };
  },

  toJSON(message: StreamList): unknown {
    const obj: any = {};
    if (message.streams?.length) {
      obj.streams = message.streams.map((e) => ReadStream.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StreamList>): StreamList {
    return StreamList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamList>): StreamList {
    const message = createBaseStreamList();
    message.streams = object.streams?.map((e) => ReadStream.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMetastorePartitionValues(): MetastorePartitionValues {
  return { values: [] };
}

export const MetastorePartitionValues: MessageFns<MetastorePartitionValues> = {
  encode(message: MetastorePartitionValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetastorePartitionValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetastorePartitionValues();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetastorePartitionValues {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MetastorePartitionValues): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<MetastorePartitionValues>): MetastorePartitionValues {
    return MetastorePartitionValues.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetastorePartitionValues>): MetastorePartitionValues {
    const message = createBaseMetastorePartitionValues();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
