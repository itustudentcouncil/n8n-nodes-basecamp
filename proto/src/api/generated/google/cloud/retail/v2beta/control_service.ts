// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2beta/control_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Control } from "./control.js";

export const protobufPackage = "google.cloud.retail.v2beta";

/** Request for CreateControl method. */
export interface CreateControlRequest {
  /**
   * Required. Full resource name of parent catalog. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
   */
  parent: string;
  /** Required. The Control to create. */
  control:
    | Control
    | undefined;
  /**
   * Required. The ID to use for the Control, which will become the final
   * component of the Control's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-_/.
   */
  controlId: string;
}

/** Request for UpdateControl method. */
export interface UpdateControlRequest {
  /** Required. The Control to update. */
  control:
    | Control
    | undefined;
  /**
   * Indicates which fields in the provided
   * [Control][google.cloud.retail.v2beta.Control] to update. The following are
   * NOT supported:
   *
   * * [Control.name][google.cloud.retail.v2beta.Control.name]
   *
   * If not set or empty, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/** Request for DeleteControl method. */
export interface DeleteControlRequest {
  /**
   * Required. The resource name of the Control to delete. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/controls/{control_id}`
   */
  name: string;
}

/** Request for GetControl method. */
export interface GetControlRequest {
  /**
   * Required. The resource name of the Control to get. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/controls/{control_id}`
   */
  name: string;
}

/** Request for ListControls method. */
export interface ListControlsRequest {
  /**
   * Required. The catalog resource name. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
   */
  parent: string;
  /**
   * Optional. Maximum number of results to return. If unspecified, defaults
   * to 50. Max allowed value is 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListControls` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /**
   * Optional. A filter to apply on the list results. Supported features:
   *
   * * List all the products under the parent branch if
   * [filter][google.cloud.retail.v2beta.ListControlsRequest.filter] is unset.
   * * List controls that are used in a single ServingConfig:
   *     'serving_config = "boosted_home_page_cvr"'
   */
  filter: string;
}

/** Response for ListControls method. */
export interface ListControlsResponse {
  /** All the Controls for a given catalog. */
  controls: Control[];
  /** Pagination token, if not returned indicates the last page. */
  nextPageToken: string;
}

function createBaseCreateControlRequest(): CreateControlRequest {
  return { parent: "", control: undefined, controlId: "" };
}

export const CreateControlRequest: MessageFns<CreateControlRequest> = {
  encode(message: CreateControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.control !== undefined) {
      Control.encode(message.control, writer.uint32(18).fork()).join();
    }
    if (message.controlId !== "") {
      writer.uint32(26).string(message.controlId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.control = Control.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.controlId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateControlRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      control: isSet(object.control) ? Control.fromJSON(object.control) : undefined,
      controlId: isSet(object.controlId) ? globalThis.String(object.controlId) : "",
    };
  },

  toJSON(message: CreateControlRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.control !== undefined) {
      obj.control = Control.toJSON(message.control);
    }
    if (message.controlId !== "") {
      obj.controlId = message.controlId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateControlRequest>): CreateControlRequest {
    return CreateControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateControlRequest>): CreateControlRequest {
    const message = createBaseCreateControlRequest();
    message.parent = object.parent ?? "";
    message.control = (object.control !== undefined && object.control !== null)
      ? Control.fromPartial(object.control)
      : undefined;
    message.controlId = object.controlId ?? "";
    return message;
  },
};

function createBaseUpdateControlRequest(): UpdateControlRequest {
  return { control: undefined, updateMask: undefined };
}

export const UpdateControlRequest: MessageFns<UpdateControlRequest> = {
  encode(message: UpdateControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.control !== undefined) {
      Control.encode(message.control, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.control = Control.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateControlRequest {
    return {
      control: isSet(object.control) ? Control.fromJSON(object.control) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateControlRequest): unknown {
    const obj: any = {};
    if (message.control !== undefined) {
      obj.control = Control.toJSON(message.control);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateControlRequest>): UpdateControlRequest {
    return UpdateControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateControlRequest>): UpdateControlRequest {
    const message = createBaseUpdateControlRequest();
    message.control = (object.control !== undefined && object.control !== null)
      ? Control.fromPartial(object.control)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteControlRequest(): DeleteControlRequest {
  return { name: "" };
}

export const DeleteControlRequest: MessageFns<DeleteControlRequest> = {
  encode(message: DeleteControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteControlRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteControlRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteControlRequest>): DeleteControlRequest {
    return DeleteControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteControlRequest>): DeleteControlRequest {
    const message = createBaseDeleteControlRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetControlRequest(): GetControlRequest {
  return { name: "" };
}

export const GetControlRequest: MessageFns<GetControlRequest> = {
  encode(message: GetControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetControlRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetControlRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetControlRequest>): GetControlRequest {
    return GetControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetControlRequest>): GetControlRequest {
    const message = createBaseGetControlRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListControlsRequest(): ListControlsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListControlsRequest: MessageFns<ListControlsRequest> = {
  encode(message: ListControlsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListControlsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListControlsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListControlsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListControlsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListControlsRequest>): ListControlsRequest {
    return ListControlsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListControlsRequest>): ListControlsRequest {
    const message = createBaseListControlsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListControlsResponse(): ListControlsResponse {
  return { controls: [], nextPageToken: "" };
}

export const ListControlsResponse: MessageFns<ListControlsResponse> = {
  encode(message: ListControlsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.controls) {
      Control.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListControlsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListControlsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.controls.push(Control.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListControlsResponse {
    return {
      controls: globalThis.Array.isArray(object?.controls) ? object.controls.map((e: any) => Control.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListControlsResponse): unknown {
    const obj: any = {};
    if (message.controls?.length) {
      obj.controls = message.controls.map((e) => Control.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListControlsResponse>): ListControlsResponse {
    return ListControlsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListControlsResponse>): ListControlsResponse {
    const message = createBaseListControlsResponse();
    message.controls = object.controls?.map((e) => Control.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service for modifying Control. */
export type ControlServiceDefinition = typeof ControlServiceDefinition;
export const ControlServiceDefinition = {
  name: "ControlService",
  fullName: "google.cloud.retail.v2beta.ControlService",
  methods: {
    /**
     * Creates a Control.
     *
     * If the [Control][google.cloud.retail.v2beta.Control] to create already
     * exists, an ALREADY_EXISTS error is returned.
     */
    createControl: {
      name: "CreateControl",
      requestType: CreateControlRequest,
      requestStream: false,
      responseType: Control,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              44,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              7,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              59,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a Control.
     *
     * If the [Control][google.cloud.retail.v2beta.Control] to delete does not
     * exist, a NOT_FOUND error is returned.
     */
    deleteControl: {
      name: "DeleteControl",
      requestType: DeleteControlRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a Control.
     *
     * [Control][google.cloud.retail.v2beta.Control] cannot be set to a different
     * oneof field, if so an INVALID_ARGUMENT is returned. If the
     * [Control][google.cloud.retail.v2beta.Control] to update does not exist, a
     * NOT_FOUND error is returned.
     */
    updateControl: {
      name: "UpdateControl",
      requestType: UpdateControlRequest,
      requestStream: false,
      responseType: Control,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 99, 111, 110, 116, 114, 111, 108, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              7,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              50,
              67,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a Control. */
    getControl: {
      name: "GetControl",
      requestType: GetControlRequest,
      requestStream: false,
      responseType: Control,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all Controls by their parent
     * [Catalog][google.cloud.retail.v2beta.Catalog].
     */
    listControls: {
      name: "ListControls",
      requestType: ListControlsRequest,
      requestStream: false,
      responseType: ListControlsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ControlServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a Control.
   *
   * If the [Control][google.cloud.retail.v2beta.Control] to create already
   * exists, an ALREADY_EXISTS error is returned.
   */
  createControl(request: CreateControlRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Control>>;
  /**
   * Deletes a Control.
   *
   * If the [Control][google.cloud.retail.v2beta.Control] to delete does not
   * exist, a NOT_FOUND error is returned.
   */
  deleteControl(request: DeleteControlRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Updates a Control.
   *
   * [Control][google.cloud.retail.v2beta.Control] cannot be set to a different
   * oneof field, if so an INVALID_ARGUMENT is returned. If the
   * [Control][google.cloud.retail.v2beta.Control] to update does not exist, a
   * NOT_FOUND error is returned.
   */
  updateControl(request: UpdateControlRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Control>>;
  /** Gets a Control. */
  getControl(request: GetControlRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Control>>;
  /**
   * Lists all Controls by their parent
   * [Catalog][google.cloud.retail.v2beta.Catalog].
   */
  listControls(
    request: ListControlsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListControlsResponse>>;
}

export interface ControlServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a Control.
   *
   * If the [Control][google.cloud.retail.v2beta.Control] to create already
   * exists, an ALREADY_EXISTS error is returned.
   */
  createControl(request: DeepPartial<CreateControlRequest>, options?: CallOptions & CallOptionsExt): Promise<Control>;
  /**
   * Deletes a Control.
   *
   * If the [Control][google.cloud.retail.v2beta.Control] to delete does not
   * exist, a NOT_FOUND error is returned.
   */
  deleteControl(request: DeepPartial<DeleteControlRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Updates a Control.
   *
   * [Control][google.cloud.retail.v2beta.Control] cannot be set to a different
   * oneof field, if so an INVALID_ARGUMENT is returned. If the
   * [Control][google.cloud.retail.v2beta.Control] to update does not exist, a
   * NOT_FOUND error is returned.
   */
  updateControl(request: DeepPartial<UpdateControlRequest>, options?: CallOptions & CallOptionsExt): Promise<Control>;
  /** Gets a Control. */
  getControl(request: DeepPartial<GetControlRequest>, options?: CallOptions & CallOptionsExt): Promise<Control>;
  /**
   * Lists all Controls by their parent
   * [Catalog][google.cloud.retail.v2beta.Catalog].
   */
  listControls(
    request: DeepPartial<ListControlsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListControlsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
