// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2beta/product_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { LocalInventory } from "./common.js";
import { ImportProductsRequest } from "./import_config.js";
import { Product } from "./product.js";
import { PurgeProductsRequest } from "./purge_config.js";

export const protobufPackage = "google.cloud.retail.v2beta";

/**
 * Request message for
 * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
 * method.
 */
export interface CreateProductRequest {
  /**
   * Required. The parent catalog resource name, such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch`.
   */
  parent: string;
  /** Required. The [Product][google.cloud.retail.v2beta.Product] to create. */
  product:
    | Product
    | undefined;
  /**
   * Required. The ID to use for the
   * [Product][google.cloud.retail.v2beta.Product], which will become the final
   * component of the [Product.name][google.cloud.retail.v2beta.Product.name].
   *
   * If the caller does not have permission to create the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   *
   * This field must be unique among all
   * [Product][google.cloud.retail.v2beta.Product]s with the same
   * [parent][google.cloud.retail.v2beta.CreateProductRequest.parent].
   * Otherwise, an ALREADY_EXISTS error is returned.
   *
   * This field must be a UTF-8 encoded string with a length limit of 128
   * characters. Otherwise, an INVALID_ARGUMENT error is returned.
   */
  productId: string;
}

/**
 * Request message for
 * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
 * method.
 */
export interface GetProductRequest {
  /**
   * Required. Full resource name of
   * [Product][google.cloud.retail.v2beta.Product], such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id`.
   *
   * If the caller does not have permission to access the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   *
   * If the requested [Product][google.cloud.retail.v2beta.Product] does not
   * exist, a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
 * method.
 */
export interface UpdateProductRequest {
  /**
   * Required. The product to update/create.
   *
   * If the caller does not have permission to update the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [Product][google.cloud.retail.v2beta.Product] to update does not
   * exist and
   * [allow_missing][google.cloud.retail.v2beta.UpdateProductRequest.allow_missing]
   * is not set, a NOT_FOUND error is returned.
   */
  product:
    | Product
    | undefined;
  /**
   * Indicates which fields in the provided
   * [Product][google.cloud.retail.v2beta.Product] to update. The immutable and
   * output only fields are NOT supported. If not set, all supported fields (the
   * fields that are neither immutable nor output only) are updated.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned.
   *
   * The attribute key can be updated by setting the mask path as
   * "attributes.${key_name}". If a key name is present in the mask but not in
   * the patching product from the request, this key will be deleted after the
   * update.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the [Product][google.cloud.retail.v2beta.Product] is
   * not found, a new [Product][google.cloud.retail.v2beta.Product] will be
   * created. In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

/**
 * Request message for
 * [ProductService.DeleteProduct][google.cloud.retail.v2beta.ProductService.DeleteProduct]
 * method.
 */
export interface DeleteProductRequest {
  /**
   * Required. Full resource name of
   * [Product][google.cloud.retail.v2beta.Product], such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id`.
   *
   * If the caller does not have permission to delete the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [Product][google.cloud.retail.v2beta.Product] to delete does not
   * exist, a NOT_FOUND error is returned.
   *
   * The [Product][google.cloud.retail.v2beta.Product] to delete can neither be
   * a
   * [Product.Type.COLLECTION][google.cloud.retail.v2beta.Product.Type.COLLECTION]
   * [Product][google.cloud.retail.v2beta.Product] member nor a
   * [Product.Type.PRIMARY][google.cloud.retail.v2beta.Product.Type.PRIMARY]
   * [Product][google.cloud.retail.v2beta.Product] with more than one
   * [variants][google.cloud.retail.v2beta.Product.Type.VARIANT]. Otherwise, an
   * INVALID_ARGUMENT error is returned.
   *
   * All inventory information for the named
   * [Product][google.cloud.retail.v2beta.Product] will be deleted.
   */
  name: string;
}

/**
 * Request message for
 * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts]
 * method.
 */
export interface ListProductsRequest {
  /**
   * Required. The parent branch resource name, such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/0`. Use
   * `default_branch` as the branch ID, to list products under the default
   * branch.
   *
   * If the caller does not have permission to list
   * [Product][google.cloud.retail.v2beta.Product]s under this branch,
   * regardless of whether or not this branch exists, a PERMISSION_DENIED error
   * is returned.
   */
  parent: string;
  /**
   * Maximum number of [Product][google.cloud.retail.v2beta.Product]s to return.
   * If unspecified, defaults to 100. The maximum allowed value is 1000. Values
   * above 1000 will be coerced to 1000.
   *
   * If this field is negative, an INVALID_ARGUMENT error is returned.
   */
  pageSize: number;
  /**
   * A page token
   * [ListProductsResponse.next_page_token][google.cloud.retail.v2beta.ListProductsResponse.next_page_token],
   * received from a previous
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts]
   * must match the call that provided the page token. Otherwise, an
   * INVALID_ARGUMENT error is returned.
   */
  pageToken: string;
  /**
   * A filter to apply on the list results. Supported features:
   *
   * * List all the products under the parent branch if
   * [filter][google.cloud.retail.v2beta.ListProductsRequest.filter] is unset.
   * * List
   * [Product.Type.VARIANT][google.cloud.retail.v2beta.Product.Type.VARIANT]
   * [Product][google.cloud.retail.v2beta.Product]s sharing the same
   *   [Product.Type.PRIMARY][google.cloud.retail.v2beta.Product.Type.PRIMARY]
   *   [Product][google.cloud.retail.v2beta.Product]. For example:
   *     `primary_product_id = "some_product_id"`
   * * List [Product][google.cloud.retail.v2beta.Product]s bundled in a
   * [Product.Type.COLLECTION][google.cloud.retail.v2beta.Product.Type.COLLECTION]
   * [Product][google.cloud.retail.v2beta.Product].
   *   For example:
   *     `collection_product_id = "some_product_id"`
   * * List [Product][google.cloud.retail.v2beta.Product]s with a partibular
   * type. For example:
   *     `type = "PRIMARY"`
   *     `type = "VARIANT"`
   *     `type = "COLLECTION"`
   *
   * If the field is unrecognizable, an INVALID_ARGUMENT error is returned.
   *
   * If the specified
   * [Product.Type.PRIMARY][google.cloud.retail.v2beta.Product.Type.PRIMARY]
   * [Product][google.cloud.retail.v2beta.Product] or
   * [Product.Type.COLLECTION][google.cloud.retail.v2beta.Product.Type.COLLECTION]
   * [Product][google.cloud.retail.v2beta.Product] does not exist, a NOT_FOUND
   * error is returned.
   */
  filter: string;
  /**
   * The fields of [Product][google.cloud.retail.v2beta.Product] to return in
   * the responses. If not set or empty, the following fields are returned:
   *
   * * [Product.name][google.cloud.retail.v2beta.Product.name]
   * * [Product.id][google.cloud.retail.v2beta.Product.id]
   * * [Product.title][google.cloud.retail.v2beta.Product.title]
   * * [Product.uri][google.cloud.retail.v2beta.Product.uri]
   * * [Product.images][google.cloud.retail.v2beta.Product.images]
   * * [Product.price_info][google.cloud.retail.v2beta.Product.price_info]
   * * [Product.brands][google.cloud.retail.v2beta.Product.brands]
   *
   * If "*" is provided, all fields are returned.
   * [Product.name][google.cloud.retail.v2beta.Product.name] is always returned
   * no matter what mask is set.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned.
   */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts]
 * method.
 */
export interface ListProductsResponse {
  /** The [Product][google.cloud.retail.v2beta.Product]s. */
  products: Product[];
  /**
   * A token that can be sent as
   * [ListProductsRequest.page_token][google.cloud.retail.v2beta.ListProductsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ProductService.SetInventory][google.cloud.retail.v2beta.ProductService.SetInventory]
 * method.
 */
export interface SetInventoryRequest {
  /**
   * Required. The inventory information to update. The allowable fields to
   * update are:
   *
   * * [Product.price_info][google.cloud.retail.v2beta.Product.price_info]
   * * [Product.availability][google.cloud.retail.v2beta.Product.availability]
   * * [Product.available_quantity][google.cloud.retail.v2beta.Product.available_quantity]
   * * [Product.fulfillment_info][google.cloud.retail.v2beta.Product.fulfillment_info]
   * The updated inventory fields must be specified in
   * [SetInventoryRequest.set_mask][google.cloud.retail.v2beta.SetInventoryRequest.set_mask].
   *
   * If
   * [SetInventoryRequest.inventory.name][google.cloud.retail.v2beta.Product.name]
   * is empty or invalid, an INVALID_ARGUMENT error is returned.
   *
   * If the caller does not have permission to update the
   * [Product][google.cloud.retail.v2beta.Product] named in
   * [Product.name][google.cloud.retail.v2beta.Product.name], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [Product][google.cloud.retail.v2beta.Product] to update does not
   * have existing inventory information, the provided inventory information
   * will be inserted.
   *
   * If the [Product][google.cloud.retail.v2beta.Product] to update has existing
   * inventory information, the provided inventory information will be merged
   * while respecting the last update time for each inventory field, using the
   * provided or default value for
   * [SetInventoryRequest.set_time][google.cloud.retail.v2beta.SetInventoryRequest.set_time].
   *
   * The caller can replace place IDs for a subset of fulfillment types in the
   * following ways:
   *
   * * Adds "fulfillment_info" in
   * [SetInventoryRequest.set_mask][google.cloud.retail.v2beta.SetInventoryRequest.set_mask]
   * * Specifies only the desired fulfillment types and corresponding place IDs
   * to update in
   * [SetInventoryRequest.inventory.fulfillment_info][google.cloud.retail.v2beta.Product.fulfillment_info]
   *
   * The caller can clear all place IDs from a subset of fulfillment types in
   * the following ways:
   *
   * * Adds "fulfillment_info" in
   * [SetInventoryRequest.set_mask][google.cloud.retail.v2beta.SetInventoryRequest.set_mask]
   * * Specifies only the desired fulfillment types to clear in
   * [SetInventoryRequest.inventory.fulfillment_info][google.cloud.retail.v2beta.Product.fulfillment_info]
   * * Checks that only the desired fulfillment info types have empty
   * [SetInventoryRequest.inventory.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids]
   *
   * The last update time is recorded for the following inventory fields:
   * * [Product.price_info][google.cloud.retail.v2beta.Product.price_info]
   * * [Product.availability][google.cloud.retail.v2beta.Product.availability]
   * * [Product.available_quantity][google.cloud.retail.v2beta.Product.available_quantity]
   * * [Product.fulfillment_info][google.cloud.retail.v2beta.Product.fulfillment_info]
   *
   * If a full overwrite of inventory information while ignoring timestamps is
   * needed,
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * should be invoked instead.
   */
  inventory:
    | Product
    | undefined;
  /**
   * Indicates which inventory fields in the provided
   * [Product][google.cloud.retail.v2beta.Product] to update.
   *
   * At least one field must be provided.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned and the entire update will be ignored.
   */
  setMask:
    | string[]
    | undefined;
  /**
   * The time when the request is issued, used to prevent
   * out-of-order updates on inventory fields with the last update time
   * recorded. If not provided, the internal system time will be used.
   */
  setTime:
    | Date
    | undefined;
  /**
   * If set to true, and the [Product][google.cloud.retail.v2beta.Product] with
   * name [Product.name][google.cloud.retail.v2beta.Product.name] is not found,
   * the inventory update will still be processed and retained for at most 1 day
   * until the [Product][google.cloud.retail.v2beta.Product] is created. If set
   * to false, a NOT_FOUND error is returned if the
   * [Product][google.cloud.retail.v2beta.Product] is not found.
   */
  allowMissing: boolean;
}

/**
 * Metadata related to the progress of the SetInventory operation.
 * Currently empty because there is no meaningful metadata populated from the
 * [ProductService.SetInventory][google.cloud.retail.v2beta.ProductService.SetInventory]
 * method.
 */
export interface SetInventoryMetadata {
}

/**
 * Response of the SetInventoryRequest.  Currently empty because
 * there is no meaningful response populated from the
 * [ProductService.SetInventory][google.cloud.retail.v2beta.ProductService.SetInventory]
 * method.
 */
export interface SetInventoryResponse {
}

/**
 * Request message for
 * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces]
 * method.
 */
export interface AddFulfillmentPlacesRequest {
  /**
   * Required. Full resource name of
   * [Product][google.cloud.retail.v2beta.Product], such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id`.
   *
   * If the caller does not have permission to access the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   */
  product: string;
  /**
   * Required. The fulfillment type, including commonly used types (such as
   * pickup in store and same day delivery), and custom types.
   *
   * Supported values:
   *
   * * "pickup-in-store"
   * * "ship-to-store"
   * * "same-day-delivery"
   * * "next-day-delivery"
   * * "custom-type-1"
   * * "custom-type-2"
   * * "custom-type-3"
   * * "custom-type-4"
   * * "custom-type-5"
   *
   * If this field is set to an invalid value other than these, an
   * INVALID_ARGUMENT error is returned.
   *
   * This field directly corresponds to
   * [Product.fulfillment_info.type][google.cloud.retail.v2beta.FulfillmentInfo.type].
   */
  type: string;
  /**
   * Required. The IDs for this
   * [type][google.cloud.retail.v2beta.AddFulfillmentPlacesRequest.type], such
   * as the store IDs for "pickup-in-store" or the region IDs for
   * "same-day-delivery" to be added for this
   * [type][google.cloud.retail.v2beta.AddFulfillmentPlacesRequest.type].
   * Duplicate IDs will be automatically ignored.
   *
   * At least 1 value is required, and a maximum of 2000 values are allowed.
   * Each value must be a string with a length limit of 10 characters, matching
   * the pattern `[a-zA-Z0-9_-]+`, such as "store1" or "REGION-2". Otherwise, an
   * INVALID_ARGUMENT error is returned.
   *
   * If the total number of place IDs exceeds 2000 for this
   * [type][google.cloud.retail.v2beta.AddFulfillmentPlacesRequest.type] after
   * adding, then the update will be rejected.
   */
  placeIds: string[];
  /**
   * The time when the fulfillment updates are issued, used to prevent
   * out-of-order updates on fulfillment information. If not provided, the
   * internal system time will be used.
   */
  addTime:
    | Date
    | undefined;
  /**
   * If set to true, and the [Product][google.cloud.retail.v2beta.Product] is
   * not found, the fulfillment information will still be processed and retained
   * for at most 1 day and processed once the
   * [Product][google.cloud.retail.v2beta.Product] is created. If set to false,
   * a NOT_FOUND error is returned if the
   * [Product][google.cloud.retail.v2beta.Product] is not found.
   */
  allowMissing: boolean;
}

/**
 * Metadata related to the progress of the AddFulfillmentPlaces operation.
 * Currently empty because there is no meaningful metadata populated from the
 * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces]
 * method.
 */
export interface AddFulfillmentPlacesMetadata {
}

/**
 * Response of the AddFulfillmentPlacesRequest.  Currently empty because
 * there is no meaningful response populated from the
 * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces]
 * method.
 */
export interface AddFulfillmentPlacesResponse {
}

/**
 * Request message for
 * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
 * method.
 */
export interface AddLocalInventoriesRequest {
  /**
   * Required. Full resource name of
   * [Product][google.cloud.retail.v2beta.Product], such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id`.
   *
   * If the caller does not have permission to access the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   */
  product: string;
  /**
   * Required. A list of inventory information at difference places. Each place
   * is identified by its place ID. At most 3000 inventories are allowed per
   * request.
   */
  localInventories: LocalInventory[];
  /**
   * Indicates which inventory fields in the provided list of
   * [LocalInventory][google.cloud.retail.v2beta.LocalInventory] to update. The
   * field is updated to the provided value.
   *
   * If a field is set while the place does not have a previous local inventory,
   * the local inventory at that store is created.
   *
   * If a field is set while the value of that field is not provided, the
   * original field value, if it exists, is deleted.
   *
   * If the mask is not set or set with empty paths, all inventory fields will
   * be updated.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned and the entire update will be ignored.
   */
  addMask:
    | string[]
    | undefined;
  /**
   * The time when the inventory updates are issued. Used to prevent
   * out-of-order updates on local inventory fields. If not provided, the
   * internal system time will be used.
   */
  addTime:
    | Date
    | undefined;
  /**
   * If set to true, and the [Product][google.cloud.retail.v2beta.Product] is
   * not found, the local inventory will still be processed and retained for at
   * most 1 day and processed once the
   * [Product][google.cloud.retail.v2beta.Product] is created. If set to false,
   * a NOT_FOUND error is returned if the
   * [Product][google.cloud.retail.v2beta.Product] is not found.
   */
  allowMissing: boolean;
}

/**
 * Metadata related to the progress of the AddLocalInventories operation.
 * Currently empty because there is no meaningful metadata populated from the
 * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
 * method.
 */
export interface AddLocalInventoriesMetadata {
}

/**
 * Response of the
 * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
 * API.  Currently empty because there is no meaningful response populated from
 * the
 * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
 * method.
 */
export interface AddLocalInventoriesResponse {
}

/**
 * Request message for
 * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
 * method.
 */
export interface RemoveLocalInventoriesRequest {
  /**
   * Required. Full resource name of
   * [Product][google.cloud.retail.v2beta.Product], such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id`.
   *
   * If the caller does not have permission to access the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   */
  product: string;
  /**
   * Required. A list of place IDs to have their inventory deleted.
   * At most 3000 place IDs are allowed per request.
   */
  placeIds: string[];
  /**
   * The time when the inventory deletions are issued. Used to prevent
   * out-of-order updates and deletions on local inventory fields. If not
   * provided, the internal system time will be used.
   */
  removeTime:
    | Date
    | undefined;
  /**
   * If set to true, and the [Product][google.cloud.retail.v2beta.Product] is
   * not found, the local inventory removal request will still be processed and
   * retained for at most 1 day and processed once the
   * [Product][google.cloud.retail.v2beta.Product] is created. If set to false,
   * a NOT_FOUND error is returned if the
   * [Product][google.cloud.retail.v2beta.Product] is not found.
   */
  allowMissing: boolean;
}

/**
 * Metadata related to the progress of the RemoveLocalInventories operation.
 * Currently empty because there is no meaningful metadata populated from the
 * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
 * method.
 */
export interface RemoveLocalInventoriesMetadata {
}

/**
 * Response of the
 * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
 * API.  Currently empty because there is no meaningful response populated from
 * the
 * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
 * method.
 */
export interface RemoveLocalInventoriesResponse {
}

/**
 * Request message for
 * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces]
 * method.
 */
export interface RemoveFulfillmentPlacesRequest {
  /**
   * Required. Full resource name of
   * [Product][google.cloud.retail.v2beta.Product], such as
   * `projects/* /locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id`.
   *
   * If the caller does not have permission to access the
   * [Product][google.cloud.retail.v2beta.Product], regardless of whether or not
   * it exists, a PERMISSION_DENIED error is returned.
   */
  product: string;
  /**
   * Required. The fulfillment type, including commonly used types (such as
   * pickup in store and same day delivery), and custom types.
   *
   * Supported values:
   *
   * * "pickup-in-store"
   * * "ship-to-store"
   * * "same-day-delivery"
   * * "next-day-delivery"
   * * "custom-type-1"
   * * "custom-type-2"
   * * "custom-type-3"
   * * "custom-type-4"
   * * "custom-type-5"
   *
   * If this field is set to an invalid value other than these, an
   * INVALID_ARGUMENT error is returned.
   *
   * This field directly corresponds to
   * [Product.fulfillment_info.type][google.cloud.retail.v2beta.FulfillmentInfo.type].
   */
  type: string;
  /**
   * Required. The IDs for this
   * [type][google.cloud.retail.v2beta.RemoveFulfillmentPlacesRequest.type],
   * such as the store IDs for "pickup-in-store" or the region IDs for
   * "same-day-delivery", to be removed for this
   * [type][google.cloud.retail.v2beta.RemoveFulfillmentPlacesRequest.type].
   *
   * At least 1 value is required, and a maximum of 2000 values are allowed.
   * Each value must be a string with a length limit of 10 characters, matching
   * the pattern `[a-zA-Z0-9_-]+`, such as "store1" or "REGION-2". Otherwise, an
   * INVALID_ARGUMENT error is returned.
   */
  placeIds: string[];
  /**
   * The time when the fulfillment updates are issued, used to prevent
   * out-of-order updates on fulfillment information. If not provided, the
   * internal system time will be used.
   */
  removeTime:
    | Date
    | undefined;
  /**
   * If set to true, and the [Product][google.cloud.retail.v2beta.Product] is
   * not found, the fulfillment information will still be processed and retained
   * for at most 1 day and processed once the
   * [Product][google.cloud.retail.v2beta.Product] is created. If set to false,
   * a NOT_FOUND error is returned if the
   * [Product][google.cloud.retail.v2beta.Product] is not found.
   */
  allowMissing: boolean;
}

/**
 * Metadata related to the progress of the RemoveFulfillmentPlaces operation.
 * Currently empty because there is no meaningful metadata populated from the
 * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces]
 * method.
 */
export interface RemoveFulfillmentPlacesMetadata {
}

/**
 * Response of the RemoveFulfillmentPlacesRequest. Currently empty because there
 * is no meaningful response populated from the
 * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces]
 * method.
 */
export interface RemoveFulfillmentPlacesResponse {
}

function createBaseCreateProductRequest(): CreateProductRequest {
  return { parent: "", product: undefined, productId: "" };
}

export const CreateProductRequest: MessageFns<CreateProductRequest> = {
  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(18).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(26).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.productId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProductRequest>): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProductRequest>): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.parent = object.parent ?? "";
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    message.productId = object.productId ?? "";
    return message;
  },
};

function createBaseGetProductRequest(): GetProductRequest {
  return { name: "" };
}

export const GetProductRequest: MessageFns<GetProductRequest> = {
  encode(message: GetProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProductRequest>): GetProductRequest {
    return GetProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProductRequest>): GetProductRequest {
    const message = createBaseGetProductRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateProductRequest(): UpdateProductRequest {
  return { product: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateProductRequest: MessageFns<UpdateProductRequest> = {
  encode(message: UpdateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductRequest {
    return {
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateProductRequest): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProductRequest>): UpdateProductRequest {
    return UpdateProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProductRequest>): UpdateProductRequest {
    const message = createBaseUpdateProductRequest();
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteProductRequest(): DeleteProductRequest {
  return { name: "" };
}

export const DeleteProductRequest: MessageFns<DeleteProductRequest> = {
  encode(message: DeleteProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProductRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProductRequest>): DeleteProductRequest {
    return DeleteProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProductRequest>): DeleteProductRequest {
    const message = createBaseDeleteProductRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListProductsRequest(): ListProductsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", readMask: undefined };
}

export const ListProductsRequest: MessageFns<ListProductsRequest> = {
  encode(message: ListProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListProductsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListProductsRequest>): ListProductsRequest {
    return ListProductsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProductsRequest>): ListProductsRequest {
    const message = createBaseListProductsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListProductsResponse(): ListProductsResponse {
  return { products: [], nextPageToken: "" };
}

export const ListProductsResponse: MessageFns<ListProductsResponse> = {
  encode(message: ListProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProductsResponse>): ListProductsResponse {
    return ListProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProductsResponse>): ListProductsResponse {
    const message = createBaseListProductsResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSetInventoryRequest(): SetInventoryRequest {
  return { inventory: undefined, setMask: undefined, setTime: undefined, allowMissing: false };
}

export const SetInventoryRequest: MessageFns<SetInventoryRequest> = {
  encode(message: SetInventoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inventory !== undefined) {
      Product.encode(message.inventory, writer.uint32(10).fork()).join();
    }
    if (message.setMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.setMask), writer.uint32(18).fork()).join();
    }
    if (message.setTime !== undefined) {
      Timestamp.encode(toTimestamp(message.setTime), writer.uint32(26).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(32).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInventoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInventoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inventory = Product.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.setMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.setTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInventoryRequest {
    return {
      inventory: isSet(object.inventory) ? Product.fromJSON(object.inventory) : undefined,
      setMask: isSet(object.setMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.setMask)) : undefined,
      setTime: isSet(object.setTime) ? fromJsonTimestamp(object.setTime) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: SetInventoryRequest): unknown {
    const obj: any = {};
    if (message.inventory !== undefined) {
      obj.inventory = Product.toJSON(message.inventory);
    }
    if (message.setMask !== undefined) {
      obj.setMask = FieldMask.toJSON(FieldMask.wrap(message.setMask));
    }
    if (message.setTime !== undefined) {
      obj.setTime = message.setTime.toISOString();
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<SetInventoryRequest>): SetInventoryRequest {
    return SetInventoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInventoryRequest>): SetInventoryRequest {
    const message = createBaseSetInventoryRequest();
    message.inventory = (object.inventory !== undefined && object.inventory !== null)
      ? Product.fromPartial(object.inventory)
      : undefined;
    message.setMask = object.setMask ?? undefined;
    message.setTime = object.setTime ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseSetInventoryMetadata(): SetInventoryMetadata {
  return {};
}

export const SetInventoryMetadata: MessageFns<SetInventoryMetadata> = {
  encode(_: SetInventoryMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInventoryMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInventoryMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetInventoryMetadata {
    return {};
  },

  toJSON(_: SetInventoryMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SetInventoryMetadata>): SetInventoryMetadata {
    return SetInventoryMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SetInventoryMetadata>): SetInventoryMetadata {
    const message = createBaseSetInventoryMetadata();
    return message;
  },
};

function createBaseSetInventoryResponse(): SetInventoryResponse {
  return {};
}

export const SetInventoryResponse: MessageFns<SetInventoryResponse> = {
  encode(_: SetInventoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInventoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInventoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetInventoryResponse {
    return {};
  },

  toJSON(_: SetInventoryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SetInventoryResponse>): SetInventoryResponse {
    return SetInventoryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SetInventoryResponse>): SetInventoryResponse {
    const message = createBaseSetInventoryResponse();
    return message;
  },
};

function createBaseAddFulfillmentPlacesRequest(): AddFulfillmentPlacesRequest {
  return { product: "", type: "", placeIds: [], addTime: undefined, allowMissing: false };
}

export const AddFulfillmentPlacesRequest: MessageFns<AddFulfillmentPlacesRequest> = {
  encode(message: AddFulfillmentPlacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== "") {
      writer.uint32(10).string(message.product);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.placeIds) {
      writer.uint32(26).string(v!);
    }
    if (message.addTime !== undefined) {
      Timestamp.encode(toTimestamp(message.addTime), writer.uint32(34).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(40).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddFulfillmentPlacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddFulfillmentPlacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.placeIds.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.addTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddFulfillmentPlacesRequest {
    return {
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      placeIds: globalThis.Array.isArray(object?.placeIds) ? object.placeIds.map((e: any) => globalThis.String(e)) : [],
      addTime: isSet(object.addTime) ? fromJsonTimestamp(object.addTime) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: AddFulfillmentPlacesRequest): unknown {
    const obj: any = {};
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.placeIds?.length) {
      obj.placeIds = message.placeIds;
    }
    if (message.addTime !== undefined) {
      obj.addTime = message.addTime.toISOString();
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<AddFulfillmentPlacesRequest>): AddFulfillmentPlacesRequest {
    return AddFulfillmentPlacesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddFulfillmentPlacesRequest>): AddFulfillmentPlacesRequest {
    const message = createBaseAddFulfillmentPlacesRequest();
    message.product = object.product ?? "";
    message.type = object.type ?? "";
    message.placeIds = object.placeIds?.map((e) => e) || [];
    message.addTime = object.addTime ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseAddFulfillmentPlacesMetadata(): AddFulfillmentPlacesMetadata {
  return {};
}

export const AddFulfillmentPlacesMetadata: MessageFns<AddFulfillmentPlacesMetadata> = {
  encode(_: AddFulfillmentPlacesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddFulfillmentPlacesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddFulfillmentPlacesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddFulfillmentPlacesMetadata {
    return {};
  },

  toJSON(_: AddFulfillmentPlacesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddFulfillmentPlacesMetadata>): AddFulfillmentPlacesMetadata {
    return AddFulfillmentPlacesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddFulfillmentPlacesMetadata>): AddFulfillmentPlacesMetadata {
    const message = createBaseAddFulfillmentPlacesMetadata();
    return message;
  },
};

function createBaseAddFulfillmentPlacesResponse(): AddFulfillmentPlacesResponse {
  return {};
}

export const AddFulfillmentPlacesResponse: MessageFns<AddFulfillmentPlacesResponse> = {
  encode(_: AddFulfillmentPlacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddFulfillmentPlacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddFulfillmentPlacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddFulfillmentPlacesResponse {
    return {};
  },

  toJSON(_: AddFulfillmentPlacesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddFulfillmentPlacesResponse>): AddFulfillmentPlacesResponse {
    return AddFulfillmentPlacesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddFulfillmentPlacesResponse>): AddFulfillmentPlacesResponse {
    const message = createBaseAddFulfillmentPlacesResponse();
    return message;
  },
};

function createBaseAddLocalInventoriesRequest(): AddLocalInventoriesRequest {
  return { product: "", localInventories: [], addMask: undefined, addTime: undefined, allowMissing: false };
}

export const AddLocalInventoriesRequest: MessageFns<AddLocalInventoriesRequest> = {
  encode(message: AddLocalInventoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== "") {
      writer.uint32(10).string(message.product);
    }
    for (const v of message.localInventories) {
      LocalInventory.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.addMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.addMask), writer.uint32(34).fork()).join();
    }
    if (message.addTime !== undefined) {
      Timestamp.encode(toTimestamp(message.addTime), writer.uint32(42).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(48).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddLocalInventoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLocalInventoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.localInventories.push(LocalInventory.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.addMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.addTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLocalInventoriesRequest {
    return {
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      localInventories: globalThis.Array.isArray(object?.localInventories)
        ? object.localInventories.map((e: any) => LocalInventory.fromJSON(e))
        : [],
      addMask: isSet(object.addMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.addMask)) : undefined,
      addTime: isSet(object.addTime) ? fromJsonTimestamp(object.addTime) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: AddLocalInventoriesRequest): unknown {
    const obj: any = {};
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.localInventories?.length) {
      obj.localInventories = message.localInventories.map((e) => LocalInventory.toJSON(e));
    }
    if (message.addMask !== undefined) {
      obj.addMask = FieldMask.toJSON(FieldMask.wrap(message.addMask));
    }
    if (message.addTime !== undefined) {
      obj.addTime = message.addTime.toISOString();
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<AddLocalInventoriesRequest>): AddLocalInventoriesRequest {
    return AddLocalInventoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddLocalInventoriesRequest>): AddLocalInventoriesRequest {
    const message = createBaseAddLocalInventoriesRequest();
    message.product = object.product ?? "";
    message.localInventories = object.localInventories?.map((e) => LocalInventory.fromPartial(e)) || [];
    message.addMask = object.addMask ?? undefined;
    message.addTime = object.addTime ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseAddLocalInventoriesMetadata(): AddLocalInventoriesMetadata {
  return {};
}

export const AddLocalInventoriesMetadata: MessageFns<AddLocalInventoriesMetadata> = {
  encode(_: AddLocalInventoriesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddLocalInventoriesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLocalInventoriesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddLocalInventoriesMetadata {
    return {};
  },

  toJSON(_: AddLocalInventoriesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddLocalInventoriesMetadata>): AddLocalInventoriesMetadata {
    return AddLocalInventoriesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddLocalInventoriesMetadata>): AddLocalInventoriesMetadata {
    const message = createBaseAddLocalInventoriesMetadata();
    return message;
  },
};

function createBaseAddLocalInventoriesResponse(): AddLocalInventoriesResponse {
  return {};
}

export const AddLocalInventoriesResponse: MessageFns<AddLocalInventoriesResponse> = {
  encode(_: AddLocalInventoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddLocalInventoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLocalInventoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddLocalInventoriesResponse {
    return {};
  },

  toJSON(_: AddLocalInventoriesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddLocalInventoriesResponse>): AddLocalInventoriesResponse {
    return AddLocalInventoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddLocalInventoriesResponse>): AddLocalInventoriesResponse {
    const message = createBaseAddLocalInventoriesResponse();
    return message;
  },
};

function createBaseRemoveLocalInventoriesRequest(): RemoveLocalInventoriesRequest {
  return { product: "", placeIds: [], removeTime: undefined, allowMissing: false };
}

export const RemoveLocalInventoriesRequest: MessageFns<RemoveLocalInventoriesRequest> = {
  encode(message: RemoveLocalInventoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== "") {
      writer.uint32(10).string(message.product);
    }
    for (const v of message.placeIds) {
      writer.uint32(18).string(v!);
    }
    if (message.removeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.removeTime), writer.uint32(42).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLocalInventoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLocalInventoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.placeIds.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.removeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLocalInventoriesRequest {
    return {
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      placeIds: globalThis.Array.isArray(object?.placeIds) ? object.placeIds.map((e: any) => globalThis.String(e)) : [],
      removeTime: isSet(object.removeTime) ? fromJsonTimestamp(object.removeTime) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: RemoveLocalInventoriesRequest): unknown {
    const obj: any = {};
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.placeIds?.length) {
      obj.placeIds = message.placeIds;
    }
    if (message.removeTime !== undefined) {
      obj.removeTime = message.removeTime.toISOString();
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveLocalInventoriesRequest>): RemoveLocalInventoriesRequest {
    return RemoveLocalInventoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveLocalInventoriesRequest>): RemoveLocalInventoriesRequest {
    const message = createBaseRemoveLocalInventoriesRequest();
    message.product = object.product ?? "";
    message.placeIds = object.placeIds?.map((e) => e) || [];
    message.removeTime = object.removeTime ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseRemoveLocalInventoriesMetadata(): RemoveLocalInventoriesMetadata {
  return {};
}

export const RemoveLocalInventoriesMetadata: MessageFns<RemoveLocalInventoriesMetadata> = {
  encode(_: RemoveLocalInventoriesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLocalInventoriesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLocalInventoriesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLocalInventoriesMetadata {
    return {};
  },

  toJSON(_: RemoveLocalInventoriesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLocalInventoriesMetadata>): RemoveLocalInventoriesMetadata {
    return RemoveLocalInventoriesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLocalInventoriesMetadata>): RemoveLocalInventoriesMetadata {
    const message = createBaseRemoveLocalInventoriesMetadata();
    return message;
  },
};

function createBaseRemoveLocalInventoriesResponse(): RemoveLocalInventoriesResponse {
  return {};
}

export const RemoveLocalInventoriesResponse: MessageFns<RemoveLocalInventoriesResponse> = {
  encode(_: RemoveLocalInventoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLocalInventoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLocalInventoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLocalInventoriesResponse {
    return {};
  },

  toJSON(_: RemoveLocalInventoriesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLocalInventoriesResponse>): RemoveLocalInventoriesResponse {
    return RemoveLocalInventoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLocalInventoriesResponse>): RemoveLocalInventoriesResponse {
    const message = createBaseRemoveLocalInventoriesResponse();
    return message;
  },
};

function createBaseRemoveFulfillmentPlacesRequest(): RemoveFulfillmentPlacesRequest {
  return { product: "", type: "", placeIds: [], removeTime: undefined, allowMissing: false };
}

export const RemoveFulfillmentPlacesRequest: MessageFns<RemoveFulfillmentPlacesRequest> = {
  encode(message: RemoveFulfillmentPlacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== "") {
      writer.uint32(10).string(message.product);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.placeIds) {
      writer.uint32(26).string(v!);
    }
    if (message.removeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.removeTime), writer.uint32(34).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(40).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFulfillmentPlacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFulfillmentPlacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.placeIds.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.removeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFulfillmentPlacesRequest {
    return {
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      placeIds: globalThis.Array.isArray(object?.placeIds) ? object.placeIds.map((e: any) => globalThis.String(e)) : [],
      removeTime: isSet(object.removeTime) ? fromJsonTimestamp(object.removeTime) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: RemoveFulfillmentPlacesRequest): unknown {
    const obj: any = {};
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.placeIds?.length) {
      obj.placeIds = message.placeIds;
    }
    if (message.removeTime !== undefined) {
      obj.removeTime = message.removeTime.toISOString();
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveFulfillmentPlacesRequest>): RemoveFulfillmentPlacesRequest {
    return RemoveFulfillmentPlacesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveFulfillmentPlacesRequest>): RemoveFulfillmentPlacesRequest {
    const message = createBaseRemoveFulfillmentPlacesRequest();
    message.product = object.product ?? "";
    message.type = object.type ?? "";
    message.placeIds = object.placeIds?.map((e) => e) || [];
    message.removeTime = object.removeTime ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseRemoveFulfillmentPlacesMetadata(): RemoveFulfillmentPlacesMetadata {
  return {};
}

export const RemoveFulfillmentPlacesMetadata: MessageFns<RemoveFulfillmentPlacesMetadata> = {
  encode(_: RemoveFulfillmentPlacesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFulfillmentPlacesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFulfillmentPlacesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveFulfillmentPlacesMetadata {
    return {};
  },

  toJSON(_: RemoveFulfillmentPlacesMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveFulfillmentPlacesMetadata>): RemoveFulfillmentPlacesMetadata {
    return RemoveFulfillmentPlacesMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveFulfillmentPlacesMetadata>): RemoveFulfillmentPlacesMetadata {
    const message = createBaseRemoveFulfillmentPlacesMetadata();
    return message;
  },
};

function createBaseRemoveFulfillmentPlacesResponse(): RemoveFulfillmentPlacesResponse {
  return {};
}

export const RemoveFulfillmentPlacesResponse: MessageFns<RemoveFulfillmentPlacesResponse> = {
  encode(_: RemoveFulfillmentPlacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFulfillmentPlacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFulfillmentPlacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveFulfillmentPlacesResponse {
    return {};
  },

  toJSON(_: RemoveFulfillmentPlacesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveFulfillmentPlacesResponse>): RemoveFulfillmentPlacesResponse {
    return RemoveFulfillmentPlacesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveFulfillmentPlacesResponse>): RemoveFulfillmentPlacesResponse {
    const message = createBaseRemoveFulfillmentPlacesResponse();
    return message;
  },
};

/**
 * Service for ingesting [Product][google.cloud.retail.v2beta.Product]
 * information of the customer's website.
 */
export type ProductServiceDefinition = typeof ProductServiceDefinition;
export const ProductServiceDefinition = {
  name: "ProductService",
  fullName: "google.cloud.retail.v2beta.ProductService",
  methods: {
    /** Creates a [Product][google.cloud.retail.v2beta.Product]. */
    createProduct: {
      name: "CreateProduct",
      requestType: CreateProductRequest,
      requestStream: false,
      responseType: Product,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              44,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              7,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              34,
              70,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a [Product][google.cloud.retail.v2beta.Product]. */
    getProduct: {
      name: "GetProduct",
      requestType: GetProductRequest,
      requestStream: false,
      responseType: Product,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a list of [Product][google.cloud.retail.v2beta.Product]s. */
    listProducts: {
      name: "ListProducts",
      requestType: ListProductsRequest,
      requestStream: false,
      responseType: ListProductsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a [Product][google.cloud.retail.v2beta.Product]. */
    updateProduct: {
      name: "UpdateProduct",
      requestType: UpdateProductRequest,
      requestStream: false,
      responseType: Product,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 112, 114, 111, 100, 117, 99, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              90,
              58,
              7,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              50,
              79,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Product][google.cloud.retail.v2beta.Product]. */
    deleteProduct: {
      name: "DeleteProduct",
      requestType: DeleteProductRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Permanently deletes all selected
     * [Product][google.cloud.retail.v2beta.Product]s under a branch.
     *
     * This process is asynchronous. If the request is valid, the removal will be
     * enqueued and processed offline. Depending on the number of
     * [Product][google.cloud.retail.v2beta.Product]s, this operation could take
     * hours to complete. Before the operation completes, some
     * [Product][google.cloud.retail.v2beta.Product]s may still be returned by
     * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
     * or
     * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
     *
     * Depending on the number of [Product][google.cloud.retail.v2beta.Product]s,
     * this operation could take hours to complete. To get a sample of
     * [Product][google.cloud.retail.v2beta.Product]s that would be deleted, set
     * [PurgeProductsRequest.force][google.cloud.retail.v2beta.PurgeProductsRequest.force]
     * to false.
     */
    purgeProducts: {
      name: "PurgeProducts",
      requestType: PurgeProductsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              100,
              10,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              48,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of multiple [Product][google.cloud.retail.v2beta.Product]s.
     *
     * Request processing may be synchronous.
     * Non-existing items are created.
     *
     * Note that it is possible for a subset of the
     * [Product][google.cloud.retail.v2beta.Product]s to be successfully updated.
     */
    importProducts: {
      name: "ImportProducts",
      requestType: ImportProductsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              94,
              10,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              41,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Updates inventory information for a
     * [Product][google.cloud.retail.v2beta.Product] while respecting the last
     * update timestamps of each inventory field.
     *
     * This process is asynchronous and does not require the
     * [Product][google.cloud.retail.v2beta.Product] to exist before updating
     * fulfillment information. If the request is valid, the update is enqueued
     * and processed downstream. As a consequence, when a response is returned,
     * updates are not immediately manifested in the
     * [Product][google.cloud.retail.v2beta.Product] queried by
     * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
     * or
     * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
     *
     * When inventory is updated with
     * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
     * and
     * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct],
     * the specified inventory field value(s) overwrite any existing value(s)
     * while ignoring the last update time for this field. Furthermore, the last
     * update times for the specified inventory fields are overwritten by the
     * times of the
     * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
     * or
     * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
     * request.
     *
     * If no inventory fields are set in
     * [CreateProductRequest.product][google.cloud.retail.v2beta.CreateProductRequest.product],
     * then any pre-existing inventory information for this product is used.
     *
     * If no inventory fields are set in
     * [SetInventoryRequest.set_mask][google.cloud.retail.v2beta.SetInventoryRequest.set_mask],
     * then any existing inventory information is preserved.
     *
     * Pre-existing inventory information can only be updated with
     * [ProductService.SetInventory][google.cloud.retail.v2beta.ProductService.SetInventory],
     * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces],
     * and
     * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces].
     *
     * The returned [Operation][google.longrunning.Operation]s is obsolete after
     * one day, and the [GetOperation][google.longrunning.Operations.GetOperation]
     * API returns `NOT_FOUND` afterwards.
     *
     * If conflicting updates are issued, the
     * [Operation][google.longrunning.Operation]s associated with the stale
     * updates are not marked as [done][google.longrunning.Operation.done] until
     * they are obsolete.
     */
    setInventory: {
      name: "SetInventory",
      requestType: SetInventoryRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              98,
              10,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              83,
              101,
              116,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              121,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              83,
              101,
              116,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              121,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 105, 110, 118, 101, 110, 116, 111, 114, 121, 44, 115, 101, 116, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              99,
              58,
              1,
              42,
              34,
              94,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              105,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * We recommend that you use the
     * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
     * method instead of the
     * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces]
     * method.
     * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
     * achieves the same results but provides more fine-grained control over
     * ingesting local inventory data.
     *
     * Incrementally adds place IDs to
     * [Product.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids].
     *
     * This process is asynchronous and does not require the
     * [Product][google.cloud.retail.v2beta.Product] to exist before updating
     * fulfillment information. If the request is valid, the update will be
     * enqueued and processed downstream. As a consequence, when a response is
     * returned, the added place IDs are not immediately manifested in the
     * [Product][google.cloud.retail.v2beta.Product] queried by
     * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
     * or
     * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
     *
     * The returned [Operation][google.longrunning.Operation]s will be obsolete
     * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
     * API will return NOT_FOUND afterwards.
     *
     * If conflicting updates are issued, the
     * [Operation][google.longrunning.Operation]s associated with the stale
     * updates will not be marked as [done][google.longrunning.Operation.done]
     * until being obsolete.
     */
    addFulfillmentPlaces: {
      name: "AddFulfillmentPlaces",
      requestType: AddFulfillmentPlacesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              114,
              10,
              55,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              65,
              100,
              100,
              70,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              80,
              108,
              97,
              99,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              55,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              65,
              100,
              100,
              70,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              80,
              108,
              97,
              99,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 112, 114, 111, 100, 117, 99, 116])],
          578365826: [
            Buffer.from([
              100,
              58,
              1,
              42,
              34,
              95,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
              58,
              97,
              100,
              100,
              70,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              80,
              108,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * We recommend that you use the
     * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
     * method instead of the
     * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces]
     * method.
     * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
     * achieves the same results but provides more fine-grained control over
     * ingesting local inventory data.
     *
     * Incrementally removes place IDs from a
     * [Product.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids].
     *
     * This process is asynchronous and does not require the
     * [Product][google.cloud.retail.v2beta.Product] to exist before updating
     * fulfillment information. If the request is valid, the update will be
     * enqueued and processed downstream. As a consequence, when a response is
     * returned, the removed place IDs are not immediately manifested in the
     * [Product][google.cloud.retail.v2beta.Product] queried by
     * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
     * or
     * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
     *
     * The returned [Operation][google.longrunning.Operation]s will be obsolete
     * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
     * API will return NOT_FOUND afterwards.
     *
     * If conflicting updates are issued, the
     * [Operation][google.longrunning.Operation]s associated with the stale
     * updates will not be marked as [done][google.longrunning.Operation.done]
     * until being obsolete.
     */
    removeFulfillmentPlaces: {
      name: "RemoveFulfillmentPlaces",
      requestType: RemoveFulfillmentPlacesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              120,
              10,
              58,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              82,
              101,
              109,
              111,
              118,
              101,
              70,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              80,
              108,
              97,
              99,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              58,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              82,
              101,
              109,
              111,
              118,
              101,
              70,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              80,
              108,
              97,
              99,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 112, 114, 111, 100, 117, 99, 116])],
          578365826: [
            Buffer.from([
              103,
              58,
              1,
              42,
              34,
              98,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
              70,
              117,
              108,
              102,
              105,
              108,
              108,
              109,
              101,
              110,
              116,
              80,
              108,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates local inventory information for a
     * [Product][google.cloud.retail.v2beta.Product] at a list of places, while
     * respecting the last update timestamps of each inventory field.
     *
     * This process is asynchronous and does not require the
     * [Product][google.cloud.retail.v2beta.Product] to exist before updating
     * inventory information. If the request is valid, the update will be enqueued
     * and processed downstream. As a consequence, when a response is returned,
     * updates are not immediately manifested in the
     * [Product][google.cloud.retail.v2beta.Product] queried by
     * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
     * or
     * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
     *
     * Local inventory information can only be modified using this method.
     * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
     * and
     * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
     * has no effect on local inventories.
     *
     * The returned [Operation][google.longrunning.Operation]s will be obsolete
     * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
     * API will return NOT_FOUND afterwards.
     *
     * If conflicting updates are issued, the
     * [Operation][google.longrunning.Operation]s associated with the stale
     * updates will not be marked as [done][google.longrunning.Operation.done]
     * until being obsolete.
     */
    addLocalInventories: {
      name: "AddLocalInventories",
      requestType: AddLocalInventoriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              112,
              10,
              54,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              65,
              100,
              100,
              76,
              111,
              99,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              54,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              65,
              100,
              100,
              76,
              111,
              99,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 112, 114, 111, 100, 117, 99, 116])],
          578365826: [
            Buffer.from([
              99,
              58,
              1,
              42,
              34,
              94,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
              58,
              97,
              100,
              100,
              76,
              111,
              99,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Remove local inventory information for a
     * [Product][google.cloud.retail.v2beta.Product] at a list of places at a
     * removal timestamp.
     *
     * This process is asynchronous. If the request is valid, the removal will be
     * enqueued and processed downstream. As a consequence, when a response is
     * returned, removals are not immediately manifested in the
     * [Product][google.cloud.retail.v2beta.Product] queried by
     * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
     * or
     * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
     *
     * Local inventory information can only be removed using this method.
     * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
     * and
     * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
     * has no effect on local inventories.
     *
     * The returned [Operation][google.longrunning.Operation]s will be obsolete
     * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
     * API will return NOT_FOUND afterwards.
     *
     * If conflicting updates are issued, the
     * [Operation][google.longrunning.Operation]s associated with the stale
     * updates will not be marked as [done][google.longrunning.Operation.done]
     * until being obsolete.
     */
    removeLocalInventories: {
      name: "RemoveLocalInventories",
      requestType: RemoveLocalInventoriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              118,
              10,
              57,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              82,
              101,
              109,
              111,
              118,
              101,
              76,
              111,
              99,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              57,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              82,
              101,
              109,
              111,
              118,
              101,
              76,
              111,
              99,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 112, 114, 111, 100, 117, 99, 116])],
          578365826: [
            Buffer.from([
              102,
              58,
              1,
              42,
              34,
              97,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              42,
              125,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
              76,
              111,
              99,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProductServiceImplementation<CallContextExt = {}> {
  /** Creates a [Product][google.cloud.retail.v2beta.Product]. */
  createProduct(request: CreateProductRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Product>>;
  /** Gets a [Product][google.cloud.retail.v2beta.Product]. */
  getProduct(request: GetProductRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Product>>;
  /** Gets a list of [Product][google.cloud.retail.v2beta.Product]s. */
  listProducts(
    request: ListProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProductsResponse>>;
  /** Updates a [Product][google.cloud.retail.v2beta.Product]. */
  updateProduct(request: UpdateProductRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Product>>;
  /** Deletes a [Product][google.cloud.retail.v2beta.Product]. */
  deleteProduct(request: DeleteProductRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Permanently deletes all selected
   * [Product][google.cloud.retail.v2beta.Product]s under a branch.
   *
   * This process is asynchronous. If the request is valid, the removal will be
   * enqueued and processed offline. Depending on the number of
   * [Product][google.cloud.retail.v2beta.Product]s, this operation could take
   * hours to complete. Before the operation completes, some
   * [Product][google.cloud.retail.v2beta.Product]s may still be returned by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * Depending on the number of [Product][google.cloud.retail.v2beta.Product]s,
   * this operation could take hours to complete. To get a sample of
   * [Product][google.cloud.retail.v2beta.Product]s that would be deleted, set
   * [PurgeProductsRequest.force][google.cloud.retail.v2beta.PurgeProductsRequest.force]
   * to false.
   */
  purgeProducts(request: PurgeProductsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Bulk import of multiple [Product][google.cloud.retail.v2beta.Product]s.
   *
   * Request processing may be synchronous.
   * Non-existing items are created.
   *
   * Note that it is possible for a subset of the
   * [Product][google.cloud.retail.v2beta.Product]s to be successfully updated.
   */
  importProducts(
    request: ImportProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates inventory information for a
   * [Product][google.cloud.retail.v2beta.Product] while respecting the last
   * update timestamps of each inventory field.
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * fulfillment information. If the request is valid, the update is enqueued
   * and processed downstream. As a consequence, when a response is returned,
   * updates are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * When inventory is updated with
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * and
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct],
   * the specified inventory field value(s) overwrite any existing value(s)
   * while ignoring the last update time for this field. Furthermore, the last
   * update times for the specified inventory fields are overwritten by the
   * times of the
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * or
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * request.
   *
   * If no inventory fields are set in
   * [CreateProductRequest.product][google.cloud.retail.v2beta.CreateProductRequest.product],
   * then any pre-existing inventory information for this product is used.
   *
   * If no inventory fields are set in
   * [SetInventoryRequest.set_mask][google.cloud.retail.v2beta.SetInventoryRequest.set_mask],
   * then any existing inventory information is preserved.
   *
   * Pre-existing inventory information can only be updated with
   * [ProductService.SetInventory][google.cloud.retail.v2beta.ProductService.SetInventory],
   * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces],
   * and
   * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces].
   *
   * The returned [Operation][google.longrunning.Operation]s is obsolete after
   * one day, and the [GetOperation][google.longrunning.Operations.GetOperation]
   * API returns `NOT_FOUND` afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates are not marked as [done][google.longrunning.Operation.done] until
   * they are obsolete.
   */
  setInventory(request: SetInventoryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * We recommend that you use the
   * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
   * method instead of the
   * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces]
   * method.
   * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
   * achieves the same results but provides more fine-grained control over
   * ingesting local inventory data.
   *
   * Incrementally adds place IDs to
   * [Product.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids].
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * fulfillment information. If the request is valid, the update will be
   * enqueued and processed downstream. As a consequence, when a response is
   * returned, the added place IDs are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  addFulfillmentPlaces(
    request: AddFulfillmentPlacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * We recommend that you use the
   * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
   * method instead of the
   * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces]
   * method.
   * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
   * achieves the same results but provides more fine-grained control over
   * ingesting local inventory data.
   *
   * Incrementally removes place IDs from a
   * [Product.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids].
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * fulfillment information. If the request is valid, the update will be
   * enqueued and processed downstream. As a consequence, when a response is
   * returned, the removed place IDs are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  removeFulfillmentPlaces(
    request: RemoveFulfillmentPlacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates local inventory information for a
   * [Product][google.cloud.retail.v2beta.Product] at a list of places, while
   * respecting the last update timestamps of each inventory field.
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * inventory information. If the request is valid, the update will be enqueued
   * and processed downstream. As a consequence, when a response is returned,
   * updates are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * Local inventory information can only be modified using this method.
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * and
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * has no effect on local inventories.
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  addLocalInventories(
    request: AddLocalInventoriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Remove local inventory information for a
   * [Product][google.cloud.retail.v2beta.Product] at a list of places at a
   * removal timestamp.
   *
   * This process is asynchronous. If the request is valid, the removal will be
   * enqueued and processed downstream. As a consequence, when a response is
   * returned, removals are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * Local inventory information can only be removed using this method.
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * and
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * has no effect on local inventories.
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  removeLocalInventories(
    request: RemoveLocalInventoriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ProductServiceClient<CallOptionsExt = {}> {
  /** Creates a [Product][google.cloud.retail.v2beta.Product]. */
  createProduct(request: DeepPartial<CreateProductRequest>, options?: CallOptions & CallOptionsExt): Promise<Product>;
  /** Gets a [Product][google.cloud.retail.v2beta.Product]. */
  getProduct(request: DeepPartial<GetProductRequest>, options?: CallOptions & CallOptionsExt): Promise<Product>;
  /** Gets a list of [Product][google.cloud.retail.v2beta.Product]s. */
  listProducts(
    request: DeepPartial<ListProductsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProductsResponse>;
  /** Updates a [Product][google.cloud.retail.v2beta.Product]. */
  updateProduct(request: DeepPartial<UpdateProductRequest>, options?: CallOptions & CallOptionsExt): Promise<Product>;
  /** Deletes a [Product][google.cloud.retail.v2beta.Product]. */
  deleteProduct(request: DeepPartial<DeleteProductRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Permanently deletes all selected
   * [Product][google.cloud.retail.v2beta.Product]s under a branch.
   *
   * This process is asynchronous. If the request is valid, the removal will be
   * enqueued and processed offline. Depending on the number of
   * [Product][google.cloud.retail.v2beta.Product]s, this operation could take
   * hours to complete. Before the operation completes, some
   * [Product][google.cloud.retail.v2beta.Product]s may still be returned by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * Depending on the number of [Product][google.cloud.retail.v2beta.Product]s,
   * this operation could take hours to complete. To get a sample of
   * [Product][google.cloud.retail.v2beta.Product]s that would be deleted, set
   * [PurgeProductsRequest.force][google.cloud.retail.v2beta.PurgeProductsRequest.force]
   * to false.
   */
  purgeProducts(request: DeepPartial<PurgeProductsRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Bulk import of multiple [Product][google.cloud.retail.v2beta.Product]s.
   *
   * Request processing may be synchronous.
   * Non-existing items are created.
   *
   * Note that it is possible for a subset of the
   * [Product][google.cloud.retail.v2beta.Product]s to be successfully updated.
   */
  importProducts(
    request: DeepPartial<ImportProductsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates inventory information for a
   * [Product][google.cloud.retail.v2beta.Product] while respecting the last
   * update timestamps of each inventory field.
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * fulfillment information. If the request is valid, the update is enqueued
   * and processed downstream. As a consequence, when a response is returned,
   * updates are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * When inventory is updated with
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * and
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct],
   * the specified inventory field value(s) overwrite any existing value(s)
   * while ignoring the last update time for this field. Furthermore, the last
   * update times for the specified inventory fields are overwritten by the
   * times of the
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * or
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * request.
   *
   * If no inventory fields are set in
   * [CreateProductRequest.product][google.cloud.retail.v2beta.CreateProductRequest.product],
   * then any pre-existing inventory information for this product is used.
   *
   * If no inventory fields are set in
   * [SetInventoryRequest.set_mask][google.cloud.retail.v2beta.SetInventoryRequest.set_mask],
   * then any existing inventory information is preserved.
   *
   * Pre-existing inventory information can only be updated with
   * [ProductService.SetInventory][google.cloud.retail.v2beta.ProductService.SetInventory],
   * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces],
   * and
   * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces].
   *
   * The returned [Operation][google.longrunning.Operation]s is obsolete after
   * one day, and the [GetOperation][google.longrunning.Operations.GetOperation]
   * API returns `NOT_FOUND` afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates are not marked as [done][google.longrunning.Operation.done] until
   * they are obsolete.
   */
  setInventory(request: DeepPartial<SetInventoryRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * We recommend that you use the
   * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
   * method instead of the
   * [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.AddFulfillmentPlaces]
   * method.
   * [ProductService.AddLocalInventories][google.cloud.retail.v2beta.ProductService.AddLocalInventories]
   * achieves the same results but provides more fine-grained control over
   * ingesting local inventory data.
   *
   * Incrementally adds place IDs to
   * [Product.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids].
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * fulfillment information. If the request is valid, the update will be
   * enqueued and processed downstream. As a consequence, when a response is
   * returned, the added place IDs are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  addFulfillmentPlaces(
    request: DeepPartial<AddFulfillmentPlacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * We recommend that you use the
   * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
   * method instead of the
   * [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2beta.ProductService.RemoveFulfillmentPlaces]
   * method.
   * [ProductService.RemoveLocalInventories][google.cloud.retail.v2beta.ProductService.RemoveLocalInventories]
   * achieves the same results but provides more fine-grained control over
   * ingesting local inventory data.
   *
   * Incrementally removes place IDs from a
   * [Product.fulfillment_info.place_ids][google.cloud.retail.v2beta.FulfillmentInfo.place_ids].
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * fulfillment information. If the request is valid, the update will be
   * enqueued and processed downstream. As a consequence, when a response is
   * returned, the removed place IDs are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  removeFulfillmentPlaces(
    request: DeepPartial<RemoveFulfillmentPlacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates local inventory information for a
   * [Product][google.cloud.retail.v2beta.Product] at a list of places, while
   * respecting the last update timestamps of each inventory field.
   *
   * This process is asynchronous and does not require the
   * [Product][google.cloud.retail.v2beta.Product] to exist before updating
   * inventory information. If the request is valid, the update will be enqueued
   * and processed downstream. As a consequence, when a response is returned,
   * updates are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * Local inventory information can only be modified using this method.
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * and
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * has no effect on local inventories.
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  addLocalInventories(
    request: DeepPartial<AddLocalInventoriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Remove local inventory information for a
   * [Product][google.cloud.retail.v2beta.Product] at a list of places at a
   * removal timestamp.
   *
   * This process is asynchronous. If the request is valid, the removal will be
   * enqueued and processed downstream. As a consequence, when a response is
   * returned, removals are not immediately manifested in the
   * [Product][google.cloud.retail.v2beta.Product] queried by
   * [ProductService.GetProduct][google.cloud.retail.v2beta.ProductService.GetProduct]
   * or
   * [ProductService.ListProducts][google.cloud.retail.v2beta.ProductService.ListProducts].
   *
   * Local inventory information can only be removed using this method.
   * [ProductService.CreateProduct][google.cloud.retail.v2beta.ProductService.CreateProduct]
   * and
   * [ProductService.UpdateProduct][google.cloud.retail.v2beta.ProductService.UpdateProduct]
   * has no effect on local inventories.
   *
   * The returned [Operation][google.longrunning.Operation]s will be obsolete
   * after 1 day, and [GetOperation][google.longrunning.Operations.GetOperation]
   * API will return NOT_FOUND afterwards.
   *
   * If conflicting updates are issued, the
   * [Operation][google.longrunning.Operation]s associated with the stale
   * updates will not be marked as [done][google.longrunning.Operation.done]
   * until being obsolete.
   */
  removeLocalInventories(
    request: DeepPartial<RemoveLocalInventoriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
