// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2beta/serving_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { SolutionType, solutionTypeFromJSON, solutionTypeToJSON } from "./common.js";
import { SearchRequest_DynamicFacetSpec, SearchRequest_PersonalizationSpec } from "./search_service.js";

export const protobufPackage = "google.cloud.retail.v2beta";

/**
 * Configures metadata that is used to generate serving time results (e.g.
 * search results or recommendation predictions).
 */
export interface ServingConfig {
  /**
   * Immutable. Fully qualified name
   * `projects/* /locations/global/catalogs/* /servingConfig/*`
   */
  name: string;
  /**
   * Required. The human readable serving config display name. Used in Retail
   * UI.
   *
   * This field must be a UTF-8 encoded string with a length limit of 128
   * characters. Otherwise, an INVALID_ARGUMENT error is returned.
   */
  displayName: string;
  /**
   * The id of the model in the same
   * [Catalog][google.cloud.retail.v2beta.Catalog] to use at serving time.
   * Currently only RecommendationModels are supported:
   * https://cloud.google.com/retail/recommendations-ai/docs/create-models
   * Can be changed but only to a compatible model (e.g.
   * others-you-may-like CTR to others-you-may-like CVR).
   *
   * Required when
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  modelId: string;
  /**
   * How much price ranking we want in serving results.
   * Price reranking causes product items with a similar
   * recommendation probability to be ordered by price, with the
   * highest-priced items first. This setting could result in a decrease in
   * click-through and conversion rates.
   *  Allowed values are:
   *
   * * `no-price-reranking`
   * * `low-price-reranking`
   * * `medium-price-reranking`
   * * `high-price-reranking`
   *
   * If not specified, we choose default based on model type. Default value:
   * `no-price-reranking`.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  priceRerankingLevel: string;
  /**
   * Facet specifications for faceted search. If empty, no facets are returned.
   * The ids refer to the ids of [Control][google.cloud.retail.v2beta.Control]
   * resources with only the Facet control set. These controls are assumed to be
   * in the same [Catalog][google.cloud.retail.v2beta.Catalog] as the
   * [ServingConfig][google.cloud.retail.v2beta.ServingConfig].
   * A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error
   * is returned.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  facetControlIds: string[];
  /**
   * The specification for dynamically generated facets. Notice that only
   * textual facets can be dynamically generated.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  dynamicFacetSpec:
    | SearchRequest_DynamicFacetSpec
    | undefined;
  /**
   * Condition boost specifications. If a product matches multiple conditions
   * in the specifications, boost scores from these specifications are all
   * applied and combined in a non-linear way. Maximum number of
   * specifications is 100.
   *
   * Notice that if both
   * [ServingConfig.boost_control_ids][google.cloud.retail.v2beta.ServingConfig.boost_control_ids]
   * and
   * [SearchRequest.boost_spec][google.cloud.retail.v2beta.SearchRequest.boost_spec]
   * are set, the boost conditions from both places are evaluated. If a search
   * request matches multiple boost conditions, the final boost score is equal
   * to the sum of the boost scores from all matched boost conditions.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  boostControlIds: string[];
  /**
   * Condition filter specifications. If a product matches multiple conditions
   * in the specifications, filters from these specifications are all
   * applied and combined via the AND operator. Maximum number of
   * specifications is 100.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  filterControlIds: string[];
  /**
   * Condition redirect specifications. Only the first triggered redirect action
   * is applied, even if multiple apply. Maximum number of specifications is
   * 1000.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  redirectControlIds: string[];
  /**
   * Condition synonyms specifications. If multiple syonyms conditions match,
   * all matching synonyms control in the list will execute. Order of controls
   * in the list will not matter. Maximum number of specifications is
   * 100.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  twowaySynonymsControlIds: string[];
  /**
   * Condition oneway synonyms specifications. If multiple oneway synonyms
   * conditions match, all matching oneway synonyms controls in the list will
   * execute. Order of controls in the list will not matter. Maximum number of
   * specifications is 100.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  onewaySynonymsControlIds: string[];
  /**
   * Condition do not associate specifications. If multiple do not associate
   * conditions match, all matching do not associate controls in the list will
   * execute.
   * - Order does not matter.
   * - Maximum number of specifications is 100.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  doNotAssociateControlIds: string[];
  /**
   * Condition replacement specifications.
   * - Applied according to the order in the list.
   * - A previously replaced term can not be re-replaced.
   * - Maximum number of specifications is 100.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  replacementControlIds: string[];
  /**
   * Condition ignore specifications. If multiple ignore
   * conditions match, all matching ignore controls in the list will
   * execute.
   * - Order does not matter.
   * - Maximum number of specifications is 100.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  ignoreControlIds: string[];
  /**
   * How much diversity to use in recommendation model results e.g.
   * `medium-diversity` or `high-diversity`. Currently supported values:
   *
   * * `no-diversity`
   * * `low-diversity`
   * * `medium-diversity`
   * * `high-diversity`
   * * `auto-diversity`
   *
   * If not specified, we choose default based on recommendation model
   * type. Default value: `no-diversity`.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  diversityLevel: string;
  /**
   * What kind of diversity to use - data driven or rule based. If unset, the
   * server behavior defaults to
   * [RULE_BASED_DIVERSITY][google.cloud.retail.v2beta.ServingConfig.DiversityType.RULE_BASED_DIVERSITY].
   */
  diversityType: ServingConfig_DiversityType;
  /**
   * Whether to add additional category filters on the `similar-items` model.
   * If not specified, we enable it by default.
   *  Allowed values are:
   *
   * * `no-category-match`: No additional filtering of original results from
   *   the model and the customer's filters.
   * * `relaxed-category-match`: Only keep results with categories that match
   *   at least one item categories in the PredictRequests's context item.
   *   * If customer also sends filters in the PredictRequest, then the results
   *   will satisfy both conditions (user given and category match).
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  enableCategoryFilterLevel: string;
  /**
   * When the flag is enabled, the products in the denylist will not be filtered
   * out in the recommendation filtering results.
   */
  ignoreRecsDenylist: boolean;
  /**
   * The specification for personalization spec.
   *
   * Can only be set if
   * [solution_types][google.cloud.retail.v2beta.ServingConfig.solution_types]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.retail.v2main.SolutionType.SOLUTION_TYPE_SEARCH].
   *
   * Notice that if both
   * [ServingConfig.personalization_spec][google.cloud.retail.v2beta.ServingConfig.personalization_spec]
   * and
   * [SearchRequest.personalization_spec][google.cloud.retail.v2beta.SearchRequest.personalization_spec]
   * are set.
   * [SearchRequest.personalization_spec][google.cloud.retail.v2beta.SearchRequest.personalization_spec]
   * will override
   * [ServingConfig.personalization_spec][google.cloud.retail.v2beta.ServingConfig.personalization_spec].
   */
  personalizationSpec:
    | SearchRequest_PersonalizationSpec
    | undefined;
  /**
   * Required. Immutable. Specifies the solution types that a serving config can
   * be associated with. Currently we support setting only one type of solution.
   */
  solutionTypes: SolutionType[];
}

/** What type of diversity - data or rule based. */
export enum ServingConfig_DiversityType {
  /** DIVERSITY_TYPE_UNSPECIFIED - Default value. */
  DIVERSITY_TYPE_UNSPECIFIED = 0,
  /** RULE_BASED_DIVERSITY - Rule based diversity. */
  RULE_BASED_DIVERSITY = 2,
  /** DATA_DRIVEN_DIVERSITY - Data driven diversity. */
  DATA_DRIVEN_DIVERSITY = 3,
  UNRECOGNIZED = -1,
}

export function servingConfig_DiversityTypeFromJSON(object: any): ServingConfig_DiversityType {
  switch (object) {
    case 0:
    case "DIVERSITY_TYPE_UNSPECIFIED":
      return ServingConfig_DiversityType.DIVERSITY_TYPE_UNSPECIFIED;
    case 2:
    case "RULE_BASED_DIVERSITY":
      return ServingConfig_DiversityType.RULE_BASED_DIVERSITY;
    case 3:
    case "DATA_DRIVEN_DIVERSITY":
      return ServingConfig_DiversityType.DATA_DRIVEN_DIVERSITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServingConfig_DiversityType.UNRECOGNIZED;
  }
}

export function servingConfig_DiversityTypeToJSON(object: ServingConfig_DiversityType): string {
  switch (object) {
    case ServingConfig_DiversityType.DIVERSITY_TYPE_UNSPECIFIED:
      return "DIVERSITY_TYPE_UNSPECIFIED";
    case ServingConfig_DiversityType.RULE_BASED_DIVERSITY:
      return "RULE_BASED_DIVERSITY";
    case ServingConfig_DiversityType.DATA_DRIVEN_DIVERSITY:
      return "DATA_DRIVEN_DIVERSITY";
    case ServingConfig_DiversityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseServingConfig(): ServingConfig {
  return {
    name: "",
    displayName: "",
    modelId: "",
    priceRerankingLevel: "",
    facetControlIds: [],
    dynamicFacetSpec: undefined,
    boostControlIds: [],
    filterControlIds: [],
    redirectControlIds: [],
    twowaySynonymsControlIds: [],
    onewaySynonymsControlIds: [],
    doNotAssociateControlIds: [],
    replacementControlIds: [],
    ignoreControlIds: [],
    diversityLevel: "",
    diversityType: 0,
    enableCategoryFilterLevel: "",
    ignoreRecsDenylist: false,
    personalizationSpec: undefined,
    solutionTypes: [],
  };
}

export const ServingConfig: MessageFns<ServingConfig> = {
  encode(message: ServingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.modelId !== "") {
      writer.uint32(26).string(message.modelId);
    }
    if (message.priceRerankingLevel !== "") {
      writer.uint32(34).string(message.priceRerankingLevel);
    }
    for (const v of message.facetControlIds) {
      writer.uint32(42).string(v!);
    }
    if (message.dynamicFacetSpec !== undefined) {
      SearchRequest_DynamicFacetSpec.encode(message.dynamicFacetSpec, writer.uint32(50).fork()).join();
    }
    for (const v of message.boostControlIds) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.filterControlIds) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.redirectControlIds) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.twowaySynonymsControlIds) {
      writer.uint32(146).string(v!);
    }
    for (const v of message.onewaySynonymsControlIds) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.doNotAssociateControlIds) {
      writer.uint32(106).string(v!);
    }
    for (const v of message.replacementControlIds) {
      writer.uint32(114).string(v!);
    }
    for (const v of message.ignoreControlIds) {
      writer.uint32(122).string(v!);
    }
    if (message.diversityLevel !== "") {
      writer.uint32(66).string(message.diversityLevel);
    }
    if (message.diversityType !== 0) {
      writer.uint32(160).int32(message.diversityType);
    }
    if (message.enableCategoryFilterLevel !== "") {
      writer.uint32(130).string(message.enableCategoryFilterLevel);
    }
    if (message.ignoreRecsDenylist !== false) {
      writer.uint32(192).bool(message.ignoreRecsDenylist);
    }
    if (message.personalizationSpec !== undefined) {
      SearchRequest_PersonalizationSpec.encode(message.personalizationSpec, writer.uint32(170).fork()).join();
    }
    writer.uint32(154).fork();
    for (const v of message.solutionTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.priceRerankingLevel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.facetControlIds.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dynamicFacetSpec = SearchRequest_DynamicFacetSpec.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.boostControlIds.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.filterControlIds.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.redirectControlIds.push(reader.string());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.twowaySynonymsControlIds.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.onewaySynonymsControlIds.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.doNotAssociateControlIds.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.replacementControlIds.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.ignoreControlIds.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.diversityLevel = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.diversityType = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.enableCategoryFilterLevel = reader.string();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.ignoreRecsDenylist = reader.bool();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.personalizationSpec = SearchRequest_PersonalizationSpec.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag === 152) {
            message.solutionTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.solutionTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServingConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      modelId: isSet(object.modelId) ? globalThis.String(object.modelId) : "",
      priceRerankingLevel: isSet(object.priceRerankingLevel) ? globalThis.String(object.priceRerankingLevel) : "",
      facetControlIds: globalThis.Array.isArray(object?.facetControlIds)
        ? object.facetControlIds.map((e: any) => globalThis.String(e))
        : [],
      dynamicFacetSpec: isSet(object.dynamicFacetSpec)
        ? SearchRequest_DynamicFacetSpec.fromJSON(object.dynamicFacetSpec)
        : undefined,
      boostControlIds: globalThis.Array.isArray(object?.boostControlIds)
        ? object.boostControlIds.map((e: any) => globalThis.String(e))
        : [],
      filterControlIds: globalThis.Array.isArray(object?.filterControlIds)
        ? object.filterControlIds.map((e: any) => globalThis.String(e))
        : [],
      redirectControlIds: globalThis.Array.isArray(object?.redirectControlIds)
        ? object.redirectControlIds.map((e: any) => globalThis.String(e))
        : [],
      twowaySynonymsControlIds: globalThis.Array.isArray(object?.twowaySynonymsControlIds)
        ? object.twowaySynonymsControlIds.map((e: any) => globalThis.String(e))
        : [],
      onewaySynonymsControlIds: globalThis.Array.isArray(object?.onewaySynonymsControlIds)
        ? object.onewaySynonymsControlIds.map((e: any) => globalThis.String(e))
        : [],
      doNotAssociateControlIds: globalThis.Array.isArray(object?.doNotAssociateControlIds)
        ? object.doNotAssociateControlIds.map((e: any) => globalThis.String(e))
        : [],
      replacementControlIds: globalThis.Array.isArray(object?.replacementControlIds)
        ? object.replacementControlIds.map((e: any) => globalThis.String(e))
        : [],
      ignoreControlIds: globalThis.Array.isArray(object?.ignoreControlIds)
        ? object.ignoreControlIds.map((e: any) => globalThis.String(e))
        : [],
      diversityLevel: isSet(object.diversityLevel) ? globalThis.String(object.diversityLevel) : "",
      diversityType: isSet(object.diversityType) ? servingConfig_DiversityTypeFromJSON(object.diversityType) : 0,
      enableCategoryFilterLevel: isSet(object.enableCategoryFilterLevel)
        ? globalThis.String(object.enableCategoryFilterLevel)
        : "",
      ignoreRecsDenylist: isSet(object.ignoreRecsDenylist) ? globalThis.Boolean(object.ignoreRecsDenylist) : false,
      personalizationSpec: isSet(object.personalizationSpec)
        ? SearchRequest_PersonalizationSpec.fromJSON(object.personalizationSpec)
        : undefined,
      solutionTypes: globalThis.Array.isArray(object?.solutionTypes)
        ? object.solutionTypes.map((e: any) => solutionTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: ServingConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.modelId !== "") {
      obj.modelId = message.modelId;
    }
    if (message.priceRerankingLevel !== "") {
      obj.priceRerankingLevel = message.priceRerankingLevel;
    }
    if (message.facetControlIds?.length) {
      obj.facetControlIds = message.facetControlIds;
    }
    if (message.dynamicFacetSpec !== undefined) {
      obj.dynamicFacetSpec = SearchRequest_DynamicFacetSpec.toJSON(message.dynamicFacetSpec);
    }
    if (message.boostControlIds?.length) {
      obj.boostControlIds = message.boostControlIds;
    }
    if (message.filterControlIds?.length) {
      obj.filterControlIds = message.filterControlIds;
    }
    if (message.redirectControlIds?.length) {
      obj.redirectControlIds = message.redirectControlIds;
    }
    if (message.twowaySynonymsControlIds?.length) {
      obj.twowaySynonymsControlIds = message.twowaySynonymsControlIds;
    }
    if (message.onewaySynonymsControlIds?.length) {
      obj.onewaySynonymsControlIds = message.onewaySynonymsControlIds;
    }
    if (message.doNotAssociateControlIds?.length) {
      obj.doNotAssociateControlIds = message.doNotAssociateControlIds;
    }
    if (message.replacementControlIds?.length) {
      obj.replacementControlIds = message.replacementControlIds;
    }
    if (message.ignoreControlIds?.length) {
      obj.ignoreControlIds = message.ignoreControlIds;
    }
    if (message.diversityLevel !== "") {
      obj.diversityLevel = message.diversityLevel;
    }
    if (message.diversityType !== 0) {
      obj.diversityType = servingConfig_DiversityTypeToJSON(message.diversityType);
    }
    if (message.enableCategoryFilterLevel !== "") {
      obj.enableCategoryFilterLevel = message.enableCategoryFilterLevel;
    }
    if (message.ignoreRecsDenylist !== false) {
      obj.ignoreRecsDenylist = message.ignoreRecsDenylist;
    }
    if (message.personalizationSpec !== undefined) {
      obj.personalizationSpec = SearchRequest_PersonalizationSpec.toJSON(message.personalizationSpec);
    }
    if (message.solutionTypes?.length) {
      obj.solutionTypes = message.solutionTypes.map((e) => solutionTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ServingConfig>): ServingConfig {
    return ServingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServingConfig>): ServingConfig {
    const message = createBaseServingConfig();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.modelId = object.modelId ?? "";
    message.priceRerankingLevel = object.priceRerankingLevel ?? "";
    message.facetControlIds = object.facetControlIds?.map((e) => e) || [];
    message.dynamicFacetSpec = (object.dynamicFacetSpec !== undefined && object.dynamicFacetSpec !== null)
      ? SearchRequest_DynamicFacetSpec.fromPartial(object.dynamicFacetSpec)
      : undefined;
    message.boostControlIds = object.boostControlIds?.map((e) => e) || [];
    message.filterControlIds = object.filterControlIds?.map((e) => e) || [];
    message.redirectControlIds = object.redirectControlIds?.map((e) => e) || [];
    message.twowaySynonymsControlIds = object.twowaySynonymsControlIds?.map((e) => e) || [];
    message.onewaySynonymsControlIds = object.onewaySynonymsControlIds?.map((e) => e) || [];
    message.doNotAssociateControlIds = object.doNotAssociateControlIds?.map((e) => e) || [];
    message.replacementControlIds = object.replacementControlIds?.map((e) => e) || [];
    message.ignoreControlIds = object.ignoreControlIds?.map((e) => e) || [];
    message.diversityLevel = object.diversityLevel ?? "";
    message.diversityType = object.diversityType ?? 0;
    message.enableCategoryFilterLevel = object.enableCategoryFilterLevel ?? "";
    message.ignoreRecsDenylist = object.ignoreRecsDenylist ?? false;
    message.personalizationSpec = (object.personalizationSpec !== undefined && object.personalizationSpec !== null)
      ? SearchRequest_PersonalizationSpec.fromPartial(object.personalizationSpec)
      : undefined;
    message.solutionTypes = object.solutionTypes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
