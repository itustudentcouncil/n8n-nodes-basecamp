// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/logging/error_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.retail.logging";

/** Describes a running service that sends errors. */
export interface ServiceContext {
  /**
   * An identifier of the service.
   * For example, "retail.googleapis.com".
   */
  service: string;
}

/** HTTP request data that is related to a reported error. */
export interface HttpRequestContext {
  /** The HTTP response status code for the request. */
  responseStatusCode: number;
}

/**
 * Indicates a location in the source code of the service for which
 * errors are reported.
 */
export interface SourceLocation {
  /**
   * Human-readable name of a function or method.
   * For example, "google.cloud.retail.v2.UserEventService.ImportUserEvents".
   */
  functionName: string;
}

/** A description of the context in which an error occurred. */
export interface ErrorContext {
  /** The HTTP request which was processed when the error was triggered. */
  httpRequest:
    | HttpRequestContext
    | undefined;
  /**
   * The location in the source code where the decision was made to
   * report the error, usually the place where it was logged.
   */
  reportLocation: SourceLocation | undefined;
}

/**
 * The error payload that is populated on LRO import APIs, including
 *   "google.cloud.retail.v2.ProductService.ImportProducts" and
 *   "google.cloud.retail.v2.EventService.ImportUserEvents".
 */
export interface ImportErrorContext {
  /** The operation resource name of the LRO. */
  operationName: string;
  /**
   * Cloud Storage file path of the import source.
   * Can be set for batch operation error.
   */
  gcsPath: string;
  /**
   * Line number of the content in file.
   * Should be empty for permission or batch operation error.
   */
  lineNumber: string;
  /** The detailed content which caused the error on importing a catalog item. */
  catalogItem?:
    | string
    | undefined;
  /** The detailed content which caused the error on importing a product. */
  product?:
    | string
    | undefined;
  /** The detailed content which caused the error on importing a user event. */
  userEvent?: string | undefined;
}

/**
 * An error log which is reported to the Error Reporting system.
 * This proto a superset of
 * google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent.
 */
export interface ErrorLog {
  /** The service context in which this error has occurred. */
  serviceContext:
    | ServiceContext
    | undefined;
  /** A description of the context in which the error occurred. */
  context:
    | ErrorContext
    | undefined;
  /** A message describing the error. */
  message: string;
  /** The RPC status associated with the error log. */
  status:
    | Status
    | undefined;
  /**
   * The API request payload, represented as a protocol buffer.
   *
   * Most API request types are supported. For example:
   *
   *   "type.googleapis.com/google.cloud.retail.v2.ProductService.CreateProductRequest"
   *   "type.googleapis.com/google.cloud.retail.v2.UserEventService.WriteUserEventRequest"
   */
  requestPayload:
    | { [key: string]: any }
    | undefined;
  /**
   * The API response payload, represented as a protocol buffer.
   *
   * This is used to log some "soft errors", where the response is valid but we
   * consider there are some quality issues like unjoined events.
   *
   * The following API responses are supported and no PII is included:
   *   "google.cloud.retail.v2.PredictionService.Predict"
   *   "google.cloud.retail.v2.UserEventService.WriteUserEvent"
   *   "google.cloud.retail.v2.UserEventService.CollectUserEvent"
   */
  responsePayload:
    | { [key: string]: any }
    | undefined;
  /** The error payload that is populated on LRO import APIs. */
  importPayload: ImportErrorContext | undefined;
}

function createBaseServiceContext(): ServiceContext {
  return { service: "" };
}

export const ServiceContext: MessageFns<ServiceContext> = {
  encode(message: ServiceContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceContext {
    return { service: isSet(object.service) ? globalThis.String(object.service) : "" };
  },

  toJSON(message: ServiceContext): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceContext>): ServiceContext {
    return ServiceContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceContext>): ServiceContext {
    const message = createBaseServiceContext();
    message.service = object.service ?? "";
    return message;
  },
};

function createBaseHttpRequestContext(): HttpRequestContext {
  return { responseStatusCode: 0 };
}

export const HttpRequestContext: MessageFns<HttpRequestContext> = {
  encode(message: HttpRequestContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.responseStatusCode !== 0) {
      writer.uint32(8).int32(message.responseStatusCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRequestContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRequestContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseStatusCode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRequestContext {
    return { responseStatusCode: isSet(object.responseStatusCode) ? globalThis.Number(object.responseStatusCode) : 0 };
  },

  toJSON(message: HttpRequestContext): unknown {
    const obj: any = {};
    if (message.responseStatusCode !== 0) {
      obj.responseStatusCode = Math.round(message.responseStatusCode);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpRequestContext>): HttpRequestContext {
    return HttpRequestContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpRequestContext>): HttpRequestContext {
    const message = createBaseHttpRequestContext();
    message.responseStatusCode = object.responseStatusCode ?? 0;
    return message;
  },
};

function createBaseSourceLocation(): SourceLocation {
  return { functionName: "" };
}

export const SourceLocation: MessageFns<SourceLocation> = {
  encode(message: SourceLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.functionName !== "") {
      writer.uint32(10).string(message.functionName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.functionName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceLocation {
    return { functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "" };
  },

  toJSON(message: SourceLocation): unknown {
    const obj: any = {};
    if (message.functionName !== "") {
      obj.functionName = message.functionName;
    }
    return obj;
  },

  create(base?: DeepPartial<SourceLocation>): SourceLocation {
    return SourceLocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourceLocation>): SourceLocation {
    const message = createBaseSourceLocation();
    message.functionName = object.functionName ?? "";
    return message;
  },
};

function createBaseErrorContext(): ErrorContext {
  return { httpRequest: undefined, reportLocation: undefined };
}

export const ErrorContext: MessageFns<ErrorContext> = {
  encode(message: ErrorContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.httpRequest !== undefined) {
      HttpRequestContext.encode(message.httpRequest, writer.uint32(10).fork()).join();
    }
    if (message.reportLocation !== undefined) {
      SourceLocation.encode(message.reportLocation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.httpRequest = HttpRequestContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reportLocation = SourceLocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorContext {
    return {
      httpRequest: isSet(object.httpRequest) ? HttpRequestContext.fromJSON(object.httpRequest) : undefined,
      reportLocation: isSet(object.reportLocation) ? SourceLocation.fromJSON(object.reportLocation) : undefined,
    };
  },

  toJSON(message: ErrorContext): unknown {
    const obj: any = {};
    if (message.httpRequest !== undefined) {
      obj.httpRequest = HttpRequestContext.toJSON(message.httpRequest);
    }
    if (message.reportLocation !== undefined) {
      obj.reportLocation = SourceLocation.toJSON(message.reportLocation);
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorContext>): ErrorContext {
    return ErrorContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorContext>): ErrorContext {
    const message = createBaseErrorContext();
    message.httpRequest = (object.httpRequest !== undefined && object.httpRequest !== null)
      ? HttpRequestContext.fromPartial(object.httpRequest)
      : undefined;
    message.reportLocation = (object.reportLocation !== undefined && object.reportLocation !== null)
      ? SourceLocation.fromPartial(object.reportLocation)
      : undefined;
    return message;
  },
};

function createBaseImportErrorContext(): ImportErrorContext {
  return {
    operationName: "",
    gcsPath: "",
    lineNumber: "",
    catalogItem: undefined,
    product: undefined,
    userEvent: undefined,
  };
}

export const ImportErrorContext: MessageFns<ImportErrorContext> = {
  encode(message: ImportErrorContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationName !== "") {
      writer.uint32(10).string(message.operationName);
    }
    if (message.gcsPath !== "") {
      writer.uint32(18).string(message.gcsPath);
    }
    if (message.lineNumber !== "") {
      writer.uint32(26).string(message.lineNumber);
    }
    if (message.catalogItem !== undefined) {
      writer.uint32(34).string(message.catalogItem);
    }
    if (message.product !== undefined) {
      writer.uint32(42).string(message.product);
    }
    if (message.userEvent !== undefined) {
      writer.uint32(50).string(message.userEvent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportErrorContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportErrorContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lineNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.catalogItem = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.product = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEvent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportErrorContext {
    return {
      operationName: isSet(object.operationName) ? globalThis.String(object.operationName) : "",
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : "",
      lineNumber: isSet(object.lineNumber) ? globalThis.String(object.lineNumber) : "",
      catalogItem: isSet(object.catalogItem) ? globalThis.String(object.catalogItem) : undefined,
      product: isSet(object.product) ? globalThis.String(object.product) : undefined,
      userEvent: isSet(object.userEvent) ? globalThis.String(object.userEvent) : undefined,
    };
  },

  toJSON(message: ImportErrorContext): unknown {
    const obj: any = {};
    if (message.operationName !== "") {
      obj.operationName = message.operationName;
    }
    if (message.gcsPath !== "") {
      obj.gcsPath = message.gcsPath;
    }
    if (message.lineNumber !== "") {
      obj.lineNumber = message.lineNumber;
    }
    if (message.catalogItem !== undefined) {
      obj.catalogItem = message.catalogItem;
    }
    if (message.product !== undefined) {
      obj.product = message.product;
    }
    if (message.userEvent !== undefined) {
      obj.userEvent = message.userEvent;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportErrorContext>): ImportErrorContext {
    return ImportErrorContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportErrorContext>): ImportErrorContext {
    const message = createBaseImportErrorContext();
    message.operationName = object.operationName ?? "";
    message.gcsPath = object.gcsPath ?? "";
    message.lineNumber = object.lineNumber ?? "";
    message.catalogItem = object.catalogItem ?? undefined;
    message.product = object.product ?? undefined;
    message.userEvent = object.userEvent ?? undefined;
    return message;
  },
};

function createBaseErrorLog(): ErrorLog {
  return {
    serviceContext: undefined,
    context: undefined,
    message: "",
    status: undefined,
    requestPayload: undefined,
    responsePayload: undefined,
    importPayload: undefined,
  };
}

export const ErrorLog: MessageFns<ErrorLog> = {
  encode(message: ErrorLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceContext !== undefined) {
      ServiceContext.encode(message.serviceContext, writer.uint32(10).fork()).join();
    }
    if (message.context !== undefined) {
      ErrorContext.encode(message.context, writer.uint32(18).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(34).fork()).join();
    }
    if (message.requestPayload !== undefined) {
      Struct.encode(Struct.wrap(message.requestPayload), writer.uint32(42).fork()).join();
    }
    if (message.responsePayload !== undefined) {
      Struct.encode(Struct.wrap(message.responsePayload), writer.uint32(50).fork()).join();
    }
    if (message.importPayload !== undefined) {
      ImportErrorContext.encode(message.importPayload, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceContext = ServiceContext.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.context = ErrorContext.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.requestPayload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.responsePayload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.importPayload = ImportErrorContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorLog {
    return {
      serviceContext: isSet(object.serviceContext) ? ServiceContext.fromJSON(object.serviceContext) : undefined,
      context: isSet(object.context) ? ErrorContext.fromJSON(object.context) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      requestPayload: isObject(object.requestPayload) ? object.requestPayload : undefined,
      responsePayload: isObject(object.responsePayload) ? object.responsePayload : undefined,
      importPayload: isSet(object.importPayload) ? ImportErrorContext.fromJSON(object.importPayload) : undefined,
    };
  },

  toJSON(message: ErrorLog): unknown {
    const obj: any = {};
    if (message.serviceContext !== undefined) {
      obj.serviceContext = ServiceContext.toJSON(message.serviceContext);
    }
    if (message.context !== undefined) {
      obj.context = ErrorContext.toJSON(message.context);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.requestPayload !== undefined) {
      obj.requestPayload = message.requestPayload;
    }
    if (message.responsePayload !== undefined) {
      obj.responsePayload = message.responsePayload;
    }
    if (message.importPayload !== undefined) {
      obj.importPayload = ImportErrorContext.toJSON(message.importPayload);
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorLog>): ErrorLog {
    return ErrorLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorLog>): ErrorLog {
    const message = createBaseErrorLog();
    message.serviceContext = (object.serviceContext !== undefined && object.serviceContext !== null)
      ? ServiceContext.fromPartial(object.serviceContext)
      : undefined;
    message.context = (object.context !== undefined && object.context !== null)
      ? ErrorContext.fromPartial(object.context)
      : undefined;
    message.message = object.message ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.requestPayload = object.requestPayload ?? undefined;
    message.responsePayload = object.responsePayload ?? undefined;
    message.importPayload = (object.importPayload !== undefined && object.importPayload !== null)
      ? ImportErrorContext.fromPartial(object.importPayload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
