// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/project_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { SolutionType, solutionTypeFromJSON, solutionTypeToJSON } from "./common.js";
import { AlertConfig, LoggingConfig, Project } from "./project.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/** Request for GetProject method. */
export interface GetProjectRequest {
  /**
   * Required. Full resource name of the project. Format:
   * `projects/{project_number_or_id}/retailProject`
   */
  name: string;
}

/** Request for AcceptTerms method. */
export interface AcceptTermsRequest {
  /**
   * Required. Full resource name of the project. Format:
   * `projects/{project_number_or_id}/retailProject`
   */
  project: string;
}

/** Request for EnrollSolution method. */
export interface EnrollSolutionRequest {
  /**
   * Required. Full resource name of parent. Format:
   * `projects/{project_number_or_id}`
   */
  project: string;
  /** Required. Solution to enroll. */
  solution: SolutionType;
}

/** Response for EnrollSolution method. */
export interface EnrollSolutionResponse {
  /** Retail API solution that the project has enrolled. */
  enrolledSolution: SolutionType;
}

/**
 * Metadata related to the EnrollSolution method.
 * This will be returned by the google.longrunning.Operation.metadata field.
 */
export interface EnrollSolutionMetadata {
}

/** Request for ListEnrolledSolutions method. */
export interface ListEnrolledSolutionsRequest {
  /**
   * Required. Full resource name of parent. Format:
   * `projects/{project_number_or_id}`
   */
  parent: string;
}

/** Response for ListEnrolledSolutions method. */
export interface ListEnrolledSolutionsResponse {
  /** Retail API solutions that the project has enrolled. */
  enrolledSolutions: SolutionType[];
}

/**
 * Request for
 * [ProjectService.GetLoggingConfig][google.cloud.retail.v2alpha.ProjectService.GetLoggingConfig]
 * method.
 */
export interface GetLoggingConfigRequest {
  /**
   * Required. Full LoggingConfig resource name. Format:
   * projects/{project_number}/loggingConfig
   */
  name: string;
}

/**
 * Request for
 * [ProjectService.UpdateLoggingConfig][google.cloud.retail.v2alpha.ProjectService.UpdateLoggingConfig]
 * method.
 */
export interface UpdateLoggingConfigRequest {
  /**
   * Required. The [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] to
   * update.
   *
   * If the caller does not have permission to update the
   * [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig], then a
   * PERMISSION_DENIED error is returned.
   *
   * If the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] to update
   * does not exist, a NOT_FOUND error is returned.
   */
  loggingConfig:
    | LoggingConfig
    | undefined;
  /**
   * Indicates which fields in the provided
   * [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] to update. The
   * following are the only supported fields:
   *
   * * [LoggingConfig.default_log_generation_rule][google.cloud.retail.v2alpha.LoggingConfig.default_log_generation_rule]
   * * [LoggingConfig.service_log_generation_rules][google.cloud.retail.v2alpha.LoggingConfig.service_log_generation_rules]
   *
   * If not set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/**
 * Request for
 * [ProjectService.GetAlertConfig][google.cloud.retail.v2alpha.ProjectService.GetAlertConfig]
 * method.
 */
export interface GetAlertConfigRequest {
  /**
   * Required. Full AlertConfig resource name. Format:
   * projects/{project_number}/alertConfig
   */
  name: string;
}

/**
 * Request for
 * [ProjectService.UpdateAlertConfig][google.cloud.retail.v2alpha.ProjectService.UpdateAlertConfig]
 * method.
 */
export interface UpdateAlertConfigRequest {
  /**
   * Required. The [AlertConfig][google.cloud.retail.v2alpha.AlertConfig] to
   * update.
   *
   * If the caller does not have permission to update the
   * [AlertConfig][google.cloud.retail.v2alpha.AlertConfig], then a
   * PERMISSION_DENIED error is returned.
   *
   * If the [AlertConfig][google.cloud.retail.v2alpha.AlertConfig] to update
   * does not exist, a NOT_FOUND error is returned.
   */
  alertConfig:
    | AlertConfig
    | undefined;
  /**
   * Indicates which fields in the provided
   * [AlertConfig][google.cloud.retail.v2alpha.AlertConfig] to update. If not
   * set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

function createBaseGetProjectRequest(): GetProjectRequest {
  return { name: "" };
}

export const GetProjectRequest: MessageFns<GetProjectRequest> = {
  encode(message: GetProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProjectRequest>): GetProjectRequest {
    return GetProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectRequest>): GetProjectRequest {
    const message = createBaseGetProjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAcceptTermsRequest(): AcceptTermsRequest {
  return { project: "" };
}

export const AcceptTermsRequest: MessageFns<AcceptTermsRequest> = {
  encode(message: AcceptTermsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptTermsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptTermsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptTermsRequest {
    return { project: isSet(object.project) ? globalThis.String(object.project) : "" };
  },

  toJSON(message: AcceptTermsRequest): unknown {
    const obj: any = {};
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<AcceptTermsRequest>): AcceptTermsRequest {
    return AcceptTermsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AcceptTermsRequest>): AcceptTermsRequest {
    const message = createBaseAcceptTermsRequest();
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseEnrollSolutionRequest(): EnrollSolutionRequest {
  return { project: "", solution: 0 };
}

export const EnrollSolutionRequest: MessageFns<EnrollSolutionRequest> = {
  encode(message: EnrollSolutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.solution !== 0) {
      writer.uint32(16).int32(message.solution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnrollSolutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnrollSolutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.solution = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnrollSolutionRequest {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      solution: isSet(object.solution) ? solutionTypeFromJSON(object.solution) : 0,
    };
  },

  toJSON(message: EnrollSolutionRequest): unknown {
    const obj: any = {};
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.solution !== 0) {
      obj.solution = solutionTypeToJSON(message.solution);
    }
    return obj;
  },

  create(base?: DeepPartial<EnrollSolutionRequest>): EnrollSolutionRequest {
    return EnrollSolutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnrollSolutionRequest>): EnrollSolutionRequest {
    const message = createBaseEnrollSolutionRequest();
    message.project = object.project ?? "";
    message.solution = object.solution ?? 0;
    return message;
  },
};

function createBaseEnrollSolutionResponse(): EnrollSolutionResponse {
  return { enrolledSolution: 0 };
}

export const EnrollSolutionResponse: MessageFns<EnrollSolutionResponse> = {
  encode(message: EnrollSolutionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enrolledSolution !== 0) {
      writer.uint32(8).int32(message.enrolledSolution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnrollSolutionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnrollSolutionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enrolledSolution = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnrollSolutionResponse {
    return { enrolledSolution: isSet(object.enrolledSolution) ? solutionTypeFromJSON(object.enrolledSolution) : 0 };
  },

  toJSON(message: EnrollSolutionResponse): unknown {
    const obj: any = {};
    if (message.enrolledSolution !== 0) {
      obj.enrolledSolution = solutionTypeToJSON(message.enrolledSolution);
    }
    return obj;
  },

  create(base?: DeepPartial<EnrollSolutionResponse>): EnrollSolutionResponse {
    return EnrollSolutionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnrollSolutionResponse>): EnrollSolutionResponse {
    const message = createBaseEnrollSolutionResponse();
    message.enrolledSolution = object.enrolledSolution ?? 0;
    return message;
  },
};

function createBaseEnrollSolutionMetadata(): EnrollSolutionMetadata {
  return {};
}

export const EnrollSolutionMetadata: MessageFns<EnrollSolutionMetadata> = {
  encode(_: EnrollSolutionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnrollSolutionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnrollSolutionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnrollSolutionMetadata {
    return {};
  },

  toJSON(_: EnrollSolutionMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EnrollSolutionMetadata>): EnrollSolutionMetadata {
    return EnrollSolutionMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EnrollSolutionMetadata>): EnrollSolutionMetadata {
    const message = createBaseEnrollSolutionMetadata();
    return message;
  },
};

function createBaseListEnrolledSolutionsRequest(): ListEnrolledSolutionsRequest {
  return { parent: "" };
}

export const ListEnrolledSolutionsRequest: MessageFns<ListEnrolledSolutionsRequest> = {
  encode(message: ListEnrolledSolutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnrolledSolutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnrolledSolutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnrolledSolutionsRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ListEnrolledSolutionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnrolledSolutionsRequest>): ListEnrolledSolutionsRequest {
    return ListEnrolledSolutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnrolledSolutionsRequest>): ListEnrolledSolutionsRequest {
    const message = createBaseListEnrolledSolutionsRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListEnrolledSolutionsResponse(): ListEnrolledSolutionsResponse {
  return { enrolledSolutions: [] };
}

export const ListEnrolledSolutionsResponse: MessageFns<ListEnrolledSolutionsResponse> = {
  encode(message: ListEnrolledSolutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.enrolledSolutions) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnrolledSolutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnrolledSolutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.enrolledSolutions.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.enrolledSolutions.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnrolledSolutionsResponse {
    return {
      enrolledSolutions: globalThis.Array.isArray(object?.enrolledSolutions)
        ? object.enrolledSolutions.map((e: any) => solutionTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEnrolledSolutionsResponse): unknown {
    const obj: any = {};
    if (message.enrolledSolutions?.length) {
      obj.enrolledSolutions = message.enrolledSolutions.map((e) => solutionTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnrolledSolutionsResponse>): ListEnrolledSolutionsResponse {
    return ListEnrolledSolutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnrolledSolutionsResponse>): ListEnrolledSolutionsResponse {
    const message = createBaseListEnrolledSolutionsResponse();
    message.enrolledSolutions = object.enrolledSolutions?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetLoggingConfigRequest(): GetLoggingConfigRequest {
  return { name: "" };
}

export const GetLoggingConfigRequest: MessageFns<GetLoggingConfigRequest> = {
  encode(message: GetLoggingConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLoggingConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoggingConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLoggingConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLoggingConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLoggingConfigRequest>): GetLoggingConfigRequest {
    return GetLoggingConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLoggingConfigRequest>): GetLoggingConfigRequest {
    const message = createBaseGetLoggingConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateLoggingConfigRequest(): UpdateLoggingConfigRequest {
  return { loggingConfig: undefined, updateMask: undefined };
}

export const UpdateLoggingConfigRequest: MessageFns<UpdateLoggingConfigRequest> = {
  encode(message: UpdateLoggingConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loggingConfig !== undefined) {
      LoggingConfig.encode(message.loggingConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLoggingConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLoggingConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.loggingConfig = LoggingConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLoggingConfigRequest {
    return {
      loggingConfig: isSet(object.loggingConfig) ? LoggingConfig.fromJSON(object.loggingConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateLoggingConfigRequest): unknown {
    const obj: any = {};
    if (message.loggingConfig !== undefined) {
      obj.loggingConfig = LoggingConfig.toJSON(message.loggingConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLoggingConfigRequest>): UpdateLoggingConfigRequest {
    return UpdateLoggingConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLoggingConfigRequest>): UpdateLoggingConfigRequest {
    const message = createBaseUpdateLoggingConfigRequest();
    message.loggingConfig = (object.loggingConfig !== undefined && object.loggingConfig !== null)
      ? LoggingConfig.fromPartial(object.loggingConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAlertConfigRequest(): GetAlertConfigRequest {
  return { name: "" };
}

export const GetAlertConfigRequest: MessageFns<GetAlertConfigRequest> = {
  encode(message: GetAlertConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlertConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlertConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlertConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAlertConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlertConfigRequest>): GetAlertConfigRequest {
    return GetAlertConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlertConfigRequest>): GetAlertConfigRequest {
    const message = createBaseGetAlertConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAlertConfigRequest(): UpdateAlertConfigRequest {
  return { alertConfig: undefined, updateMask: undefined };
}

export const UpdateAlertConfigRequest: MessageFns<UpdateAlertConfigRequest> = {
  encode(message: UpdateAlertConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.alertConfig !== undefined) {
      AlertConfig.encode(message.alertConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAlertConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAlertConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.alertConfig = AlertConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAlertConfigRequest {
    return {
      alertConfig: isSet(object.alertConfig) ? AlertConfig.fromJSON(object.alertConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAlertConfigRequest): unknown {
    const obj: any = {};
    if (message.alertConfig !== undefined) {
      obj.alertConfig = AlertConfig.toJSON(message.alertConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAlertConfigRequest>): UpdateAlertConfigRequest {
    return UpdateAlertConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAlertConfigRequest>): UpdateAlertConfigRequest {
    const message = createBaseUpdateAlertConfigRequest();
    message.alertConfig = (object.alertConfig !== undefined && object.alertConfig !== null)
      ? AlertConfig.fromPartial(object.alertConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** Service for settings at Project level. */
export type ProjectServiceDefinition = typeof ProjectServiceDefinition;
export const ProjectServiceDefinition = {
  name: "ProjectService",
  fullName: "google.cloud.retail.v2alpha.ProjectService",
  methods: {
    /**
     * Gets the project.
     *
     * Throws `NOT_FOUND` if the project wasn't initialized for the Retail API
     * service.
     */
    getProject: {
      name: "GetProject",
      requestType: GetProjectRequest,
      requestStream: false,
      responseType: Project,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              116,
              97,
              105,
              108,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Accepts service terms for this project.
     * By making requests to this API, you agree to the terms of service linked
     * below.
     * https://cloud.google.com/retail/data-use-terms
     */
    acceptTerms: {
      name: "AcceptTerms",
      requestType: AcceptTermsRequest,
      requestStream: false,
      responseType: Project,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 112, 114, 111, 106, 101, 99, 116])],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              116,
              97,
              105,
              108,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              58,
              97,
              99,
              99,
              101,
              112,
              116,
              84,
              101,
              114,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * The method enrolls a solution of type [Retail
     * Search][google.cloud.retail.v2alpha.SolutionType.SOLUTION_TYPE_SEARCH]
     * into a project.
     *
     * The [Recommendations AI solution
     * type][google.cloud.retail.v2alpha.SolutionType.SOLUTION_TYPE_RECOMMENDATION]
     * is enrolled by default when your project enables Retail API, so you don't
     * need to call the enrollSolution method for recommendations.
     */
    enrollSolution: {
      name: "EnrollSolution",
      requestType: EnrollSolutionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              104,
              10,
              50,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              46,
              69,
              110,
              114,
              111,
              108,
              108,
              83,
              111,
              108,
              117,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              50,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              46,
              69,
              110,
              114,
              111,
              108,
              108,
              83,
              111,
              108,
              117,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              58,
              1,
              42,
              34,
              44,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              114,
              111,
              108,
              108,
              83,
              111,
              108,
              117,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Lists all the retail API solutions the project has enrolled. */
    listEnrolledSolutions: {
      name: "ListEnrolledSolutions",
      requestType: ListEnrolledSolutionsRequest,
      requestStream: false,
      responseType: ListEnrolledSolutionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              114,
              111,
              108,
              108,
              101,
              100,
              83,
              111,
              108,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] of the
     * requested project.
     */
    getLoggingConfig: {
      name: "GetLoggingConfig",
      requestType: GetLoggingConfigRequest,
      requestStream: false,
      responseType: LoggingConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              103,
              103,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] of
     * the requested project.
     */
    updateLoggingConfig: {
      name: "UpdateLoggingConfig",
      requestType: UpdateLoggingConfigRequest,
      requestStream: false,
      responseType: LoggingConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              108,
              111,
              103,
              103,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              14,
              108,
              111,
              103,
              103,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              55,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              108,
              111,
              103,
              103,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              103,
              103,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Get the [AlertConfig][google.cloud.retail.v2alpha.AlertConfig] of the
     * requested project.
     */
    getAlertConfig: {
      name: "GetAlertConfig",
      requestType: GetAlertConfigRequest,
      requestStream: false,
      responseType: AlertConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              108,
              101,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /** Update the alert config of the requested project. */
    updateAlertConfig: {
      name: "UpdateAlertConfig",
      requestType: UpdateAlertConfigRequest,
      requestStream: false,
      responseType: AlertConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              97,
              108,
              101,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              12,
              97,
              108,
              101,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              51,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              108,
              101,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              108,
              101,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProjectServiceImplementation<CallContextExt = {}> {
  /**
   * Gets the project.
   *
   * Throws `NOT_FOUND` if the project wasn't initialized for the Retail API
   * service.
   */
  getProject(request: GetProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Project>>;
  /**
   * Accepts service terms for this project.
   * By making requests to this API, you agree to the terms of service linked
   * below.
   * https://cloud.google.com/retail/data-use-terms
   */
  acceptTerms(request: AcceptTermsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Project>>;
  /**
   * The method enrolls a solution of type [Retail
   * Search][google.cloud.retail.v2alpha.SolutionType.SOLUTION_TYPE_SEARCH]
   * into a project.
   *
   * The [Recommendations AI solution
   * type][google.cloud.retail.v2alpha.SolutionType.SOLUTION_TYPE_RECOMMENDATION]
   * is enrolled by default when your project enables Retail API, so you don't
   * need to call the enrollSolution method for recommendations.
   */
  enrollSolution(
    request: EnrollSolutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists all the retail API solutions the project has enrolled. */
  listEnrolledSolutions(
    request: ListEnrolledSolutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEnrolledSolutionsResponse>>;
  /**
   * Gets the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] of the
   * requested project.
   */
  getLoggingConfig(
    request: GetLoggingConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LoggingConfig>>;
  /**
   * Updates the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] of
   * the requested project.
   */
  updateLoggingConfig(
    request: UpdateLoggingConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LoggingConfig>>;
  /**
   * Get the [AlertConfig][google.cloud.retail.v2alpha.AlertConfig] of the
   * requested project.
   */
  getAlertConfig(
    request: GetAlertConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlertConfig>>;
  /** Update the alert config of the requested project. */
  updateAlertConfig(
    request: UpdateAlertConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlertConfig>>;
}

export interface ProjectServiceClient<CallOptionsExt = {}> {
  /**
   * Gets the project.
   *
   * Throws `NOT_FOUND` if the project wasn't initialized for the Retail API
   * service.
   */
  getProject(request: DeepPartial<GetProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Project>;
  /**
   * Accepts service terms for this project.
   * By making requests to this API, you agree to the terms of service linked
   * below.
   * https://cloud.google.com/retail/data-use-terms
   */
  acceptTerms(request: DeepPartial<AcceptTermsRequest>, options?: CallOptions & CallOptionsExt): Promise<Project>;
  /**
   * The method enrolls a solution of type [Retail
   * Search][google.cloud.retail.v2alpha.SolutionType.SOLUTION_TYPE_SEARCH]
   * into a project.
   *
   * The [Recommendations AI solution
   * type][google.cloud.retail.v2alpha.SolutionType.SOLUTION_TYPE_RECOMMENDATION]
   * is enrolled by default when your project enables Retail API, so you don't
   * need to call the enrollSolution method for recommendations.
   */
  enrollSolution(
    request: DeepPartial<EnrollSolutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists all the retail API solutions the project has enrolled. */
  listEnrolledSolutions(
    request: DeepPartial<ListEnrolledSolutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEnrolledSolutionsResponse>;
  /**
   * Gets the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] of the
   * requested project.
   */
  getLoggingConfig(
    request: DeepPartial<GetLoggingConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LoggingConfig>;
  /**
   * Updates the [LoggingConfig][google.cloud.retail.v2alpha.LoggingConfig] of
   * the requested project.
   */
  updateLoggingConfig(
    request: DeepPartial<UpdateLoggingConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LoggingConfig>;
  /**
   * Get the [AlertConfig][google.cloud.retail.v2alpha.AlertConfig] of the
   * requested project.
   */
  getAlertConfig(
    request: DeepPartial<GetAlertConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlertConfig>;
  /** Update the alert config of the requested project. */
  updateAlertConfig(
    request: DeepPartial<UpdateAlertConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlertConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
