// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/merchant_center_account_link.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/**
 * Represents a link between a Merchant Center account and a branch.
 * After a link is established, products from the linked Merchant Center account
 * are streamed to the linked branch.
 */
export interface MerchantCenterAccountLink {
  /**
   * Output only. Immutable. Full resource name of the Merchant Center Account
   * Link, such as
   * `projects/* /locations/global/catalogs/default_catalog/merchantCenterAccountLinks/merchant_center_account_link`.
   */
  name: string;
  /**
   * Output only. Immutable.
   * [MerchantCenterAccountLink][google.cloud.retail.v2alpha.MerchantCenterAccountLink]
   * identifier, which is the final component of
   * [name][google.cloud.retail.v2alpha.MerchantCenterAccountLink.name]. This
   * field is auto generated and follows the convention:
   * `BranchId_MerchantCenterAccountId`.
   * `projects/* /locations/global/catalogs/default_catalog/merchantCenterAccountLinks/id_1`.
   */
  id: string;
  /**
   * Required. The linked [Merchant center account
   * id](https://developers.google.com/shopping-content/guides/accountstatuses).
   * The account must be a standalone account or a sub-account of a MCA.
   */
  merchantCenterAccountId: Long;
  /**
   * Required. The branch ID (e.g. 0/1/2) within the catalog that products from
   * merchant_center_account_id are streamed to. When updating this field, an
   * empty value will use the currently configured default branch. However,
   * changing the default branch later on won't change the linked branch here.
   *
   * A single branch ID can only have one linked Merchant Center account ID.
   */
  branchId: string;
  /**
   * The FeedLabel used to perform filtering.
   * Note: this replaces
   * [region_id](https://developers.google.com/shopping-content/reference/rest/v2.1/products#Product.FIELDS.feed_label).
   *
   * Example value: `US`.
   * Example value: `FeedLabel1`.
   */
  feedLabel: string;
  /**
   * Language of the title/description and other string attributes. Use language
   * tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).
   * ISO 639-1.
   *
   * This specifies the language of offers in Merchant Center that will be
   * accepted. If empty, no language filtering will be performed.
   *
   * Example value: `en`.
   */
  languageCode: string;
  /**
   * Criteria for the Merchant Center feeds to be ingested via the link.
   * All offers will be ingested if the list is empty.
   * Otherwise the offers will be ingested from selected feeds.
   */
  feedFilters: MerchantCenterAccountLink_MerchantCenterFeedFilter[];
  /** Output only. Represents the state of the link. */
  state: MerchantCenterAccountLink_State;
  /** Output only. Google Cloud project ID. */
  projectId: string;
  /**
   * Optional. An optional arbitrary string that could be used as a tag for
   * tracking link source.
   */
  source: string;
}

/** The state of the link. */
export enum MerchantCenterAccountLink_State {
  /** STATE_UNSPECIFIED - Default value. */
  STATE_UNSPECIFIED = 0,
  /** PENDING - Link is created and LRO is not complete. */
  PENDING = 1,
  /** ACTIVE - Link is active. */
  ACTIVE = 2,
  /** FAILED - Link creation failed. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function merchantCenterAccountLink_StateFromJSON(object: any): MerchantCenterAccountLink_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return MerchantCenterAccountLink_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return MerchantCenterAccountLink_State.PENDING;
    case 2:
    case "ACTIVE":
      return MerchantCenterAccountLink_State.ACTIVE;
    case 3:
    case "FAILED":
      return MerchantCenterAccountLink_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MerchantCenterAccountLink_State.UNRECOGNIZED;
  }
}

export function merchantCenterAccountLink_StateToJSON(object: MerchantCenterAccountLink_State): string {
  switch (object) {
    case MerchantCenterAccountLink_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case MerchantCenterAccountLink_State.PENDING:
      return "PENDING";
    case MerchantCenterAccountLink_State.ACTIVE:
      return "ACTIVE";
    case MerchantCenterAccountLink_State.FAILED:
      return "FAILED";
    case MerchantCenterAccountLink_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Merchant Center Feed filter criterion. */
export interface MerchantCenterAccountLink_MerchantCenterFeedFilter {
  /** Merchant Center primary feed ID. */
  primaryFeedId: Long;
  /**
   * Merchant Center primary feed name. The name is used for the display
   * purposes only.
   */
  primaryFeedName: string;
}

/** Common metadata related to the progress of the operations. */
export interface CreateMerchantCenterAccountLinkMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

function createBaseMerchantCenterAccountLink(): MerchantCenterAccountLink {
  return {
    name: "",
    id: "",
    merchantCenterAccountId: Long.ZERO,
    branchId: "",
    feedLabel: "",
    languageCode: "",
    feedFilters: [],
    state: 0,
    projectId: "",
    source: "",
  };
}

export const MerchantCenterAccountLink: MessageFns<MerchantCenterAccountLink> = {
  encode(message: MerchantCenterAccountLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(66).string(message.id);
    }
    if (!message.merchantCenterAccountId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.merchantCenterAccountId.toString());
    }
    if (message.branchId !== "") {
      writer.uint32(26).string(message.branchId);
    }
    if (message.feedLabel !== "") {
      writer.uint32(34).string(message.feedLabel);
    }
    if (message.languageCode !== "") {
      writer.uint32(42).string(message.languageCode);
    }
    for (const v of message.feedFilters) {
      MerchantCenterAccountLink_MerchantCenterFeedFilter.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.projectId !== "") {
      writer.uint32(74).string(message.projectId);
    }
    if (message.source !== "") {
      writer.uint32(82).string(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MerchantCenterAccountLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerchantCenterAccountLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.merchantCenterAccountId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.branchId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.feedFilters.push(MerchantCenterAccountLink_MerchantCenterFeedFilter.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.source = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MerchantCenterAccountLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      merchantCenterAccountId: isSet(object.merchantCenterAccountId)
        ? Long.fromValue(object.merchantCenterAccountId)
        : Long.ZERO,
      branchId: isSet(object.branchId) ? globalThis.String(object.branchId) : "",
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      feedFilters: globalThis.Array.isArray(object?.feedFilters)
        ? object.feedFilters.map((e: any) => MerchantCenterAccountLink_MerchantCenterFeedFilter.fromJSON(e))
        : [],
      state: isSet(object.state) ? merchantCenterAccountLink_StateFromJSON(object.state) : 0,
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
    };
  },

  toJSON(message: MerchantCenterAccountLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (!message.merchantCenterAccountId.equals(Long.ZERO)) {
      obj.merchantCenterAccountId = (message.merchantCenterAccountId || Long.ZERO).toString();
    }
    if (message.branchId !== "") {
      obj.branchId = message.branchId;
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.feedFilters?.length) {
      obj.feedFilters = message.feedFilters.map((e) => MerchantCenterAccountLink_MerchantCenterFeedFilter.toJSON(e));
    }
    if (message.state !== 0) {
      obj.state = merchantCenterAccountLink_StateToJSON(message.state);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    return obj;
  },

  create(base?: DeepPartial<MerchantCenterAccountLink>): MerchantCenterAccountLink {
    return MerchantCenterAccountLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MerchantCenterAccountLink>): MerchantCenterAccountLink {
    const message = createBaseMerchantCenterAccountLink();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.merchantCenterAccountId =
      (object.merchantCenterAccountId !== undefined && object.merchantCenterAccountId !== null)
        ? Long.fromValue(object.merchantCenterAccountId)
        : Long.ZERO;
    message.branchId = object.branchId ?? "";
    message.feedLabel = object.feedLabel ?? "";
    message.languageCode = object.languageCode ?? "";
    message.feedFilters =
      object.feedFilters?.map((e) => MerchantCenterAccountLink_MerchantCenterFeedFilter.fromPartial(e)) || [];
    message.state = object.state ?? 0;
    message.projectId = object.projectId ?? "";
    message.source = object.source ?? "";
    return message;
  },
};

function createBaseMerchantCenterAccountLink_MerchantCenterFeedFilter(): MerchantCenterAccountLink_MerchantCenterFeedFilter {
  return { primaryFeedId: Long.ZERO, primaryFeedName: "" };
}

export const MerchantCenterAccountLink_MerchantCenterFeedFilter: MessageFns<
  MerchantCenterAccountLink_MerchantCenterFeedFilter
> = {
  encode(
    message: MerchantCenterAccountLink_MerchantCenterFeedFilter,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (!message.primaryFeedId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.primaryFeedId.toString());
    }
    if (message.primaryFeedName !== "") {
      writer.uint32(18).string(message.primaryFeedName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MerchantCenterAccountLink_MerchantCenterFeedFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerchantCenterAccountLink_MerchantCenterFeedFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.primaryFeedId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.primaryFeedName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MerchantCenterAccountLink_MerchantCenterFeedFilter {
    return {
      primaryFeedId: isSet(object.primaryFeedId) ? Long.fromValue(object.primaryFeedId) : Long.ZERO,
      primaryFeedName: isSet(object.primaryFeedName) ? globalThis.String(object.primaryFeedName) : "",
    };
  },

  toJSON(message: MerchantCenterAccountLink_MerchantCenterFeedFilter): unknown {
    const obj: any = {};
    if (!message.primaryFeedId.equals(Long.ZERO)) {
      obj.primaryFeedId = (message.primaryFeedId || Long.ZERO).toString();
    }
    if (message.primaryFeedName !== "") {
      obj.primaryFeedName = message.primaryFeedName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MerchantCenterAccountLink_MerchantCenterFeedFilter>,
  ): MerchantCenterAccountLink_MerchantCenterFeedFilter {
    return MerchantCenterAccountLink_MerchantCenterFeedFilter.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MerchantCenterAccountLink_MerchantCenterFeedFilter>,
  ): MerchantCenterAccountLink_MerchantCenterFeedFilter {
    const message = createBaseMerchantCenterAccountLink_MerchantCenterFeedFilter();
    message.primaryFeedId = (object.primaryFeedId !== undefined && object.primaryFeedId !== null)
      ? Long.fromValue(object.primaryFeedId)
      : Long.ZERO;
    message.primaryFeedName = object.primaryFeedName ?? "";
    return message;
  },
};

function createBaseCreateMerchantCenterAccountLinkMetadata(): CreateMerchantCenterAccountLinkMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const CreateMerchantCenterAccountLinkMetadata: MessageFns<CreateMerchantCenterAccountLinkMetadata> = {
  encode(message: CreateMerchantCenterAccountLinkMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMerchantCenterAccountLinkMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMerchantCenterAccountLinkMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMerchantCenterAccountLinkMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: CreateMerchantCenterAccountLinkMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMerchantCenterAccountLinkMetadata>): CreateMerchantCenterAccountLinkMetadata {
    return CreateMerchantCenterAccountLinkMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMerchantCenterAccountLinkMetadata>): CreateMerchantCenterAccountLinkMetadata {
    const message = createBaseCreateMerchantCenterAccountLinkMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
