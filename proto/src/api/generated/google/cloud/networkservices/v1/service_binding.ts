// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkservices/v1/service_binding.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkservices.v1";

/**
 * ServiceBinding is the resource that defines a Service Directory Service to
 * be used in a BackendService resource.
 */
export interface ServiceBinding {
  /**
   * Required. Name of the ServiceBinding resource. It matches pattern
   * `projects/* /locations/global/serviceBindings/service_binding_name`.
   */
  name: string;
  /**
   * Optional. A free-text description of the resource. Max length 1024
   * characters.
   */
  description: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Required. The full service directory service name of the format
   * /projects/* /locations/* /namespaces/* /services/*
   */
  service: string;
  /** Optional. Set of label tags associated with the ServiceBinding resource. */
  labels: { [key: string]: string };
}

export interface ServiceBinding_LabelsEntry {
  key: string;
  value: string;
}

/** Request used with the ListServiceBindings method. */
export interface ListServiceBindingsRequest {
  /**
   * Required. The project and location from which the ServiceBindings should be
   * listed, specified in the format `projects/* /locations/global`.
   */
  parent: string;
  /** Maximum number of ServiceBindings to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListServiceBindingsResponse`
   * Indicates that this is a continuation of a prior `ListRouters` call,
   * and that the system should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListServiceBindings method. */
export interface ListServiceBindingsResponse {
  /** List of ServiceBinding resources. */
  serviceBindings: ServiceBinding[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetServiceBinding method. */
export interface GetServiceBindingRequest {
  /**
   * Required. A name of the ServiceBinding to get. Must be in the format
   * `projects/* /locations/global/serviceBindings/*`.
   */
  name: string;
}

/** Request used by the ServiceBinding method. */
export interface CreateServiceBindingRequest {
  /**
   * Required. The parent resource of the ServiceBinding. Must be in the
   * format `projects/* /locations/global`.
   */
  parent: string;
  /** Required. Short name of the ServiceBinding resource to be created. */
  serviceBindingId: string;
  /** Required. ServiceBinding resource to be created. */
  serviceBinding: ServiceBinding | undefined;
}

/** Request used by the DeleteServiceBinding method. */
export interface DeleteServiceBindingRequest {
  /**
   * Required. A name of the ServiceBinding to delete. Must be in the format
   * `projects/* /locations/global/serviceBindings/*`.
   */
  name: string;
}

function createBaseServiceBinding(): ServiceBinding {
  return { name: "", description: "", createTime: undefined, updateTime: undefined, service: "", labels: {} };
}

export const ServiceBinding: MessageFns<ServiceBinding> = {
  encode(message: ServiceBinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.service !== "") {
      writer.uint32(42).string(message.service);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ServiceBinding_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.service = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = ServiceBinding_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceBinding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ServiceBinding): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceBinding>): ServiceBinding {
    return ServiceBinding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceBinding>): ServiceBinding {
    const message = createBaseServiceBinding();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.service = object.service ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseServiceBinding_LabelsEntry(): ServiceBinding_LabelsEntry {
  return { key: "", value: "" };
}

export const ServiceBinding_LabelsEntry: MessageFns<ServiceBinding_LabelsEntry> = {
  encode(message: ServiceBinding_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceBinding_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceBinding_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceBinding_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ServiceBinding_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceBinding_LabelsEntry>): ServiceBinding_LabelsEntry {
    return ServiceBinding_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceBinding_LabelsEntry>): ServiceBinding_LabelsEntry {
    const message = createBaseServiceBinding_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListServiceBindingsRequest(): ListServiceBindingsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListServiceBindingsRequest: MessageFns<ListServiceBindingsRequest> = {
  encode(message: ListServiceBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListServiceBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceBindingsRequest>): ListServiceBindingsRequest {
    return ListServiceBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceBindingsRequest>): ListServiceBindingsRequest {
    const message = createBaseListServiceBindingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListServiceBindingsResponse(): ListServiceBindingsResponse {
  return { serviceBindings: [], nextPageToken: "" };
}

export const ListServiceBindingsResponse: MessageFns<ListServiceBindingsResponse> = {
  encode(message: ListServiceBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.serviceBindings) {
      ServiceBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceBindings.push(ServiceBinding.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceBindingsResponse {
    return {
      serviceBindings: globalThis.Array.isArray(object?.serviceBindings)
        ? object.serviceBindings.map((e: any) => ServiceBinding.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServiceBindingsResponse): unknown {
    const obj: any = {};
    if (message.serviceBindings?.length) {
      obj.serviceBindings = message.serviceBindings.map((e) => ServiceBinding.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceBindingsResponse>): ListServiceBindingsResponse {
    return ListServiceBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceBindingsResponse>): ListServiceBindingsResponse {
    const message = createBaseListServiceBindingsResponse();
    message.serviceBindings = object.serviceBindings?.map((e) => ServiceBinding.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServiceBindingRequest(): GetServiceBindingRequest {
  return { name: "" };
}

export const GetServiceBindingRequest: MessageFns<GetServiceBindingRequest> = {
  encode(message: GetServiceBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceBindingRequest>): GetServiceBindingRequest {
    return GetServiceBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceBindingRequest>): GetServiceBindingRequest {
    const message = createBaseGetServiceBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateServiceBindingRequest(): CreateServiceBindingRequest {
  return { parent: "", serviceBindingId: "", serviceBinding: undefined };
}

export const CreateServiceBindingRequest: MessageFns<CreateServiceBindingRequest> = {
  encode(message: CreateServiceBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serviceBindingId !== "") {
      writer.uint32(18).string(message.serviceBindingId);
    }
    if (message.serviceBinding !== undefined) {
      ServiceBinding.encode(message.serviceBinding, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceBindingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceBinding = ServiceBinding.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceBindingRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceBindingId: isSet(object.serviceBindingId) ? globalThis.String(object.serviceBindingId) : "",
      serviceBinding: isSet(object.serviceBinding) ? ServiceBinding.fromJSON(object.serviceBinding) : undefined,
    };
  },

  toJSON(message: CreateServiceBindingRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceBindingId !== "") {
      obj.serviceBindingId = message.serviceBindingId;
    }
    if (message.serviceBinding !== undefined) {
      obj.serviceBinding = ServiceBinding.toJSON(message.serviceBinding);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceBindingRequest>): CreateServiceBindingRequest {
    return CreateServiceBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceBindingRequest>): CreateServiceBindingRequest {
    const message = createBaseCreateServiceBindingRequest();
    message.parent = object.parent ?? "";
    message.serviceBindingId = object.serviceBindingId ?? "";
    message.serviceBinding = (object.serviceBinding !== undefined && object.serviceBinding !== null)
      ? ServiceBinding.fromPartial(object.serviceBinding)
      : undefined;
    return message;
  },
};

function createBaseDeleteServiceBindingRequest(): DeleteServiceBindingRequest {
  return { name: "" };
}

export const DeleteServiceBindingRequest: MessageFns<DeleteServiceBindingRequest> = {
  encode(message: DeleteServiceBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteServiceBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceBindingRequest>): DeleteServiceBindingRequest {
    return DeleteServiceBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceBindingRequest>): DeleteServiceBindingRequest {
    const message = createBaseDeleteServiceBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
