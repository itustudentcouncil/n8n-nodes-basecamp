// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkservices/v1/dep.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkservices.v1";

/** The part of the request or response for which the extension is called. */
export enum EventType {
  /** EVENT_TYPE_UNSPECIFIED - Unspecified value. Do not use. */
  EVENT_TYPE_UNSPECIFIED = 0,
  /**
   * REQUEST_HEADERS - If included in `supported_events`,
   * the extension is called when the HTTP request headers arrive.
   */
  REQUEST_HEADERS = 1,
  /**
   * REQUEST_BODY - If included in `supported_events`,
   * the extension is called when the HTTP request body arrives.
   */
  REQUEST_BODY = 2,
  /**
   * RESPONSE_HEADERS - If included in `supported_events`,
   * the extension is called when the HTTP response headers arrive.
   */
  RESPONSE_HEADERS = 3,
  /**
   * RESPONSE_BODY - If included in `supported_events`,
   * the extension is called when the HTTP response body arrives.
   */
  RESPONSE_BODY = 4,
  /**
   * REQUEST_TRAILERS - If included in `supported_events`,
   * the extension is called when the HTTP request trailers arrives.
   */
  REQUEST_TRAILERS = 5,
  /**
   * RESPONSE_TRAILERS - If included in `supported_events`,
   * the extension is called when the HTTP response trailers arrives.
   */
  RESPONSE_TRAILERS = 6,
  UNRECOGNIZED = -1,
}

export function eventTypeFromJSON(object: any): EventType {
  switch (object) {
    case 0:
    case "EVENT_TYPE_UNSPECIFIED":
      return EventType.EVENT_TYPE_UNSPECIFIED;
    case 1:
    case "REQUEST_HEADERS":
      return EventType.REQUEST_HEADERS;
    case 2:
    case "REQUEST_BODY":
      return EventType.REQUEST_BODY;
    case 3:
    case "RESPONSE_HEADERS":
      return EventType.RESPONSE_HEADERS;
    case 4:
    case "RESPONSE_BODY":
      return EventType.RESPONSE_BODY;
    case 5:
    case "REQUEST_TRAILERS":
      return EventType.REQUEST_TRAILERS;
    case 6:
    case "RESPONSE_TRAILERS":
      return EventType.RESPONSE_TRAILERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventType.UNRECOGNIZED;
  }
}

export function eventTypeToJSON(object: EventType): string {
  switch (object) {
    case EventType.EVENT_TYPE_UNSPECIFIED:
      return "EVENT_TYPE_UNSPECIFIED";
    case EventType.REQUEST_HEADERS:
      return "REQUEST_HEADERS";
    case EventType.REQUEST_BODY:
      return "REQUEST_BODY";
    case EventType.RESPONSE_HEADERS:
      return "RESPONSE_HEADERS";
    case EventType.RESPONSE_BODY:
      return "RESPONSE_BODY";
    case EventType.REQUEST_TRAILERS:
      return "REQUEST_TRAILERS";
    case EventType.RESPONSE_TRAILERS:
      return "RESPONSE_TRAILERS";
    case EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Load balancing schemes supported by the `LbTrafficExtension` resource and
 * `LbRouteExtension` resource.
 * For more information, refer to [Choosing a load
 * balancer](https://cloud.google.com/load-balancing/docs/backend-service).
 */
export enum LoadBalancingScheme {
  /** LOAD_BALANCING_SCHEME_UNSPECIFIED - Default value. Do not use. */
  LOAD_BALANCING_SCHEME_UNSPECIFIED = 0,
  /** INTERNAL_MANAGED - Signifies that this is used for Internal HTTP(S) Load Balancing. */
  INTERNAL_MANAGED = 1,
  /**
   * EXTERNAL_MANAGED - Signifies that this is used for External Managed HTTP(S) Load
   * Balancing.
   */
  EXTERNAL_MANAGED = 2,
  UNRECOGNIZED = -1,
}

export function loadBalancingSchemeFromJSON(object: any): LoadBalancingScheme {
  switch (object) {
    case 0:
    case "LOAD_BALANCING_SCHEME_UNSPECIFIED":
      return LoadBalancingScheme.LOAD_BALANCING_SCHEME_UNSPECIFIED;
    case 1:
    case "INTERNAL_MANAGED":
      return LoadBalancingScheme.INTERNAL_MANAGED;
    case 2:
    case "EXTERNAL_MANAGED":
      return LoadBalancingScheme.EXTERNAL_MANAGED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LoadBalancingScheme.UNRECOGNIZED;
  }
}

export function loadBalancingSchemeToJSON(object: LoadBalancingScheme): string {
  switch (object) {
    case LoadBalancingScheme.LOAD_BALANCING_SCHEME_UNSPECIFIED:
      return "LOAD_BALANCING_SCHEME_UNSPECIFIED";
    case LoadBalancingScheme.INTERNAL_MANAGED:
      return "INTERNAL_MANAGED";
    case LoadBalancingScheme.EXTERNAL_MANAGED:
      return "EXTERNAL_MANAGED";
    case LoadBalancingScheme.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A single extension chain wrapper that contains the match conditions and
 * extensions to execute.
 */
export interface ExtensionChain {
  /**
   * Required. The name for this extension chain.
   * The name is logged as part of the HTTP request logs.
   * The name must conform with RFC-1034, is restricted to lower-cased letters,
   * numbers and hyphens, and can have a maximum length of 63 characters.
   * Additionally, the first character must be a letter and the last a letter or
   * a number.
   */
  name: string;
  /** Required. Conditions under which this chain is invoked for a request. */
  matchCondition:
    | ExtensionChain_MatchCondition
    | undefined;
  /**
   * Required. A set of extensions to execute for the matching request.
   * At least one extension is required.
   * Up to 3 extensions can be defined for each extension chain
   * for `LbTrafficExtension` resource.
   * `LbRouteExtension` chains are limited to 1 extension per extension chain.
   */
  extensions: ExtensionChain_Extension[];
}

/** Conditions under which this chain is invoked for a request. */
export interface ExtensionChain_MatchCondition {
  /**
   * Required. A Common Expression Language (CEL) expression that is used to
   * match requests for which the extension chain is executed.
   *
   * For more information, see [CEL matcher language
   * reference](https://cloud.google.com/service-extensions/docs/cel-matcher-language-reference).
   */
  celExpression: string;
}

/** A single extension in the chain to execute for the matching request. */
export interface ExtensionChain_Extension {
  /**
   * Required. The name for this extension.
   * The name is logged as part of the HTTP request logs.
   * The name must conform with RFC-1034, is restricted to lower-cased
   * letters, numbers and hyphens, and can have a maximum length of 63
   * characters. Additionally, the first character must be a letter and the
   * last a letter or a number.
   */
  name: string;
  /**
   * Optional. The `:authority` header in the gRPC request sent from Envoy
   * to the extension service.
   * Required for Callout extensions.
   */
  authority: string;
  /**
   * Required. The reference to the service that runs the extension.
   *
   * Currently only callout extensions are supported here.
   *
   * To configure a callout extension, `service` must be a fully-qualified
   * reference
   * to a [backend
   * service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices)
   * in the format:
   * `https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}`
   * or
   * `https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}`.
   */
  service: string;
  /**
   * Optional. A set of events during request or response processing for which
   * this extension is called. This field is required for the
   * `LbTrafficExtension` resource. It must not be set for the
   * `LbRouteExtension` resource.
   */
  supportedEvents: EventType[];
  /**
   * Optional. Specifies the timeout for each individual message on the
   * stream. The timeout must be between 10-1000 milliseconds. Required for
   * Callout extensions.
   */
  timeout:
    | Duration
    | undefined;
  /**
   * Optional. Determines how the proxy behaves if the call to the extension
   * fails or times out.
   *
   * When set to `TRUE`, request or response processing continues without
   * error. Any subsequent extensions in the extension chain are also
   * executed. When set to `FALSE` or the default setting of `FALSE` is used,
   * one of the following happens:
   *
   * * If response headers have not been delivered to the downstream client,
   * a generic 500 error is returned to the client. The error response can be
   * tailored by configuring a custom error response in the load balancer.
   *
   * * If response headers have been delivered, then the HTTP stream to the
   * downstream client is reset.
   */
  failOpen: boolean;
  /**
   * Optional. List of the HTTP headers to forward to the extension
   * (from the client or backend). If omitted, all headers are sent.
   * Each element is a string indicating the header name.
   */
  forwardHeaders: string[];
}

/**
 * `LbTrafficExtension` is a resource that lets the extension service modify the
 * headers and payloads of both requests and responses without impacting the
 * choice of backend services or any other security policies associated with the
 * backend service.
 */
export interface LbTrafficExtension {
  /**
   * Required. Identifier. Name of the `LbTrafficExtension` resource in the
   * following format:
   * `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
   */
  name: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. A human-readable description of the resource. */
  description: string;
  /**
   * Optional. Set of labels associated with the `LbTrafficExtension` resource.
   *
   * The format must comply with [the requirements for
   * labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
   * for Google Cloud resources.
   */
  labels: { [key: string]: string };
  /**
   * Required. A list of references to the forwarding rules to which this
   * service extension is attached to. At least one forwarding rule is required.
   * There can be only one `LBTrafficExtension` resource per forwarding rule.
   */
  forwardingRules: string[];
  /**
   * Required. A set of ordered extension chains that contain the match
   * conditions and extensions to execute. Match conditions for each extension
   * chain are evaluated in sequence for a given request. The first extension
   * chain that has a condition that matches the request is executed.
   * Any subsequent extension chains do not execute.
   * Limited to 5 extension chains per resource.
   */
  extensionChains: ExtensionChain[];
  /**
   * Required. All backend services and forwarding rules referenced by this
   * extension must share the same load balancing scheme. Supported values:
   * `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to
   * [Choosing a load
   * balancer](https://cloud.google.com/load-balancing/docs/backend-service).
   */
  loadBalancingScheme: LoadBalancingScheme;
  /**
   * Optional. The metadata provided here is included in the
   * `ProcessingRequest.metadata_context.filter_metadata` map field. The
   * metadata is available under the key
   * `com.google.lb_traffic_extension.<resource_name>`.
   * The following variables are supported in the metadata:
   *
   * `{forwarding_rule_id}` - substituted with the forwarding rule's fully
   *   qualified resource name.
   */
  metadata: { [key: string]: any } | undefined;
}

export interface LbTrafficExtension_LabelsEntry {
  key: string;
  value: string;
}

/** Message for requesting list of `LbTrafficExtension` resources. */
export interface ListLbTrafficExtensionsRequest {
  /**
   * Required. The project and location from which the `LbTrafficExtension`
   * resources are listed, specified in the following format:
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. The server might return fewer items than
   * requested. If unspecified, the server picks an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results that the server returns. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Message for response to listing `LbTrafficExtension` resources. */
export interface ListLbTrafficExtensionsResponse {
  /** The list of `LbTrafficExtension` resources. */
  lbTrafficExtensions: LbTrafficExtension[];
  /** A token identifying a page of results that the server returns. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a `LbTrafficExtension` resource. */
export interface GetLbTrafficExtensionRequest {
  /**
   * Required. A name of the `LbTrafficExtension` resource to get. Must be in
   * the format
   * `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
   */
  name: string;
}

/** Message for creating a `LbTrafficExtension` resource. */
export interface CreateLbTrafficExtensionRequest {
  /**
   * Required. The parent resource of the `LbTrafficExtension` resource. Must be
   * in the format `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. User-provided ID of the `LbTrafficExtension` resource to be
   * created.
   */
  lbTrafficExtensionId: string;
  /** Required. `LbTrafficExtension` resource to be created. */
  lbTrafficExtension:
    | LbTrafficExtension
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server can ignore
   * the request if it has already been completed. The server guarantees
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating a `LbTrafficExtension` resource. */
export interface UpdateLbTrafficExtensionRequest {
  /**
   * Optional. Used to specify the fields to be overwritten in the
   * `LbTrafficExtension` resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field is overwritten if it is in the mask. If the
   * user does not specify a mask, then all fields are overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. `LbTrafficExtension` resource being updated. */
  lbTrafficExtension:
    | LbTrafficExtension
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server can ignore
   * the request if it has already been completed. The server guarantees
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting a `LbTrafficExtension` resource. */
export interface DeleteLbTrafficExtensionRequest {
  /**
   * Required. The name of the `LbTrafficExtension` resource to delete. Must be
   * in the format
   * `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server can ignore
   * the request if it has already been completed. The server guarantees
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * `LbRouteExtension` is a resource that lets you control where traffic is
 * routed to for a given request.
 */
export interface LbRouteExtension {
  /**
   * Required. Identifier. Name of the `LbRouteExtension` resource in the
   * following format:
   * `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
   */
  name: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. A human-readable description of the resource. */
  description: string;
  /**
   * Optional. Set of labels associated with the `LbRouteExtension` resource.
   *
   * The format must comply with [the requirements for
   * labels](https://cloud.google.com/compute/docs/labeling-resources#requirements)
   * for Google Cloud resources.
   */
  labels: { [key: string]: string };
  /**
   * Required. A list of references to the forwarding rules to which this
   * service extension is attached to. At least one forwarding rule is required.
   * There can be only one `LbRouteExtension` resource per forwarding rule.
   */
  forwardingRules: string[];
  /**
   * Required. A set of ordered extension chains that contain the match
   * conditions and extensions to execute. Match conditions for each extension
   * chain are evaluated in sequence for a given request. The first extension
   * chain that has a condition that matches the request is executed.
   * Any subsequent extension chains do not execute.
   * Limited to 5 extension chains per resource.
   */
  extensionChains: ExtensionChain[];
  /**
   * Required. All backend services and forwarding rules referenced by this
   * extension must share the same load balancing scheme. Supported values:
   * `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to
   * [Choosing a load
   * balancer](https://cloud.google.com/load-balancing/docs/backend-service).
   */
  loadBalancingScheme: LoadBalancingScheme;
  /**
   * Optional. The metadata provided here is included as part of the
   * `metadata_context` (of type `google.protobuf.Struct`) in the
   * `ProcessingRequest` message sent to the extension
   * server. The metadata is available under the namespace
   * `com.google.lb_route_extension.<resource_name>`.
   * The following variables are supported in the metadata Struct:
   *
   * `{forwarding_rule_id}` - substituted with the forwarding rule's fully
   *   qualified resource name.
   */
  metadata: { [key: string]: any } | undefined;
}

export interface LbRouteExtension_LabelsEntry {
  key: string;
  value: string;
}

/** Message for requesting list of `LbRouteExtension` resources. */
export interface ListLbRouteExtensionsRequest {
  /**
   * Required. The project and location from which the `LbRouteExtension`
   * resources are listed, specified in the following format:
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Optional. Requested page size. The server might return fewer items than
   * requested. If unspecified, the server picks an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results that the server returns. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Message for response to listing `LbRouteExtension` resources. */
export interface ListLbRouteExtensionsResponse {
  /** The list of `LbRouteExtension` resources. */
  lbRouteExtensions: LbRouteExtension[];
  /** A token identifying a page of results that the server returns. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a `LbRouteExtension` resource. */
export interface GetLbRouteExtensionRequest {
  /**
   * Required. A name of the `LbRouteExtension` resource to get. Must be in the
   * format
   * `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
   */
  name: string;
}

/** Message for creating a `LbRouteExtension` resource. */
export interface CreateLbRouteExtensionRequest {
  /**
   * Required. The parent resource of the `LbRouteExtension` resource. Must be
   * in the format `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. User-provided ID of the `LbRouteExtension` resource to be
   * created.
   */
  lbRouteExtensionId: string;
  /** Required. `LbRouteExtension` resource to be created. */
  lbRouteExtension:
    | LbRouteExtension
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server can ignore
   * the request if it has already been completed. The server guarantees
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating a `LbRouteExtension` resource. */
export interface UpdateLbRouteExtensionRequest {
  /**
   * Optional. Used to specify the fields to be overwritten in the
   * `LbRouteExtension` resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field is overwritten if it is in the mask. If the
   * user does not specify a mask, then all fields are overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. `LbRouteExtension` resource being updated. */
  lbRouteExtension:
    | LbRouteExtension
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server can ignore
   * the request if it has already been completed. The server guarantees
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting a `LbRouteExtension` resource. */
export interface DeleteLbRouteExtensionRequest {
  /**
   * Required. The name of the `LbRouteExtension` resource to delete. Must be in
   * the format
   * `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server can ignore
   * the request if it has already been completed. The server guarantees
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, ignores the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

function createBaseExtensionChain(): ExtensionChain {
  return { name: "", matchCondition: undefined, extensions: [] };
}

export const ExtensionChain: MessageFns<ExtensionChain> = {
  encode(message: ExtensionChain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.matchCondition !== undefined) {
      ExtensionChain_MatchCondition.encode(message.matchCondition, writer.uint32(18).fork()).join();
    }
    for (const v of message.extensions) {
      ExtensionChain_Extension.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionChain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.matchCondition = ExtensionChain_MatchCondition.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.extensions.push(ExtensionChain_Extension.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionChain {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      matchCondition: isSet(object.matchCondition)
        ? ExtensionChain_MatchCondition.fromJSON(object.matchCondition)
        : undefined,
      extensions: globalThis.Array.isArray(object?.extensions)
        ? object.extensions.map((e: any) => ExtensionChain_Extension.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExtensionChain): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.matchCondition !== undefined) {
      obj.matchCondition = ExtensionChain_MatchCondition.toJSON(message.matchCondition);
    }
    if (message.extensions?.length) {
      obj.extensions = message.extensions.map((e) => ExtensionChain_Extension.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionChain>): ExtensionChain {
    return ExtensionChain.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionChain>): ExtensionChain {
    const message = createBaseExtensionChain();
    message.name = object.name ?? "";
    message.matchCondition = (object.matchCondition !== undefined && object.matchCondition !== null)
      ? ExtensionChain_MatchCondition.fromPartial(object.matchCondition)
      : undefined;
    message.extensions = object.extensions?.map((e) => ExtensionChain_Extension.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExtensionChain_MatchCondition(): ExtensionChain_MatchCondition {
  return { celExpression: "" };
}

export const ExtensionChain_MatchCondition: MessageFns<ExtensionChain_MatchCondition> = {
  encode(message: ExtensionChain_MatchCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.celExpression !== "") {
      writer.uint32(10).string(message.celExpression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionChain_MatchCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionChain_MatchCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.celExpression = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionChain_MatchCondition {
    return { celExpression: isSet(object.celExpression) ? globalThis.String(object.celExpression) : "" };
  },

  toJSON(message: ExtensionChain_MatchCondition): unknown {
    const obj: any = {};
    if (message.celExpression !== "") {
      obj.celExpression = message.celExpression;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionChain_MatchCondition>): ExtensionChain_MatchCondition {
    return ExtensionChain_MatchCondition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionChain_MatchCondition>): ExtensionChain_MatchCondition {
    const message = createBaseExtensionChain_MatchCondition();
    message.celExpression = object.celExpression ?? "";
    return message;
  },
};

function createBaseExtensionChain_Extension(): ExtensionChain_Extension {
  return {
    name: "",
    authority: "",
    service: "",
    supportedEvents: [],
    timeout: undefined,
    failOpen: false,
    forwardHeaders: [],
  };
}

export const ExtensionChain_Extension: MessageFns<ExtensionChain_Extension> = {
  encode(message: ExtensionChain_Extension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    if (message.service !== "") {
      writer.uint32(26).string(message.service);
    }
    writer.uint32(34).fork();
    for (const v of message.supportedEvents) {
      writer.int32(v);
    }
    writer.join();
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(42).fork()).join();
    }
    if (message.failOpen !== false) {
      writer.uint32(48).bool(message.failOpen);
    }
    for (const v of message.forwardHeaders) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionChain_Extension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionChain_Extension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.service = reader.string();
          continue;
        case 4:
          if (tag === 32) {
            message.supportedEvents.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.supportedEvents.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.failOpen = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.forwardHeaders.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionChain_Extension {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      supportedEvents: globalThis.Array.isArray(object?.supportedEvents)
        ? object.supportedEvents.map((e: any) => eventTypeFromJSON(e))
        : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      failOpen: isSet(object.failOpen) ? globalThis.Boolean(object.failOpen) : false,
      forwardHeaders: globalThis.Array.isArray(object?.forwardHeaders)
        ? object.forwardHeaders.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ExtensionChain_Extension): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.supportedEvents?.length) {
      obj.supportedEvents = message.supportedEvents.map((e) => eventTypeToJSON(e));
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.failOpen !== false) {
      obj.failOpen = message.failOpen;
    }
    if (message.forwardHeaders?.length) {
      obj.forwardHeaders = message.forwardHeaders;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionChain_Extension>): ExtensionChain_Extension {
    return ExtensionChain_Extension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionChain_Extension>): ExtensionChain_Extension {
    const message = createBaseExtensionChain_Extension();
    message.name = object.name ?? "";
    message.authority = object.authority ?? "";
    message.service = object.service ?? "";
    message.supportedEvents = object.supportedEvents?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.failOpen = object.failOpen ?? false;
    message.forwardHeaders = object.forwardHeaders?.map((e) => e) || [];
    return message;
  },
};

function createBaseLbTrafficExtension(): LbTrafficExtension {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    labels: {},
    forwardingRules: [],
    extensionChains: [],
    loadBalancingScheme: 0,
    metadata: undefined,
  };
}

export const LbTrafficExtension: MessageFns<LbTrafficExtension> = {
  encode(message: LbTrafficExtension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      LbTrafficExtension_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    for (const v of message.forwardingRules) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.extensionChains) {
      ExtensionChain.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.loadBalancingScheme !== 0) {
      writer.uint32(64).int32(message.loadBalancingScheme);
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LbTrafficExtension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLbTrafficExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = LbTrafficExtension_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.forwardingRules.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.extensionChains.push(ExtensionChain.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.loadBalancingScheme = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LbTrafficExtension {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      forwardingRules: globalThis.Array.isArray(object?.forwardingRules)
        ? object.forwardingRules.map((e: any) => globalThis.String(e))
        : [],
      extensionChains: globalThis.Array.isArray(object?.extensionChains)
        ? object.extensionChains.map((e: any) => ExtensionChain.fromJSON(e))
        : [],
      loadBalancingScheme: isSet(object.loadBalancingScheme)
        ? loadBalancingSchemeFromJSON(object.loadBalancingScheme)
        : 0,
      metadata: isObject(object.metadata) ? object.metadata : undefined,
    };
  },

  toJSON(message: LbTrafficExtension): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.forwardingRules?.length) {
      obj.forwardingRules = message.forwardingRules;
    }
    if (message.extensionChains?.length) {
      obj.extensionChains = message.extensionChains.map((e) => ExtensionChain.toJSON(e));
    }
    if (message.loadBalancingScheme !== 0) {
      obj.loadBalancingScheme = loadBalancingSchemeToJSON(message.loadBalancingScheme);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create(base?: DeepPartial<LbTrafficExtension>): LbTrafficExtension {
    return LbTrafficExtension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LbTrafficExtension>): LbTrafficExtension {
    const message = createBaseLbTrafficExtension();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.forwardingRules = object.forwardingRules?.map((e) => e) || [];
    message.extensionChains = object.extensionChains?.map((e) => ExtensionChain.fromPartial(e)) || [];
    message.loadBalancingScheme = object.loadBalancingScheme ?? 0;
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseLbTrafficExtension_LabelsEntry(): LbTrafficExtension_LabelsEntry {
  return { key: "", value: "" };
}

export const LbTrafficExtension_LabelsEntry: MessageFns<LbTrafficExtension_LabelsEntry> = {
  encode(message: LbTrafficExtension_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LbTrafficExtension_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLbTrafficExtension_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LbTrafficExtension_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LbTrafficExtension_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LbTrafficExtension_LabelsEntry>): LbTrafficExtension_LabelsEntry {
    return LbTrafficExtension_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LbTrafficExtension_LabelsEntry>): LbTrafficExtension_LabelsEntry {
    const message = createBaseLbTrafficExtension_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListLbTrafficExtensionsRequest(): ListLbTrafficExtensionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListLbTrafficExtensionsRequest: MessageFns<ListLbTrafficExtensionsRequest> = {
  encode(message: ListLbTrafficExtensionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLbTrafficExtensionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLbTrafficExtensionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLbTrafficExtensionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListLbTrafficExtensionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLbTrafficExtensionsRequest>): ListLbTrafficExtensionsRequest {
    return ListLbTrafficExtensionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLbTrafficExtensionsRequest>): ListLbTrafficExtensionsRequest {
    const message = createBaseListLbTrafficExtensionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListLbTrafficExtensionsResponse(): ListLbTrafficExtensionsResponse {
  return { lbTrafficExtensions: [], nextPageToken: "", unreachable: [] };
}

export const ListLbTrafficExtensionsResponse: MessageFns<ListLbTrafficExtensionsResponse> = {
  encode(message: ListLbTrafficExtensionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.lbTrafficExtensions) {
      LbTrafficExtension.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLbTrafficExtensionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLbTrafficExtensionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lbTrafficExtensions.push(LbTrafficExtension.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLbTrafficExtensionsResponse {
    return {
      lbTrafficExtensions: globalThis.Array.isArray(object?.lbTrafficExtensions)
        ? object.lbTrafficExtensions.map((e: any) => LbTrafficExtension.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListLbTrafficExtensionsResponse): unknown {
    const obj: any = {};
    if (message.lbTrafficExtensions?.length) {
      obj.lbTrafficExtensions = message.lbTrafficExtensions.map((e) => LbTrafficExtension.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLbTrafficExtensionsResponse>): ListLbTrafficExtensionsResponse {
    return ListLbTrafficExtensionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLbTrafficExtensionsResponse>): ListLbTrafficExtensionsResponse {
    const message = createBaseListLbTrafficExtensionsResponse();
    message.lbTrafficExtensions = object.lbTrafficExtensions?.map((e) => LbTrafficExtension.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetLbTrafficExtensionRequest(): GetLbTrafficExtensionRequest {
  return { name: "" };
}

export const GetLbTrafficExtensionRequest: MessageFns<GetLbTrafficExtensionRequest> = {
  encode(message: GetLbTrafficExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLbTrafficExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLbTrafficExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLbTrafficExtensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLbTrafficExtensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLbTrafficExtensionRequest>): GetLbTrafficExtensionRequest {
    return GetLbTrafficExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLbTrafficExtensionRequest>): GetLbTrafficExtensionRequest {
    const message = createBaseGetLbTrafficExtensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateLbTrafficExtensionRequest(): CreateLbTrafficExtensionRequest {
  return { parent: "", lbTrafficExtensionId: "", lbTrafficExtension: undefined, requestId: "" };
}

export const CreateLbTrafficExtensionRequest: MessageFns<CreateLbTrafficExtensionRequest> = {
  encode(message: CreateLbTrafficExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.lbTrafficExtensionId !== "") {
      writer.uint32(18).string(message.lbTrafficExtensionId);
    }
    if (message.lbTrafficExtension !== undefined) {
      LbTrafficExtension.encode(message.lbTrafficExtension, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLbTrafficExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLbTrafficExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lbTrafficExtensionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lbTrafficExtension = LbTrafficExtension.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLbTrafficExtensionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      lbTrafficExtensionId: isSet(object.lbTrafficExtensionId) ? globalThis.String(object.lbTrafficExtensionId) : "",
      lbTrafficExtension: isSet(object.lbTrafficExtension)
        ? LbTrafficExtension.fromJSON(object.lbTrafficExtension)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateLbTrafficExtensionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.lbTrafficExtensionId !== "") {
      obj.lbTrafficExtensionId = message.lbTrafficExtensionId;
    }
    if (message.lbTrafficExtension !== undefined) {
      obj.lbTrafficExtension = LbTrafficExtension.toJSON(message.lbTrafficExtension);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLbTrafficExtensionRequest>): CreateLbTrafficExtensionRequest {
    return CreateLbTrafficExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLbTrafficExtensionRequest>): CreateLbTrafficExtensionRequest {
    const message = createBaseCreateLbTrafficExtensionRequest();
    message.parent = object.parent ?? "";
    message.lbTrafficExtensionId = object.lbTrafficExtensionId ?? "";
    message.lbTrafficExtension = (object.lbTrafficExtension !== undefined && object.lbTrafficExtension !== null)
      ? LbTrafficExtension.fromPartial(object.lbTrafficExtension)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateLbTrafficExtensionRequest(): UpdateLbTrafficExtensionRequest {
  return { updateMask: undefined, lbTrafficExtension: undefined, requestId: "" };
}

export const UpdateLbTrafficExtensionRequest: MessageFns<UpdateLbTrafficExtensionRequest> = {
  encode(message: UpdateLbTrafficExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.lbTrafficExtension !== undefined) {
      LbTrafficExtension.encode(message.lbTrafficExtension, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLbTrafficExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLbTrafficExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lbTrafficExtension = LbTrafficExtension.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLbTrafficExtensionRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      lbTrafficExtension: isSet(object.lbTrafficExtension)
        ? LbTrafficExtension.fromJSON(object.lbTrafficExtension)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateLbTrafficExtensionRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.lbTrafficExtension !== undefined) {
      obj.lbTrafficExtension = LbTrafficExtension.toJSON(message.lbTrafficExtension);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLbTrafficExtensionRequest>): UpdateLbTrafficExtensionRequest {
    return UpdateLbTrafficExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLbTrafficExtensionRequest>): UpdateLbTrafficExtensionRequest {
    const message = createBaseUpdateLbTrafficExtensionRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.lbTrafficExtension = (object.lbTrafficExtension !== undefined && object.lbTrafficExtension !== null)
      ? LbTrafficExtension.fromPartial(object.lbTrafficExtension)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteLbTrafficExtensionRequest(): DeleteLbTrafficExtensionRequest {
  return { name: "", requestId: "" };
}

export const DeleteLbTrafficExtensionRequest: MessageFns<DeleteLbTrafficExtensionRequest> = {
  encode(message: DeleteLbTrafficExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLbTrafficExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLbTrafficExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLbTrafficExtensionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteLbTrafficExtensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLbTrafficExtensionRequest>): DeleteLbTrafficExtensionRequest {
    return DeleteLbTrafficExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLbTrafficExtensionRequest>): DeleteLbTrafficExtensionRequest {
    const message = createBaseDeleteLbTrafficExtensionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseLbRouteExtension(): LbRouteExtension {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    labels: {},
    forwardingRules: [],
    extensionChains: [],
    loadBalancingScheme: 0,
    metadata: undefined,
  };
}

export const LbRouteExtension: MessageFns<LbRouteExtension> = {
  encode(message: LbRouteExtension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      LbRouteExtension_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    for (const v of message.forwardingRules) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.extensionChains) {
      ExtensionChain.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.loadBalancingScheme !== 0) {
      writer.uint32(64).int32(message.loadBalancingScheme);
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LbRouteExtension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLbRouteExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = LbRouteExtension_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.forwardingRules.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.extensionChains.push(ExtensionChain.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.loadBalancingScheme = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LbRouteExtension {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      forwardingRules: globalThis.Array.isArray(object?.forwardingRules)
        ? object.forwardingRules.map((e: any) => globalThis.String(e))
        : [],
      extensionChains: globalThis.Array.isArray(object?.extensionChains)
        ? object.extensionChains.map((e: any) => ExtensionChain.fromJSON(e))
        : [],
      loadBalancingScheme: isSet(object.loadBalancingScheme)
        ? loadBalancingSchemeFromJSON(object.loadBalancingScheme)
        : 0,
      metadata: isObject(object.metadata) ? object.metadata : undefined,
    };
  },

  toJSON(message: LbRouteExtension): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.forwardingRules?.length) {
      obj.forwardingRules = message.forwardingRules;
    }
    if (message.extensionChains?.length) {
      obj.extensionChains = message.extensionChains.map((e) => ExtensionChain.toJSON(e));
    }
    if (message.loadBalancingScheme !== 0) {
      obj.loadBalancingScheme = loadBalancingSchemeToJSON(message.loadBalancingScheme);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create(base?: DeepPartial<LbRouteExtension>): LbRouteExtension {
    return LbRouteExtension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LbRouteExtension>): LbRouteExtension {
    const message = createBaseLbRouteExtension();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.forwardingRules = object.forwardingRules?.map((e) => e) || [];
    message.extensionChains = object.extensionChains?.map((e) => ExtensionChain.fromPartial(e)) || [];
    message.loadBalancingScheme = object.loadBalancingScheme ?? 0;
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseLbRouteExtension_LabelsEntry(): LbRouteExtension_LabelsEntry {
  return { key: "", value: "" };
}

export const LbRouteExtension_LabelsEntry: MessageFns<LbRouteExtension_LabelsEntry> = {
  encode(message: LbRouteExtension_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LbRouteExtension_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLbRouteExtension_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LbRouteExtension_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LbRouteExtension_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LbRouteExtension_LabelsEntry>): LbRouteExtension_LabelsEntry {
    return LbRouteExtension_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LbRouteExtension_LabelsEntry>): LbRouteExtension_LabelsEntry {
    const message = createBaseLbRouteExtension_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListLbRouteExtensionsRequest(): ListLbRouteExtensionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListLbRouteExtensionsRequest: MessageFns<ListLbRouteExtensionsRequest> = {
  encode(message: ListLbRouteExtensionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLbRouteExtensionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLbRouteExtensionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLbRouteExtensionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListLbRouteExtensionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLbRouteExtensionsRequest>): ListLbRouteExtensionsRequest {
    return ListLbRouteExtensionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLbRouteExtensionsRequest>): ListLbRouteExtensionsRequest {
    const message = createBaseListLbRouteExtensionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListLbRouteExtensionsResponse(): ListLbRouteExtensionsResponse {
  return { lbRouteExtensions: [], nextPageToken: "", unreachable: [] };
}

export const ListLbRouteExtensionsResponse: MessageFns<ListLbRouteExtensionsResponse> = {
  encode(message: ListLbRouteExtensionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.lbRouteExtensions) {
      LbRouteExtension.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLbRouteExtensionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLbRouteExtensionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lbRouteExtensions.push(LbRouteExtension.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLbRouteExtensionsResponse {
    return {
      lbRouteExtensions: globalThis.Array.isArray(object?.lbRouteExtensions)
        ? object.lbRouteExtensions.map((e: any) => LbRouteExtension.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListLbRouteExtensionsResponse): unknown {
    const obj: any = {};
    if (message.lbRouteExtensions?.length) {
      obj.lbRouteExtensions = message.lbRouteExtensions.map((e) => LbRouteExtension.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLbRouteExtensionsResponse>): ListLbRouteExtensionsResponse {
    return ListLbRouteExtensionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLbRouteExtensionsResponse>): ListLbRouteExtensionsResponse {
    const message = createBaseListLbRouteExtensionsResponse();
    message.lbRouteExtensions = object.lbRouteExtensions?.map((e) => LbRouteExtension.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetLbRouteExtensionRequest(): GetLbRouteExtensionRequest {
  return { name: "" };
}

export const GetLbRouteExtensionRequest: MessageFns<GetLbRouteExtensionRequest> = {
  encode(message: GetLbRouteExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLbRouteExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLbRouteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLbRouteExtensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLbRouteExtensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLbRouteExtensionRequest>): GetLbRouteExtensionRequest {
    return GetLbRouteExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLbRouteExtensionRequest>): GetLbRouteExtensionRequest {
    const message = createBaseGetLbRouteExtensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateLbRouteExtensionRequest(): CreateLbRouteExtensionRequest {
  return { parent: "", lbRouteExtensionId: "", lbRouteExtension: undefined, requestId: "" };
}

export const CreateLbRouteExtensionRequest: MessageFns<CreateLbRouteExtensionRequest> = {
  encode(message: CreateLbRouteExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.lbRouteExtensionId !== "") {
      writer.uint32(18).string(message.lbRouteExtensionId);
    }
    if (message.lbRouteExtension !== undefined) {
      LbRouteExtension.encode(message.lbRouteExtension, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLbRouteExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLbRouteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lbRouteExtensionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lbRouteExtension = LbRouteExtension.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLbRouteExtensionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      lbRouteExtensionId: isSet(object.lbRouteExtensionId) ? globalThis.String(object.lbRouteExtensionId) : "",
      lbRouteExtension: isSet(object.lbRouteExtension) ? LbRouteExtension.fromJSON(object.lbRouteExtension) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateLbRouteExtensionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.lbRouteExtensionId !== "") {
      obj.lbRouteExtensionId = message.lbRouteExtensionId;
    }
    if (message.lbRouteExtension !== undefined) {
      obj.lbRouteExtension = LbRouteExtension.toJSON(message.lbRouteExtension);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLbRouteExtensionRequest>): CreateLbRouteExtensionRequest {
    return CreateLbRouteExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLbRouteExtensionRequest>): CreateLbRouteExtensionRequest {
    const message = createBaseCreateLbRouteExtensionRequest();
    message.parent = object.parent ?? "";
    message.lbRouteExtensionId = object.lbRouteExtensionId ?? "";
    message.lbRouteExtension = (object.lbRouteExtension !== undefined && object.lbRouteExtension !== null)
      ? LbRouteExtension.fromPartial(object.lbRouteExtension)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateLbRouteExtensionRequest(): UpdateLbRouteExtensionRequest {
  return { updateMask: undefined, lbRouteExtension: undefined, requestId: "" };
}

export const UpdateLbRouteExtensionRequest: MessageFns<UpdateLbRouteExtensionRequest> = {
  encode(message: UpdateLbRouteExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.lbRouteExtension !== undefined) {
      LbRouteExtension.encode(message.lbRouteExtension, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLbRouteExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLbRouteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lbRouteExtension = LbRouteExtension.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLbRouteExtensionRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      lbRouteExtension: isSet(object.lbRouteExtension) ? LbRouteExtension.fromJSON(object.lbRouteExtension) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateLbRouteExtensionRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.lbRouteExtension !== undefined) {
      obj.lbRouteExtension = LbRouteExtension.toJSON(message.lbRouteExtension);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLbRouteExtensionRequest>): UpdateLbRouteExtensionRequest {
    return UpdateLbRouteExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLbRouteExtensionRequest>): UpdateLbRouteExtensionRequest {
    const message = createBaseUpdateLbRouteExtensionRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.lbRouteExtension = (object.lbRouteExtension !== undefined && object.lbRouteExtension !== null)
      ? LbRouteExtension.fromPartial(object.lbRouteExtension)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteLbRouteExtensionRequest(): DeleteLbRouteExtensionRequest {
  return { name: "", requestId: "" };
}

export const DeleteLbRouteExtensionRequest: MessageFns<DeleteLbRouteExtensionRequest> = {
  encode(message: DeleteLbRouteExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLbRouteExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLbRouteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLbRouteExtensionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteLbRouteExtensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLbRouteExtensionRequest>): DeleteLbRouteExtensionRequest {
    return DeleteLbRouteExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLbRouteExtensionRequest>): DeleteLbRouteExtensionRequest {
    const message = createBaseDeleteLbRouteExtensionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

/** Service describing handlers for resources. */
export type DepServiceDefinition = typeof DepServiceDefinition;
export const DepServiceDefinition = {
  name: "DepService",
  fullName: "google.cloud.networkservices.v1.DepService",
  methods: {
    /** Lists `LbTrafficExtension` resources in a given project and location. */
    listLbTrafficExtensions: {
      name: "ListLbTrafficExtensions",
      requestType: ListLbTrafficExtensionsRequest,
      requestStream: false,
      responseType: ListLbTrafficExtensionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of the specified `LbTrafficExtension` resource. */
    getLbTrafficExtension: {
      name: "GetLbTrafficExtension",
      requestType: GetLbTrafficExtensionRequest,
      requestStream: false,
      responseType: LbTrafficExtension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new `LbTrafficExtension` resource in a given project and
     * location.
     */
    createLbTrafficExtension: {
      name: "CreateLbTrafficExtension",
      requestType: CreateLbTrafficExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              39,
              10,
              18,
              76,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              51,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              98,
              95,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              108,
              98,
              95,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              20,
              108,
              98,
              95,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of the specified `LbTrafficExtension` resource. */
    updateLbTrafficExtension: {
      name: "UpdateLbTrafficExtension",
      requestType: UpdateLbTrafficExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              39,
              10,
              18,
              76,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              108,
              98,
              95,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              20,
              108,
              98,
              95,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              50,
              76,
              47,
              118,
              49,
              47,
              123,
              108,
              98,
              95,
              116,
              114,
              97,
              102,
              102,
              105,
              99,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified `LbTrafficExtension` resource. */
    deleteLbTrafficExtension: {
      name: "DeleteLbTrafficExtension",
      requestType: DeleteLbTrafficExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              42,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              98,
              84,
              114,
              97,
              102,
              102,
              105,
              99,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists `LbRouteExtension` resources in a given project and location. */
    listLbRouteExtensions: {
      name: "ListLbRouteExtensions",
      requestType: ListLbRouteExtensionsRequest,
      requestStream: false,
      responseType: ListLbRouteExtensionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of the specified `LbRouteExtension` resource. */
    getLbRouteExtension: {
      name: "GetLbRouteExtension",
      requestType: GetLbRouteExtensionRequest,
      requestStream: false,
      responseType: LbRouteExtension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new `LbRouteExtension` resource in a given project and location. */
    createLbRouteExtension: {
      name: "CreateLbRouteExtension",
      requestType: CreateLbRouteExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              16,
              76,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              98,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              108,
              98,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              18,
              108,
              98,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              108,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of the specified `LbRouteExtension` resource. */
    updateLbRouteExtension: {
      name: "UpdateLbRouteExtension",
      requestType: UpdateLbRouteExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              16,
              76,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              30,
              108,
              98,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              18,
              108,
              98,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              50,
              72,
              47,
              118,
              49,
              47,
              123,
              108,
              98,
              95,
              114,
              111,
              117,
              116,
              101,
              95,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified `LbRouteExtension` resource. */
    deleteLbRouteExtension: {
      name: "DeleteLbRouteExtension",
      requestType: DeleteLbRouteExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              98,
              82,
              111,
              117,
              116,
              101,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DepServiceImplementation<CallContextExt = {}> {
  /** Lists `LbTrafficExtension` resources in a given project and location. */
  listLbTrafficExtensions(
    request: ListLbTrafficExtensionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLbTrafficExtensionsResponse>>;
  /** Gets details of the specified `LbTrafficExtension` resource. */
  getLbTrafficExtension(
    request: GetLbTrafficExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LbTrafficExtension>>;
  /**
   * Creates a new `LbTrafficExtension` resource in a given project and
   * location.
   */
  createLbTrafficExtension(
    request: CreateLbTrafficExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of the specified `LbTrafficExtension` resource. */
  updateLbTrafficExtension(
    request: UpdateLbTrafficExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes the specified `LbTrafficExtension` resource. */
  deleteLbTrafficExtension(
    request: DeleteLbTrafficExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists `LbRouteExtension` resources in a given project and location. */
  listLbRouteExtensions(
    request: ListLbRouteExtensionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLbRouteExtensionsResponse>>;
  /** Gets details of the specified `LbRouteExtension` resource. */
  getLbRouteExtension(
    request: GetLbRouteExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LbRouteExtension>>;
  /** Creates a new `LbRouteExtension` resource in a given project and location. */
  createLbRouteExtension(
    request: CreateLbRouteExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of the specified `LbRouteExtension` resource. */
  updateLbRouteExtension(
    request: UpdateLbRouteExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes the specified `LbRouteExtension` resource. */
  deleteLbRouteExtension(
    request: DeleteLbRouteExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface DepServiceClient<CallOptionsExt = {}> {
  /** Lists `LbTrafficExtension` resources in a given project and location. */
  listLbTrafficExtensions(
    request: DeepPartial<ListLbTrafficExtensionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLbTrafficExtensionsResponse>;
  /** Gets details of the specified `LbTrafficExtension` resource. */
  getLbTrafficExtension(
    request: DeepPartial<GetLbTrafficExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LbTrafficExtension>;
  /**
   * Creates a new `LbTrafficExtension` resource in a given project and
   * location.
   */
  createLbTrafficExtension(
    request: DeepPartial<CreateLbTrafficExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of the specified `LbTrafficExtension` resource. */
  updateLbTrafficExtension(
    request: DeepPartial<UpdateLbTrafficExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes the specified `LbTrafficExtension` resource. */
  deleteLbTrafficExtension(
    request: DeepPartial<DeleteLbTrafficExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists `LbRouteExtension` resources in a given project and location. */
  listLbRouteExtensions(
    request: DeepPartial<ListLbRouteExtensionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLbRouteExtensionsResponse>;
  /** Gets details of the specified `LbRouteExtension` resource. */
  getLbRouteExtension(
    request: DeepPartial<GetLbRouteExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LbRouteExtension>;
  /** Creates a new `LbRouteExtension` resource in a given project and location. */
  createLbRouteExtension(
    request: DeepPartial<CreateLbRouteExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of the specified `LbRouteExtension` resource. */
  updateLbRouteExtension(
    request: DeepPartial<UpdateLbRouteExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes the specified `LbRouteExtension` resource. */
  deleteLbRouteExtension(
    request: DeepPartial<DeleteLbRouteExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
