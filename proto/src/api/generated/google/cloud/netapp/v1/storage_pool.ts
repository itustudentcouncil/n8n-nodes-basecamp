// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/storage_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  EncryptionType,
  encryptionTypeFromJSON,
  encryptionTypeToJSON,
  ServiceLevel,
  serviceLevelFromJSON,
  serviceLevelToJSON,
} from "./common.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** GetStoragePoolRequest gets a Storage Pool. */
export interface GetStoragePoolRequest {
  /** Required. Name of the storage pool */
  name: string;
}

/** ListStoragePoolsRequest lists Storage Pools. */
export interface ListStoragePoolsRequest {
  /** Required. Parent value */
  parent: string;
  /** Optional. The maximum number of items to return. */
  pageSize: number;
  /**
   * Optional. The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /**
   * Optional. Sort results. Supported values are "name", "name desc" or ""
   * (unsorted).
   */
  orderBy: string;
  /** Optional. List filter. */
  filter: string;
}

/** ListStoragePoolsResponse is the response to a ListStoragePoolsRequest. */
export interface ListStoragePoolsResponse {
  /** The list of StoragePools */
  storagePools: StoragePool[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** CreateStoragePoolRequest creates a Storage Pool. */
export interface CreateStoragePoolRequest {
  /** Required. Value for parent. */
  parent: string;
  /**
   * Required. Id of the requesting storage pool. Must be unique within the
   * parent resource. Must contain only letters, numbers, underscore and hyphen,
   * with the first character a letter or underscore, the last a letter or
   * underscore or a number, and a 63 character maximum.
   */
  storagePoolId: string;
  /** Required. The required parameters to create a new storage pool. */
  storagePool: StoragePool | undefined;
}

/** UpdateStoragePoolRequest updates a Storage Pool. */
export interface UpdateStoragePoolRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * StoragePool resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The pool being updated */
  storagePool: StoragePool | undefined;
}

/** DeleteStoragePoolRequest deletes a Storage Pool. */
export interface DeleteStoragePoolRequest {
  /** Required. Name of the storage pool */
  name: string;
}

/**
 * SwitchActiveReplicaZoneRequest switch the active/replica zone for a regional
 * storagePool.
 */
export interface SwitchActiveReplicaZoneRequest {
  /** Required. Name of the storage pool */
  name: string;
}

/**
 * StoragePool is a container for volumes with a service level and capacity.
 * Volumes can be created in a pool of sufficient available capacity.
 * StoragePool capacity is what you are billed for.
 */
export interface StoragePool {
  /** Identifier. Name of the storage pool */
  name: string;
  /** Required. Service level of the storage pool */
  serviceLevel: ServiceLevel;
  /** Required. Capacity in GIB of the pool */
  capacityGib: Long;
  /** Output only. Allocated size of all volumes in GIB in the storage pool */
  volumeCapacityGib: Long;
  /** Output only. Volume count of the storage pool */
  volumeCount: number;
  /** Output only. State of the storage pool */
  state: StoragePool_State;
  /** Output only. State details of the storage pool */
  stateDetails: string;
  /** Output only. Create time of the storage pool */
  createTime:
    | Date
    | undefined;
  /** Optional. Description of the storage pool */
  description: string;
  /** Optional. Labels as key value pairs */
  labels: { [key: string]: string };
  /**
   * Required. VPC Network name.
   * Format: projects/{project}/global/networks/{network}
   */
  network: string;
  /**
   * Optional. Specifies the Active Directory to be used for creating a SMB
   * volume.
   */
  activeDirectory: string;
  /** Optional. Specifies the KMS config to be used for volume encryption. */
  kmsConfig: string;
  /** Optional. Flag indicating if the pool is NFS LDAP enabled or not. */
  ldapEnabled: boolean;
  /**
   * Optional. This field is not implemented. The values provided in this field
   * are ignored.
   */
  psaRange: string;
  /** Output only. Specifies the current pool encryption key source. */
  encryptionType: EncryptionType;
  /**
   * Deprecated. Used to allow SO pool to access AD or DNS server from other
   * regions.
   *
   * @deprecated
   */
  globalAccessAllowed?:
    | boolean
    | undefined;
  /**
   * Optional. True if the storage pool supports Auto Tiering enabled volumes.
   * Default is false. Auto-tiering can be enabled after storage pool creation
   * but it can't be disabled once enabled.
   */
  allowAutoTiering: boolean;
  /** Optional. Specifies the replica zone for regional storagePool. */
  replicaZone: string;
  /** Optional. Specifies the active zone for regional storagePool. */
  zone: string;
}

/** The Storage Pool States */
export enum StoragePool_State {
  /** STATE_UNSPECIFIED - Unspecified Storage Pool State */
  STATE_UNSPECIFIED = 0,
  /** READY - Storage Pool State is Ready */
  READY = 1,
  /** CREATING - Storage Pool State is Creating */
  CREATING = 2,
  /** DELETING - Storage Pool State is Deleting */
  DELETING = 3,
  /** UPDATING - Storage Pool State is Updating */
  UPDATING = 4,
  /** RESTORING - Storage Pool State is Restoring */
  RESTORING = 5,
  /** DISABLED - Storage Pool State is Disabled */
  DISABLED = 6,
  /** ERROR - Storage Pool State is Error */
  ERROR = 7,
  UNRECOGNIZED = -1,
}

export function storagePool_StateFromJSON(object: any): StoragePool_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return StoragePool_State.STATE_UNSPECIFIED;
    case 1:
    case "READY":
      return StoragePool_State.READY;
    case 2:
    case "CREATING":
      return StoragePool_State.CREATING;
    case 3:
    case "DELETING":
      return StoragePool_State.DELETING;
    case 4:
    case "UPDATING":
      return StoragePool_State.UPDATING;
    case 5:
    case "RESTORING":
      return StoragePool_State.RESTORING;
    case 6:
    case "DISABLED":
      return StoragePool_State.DISABLED;
    case 7:
    case "ERROR":
      return StoragePool_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StoragePool_State.UNRECOGNIZED;
  }
}

export function storagePool_StateToJSON(object: StoragePool_State): string {
  switch (object) {
    case StoragePool_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case StoragePool_State.READY:
      return "READY";
    case StoragePool_State.CREATING:
      return "CREATING";
    case StoragePool_State.DELETING:
      return "DELETING";
    case StoragePool_State.UPDATING:
      return "UPDATING";
    case StoragePool_State.RESTORING:
      return "RESTORING";
    case StoragePool_State.DISABLED:
      return "DISABLED";
    case StoragePool_State.ERROR:
      return "ERROR";
    case StoragePool_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface StoragePool_LabelsEntry {
  key: string;
  value: string;
}

function createBaseGetStoragePoolRequest(): GetStoragePoolRequest {
  return { name: "" };
}

export const GetStoragePoolRequest: MessageFns<GetStoragePoolRequest> = {
  encode(message: GetStoragePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStoragePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStoragePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStoragePoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStoragePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStoragePoolRequest>): GetStoragePoolRequest {
    return GetStoragePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStoragePoolRequest>): GetStoragePoolRequest {
    const message = createBaseGetStoragePoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListStoragePoolsRequest(): ListStoragePoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListStoragePoolsRequest: MessageFns<ListStoragePoolsRequest> = {
  encode(message: ListStoragePoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStoragePoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStoragePoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStoragePoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListStoragePoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStoragePoolsRequest>): ListStoragePoolsRequest {
    return ListStoragePoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStoragePoolsRequest>): ListStoragePoolsRequest {
    const message = createBaseListStoragePoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListStoragePoolsResponse(): ListStoragePoolsResponse {
  return { storagePools: [], nextPageToken: "", unreachable: [] };
}

export const ListStoragePoolsResponse: MessageFns<ListStoragePoolsResponse> = {
  encode(message: ListStoragePoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.storagePools) {
      StoragePool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStoragePoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStoragePoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.storagePools.push(StoragePool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStoragePoolsResponse {
    return {
      storagePools: globalThis.Array.isArray(object?.storagePools)
        ? object.storagePools.map((e: any) => StoragePool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListStoragePoolsResponse): unknown {
    const obj: any = {};
    if (message.storagePools?.length) {
      obj.storagePools = message.storagePools.map((e) => StoragePool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStoragePoolsResponse>): ListStoragePoolsResponse {
    return ListStoragePoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStoragePoolsResponse>): ListStoragePoolsResponse {
    const message = createBaseListStoragePoolsResponse();
    message.storagePools = object.storagePools?.map((e) => StoragePool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateStoragePoolRequest(): CreateStoragePoolRequest {
  return { parent: "", storagePoolId: "", storagePool: undefined };
}

export const CreateStoragePoolRequest: MessageFns<CreateStoragePoolRequest> = {
  encode(message: CreateStoragePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.storagePoolId !== "") {
      writer.uint32(18).string(message.storagePoolId);
    }
    if (message.storagePool !== undefined) {
      StoragePool.encode(message.storagePool, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateStoragePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStoragePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storagePoolId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.storagePool = StoragePool.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStoragePoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      storagePoolId: isSet(object.storagePoolId) ? globalThis.String(object.storagePoolId) : "",
      storagePool: isSet(object.storagePool) ? StoragePool.fromJSON(object.storagePool) : undefined,
    };
  },

  toJSON(message: CreateStoragePoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.storagePoolId !== "") {
      obj.storagePoolId = message.storagePoolId;
    }
    if (message.storagePool !== undefined) {
      obj.storagePool = StoragePool.toJSON(message.storagePool);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateStoragePoolRequest>): CreateStoragePoolRequest {
    return CreateStoragePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateStoragePoolRequest>): CreateStoragePoolRequest {
    const message = createBaseCreateStoragePoolRequest();
    message.parent = object.parent ?? "";
    message.storagePoolId = object.storagePoolId ?? "";
    message.storagePool = (object.storagePool !== undefined && object.storagePool !== null)
      ? StoragePool.fromPartial(object.storagePool)
      : undefined;
    return message;
  },
};

function createBaseUpdateStoragePoolRequest(): UpdateStoragePoolRequest {
  return { updateMask: undefined, storagePool: undefined };
}

export const UpdateStoragePoolRequest: MessageFns<UpdateStoragePoolRequest> = {
  encode(message: UpdateStoragePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.storagePool !== undefined) {
      StoragePool.encode(message.storagePool, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStoragePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStoragePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storagePool = StoragePool.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStoragePoolRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      storagePool: isSet(object.storagePool) ? StoragePool.fromJSON(object.storagePool) : undefined,
    };
  },

  toJSON(message: UpdateStoragePoolRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.storagePool !== undefined) {
      obj.storagePool = StoragePool.toJSON(message.storagePool);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateStoragePoolRequest>): UpdateStoragePoolRequest {
    return UpdateStoragePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateStoragePoolRequest>): UpdateStoragePoolRequest {
    const message = createBaseUpdateStoragePoolRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.storagePool = (object.storagePool !== undefined && object.storagePool !== null)
      ? StoragePool.fromPartial(object.storagePool)
      : undefined;
    return message;
  },
};

function createBaseDeleteStoragePoolRequest(): DeleteStoragePoolRequest {
  return { name: "" };
}

export const DeleteStoragePoolRequest: MessageFns<DeleteStoragePoolRequest> = {
  encode(message: DeleteStoragePoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteStoragePoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStoragePoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteStoragePoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteStoragePoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteStoragePoolRequest>): DeleteStoragePoolRequest {
    return DeleteStoragePoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteStoragePoolRequest>): DeleteStoragePoolRequest {
    const message = createBaseDeleteStoragePoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSwitchActiveReplicaZoneRequest(): SwitchActiveReplicaZoneRequest {
  return { name: "" };
}

export const SwitchActiveReplicaZoneRequest: MessageFns<SwitchActiveReplicaZoneRequest> = {
  encode(message: SwitchActiveReplicaZoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SwitchActiveReplicaZoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitchActiveReplicaZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwitchActiveReplicaZoneRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: SwitchActiveReplicaZoneRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<SwitchActiveReplicaZoneRequest>): SwitchActiveReplicaZoneRequest {
    return SwitchActiveReplicaZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SwitchActiveReplicaZoneRequest>): SwitchActiveReplicaZoneRequest {
    const message = createBaseSwitchActiveReplicaZoneRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStoragePool(): StoragePool {
  return {
    name: "",
    serviceLevel: 0,
    capacityGib: Long.ZERO,
    volumeCapacityGib: Long.ZERO,
    volumeCount: 0,
    state: 0,
    stateDetails: "",
    createTime: undefined,
    description: "",
    labels: {},
    network: "",
    activeDirectory: "",
    kmsConfig: "",
    ldapEnabled: false,
    psaRange: "",
    encryptionType: 0,
    globalAccessAllowed: undefined,
    allowAutoTiering: false,
    replicaZone: "",
    zone: "",
  };
}

export const StoragePool: MessageFns<StoragePool> = {
  encode(message: StoragePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serviceLevel !== 0) {
      writer.uint32(16).int32(message.serviceLevel);
    }
    if (!message.capacityGib.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.capacityGib.toString());
    }
    if (!message.volumeCapacityGib.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.volumeCapacityGib.toString());
    }
    if (message.volumeCount !== 0) {
      writer.uint32(40).int32(message.volumeCount);
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    if (message.stateDetails !== "") {
      writer.uint32(58).string(message.stateDetails);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      StoragePool_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.network !== "") {
      writer.uint32(90).string(message.network);
    }
    if (message.activeDirectory !== "") {
      writer.uint32(98).string(message.activeDirectory);
    }
    if (message.kmsConfig !== "") {
      writer.uint32(106).string(message.kmsConfig);
    }
    if (message.ldapEnabled !== false) {
      writer.uint32(112).bool(message.ldapEnabled);
    }
    if (message.psaRange !== "") {
      writer.uint32(122).string(message.psaRange);
    }
    if (message.encryptionType !== 0) {
      writer.uint32(128).int32(message.encryptionType);
    }
    if (message.globalAccessAllowed !== undefined) {
      writer.uint32(136).bool(message.globalAccessAllowed);
    }
    if (message.allowAutoTiering !== false) {
      writer.uint32(144).bool(message.allowAutoTiering);
    }
    if (message.replicaZone !== "") {
      writer.uint32(162).string(message.replicaZone);
    }
    if (message.zone !== "") {
      writer.uint32(170).string(message.zone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoragePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoragePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.serviceLevel = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.capacityGib = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.volumeCapacityGib = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.volumeCount = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.stateDetails = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = StoragePool_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.network = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.activeDirectory = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.kmsConfig = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.ldapEnabled = reader.bool();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.psaRange = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.encryptionType = reader.int32() as any;
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.globalAccessAllowed = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.allowAutoTiering = reader.bool();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.replicaZone = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.zone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StoragePool {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serviceLevel: isSet(object.serviceLevel) ? serviceLevelFromJSON(object.serviceLevel) : 0,
      capacityGib: isSet(object.capacityGib) ? Long.fromValue(object.capacityGib) : Long.ZERO,
      volumeCapacityGib: isSet(object.volumeCapacityGib) ? Long.fromValue(object.volumeCapacityGib) : Long.ZERO,
      volumeCount: isSet(object.volumeCount) ? globalThis.Number(object.volumeCount) : 0,
      state: isSet(object.state) ? storagePool_StateFromJSON(object.state) : 0,
      stateDetails: isSet(object.stateDetails) ? globalThis.String(object.stateDetails) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      activeDirectory: isSet(object.activeDirectory) ? globalThis.String(object.activeDirectory) : "",
      kmsConfig: isSet(object.kmsConfig) ? globalThis.String(object.kmsConfig) : "",
      ldapEnabled: isSet(object.ldapEnabled) ? globalThis.Boolean(object.ldapEnabled) : false,
      psaRange: isSet(object.psaRange) ? globalThis.String(object.psaRange) : "",
      encryptionType: isSet(object.encryptionType) ? encryptionTypeFromJSON(object.encryptionType) : 0,
      globalAccessAllowed: isSet(object.globalAccessAllowed)
        ? globalThis.Boolean(object.globalAccessAllowed)
        : undefined,
      allowAutoTiering: isSet(object.allowAutoTiering) ? globalThis.Boolean(object.allowAutoTiering) : false,
      replicaZone: isSet(object.replicaZone) ? globalThis.String(object.replicaZone) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
    };
  },

  toJSON(message: StoragePool): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serviceLevel !== 0) {
      obj.serviceLevel = serviceLevelToJSON(message.serviceLevel);
    }
    if (!message.capacityGib.equals(Long.ZERO)) {
      obj.capacityGib = (message.capacityGib || Long.ZERO).toString();
    }
    if (!message.volumeCapacityGib.equals(Long.ZERO)) {
      obj.volumeCapacityGib = (message.volumeCapacityGib || Long.ZERO).toString();
    }
    if (message.volumeCount !== 0) {
      obj.volumeCount = Math.round(message.volumeCount);
    }
    if (message.state !== 0) {
      obj.state = storagePool_StateToJSON(message.state);
    }
    if (message.stateDetails !== "") {
      obj.stateDetails = message.stateDetails;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.activeDirectory !== "") {
      obj.activeDirectory = message.activeDirectory;
    }
    if (message.kmsConfig !== "") {
      obj.kmsConfig = message.kmsConfig;
    }
    if (message.ldapEnabled !== false) {
      obj.ldapEnabled = message.ldapEnabled;
    }
    if (message.psaRange !== "") {
      obj.psaRange = message.psaRange;
    }
    if (message.encryptionType !== 0) {
      obj.encryptionType = encryptionTypeToJSON(message.encryptionType);
    }
    if (message.globalAccessAllowed !== undefined) {
      obj.globalAccessAllowed = message.globalAccessAllowed;
    }
    if (message.allowAutoTiering !== false) {
      obj.allowAutoTiering = message.allowAutoTiering;
    }
    if (message.replicaZone !== "") {
      obj.replicaZone = message.replicaZone;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    return obj;
  },

  create(base?: DeepPartial<StoragePool>): StoragePool {
    return StoragePool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StoragePool>): StoragePool {
    const message = createBaseStoragePool();
    message.name = object.name ?? "";
    message.serviceLevel = object.serviceLevel ?? 0;
    message.capacityGib = (object.capacityGib !== undefined && object.capacityGib !== null)
      ? Long.fromValue(object.capacityGib)
      : Long.ZERO;
    message.volumeCapacityGib = (object.volumeCapacityGib !== undefined && object.volumeCapacityGib !== null)
      ? Long.fromValue(object.volumeCapacityGib)
      : Long.ZERO;
    message.volumeCount = object.volumeCount ?? 0;
    message.state = object.state ?? 0;
    message.stateDetails = object.stateDetails ?? "";
    message.createTime = object.createTime ?? undefined;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.network = object.network ?? "";
    message.activeDirectory = object.activeDirectory ?? "";
    message.kmsConfig = object.kmsConfig ?? "";
    message.ldapEnabled = object.ldapEnabled ?? false;
    message.psaRange = object.psaRange ?? "";
    message.encryptionType = object.encryptionType ?? 0;
    message.globalAccessAllowed = object.globalAccessAllowed ?? undefined;
    message.allowAutoTiering = object.allowAutoTiering ?? false;
    message.replicaZone = object.replicaZone ?? "";
    message.zone = object.zone ?? "";
    return message;
  },
};

function createBaseStoragePool_LabelsEntry(): StoragePool_LabelsEntry {
  return { key: "", value: "" };
}

export const StoragePool_LabelsEntry: MessageFns<StoragePool_LabelsEntry> = {
  encode(message: StoragePool_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoragePool_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoragePool_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StoragePool_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StoragePool_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<StoragePool_LabelsEntry>): StoragePool_LabelsEntry {
    return StoragePool_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StoragePool_LabelsEntry>): StoragePool_LabelsEntry {
    const message = createBaseStoragePool_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
