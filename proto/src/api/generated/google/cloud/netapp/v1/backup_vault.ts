// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/backup_vault.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** A NetApp BackupVault. */
export interface BackupVault {
  /**
   * Identifier. The resource name of the backup vault.
   * Format:
   * `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
   */
  name: string;
  /** Output only. The backup vault state. */
  state: BackupVault_State;
  /** Output only. Create time of the backup vault. */
  createTime:
    | Date
    | undefined;
  /** Description of the backup vault. */
  description: string;
  /** Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
}

/** The Backup Vault States */
export enum BackupVault_State {
  /** STATE_UNSPECIFIED - State not set. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - BackupVault is being created. */
  CREATING = 1,
  /** READY - BackupVault is available for use. */
  READY = 2,
  /** DELETING - BackupVault is being deleted. */
  DELETING = 3,
  /** ERROR - BackupVault is not valid and cannot be used. */
  ERROR = 4,
  /** UPDATING - BackupVault is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function backupVault_StateFromJSON(object: any): BackupVault_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return BackupVault_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return BackupVault_State.CREATING;
    case 2:
    case "READY":
      return BackupVault_State.READY;
    case 3:
    case "DELETING":
      return BackupVault_State.DELETING;
    case 4:
    case "ERROR":
      return BackupVault_State.ERROR;
    case 5:
    case "UPDATING":
      return BackupVault_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BackupVault_State.UNRECOGNIZED;
  }
}

export function backupVault_StateToJSON(object: BackupVault_State): string {
  switch (object) {
    case BackupVault_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case BackupVault_State.CREATING:
      return "CREATING";
    case BackupVault_State.READY:
      return "READY";
    case BackupVault_State.DELETING:
      return "DELETING";
    case BackupVault_State.ERROR:
      return "ERROR";
    case BackupVault_State.UPDATING:
      return "UPDATING";
    case BackupVault_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BackupVault_LabelsEntry {
  key: string;
  value: string;
}

/** GetBackupVaultRequest gets the state of a backupVault. */
export interface GetBackupVaultRequest {
  /**
   * Required. The backupVault resource name, in the format
   * `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
   */
  name: string;
}

/** ListBackupVaultsRequest lists backupVaults. */
export interface ListBackupVaultsRequest {
  /**
   * Required. The location for which to retrieve backupVault information,
   * in the format
   * `projects/{project_id}/locations/{location}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /** Sort results. Supported values are "name", "name desc" or "" (unsorted). */
  orderBy: string;
  /** List filter. */
  filter: string;
}

/** ListBackupVaultsResponse is the result of ListBackupVaultsRequest. */
export interface ListBackupVaultsResponse {
  /** A list of backupVaults in the project for the specified location. */
  backupVaults: BackupVault[];
  /**
   * The token you can use to retrieve the next page of results. Not returned
   * if there are no more results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** CreateBackupVaultRequest creates a backup vault. */
export interface CreateBackupVaultRequest {
  /**
   * Required. The location to create the backup vaults, in the format
   * `projects/{project_id}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The ID to use for the backupVault.
   * The ID must be unique within the specified location.
   * Must contain only letters, numbers, underscore and hyphen, with the first
   * character a letter or underscore, the last a letter or underscore or a
   * number, and a 63 character maximum.
   */
  backupVaultId: string;
  /** Required. A backupVault resource */
  backupVault: BackupVault | undefined;
}

/** DeleteBackupVaultRequest deletes a backupVault. */
export interface DeleteBackupVaultRequest {
  /**
   * Required. The backupVault resource name, in the format
   * `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
   */
  name: string;
}

/** UpdateBackupVaultRequest updates description and/or labels for a backupVault. */
export interface UpdateBackupVaultRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Backup resource to be updated.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The backupVault being updated */
  backupVault: BackupVault | undefined;
}

function createBaseBackupVault(): BackupVault {
  return { name: "", state: 0, createTime: undefined, description: "", labels: {} };
}

export const BackupVault: MessageFns<BackupVault> = {
  encode(message: BackupVault, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      BackupVault_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupVault {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupVault();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = BackupVault_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupVault {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? backupVault_StateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BackupVault): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = backupVault_StateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<BackupVault>): BackupVault {
    return BackupVault.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupVault>): BackupVault {
    const message = createBaseBackupVault();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBackupVault_LabelsEntry(): BackupVault_LabelsEntry {
  return { key: "", value: "" };
}

export const BackupVault_LabelsEntry: MessageFns<BackupVault_LabelsEntry> = {
  encode(message: BackupVault_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupVault_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupVault_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupVault_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BackupVault_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BackupVault_LabelsEntry>): BackupVault_LabelsEntry {
    return BackupVault_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupVault_LabelsEntry>): BackupVault_LabelsEntry {
    const message = createBaseBackupVault_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetBackupVaultRequest(): GetBackupVaultRequest {
  return { name: "" };
}

export const GetBackupVaultRequest: MessageFns<GetBackupVaultRequest> = {
  encode(message: GetBackupVaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBackupVaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackupVaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackupVaultRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBackupVaultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBackupVaultRequest>): GetBackupVaultRequest {
    return GetBackupVaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBackupVaultRequest>): GetBackupVaultRequest {
    const message = createBaseGetBackupVaultRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListBackupVaultsRequest(): ListBackupVaultsRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListBackupVaultsRequest: MessageFns<ListBackupVaultsRequest> = {
  encode(message: ListBackupVaultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupVaultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupVaultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupVaultsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListBackupVaultsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupVaultsRequest>): ListBackupVaultsRequest {
    return ListBackupVaultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupVaultsRequest>): ListBackupVaultsRequest {
    const message = createBaseListBackupVaultsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListBackupVaultsResponse(): ListBackupVaultsResponse {
  return { backupVaults: [], nextPageToken: "", unreachable: [] };
}

export const ListBackupVaultsResponse: MessageFns<ListBackupVaultsResponse> = {
  encode(message: ListBackupVaultsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.backupVaults) {
      BackupVault.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupVaultsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupVaultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupVaults.push(BackupVault.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupVaultsResponse {
    return {
      backupVaults: globalThis.Array.isArray(object?.backupVaults)
        ? object.backupVaults.map((e: any) => BackupVault.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListBackupVaultsResponse): unknown {
    const obj: any = {};
    if (message.backupVaults?.length) {
      obj.backupVaults = message.backupVaults.map((e) => BackupVault.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupVaultsResponse>): ListBackupVaultsResponse {
    return ListBackupVaultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupVaultsResponse>): ListBackupVaultsResponse {
    const message = createBaseListBackupVaultsResponse();
    message.backupVaults = object.backupVaults?.map((e) => BackupVault.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateBackupVaultRequest(): CreateBackupVaultRequest {
  return { parent: "", backupVaultId: "", backupVault: undefined };
}

export const CreateBackupVaultRequest: MessageFns<CreateBackupVaultRequest> = {
  encode(message: CreateBackupVaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.backupVaultId !== "") {
      writer.uint32(18).string(message.backupVaultId);
    }
    if (message.backupVault !== undefined) {
      BackupVault.encode(message.backupVault, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBackupVaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBackupVaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.backupVaultId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.backupVault = BackupVault.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBackupVaultRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      backupVaultId: isSet(object.backupVaultId) ? globalThis.String(object.backupVaultId) : "",
      backupVault: isSet(object.backupVault) ? BackupVault.fromJSON(object.backupVault) : undefined,
    };
  },

  toJSON(message: CreateBackupVaultRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.backupVaultId !== "") {
      obj.backupVaultId = message.backupVaultId;
    }
    if (message.backupVault !== undefined) {
      obj.backupVault = BackupVault.toJSON(message.backupVault);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBackupVaultRequest>): CreateBackupVaultRequest {
    return CreateBackupVaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBackupVaultRequest>): CreateBackupVaultRequest {
    const message = createBaseCreateBackupVaultRequest();
    message.parent = object.parent ?? "";
    message.backupVaultId = object.backupVaultId ?? "";
    message.backupVault = (object.backupVault !== undefined && object.backupVault !== null)
      ? BackupVault.fromPartial(object.backupVault)
      : undefined;
    return message;
  },
};

function createBaseDeleteBackupVaultRequest(): DeleteBackupVaultRequest {
  return { name: "" };
}

export const DeleteBackupVaultRequest: MessageFns<DeleteBackupVaultRequest> = {
  encode(message: DeleteBackupVaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBackupVaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBackupVaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBackupVaultRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteBackupVaultRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBackupVaultRequest>): DeleteBackupVaultRequest {
    return DeleteBackupVaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBackupVaultRequest>): DeleteBackupVaultRequest {
    const message = createBaseDeleteBackupVaultRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateBackupVaultRequest(): UpdateBackupVaultRequest {
  return { updateMask: undefined, backupVault: undefined };
}

export const UpdateBackupVaultRequest: MessageFns<UpdateBackupVaultRequest> = {
  encode(message: UpdateBackupVaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.backupVault !== undefined) {
      BackupVault.encode(message.backupVault, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBackupVaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBackupVaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.backupVault = BackupVault.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBackupVaultRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      backupVault: isSet(object.backupVault) ? BackupVault.fromJSON(object.backupVault) : undefined,
    };
  },

  toJSON(message: UpdateBackupVaultRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.backupVault !== undefined) {
      obj.backupVault = BackupVault.toJSON(message.backupVault);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBackupVaultRequest>): UpdateBackupVaultRequest {
    return UpdateBackupVaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBackupVaultRequest>): UpdateBackupVaultRequest {
    const message = createBaseUpdateBackupVaultRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.backupVault = (object.backupVault !== undefined && object.backupVault !== null)
      ? BackupVault.fromPartial(object.backupVault)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
