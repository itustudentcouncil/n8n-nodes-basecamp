// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/active_directory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** ListActiveDirectoriesRequest for requesting multiple active directories. */
export interface ListActiveDirectoriesRequest {
  /** Required. Parent value for ListActiveDirectoriesRequest */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, the server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** ListActiveDirectoriesResponse contains all the active directories requested. */
export interface ListActiveDirectoriesResponse {
  /** The list of active directories. */
  activeDirectories: ActiveDirectory[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** GetActiveDirectory for getting a single active directory. */
export interface GetActiveDirectoryRequest {
  /** Required. Name of the active directory. */
  name: string;
}

/** CreateActiveDirectoryRequest for creating an active directory. */
export interface CreateActiveDirectoryRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. Fields of the to be created active directory. */
  activeDirectory:
    | ActiveDirectory
    | undefined;
  /**
   * Required. ID of the active directory to create. Must be unique within the
   * parent resource. Must contain only letters, numbers, underscore and hyphen,
   * with the first character a letter or underscore, the last a letter or
   * underscore or a number, and a 63 character maximum.
   */
  activeDirectoryId: string;
}

/** UpdateActiveDirectoryRequest for updating an active directory. */
export interface UpdateActiveDirectoryRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Active Directory resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The volume being updated */
  activeDirectory: ActiveDirectory | undefined;
}

/** DeleteActiveDirectoryRequest for deleting a single active directory. */
export interface DeleteActiveDirectoryRequest {
  /** Required. Name of the active directory. */
  name: string;
}

/** ActiveDirectory is the public representation of the active directory config. */
export interface ActiveDirectory {
  /**
   * Identifier. The resource name of the active directory.
   * Format:
   * `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
   */
  name: string;
  /** Output only. Create time of the active directory. */
  createTime:
    | Date
    | undefined;
  /** Output only. The state of the AD. */
  state: ActiveDirectory_State;
  /** Required. Name of the Active Directory domain */
  domain: string;
  /**
   * The Active Directory site the service will limit Domain Controller
   * discovery too.
   */
  site: string;
  /**
   * Required. Comma separated list of DNS server IP addresses for the Active
   * Directory domain.
   */
  dns: string;
  /** Required. NetBIOSPrefix is used as a prefix for SMB server name. */
  netBiosPrefix: string;
  /**
   * The Organizational Unit (OU) within the Windows Active Directory the user
   * belongs to.
   */
  organizationalUnit: string;
  /** If enabled, AES encryption will be enabled for SMB communication. */
  aesEncryption: boolean;
  /** Required. Username of the Active Directory domain administrator. */
  username: string;
  /** Required. Password of the Active Directory domain administrator. */
  password: string;
  /**
   * Optional. Users to be added to the Built-in Backup Operator active
   * directory group.
   */
  backupOperators: string[];
  /** Optional. Users to be added to the Built-in Admininstrators group. */
  administrators: string[];
  /** Optional. Domain users to be given the SeSecurityPrivilege. */
  securityOperators: string[];
  /**
   * Name of the active directory machine. This optional parameter is used only
   * while creating kerberos volume
   */
  kdcHostname: string;
  /** KDC server IP address for the active directory machine. */
  kdcIp: string;
  /**
   * If enabled, will allow access to local users and LDAP users. If access is
   * needed for only LDAP users, it has to be disabled.
   */
  nfsUsersWithLdap: boolean;
  /** Description of the active directory. */
  description: string;
  /** Specifies whether or not the LDAP traffic needs to be signed. */
  ldapSigning: boolean;
  /**
   * If enabled, traffic between the SMB server to Domain Controller (DC) will
   * be encrypted.
   */
  encryptDcConnections: boolean;
  /** Labels for the active directory. */
  labels: { [key: string]: string };
  /** Output only. The state details of the Active Directory. */
  stateDetails: string;
}

/** The Active Directory States */
export enum ActiveDirectory_State {
  /** STATE_UNSPECIFIED - Unspecified Active Directory State */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Active Directory State is Creating */
  CREATING = 1,
  /** READY - Active Directory State is Ready */
  READY = 2,
  /** UPDATING - Active Directory State is Updating */
  UPDATING = 3,
  /** IN_USE - Active Directory State is In use */
  IN_USE = 4,
  /** DELETING - Active Directory State is Deleting */
  DELETING = 5,
  /** ERROR - Active Directory State is Error */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function activeDirectory_StateFromJSON(object: any): ActiveDirectory_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ActiveDirectory_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ActiveDirectory_State.CREATING;
    case 2:
    case "READY":
      return ActiveDirectory_State.READY;
    case 3:
    case "UPDATING":
      return ActiveDirectory_State.UPDATING;
    case 4:
    case "IN_USE":
      return ActiveDirectory_State.IN_USE;
    case 5:
    case "DELETING":
      return ActiveDirectory_State.DELETING;
    case 6:
    case "ERROR":
      return ActiveDirectory_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActiveDirectory_State.UNRECOGNIZED;
  }
}

export function activeDirectory_StateToJSON(object: ActiveDirectory_State): string {
  switch (object) {
    case ActiveDirectory_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ActiveDirectory_State.CREATING:
      return "CREATING";
    case ActiveDirectory_State.READY:
      return "READY";
    case ActiveDirectory_State.UPDATING:
      return "UPDATING";
    case ActiveDirectory_State.IN_USE:
      return "IN_USE";
    case ActiveDirectory_State.DELETING:
      return "DELETING";
    case ActiveDirectory_State.ERROR:
      return "ERROR";
    case ActiveDirectory_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActiveDirectory_LabelsEntry {
  key: string;
  value: string;
}

function createBaseListActiveDirectoriesRequest(): ListActiveDirectoriesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListActiveDirectoriesRequest: MessageFns<ListActiveDirectoriesRequest> = {
  encode(message: ListActiveDirectoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActiveDirectoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActiveDirectoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActiveDirectoriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListActiveDirectoriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListActiveDirectoriesRequest>): ListActiveDirectoriesRequest {
    return ListActiveDirectoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListActiveDirectoriesRequest>): ListActiveDirectoriesRequest {
    const message = createBaseListActiveDirectoriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListActiveDirectoriesResponse(): ListActiveDirectoriesResponse {
  return { activeDirectories: [], nextPageToken: "", unreachable: [] };
}

export const ListActiveDirectoriesResponse: MessageFns<ListActiveDirectoriesResponse> = {
  encode(message: ListActiveDirectoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.activeDirectories) {
      ActiveDirectory.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActiveDirectoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActiveDirectoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.activeDirectories.push(ActiveDirectory.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActiveDirectoriesResponse {
    return {
      activeDirectories: globalThis.Array.isArray(object?.activeDirectories)
        ? object.activeDirectories.map((e: any) => ActiveDirectory.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListActiveDirectoriesResponse): unknown {
    const obj: any = {};
    if (message.activeDirectories?.length) {
      obj.activeDirectories = message.activeDirectories.map((e) => ActiveDirectory.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListActiveDirectoriesResponse>): ListActiveDirectoriesResponse {
    return ListActiveDirectoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListActiveDirectoriesResponse>): ListActiveDirectoriesResponse {
    const message = createBaseListActiveDirectoriesResponse();
    message.activeDirectories = object.activeDirectories?.map((e) => ActiveDirectory.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetActiveDirectoryRequest(): GetActiveDirectoryRequest {
  return { name: "" };
}

export const GetActiveDirectoryRequest: MessageFns<GetActiveDirectoryRequest> = {
  encode(message: GetActiveDirectoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveDirectoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveDirectoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActiveDirectoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetActiveDirectoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetActiveDirectoryRequest>): GetActiveDirectoryRequest {
    return GetActiveDirectoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetActiveDirectoryRequest>): GetActiveDirectoryRequest {
    const message = createBaseGetActiveDirectoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateActiveDirectoryRequest(): CreateActiveDirectoryRequest {
  return { parent: "", activeDirectory: undefined, activeDirectoryId: "" };
}

export const CreateActiveDirectoryRequest: MessageFns<CreateActiveDirectoryRequest> = {
  encode(message: CreateActiveDirectoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.activeDirectory !== undefined) {
      ActiveDirectory.encode(message.activeDirectory, writer.uint32(18).fork()).join();
    }
    if (message.activeDirectoryId !== "") {
      writer.uint32(26).string(message.activeDirectoryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateActiveDirectoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateActiveDirectoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.activeDirectory = ActiveDirectory.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.activeDirectoryId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateActiveDirectoryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      activeDirectory: isSet(object.activeDirectory) ? ActiveDirectory.fromJSON(object.activeDirectory) : undefined,
      activeDirectoryId: isSet(object.activeDirectoryId) ? globalThis.String(object.activeDirectoryId) : "",
    };
  },

  toJSON(message: CreateActiveDirectoryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.activeDirectory !== undefined) {
      obj.activeDirectory = ActiveDirectory.toJSON(message.activeDirectory);
    }
    if (message.activeDirectoryId !== "") {
      obj.activeDirectoryId = message.activeDirectoryId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateActiveDirectoryRequest>): CreateActiveDirectoryRequest {
    return CreateActiveDirectoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateActiveDirectoryRequest>): CreateActiveDirectoryRequest {
    const message = createBaseCreateActiveDirectoryRequest();
    message.parent = object.parent ?? "";
    message.activeDirectory = (object.activeDirectory !== undefined && object.activeDirectory !== null)
      ? ActiveDirectory.fromPartial(object.activeDirectory)
      : undefined;
    message.activeDirectoryId = object.activeDirectoryId ?? "";
    return message;
  },
};

function createBaseUpdateActiveDirectoryRequest(): UpdateActiveDirectoryRequest {
  return { updateMask: undefined, activeDirectory: undefined };
}

export const UpdateActiveDirectoryRequest: MessageFns<UpdateActiveDirectoryRequest> = {
  encode(message: UpdateActiveDirectoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.activeDirectory !== undefined) {
      ActiveDirectory.encode(message.activeDirectory, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateActiveDirectoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateActiveDirectoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.activeDirectory = ActiveDirectory.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateActiveDirectoryRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      activeDirectory: isSet(object.activeDirectory) ? ActiveDirectory.fromJSON(object.activeDirectory) : undefined,
    };
  },

  toJSON(message: UpdateActiveDirectoryRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.activeDirectory !== undefined) {
      obj.activeDirectory = ActiveDirectory.toJSON(message.activeDirectory);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateActiveDirectoryRequest>): UpdateActiveDirectoryRequest {
    return UpdateActiveDirectoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateActiveDirectoryRequest>): UpdateActiveDirectoryRequest {
    const message = createBaseUpdateActiveDirectoryRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.activeDirectory = (object.activeDirectory !== undefined && object.activeDirectory !== null)
      ? ActiveDirectory.fromPartial(object.activeDirectory)
      : undefined;
    return message;
  },
};

function createBaseDeleteActiveDirectoryRequest(): DeleteActiveDirectoryRequest {
  return { name: "" };
}

export const DeleteActiveDirectoryRequest: MessageFns<DeleteActiveDirectoryRequest> = {
  encode(message: DeleteActiveDirectoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteActiveDirectoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteActiveDirectoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteActiveDirectoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteActiveDirectoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteActiveDirectoryRequest>): DeleteActiveDirectoryRequest {
    return DeleteActiveDirectoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteActiveDirectoryRequest>): DeleteActiveDirectoryRequest {
    const message = createBaseDeleteActiveDirectoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseActiveDirectory(): ActiveDirectory {
  return {
    name: "",
    createTime: undefined,
    state: 0,
    domain: "",
    site: "",
    dns: "",
    netBiosPrefix: "",
    organizationalUnit: "",
    aesEncryption: false,
    username: "",
    password: "",
    backupOperators: [],
    administrators: [],
    securityOperators: [],
    kdcHostname: "",
    kdcIp: "",
    nfsUsersWithLdap: false,
    description: "",
    ldapSigning: false,
    encryptDcConnections: false,
    labels: {},
    stateDetails: "",
  };
}

export const ActiveDirectory: MessageFns<ActiveDirectory> = {
  encode(message: ActiveDirectory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.domain !== "") {
      writer.uint32(34).string(message.domain);
    }
    if (message.site !== "") {
      writer.uint32(42).string(message.site);
    }
    if (message.dns !== "") {
      writer.uint32(50).string(message.dns);
    }
    if (message.netBiosPrefix !== "") {
      writer.uint32(58).string(message.netBiosPrefix);
    }
    if (message.organizationalUnit !== "") {
      writer.uint32(66).string(message.organizationalUnit);
    }
    if (message.aesEncryption !== false) {
      writer.uint32(72).bool(message.aesEncryption);
    }
    if (message.username !== "") {
      writer.uint32(82).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(90).string(message.password);
    }
    for (const v of message.backupOperators) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.administrators) {
      writer.uint32(178).string(v!);
    }
    for (const v of message.securityOperators) {
      writer.uint32(106).string(v!);
    }
    if (message.kdcHostname !== "") {
      writer.uint32(114).string(message.kdcHostname);
    }
    if (message.kdcIp !== "") {
      writer.uint32(122).string(message.kdcIp);
    }
    if (message.nfsUsersWithLdap !== false) {
      writer.uint32(128).bool(message.nfsUsersWithLdap);
    }
    if (message.description !== "") {
      writer.uint32(138).string(message.description);
    }
    if (message.ldapSigning !== false) {
      writer.uint32(144).bool(message.ldapSigning);
    }
    if (message.encryptDcConnections !== false) {
      writer.uint32(152).bool(message.encryptDcConnections);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ActiveDirectory_LabelsEntry.encode({ key: key as any, value }, writer.uint32(162).fork()).join();
    });
    if (message.stateDetails !== "") {
      writer.uint32(170).string(message.stateDetails);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveDirectory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveDirectory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.site = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dns = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.netBiosPrefix = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.organizationalUnit = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.aesEncryption = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.username = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.password = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.backupOperators.push(reader.string());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.administrators.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.securityOperators.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.kdcHostname = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.kdcIp = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.nfsUsersWithLdap = reader.bool();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.description = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.ldapSigning = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.encryptDcConnections = reader.bool();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          const entry20 = ActiveDirectory_LabelsEntry.decode(reader, reader.uint32());
          if (entry20.value !== undefined) {
            message.labels[entry20.key] = entry20.value;
          }
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.stateDetails = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveDirectory {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      state: isSet(object.state) ? activeDirectory_StateFromJSON(object.state) : 0,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      site: isSet(object.site) ? globalThis.String(object.site) : "",
      dns: isSet(object.dns) ? globalThis.String(object.dns) : "",
      netBiosPrefix: isSet(object.netBiosPrefix) ? globalThis.String(object.netBiosPrefix) : "",
      organizationalUnit: isSet(object.organizationalUnit) ? globalThis.String(object.organizationalUnit) : "",
      aesEncryption: isSet(object.aesEncryption) ? globalThis.Boolean(object.aesEncryption) : false,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      backupOperators: globalThis.Array.isArray(object?.backupOperators)
        ? object.backupOperators.map((e: any) => globalThis.String(e))
        : [],
      administrators: globalThis.Array.isArray(object?.administrators)
        ? object.administrators.map((e: any) => globalThis.String(e))
        : [],
      securityOperators: globalThis.Array.isArray(object?.securityOperators)
        ? object.securityOperators.map((e: any) => globalThis.String(e))
        : [],
      kdcHostname: isSet(object.kdcHostname) ? globalThis.String(object.kdcHostname) : "",
      kdcIp: isSet(object.kdcIp) ? globalThis.String(object.kdcIp) : "",
      nfsUsersWithLdap: isSet(object.nfsUsersWithLdap) ? globalThis.Boolean(object.nfsUsersWithLdap) : false,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      ldapSigning: isSet(object.ldapSigning) ? globalThis.Boolean(object.ldapSigning) : false,
      encryptDcConnections: isSet(object.encryptDcConnections)
        ? globalThis.Boolean(object.encryptDcConnections)
        : false,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      stateDetails: isSet(object.stateDetails) ? globalThis.String(object.stateDetails) : "",
    };
  },

  toJSON(message: ActiveDirectory): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = activeDirectory_StateToJSON(message.state);
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.site !== "") {
      obj.site = message.site;
    }
    if (message.dns !== "") {
      obj.dns = message.dns;
    }
    if (message.netBiosPrefix !== "") {
      obj.netBiosPrefix = message.netBiosPrefix;
    }
    if (message.organizationalUnit !== "") {
      obj.organizationalUnit = message.organizationalUnit;
    }
    if (message.aesEncryption !== false) {
      obj.aesEncryption = message.aesEncryption;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.backupOperators?.length) {
      obj.backupOperators = message.backupOperators;
    }
    if (message.administrators?.length) {
      obj.administrators = message.administrators;
    }
    if (message.securityOperators?.length) {
      obj.securityOperators = message.securityOperators;
    }
    if (message.kdcHostname !== "") {
      obj.kdcHostname = message.kdcHostname;
    }
    if (message.kdcIp !== "") {
      obj.kdcIp = message.kdcIp;
    }
    if (message.nfsUsersWithLdap !== false) {
      obj.nfsUsersWithLdap = message.nfsUsersWithLdap;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.ldapSigning !== false) {
      obj.ldapSigning = message.ldapSigning;
    }
    if (message.encryptDcConnections !== false) {
      obj.encryptDcConnections = message.encryptDcConnections;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.stateDetails !== "") {
      obj.stateDetails = message.stateDetails;
    }
    return obj;
  },

  create(base?: DeepPartial<ActiveDirectory>): ActiveDirectory {
    return ActiveDirectory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActiveDirectory>): ActiveDirectory {
    const message = createBaseActiveDirectory();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.state = object.state ?? 0;
    message.domain = object.domain ?? "";
    message.site = object.site ?? "";
    message.dns = object.dns ?? "";
    message.netBiosPrefix = object.netBiosPrefix ?? "";
    message.organizationalUnit = object.organizationalUnit ?? "";
    message.aesEncryption = object.aesEncryption ?? false;
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    message.backupOperators = object.backupOperators?.map((e) => e) || [];
    message.administrators = object.administrators?.map((e) => e) || [];
    message.securityOperators = object.securityOperators?.map((e) => e) || [];
    message.kdcHostname = object.kdcHostname ?? "";
    message.kdcIp = object.kdcIp ?? "";
    message.nfsUsersWithLdap = object.nfsUsersWithLdap ?? false;
    message.description = object.description ?? "";
    message.ldapSigning = object.ldapSigning ?? false;
    message.encryptDcConnections = object.encryptDcConnections ?? false;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.stateDetails = object.stateDetails ?? "";
    return message;
  },
};

function createBaseActiveDirectory_LabelsEntry(): ActiveDirectory_LabelsEntry {
  return { key: "", value: "" };
}

export const ActiveDirectory_LabelsEntry: MessageFns<ActiveDirectory_LabelsEntry> = {
  encode(message: ActiveDirectory_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveDirectory_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveDirectory_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveDirectory_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ActiveDirectory_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ActiveDirectory_LabelsEntry>): ActiveDirectory_LabelsEntry {
    return ActiveDirectory_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActiveDirectory_LabelsEntry>): ActiveDirectory_LabelsEntry {
    const message = createBaseActiveDirectory_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
