// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/replication.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** TransferStats reports all statistics related to replication transfer. */
export interface TransferStats {
  /** Cumulative bytes trasferred so far for the replication relatinonship. */
  transferBytes?:
    | Long
    | undefined;
  /**
   * Cumulative time taken across all transfers for the replication
   * relationship.
   */
  totalTransferDuration?:
    | Duration
    | undefined;
  /** Last transfer size in bytes. */
  lastTransferBytes?:
    | Long
    | undefined;
  /** Time taken during last transfer. */
  lastTransferDuration?:
    | Duration
    | undefined;
  /**
   * Lag duration indicates the duration by which Destination region volume
   * content lags behind the primary region volume content.
   */
  lagDuration?:
    | Duration
    | undefined;
  /** Time when progress was updated last. */
  updateTime?:
    | Date
    | undefined;
  /** Time when last transfer completed. */
  lastTransferEndTime?:
    | Date
    | undefined;
  /** A message describing the cause of the last transfer failure. */
  lastTransferError?: string | undefined;
}

/**
 * Replication is a nested resource under Volume, that describes a
 * cross-region replication relationship between 2 volumes in different
 * regions.
 */
export interface Replication {
  /**
   * Identifier. The resource name of the Replication.
   * Format:
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
   */
  name: string;
  /** Output only. State of the replication. */
  state: Replication_State;
  /** Output only. State details of the replication. */
  stateDetails: string;
  /** Output only. Indicates whether this points to source or destination. */
  role: Replication_ReplicationRole;
  /** Required. Indicates the schedule for replication. */
  replicationSchedule: Replication_ReplicationSchedule;
  /** Output only. Indicates the state of mirroring. */
  mirrorState: Replication_MirrorState;
  /**
   * Output only. Condition of the relationship. Can be one of the following:
   * - true: The replication relationship is healthy. It has not missed the most
   * recent scheduled transfer.
   * - false: The replication relationship is not healthy. It has missed the
   * most recent scheduled transfer.
   */
  healthy?:
    | boolean
    | undefined;
  /** Output only. Replication create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Full name of destination volume resource.
   * Example : "projects/{project}/locations/{location}/volumes/{volume_id}"
   */
  destinationVolume: string;
  /** Output only. Replication transfer statistics. */
  transferStats:
    | TransferStats
    | undefined;
  /** Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /** A description about this replication relationship. */
  description?:
    | string
    | undefined;
  /** Required. Input only. Destination volume parameters */
  destinationVolumeParameters:
    | DestinationVolumeParameters
    | undefined;
  /**
   * Output only. Full name of source volume resource.
   * Example : "projects/{project}/locations/{location}/volumes/{volume_id}"
   */
  sourceVolume: string;
}

/**
 * The replication states
 * New enum values may be added in future to indicate possible new states.
 */
export enum Replication_State {
  /** STATE_UNSPECIFIED - Unspecified replication State */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Replication is creating. */
  CREATING = 1,
  /** READY - Replication is ready. */
  READY = 2,
  /** UPDATING - Replication is updating. */
  UPDATING = 3,
  /** DELETING - Replication is deleting. */
  DELETING = 5,
  /** ERROR - Replication is in error state. */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function replication_StateFromJSON(object: any): Replication_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Replication_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Replication_State.CREATING;
    case 2:
    case "READY":
      return Replication_State.READY;
    case 3:
    case "UPDATING":
      return Replication_State.UPDATING;
    case 5:
    case "DELETING":
      return Replication_State.DELETING;
    case 6:
    case "ERROR":
      return Replication_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Replication_State.UNRECOGNIZED;
  }
}

export function replication_StateToJSON(object: Replication_State): string {
  switch (object) {
    case Replication_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Replication_State.CREATING:
      return "CREATING";
    case Replication_State.READY:
      return "READY";
    case Replication_State.UPDATING:
      return "UPDATING";
    case Replication_State.DELETING:
      return "DELETING";
    case Replication_State.ERROR:
      return "ERROR";
    case Replication_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * New enum values may be added in future to support different replication
 * topology.
 */
export enum Replication_ReplicationRole {
  /** REPLICATION_ROLE_UNSPECIFIED - Unspecified replication role */
  REPLICATION_ROLE_UNSPECIFIED = 0,
  /** SOURCE - Indicates Source volume. */
  SOURCE = 1,
  /** DESTINATION - Indicates Destination volume. */
  DESTINATION = 2,
  UNRECOGNIZED = -1,
}

export function replication_ReplicationRoleFromJSON(object: any): Replication_ReplicationRole {
  switch (object) {
    case 0:
    case "REPLICATION_ROLE_UNSPECIFIED":
      return Replication_ReplicationRole.REPLICATION_ROLE_UNSPECIFIED;
    case 1:
    case "SOURCE":
      return Replication_ReplicationRole.SOURCE;
    case 2:
    case "DESTINATION":
      return Replication_ReplicationRole.DESTINATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Replication_ReplicationRole.UNRECOGNIZED;
  }
}

export function replication_ReplicationRoleToJSON(object: Replication_ReplicationRole): string {
  switch (object) {
    case Replication_ReplicationRole.REPLICATION_ROLE_UNSPECIFIED:
      return "REPLICATION_ROLE_UNSPECIFIED";
    case Replication_ReplicationRole.SOURCE:
      return "SOURCE";
    case Replication_ReplicationRole.DESTINATION:
      return "DESTINATION";
    case Replication_ReplicationRole.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Schedule for Replication.
 * New enum values may be added in future to support different frequency of
 * replication.
 */
export enum Replication_ReplicationSchedule {
  /** REPLICATION_SCHEDULE_UNSPECIFIED - Unspecified ReplicationSchedule */
  REPLICATION_SCHEDULE_UNSPECIFIED = 0,
  /** EVERY_10_MINUTES - Replication happens once every 10 minutes. */
  EVERY_10_MINUTES = 1,
  /** HOURLY - Replication happens once every hour. */
  HOURLY = 2,
  /** DAILY - Replication happens once every day. */
  DAILY = 3,
  UNRECOGNIZED = -1,
}

export function replication_ReplicationScheduleFromJSON(object: any): Replication_ReplicationSchedule {
  switch (object) {
    case 0:
    case "REPLICATION_SCHEDULE_UNSPECIFIED":
      return Replication_ReplicationSchedule.REPLICATION_SCHEDULE_UNSPECIFIED;
    case 1:
    case "EVERY_10_MINUTES":
      return Replication_ReplicationSchedule.EVERY_10_MINUTES;
    case 2:
    case "HOURLY":
      return Replication_ReplicationSchedule.HOURLY;
    case 3:
    case "DAILY":
      return Replication_ReplicationSchedule.DAILY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Replication_ReplicationSchedule.UNRECOGNIZED;
  }
}

export function replication_ReplicationScheduleToJSON(object: Replication_ReplicationSchedule): string {
  switch (object) {
    case Replication_ReplicationSchedule.REPLICATION_SCHEDULE_UNSPECIFIED:
      return "REPLICATION_SCHEDULE_UNSPECIFIED";
    case Replication_ReplicationSchedule.EVERY_10_MINUTES:
      return "EVERY_10_MINUTES";
    case Replication_ReplicationSchedule.HOURLY:
      return "HOURLY";
    case Replication_ReplicationSchedule.DAILY:
      return "DAILY";
    case Replication_ReplicationSchedule.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Mirroring states.
 * No new value is expected to be added in future.
 */
export enum Replication_MirrorState {
  /** MIRROR_STATE_UNSPECIFIED - Unspecified MirrorState */
  MIRROR_STATE_UNSPECIFIED = 0,
  /** PREPARING - Destination volume is being prepared. */
  PREPARING = 1,
  /**
   * MIRRORED - Destination volume has been initialized and is ready to receive
   * replication transfers.
   */
  MIRRORED = 2,
  /** STOPPED - Destination volume is not receiving replication transfers. */
  STOPPED = 3,
  /** TRANSFERRING - Incremental replication is in progress. */
  TRANSFERRING = 4,
  UNRECOGNIZED = -1,
}

export function replication_MirrorStateFromJSON(object: any): Replication_MirrorState {
  switch (object) {
    case 0:
    case "MIRROR_STATE_UNSPECIFIED":
      return Replication_MirrorState.MIRROR_STATE_UNSPECIFIED;
    case 1:
    case "PREPARING":
      return Replication_MirrorState.PREPARING;
    case 2:
    case "MIRRORED":
      return Replication_MirrorState.MIRRORED;
    case 3:
    case "STOPPED":
      return Replication_MirrorState.STOPPED;
    case 4:
    case "TRANSFERRING":
      return Replication_MirrorState.TRANSFERRING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Replication_MirrorState.UNRECOGNIZED;
  }
}

export function replication_MirrorStateToJSON(object: Replication_MirrorState): string {
  switch (object) {
    case Replication_MirrorState.MIRROR_STATE_UNSPECIFIED:
      return "MIRROR_STATE_UNSPECIFIED";
    case Replication_MirrorState.PREPARING:
      return "PREPARING";
    case Replication_MirrorState.MIRRORED:
      return "MIRRORED";
    case Replication_MirrorState.STOPPED:
      return "STOPPED";
    case Replication_MirrorState.TRANSFERRING:
      return "TRANSFERRING";
    case Replication_MirrorState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Replication_LabelsEntry {
  key: string;
  value: string;
}

/** ListReplications lists replications. */
export interface ListReplicationsRequest {
  /**
   * Required. The volume for which to retrieve replication information,
   * in the format
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /** Sort results. Supported values are "name", "name desc" or "" (unsorted). */
  orderBy: string;
  /** List filter. */
  filter: string;
}

/** ListReplicationsResponse is the result of ListReplicationsRequest. */
export interface ListReplicationsResponse {
  /** A list of replications in the project for the specified volume. */
  replications: Replication[];
  /**
   * The token you can use to retrieve the next page of results. Not returned
   * if there are no more results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** GetReplicationRequest gets the state of a replication. */
export interface GetReplicationRequest {
  /**
   * Required. The replication resource name, in the format
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`
   */
  name: string;
}

/**
 * DestinationVolumeParameters specify input parameters used for creating
 * destination volume.
 */
export interface DestinationVolumeParameters {
  /** Required. Existing destination StoragePool name. */
  storagePool: string;
  /**
   * Desired destination volume resource id. If not specified, source volume's
   * resource id will be used.
   * This value must start with a lowercase letter followed by up to 62
   * lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
   */
  volumeId: string;
  /**
   * Destination volume's share name. If not specified, source volume's share
   * name will be used.
   */
  shareName: string;
  /** Description for the destination volume. */
  description?: string | undefined;
}

/** CreateReplicationRequest creates a replication. */
export interface CreateReplicationRequest {
  /**
   * Required. The NetApp volume to create the replications of, in the format
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}`
   */
  parent: string;
  /** Required. A replication resource */
  replication:
    | Replication
    | undefined;
  /**
   * Required. ID of the replication to create. Must be unique within the parent
   * resource. Must contain only letters, numbers, underscore and hyphen, with
   * the first character a letter or underscore, the last a letter or underscore
   * or a number, and a 63 character maximum.
   */
  replicationId: string;
}

/** DeleteReplicationRequest deletes a replication. */
export interface DeleteReplicationRequest {
  /**
   * Required. The replication resource name, in the format
   * `projects/* /locations/* /volumes/* /replications/{replication_id}`
   */
  name: string;
}

/** UpdateReplicationRequest updates description and/or labels for a replication. */
export interface UpdateReplicationRequest {
  /**
   * Required. Mask of fields to update.  At least one path must be supplied in
   * this field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. A replication resource */
  replication: Replication | undefined;
}

/** StopReplicationRequest stops a replication until resumed. */
export interface StopReplicationRequest {
  /**
   * Required. The resource name of the replication, in the format of
   * projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
   */
  name: string;
  /**
   * Indicates whether to stop replication forcefully while data transfer is in
   * progress.
   * Warning! if force is true, this will abort any current transfers
   * and can lead to data loss due to partial transfer.
   * If force is false, stop replication will fail while data transfer is in
   * progress and you will need to retry later.
   */
  force: boolean;
}

/** ResumeReplicationRequest resumes a stopped replication. */
export interface ResumeReplicationRequest {
  /**
   * Required. The resource name of the replication, in the format of
   * projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
   */
  name: string;
}

/**
 * ReverseReplicationDirectionRequest reverses direction of replication. Source
 * becomes destination and destination becomes source.
 */
export interface ReverseReplicationDirectionRequest {
  /**
   * Required. The resource name of the replication, in the format of
   * projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
   */
  name: string;
}

function createBaseTransferStats(): TransferStats {
  return {
    transferBytes: undefined,
    totalTransferDuration: undefined,
    lastTransferBytes: undefined,
    lastTransferDuration: undefined,
    lagDuration: undefined,
    updateTime: undefined,
    lastTransferEndTime: undefined,
    lastTransferError: undefined,
  };
}

export const TransferStats: MessageFns<TransferStats> = {
  encode(message: TransferStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transferBytes !== undefined) {
      writer.uint32(8).int64(message.transferBytes.toString());
    }
    if (message.totalTransferDuration !== undefined) {
      Duration.encode(message.totalTransferDuration, writer.uint32(18).fork()).join();
    }
    if (message.lastTransferBytes !== undefined) {
      writer.uint32(24).int64(message.lastTransferBytes.toString());
    }
    if (message.lastTransferDuration !== undefined) {
      Duration.encode(message.lastTransferDuration, writer.uint32(34).fork()).join();
    }
    if (message.lagDuration !== undefined) {
      Duration.encode(message.lagDuration, writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.lastTransferEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastTransferEndTime), writer.uint32(58).fork()).join();
    }
    if (message.lastTransferError !== undefined) {
      writer.uint32(66).string(message.lastTransferError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.transferBytes = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.totalTransferDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lastTransferBytes = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastTransferDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lagDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.lastTransferEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.lastTransferError = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferStats {
    return {
      transferBytes: isSet(object.transferBytes) ? Long.fromValue(object.transferBytes) : undefined,
      totalTransferDuration: isSet(object.totalTransferDuration)
        ? Duration.fromJSON(object.totalTransferDuration)
        : undefined,
      lastTransferBytes: isSet(object.lastTransferBytes) ? Long.fromValue(object.lastTransferBytes) : undefined,
      lastTransferDuration: isSet(object.lastTransferDuration)
        ? Duration.fromJSON(object.lastTransferDuration)
        : undefined,
      lagDuration: isSet(object.lagDuration) ? Duration.fromJSON(object.lagDuration) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      lastTransferEndTime: isSet(object.lastTransferEndTime)
        ? fromJsonTimestamp(object.lastTransferEndTime)
        : undefined,
      lastTransferError: isSet(object.lastTransferError) ? globalThis.String(object.lastTransferError) : undefined,
    };
  },

  toJSON(message: TransferStats): unknown {
    const obj: any = {};
    if (message.transferBytes !== undefined) {
      obj.transferBytes = (message.transferBytes || Long.ZERO).toString();
    }
    if (message.totalTransferDuration !== undefined) {
      obj.totalTransferDuration = Duration.toJSON(message.totalTransferDuration);
    }
    if (message.lastTransferBytes !== undefined) {
      obj.lastTransferBytes = (message.lastTransferBytes || Long.ZERO).toString();
    }
    if (message.lastTransferDuration !== undefined) {
      obj.lastTransferDuration = Duration.toJSON(message.lastTransferDuration);
    }
    if (message.lagDuration !== undefined) {
      obj.lagDuration = Duration.toJSON(message.lagDuration);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.lastTransferEndTime !== undefined) {
      obj.lastTransferEndTime = message.lastTransferEndTime.toISOString();
    }
    if (message.lastTransferError !== undefined) {
      obj.lastTransferError = message.lastTransferError;
    }
    return obj;
  },

  create(base?: DeepPartial<TransferStats>): TransferStats {
    return TransferStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransferStats>): TransferStats {
    const message = createBaseTransferStats();
    message.transferBytes = (object.transferBytes !== undefined && object.transferBytes !== null)
      ? Long.fromValue(object.transferBytes)
      : undefined;
    message.totalTransferDuration =
      (object.totalTransferDuration !== undefined && object.totalTransferDuration !== null)
        ? Duration.fromPartial(object.totalTransferDuration)
        : undefined;
    message.lastTransferBytes = (object.lastTransferBytes !== undefined && object.lastTransferBytes !== null)
      ? Long.fromValue(object.lastTransferBytes)
      : undefined;
    message.lastTransferDuration = (object.lastTransferDuration !== undefined && object.lastTransferDuration !== null)
      ? Duration.fromPartial(object.lastTransferDuration)
      : undefined;
    message.lagDuration = (object.lagDuration !== undefined && object.lagDuration !== null)
      ? Duration.fromPartial(object.lagDuration)
      : undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.lastTransferEndTime = object.lastTransferEndTime ?? undefined;
    message.lastTransferError = object.lastTransferError ?? undefined;
    return message;
  },
};

function createBaseReplication(): Replication {
  return {
    name: "",
    state: 0,
    stateDetails: "",
    role: 0,
    replicationSchedule: 0,
    mirrorState: 0,
    healthy: undefined,
    createTime: undefined,
    destinationVolume: "",
    transferStats: undefined,
    labels: {},
    description: undefined,
    destinationVolumeParameters: undefined,
    sourceVolume: "",
  };
}

export const Replication: MessageFns<Replication> = {
  encode(message: Replication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.stateDetails !== "") {
      writer.uint32(26).string(message.stateDetails);
    }
    if (message.role !== 0) {
      writer.uint32(32).int32(message.role);
    }
    if (message.replicationSchedule !== 0) {
      writer.uint32(40).int32(message.replicationSchedule);
    }
    if (message.mirrorState !== 0) {
      writer.uint32(48).int32(message.mirrorState);
    }
    if (message.healthy !== undefined) {
      writer.uint32(64).bool(message.healthy);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    if (message.destinationVolume !== "") {
      writer.uint32(82).string(message.destinationVolume);
    }
    if (message.transferStats !== undefined) {
      TransferStats.encode(message.transferStats, writer.uint32(90).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Replication_LabelsEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (message.description !== undefined) {
      writer.uint32(106).string(message.description);
    }
    if (message.destinationVolumeParameters !== undefined) {
      DestinationVolumeParameters.encode(message.destinationVolumeParameters, writer.uint32(114).fork()).join();
    }
    if (message.sourceVolume !== "") {
      writer.uint32(122).string(message.sourceVolume);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stateDetails = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.replicationSchedule = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.mirrorState = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.destinationVolume = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.transferStats = TransferStats.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = Replication_LabelsEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.labels[entry12.key] = entry12.value;
          }
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.description = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.destinationVolumeParameters = DestinationVolumeParameters.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.sourceVolume = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? replication_StateFromJSON(object.state) : 0,
      stateDetails: isSet(object.stateDetails) ? globalThis.String(object.stateDetails) : "",
      role: isSet(object.role) ? replication_ReplicationRoleFromJSON(object.role) : 0,
      replicationSchedule: isSet(object.replicationSchedule)
        ? replication_ReplicationScheduleFromJSON(object.replicationSchedule)
        : 0,
      mirrorState: isSet(object.mirrorState) ? replication_MirrorStateFromJSON(object.mirrorState) : 0,
      healthy: isSet(object.healthy) ? globalThis.Boolean(object.healthy) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      destinationVolume: isSet(object.destinationVolume) ? globalThis.String(object.destinationVolume) : "",
      transferStats: isSet(object.transferStats) ? TransferStats.fromJSON(object.transferStats) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      destinationVolumeParameters: isSet(object.destinationVolumeParameters)
        ? DestinationVolumeParameters.fromJSON(object.destinationVolumeParameters)
        : undefined,
      sourceVolume: isSet(object.sourceVolume) ? globalThis.String(object.sourceVolume) : "",
    };
  },

  toJSON(message: Replication): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = replication_StateToJSON(message.state);
    }
    if (message.stateDetails !== "") {
      obj.stateDetails = message.stateDetails;
    }
    if (message.role !== 0) {
      obj.role = replication_ReplicationRoleToJSON(message.role);
    }
    if (message.replicationSchedule !== 0) {
      obj.replicationSchedule = replication_ReplicationScheduleToJSON(message.replicationSchedule);
    }
    if (message.mirrorState !== 0) {
      obj.mirrorState = replication_MirrorStateToJSON(message.mirrorState);
    }
    if (message.healthy !== undefined) {
      obj.healthy = message.healthy;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.destinationVolume !== "") {
      obj.destinationVolume = message.destinationVolume;
    }
    if (message.transferStats !== undefined) {
      obj.transferStats = TransferStats.toJSON(message.transferStats);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.destinationVolumeParameters !== undefined) {
      obj.destinationVolumeParameters = DestinationVolumeParameters.toJSON(message.destinationVolumeParameters);
    }
    if (message.sourceVolume !== "") {
      obj.sourceVolume = message.sourceVolume;
    }
    return obj;
  },

  create(base?: DeepPartial<Replication>): Replication {
    return Replication.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication>): Replication {
    const message = createBaseReplication();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.stateDetails = object.stateDetails ?? "";
    message.role = object.role ?? 0;
    message.replicationSchedule = object.replicationSchedule ?? 0;
    message.mirrorState = object.mirrorState ?? 0;
    message.healthy = object.healthy ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.destinationVolume = object.destinationVolume ?? "";
    message.transferStats = (object.transferStats !== undefined && object.transferStats !== null)
      ? TransferStats.fromPartial(object.transferStats)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? undefined;
    message.destinationVolumeParameters =
      (object.destinationVolumeParameters !== undefined && object.destinationVolumeParameters !== null)
        ? DestinationVolumeParameters.fromPartial(object.destinationVolumeParameters)
        : undefined;
    message.sourceVolume = object.sourceVolume ?? "";
    return message;
  },
};

function createBaseReplication_LabelsEntry(): Replication_LabelsEntry {
  return { key: "", value: "" };
}

export const Replication_LabelsEntry: MessageFns<Replication_LabelsEntry> = {
  encode(message: Replication_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Replication_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Replication_LabelsEntry>): Replication_LabelsEntry {
    return Replication_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication_LabelsEntry>): Replication_LabelsEntry {
    const message = createBaseReplication_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListReplicationsRequest(): ListReplicationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListReplicationsRequest: MessageFns<ListReplicationsRequest> = {
  encode(message: ListReplicationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReplicationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReplicationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReplicationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListReplicationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReplicationsRequest>): ListReplicationsRequest {
    return ListReplicationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReplicationsRequest>): ListReplicationsRequest {
    const message = createBaseListReplicationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListReplicationsResponse(): ListReplicationsResponse {
  return { replications: [], nextPageToken: "", unreachable: [] };
}

export const ListReplicationsResponse: MessageFns<ListReplicationsResponse> = {
  encode(message: ListReplicationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.replications) {
      Replication.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReplicationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReplicationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.replications.push(Replication.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReplicationsResponse {
    return {
      replications: globalThis.Array.isArray(object?.replications)
        ? object.replications.map((e: any) => Replication.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListReplicationsResponse): unknown {
    const obj: any = {};
    if (message.replications?.length) {
      obj.replications = message.replications.map((e) => Replication.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReplicationsResponse>): ListReplicationsResponse {
    return ListReplicationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReplicationsResponse>): ListReplicationsResponse {
    const message = createBaseListReplicationsResponse();
    message.replications = object.replications?.map((e) => Replication.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetReplicationRequest(): GetReplicationRequest {
  return { name: "" };
}

export const GetReplicationRequest: MessageFns<GetReplicationRequest> = {
  encode(message: GetReplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReplicationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetReplicationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetReplicationRequest>): GetReplicationRequest {
    return GetReplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReplicationRequest>): GetReplicationRequest {
    const message = createBaseGetReplicationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDestinationVolumeParameters(): DestinationVolumeParameters {
  return { storagePool: "", volumeId: "", shareName: "", description: undefined };
}

export const DestinationVolumeParameters: MessageFns<DestinationVolumeParameters> = {
  encode(message: DestinationVolumeParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storagePool !== "") {
      writer.uint32(10).string(message.storagePool);
    }
    if (message.volumeId !== "") {
      writer.uint32(18).string(message.volumeId);
    }
    if (message.shareName !== "") {
      writer.uint32(26).string(message.shareName);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationVolumeParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationVolumeParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.storagePool = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.volumeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shareName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationVolumeParameters {
    return {
      storagePool: isSet(object.storagePool) ? globalThis.String(object.storagePool) : "",
      volumeId: isSet(object.volumeId) ? globalThis.String(object.volumeId) : "",
      shareName: isSet(object.shareName) ? globalThis.String(object.shareName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: DestinationVolumeParameters): unknown {
    const obj: any = {};
    if (message.storagePool !== "") {
      obj.storagePool = message.storagePool;
    }
    if (message.volumeId !== "") {
      obj.volumeId = message.volumeId;
    }
    if (message.shareName !== "") {
      obj.shareName = message.shareName;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<DestinationVolumeParameters>): DestinationVolumeParameters {
    return DestinationVolumeParameters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DestinationVolumeParameters>): DestinationVolumeParameters {
    const message = createBaseDestinationVolumeParameters();
    message.storagePool = object.storagePool ?? "";
    message.volumeId = object.volumeId ?? "";
    message.shareName = object.shareName ?? "";
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseCreateReplicationRequest(): CreateReplicationRequest {
  return { parent: "", replication: undefined, replicationId: "" };
}

export const CreateReplicationRequest: MessageFns<CreateReplicationRequest> = {
  encode(message: CreateReplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.replication !== undefined) {
      Replication.encode(message.replication, writer.uint32(18).fork()).join();
    }
    if (message.replicationId !== "") {
      writer.uint32(26).string(message.replicationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.replication = Replication.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.replicationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReplicationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      replication: isSet(object.replication) ? Replication.fromJSON(object.replication) : undefined,
      replicationId: isSet(object.replicationId) ? globalThis.String(object.replicationId) : "",
    };
  },

  toJSON(message: CreateReplicationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.replication !== undefined) {
      obj.replication = Replication.toJSON(message.replication);
    }
    if (message.replicationId !== "") {
      obj.replicationId = message.replicationId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateReplicationRequest>): CreateReplicationRequest {
    return CreateReplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateReplicationRequest>): CreateReplicationRequest {
    const message = createBaseCreateReplicationRequest();
    message.parent = object.parent ?? "";
    message.replication = (object.replication !== undefined && object.replication !== null)
      ? Replication.fromPartial(object.replication)
      : undefined;
    message.replicationId = object.replicationId ?? "";
    return message;
  },
};

function createBaseDeleteReplicationRequest(): DeleteReplicationRequest {
  return { name: "" };
}

export const DeleteReplicationRequest: MessageFns<DeleteReplicationRequest> = {
  encode(message: DeleteReplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteReplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReplicationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteReplicationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteReplicationRequest>): DeleteReplicationRequest {
    return DeleteReplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteReplicationRequest>): DeleteReplicationRequest {
    const message = createBaseDeleteReplicationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateReplicationRequest(): UpdateReplicationRequest {
  return { updateMask: undefined, replication: undefined };
}

export const UpdateReplicationRequest: MessageFns<UpdateReplicationRequest> = {
  encode(message: UpdateReplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.replication !== undefined) {
      Replication.encode(message.replication, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.replication = Replication.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReplicationRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      replication: isSet(object.replication) ? Replication.fromJSON(object.replication) : undefined,
    };
  },

  toJSON(message: UpdateReplicationRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.replication !== undefined) {
      obj.replication = Replication.toJSON(message.replication);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateReplicationRequest>): UpdateReplicationRequest {
    return UpdateReplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateReplicationRequest>): UpdateReplicationRequest {
    const message = createBaseUpdateReplicationRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.replication = (object.replication !== undefined && object.replication !== null)
      ? Replication.fromPartial(object.replication)
      : undefined;
    return message;
  },
};

function createBaseStopReplicationRequest(): StopReplicationRequest {
  return { name: "", force: false };
}

export const StopReplicationRequest: MessageFns<StopReplicationRequest> = {
  encode(message: StopReplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopReplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopReplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopReplicationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: StopReplicationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<StopReplicationRequest>): StopReplicationRequest {
    return StopReplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopReplicationRequest>): StopReplicationRequest {
    const message = createBaseStopReplicationRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseResumeReplicationRequest(): ResumeReplicationRequest {
  return { name: "" };
}

export const ResumeReplicationRequest: MessageFns<ResumeReplicationRequest> = {
  encode(message: ResumeReplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeReplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeReplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeReplicationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeReplicationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeReplicationRequest>): ResumeReplicationRequest {
    return ResumeReplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeReplicationRequest>): ResumeReplicationRequest {
    const message = createBaseResumeReplicationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReverseReplicationDirectionRequest(): ReverseReplicationDirectionRequest {
  return { name: "" };
}

export const ReverseReplicationDirectionRequest: MessageFns<ReverseReplicationDirectionRequest> = {
  encode(message: ReverseReplicationDirectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReverseReplicationDirectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReverseReplicationDirectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReverseReplicationDirectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ReverseReplicationDirectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ReverseReplicationDirectionRequest>): ReverseReplicationDirectionRequest {
    return ReverseReplicationDirectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReverseReplicationDirectionRequest>): ReverseReplicationDirectionRequest {
    const message = createBaseReverseReplicationDirectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
