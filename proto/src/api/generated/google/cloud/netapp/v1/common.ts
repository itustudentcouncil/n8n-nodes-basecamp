// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.netapp.v1";

/** The service level of a storage pool and its volumes. */
export enum ServiceLevel {
  /** SERVICE_LEVEL_UNSPECIFIED - Unspecified service level. */
  SERVICE_LEVEL_UNSPECIFIED = 0,
  /** PREMIUM - Premium service level. */
  PREMIUM = 1,
  /** EXTREME - Extreme service level. */
  EXTREME = 2,
  /** STANDARD - Standard service level. */
  STANDARD = 3,
  /** FLEX - Flex service level. */
  FLEX = 4,
  UNRECOGNIZED = -1,
}

export function serviceLevelFromJSON(object: any): ServiceLevel {
  switch (object) {
    case 0:
    case "SERVICE_LEVEL_UNSPECIFIED":
      return ServiceLevel.SERVICE_LEVEL_UNSPECIFIED;
    case 1:
    case "PREMIUM":
      return ServiceLevel.PREMIUM;
    case 2:
    case "EXTREME":
      return ServiceLevel.EXTREME;
    case 3:
    case "STANDARD":
      return ServiceLevel.STANDARD;
    case 4:
    case "FLEX":
      return ServiceLevel.FLEX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServiceLevel.UNRECOGNIZED;
  }
}

export function serviceLevelToJSON(object: ServiceLevel): string {
  switch (object) {
    case ServiceLevel.SERVICE_LEVEL_UNSPECIFIED:
      return "SERVICE_LEVEL_UNSPECIFIED";
    case ServiceLevel.PREMIUM:
      return "PREMIUM";
    case ServiceLevel.EXTREME:
      return "EXTREME";
    case ServiceLevel.STANDARD:
      return "STANDARD";
    case ServiceLevel.FLEX:
      return "FLEX";
    case ServiceLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The volume encryption key source. */
export enum EncryptionType {
  /** ENCRYPTION_TYPE_UNSPECIFIED - The source of the encryption key is not specified. */
  ENCRYPTION_TYPE_UNSPECIFIED = 0,
  /** SERVICE_MANAGED - Google managed encryption key. */
  SERVICE_MANAGED = 1,
  /** CLOUD_KMS - Customer managed encryption key, which is stored in KMS. */
  CLOUD_KMS = 2,
  UNRECOGNIZED = -1,
}

export function encryptionTypeFromJSON(object: any): EncryptionType {
  switch (object) {
    case 0:
    case "ENCRYPTION_TYPE_UNSPECIFIED":
      return EncryptionType.ENCRYPTION_TYPE_UNSPECIFIED;
    case 1:
    case "SERVICE_MANAGED":
      return EncryptionType.SERVICE_MANAGED;
    case 2:
    case "CLOUD_KMS":
      return EncryptionType.CLOUD_KMS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncryptionType.UNRECOGNIZED;
  }
}

export function encryptionTypeToJSON(object: EncryptionType): string {
  switch (object) {
    case EncryptionType.ENCRYPTION_TYPE_UNSPECIFIED:
      return "ENCRYPTION_TYPE_UNSPECIFIED";
    case EncryptionType.SERVICE_MANAGED:
      return "SERVICE_MANAGED";
    case EncryptionType.CLOUD_KMS:
      return "CLOUD_KMS";
    case EncryptionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Metadata for a given
 * [google.cloud.location.Location][google.cloud.location.Location].
 */
export interface LocationMetadata {
  /** Output only. Supported service levels in a location. */
  supportedServiceLevels: ServiceLevel[];
}

function createBaseLocationMetadata(): LocationMetadata {
  return { supportedServiceLevels: [] };
}

export const LocationMetadata: MessageFns<LocationMetadata> = {
  encode(message: LocationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.supportedServiceLevels) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.supportedServiceLevels.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.supportedServiceLevels.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationMetadata {
    return {
      supportedServiceLevels: globalThis.Array.isArray(object?.supportedServiceLevels)
        ? object.supportedServiceLevels.map((e: any) => serviceLevelFromJSON(e))
        : [],
    };
  },

  toJSON(message: LocationMetadata): unknown {
    const obj: any = {};
    if (message.supportedServiceLevels?.length) {
      obj.supportedServiceLevels = message.supportedServiceLevels.map((e) => serviceLevelToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LocationMetadata>): LocationMetadata {
    return LocationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationMetadata>): LocationMetadata {
    const message = createBaseLocationMetadata();
    message.supportedServiceLevels = object.supportedServiceLevels?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
