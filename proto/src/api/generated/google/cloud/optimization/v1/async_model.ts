// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/optimization/v1/async_model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.optimization.v1";

/** Data formats for input and output files. */
export enum DataFormat {
  /** DATA_FORMAT_UNSPECIFIED - Default value. */
  DATA_FORMAT_UNSPECIFIED = 0,
  /** JSON - Input data in json format. */
  JSON = 1,
  /** STRING - Input data in string format. */
  STRING = 2,
  UNRECOGNIZED = -1,
}

export function dataFormatFromJSON(object: any): DataFormat {
  switch (object) {
    case 0:
    case "DATA_FORMAT_UNSPECIFIED":
      return DataFormat.DATA_FORMAT_UNSPECIFIED;
    case 1:
    case "JSON":
      return DataFormat.JSON;
    case 2:
    case "STRING":
      return DataFormat.STRING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataFormat.UNRECOGNIZED;
  }
}

export function dataFormatToJSON(object: DataFormat): string {
  switch (object) {
    case DataFormat.DATA_FORMAT_UNSPECIFIED:
      return "DATA_FORMAT_UNSPECIFIED";
    case DataFormat.JSON:
      return "JSON";
    case DataFormat.STRING:
      return "STRING";
    case DataFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The desired input location information. */
export interface InputConfig {
  /**
   * The Google Cloud Storage location to read the input from. This must be a
   * single file.
   */
  gcsSource?:
    | GcsSource
    | undefined;
  /** The input data format that used to store the model in Cloud Storage. */
  dataFormat: DataFormat;
}

/** The desired output location. */
export interface OutputConfig {
  /** The Google Cloud Storage location to write the output to. */
  gcsDestination?:
    | GcsDestination
    | undefined;
  /** The output data format that used to store the results in Cloud Storage. */
  dataFormat: DataFormat;
}

/** The Google Cloud Storage location where the input file will be read from. */
export interface GcsSource {
  /** Required. URI of the Google Cloud Storage location. */
  uri: string;
}

/** The Google Cloud Storage location where the output file will be written to. */
export interface GcsDestination {
  /** Required. URI of the Google Cloud Storage location. */
  uri: string;
}

/** The long running operation metadata for async model related methods. */
export interface AsyncModelMetadata {
  /** The state of the current operation. */
  state: AsyncModelMetadata_State;
  /**
   * A message providing more details about the current state of the operation.
   * For example, the error message if the operation is failed.
   */
  stateMessage: string;
  /** The creation time of the operation. */
  createTime:
    | Date
    | undefined;
  /** The last update time of the operation. */
  updateTime: Date | undefined;
}

/** Possible states of the operation. */
export enum AsyncModelMetadata_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** RUNNING - Request is being processed. */
  RUNNING = 1,
  /** SUCCEEDED - The operation completed successfully. */
  SUCCEEDED = 2,
  /** CANCELLED - The operation was cancelled. */
  CANCELLED = 3,
  /** FAILED - The operation has failed. */
  FAILED = 4,
  UNRECOGNIZED = -1,
}

export function asyncModelMetadata_StateFromJSON(object: any): AsyncModelMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AsyncModelMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "RUNNING":
      return AsyncModelMetadata_State.RUNNING;
    case 2:
    case "SUCCEEDED":
      return AsyncModelMetadata_State.SUCCEEDED;
    case 3:
    case "CANCELLED":
      return AsyncModelMetadata_State.CANCELLED;
    case 4:
    case "FAILED":
      return AsyncModelMetadata_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AsyncModelMetadata_State.UNRECOGNIZED;
  }
}

export function asyncModelMetadata_StateToJSON(object: AsyncModelMetadata_State): string {
  switch (object) {
    case AsyncModelMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AsyncModelMetadata_State.RUNNING:
      return "RUNNING";
    case AsyncModelMetadata_State.SUCCEEDED:
      return "SUCCEEDED";
    case AsyncModelMetadata_State.CANCELLED:
      return "CANCELLED";
    case AsyncModelMetadata_State.FAILED:
      return "FAILED";
    case AsyncModelMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseInputConfig(): InputConfig {
  return { gcsSource: undefined, dataFormat: 0 };
}

export const InputConfig: MessageFns<InputConfig> = {
  encode(message: InputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsSource !== undefined) {
      GcsSource.encode(message.gcsSource, writer.uint32(10).fork()).join();
    }
    if (message.dataFormat !== 0) {
      writer.uint32(16).int32(message.dataFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsSource = GcsSource.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputConfig {
    return {
      gcsSource: isSet(object.gcsSource) ? GcsSource.fromJSON(object.gcsSource) : undefined,
      dataFormat: isSet(object.dataFormat) ? dataFormatFromJSON(object.dataFormat) : 0,
    };
  },

  toJSON(message: InputConfig): unknown {
    const obj: any = {};
    if (message.gcsSource !== undefined) {
      obj.gcsSource = GcsSource.toJSON(message.gcsSource);
    }
    if (message.dataFormat !== 0) {
      obj.dataFormat = dataFormatToJSON(message.dataFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<InputConfig>): InputConfig {
    return InputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InputConfig>): InputConfig {
    const message = createBaseInputConfig();
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? GcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.dataFormat = object.dataFormat ?? 0;
    return message;
  },
};

function createBaseOutputConfig(): OutputConfig {
  return { gcsDestination: undefined, dataFormat: 0 };
}

export const OutputConfig: MessageFns<OutputConfig> = {
  encode(message: OutputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsDestination !== undefined) {
      GcsDestination.encode(message.gcsDestination, writer.uint32(10).fork()).join();
    }
    if (message.dataFormat !== 0) {
      writer.uint32(16).int32(message.dataFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsDestination = GcsDestination.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputConfig {
    return {
      gcsDestination: isSet(object.gcsDestination) ? GcsDestination.fromJSON(object.gcsDestination) : undefined,
      dataFormat: isSet(object.dataFormat) ? dataFormatFromJSON(object.dataFormat) : 0,
    };
  },

  toJSON(message: OutputConfig): unknown {
    const obj: any = {};
    if (message.gcsDestination !== undefined) {
      obj.gcsDestination = GcsDestination.toJSON(message.gcsDestination);
    }
    if (message.dataFormat !== 0) {
      obj.dataFormat = dataFormatToJSON(message.dataFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<OutputConfig>): OutputConfig {
    return OutputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutputConfig>): OutputConfig {
    const message = createBaseOutputConfig();
    message.gcsDestination = (object.gcsDestination !== undefined && object.gcsDestination !== null)
      ? GcsDestination.fromPartial(object.gcsDestination)
      : undefined;
    message.dataFormat = object.dataFormat ?? 0;
    return message;
  },
};

function createBaseGcsSource(): GcsSource {
  return { uri: "" };
}

export const GcsSource: MessageFns<GcsSource> = {
  encode(message: GcsSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsSource {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: GcsSource): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsSource>): GcsSource {
    return GcsSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsSource>): GcsSource {
    const message = createBaseGcsSource();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseGcsDestination(): GcsDestination {
  return { uri: "" };
}

export const GcsDestination: MessageFns<GcsDestination> = {
  encode(message: GcsDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsDestination {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: GcsDestination): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsDestination>): GcsDestination {
    return GcsDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsDestination>): GcsDestination {
    const message = createBaseGcsDestination();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseAsyncModelMetadata(): AsyncModelMetadata {
  return { state: 0, stateMessage: "", createTime: undefined, updateTime: undefined };
}

export const AsyncModelMetadata: MessageFns<AsyncModelMetadata> = {
  encode(message: AsyncModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(18).string(message.stateMessage);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AsyncModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsyncModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AsyncModelMetadata {
    return {
      state: isSet(object.state) ? asyncModelMetadata_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: AsyncModelMetadata): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = asyncModelMetadata_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<AsyncModelMetadata>): AsyncModelMetadata {
    return AsyncModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AsyncModelMetadata>): AsyncModelMetadata {
    const message = createBaseAsyncModelMetadata();
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
