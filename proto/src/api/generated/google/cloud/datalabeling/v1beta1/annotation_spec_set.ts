// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datalabeling/v1beta1/annotation_spec_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.datalabeling.v1beta1";

/**
 * An AnnotationSpecSet is a collection of label definitions. For example, in
 * image classification tasks, you define a set of possible labels for images as
 * an AnnotationSpecSet. An AnnotationSpecSet is immutable upon creation.
 */
export interface AnnotationSpecSet {
  /**
   * Output only. The AnnotationSpecSet resource name in the following format:
   *
   * "projects/<var>{project_id}</var>/annotationSpecSets/<var>{annotation_spec_set_id}</var>"
   */
  name: string;
  /**
   * Required. The display name for AnnotationSpecSet that you define when you
   * create it. Maximum of 64 characters.
   */
  displayName: string;
  /**
   * Optional. User-provided description of the annotation specification set.
   * The description can be up to 10,000 characters long.
   */
  description: string;
  /**
   * Required. The array of AnnotationSpecs that you define when you create the
   * AnnotationSpecSet. These are the possible labels for the labeling task.
   */
  annotationSpecs: AnnotationSpec[];
  /**
   * Output only. The names of any related resources that are blocking changes
   * to the annotation spec set.
   */
  blockingResources: string[];
}

/**
 * Container of information related to one possible annotation that can be used
 * in a labeling task. For example, an image classification task where images
 * are labeled as `dog` or `cat` must reference an AnnotationSpec for `dog` and
 * an AnnotationSpec for `cat`.
 */
export interface AnnotationSpec {
  /** Required. The display name of the AnnotationSpec. Maximum of 64 characters. */
  displayName: string;
  /**
   * Optional. User-provided description of the annotation specification.
   * The description can be up to 10,000 characters long.
   */
  description: string;
}

function createBaseAnnotationSpecSet(): AnnotationSpecSet {
  return { name: "", displayName: "", description: "", annotationSpecs: [], blockingResources: [] };
}

export const AnnotationSpecSet: MessageFns<AnnotationSpecSet> = {
  encode(message: AnnotationSpecSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.annotationSpecs) {
      AnnotationSpec.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.blockingResources) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotationSpecSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotationSpecSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.annotationSpecs.push(AnnotationSpec.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blockingResources.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotationSpecSet {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      annotationSpecs: globalThis.Array.isArray(object?.annotationSpecs)
        ? object.annotationSpecs.map((e: any) => AnnotationSpec.fromJSON(e))
        : [],
      blockingResources: globalThis.Array.isArray(object?.blockingResources)
        ? object.blockingResources.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AnnotationSpecSet): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.annotationSpecs?.length) {
      obj.annotationSpecs = message.annotationSpecs.map((e) => AnnotationSpec.toJSON(e));
    }
    if (message.blockingResources?.length) {
      obj.blockingResources = message.blockingResources;
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotationSpecSet>): AnnotationSpecSet {
    return AnnotationSpecSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotationSpecSet>): AnnotationSpecSet {
    const message = createBaseAnnotationSpecSet();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.annotationSpecs = object.annotationSpecs?.map((e) => AnnotationSpec.fromPartial(e)) || [];
    message.blockingResources = object.blockingResources?.map((e) => e) || [];
    return message;
  },
};

function createBaseAnnotationSpec(): AnnotationSpec {
  return { displayName: "", description: "" };
}

export const AnnotationSpec: MessageFns<AnnotationSpec> = {
  encode(message: AnnotationSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotationSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotationSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotationSpec {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AnnotationSpec): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotationSpec>): AnnotationSpec {
    return AnnotationSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotationSpec>): AnnotationSpec {
    const message = createBaseAnnotationSpec();
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
