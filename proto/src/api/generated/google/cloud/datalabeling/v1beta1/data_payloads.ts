// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datalabeling/v1beta1/data_payloads.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";

export const protobufPackage = "google.cloud.datalabeling.v1beta1";

/** Container of information about an image. */
export interface ImagePayload {
  /** Image format. */
  mimeType: string;
  /** A byte string of a thumbnail image. */
  imageThumbnail: Buffer;
  /** Image uri from the user bucket. */
  imageUri: string;
  /** Signed uri of the image file in the service bucket. */
  signedUri: string;
}

/** Container of information about a piece of text. */
export interface TextPayload {
  /** Text content. */
  textContent: string;
}

/** Container of information of a video thumbnail. */
export interface VideoThumbnail {
  /** A byte string of the video frame. */
  thumbnail: Buffer;
  /**
   * Time offset relative to the beginning of the video, corresponding to the
   * video frame where the thumbnail has been extracted from.
   */
  timeOffset: Duration | undefined;
}

/** Container of information of a video. */
export interface VideoPayload {
  /** Video format. */
  mimeType: string;
  /** Video uri from the user bucket. */
  videoUri: string;
  /** The list of video thumbnails. */
  videoThumbnails: VideoThumbnail[];
  /** FPS of the video. */
  frameRate: number;
  /** Signed uri of the video file in the service bucket. */
  signedUri: string;
}

function createBaseImagePayload(): ImagePayload {
  return { mimeType: "", imageThumbnail: Buffer.alloc(0), imageUri: "", signedUri: "" };
}

export const ImagePayload: MessageFns<ImagePayload> = {
  encode(message: ImagePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.imageThumbnail.length !== 0) {
      writer.uint32(18).bytes(message.imageThumbnail);
    }
    if (message.imageUri !== "") {
      writer.uint32(26).string(message.imageUri);
    }
    if (message.signedUri !== "") {
      writer.uint32(34).string(message.signedUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImagePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImagePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.imageThumbnail = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signedUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImagePayload {
    return {
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      imageThumbnail: isSet(object.imageThumbnail)
        ? Buffer.from(bytesFromBase64(object.imageThumbnail))
        : Buffer.alloc(0),
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      signedUri: isSet(object.signedUri) ? globalThis.String(object.signedUri) : "",
    };
  },

  toJSON(message: ImagePayload): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.imageThumbnail.length !== 0) {
      obj.imageThumbnail = base64FromBytes(message.imageThumbnail);
    }
    if (message.imageUri !== "") {
      obj.imageUri = message.imageUri;
    }
    if (message.signedUri !== "") {
      obj.signedUri = message.signedUri;
    }
    return obj;
  },

  create(base?: DeepPartial<ImagePayload>): ImagePayload {
    return ImagePayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImagePayload>): ImagePayload {
    const message = createBaseImagePayload();
    message.mimeType = object.mimeType ?? "";
    message.imageThumbnail = object.imageThumbnail ?? Buffer.alloc(0);
    message.imageUri = object.imageUri ?? "";
    message.signedUri = object.signedUri ?? "";
    return message;
  },
};

function createBaseTextPayload(): TextPayload {
  return { textContent: "" };
}

export const TextPayload: MessageFns<TextPayload> = {
  encode(message: TextPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textContent !== "") {
      writer.uint32(10).string(message.textContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.textContent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextPayload {
    return { textContent: isSet(object.textContent) ? globalThis.String(object.textContent) : "" };
  },

  toJSON(message: TextPayload): unknown {
    const obj: any = {};
    if (message.textContent !== "") {
      obj.textContent = message.textContent;
    }
    return obj;
  },

  create(base?: DeepPartial<TextPayload>): TextPayload {
    return TextPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextPayload>): TextPayload {
    const message = createBaseTextPayload();
    message.textContent = object.textContent ?? "";
    return message;
  },
};

function createBaseVideoThumbnail(): VideoThumbnail {
  return { thumbnail: Buffer.alloc(0), timeOffset: undefined };
}

export const VideoThumbnail: MessageFns<VideoThumbnail> = {
  encode(message: VideoThumbnail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.thumbnail.length !== 0) {
      writer.uint32(10).bytes(message.thumbnail);
    }
    if (message.timeOffset !== undefined) {
      Duration.encode(message.timeOffset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoThumbnail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoThumbnail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.thumbnail = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeOffset = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoThumbnail {
    return {
      thumbnail: isSet(object.thumbnail) ? Buffer.from(bytesFromBase64(object.thumbnail)) : Buffer.alloc(0),
      timeOffset: isSet(object.timeOffset) ? Duration.fromJSON(object.timeOffset) : undefined,
    };
  },

  toJSON(message: VideoThumbnail): unknown {
    const obj: any = {};
    if (message.thumbnail.length !== 0) {
      obj.thumbnail = base64FromBytes(message.thumbnail);
    }
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Duration.toJSON(message.timeOffset);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoThumbnail>): VideoThumbnail {
    return VideoThumbnail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoThumbnail>): VideoThumbnail {
    const message = createBaseVideoThumbnail();
    message.thumbnail = object.thumbnail ?? Buffer.alloc(0);
    message.timeOffset = (object.timeOffset !== undefined && object.timeOffset !== null)
      ? Duration.fromPartial(object.timeOffset)
      : undefined;
    return message;
  },
};

function createBaseVideoPayload(): VideoPayload {
  return { mimeType: "", videoUri: "", videoThumbnails: [], frameRate: 0, signedUri: "" };
}

export const VideoPayload: MessageFns<VideoPayload> = {
  encode(message: VideoPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.videoUri !== "") {
      writer.uint32(18).string(message.videoUri);
    }
    for (const v of message.videoThumbnails) {
      VideoThumbnail.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.frameRate !== 0) {
      writer.uint32(37).float(message.frameRate);
    }
    if (message.signedUri !== "") {
      writer.uint32(42).string(message.signedUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.videoUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.videoThumbnails.push(VideoThumbnail.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.frameRate = reader.float();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.signedUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoPayload {
    return {
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      videoUri: isSet(object.videoUri) ? globalThis.String(object.videoUri) : "",
      videoThumbnails: globalThis.Array.isArray(object?.videoThumbnails)
        ? object.videoThumbnails.map((e: any) => VideoThumbnail.fromJSON(e))
        : [],
      frameRate: isSet(object.frameRate) ? globalThis.Number(object.frameRate) : 0,
      signedUri: isSet(object.signedUri) ? globalThis.String(object.signedUri) : "",
    };
  },

  toJSON(message: VideoPayload): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.videoUri !== "") {
      obj.videoUri = message.videoUri;
    }
    if (message.videoThumbnails?.length) {
      obj.videoThumbnails = message.videoThumbnails.map((e) => VideoThumbnail.toJSON(e));
    }
    if (message.frameRate !== 0) {
      obj.frameRate = message.frameRate;
    }
    if (message.signedUri !== "") {
      obj.signedUri = message.signedUri;
    }
    return obj;
  },

  create(base?: DeepPartial<VideoPayload>): VideoPayload {
    return VideoPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoPayload>): VideoPayload {
    const message = createBaseVideoPayload();
    message.mimeType = object.mimeType ?? "";
    message.videoUri = object.videoUri ?? "";
    message.videoThumbnails = object.videoThumbnails?.map((e) => VideoThumbnail.fromPartial(e)) || [];
    message.frameRate = object.frameRate ?? 0;
    message.signedUri = object.signedUri ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
