// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datalabeling/v1beta1/instruction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DataType, dataTypeFromJSON, dataTypeToJSON } from "./dataset.js";

export const protobufPackage = "google.cloud.datalabeling.v1beta1";

/**
 * Instruction of how to perform the labeling task for human operators.
 * Currently only PDF instruction is supported.
 */
export interface Instruction {
  /**
   * Output only. Instruction resource name, format:
   * projects/{project_id}/instructions/{instruction_id}
   */
  name: string;
  /** Required. The display name of the instruction. Maximum of 64 characters. */
  displayName: string;
  /**
   * Optional. User-provided description of the instruction.
   * The description can be up to 10000 characters long.
   */
  description: string;
  /** Output only. Creation time of instruction. */
  createTime:
    | Date
    | undefined;
  /** Output only. Last update time of instruction. */
  updateTime:
    | Date
    | undefined;
  /** Required. The data type of this instruction. */
  dataType: DataType;
  /**
   * Deprecated: this instruction format is not supported any more.
   * Instruction from a CSV file, such as for classification task.
   * The CSV file should have exact two columns, in the following format:
   *
   * * The first column is labeled data, such as an image reference, text.
   * * The second column is comma separated labels associated with data.
   *
   * @deprecated
   */
  csvInstruction:
    | CsvInstruction
    | undefined;
  /**
   * Instruction from a PDF document. The PDF should be in a Cloud Storage
   * bucket.
   */
  pdfInstruction:
    | PdfInstruction
    | undefined;
  /**
   * Output only. The names of any related resources that are blocking changes
   * to the instruction.
   */
  blockingResources: string[];
}

/**
 * Deprecated: this instruction format is not supported any more.
 * Instruction from a CSV file.
 */
export interface CsvInstruction {
  /** CSV file for the instruction. Only gcs path is allowed. */
  gcsFileUri: string;
}

/** Instruction from a PDF file. */
export interface PdfInstruction {
  /** PDF file for the instruction. Only gcs path is allowed. */
  gcsFileUri: string;
}

function createBaseInstruction(): Instruction {
  return {
    name: "",
    displayName: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    dataType: 0,
    csvInstruction: undefined,
    pdfInstruction: undefined,
    blockingResources: [],
  };
}

export const Instruction: MessageFns<Instruction> = {
  encode(message: Instruction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.dataType !== 0) {
      writer.uint32(48).int32(message.dataType);
    }
    if (message.csvInstruction !== undefined) {
      CsvInstruction.encode(message.csvInstruction, writer.uint32(58).fork()).join();
    }
    if (message.pdfInstruction !== undefined) {
      PdfInstruction.encode(message.pdfInstruction, writer.uint32(74).fork()).join();
    }
    for (const v of message.blockingResources) {
      writer.uint32(82).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instruction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstruction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.dataType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.csvInstruction = CsvInstruction.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.pdfInstruction = PdfInstruction.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.blockingResources.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instruction {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      dataType: isSet(object.dataType) ? dataTypeFromJSON(object.dataType) : 0,
      csvInstruction: isSet(object.csvInstruction) ? CsvInstruction.fromJSON(object.csvInstruction) : undefined,
      pdfInstruction: isSet(object.pdfInstruction) ? PdfInstruction.fromJSON(object.pdfInstruction) : undefined,
      blockingResources: globalThis.Array.isArray(object?.blockingResources)
        ? object.blockingResources.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Instruction): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.dataType !== 0) {
      obj.dataType = dataTypeToJSON(message.dataType);
    }
    if (message.csvInstruction !== undefined) {
      obj.csvInstruction = CsvInstruction.toJSON(message.csvInstruction);
    }
    if (message.pdfInstruction !== undefined) {
      obj.pdfInstruction = PdfInstruction.toJSON(message.pdfInstruction);
    }
    if (message.blockingResources?.length) {
      obj.blockingResources = message.blockingResources;
    }
    return obj;
  },

  create(base?: DeepPartial<Instruction>): Instruction {
    return Instruction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instruction>): Instruction {
    const message = createBaseInstruction();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.dataType = object.dataType ?? 0;
    message.csvInstruction = (object.csvInstruction !== undefined && object.csvInstruction !== null)
      ? CsvInstruction.fromPartial(object.csvInstruction)
      : undefined;
    message.pdfInstruction = (object.pdfInstruction !== undefined && object.pdfInstruction !== null)
      ? PdfInstruction.fromPartial(object.pdfInstruction)
      : undefined;
    message.blockingResources = object.blockingResources?.map((e) => e) || [];
    return message;
  },
};

function createBaseCsvInstruction(): CsvInstruction {
  return { gcsFileUri: "" };
}

export const CsvInstruction: MessageFns<CsvInstruction> = {
  encode(message: CsvInstruction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsFileUri !== "") {
      writer.uint32(10).string(message.gcsFileUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CsvInstruction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCsvInstruction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsFileUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CsvInstruction {
    return { gcsFileUri: isSet(object.gcsFileUri) ? globalThis.String(object.gcsFileUri) : "" };
  },

  toJSON(message: CsvInstruction): unknown {
    const obj: any = {};
    if (message.gcsFileUri !== "") {
      obj.gcsFileUri = message.gcsFileUri;
    }
    return obj;
  },

  create(base?: DeepPartial<CsvInstruction>): CsvInstruction {
    return CsvInstruction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CsvInstruction>): CsvInstruction {
    const message = createBaseCsvInstruction();
    message.gcsFileUri = object.gcsFileUri ?? "";
    return message;
  },
};

function createBasePdfInstruction(): PdfInstruction {
  return { gcsFileUri: "" };
}

export const PdfInstruction: MessageFns<PdfInstruction> = {
  encode(message: PdfInstruction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsFileUri !== "") {
      writer.uint32(10).string(message.gcsFileUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PdfInstruction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePdfInstruction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsFileUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PdfInstruction {
    return { gcsFileUri: isSet(object.gcsFileUri) ? globalThis.String(object.gcsFileUri) : "" };
  },

  toJSON(message: PdfInstruction): unknown {
    const obj: any = {};
    if (message.gcsFileUri !== "") {
      obj.gcsFileUri = message.gcsFileUri;
    }
    return obj;
  },

  create(base?: DeepPartial<PdfInstruction>): PdfInstruction {
    return PdfInstruction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PdfInstruction>): PdfInstruction {
    const message = createBasePdfInstruction();
    message.gcsFileUri = object.gcsFileUri ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
