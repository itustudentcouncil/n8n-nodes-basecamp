// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/certificatemanager/logging/v1/logs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.certificatemanager.logging.v1";

/**
 * Log message which notifies about expired or close to
 * expiry certificates.
 */
export interface CertificatesExpiry {
  /** Number of reported certificates. */
  count: Long;
  /** Names of reported certificates. If there are too many, the list is sampled. */
  certificates: string[];
  /** State of reported certificates. */
  state: CertificatesExpiry_State;
  /**
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   */
  expireTime: Date | undefined;
}

/** Expiration state of the certificate. */
export enum CertificatesExpiry_State {
  /** STATE_UNSPECIFIED - Unspecified state, should never be reported. */
  STATE_UNSPECIFIED = 0,
  /** CLOSE_TO_EXPIRY - Certificate will expire soon. */
  CLOSE_TO_EXPIRY = 1,
  /** EXPIRED - Certificate is expired. */
  EXPIRED = 2,
  UNRECOGNIZED = -1,
}

export function certificatesExpiry_StateFromJSON(object: any): CertificatesExpiry_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return CertificatesExpiry_State.STATE_UNSPECIFIED;
    case 1:
    case "CLOSE_TO_EXPIRY":
      return CertificatesExpiry_State.CLOSE_TO_EXPIRY;
    case 2:
    case "EXPIRED":
      return CertificatesExpiry_State.EXPIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CertificatesExpiry_State.UNRECOGNIZED;
  }
}

export function certificatesExpiry_StateToJSON(object: CertificatesExpiry_State): string {
  switch (object) {
    case CertificatesExpiry_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case CertificatesExpiry_State.CLOSE_TO_EXPIRY:
      return "CLOSE_TO_EXPIRY";
    case CertificatesExpiry_State.EXPIRED:
      return "EXPIRED";
    case CertificatesExpiry_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCertificatesExpiry(): CertificatesExpiry {
  return { count: Long.ZERO, certificates: [], state: 0, expireTime: undefined };
}

export const CertificatesExpiry: MessageFns<CertificatesExpiry> = {
  encode(message: CertificatesExpiry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.count.toString());
    }
    for (const v of message.certificates) {
      writer.uint32(18).string(v!);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificatesExpiry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificatesExpiry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.certificates.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificatesExpiry {
    return {
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
      certificates: globalThis.Array.isArray(object?.certificates)
        ? object.certificates.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? certificatesExpiry_StateFromJSON(object.state) : 0,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: CertificatesExpiry): unknown {
    const obj: any = {};
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    if (message.certificates?.length) {
      obj.certificates = message.certificates;
    }
    if (message.state !== 0) {
      obj.state = certificatesExpiry_StateToJSON(message.state);
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CertificatesExpiry>): CertificatesExpiry {
    return CertificatesExpiry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CertificatesExpiry>): CertificatesExpiry {
    const message = createBaseCertificatesExpiry();
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    message.certificates = object.certificates?.map((e) => e) || [];
    message.state = object.state ?? 0;
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
