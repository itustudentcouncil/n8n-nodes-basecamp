// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/certificatemanager/v1/certificate_issuance_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.certificatemanager.v1";

/** Request for the `ListCertificateIssuanceConfigs` method. */
export interface ListCertificateIssuanceConfigsRequest {
  /**
   * Required. The project and location from which the certificate should be
   * listed, specified in the format `projects/* /locations/*`.
   */
  parent: string;
  /** Maximum number of certificate configs to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListCertificateIssuanceConfigsResponse`.
   * Indicates that this is a continuation of a prior
   * `ListCertificateIssuanceConfigs` call, and that the system should return
   * the next page of data.
   */
  pageToken: string;
  /** Filter expression to restrict the Certificates Configs returned. */
  filter: string;
  /**
   * A list of Certificate Config field names used to specify the order of the
   * returned results. The default sorting order is ascending. To specify
   * descending order for a field, add a suffix `" desc"`.
   */
  orderBy: string;
}

/** Response for the `ListCertificateIssuanceConfigs` method. */
export interface ListCertificateIssuanceConfigsResponse {
  /** A list of certificate configs for the parent resource. */
  certificateIssuanceConfigs: CertificateIssuanceConfig[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for the `GetCertificateIssuanceConfig` method. */
export interface GetCertificateIssuanceConfigRequest {
  /**
   * Required. A name of the certificate issuance config to describe. Must be in
   * the format `projects/* /locations/* /certificateIssuanceConfigs/*`.
   */
  name: string;
}

/** Request for the `CreateCertificateIssuanceConfig` method. */
export interface CreateCertificateIssuanceConfigRequest {
  /**
   * Required. The parent resource of the certificate issuance config. Must be
   * in the format `projects/* /locations/*`.
   */
  parent: string;
  /** Required. A user-provided name of the certificate config. */
  certificateIssuanceConfigId: string;
  /** Required. A definition of the certificate issuance config to create. */
  certificateIssuanceConfig: CertificateIssuanceConfig | undefined;
}

/** Request for the `DeleteCertificateIssuanceConfig` method. */
export interface DeleteCertificateIssuanceConfigRequest {
  /**
   * Required. A name of the certificate issuance config to delete. Must be in
   * the format `projects/* /locations/* /certificateIssuanceConfigs/*`.
   */
  name: string;
}

/** CertificateIssuanceConfig specifies how to issue and manage a certificate. */
export interface CertificateIssuanceConfig {
  /**
   * A user-defined name of the certificate issuance config.
   * CertificateIssuanceConfig names must be unique globally and match pattern
   * `projects/* /locations/* /certificateIssuanceConfigs/*`.
   */
  name: string;
  /** Output only. The creation timestamp of a CertificateIssuanceConfig. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last update timestamp of a CertificateIssuanceConfig. */
  updateTime:
    | Date
    | undefined;
  /** Set of labels associated with a CertificateIssuanceConfig. */
  labels: { [key: string]: string };
  /** One or more paragraphs of text description of a CertificateIssuanceConfig. */
  description: string;
  /**
   * Required. The CA that issues the workload certificate. It includes the CA
   * address, type, authentication to CA service, etc.
   */
  certificateAuthorityConfig:
    | CertificateIssuanceConfig_CertificateAuthorityConfig
    | undefined;
  /** Required. Workload certificate lifetime requested. */
  lifetime:
    | Duration
    | undefined;
  /**
   * Required. Specifies the percentage of elapsed time of the certificate
   * lifetime to wait before renewing the certificate. Must be a number between
   * 1-99, inclusive.
   */
  rotationWindowPercentage: number;
  /** Required. The key algorithm to use when generating the private key. */
  keyAlgorithm: CertificateIssuanceConfig_KeyAlgorithm;
}

/** The type of keypair to generate. */
export enum CertificateIssuanceConfig_KeyAlgorithm {
  /** KEY_ALGORITHM_UNSPECIFIED - Unspecified key algorithm. */
  KEY_ALGORITHM_UNSPECIFIED = 0,
  /** RSA_2048 - Specifies RSA with a 2048-bit modulus. */
  RSA_2048 = 1,
  /** ECDSA_P256 - Specifies ECDSA with curve P256. */
  ECDSA_P256 = 4,
  UNRECOGNIZED = -1,
}

export function certificateIssuanceConfig_KeyAlgorithmFromJSON(object: any): CertificateIssuanceConfig_KeyAlgorithm {
  switch (object) {
    case 0:
    case "KEY_ALGORITHM_UNSPECIFIED":
      return CertificateIssuanceConfig_KeyAlgorithm.KEY_ALGORITHM_UNSPECIFIED;
    case 1:
    case "RSA_2048":
      return CertificateIssuanceConfig_KeyAlgorithm.RSA_2048;
    case 4:
    case "ECDSA_P256":
      return CertificateIssuanceConfig_KeyAlgorithm.ECDSA_P256;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CertificateIssuanceConfig_KeyAlgorithm.UNRECOGNIZED;
  }
}

export function certificateIssuanceConfig_KeyAlgorithmToJSON(object: CertificateIssuanceConfig_KeyAlgorithm): string {
  switch (object) {
    case CertificateIssuanceConfig_KeyAlgorithm.KEY_ALGORITHM_UNSPECIFIED:
      return "KEY_ALGORITHM_UNSPECIFIED";
    case CertificateIssuanceConfig_KeyAlgorithm.RSA_2048:
      return "RSA_2048";
    case CertificateIssuanceConfig_KeyAlgorithm.ECDSA_P256:
      return "ECDSA_P256";
    case CertificateIssuanceConfig_KeyAlgorithm.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The CA that issues the workload certificate. It includes CA address, type,
 * authentication to CA service, etc.
 */
export interface CertificateIssuanceConfig_CertificateAuthorityConfig {
  /** Defines a CertificateAuthorityServiceConfig. */
  certificateAuthorityServiceConfig?:
    | CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig
    | undefined;
}

/** Contains information required to contact CA service. */
export interface CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
  /**
   * Required. A CA pool resource used to issue a certificate.
   * The CA pool string has a relative resource path following the form
   * "projects/{project}/locations/{location}/caPools/{ca_pool}".
   */
  caPool: string;
}

export interface CertificateIssuanceConfig_LabelsEntry {
  key: string;
  value: string;
}

function createBaseListCertificateIssuanceConfigsRequest(): ListCertificateIssuanceConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCertificateIssuanceConfigsRequest: MessageFns<ListCertificateIssuanceConfigsRequest> = {
  encode(message: ListCertificateIssuanceConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateIssuanceConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateIssuanceConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateIssuanceConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCertificateIssuanceConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateIssuanceConfigsRequest>): ListCertificateIssuanceConfigsRequest {
    return ListCertificateIssuanceConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateIssuanceConfigsRequest>): ListCertificateIssuanceConfigsRequest {
    const message = createBaseListCertificateIssuanceConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCertificateIssuanceConfigsResponse(): ListCertificateIssuanceConfigsResponse {
  return { certificateIssuanceConfigs: [], nextPageToken: "", unreachable: [] };
}

export const ListCertificateIssuanceConfigsResponse: MessageFns<ListCertificateIssuanceConfigsResponse> = {
  encode(message: ListCertificateIssuanceConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certificateIssuanceConfigs) {
      CertificateIssuanceConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateIssuanceConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateIssuanceConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateIssuanceConfigs.push(CertificateIssuanceConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateIssuanceConfigsResponse {
    return {
      certificateIssuanceConfigs: globalThis.Array.isArray(object?.certificateIssuanceConfigs)
        ? object.certificateIssuanceConfigs.map((e: any) => CertificateIssuanceConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCertificateIssuanceConfigsResponse): unknown {
    const obj: any = {};
    if (message.certificateIssuanceConfigs?.length) {
      obj.certificateIssuanceConfigs = message.certificateIssuanceConfigs.map((e) =>
        CertificateIssuanceConfig.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateIssuanceConfigsResponse>): ListCertificateIssuanceConfigsResponse {
    return ListCertificateIssuanceConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateIssuanceConfigsResponse>): ListCertificateIssuanceConfigsResponse {
    const message = createBaseListCertificateIssuanceConfigsResponse();
    message.certificateIssuanceConfigs =
      object.certificateIssuanceConfigs?.map((e) => CertificateIssuanceConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCertificateIssuanceConfigRequest(): GetCertificateIssuanceConfigRequest {
  return { name: "" };
}

export const GetCertificateIssuanceConfigRequest: MessageFns<GetCertificateIssuanceConfigRequest> = {
  encode(message: GetCertificateIssuanceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCertificateIssuanceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCertificateIssuanceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCertificateIssuanceConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCertificateIssuanceConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCertificateIssuanceConfigRequest>): GetCertificateIssuanceConfigRequest {
    return GetCertificateIssuanceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCertificateIssuanceConfigRequest>): GetCertificateIssuanceConfigRequest {
    const message = createBaseGetCertificateIssuanceConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCertificateIssuanceConfigRequest(): CreateCertificateIssuanceConfigRequest {
  return { parent: "", certificateIssuanceConfigId: "", certificateIssuanceConfig: undefined };
}

export const CreateCertificateIssuanceConfigRequest: MessageFns<CreateCertificateIssuanceConfigRequest> = {
  encode(message: CreateCertificateIssuanceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.certificateIssuanceConfigId !== "") {
      writer.uint32(18).string(message.certificateIssuanceConfigId);
    }
    if (message.certificateIssuanceConfig !== undefined) {
      CertificateIssuanceConfig.encode(message.certificateIssuanceConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCertificateIssuanceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCertificateIssuanceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.certificateIssuanceConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.certificateIssuanceConfig = CertificateIssuanceConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCertificateIssuanceConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      certificateIssuanceConfigId: isSet(object.certificateIssuanceConfigId)
        ? globalThis.String(object.certificateIssuanceConfigId)
        : "",
      certificateIssuanceConfig: isSet(object.certificateIssuanceConfig)
        ? CertificateIssuanceConfig.fromJSON(object.certificateIssuanceConfig)
        : undefined,
    };
  },

  toJSON(message: CreateCertificateIssuanceConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.certificateIssuanceConfigId !== "") {
      obj.certificateIssuanceConfigId = message.certificateIssuanceConfigId;
    }
    if (message.certificateIssuanceConfig !== undefined) {
      obj.certificateIssuanceConfig = CertificateIssuanceConfig.toJSON(message.certificateIssuanceConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCertificateIssuanceConfigRequest>): CreateCertificateIssuanceConfigRequest {
    return CreateCertificateIssuanceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCertificateIssuanceConfigRequest>): CreateCertificateIssuanceConfigRequest {
    const message = createBaseCreateCertificateIssuanceConfigRequest();
    message.parent = object.parent ?? "";
    message.certificateIssuanceConfigId = object.certificateIssuanceConfigId ?? "";
    message.certificateIssuanceConfig =
      (object.certificateIssuanceConfig !== undefined && object.certificateIssuanceConfig !== null)
        ? CertificateIssuanceConfig.fromPartial(object.certificateIssuanceConfig)
        : undefined;
    return message;
  },
};

function createBaseDeleteCertificateIssuanceConfigRequest(): DeleteCertificateIssuanceConfigRequest {
  return { name: "" };
}

export const DeleteCertificateIssuanceConfigRequest: MessageFns<DeleteCertificateIssuanceConfigRequest> = {
  encode(message: DeleteCertificateIssuanceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCertificateIssuanceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCertificateIssuanceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCertificateIssuanceConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCertificateIssuanceConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCertificateIssuanceConfigRequest>): DeleteCertificateIssuanceConfigRequest {
    return DeleteCertificateIssuanceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCertificateIssuanceConfigRequest>): DeleteCertificateIssuanceConfigRequest {
    const message = createBaseDeleteCertificateIssuanceConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCertificateIssuanceConfig(): CertificateIssuanceConfig {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    certificateAuthorityConfig: undefined,
    lifetime: undefined,
    rotationWindowPercentage: 0,
    keyAlgorithm: 0,
  };
}

export const CertificateIssuanceConfig: MessageFns<CertificateIssuanceConfig> = {
  encode(message: CertificateIssuanceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      CertificateIssuanceConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.certificateAuthorityConfig !== undefined) {
      CertificateIssuanceConfig_CertificateAuthorityConfig.encode(
        message.certificateAuthorityConfig,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.lifetime !== undefined) {
      Duration.encode(message.lifetime, writer.uint32(58).fork()).join();
    }
    if (message.rotationWindowPercentage !== 0) {
      writer.uint32(64).int32(message.rotationWindowPercentage);
    }
    if (message.keyAlgorithm !== 0) {
      writer.uint32(72).int32(message.keyAlgorithm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateIssuanceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateIssuanceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = CertificateIssuanceConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.certificateAuthorityConfig = CertificateIssuanceConfig_CertificateAuthorityConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.lifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.rotationWindowPercentage = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.keyAlgorithm = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateIssuanceConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      certificateAuthorityConfig: isSet(object.certificateAuthorityConfig)
        ? CertificateIssuanceConfig_CertificateAuthorityConfig.fromJSON(object.certificateAuthorityConfig)
        : undefined,
      lifetime: isSet(object.lifetime) ? Duration.fromJSON(object.lifetime) : undefined,
      rotationWindowPercentage: isSet(object.rotationWindowPercentage)
        ? globalThis.Number(object.rotationWindowPercentage)
        : 0,
      keyAlgorithm: isSet(object.keyAlgorithm)
        ? certificateIssuanceConfig_KeyAlgorithmFromJSON(object.keyAlgorithm)
        : 0,
    };
  },

  toJSON(message: CertificateIssuanceConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.certificateAuthorityConfig !== undefined) {
      obj.certificateAuthorityConfig = CertificateIssuanceConfig_CertificateAuthorityConfig.toJSON(
        message.certificateAuthorityConfig,
      );
    }
    if (message.lifetime !== undefined) {
      obj.lifetime = Duration.toJSON(message.lifetime);
    }
    if (message.rotationWindowPercentage !== 0) {
      obj.rotationWindowPercentage = Math.round(message.rotationWindowPercentage);
    }
    if (message.keyAlgorithm !== 0) {
      obj.keyAlgorithm = certificateIssuanceConfig_KeyAlgorithmToJSON(message.keyAlgorithm);
    }
    return obj;
  },

  create(base?: DeepPartial<CertificateIssuanceConfig>): CertificateIssuanceConfig {
    return CertificateIssuanceConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CertificateIssuanceConfig>): CertificateIssuanceConfig {
    const message = createBaseCertificateIssuanceConfig();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.certificateAuthorityConfig =
      (object.certificateAuthorityConfig !== undefined && object.certificateAuthorityConfig !== null)
        ? CertificateIssuanceConfig_CertificateAuthorityConfig.fromPartial(object.certificateAuthorityConfig)
        : undefined;
    message.lifetime = (object.lifetime !== undefined && object.lifetime !== null)
      ? Duration.fromPartial(object.lifetime)
      : undefined;
    message.rotationWindowPercentage = object.rotationWindowPercentage ?? 0;
    message.keyAlgorithm = object.keyAlgorithm ?? 0;
    return message;
  },
};

function createBaseCertificateIssuanceConfig_CertificateAuthorityConfig(): CertificateIssuanceConfig_CertificateAuthorityConfig {
  return { certificateAuthorityServiceConfig: undefined };
}

export const CertificateIssuanceConfig_CertificateAuthorityConfig: MessageFns<
  CertificateIssuanceConfig_CertificateAuthorityConfig
> = {
  encode(
    message: CertificateIssuanceConfig_CertificateAuthorityConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.certificateAuthorityServiceConfig !== undefined) {
      CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.encode(
        message.certificateAuthorityServiceConfig,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateIssuanceConfig_CertificateAuthorityConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateIssuanceConfig_CertificateAuthorityConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateAuthorityServiceConfig =
            CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.decode(
              reader,
              reader.uint32(),
            );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateIssuanceConfig_CertificateAuthorityConfig {
    return {
      certificateAuthorityServiceConfig: isSet(object.certificateAuthorityServiceConfig)
        ? CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.fromJSON(
          object.certificateAuthorityServiceConfig,
        )
        : undefined,
    };
  },

  toJSON(message: CertificateIssuanceConfig_CertificateAuthorityConfig): unknown {
    const obj: any = {};
    if (message.certificateAuthorityServiceConfig !== undefined) {
      obj.certificateAuthorityServiceConfig =
        CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.toJSON(
          message.certificateAuthorityServiceConfig,
        );
    }
    return obj;
  },

  create(
    base?: DeepPartial<CertificateIssuanceConfig_CertificateAuthorityConfig>,
  ): CertificateIssuanceConfig_CertificateAuthorityConfig {
    return CertificateIssuanceConfig_CertificateAuthorityConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CertificateIssuanceConfig_CertificateAuthorityConfig>,
  ): CertificateIssuanceConfig_CertificateAuthorityConfig {
    const message = createBaseCertificateIssuanceConfig_CertificateAuthorityConfig();
    message.certificateAuthorityServiceConfig =
      (object.certificateAuthorityServiceConfig !== undefined && object.certificateAuthorityServiceConfig !== null)
        ? CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.fromPartial(
          object.certificateAuthorityServiceConfig,
        )
        : undefined;
    return message;
  },
};

function createBaseCertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig(): CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
  return { caPool: "" };
}

export const CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig: MessageFns<
  CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig
> = {
  encode(
    message: CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.caPool !== "") {
      writer.uint32(10).string(message.caPool);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caPool = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
    return { caPool: isSet(object.caPool) ? globalThis.String(object.caPool) : "" };
  },

  toJSON(message: CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig): unknown {
    const obj: any = {};
    if (message.caPool !== "") {
      obj.caPool = message.caPool;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig>,
  ): CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
    return CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.fromPartial(
      base ?? {},
    );
  },
  fromPartial(
    object: DeepPartial<CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig>,
  ): CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
    const message = createBaseCertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig();
    message.caPool = object.caPool ?? "";
    return message;
  },
};

function createBaseCertificateIssuanceConfig_LabelsEntry(): CertificateIssuanceConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const CertificateIssuanceConfig_LabelsEntry: MessageFns<CertificateIssuanceConfig_LabelsEntry> = {
  encode(message: CertificateIssuanceConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateIssuanceConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateIssuanceConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateIssuanceConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CertificateIssuanceConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<CertificateIssuanceConfig_LabelsEntry>): CertificateIssuanceConfig_LabelsEntry {
    return CertificateIssuanceConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CertificateIssuanceConfig_LabelsEntry>): CertificateIssuanceConfig_LabelsEntry {
    const message = createBaseCertificateIssuanceConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
