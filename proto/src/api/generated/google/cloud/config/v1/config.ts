// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/config/v1/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.config.v1";

/**
 * Enum values to control quota checks for resources in terraform
 * configuration files.
 */
export enum QuotaValidation {
  /**
   * QUOTA_VALIDATION_UNSPECIFIED - The default value.
   * QuotaValidation on terraform configuration files will be disabled in
   * this case.
   */
  QUOTA_VALIDATION_UNSPECIFIED = 0,
  /**
   * ENABLED - Enable computing quotas for resources in terraform configuration files to
   * get visibility on resources with insufficient quotas.
   */
  ENABLED = 1,
  /**
   * ENFORCED - Enforce quota checks so deployment fails if there isn't sufficient quotas
   * available to deploy resources in terraform configuration files.
   */
  ENFORCED = 2,
  UNRECOGNIZED = -1,
}

export function quotaValidationFromJSON(object: any): QuotaValidation {
  switch (object) {
    case 0:
    case "QUOTA_VALIDATION_UNSPECIFIED":
      return QuotaValidation.QUOTA_VALIDATION_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return QuotaValidation.ENABLED;
    case 2:
    case "ENFORCED":
      return QuotaValidation.ENFORCED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return QuotaValidation.UNRECOGNIZED;
  }
}

export function quotaValidationToJSON(object: QuotaValidation): string {
  switch (object) {
    case QuotaValidation.QUOTA_VALIDATION_UNSPECIFIED:
      return "QUOTA_VALIDATION_UNSPECIFIED";
    case QuotaValidation.ENABLED:
      return "ENABLED";
    case QuotaValidation.ENFORCED:
      return "ENFORCED";
    case QuotaValidation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A Deployment is a group of resources and configs managed and provisioned by
 * Infra Manager.
 */
export interface Deployment {
  /**
   * A blueprint described using Terraform's HashiCorp Configuration Language
   * as a root module.
   */
  terraformBlueprint?:
    | TerraformBlueprint
    | undefined;
  /**
   * Resource name of the deployment.
   * Format: `projects/{project}/locations/{location}/deployments/{deployment}`
   */
  name: string;
  /** Output only. Time when the deployment was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the deployment was last modified. */
  updateTime:
    | Date
    | undefined;
  /** User-defined metadata for the deployment. */
  labels: { [key: string]: string };
  /** Output only. Current state of the deployment. */
  state: Deployment_State;
  /**
   * Output only. Revision name that was most recently applied.
   * Format: `projects/{project}/locations/{location}/deployments/{deployment}/
   * revisions/{revision}`
   */
  latestRevision: string;
  /** Output only. Additional information regarding the current state. */
  stateDetail: string;
  /** Output only. Error code describing errors that may have occurred. */
  errorCode: Deployment_ErrorCode;
  /** Output only. Location of artifacts from a DeleteDeployment operation. */
  deleteResults:
    | ApplyResults
    | undefined;
  /**
   * Output only. Cloud Build instance UUID associated with deleting this
   * deployment.
   */
  deleteBuild: string;
  /**
   * Output only. Location of Cloud Build logs in Google Cloud Storage,
   * populated when deleting this deployment. Format: `gs://{bucket}/{object}`.
   */
  deleteLogs: string;
  /**
   * Output only. Errors encountered when deleting this deployment.
   * Errors are truncated to 10 entries, see `delete_results` and `error_logs`
   * for full details.
   */
  tfErrors: TerraformError[];
  /**
   * Output only. Location of Terraform error logs in Google Cloud Storage.
   * Format: `gs://{bucket}/{object}`.
   */
  errorLogs: string;
  /**
   * Optional. User-defined location of Cloud Build logs and artifacts in Google
   * Cloud Storage. Format: `gs://{bucket}/{folder}`
   *
   * A default bucket will be bootstrapped if the field is not set or empty.
   * Default bucket format: `gs://<project number>-<region>-blueprint-config`
   * Constraints:
   * - The bucket needs to be in the same project as the deployment
   * - The path cannot be within the path of `gcs_source`
   * - The field cannot be updated, including changing its presence
   */
  artifactsGcsBucket?:
    | string
    | undefined;
  /**
   * Optional. User-specified Service Account (SA) credentials to be used when
   * actuating resources.
   * Format: `projects/{projectID}/serviceAccounts/{serviceAccount}`
   */
  serviceAccount?:
    | string
    | undefined;
  /**
   * By default, Infra Manager will return a failure when
   * Terraform encounters a 409 code (resource conflict error) during actuation.
   * If this flag is set to true, Infra Manager will instead
   * attempt to automatically import the resource into the Terraform state (for
   * supported resource types) and continue actuation.
   *
   * Not all resource types are supported, refer to documentation.
   */
  importExistingResources?:
    | boolean
    | undefined;
  /**
   * Optional. The user-specified Cloud Build worker pool resource in which the
   * Cloud Build job will execute. Format:
   * `projects/{project}/locations/{location}/workerPools/{workerPoolId}`.
   * If this field is unspecified, the default Cloud Build worker pool will be
   * used.
   */
  workerPool?:
    | string
    | undefined;
  /** Output only. Current lock state of the deployment. */
  lockState: Deployment_LockState;
  /**
   * Optional. The user-specified Terraform version constraint.
   * Example: "=1.3.10".
   */
  tfVersionConstraint?:
    | string
    | undefined;
  /**
   * Output only. The current Terraform version set on the deployment.
   * It is in the format of "Major.Minor.Patch", for example, "1.3.10".
   */
  tfVersion: string;
  /**
   * Optional. Input to control quota checks for resources in terraform
   * configuration files. There are limited resources on which quota validation
   * applies.
   */
  quotaValidation: QuotaValidation;
  /**
   * Optional. Arbitrary key-value metadata storage e.g. to help client tools
   * identify deployments during automation. See
   * https://google.aip.dev/148#annotations for details on format and size
   * limitations.
   */
  annotations: { [key: string]: string };
}

/** Possible states of a deployment. */
export enum Deployment_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The deployment is being created. */
  CREATING = 1,
  /** ACTIVE - The deployment is healthy. */
  ACTIVE = 2,
  /** UPDATING - The deployment is being updated. */
  UPDATING = 3,
  /** DELETING - The deployment is being deleted. */
  DELETING = 4,
  /** FAILED - The deployment has encountered an unexpected error. */
  FAILED = 5,
  /**
   * SUSPENDED - The deployment is no longer being actively reconciled.
   * This may be the result of recovering the project after deletion.
   */
  SUSPENDED = 6,
  /** DELETED - The deployment has been deleted. */
  DELETED = 7,
  UNRECOGNIZED = -1,
}

export function deployment_StateFromJSON(object: any): Deployment_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Deployment_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Deployment_State.CREATING;
    case 2:
    case "ACTIVE":
      return Deployment_State.ACTIVE;
    case 3:
    case "UPDATING":
      return Deployment_State.UPDATING;
    case 4:
    case "DELETING":
      return Deployment_State.DELETING;
    case 5:
    case "FAILED":
      return Deployment_State.FAILED;
    case 6:
    case "SUSPENDED":
      return Deployment_State.SUSPENDED;
    case 7:
    case "DELETED":
      return Deployment_State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Deployment_State.UNRECOGNIZED;
  }
}

export function deployment_StateToJSON(object: Deployment_State): string {
  switch (object) {
    case Deployment_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Deployment_State.CREATING:
      return "CREATING";
    case Deployment_State.ACTIVE:
      return "ACTIVE";
    case Deployment_State.UPDATING:
      return "UPDATING";
    case Deployment_State.DELETING:
      return "DELETING";
    case Deployment_State.FAILED:
      return "FAILED";
    case Deployment_State.SUSPENDED:
      return "SUSPENDED";
    case Deployment_State.DELETED:
      return "DELETED";
    case Deployment_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible errors that can occur with deployments. */
export enum Deployment_ErrorCode {
  /** ERROR_CODE_UNSPECIFIED - No error code was specified. */
  ERROR_CODE_UNSPECIFIED = 0,
  /** REVISION_FAILED - The revision failed. See Revision for more details. */
  REVISION_FAILED = 1,
  /** CLOUD_BUILD_PERMISSION_DENIED - Cloud Build failed due to a permission issue. */
  CLOUD_BUILD_PERMISSION_DENIED = 3,
  /**
   * DELETE_BUILD_API_FAILED - Cloud Build job associated with a deployment deletion could not be
   * started.
   */
  DELETE_BUILD_API_FAILED = 5,
  /**
   * DELETE_BUILD_RUN_FAILED - Cloud Build job associated with a deployment deletion was started but
   * failed.
   */
  DELETE_BUILD_RUN_FAILED = 6,
  /** BUCKET_CREATION_PERMISSION_DENIED - Cloud Storage bucket creation failed due to a permission issue. */
  BUCKET_CREATION_PERMISSION_DENIED = 7,
  /**
   * BUCKET_CREATION_FAILED - Cloud Storage bucket creation failed due to an issue unrelated to
   * permissions.
   */
  BUCKET_CREATION_FAILED = 8,
  UNRECOGNIZED = -1,
}

export function deployment_ErrorCodeFromJSON(object: any): Deployment_ErrorCode {
  switch (object) {
    case 0:
    case "ERROR_CODE_UNSPECIFIED":
      return Deployment_ErrorCode.ERROR_CODE_UNSPECIFIED;
    case 1:
    case "REVISION_FAILED":
      return Deployment_ErrorCode.REVISION_FAILED;
    case 3:
    case "CLOUD_BUILD_PERMISSION_DENIED":
      return Deployment_ErrorCode.CLOUD_BUILD_PERMISSION_DENIED;
    case 5:
    case "DELETE_BUILD_API_FAILED":
      return Deployment_ErrorCode.DELETE_BUILD_API_FAILED;
    case 6:
    case "DELETE_BUILD_RUN_FAILED":
      return Deployment_ErrorCode.DELETE_BUILD_RUN_FAILED;
    case 7:
    case "BUCKET_CREATION_PERMISSION_DENIED":
      return Deployment_ErrorCode.BUCKET_CREATION_PERMISSION_DENIED;
    case 8:
    case "BUCKET_CREATION_FAILED":
      return Deployment_ErrorCode.BUCKET_CREATION_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Deployment_ErrorCode.UNRECOGNIZED;
  }
}

export function deployment_ErrorCodeToJSON(object: Deployment_ErrorCode): string {
  switch (object) {
    case Deployment_ErrorCode.ERROR_CODE_UNSPECIFIED:
      return "ERROR_CODE_UNSPECIFIED";
    case Deployment_ErrorCode.REVISION_FAILED:
      return "REVISION_FAILED";
    case Deployment_ErrorCode.CLOUD_BUILD_PERMISSION_DENIED:
      return "CLOUD_BUILD_PERMISSION_DENIED";
    case Deployment_ErrorCode.DELETE_BUILD_API_FAILED:
      return "DELETE_BUILD_API_FAILED";
    case Deployment_ErrorCode.DELETE_BUILD_RUN_FAILED:
      return "DELETE_BUILD_RUN_FAILED";
    case Deployment_ErrorCode.BUCKET_CREATION_PERMISSION_DENIED:
      return "BUCKET_CREATION_PERMISSION_DENIED";
    case Deployment_ErrorCode.BUCKET_CREATION_FAILED:
      return "BUCKET_CREATION_FAILED";
    case Deployment_ErrorCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible lock states of a deployment. */
export enum Deployment_LockState {
  /** LOCK_STATE_UNSPECIFIED - The default value. This value is used if the lock state is omitted. */
  LOCK_STATE_UNSPECIFIED = 0,
  /** LOCKED - The deployment is locked. */
  LOCKED = 1,
  /** UNLOCKED - The deployment is unlocked. */
  UNLOCKED = 2,
  /** LOCKING - The deployment is being locked. */
  LOCKING = 3,
  /** UNLOCKING - The deployment is being unlocked. */
  UNLOCKING = 4,
  /** LOCK_FAILED - The deployment has failed to lock. */
  LOCK_FAILED = 5,
  /** UNLOCK_FAILED - The deployment has failed to unlock. */
  UNLOCK_FAILED = 6,
  UNRECOGNIZED = -1,
}

export function deployment_LockStateFromJSON(object: any): Deployment_LockState {
  switch (object) {
    case 0:
    case "LOCK_STATE_UNSPECIFIED":
      return Deployment_LockState.LOCK_STATE_UNSPECIFIED;
    case 1:
    case "LOCKED":
      return Deployment_LockState.LOCKED;
    case 2:
    case "UNLOCKED":
      return Deployment_LockState.UNLOCKED;
    case 3:
    case "LOCKING":
      return Deployment_LockState.LOCKING;
    case 4:
    case "UNLOCKING":
      return Deployment_LockState.UNLOCKING;
    case 5:
    case "LOCK_FAILED":
      return Deployment_LockState.LOCK_FAILED;
    case 6:
    case "UNLOCK_FAILED":
      return Deployment_LockState.UNLOCK_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Deployment_LockState.UNRECOGNIZED;
  }
}

export function deployment_LockStateToJSON(object: Deployment_LockState): string {
  switch (object) {
    case Deployment_LockState.LOCK_STATE_UNSPECIFIED:
      return "LOCK_STATE_UNSPECIFIED";
    case Deployment_LockState.LOCKED:
      return "LOCKED";
    case Deployment_LockState.UNLOCKED:
      return "UNLOCKED";
    case Deployment_LockState.LOCKING:
      return "LOCKING";
    case Deployment_LockState.UNLOCKING:
      return "UNLOCKING";
    case Deployment_LockState.LOCK_FAILED:
      return "LOCK_FAILED";
    case Deployment_LockState.UNLOCK_FAILED:
      return "UNLOCK_FAILED";
    case Deployment_LockState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Deployment_LabelsEntry {
  key: string;
  value: string;
}

export interface Deployment_AnnotationsEntry {
  key: string;
  value: string;
}

/**
 * TerraformBlueprint describes the source of a Terraform root module which
 * describes the resources and configs to be deployed.
 */
export interface TerraformBlueprint {
  /**
   * Required. URI of an object in Google Cloud Storage.
   * Format: `gs://{bucket}/{object}`
   *
   * URI may also specify an object version for zipped objects.
   * Format: `gs://{bucket}/{object}#{version}`
   */
  gcsSource?:
    | string
    | undefined;
  /** Required. URI of a public Git repo. */
  gitSource?:
    | GitSource
    | undefined;
  /** Input variable values for the Terraform blueprint. */
  inputValues: { [key: string]: TerraformVariable };
}

export interface TerraformBlueprint_InputValuesEntry {
  key: string;
  value: TerraformVariable | undefined;
}

/** A Terraform input variable. */
export interface TerraformVariable {
  /** Input variable value. */
  inputValue: any | undefined;
}

/** Outputs and artifacts from applying a deployment. */
export interface ApplyResults {
  /**
   * Location of a blueprint copy and other manifests in Google Cloud Storage.
   * Format: `gs://{bucket}/{object}`
   */
  content: string;
  /**
   * Location of artifacts (e.g. logs) in Google Cloud Storage.
   * Format: `gs://{bucket}/{object}`
   */
  artifacts: string;
  /** Map of output name to output info. */
  outputs: { [key: string]: TerraformOutput };
}

export interface ApplyResults_OutputsEntry {
  key: string;
  value: TerraformOutput | undefined;
}

/** Describes a Terraform output. */
export interface TerraformOutput {
  /**
   * Identifies whether Terraform has set this output as a potential
   * sensitive value.
   */
  sensitive: boolean;
  /** Value of output. */
  value: any | undefined;
}

export interface ListDeploymentsRequest {
  /**
   * Required. The parent in whose context the Deployments are listed. The
   * parent value is in the format:
   * 'projects/{project_id}/locations/{location}'.
   */
  parent: string;
  /**
   * When requesting a page of resources, 'page_size' specifies number of
   * resources to return. If unspecified, at most 500 will be returned. The
   * maximum value is 1000.
   */
  pageSize: number;
  /**
   * Token returned by previous call to 'ListDeployments' which specifies the
   * position in the list from where to continue listing the resources.
   */
  pageToken: string;
  /**
   * Lists the Deployments that match the filter expression. A filter
   * expression filters the resources listed in the response. The expression
   * must be of the form '{field} {operator} {value}' where operators: '<', '>',
   * '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   * operator which is roughly synonymous with equality). {field} can refer to a
   * proto or JSON field, or a synthetic field. Field names can be camelCase or
   * snake_case.
   *
   * Examples:
   * - Filter by name:
   *   name = "projects/foo/locations/us-central1/deployments/bar
   *
   * - Filter by labels:
   *   - Resources that have a key called 'foo'
   *     labels.foo:*
   *   - Resources that have a key called 'foo' whose value is 'bar'
   *     labels.foo = bar
   *
   * - Filter by state:
   *   - Deployments in CREATING state.
   *     state=CREATING
   */
  filter: string;
  /** Field to use to sort the list. */
  orderBy: string;
}

export interface ListDeploymentsResponse {
  /** List of [Deployment][google.cloud.config.v1.Deployment]s. */
  deployments: Deployment[];
  /**
   * Token to be supplied to the next ListDeployments request via `page_token`
   * to obtain the next set of results.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

export interface GetDeploymentRequest {
  /**
   * Required. The name of the deployment. Format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  name: string;
}

/** A request to list Revisions passed to a 'ListRevisions' call. */
export interface ListRevisionsRequest {
  /**
   * Required. The parent in whose context the Revisions are listed. The parent
   * value is in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  parent: string;
  /**
   * When requesting a page of resources, `page_size` specifies number of
   * resources to return. If unspecified, at most 500 will be returned. The
   * maximum value is 1000.
   */
  pageSize: number;
  /**
   * Token returned by previous call to 'ListRevisions' which specifies the
   * position in the list from where to continue listing the resources.
   */
  pageToken: string;
  /**
   * Lists the Revisions that match the filter expression. A filter
   * expression filters the resources listed in the response. The expression
   * must be of the form '{field} {operator} {value}' where operators: '<', '>',
   * '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   * operator which is roughly synonymous with equality). {field} can refer to a
   * proto or JSON field, or a synthetic field. Field names can be camelCase or
   * snake_case.
   *
   * Examples:
   * - Filter by name:
   *   name = "projects/foo/locations/us-central1/deployments/dep/revisions/bar
   *
   * - Filter by labels:
   *   - Resources that have a key called 'foo'
   *     labels.foo:*
   *   - Resources that have a key called 'foo' whose value is 'bar'
   *     labels.foo = bar
   *
   * - Filter by state:
   *   - Revisions in CREATING state.
   *     state=CREATING
   */
  filter: string;
  /** Field to use to sort the list. */
  orderBy: string;
}

/** A response to a 'ListRevisions' call. Contains a list of Revisions. */
export interface ListRevisionsResponse {
  /** List of [Revision][google.cloud.config.v1.Revision]s. */
  revisions: Revision[];
  /**
   * A token to request the next page of resources from the 'ListRevisions'
   * method. The value of an empty string means that there are no more resources
   * to return.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get a Revision from a 'GetRevision' call. */
export interface GetRevisionRequest {
  /**
   * Required. The name of the Revision in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   */
  name: string;
}

export interface CreateDeploymentRequest {
  /**
   * Required. The parent in whose context the Deployment is created. The parent
   * value is in the format: 'projects/{project_id}/locations/{location}'.
   */
  parent: string;
  /** Required. The Deployment ID. */
  deploymentId: string;
  /**
   * Required. [Deployment][google.cloud.config.v1.Deployment] resource to be
   * created.
   */
  deployment:
    | Deployment
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

export interface UpdateDeploymentRequest {
  /**
   * Optional. Field mask used to specify the fields to be overwritten in the
   * Deployment resource by the update.
   *
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. [Deployment][google.cloud.config.v1.Deployment] to update.
   *
   * The deployment's `name` field is used to identify the resource to be
   * updated. Format:
   * `projects/{project}/locations/{location}/deployments/{deployment}`
   */
  deployment:
    | Deployment
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

export interface DeleteDeploymentRequest {
  /**
   * Required. The name of the Deployment in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, any revisions for this deployment will also be
   * deleted. (Otherwise, the request will only work if the deployment has no
   * revisions.)
   */
  force: boolean;
  /**
   * Optional. Policy on how resources actuated by the deployment should be
   * deleted. If unspecified, the default behavior is to delete the underlying
   * resources.
   */
  deletePolicy: DeleteDeploymentRequest_DeletePolicy;
}

/** Policy on how resources actuated by the deployment should be deleted. */
export enum DeleteDeploymentRequest_DeletePolicy {
  /** DELETE_POLICY_UNSPECIFIED - Unspecified policy, resources will be deleted. */
  DELETE_POLICY_UNSPECIFIED = 0,
  /** DELETE - Deletes resources actuated by the deployment. */
  DELETE = 1,
  /** ABANDON - Abandons resources and only deletes the deployment and its metadata. */
  ABANDON = 2,
  UNRECOGNIZED = -1,
}

export function deleteDeploymentRequest_DeletePolicyFromJSON(object: any): DeleteDeploymentRequest_DeletePolicy {
  switch (object) {
    case 0:
    case "DELETE_POLICY_UNSPECIFIED":
      return DeleteDeploymentRequest_DeletePolicy.DELETE_POLICY_UNSPECIFIED;
    case 1:
    case "DELETE":
      return DeleteDeploymentRequest_DeletePolicy.DELETE;
    case 2:
    case "ABANDON":
      return DeleteDeploymentRequest_DeletePolicy.ABANDON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeleteDeploymentRequest_DeletePolicy.UNRECOGNIZED;
  }
}

export function deleteDeploymentRequest_DeletePolicyToJSON(object: DeleteDeploymentRequest_DeletePolicy): string {
  switch (object) {
    case DeleteDeploymentRequest_DeletePolicy.DELETE_POLICY_UNSPECIFIED:
      return "DELETE_POLICY_UNSPECIFIED";
    case DeleteDeploymentRequest_DeletePolicy.DELETE:
      return "DELETE";
    case DeleteDeploymentRequest_DeletePolicy.ABANDON:
      return "ABANDON";
    case DeleteDeploymentRequest_DeletePolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. Metadata about the deployment operation state. */
  deploymentMetadata?:
    | DeploymentOperationMetadata
    | undefined;
  /** Output only. Metadata about the preview operation state. */
  previewMetadata?:
    | PreviewOperationMetadata
    | undefined;
  /** Output only. Time when the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation of the
   * operation. Operations that have successfully been cancelled have
   * [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/**
 * A child resource of a Deployment generated by a 'CreateDeployment' or
 * 'UpdateDeployment' call. Each Revision contains metadata pertaining to a
 * snapshot of a particular Deployment.
 */
export interface Revision {
  /**
   * Output only. A blueprint described using Terraform's HashiCorp
   * Configuration Language as a root module.
   */
  terraformBlueprint?:
    | TerraformBlueprint
    | undefined;
  /**
   * Revision name. Format:
   * `projects/{project}/locations/{location}/deployments/{deployment}/
   * revisions/{revision}`
   */
  name: string;
  /** Output only. Time when the revision was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the revision was last modified. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The action which created this revision */
  action: Revision_Action;
  /** Output only. Current state of the revision. */
  state: Revision_State;
  /** Output only. Outputs and artifacts from applying a deployment. */
  applyResults:
    | ApplyResults
    | undefined;
  /** Output only. Additional info regarding the current state. */
  stateDetail: string;
  /** Output only. Code describing any errors that may have occurred. */
  errorCode: Revision_ErrorCode;
  /** Output only. Cloud Build instance UUID associated with this revision. */
  build: string;
  /**
   * Output only. Location of Revision operation logs in
   * `gs://{bucket}/{object}` format.
   */
  logs: string;
  /**
   * Output only. Errors encountered when creating or updating this deployment.
   * Errors are truncated to 10 entries, see `delete_results` and `error_logs`
   * for full details.
   */
  tfErrors: TerraformError[];
  /**
   * Output only. Location of Terraform error logs in Google Cloud Storage.
   * Format: `gs://{bucket}/{object}`.
   */
  errorLogs: string;
  /**
   * Output only. User-specified Service Account (SA) to be used as credential
   * to manage resources. Format:
   * `projects/{projectID}/serviceAccounts/{serviceAccount}`
   */
  serviceAccount: string;
  /**
   * Output only. By default, Infra Manager will return a failure when
   * Terraform encounters a 409 code (resource conflict error) during actuation.
   * If this flag is set to true, Infra Manager will instead
   * attempt to automatically import the resource into the Terraform state (for
   * supported resource types) and continue actuation.
   *
   * Not all resource types are supported, refer to documentation.
   */
  importExistingResources: boolean;
  /**
   * Output only. The user-specified Cloud Build worker pool resource in which
   * the Cloud Build job will execute. Format:
   * `projects/{project}/locations/{location}/workerPools/{workerPoolId}`.
   * If this field is unspecified, the default Cloud Build worker pool will be
   * used.
   */
  workerPool: string;
  /**
   * Output only. The user-specified Terraform version constraint.
   * Example: "=1.3.10".
   */
  tfVersionConstraint: string;
  /**
   * Output only. The version of Terraform used to create the Revision.
   * It is in the format of "Major.Minor.Patch", for example, "1.3.10".
   */
  tfVersion: string;
  /**
   * Output only. Cloud Storage path containing quota validation results. This
   * field is set when a user sets Deployment.quota_validation field to ENABLED
   * or ENFORCED. Format: `gs://{bucket}/{object}`.
   */
  quotaValidationResults: string;
  /**
   * Optional. Input to control quota checks for resources in terraform
   * configuration files. There are limited resources on which quota validation
   * applies.
   */
  quotaValidation: QuotaValidation;
}

/** Actions that generate a revision. */
export enum Revision_Action {
  /** ACTION_UNSPECIFIED - The default value. This value is used if the action is omitted. */
  ACTION_UNSPECIFIED = 0,
  /** CREATE - The revision was generated by creating a deployment. */
  CREATE = 1,
  /** UPDATE - The revision was generated by updating a deployment. */
  UPDATE = 2,
  /** DELETE - The revision was deleted. */
  DELETE = 3,
  UNRECOGNIZED = -1,
}

export function revision_ActionFromJSON(object: any): Revision_Action {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return Revision_Action.ACTION_UNSPECIFIED;
    case 1:
    case "CREATE":
      return Revision_Action.CREATE;
    case 2:
    case "UPDATE":
      return Revision_Action.UPDATE;
    case 3:
    case "DELETE":
      return Revision_Action.DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Revision_Action.UNRECOGNIZED;
  }
}

export function revision_ActionToJSON(object: Revision_Action): string {
  switch (object) {
    case Revision_Action.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case Revision_Action.CREATE:
      return "CREATE";
    case Revision_Action.UPDATE:
      return "UPDATE";
    case Revision_Action.DELETE:
      return "DELETE";
    case Revision_Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible states of a revision. */
export enum Revision_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** APPLYING - The revision is being applied. */
  APPLYING = 1,
  /** APPLIED - The revision was applied successfully. */
  APPLIED = 2,
  /** FAILED - The revision could not be applied successfully. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function revision_StateFromJSON(object: any): Revision_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Revision_State.STATE_UNSPECIFIED;
    case 1:
    case "APPLYING":
      return Revision_State.APPLYING;
    case 2:
    case "APPLIED":
      return Revision_State.APPLIED;
    case 3:
    case "FAILED":
      return Revision_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Revision_State.UNRECOGNIZED;
  }
}

export function revision_StateToJSON(object: Revision_State): string {
  switch (object) {
    case Revision_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Revision_State.APPLYING:
      return "APPLYING";
    case Revision_State.APPLIED:
      return "APPLIED";
    case Revision_State.FAILED:
      return "FAILED";
    case Revision_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible errors if Revision could not be created or updated successfully. */
export enum Revision_ErrorCode {
  /** ERROR_CODE_UNSPECIFIED - No error code was specified. */
  ERROR_CODE_UNSPECIFIED = 0,
  /** CLOUD_BUILD_PERMISSION_DENIED - Cloud Build failed due to a permission issue. */
  CLOUD_BUILD_PERMISSION_DENIED = 1,
  /**
   * APPLY_BUILD_API_FAILED - Cloud Build job associated with creating or updating a deployment could
   * not be started.
   */
  APPLY_BUILD_API_FAILED = 4,
  /**
   * APPLY_BUILD_RUN_FAILED - Cloud Build job associated with creating or updating a deployment was
   * started but failed.
   */
  APPLY_BUILD_RUN_FAILED = 5,
  /**
   * QUOTA_VALIDATION_FAILED - quota validation failed for one or more resources in terraform
   * configuration files.
   */
  QUOTA_VALIDATION_FAILED = 7,
  UNRECOGNIZED = -1,
}

export function revision_ErrorCodeFromJSON(object: any): Revision_ErrorCode {
  switch (object) {
    case 0:
    case "ERROR_CODE_UNSPECIFIED":
      return Revision_ErrorCode.ERROR_CODE_UNSPECIFIED;
    case 1:
    case "CLOUD_BUILD_PERMISSION_DENIED":
      return Revision_ErrorCode.CLOUD_BUILD_PERMISSION_DENIED;
    case 4:
    case "APPLY_BUILD_API_FAILED":
      return Revision_ErrorCode.APPLY_BUILD_API_FAILED;
    case 5:
    case "APPLY_BUILD_RUN_FAILED":
      return Revision_ErrorCode.APPLY_BUILD_RUN_FAILED;
    case 7:
    case "QUOTA_VALIDATION_FAILED":
      return Revision_ErrorCode.QUOTA_VALIDATION_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Revision_ErrorCode.UNRECOGNIZED;
  }
}

export function revision_ErrorCodeToJSON(object: Revision_ErrorCode): string {
  switch (object) {
    case Revision_ErrorCode.ERROR_CODE_UNSPECIFIED:
      return "ERROR_CODE_UNSPECIFIED";
    case Revision_ErrorCode.CLOUD_BUILD_PERMISSION_DENIED:
      return "CLOUD_BUILD_PERMISSION_DENIED";
    case Revision_ErrorCode.APPLY_BUILD_API_FAILED:
      return "APPLY_BUILD_API_FAILED";
    case Revision_ErrorCode.APPLY_BUILD_RUN_FAILED:
      return "APPLY_BUILD_RUN_FAILED";
    case Revision_ErrorCode.QUOTA_VALIDATION_FAILED:
      return "QUOTA_VALIDATION_FAILED";
    case Revision_ErrorCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Errors encountered during actuation using Terraform */
export interface TerraformError {
  /**
   * Address of the resource associated with the error,
   * e.g. `google_compute_network.vpc_network`.
   */
  resourceAddress: string;
  /**
   * HTTP response code returned from Google Cloud Platform APIs when Terraform
   * fails to provision the resource. If unset or 0, no HTTP response code was
   * returned by Terraform.
   */
  httpResponseCode: number;
  /** A human-readable error description. */
  errorDescription: string;
  /** Original error response from underlying Google API, if available. */
  error: Status | undefined;
}

/** A set of files in a Git repository. */
export interface GitSource {
  /**
   * Optional. Repository URL.
   * Example: 'https://github.com/kubernetes/examples.git'
   */
  repo?:
    | string
    | undefined;
  /**
   * Optional. Subdirectory inside the repository.
   * Example: 'staging/my-package'
   */
  directory?:
    | string
    | undefined;
  /** Optional. Git reference (e.g. branch or tag). */
  ref?: string | undefined;
}

/** Ephemeral metadata content describing the state of a deployment operation. */
export interface DeploymentOperationMetadata {
  /** The current step the deployment operation is running. */
  step: DeploymentOperationMetadata_DeploymentStep;
  /** Outputs and artifacts from applying a deployment. */
  applyResults:
    | ApplyResults
    | undefined;
  /** Output only. Cloud Build instance UUID associated with this operation. */
  build: string;
  /**
   * Output only. Location of Deployment operations logs in
   * `gs://{bucket}/{object}` format.
   */
  logs: string;
}

/** The possible steps a deployment may be running. */
export enum DeploymentOperationMetadata_DeploymentStep {
  /** DEPLOYMENT_STEP_UNSPECIFIED - Unspecified deployment step */
  DEPLOYMENT_STEP_UNSPECIFIED = 0,
  /**
   * PREPARING_STORAGE_BUCKET - Infra Manager is creating a Google Cloud Storage bucket to store
   * artifacts and metadata about the deployment and revision
   */
  PREPARING_STORAGE_BUCKET = 1,
  /** DOWNLOADING_BLUEPRINT - Downloading the blueprint onto the Google Cloud Storage bucket */
  DOWNLOADING_BLUEPRINT = 2,
  /** RUNNING_TF_INIT - Initializing Terraform using `terraform init` */
  RUNNING_TF_INIT = 3,
  /** RUNNING_TF_PLAN - Running `terraform plan` */
  RUNNING_TF_PLAN = 4,
  /** RUNNING_TF_APPLY - Actuating resources using Terraform using `terraform apply` */
  RUNNING_TF_APPLY = 5,
  /** RUNNING_TF_DESTROY - Destroying resources using Terraform using `terraform destroy` */
  RUNNING_TF_DESTROY = 6,
  /** RUNNING_TF_VALIDATE - Validating the uploaded TF state file when unlocking a deployment */
  RUNNING_TF_VALIDATE = 7,
  /** UNLOCKING_DEPLOYMENT - Unlocking a deployment */
  UNLOCKING_DEPLOYMENT = 8,
  /** SUCCEEDED - Operation was successful */
  SUCCEEDED = 9,
  /** FAILED - Operation failed */
  FAILED = 10,
  /** VALIDATING_REPOSITORY - Validating the provided repository. */
  VALIDATING_REPOSITORY = 11,
  /** RUNNING_QUOTA_VALIDATION - Running quota validation */
  RUNNING_QUOTA_VALIDATION = 12,
  UNRECOGNIZED = -1,
}

export function deploymentOperationMetadata_DeploymentStepFromJSON(
  object: any,
): DeploymentOperationMetadata_DeploymentStep {
  switch (object) {
    case 0:
    case "DEPLOYMENT_STEP_UNSPECIFIED":
      return DeploymentOperationMetadata_DeploymentStep.DEPLOYMENT_STEP_UNSPECIFIED;
    case 1:
    case "PREPARING_STORAGE_BUCKET":
      return DeploymentOperationMetadata_DeploymentStep.PREPARING_STORAGE_BUCKET;
    case 2:
    case "DOWNLOADING_BLUEPRINT":
      return DeploymentOperationMetadata_DeploymentStep.DOWNLOADING_BLUEPRINT;
    case 3:
    case "RUNNING_TF_INIT":
      return DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_INIT;
    case 4:
    case "RUNNING_TF_PLAN":
      return DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_PLAN;
    case 5:
    case "RUNNING_TF_APPLY":
      return DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_APPLY;
    case 6:
    case "RUNNING_TF_DESTROY":
      return DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_DESTROY;
    case 7:
    case "RUNNING_TF_VALIDATE":
      return DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_VALIDATE;
    case 8:
    case "UNLOCKING_DEPLOYMENT":
      return DeploymentOperationMetadata_DeploymentStep.UNLOCKING_DEPLOYMENT;
    case 9:
    case "SUCCEEDED":
      return DeploymentOperationMetadata_DeploymentStep.SUCCEEDED;
    case 10:
    case "FAILED":
      return DeploymentOperationMetadata_DeploymentStep.FAILED;
    case 11:
    case "VALIDATING_REPOSITORY":
      return DeploymentOperationMetadata_DeploymentStep.VALIDATING_REPOSITORY;
    case 12:
    case "RUNNING_QUOTA_VALIDATION":
      return DeploymentOperationMetadata_DeploymentStep.RUNNING_QUOTA_VALIDATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeploymentOperationMetadata_DeploymentStep.UNRECOGNIZED;
  }
}

export function deploymentOperationMetadata_DeploymentStepToJSON(
  object: DeploymentOperationMetadata_DeploymentStep,
): string {
  switch (object) {
    case DeploymentOperationMetadata_DeploymentStep.DEPLOYMENT_STEP_UNSPECIFIED:
      return "DEPLOYMENT_STEP_UNSPECIFIED";
    case DeploymentOperationMetadata_DeploymentStep.PREPARING_STORAGE_BUCKET:
      return "PREPARING_STORAGE_BUCKET";
    case DeploymentOperationMetadata_DeploymentStep.DOWNLOADING_BLUEPRINT:
      return "DOWNLOADING_BLUEPRINT";
    case DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_INIT:
      return "RUNNING_TF_INIT";
    case DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_PLAN:
      return "RUNNING_TF_PLAN";
    case DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_APPLY:
      return "RUNNING_TF_APPLY";
    case DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_DESTROY:
      return "RUNNING_TF_DESTROY";
    case DeploymentOperationMetadata_DeploymentStep.RUNNING_TF_VALIDATE:
      return "RUNNING_TF_VALIDATE";
    case DeploymentOperationMetadata_DeploymentStep.UNLOCKING_DEPLOYMENT:
      return "UNLOCKING_DEPLOYMENT";
    case DeploymentOperationMetadata_DeploymentStep.SUCCEEDED:
      return "SUCCEEDED";
    case DeploymentOperationMetadata_DeploymentStep.FAILED:
      return "FAILED";
    case DeploymentOperationMetadata_DeploymentStep.VALIDATING_REPOSITORY:
      return "VALIDATING_REPOSITORY";
    case DeploymentOperationMetadata_DeploymentStep.RUNNING_QUOTA_VALIDATION:
      return "RUNNING_QUOTA_VALIDATION";
    case DeploymentOperationMetadata_DeploymentStep.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Resource represents a Google Cloud Platform resource actuated by IM.
 * Resources are child resources of Revisions.
 */
export interface Resource {
  /**
   * Output only. Resource name.
   * Format:
   * `projects/{project}/locations/{location}/deployments/{deployment}/revisions/{revision}/resources/{resource}`
   */
  name: string;
  /**
   * Output only. Terraform-specific info if this resource was created using
   * Terraform.
   */
  terraformInfo:
    | ResourceTerraformInfo
    | undefined;
  /**
   * Output only. Map of Cloud Asset Inventory (CAI) type to CAI info (e.g. CAI
   * ID). CAI type format follows
   * https://cloud.google.com/asset-inventory/docs/supported-asset-types
   */
  caiAssets: { [key: string]: ResourceCAIInfo };
  /** Output only. Intent of the resource. */
  intent: Resource_Intent;
  /** Output only. Current state of the resource. */
  state: Resource_State;
}

/** Possible intent of the resource. */
export enum Resource_Intent {
  /** INTENT_UNSPECIFIED - The default value. This value is used if the intent is omitted. */
  INTENT_UNSPECIFIED = 0,
  /** CREATE - Infra Manager will create this Resource. */
  CREATE = 1,
  /** UPDATE - Infra Manager will update this Resource. */
  UPDATE = 2,
  /** DELETE - Infra Manager will delete this Resource. */
  DELETE = 3,
  /** RECREATE - Infra Manager will destroy and recreate this Resource. */
  RECREATE = 4,
  /** UNCHANGED - Infra Manager will leave this Resource untouched. */
  UNCHANGED = 5,
  UNRECOGNIZED = -1,
}

export function resource_IntentFromJSON(object: any): Resource_Intent {
  switch (object) {
    case 0:
    case "INTENT_UNSPECIFIED":
      return Resource_Intent.INTENT_UNSPECIFIED;
    case 1:
    case "CREATE":
      return Resource_Intent.CREATE;
    case 2:
    case "UPDATE":
      return Resource_Intent.UPDATE;
    case 3:
    case "DELETE":
      return Resource_Intent.DELETE;
    case 4:
    case "RECREATE":
      return Resource_Intent.RECREATE;
    case 5:
    case "UNCHANGED":
      return Resource_Intent.UNCHANGED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Resource_Intent.UNRECOGNIZED;
  }
}

export function resource_IntentToJSON(object: Resource_Intent): string {
  switch (object) {
    case Resource_Intent.INTENT_UNSPECIFIED:
      return "INTENT_UNSPECIFIED";
    case Resource_Intent.CREATE:
      return "CREATE";
    case Resource_Intent.UPDATE:
      return "UPDATE";
    case Resource_Intent.DELETE:
      return "DELETE";
    case Resource_Intent.RECREATE:
      return "RECREATE";
    case Resource_Intent.UNCHANGED:
      return "UNCHANGED";
    case Resource_Intent.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible states of a resource. */
export enum Resource_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** PLANNED - Resource has been planned for reconcile. */
  PLANNED = 1,
  /** IN_PROGRESS - Resource is actively reconciling into the intended state. */
  IN_PROGRESS = 2,
  /** RECONCILED - Resource has reconciled to intended state. */
  RECONCILED = 3,
  /** FAILED - Resource failed to reconcile. */
  FAILED = 4,
  UNRECOGNIZED = -1,
}

export function resource_StateFromJSON(object: any): Resource_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Resource_State.STATE_UNSPECIFIED;
    case 1:
    case "PLANNED":
      return Resource_State.PLANNED;
    case 2:
    case "IN_PROGRESS":
      return Resource_State.IN_PROGRESS;
    case 3:
    case "RECONCILED":
      return Resource_State.RECONCILED;
    case 4:
    case "FAILED":
      return Resource_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Resource_State.UNRECOGNIZED;
  }
}

export function resource_StateToJSON(object: Resource_State): string {
  switch (object) {
    case Resource_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Resource_State.PLANNED:
      return "PLANNED";
    case Resource_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case Resource_State.RECONCILED:
      return "RECONCILED";
    case Resource_State.FAILED:
      return "FAILED";
    case Resource_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Resource_CaiAssetsEntry {
  key: string;
  value: ResourceCAIInfo | undefined;
}

/** Terraform info of a Resource. */
export interface ResourceTerraformInfo {
  /**
   * TF resource address that uniquely identifies this resource within this
   * deployment.
   */
  address: string;
  /** TF resource type */
  type: string;
  /** ID attribute of the TF resource */
  id: string;
}

/** CAI info of a Resource. */
export interface ResourceCAIInfo {
  /**
   * CAI resource name in the format following
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  fullResourceName: string;
}

/** A request to get a Resource from a 'GetResource' call. */
export interface GetResourceRequest {
  /**
   * Required. The name of the Resource in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}/resource/{resource}'.
   */
  name: string;
}

/** A request to list Resources passed to a 'ListResources' call. */
export interface ListResourcesRequest {
  /**
   * Required. The parent in whose context the Resources are listed. The parent
   * value is in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   */
  parent: string;
  /**
   * When requesting a page of resources, 'page_size' specifies number of
   * resources to return. If unspecified, at most 500 will be returned. The
   * maximum value is 1000.
   */
  pageSize: number;
  /**
   * Token returned by previous call to 'ListResources' which specifies the
   * position in the list from where to continue listing the resources.
   */
  pageToken: string;
  /**
   * Lists the Resources that match the filter expression. A filter
   * expression filters the resources listed in the response. The expression
   * must be of the form '{field} {operator} {value}' where operators: '<', '>',
   * '<=',
   * '>=',
   * '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
   * roughly synonymous with equality). {field} can refer to a proto or JSON
   * field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   * Examples:
   * - Filter by name:
   *   name =
   *   "projects/foo/locations/us-central1/deployments/dep/revisions/bar/resources/baz
   */
  filter: string;
  /** Field to use to sort the list. */
  orderBy: string;
}

/** A response to a 'ListResources' call. Contains a list of Resources. */
export interface ListResourcesResponse {
  /** List of [Resources][]s. */
  resources: Resource[];
  /**
   * A token to request the next page of resources from the 'ListResources'
   * method. The value of an empty string means that there are no more resources
   * to return.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Contains info about a Terraform state file */
export interface Statefile {
  /**
   * Output only. Cloud Storage signed URI used for downloading or uploading the
   * state file.
   */
  signedUri: string;
}

/**
 * A request to export a state file passed to a 'ExportDeploymentStatefile'
 * call.
 */
export interface ExportDeploymentStatefileRequest {
  /**
   * Required. The parent in whose context the statefile is listed. The parent
   * value is in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  parent: string;
  /**
   * Optional. If this flag is set to true, the exported deployment state file
   * will be the draft state. This will enable the draft file to be validated
   * before copying it over to the working state on unlock.
   */
  draft: boolean;
}

/**
 * A request to export a state file passed to a 'ExportRevisionStatefile'
 * call.
 */
export interface ExportRevisionStatefileRequest {
  /**
   * Required. The parent in whose context the statefile is listed. The parent
   * value is in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   */
  parent: string;
}

/** A request to import a state file passed to a 'ImportStatefile' call. */
export interface ImportStatefileRequest {
  /**
   * Required. The parent in whose context the statefile is listed. The parent
   * value is in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  parent: string;
  /**
   * Required. Lock ID of the lock file to verify that the user who is importing
   * the state file previously locked the Deployment.
   */
  lockId: Long;
  /** Optional. */
  skipDraft: boolean;
}

/** A request to delete a state file passed to a 'DeleteStatefile' call. */
export interface DeleteStatefileRequest {
  /**
   * Required. The name of the deployment in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  name: string;
  /**
   * Required. Lock ID of the lock file to verify that the user who is deleting
   * the state file previously locked the Deployment.
   */
  lockId: Long;
}

/** A request to lock a deployment passed to a 'LockDeployment' call. */
export interface LockDeploymentRequest {
  /**
   * Required. The name of the deployment in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  name: string;
}

/** A request to unlock a state file passed to a 'UnlockDeployment' call. */
export interface UnlockDeploymentRequest {
  /**
   * Required. The name of the deployment in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  name: string;
  /** Required. Lock ID of the lock file to be unlocked. */
  lockId: Long;
}

/** A request to get a state file lock info passed to a 'ExportLockInfo' call. */
export interface ExportLockInfoRequest {
  /**
   * Required. The name of the deployment in the format:
   * 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   */
  name: string;
}

/** Details about the lock which locked the deployment. */
export interface LockInfo {
  /** Unique ID for the lock to be overridden with generation ID in the backend. */
  lockId: Long;
  /** Terraform operation, provided by the caller. */
  operation: string;
  /** Extra information to store with the lock, provided by the caller. */
  info: string;
  /** user@hostname when available */
  who: string;
  /** Terraform version */
  version: string;
  /** Time that the lock was taken. */
  createTime: Date | undefined;
}

/**
 * A preview represents a set of actions Infra Manager would perform
 * to move the resources towards the desired state as specified in the
 * configuration.
 */
export interface Preview {
  /** The terraform blueprint to preview. */
  terraformBlueprint?:
    | TerraformBlueprint
    | undefined;
  /**
   * Identifier. Resource name of the preview. Resource name can be user
   * provided or server generated ID if unspecified. Format:
   * `projects/{project}/locations/{location}/previews/{preview}`
   */
  name: string;
  /** Output only. Time the preview was created. */
  createTime:
    | Date
    | undefined;
  /** Optional. User-defined labels for the preview. */
  labels: { [key: string]: string };
  /** Output only. Current state of the preview. */
  state: Preview_State;
  /**
   * Optional. Optional deployment reference. If specified, the preview will be
   * performed using the provided deployment's current state and use any
   * relevant fields from the deployment unless explicitly specified in the
   * preview create request.
   */
  deployment: string;
  /** Optional. Current mode of preview. */
  previewMode: Preview_PreviewMode;
  /**
   * Optional. User-specified Service Account (SA) credentials to be used when
   * previewing resources.
   * Format: `projects/{projectID}/serviceAccounts/{serviceAccount}`
   */
  serviceAccount: string;
  /**
   * Optional. User-defined location of Cloud Build logs, artifacts, and
   * in Google Cloud Storage.
   * Format: `gs://{bucket}/{folder}`
   * A default bucket will be bootstrapped if the field is not set or empty
   * Default Bucket Format: `gs://<project number>-<region>-blueprint-config`
   * Constraints:
   * - The bucket needs to be in the same project as the deployment
   * - The path cannot be within the path of `gcs_source`
   * If omitted and deployment resource ref provided has artifacts_gcs_bucket
   * defined, that artifact bucket is used.
   */
  artifactsGcsBucket?:
    | string
    | undefined;
  /**
   * Optional. The user-specified Worker Pool resource in which the Cloud Build
   * job will execute. Format
   * projects/{project}/locations/{location}/workerPools/{workerPoolId} If this
   * field is unspecified, the default Cloud Build worker pool will be used. If
   * omitted and deployment resource ref provided has worker_pool defined, that
   * worker pool is used.
   */
  workerPool?:
    | string
    | undefined;
  /** Output only. Code describing any errors that may have occurred. */
  errorCode: Preview_ErrorCode;
  /** Output only. Additional information regarding the current state. */
  errorStatus:
    | Status
    | undefined;
  /** Output only. Cloud Build instance UUID associated with this preview. */
  build: string;
  /**
   * Output only. Summary of errors encountered during Terraform preview.
   * It has a size limit of 10, i.e. only top 10 errors will be summarized here.
   */
  tfErrors: TerraformError[];
  /**
   * Output only. Link to tf-error.ndjson file, which contains the full list of
   * the errors encountered during a Terraform preview.
   * Format: `gs://{bucket}/{object}`.
   */
  errorLogs: string;
  /** Output only. Artifacts from preview. */
  previewArtifacts:
    | PreviewArtifacts
    | undefined;
  /** Output only. Location of preview logs in `gs://{bucket}/{object}` format. */
  logs: string;
  /**
   * Output only. The current Terraform version set on the preview.
   * It is in the format of "Major.Minor.Patch", for example, "1.3.10".
   */
  tfVersion: string;
  /**
   * Optional. The user-specified Terraform version constraint.
   * Example: "=1.3.10".
   */
  tfVersionConstraint?: string | undefined;
}

/** Possible states of a preview. */
export enum Preview_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is unknown. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The preview is being created. */
  CREATING = 1,
  /** SUCCEEDED - The preview has succeeded. */
  SUCCEEDED = 2,
  /** APPLYING - The preview is being applied. */
  APPLYING = 3,
  /**
   * STALE - The preview is stale. A preview can become stale if a revision has been
   * applied after this preview was created.
   */
  STALE = 4,
  /** DELETING - The preview is being deleted. */
  DELETING = 5,
  /** FAILED - The preview has encountered an unexpected error. */
  FAILED = 6,
  /** DELETED - The preview has been deleted. */
  DELETED = 7,
  UNRECOGNIZED = -1,
}

export function preview_StateFromJSON(object: any): Preview_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Preview_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Preview_State.CREATING;
    case 2:
    case "SUCCEEDED":
      return Preview_State.SUCCEEDED;
    case 3:
    case "APPLYING":
      return Preview_State.APPLYING;
    case 4:
    case "STALE":
      return Preview_State.STALE;
    case 5:
    case "DELETING":
      return Preview_State.DELETING;
    case 6:
    case "FAILED":
      return Preview_State.FAILED;
    case 7:
    case "DELETED":
      return Preview_State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Preview_State.UNRECOGNIZED;
  }
}

export function preview_StateToJSON(object: Preview_State): string {
  switch (object) {
    case Preview_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Preview_State.CREATING:
      return "CREATING";
    case Preview_State.SUCCEEDED:
      return "SUCCEEDED";
    case Preview_State.APPLYING:
      return "APPLYING";
    case Preview_State.STALE:
      return "STALE";
    case Preview_State.DELETING:
      return "DELETING";
    case Preview_State.FAILED:
      return "FAILED";
    case Preview_State.DELETED:
      return "DELETED";
    case Preview_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Preview mode provides options for customizing preview operations. */
export enum Preview_PreviewMode {
  /** PREVIEW_MODE_UNSPECIFIED - Unspecified policy, default mode will be used. */
  PREVIEW_MODE_UNSPECIFIED = 0,
  /**
   * DEFAULT - DEFAULT mode generates an execution plan for reconciling current resource
   * state into expected resource state.
   */
  DEFAULT = 1,
  /** DELETE - DELETE mode generates as execution plan for destroying current resources. */
  DELETE = 2,
  UNRECOGNIZED = -1,
}

export function preview_PreviewModeFromJSON(object: any): Preview_PreviewMode {
  switch (object) {
    case 0:
    case "PREVIEW_MODE_UNSPECIFIED":
      return Preview_PreviewMode.PREVIEW_MODE_UNSPECIFIED;
    case 1:
    case "DEFAULT":
      return Preview_PreviewMode.DEFAULT;
    case 2:
    case "DELETE":
      return Preview_PreviewMode.DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Preview_PreviewMode.UNRECOGNIZED;
  }
}

export function preview_PreviewModeToJSON(object: Preview_PreviewMode): string {
  switch (object) {
    case Preview_PreviewMode.PREVIEW_MODE_UNSPECIFIED:
      return "PREVIEW_MODE_UNSPECIFIED";
    case Preview_PreviewMode.DEFAULT:
      return "DEFAULT";
    case Preview_PreviewMode.DELETE:
      return "DELETE";
    case Preview_PreviewMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Possible errors that can occur with previews. */
export enum Preview_ErrorCode {
  /** ERROR_CODE_UNSPECIFIED - No error code was specified. */
  ERROR_CODE_UNSPECIFIED = 0,
  /** CLOUD_BUILD_PERMISSION_DENIED - Cloud Build failed due to a permissions issue. */
  CLOUD_BUILD_PERMISSION_DENIED = 1,
  /** BUCKET_CREATION_PERMISSION_DENIED - Cloud Storage bucket failed to create due to a permissions issue. */
  BUCKET_CREATION_PERMISSION_DENIED = 2,
  /** BUCKET_CREATION_FAILED - Cloud Storage bucket failed for a non-permissions-related issue. */
  BUCKET_CREATION_FAILED = 3,
  /** DEPLOYMENT_LOCK_ACQUIRE_FAILED - Acquiring lock on provided deployment reference failed. */
  DEPLOYMENT_LOCK_ACQUIRE_FAILED = 4,
  /** PREVIEW_BUILD_API_FAILED - Preview encountered an error when trying to access Cloud Build API. */
  PREVIEW_BUILD_API_FAILED = 5,
  /** PREVIEW_BUILD_RUN_FAILED - Preview created a build but build failed and logs were generated. */
  PREVIEW_BUILD_RUN_FAILED = 6,
  UNRECOGNIZED = -1,
}

export function preview_ErrorCodeFromJSON(object: any): Preview_ErrorCode {
  switch (object) {
    case 0:
    case "ERROR_CODE_UNSPECIFIED":
      return Preview_ErrorCode.ERROR_CODE_UNSPECIFIED;
    case 1:
    case "CLOUD_BUILD_PERMISSION_DENIED":
      return Preview_ErrorCode.CLOUD_BUILD_PERMISSION_DENIED;
    case 2:
    case "BUCKET_CREATION_PERMISSION_DENIED":
      return Preview_ErrorCode.BUCKET_CREATION_PERMISSION_DENIED;
    case 3:
    case "BUCKET_CREATION_FAILED":
      return Preview_ErrorCode.BUCKET_CREATION_FAILED;
    case 4:
    case "DEPLOYMENT_LOCK_ACQUIRE_FAILED":
      return Preview_ErrorCode.DEPLOYMENT_LOCK_ACQUIRE_FAILED;
    case 5:
    case "PREVIEW_BUILD_API_FAILED":
      return Preview_ErrorCode.PREVIEW_BUILD_API_FAILED;
    case 6:
    case "PREVIEW_BUILD_RUN_FAILED":
      return Preview_ErrorCode.PREVIEW_BUILD_RUN_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Preview_ErrorCode.UNRECOGNIZED;
  }
}

export function preview_ErrorCodeToJSON(object: Preview_ErrorCode): string {
  switch (object) {
    case Preview_ErrorCode.ERROR_CODE_UNSPECIFIED:
      return "ERROR_CODE_UNSPECIFIED";
    case Preview_ErrorCode.CLOUD_BUILD_PERMISSION_DENIED:
      return "CLOUD_BUILD_PERMISSION_DENIED";
    case Preview_ErrorCode.BUCKET_CREATION_PERMISSION_DENIED:
      return "BUCKET_CREATION_PERMISSION_DENIED";
    case Preview_ErrorCode.BUCKET_CREATION_FAILED:
      return "BUCKET_CREATION_FAILED";
    case Preview_ErrorCode.DEPLOYMENT_LOCK_ACQUIRE_FAILED:
      return "DEPLOYMENT_LOCK_ACQUIRE_FAILED";
    case Preview_ErrorCode.PREVIEW_BUILD_API_FAILED:
      return "PREVIEW_BUILD_API_FAILED";
    case Preview_ErrorCode.PREVIEW_BUILD_RUN_FAILED:
      return "PREVIEW_BUILD_RUN_FAILED";
    case Preview_ErrorCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Preview_LabelsEntry {
  key: string;
  value: string;
}

/** Ephemeral metadata content describing the state of a preview operation. */
export interface PreviewOperationMetadata {
  /** The current step the preview operation is running. */
  step: PreviewOperationMetadata_PreviewStep;
  /** Artifacts from preview. */
  previewArtifacts:
    | PreviewArtifacts
    | undefined;
  /** Output only. Location of preview logs in `gs://{bucket}/{object}` format. */
  logs: string;
  /** Output only. Cloud Build instance UUID associated with this preview. */
  build: string;
}

/** The possible steps a preview may be running. */
export enum PreviewOperationMetadata_PreviewStep {
  /** PREVIEW_STEP_UNSPECIFIED - Unspecified preview step. */
  PREVIEW_STEP_UNSPECIFIED = 0,
  /**
   * PREPARING_STORAGE_BUCKET - Infra Manager is creating a Google Cloud Storage bucket to store
   * artifacts and metadata about the preview.
   */
  PREPARING_STORAGE_BUCKET = 1,
  /** DOWNLOADING_BLUEPRINT - Downloading the blueprint onto the Google Cloud Storage bucket. */
  DOWNLOADING_BLUEPRINT = 2,
  /** RUNNING_TF_INIT - Initializing Terraform using `terraform init`. */
  RUNNING_TF_INIT = 3,
  /** RUNNING_TF_PLAN - Running `terraform plan`. */
  RUNNING_TF_PLAN = 4,
  /** FETCHING_DEPLOYMENT - Fetching a deployment. */
  FETCHING_DEPLOYMENT = 5,
  /** LOCKING_DEPLOYMENT - Locking a deployment. */
  LOCKING_DEPLOYMENT = 6,
  /** UNLOCKING_DEPLOYMENT - Unlocking a deployment. */
  UNLOCKING_DEPLOYMENT = 7,
  /** SUCCEEDED - Operation was successful. */
  SUCCEEDED = 8,
  /** FAILED - Operation failed. */
  FAILED = 9,
  /** VALIDATING_REPOSITORY - Validating the provided repository. */
  VALIDATING_REPOSITORY = 10,
  UNRECOGNIZED = -1,
}

export function previewOperationMetadata_PreviewStepFromJSON(object: any): PreviewOperationMetadata_PreviewStep {
  switch (object) {
    case 0:
    case "PREVIEW_STEP_UNSPECIFIED":
      return PreviewOperationMetadata_PreviewStep.PREVIEW_STEP_UNSPECIFIED;
    case 1:
    case "PREPARING_STORAGE_BUCKET":
      return PreviewOperationMetadata_PreviewStep.PREPARING_STORAGE_BUCKET;
    case 2:
    case "DOWNLOADING_BLUEPRINT":
      return PreviewOperationMetadata_PreviewStep.DOWNLOADING_BLUEPRINT;
    case 3:
    case "RUNNING_TF_INIT":
      return PreviewOperationMetadata_PreviewStep.RUNNING_TF_INIT;
    case 4:
    case "RUNNING_TF_PLAN":
      return PreviewOperationMetadata_PreviewStep.RUNNING_TF_PLAN;
    case 5:
    case "FETCHING_DEPLOYMENT":
      return PreviewOperationMetadata_PreviewStep.FETCHING_DEPLOYMENT;
    case 6:
    case "LOCKING_DEPLOYMENT":
      return PreviewOperationMetadata_PreviewStep.LOCKING_DEPLOYMENT;
    case 7:
    case "UNLOCKING_DEPLOYMENT":
      return PreviewOperationMetadata_PreviewStep.UNLOCKING_DEPLOYMENT;
    case 8:
    case "SUCCEEDED":
      return PreviewOperationMetadata_PreviewStep.SUCCEEDED;
    case 9:
    case "FAILED":
      return PreviewOperationMetadata_PreviewStep.FAILED;
    case 10:
    case "VALIDATING_REPOSITORY":
      return PreviewOperationMetadata_PreviewStep.VALIDATING_REPOSITORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PreviewOperationMetadata_PreviewStep.UNRECOGNIZED;
  }
}

export function previewOperationMetadata_PreviewStepToJSON(object: PreviewOperationMetadata_PreviewStep): string {
  switch (object) {
    case PreviewOperationMetadata_PreviewStep.PREVIEW_STEP_UNSPECIFIED:
      return "PREVIEW_STEP_UNSPECIFIED";
    case PreviewOperationMetadata_PreviewStep.PREPARING_STORAGE_BUCKET:
      return "PREPARING_STORAGE_BUCKET";
    case PreviewOperationMetadata_PreviewStep.DOWNLOADING_BLUEPRINT:
      return "DOWNLOADING_BLUEPRINT";
    case PreviewOperationMetadata_PreviewStep.RUNNING_TF_INIT:
      return "RUNNING_TF_INIT";
    case PreviewOperationMetadata_PreviewStep.RUNNING_TF_PLAN:
      return "RUNNING_TF_PLAN";
    case PreviewOperationMetadata_PreviewStep.FETCHING_DEPLOYMENT:
      return "FETCHING_DEPLOYMENT";
    case PreviewOperationMetadata_PreviewStep.LOCKING_DEPLOYMENT:
      return "LOCKING_DEPLOYMENT";
    case PreviewOperationMetadata_PreviewStep.UNLOCKING_DEPLOYMENT:
      return "UNLOCKING_DEPLOYMENT";
    case PreviewOperationMetadata_PreviewStep.SUCCEEDED:
      return "SUCCEEDED";
    case PreviewOperationMetadata_PreviewStep.FAILED:
      return "FAILED";
    case PreviewOperationMetadata_PreviewStep.VALIDATING_REPOSITORY:
      return "VALIDATING_REPOSITORY";
    case PreviewOperationMetadata_PreviewStep.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Artifacts created by preview. */
export interface PreviewArtifacts {
  /**
   * Output only. Location of a blueprint copy and other content in Google Cloud
   * Storage. Format: `gs://{bucket}/{object}`
   */
  content: string;
  /**
   * Output only. Location of artifacts in Google Cloud Storage.
   * Format: `gs://{bucket}/{object}`
   */
  artifacts: string;
}

/** A request to create a preview. */
export interface CreatePreviewRequest {
  /**
   * Required. The parent in whose context the Preview is created. The parent
   * value is in the format: 'projects/{project_id}/locations/{location}'.
   */
  parent: string;
  /** Optional. The preview ID. */
  previewId: string;
  /** Required. [Preview][google.cloud.config.v1.Preview] resource to be created. */
  preview:
    | Preview
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** A request to get details about a preview. */
export interface GetPreviewRequest {
  /**
   * Required. The name of the preview. Format:
   * 'projects/{project_id}/locations/{location}/previews/{preview}'.
   */
  name: string;
}

/** A request to list all previews for a given project and location. */
export interface ListPreviewsRequest {
  /**
   * Required. The parent in whose context the Previews are listed. The parent
   * value is in the format: 'projects/{project_id}/locations/{location}'.
   */
  parent: string;
  /**
   * Optional. When requesting a page of resources, 'page_size' specifies number
   * of resources to return. If unspecified, at most 500 will be returned. The
   * maximum value is 1000.
   */
  pageSize: number;
  /**
   * Optional. Token returned by previous call to 'ListDeployments' which
   * specifies the position in the list from where to continue listing the
   * resources.
   */
  pageToken: string;
  /**
   * Optional. Lists the Deployments that match the filter expression. A filter
   * expression filters the resources listed in the response. The expression
   * must be of the form '{field} {operator} {value}' where operators: '<', '>',
   * '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   * operator which is roughly synonymous with equality). {field} can refer to a
   * proto or JSON field, or a synthetic field. Field names can be camelCase or
   * snake_case.
   *
   * Examples:
   * - Filter by name:
   *   name = "projects/foo/locations/us-central1/deployments/bar
   *
   * - Filter by labels:
   *   - Resources that have a key called 'foo'
   *     labels.foo:*
   *   - Resources that have a key called 'foo' whose value is 'bar'
   *     labels.foo = bar
   *
   * - Filter by state:
   *   - Deployments in CREATING state.
   *     state=CREATING
   */
  filter: string;
  /** Optional. Field to use to sort the list. */
  orderBy: string;
}

/** A response to a `ListPreviews` call. Contains a list of Previews. */
export interface ListPreviewsResponse {
  /** List of [Previews][]s. */
  previews: Preview[];
  /**
   * Token to be supplied to the next ListPreviews request via `page_token`
   * to obtain the next set of results.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to delete a preview. */
export interface DeletePreviewRequest {
  /**
   * Required. The name of the Preview in the format:
   * 'projects/{project_id}/locations/{location}/previews/{preview}'.
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** A request to export preview results. */
export interface ExportPreviewResultRequest {
  /**
   * Required. The preview whose results should be exported. The preview value
   * is in the format:
   * 'projects/{project_id}/locations/{location}/previews/{preview}'.
   */
  parent: string;
}

/** A response to `ExportPreviewResult` call. Contains preview results. */
export interface ExportPreviewResultResponse {
  /** Output only. Signed URLs for accessing the plan files. */
  result: PreviewResult | undefined;
}

/** Contains a signed Cloud Storage URLs. */
export interface PreviewResult {
  /** Output only. Plan binary signed URL */
  binarySignedUri: string;
  /** Output only. Plan JSON signed URL */
  jsonSignedUri: string;
}

/** The request message for the GetTerraformVersion method. */
export interface GetTerraformVersionRequest {
  /**
   * Required. The name of the TerraformVersion. Format:
   * 'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'
   */
  name: string;
}

/** The request message for the ListTerraformVersions method. */
export interface ListTerraformVersionsRequest {
  /**
   * Required. The parent in whose context the TerraformVersions are listed. The
   * parent value is in the format:
   * 'projects/{project_id}/locations/{location}'.
   */
  parent: string;
  /**
   * Optional. When requesting a page of resources, 'page_size' specifies number
   * of resources to return. If unspecified, at most 500 will be returned. The
   * maximum value is 1000.
   */
  pageSize: number;
  /**
   * Optional. Token returned by previous call to 'ListTerraformVersions' which
   * specifies the position in the list from where to continue listing the
   * resources.
   */
  pageToken: string;
  /**
   * Optional. Lists the TerraformVersions that match the filter expression. A
   * filter expression filters the resources listed in the response. The
   * expression must be of the form '{field} {operator} {value}' where
   * operators: '<', '>',
   * '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   * operator which is roughly synonymous with equality). {field} can refer to a
   * proto or JSON field, or a synthetic field. Field names can be camelCase or
   * snake_case.
   */
  filter: string;
  /** Optional. Field to use to sort the list. */
  orderBy: string;
}

/** The response message for the `ListTerraformVersions` method. */
export interface ListTerraformVersionsResponse {
  /** List of [TerraformVersion][google.cloud.config.v1.TerraformVersion]s. */
  terraformVersions: TerraformVersion[];
  /**
   * Token to be supplied to the next ListTerraformVersions request via
   * `page_token` to obtain the next set of results.
   */
  nextPageToken: string;
  /** Unreachable resources, if any. */
  unreachable: string[];
}

/**
 * A TerraformVersion represents the support state the corresponding
 * Terraform version.
 */
export interface TerraformVersion {
  /**
   * Identifier. The version name is in the format:
   * 'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'.
   */
  name: string;
  /** Output only. The state of the version, ACTIVE, DEPRECATED or OBSOLETE. */
  state: TerraformVersion_State;
  /** Output only. When the version is supported. */
  supportTime:
    | Date
    | undefined;
  /** Output only. When the version is deprecated. */
  deprecateTime?:
    | Date
    | undefined;
  /** Output only. When the version is obsolete. */
  obsoleteTime?: Date | undefined;
}

/** Possible states of a TerraformVersion. */
export enum TerraformVersion_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The version is actively supported. */
  ACTIVE = 1,
  /** DEPRECATED - The version is deprecated. */
  DEPRECATED = 2,
  /** OBSOLETE - The version is obsolete. */
  OBSOLETE = 3,
  UNRECOGNIZED = -1,
}

export function terraformVersion_StateFromJSON(object: any): TerraformVersion_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return TerraformVersion_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return TerraformVersion_State.ACTIVE;
    case 2:
    case "DEPRECATED":
      return TerraformVersion_State.DEPRECATED;
    case 3:
    case "OBSOLETE":
      return TerraformVersion_State.OBSOLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TerraformVersion_State.UNRECOGNIZED;
  }
}

export function terraformVersion_StateToJSON(object: TerraformVersion_State): string {
  switch (object) {
    case TerraformVersion_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case TerraformVersion_State.ACTIVE:
      return "ACTIVE";
    case TerraformVersion_State.DEPRECATED:
      return "DEPRECATED";
    case TerraformVersion_State.OBSOLETE:
      return "OBSOLETE";
    case TerraformVersion_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDeployment(): Deployment {
  return {
    terraformBlueprint: undefined,
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    state: 0,
    latestRevision: "",
    stateDetail: "",
    errorCode: 0,
    deleteResults: undefined,
    deleteBuild: "",
    deleteLogs: "",
    tfErrors: [],
    errorLogs: "",
    artifactsGcsBucket: undefined,
    serviceAccount: undefined,
    importExistingResources: undefined,
    workerPool: undefined,
    lockState: 0,
    tfVersionConstraint: undefined,
    tfVersion: "",
    quotaValidation: 0,
    annotations: {},
  };
}

export const Deployment: MessageFns<Deployment> = {
  encode(message: Deployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.terraformBlueprint !== undefined) {
      TerraformBlueprint.encode(message.terraformBlueprint, writer.uint32(50).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Deployment_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.latestRevision !== "") {
      writer.uint32(58).string(message.latestRevision);
    }
    if (message.stateDetail !== "") {
      writer.uint32(74).string(message.stateDetail);
    }
    if (message.errorCode !== 0) {
      writer.uint32(80).int32(message.errorCode);
    }
    if (message.deleteResults !== undefined) {
      ApplyResults.encode(message.deleteResults, writer.uint32(66).fork()).join();
    }
    if (message.deleteBuild !== "") {
      writer.uint32(90).string(message.deleteBuild);
    }
    if (message.deleteLogs !== "") {
      writer.uint32(98).string(message.deleteLogs);
    }
    for (const v of message.tfErrors) {
      TerraformError.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.errorLogs !== "") {
      writer.uint32(114).string(message.errorLogs);
    }
    if (message.artifactsGcsBucket !== undefined) {
      writer.uint32(122).string(message.artifactsGcsBucket);
    }
    if (message.serviceAccount !== undefined) {
      writer.uint32(130).string(message.serviceAccount);
    }
    if (message.importExistingResources !== undefined) {
      writer.uint32(136).bool(message.importExistingResources);
    }
    if (message.workerPool !== undefined) {
      writer.uint32(154).string(message.workerPool);
    }
    if (message.lockState !== 0) {
      writer.uint32(160).int32(message.lockState);
    }
    if (message.tfVersionConstraint !== undefined) {
      writer.uint32(170).string(message.tfVersionConstraint);
    }
    if (message.tfVersion !== "") {
      writer.uint32(178).string(message.tfVersion);
    }
    if (message.quotaValidation !== 0) {
      writer.uint32(184).int32(message.quotaValidation);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      Deployment_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(194).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.terraformBlueprint = TerraformBlueprint.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Deployment_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.latestRevision = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.stateDetail = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.errorCode = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deleteResults = ApplyResults.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.deleteBuild = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.deleteLogs = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.tfErrors.push(TerraformError.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.errorLogs = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.artifactsGcsBucket = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.importExistingResources = reader.bool();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.workerPool = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.lockState = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.tfVersionConstraint = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.tfVersion = reader.string();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.quotaValidation = reader.int32() as any;
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          const entry24 = Deployment_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry24.value !== undefined) {
            message.annotations[entry24.key] = entry24.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment {
    return {
      terraformBlueprint: isSet(object.terraformBlueprint)
        ? TerraformBlueprint.fromJSON(object.terraformBlueprint)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? deployment_StateFromJSON(object.state) : 0,
      latestRevision: isSet(object.latestRevision) ? globalThis.String(object.latestRevision) : "",
      stateDetail: isSet(object.stateDetail) ? globalThis.String(object.stateDetail) : "",
      errorCode: isSet(object.errorCode) ? deployment_ErrorCodeFromJSON(object.errorCode) : 0,
      deleteResults: isSet(object.deleteResults) ? ApplyResults.fromJSON(object.deleteResults) : undefined,
      deleteBuild: isSet(object.deleteBuild) ? globalThis.String(object.deleteBuild) : "",
      deleteLogs: isSet(object.deleteLogs) ? globalThis.String(object.deleteLogs) : "",
      tfErrors: globalThis.Array.isArray(object?.tfErrors)
        ? object.tfErrors.map((e: any) => TerraformError.fromJSON(e))
        : [],
      errorLogs: isSet(object.errorLogs) ? globalThis.String(object.errorLogs) : "",
      artifactsGcsBucket: isSet(object.artifactsGcsBucket) ? globalThis.String(object.artifactsGcsBucket) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : undefined,
      importExistingResources: isSet(object.importExistingResources)
        ? globalThis.Boolean(object.importExistingResources)
        : undefined,
      workerPool: isSet(object.workerPool) ? globalThis.String(object.workerPool) : undefined,
      lockState: isSet(object.lockState) ? deployment_LockStateFromJSON(object.lockState) : 0,
      tfVersionConstraint: isSet(object.tfVersionConstraint)
        ? globalThis.String(object.tfVersionConstraint)
        : undefined,
      tfVersion: isSet(object.tfVersion) ? globalThis.String(object.tfVersion) : "",
      quotaValidation: isSet(object.quotaValidation) ? quotaValidationFromJSON(object.quotaValidation) : 0,
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Deployment): unknown {
    const obj: any = {};
    if (message.terraformBlueprint !== undefined) {
      obj.terraformBlueprint = TerraformBlueprint.toJSON(message.terraformBlueprint);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = deployment_StateToJSON(message.state);
    }
    if (message.latestRevision !== "") {
      obj.latestRevision = message.latestRevision;
    }
    if (message.stateDetail !== "") {
      obj.stateDetail = message.stateDetail;
    }
    if (message.errorCode !== 0) {
      obj.errorCode = deployment_ErrorCodeToJSON(message.errorCode);
    }
    if (message.deleteResults !== undefined) {
      obj.deleteResults = ApplyResults.toJSON(message.deleteResults);
    }
    if (message.deleteBuild !== "") {
      obj.deleteBuild = message.deleteBuild;
    }
    if (message.deleteLogs !== "") {
      obj.deleteLogs = message.deleteLogs;
    }
    if (message.tfErrors?.length) {
      obj.tfErrors = message.tfErrors.map((e) => TerraformError.toJSON(e));
    }
    if (message.errorLogs !== "") {
      obj.errorLogs = message.errorLogs;
    }
    if (message.artifactsGcsBucket !== undefined) {
      obj.artifactsGcsBucket = message.artifactsGcsBucket;
    }
    if (message.serviceAccount !== undefined) {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.importExistingResources !== undefined) {
      obj.importExistingResources = message.importExistingResources;
    }
    if (message.workerPool !== undefined) {
      obj.workerPool = message.workerPool;
    }
    if (message.lockState !== 0) {
      obj.lockState = deployment_LockStateToJSON(message.lockState);
    }
    if (message.tfVersionConstraint !== undefined) {
      obj.tfVersionConstraint = message.tfVersionConstraint;
    }
    if (message.tfVersion !== "") {
      obj.tfVersion = message.tfVersion;
    }
    if (message.quotaValidation !== 0) {
      obj.quotaValidation = quotaValidationToJSON(message.quotaValidation);
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment>): Deployment {
    return Deployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment>): Deployment {
    const message = createBaseDeployment();
    message.terraformBlueprint = (object.terraformBlueprint !== undefined && object.terraformBlueprint !== null)
      ? TerraformBlueprint.fromPartial(object.terraformBlueprint)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    message.latestRevision = object.latestRevision ?? "";
    message.stateDetail = object.stateDetail ?? "";
    message.errorCode = object.errorCode ?? 0;
    message.deleteResults = (object.deleteResults !== undefined && object.deleteResults !== null)
      ? ApplyResults.fromPartial(object.deleteResults)
      : undefined;
    message.deleteBuild = object.deleteBuild ?? "";
    message.deleteLogs = object.deleteLogs ?? "";
    message.tfErrors = object.tfErrors?.map((e) => TerraformError.fromPartial(e)) || [];
    message.errorLogs = object.errorLogs ?? "";
    message.artifactsGcsBucket = object.artifactsGcsBucket ?? undefined;
    message.serviceAccount = object.serviceAccount ?? undefined;
    message.importExistingResources = object.importExistingResources ?? undefined;
    message.workerPool = object.workerPool ?? undefined;
    message.lockState = object.lockState ?? 0;
    message.tfVersionConstraint = object.tfVersionConstraint ?? undefined;
    message.tfVersion = object.tfVersion ?? "";
    message.quotaValidation = object.quotaValidation ?? 0;
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseDeployment_LabelsEntry(): Deployment_LabelsEntry {
  return { key: "", value: "" };
}

export const Deployment_LabelsEntry: MessageFns<Deployment_LabelsEntry> = {
  encode(message: Deployment_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Deployment_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment_LabelsEntry>): Deployment_LabelsEntry {
    return Deployment_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment_LabelsEntry>): Deployment_LabelsEntry {
    const message = createBaseDeployment_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDeployment_AnnotationsEntry(): Deployment_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Deployment_AnnotationsEntry: MessageFns<Deployment_AnnotationsEntry> = {
  encode(message: Deployment_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Deployment_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment_AnnotationsEntry>): Deployment_AnnotationsEntry {
    return Deployment_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment_AnnotationsEntry>): Deployment_AnnotationsEntry {
    const message = createBaseDeployment_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTerraformBlueprint(): TerraformBlueprint {
  return { gcsSource: undefined, gitSource: undefined, inputValues: {} };
}

export const TerraformBlueprint: MessageFns<TerraformBlueprint> = {
  encode(message: TerraformBlueprint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsSource !== undefined) {
      writer.uint32(10).string(message.gcsSource);
    }
    if (message.gitSource !== undefined) {
      GitSource.encode(message.gitSource, writer.uint32(18).fork()).join();
    }
    Object.entries(message.inputValues).forEach(([key, value]) => {
      TerraformBlueprint_InputValuesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerraformBlueprint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerraformBlueprint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsSource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gitSource = GitSource.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = TerraformBlueprint_InputValuesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.inputValues[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerraformBlueprint {
    return {
      gcsSource: isSet(object.gcsSource) ? globalThis.String(object.gcsSource) : undefined,
      gitSource: isSet(object.gitSource) ? GitSource.fromJSON(object.gitSource) : undefined,
      inputValues: isObject(object.inputValues)
        ? Object.entries(object.inputValues).reduce<{ [key: string]: TerraformVariable }>((acc, [key, value]) => {
          acc[key] = TerraformVariable.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TerraformBlueprint): unknown {
    const obj: any = {};
    if (message.gcsSource !== undefined) {
      obj.gcsSource = message.gcsSource;
    }
    if (message.gitSource !== undefined) {
      obj.gitSource = GitSource.toJSON(message.gitSource);
    }
    if (message.inputValues) {
      const entries = Object.entries(message.inputValues);
      if (entries.length > 0) {
        obj.inputValues = {};
        entries.forEach(([k, v]) => {
          obj.inputValues[k] = TerraformVariable.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TerraformBlueprint>): TerraformBlueprint {
    return TerraformBlueprint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerraformBlueprint>): TerraformBlueprint {
    const message = createBaseTerraformBlueprint();
    message.gcsSource = object.gcsSource ?? undefined;
    message.gitSource = (object.gitSource !== undefined && object.gitSource !== null)
      ? GitSource.fromPartial(object.gitSource)
      : undefined;
    message.inputValues = Object.entries(object.inputValues ?? {}).reduce<{ [key: string]: TerraformVariable }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = TerraformVariable.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTerraformBlueprint_InputValuesEntry(): TerraformBlueprint_InputValuesEntry {
  return { key: "", value: undefined };
}

export const TerraformBlueprint_InputValuesEntry: MessageFns<TerraformBlueprint_InputValuesEntry> = {
  encode(message: TerraformBlueprint_InputValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      TerraformVariable.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerraformBlueprint_InputValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerraformBlueprint_InputValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = TerraformVariable.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerraformBlueprint_InputValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? TerraformVariable.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TerraformBlueprint_InputValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = TerraformVariable.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<TerraformBlueprint_InputValuesEntry>): TerraformBlueprint_InputValuesEntry {
    return TerraformBlueprint_InputValuesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerraformBlueprint_InputValuesEntry>): TerraformBlueprint_InputValuesEntry {
    const message = createBaseTerraformBlueprint_InputValuesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? TerraformVariable.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseTerraformVariable(): TerraformVariable {
  return { inputValue: undefined };
}

export const TerraformVariable: MessageFns<TerraformVariable> = {
  encode(message: TerraformVariable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputValue !== undefined) {
      Value.encode(Value.wrap(message.inputValue), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerraformVariable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerraformVariable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.inputValue = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerraformVariable {
    return { inputValue: isSet(object?.inputValue) ? object.inputValue : undefined };
  },

  toJSON(message: TerraformVariable): unknown {
    const obj: any = {};
    if (message.inputValue !== undefined) {
      obj.inputValue = message.inputValue;
    }
    return obj;
  },

  create(base?: DeepPartial<TerraformVariable>): TerraformVariable {
    return TerraformVariable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerraformVariable>): TerraformVariable {
    const message = createBaseTerraformVariable();
    message.inputValue = object.inputValue ?? undefined;
    return message;
  },
};

function createBaseApplyResults(): ApplyResults {
  return { content: "", artifacts: "", outputs: {} };
}

export const ApplyResults: MessageFns<ApplyResults> = {
  encode(message: ApplyResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    if (message.artifacts !== "") {
      writer.uint32(18).string(message.artifacts);
    }
    Object.entries(message.outputs).forEach(([key, value]) => {
      ApplyResults_OutputsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artifacts = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ApplyResults_OutputsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.outputs[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyResults {
    return {
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      artifacts: isSet(object.artifacts) ? globalThis.String(object.artifacts) : "",
      outputs: isObject(object.outputs)
        ? Object.entries(object.outputs).reduce<{ [key: string]: TerraformOutput }>((acc, [key, value]) => {
          acc[key] = TerraformOutput.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ApplyResults): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.artifacts !== "") {
      obj.artifacts = message.artifacts;
    }
    if (message.outputs) {
      const entries = Object.entries(message.outputs);
      if (entries.length > 0) {
        obj.outputs = {};
        entries.forEach(([k, v]) => {
          obj.outputs[k] = TerraformOutput.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ApplyResults>): ApplyResults {
    return ApplyResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplyResults>): ApplyResults {
    const message = createBaseApplyResults();
    message.content = object.content ?? "";
    message.artifacts = object.artifacts ?? "";
    message.outputs = Object.entries(object.outputs ?? {}).reduce<{ [key: string]: TerraformOutput }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = TerraformOutput.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseApplyResults_OutputsEntry(): ApplyResults_OutputsEntry {
  return { key: "", value: undefined };
}

export const ApplyResults_OutputsEntry: MessageFns<ApplyResults_OutputsEntry> = {
  encode(message: ApplyResults_OutputsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      TerraformOutput.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyResults_OutputsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyResults_OutputsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = TerraformOutput.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyResults_OutputsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? TerraformOutput.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ApplyResults_OutputsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = TerraformOutput.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ApplyResults_OutputsEntry>): ApplyResults_OutputsEntry {
    return ApplyResults_OutputsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplyResults_OutputsEntry>): ApplyResults_OutputsEntry {
    const message = createBaseApplyResults_OutputsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? TerraformOutput.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseTerraformOutput(): TerraformOutput {
  return { sensitive: false, value: undefined };
}

export const TerraformOutput: MessageFns<TerraformOutput> = {
  encode(message: TerraformOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sensitive !== false) {
      writer.uint32(8).bool(message.sensitive);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerraformOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerraformOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sensitive = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerraformOutput {
    return {
      sensitive: isSet(object.sensitive) ? globalThis.Boolean(object.sensitive) : false,
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: TerraformOutput): unknown {
    const obj: any = {};
    if (message.sensitive !== false) {
      obj.sensitive = message.sensitive;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TerraformOutput>): TerraformOutput {
    return TerraformOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerraformOutput>): TerraformOutput {
    const message = createBaseTerraformOutput();
    message.sensitive = object.sensitive ?? false;
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseListDeploymentsRequest(): ListDeploymentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDeploymentsRequest: MessageFns<ListDeploymentsRequest> = {
  encode(message: ListDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    return ListDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsRequest>): ListDeploymentsRequest {
    const message = createBaseListDeploymentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDeploymentsResponse(): ListDeploymentsResponse {
  return { deployments: [], nextPageToken: "", unreachable: [] };
}

export const ListDeploymentsResponse: MessageFns<ListDeploymentsResponse> = {
  encode(message: ListDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployments) {
      Deployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployments.push(Deployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeploymentsResponse {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => Deployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => Deployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    return ListDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeploymentsResponse>): ListDeploymentsResponse {
    const message = createBaseListDeploymentsResponse();
    message.deployments = object.deployments?.map((e) => Deployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetDeploymentRequest(): GetDeploymentRequest {
  return { name: "" };
}

export const GetDeploymentRequest: MessageFns<GetDeploymentRequest> = {
  encode(message: GetDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    return GetDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
    const message = createBaseGetDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRevisionsRequest(): ListRevisionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRevisionsRequest: MessageFns<ListRevisionsRequest> = {
  encode(message: ListRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRevisionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRevisionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRevisionsRequest>): ListRevisionsRequest {
    return ListRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRevisionsRequest>): ListRevisionsRequest {
    const message = createBaseListRevisionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRevisionsResponse(): ListRevisionsResponse {
  return { revisions: [], nextPageToken: "", unreachable: [] };
}

export const ListRevisionsResponse: MessageFns<ListRevisionsResponse> = {
  encode(message: ListRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.revisions) {
      Revision.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.revisions.push(Revision.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRevisionsResponse {
    return {
      revisions: globalThis.Array.isArray(object?.revisions)
        ? object.revisions.map((e: any) => Revision.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRevisionsResponse): unknown {
    const obj: any = {};
    if (message.revisions?.length) {
      obj.revisions = message.revisions.map((e) => Revision.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRevisionsResponse>): ListRevisionsResponse {
    return ListRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRevisionsResponse>): ListRevisionsResponse {
    const message = createBaseListRevisionsResponse();
    message.revisions = object.revisions?.map((e) => Revision.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetRevisionRequest(): GetRevisionRequest {
  return { name: "" };
}

export const GetRevisionRequest: MessageFns<GetRevisionRequest> = {
  encode(message: GetRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRevisionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRevisionRequest>): GetRevisionRequest {
    return GetRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRevisionRequest>): GetRevisionRequest {
    const message = createBaseGetRevisionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateDeploymentRequest(): CreateDeploymentRequest {
  return { parent: "", deploymentId: "", deployment: undefined, requestId: "" };
}

export const CreateDeploymentRequest: MessageFns<CreateDeploymentRequest> = {
  encode(message: CreateDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.deploymentId !== "") {
      writer.uint32(18).string(message.deploymentId);
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deploymentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeploymentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "",
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateDeploymentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deploymentId !== "") {
      obj.deploymentId = message.deploymentId;
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDeploymentRequest>): CreateDeploymentRequest {
    return CreateDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDeploymentRequest>): CreateDeploymentRequest {
    const message = createBaseCreateDeploymentRequest();
    message.parent = object.parent ?? "";
    message.deploymentId = object.deploymentId ?? "";
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateDeploymentRequest(): UpdateDeploymentRequest {
  return { updateMask: undefined, deployment: undefined, requestId: "" };
}

export const UpdateDeploymentRequest: MessageFns<UpdateDeploymentRequest> = {
  encode(message: UpdateDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeploymentRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateDeploymentRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDeploymentRequest>): UpdateDeploymentRequest {
    return UpdateDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDeploymentRequest>): UpdateDeploymentRequest {
    const message = createBaseUpdateDeploymentRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteDeploymentRequest(): DeleteDeploymentRequest {
  return { name: "", requestId: "", force: false, deletePolicy: 0 };
}

export const DeleteDeploymentRequest: MessageFns<DeleteDeploymentRequest> = {
  encode(message: DeleteDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    if (message.deletePolicy !== 0) {
      writer.uint32(32).int32(message.deletePolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.deletePolicy = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeploymentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      deletePolicy: isSet(object.deletePolicy) ? deleteDeploymentRequest_DeletePolicyFromJSON(object.deletePolicy) : 0,
    };
  },

  toJSON(message: DeleteDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.deletePolicy !== 0) {
      obj.deletePolicy = deleteDeploymentRequest_DeletePolicyToJSON(message.deletePolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDeploymentRequest>): DeleteDeploymentRequest {
    return DeleteDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDeploymentRequest>): DeleteDeploymentRequest {
    const message = createBaseDeleteDeploymentRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    message.deletePolicy = object.deletePolicy ?? 0;
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    deploymentMetadata: undefined,
    previewMetadata: undefined,
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deploymentMetadata !== undefined) {
      DeploymentOperationMetadata.encode(message.deploymentMetadata, writer.uint32(66).fork()).join();
    }
    if (message.previewMetadata !== undefined) {
      PreviewOperationMetadata.encode(message.previewMetadata, writer.uint32(74).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deploymentMetadata = DeploymentOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.previewMetadata = PreviewOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      deploymentMetadata: isSet(object.deploymentMetadata)
        ? DeploymentOperationMetadata.fromJSON(object.deploymentMetadata)
        : undefined,
      previewMetadata: isSet(object.previewMetadata)
        ? PreviewOperationMetadata.fromJSON(object.previewMetadata)
        : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.deploymentMetadata !== undefined) {
      obj.deploymentMetadata = DeploymentOperationMetadata.toJSON(message.deploymentMetadata);
    }
    if (message.previewMetadata !== undefined) {
      obj.previewMetadata = PreviewOperationMetadata.toJSON(message.previewMetadata);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.deploymentMetadata = (object.deploymentMetadata !== undefined && object.deploymentMetadata !== null)
      ? DeploymentOperationMetadata.fromPartial(object.deploymentMetadata)
      : undefined;
    message.previewMetadata = (object.previewMetadata !== undefined && object.previewMetadata !== null)
      ? PreviewOperationMetadata.fromPartial(object.previewMetadata)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseRevision(): Revision {
  return {
    terraformBlueprint: undefined,
    name: "",
    createTime: undefined,
    updateTime: undefined,
    action: 0,
    state: 0,
    applyResults: undefined,
    stateDetail: "",
    errorCode: 0,
    build: "",
    logs: "",
    tfErrors: [],
    errorLogs: "",
    serviceAccount: "",
    importExistingResources: false,
    workerPool: "",
    tfVersionConstraint: "",
    tfVersion: "",
    quotaValidationResults: "",
    quotaValidation: 0,
  };
}

export const Revision: MessageFns<Revision> = {
  encode(message: Revision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.terraformBlueprint !== undefined) {
      TerraformBlueprint.encode(message.terraformBlueprint, writer.uint32(50).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.action !== 0) {
      writer.uint32(32).int32(message.action);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.applyResults !== undefined) {
      ApplyResults.encode(message.applyResults, writer.uint32(58).fork()).join();
    }
    if (message.stateDetail !== "") {
      writer.uint32(66).string(message.stateDetail);
    }
    if (message.errorCode !== 0) {
      writer.uint32(72).int32(message.errorCode);
    }
    if (message.build !== "") {
      writer.uint32(82).string(message.build);
    }
    if (message.logs !== "") {
      writer.uint32(90).string(message.logs);
    }
    for (const v of message.tfErrors) {
      TerraformError.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.errorLogs !== "") {
      writer.uint32(106).string(message.errorLogs);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(114).string(message.serviceAccount);
    }
    if (message.importExistingResources !== false) {
      writer.uint32(120).bool(message.importExistingResources);
    }
    if (message.workerPool !== "") {
      writer.uint32(138).string(message.workerPool);
    }
    if (message.tfVersionConstraint !== "") {
      writer.uint32(146).string(message.tfVersionConstraint);
    }
    if (message.tfVersion !== "") {
      writer.uint32(154).string(message.tfVersion);
    }
    if (message.quotaValidationResults !== "") {
      writer.uint32(234).string(message.quotaValidationResults);
    }
    if (message.quotaValidation !== 0) {
      writer.uint32(160).int32(message.quotaValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.terraformBlueprint = TerraformBlueprint.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.applyResults = ApplyResults.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.stateDetail = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.errorCode = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.build = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.logs = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.tfErrors.push(TerraformError.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.errorLogs = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.importExistingResources = reader.bool();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.workerPool = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.tfVersionConstraint = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.tfVersion = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.quotaValidationResults = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.quotaValidation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision {
    return {
      terraformBlueprint: isSet(object.terraformBlueprint)
        ? TerraformBlueprint.fromJSON(object.terraformBlueprint)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      action: isSet(object.action) ? revision_ActionFromJSON(object.action) : 0,
      state: isSet(object.state) ? revision_StateFromJSON(object.state) : 0,
      applyResults: isSet(object.applyResults) ? ApplyResults.fromJSON(object.applyResults) : undefined,
      stateDetail: isSet(object.stateDetail) ? globalThis.String(object.stateDetail) : "",
      errorCode: isSet(object.errorCode) ? revision_ErrorCodeFromJSON(object.errorCode) : 0,
      build: isSet(object.build) ? globalThis.String(object.build) : "",
      logs: isSet(object.logs) ? globalThis.String(object.logs) : "",
      tfErrors: globalThis.Array.isArray(object?.tfErrors)
        ? object.tfErrors.map((e: any) => TerraformError.fromJSON(e))
        : [],
      errorLogs: isSet(object.errorLogs) ? globalThis.String(object.errorLogs) : "",
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      importExistingResources: isSet(object.importExistingResources)
        ? globalThis.Boolean(object.importExistingResources)
        : false,
      workerPool: isSet(object.workerPool) ? globalThis.String(object.workerPool) : "",
      tfVersionConstraint: isSet(object.tfVersionConstraint) ? globalThis.String(object.tfVersionConstraint) : "",
      tfVersion: isSet(object.tfVersion) ? globalThis.String(object.tfVersion) : "",
      quotaValidationResults: isSet(object.quotaValidationResults)
        ? globalThis.String(object.quotaValidationResults)
        : "",
      quotaValidation: isSet(object.quotaValidation) ? quotaValidationFromJSON(object.quotaValidation) : 0,
    };
  },

  toJSON(message: Revision): unknown {
    const obj: any = {};
    if (message.terraformBlueprint !== undefined) {
      obj.terraformBlueprint = TerraformBlueprint.toJSON(message.terraformBlueprint);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.action !== 0) {
      obj.action = revision_ActionToJSON(message.action);
    }
    if (message.state !== 0) {
      obj.state = revision_StateToJSON(message.state);
    }
    if (message.applyResults !== undefined) {
      obj.applyResults = ApplyResults.toJSON(message.applyResults);
    }
    if (message.stateDetail !== "") {
      obj.stateDetail = message.stateDetail;
    }
    if (message.errorCode !== 0) {
      obj.errorCode = revision_ErrorCodeToJSON(message.errorCode);
    }
    if (message.build !== "") {
      obj.build = message.build;
    }
    if (message.logs !== "") {
      obj.logs = message.logs;
    }
    if (message.tfErrors?.length) {
      obj.tfErrors = message.tfErrors.map((e) => TerraformError.toJSON(e));
    }
    if (message.errorLogs !== "") {
      obj.errorLogs = message.errorLogs;
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.importExistingResources !== false) {
      obj.importExistingResources = message.importExistingResources;
    }
    if (message.workerPool !== "") {
      obj.workerPool = message.workerPool;
    }
    if (message.tfVersionConstraint !== "") {
      obj.tfVersionConstraint = message.tfVersionConstraint;
    }
    if (message.tfVersion !== "") {
      obj.tfVersion = message.tfVersion;
    }
    if (message.quotaValidationResults !== "") {
      obj.quotaValidationResults = message.quotaValidationResults;
    }
    if (message.quotaValidation !== 0) {
      obj.quotaValidation = quotaValidationToJSON(message.quotaValidation);
    }
    return obj;
  },

  create(base?: DeepPartial<Revision>): Revision {
    return Revision.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Revision>): Revision {
    const message = createBaseRevision();
    message.terraformBlueprint = (object.terraformBlueprint !== undefined && object.terraformBlueprint !== null)
      ? TerraformBlueprint.fromPartial(object.terraformBlueprint)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.action = object.action ?? 0;
    message.state = object.state ?? 0;
    message.applyResults = (object.applyResults !== undefined && object.applyResults !== null)
      ? ApplyResults.fromPartial(object.applyResults)
      : undefined;
    message.stateDetail = object.stateDetail ?? "";
    message.errorCode = object.errorCode ?? 0;
    message.build = object.build ?? "";
    message.logs = object.logs ?? "";
    message.tfErrors = object.tfErrors?.map((e) => TerraformError.fromPartial(e)) || [];
    message.errorLogs = object.errorLogs ?? "";
    message.serviceAccount = object.serviceAccount ?? "";
    message.importExistingResources = object.importExistingResources ?? false;
    message.workerPool = object.workerPool ?? "";
    message.tfVersionConstraint = object.tfVersionConstraint ?? "";
    message.tfVersion = object.tfVersion ?? "";
    message.quotaValidationResults = object.quotaValidationResults ?? "";
    message.quotaValidation = object.quotaValidation ?? 0;
    return message;
  },
};

function createBaseTerraformError(): TerraformError {
  return { resourceAddress: "", httpResponseCode: 0, errorDescription: "", error: undefined };
}

export const TerraformError: MessageFns<TerraformError> = {
  encode(message: TerraformError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceAddress !== "") {
      writer.uint32(10).string(message.resourceAddress);
    }
    if (message.httpResponseCode !== 0) {
      writer.uint32(16).int32(message.httpResponseCode);
    }
    if (message.errorDescription !== "") {
      writer.uint32(26).string(message.errorDescription);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerraformError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerraformError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceAddress = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.httpResponseCode = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errorDescription = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerraformError {
    return {
      resourceAddress: isSet(object.resourceAddress) ? globalThis.String(object.resourceAddress) : "",
      httpResponseCode: isSet(object.httpResponseCode) ? globalThis.Number(object.httpResponseCode) : 0,
      errorDescription: isSet(object.errorDescription) ? globalThis.String(object.errorDescription) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: TerraformError): unknown {
    const obj: any = {};
    if (message.resourceAddress !== "") {
      obj.resourceAddress = message.resourceAddress;
    }
    if (message.httpResponseCode !== 0) {
      obj.httpResponseCode = Math.round(message.httpResponseCode);
    }
    if (message.errorDescription !== "") {
      obj.errorDescription = message.errorDescription;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<TerraformError>): TerraformError {
    return TerraformError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerraformError>): TerraformError {
    const message = createBaseTerraformError();
    message.resourceAddress = object.resourceAddress ?? "";
    message.httpResponseCode = object.httpResponseCode ?? 0;
    message.errorDescription = object.errorDescription ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseGitSource(): GitSource {
  return { repo: undefined, directory: undefined, ref: undefined };
}

export const GitSource: MessageFns<GitSource> = {
  encode(message: GitSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repo !== undefined) {
      writer.uint32(10).string(message.repo);
    }
    if (message.directory !== undefined) {
      writer.uint32(18).string(message.directory);
    }
    if (message.ref !== undefined) {
      writer.uint32(26).string(message.ref);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repo = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.directory = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ref = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitSource {
    return {
      repo: isSet(object.repo) ? globalThis.String(object.repo) : undefined,
      directory: isSet(object.directory) ? globalThis.String(object.directory) : undefined,
      ref: isSet(object.ref) ? globalThis.String(object.ref) : undefined,
    };
  },

  toJSON(message: GitSource): unknown {
    const obj: any = {};
    if (message.repo !== undefined) {
      obj.repo = message.repo;
    }
    if (message.directory !== undefined) {
      obj.directory = message.directory;
    }
    if (message.ref !== undefined) {
      obj.ref = message.ref;
    }
    return obj;
  },

  create(base?: DeepPartial<GitSource>): GitSource {
    return GitSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitSource>): GitSource {
    const message = createBaseGitSource();
    message.repo = object.repo ?? undefined;
    message.directory = object.directory ?? undefined;
    message.ref = object.ref ?? undefined;
    return message;
  },
};

function createBaseDeploymentOperationMetadata(): DeploymentOperationMetadata {
  return { step: 0, applyResults: undefined, build: "", logs: "" };
}

export const DeploymentOperationMetadata: MessageFns<DeploymentOperationMetadata> = {
  encode(message: DeploymentOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.step !== 0) {
      writer.uint32(8).int32(message.step);
    }
    if (message.applyResults !== undefined) {
      ApplyResults.encode(message.applyResults, writer.uint32(18).fork()).join();
    }
    if (message.build !== "") {
      writer.uint32(26).string(message.build);
    }
    if (message.logs !== "") {
      writer.uint32(34).string(message.logs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.step = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.applyResults = ApplyResults.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.build = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logs = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentOperationMetadata {
    return {
      step: isSet(object.step) ? deploymentOperationMetadata_DeploymentStepFromJSON(object.step) : 0,
      applyResults: isSet(object.applyResults) ? ApplyResults.fromJSON(object.applyResults) : undefined,
      build: isSet(object.build) ? globalThis.String(object.build) : "",
      logs: isSet(object.logs) ? globalThis.String(object.logs) : "",
    };
  },

  toJSON(message: DeploymentOperationMetadata): unknown {
    const obj: any = {};
    if (message.step !== 0) {
      obj.step = deploymentOperationMetadata_DeploymentStepToJSON(message.step);
    }
    if (message.applyResults !== undefined) {
      obj.applyResults = ApplyResults.toJSON(message.applyResults);
    }
    if (message.build !== "") {
      obj.build = message.build;
    }
    if (message.logs !== "") {
      obj.logs = message.logs;
    }
    return obj;
  },

  create(base?: DeepPartial<DeploymentOperationMetadata>): DeploymentOperationMetadata {
    return DeploymentOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeploymentOperationMetadata>): DeploymentOperationMetadata {
    const message = createBaseDeploymentOperationMetadata();
    message.step = object.step ?? 0;
    message.applyResults = (object.applyResults !== undefined && object.applyResults !== null)
      ? ApplyResults.fromPartial(object.applyResults)
      : undefined;
    message.build = object.build ?? "";
    message.logs = object.logs ?? "";
    return message;
  },
};

function createBaseResource(): Resource {
  return { name: "", terraformInfo: undefined, caiAssets: {}, intent: 0, state: 0 };
}

export const Resource: MessageFns<Resource> = {
  encode(message: Resource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.terraformInfo !== undefined) {
      ResourceTerraformInfo.encode(message.terraformInfo, writer.uint32(18).fork()).join();
    }
    Object.entries(message.caiAssets).forEach(([key, value]) => {
      Resource_CaiAssetsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.intent !== 0) {
      writer.uint32(32).int32(message.intent);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.terraformInfo = ResourceTerraformInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Resource_CaiAssetsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.caiAssets[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.intent = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      terraformInfo: isSet(object.terraformInfo) ? ResourceTerraformInfo.fromJSON(object.terraformInfo) : undefined,
      caiAssets: isObject(object.caiAssets)
        ? Object.entries(object.caiAssets).reduce<{ [key: string]: ResourceCAIInfo }>((acc, [key, value]) => {
          acc[key] = ResourceCAIInfo.fromJSON(value);
          return acc;
        }, {})
        : {},
      intent: isSet(object.intent) ? resource_IntentFromJSON(object.intent) : 0,
      state: isSet(object.state) ? resource_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Resource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.terraformInfo !== undefined) {
      obj.terraformInfo = ResourceTerraformInfo.toJSON(message.terraformInfo);
    }
    if (message.caiAssets) {
      const entries = Object.entries(message.caiAssets);
      if (entries.length > 0) {
        obj.caiAssets = {};
        entries.forEach(([k, v]) => {
          obj.caiAssets[k] = ResourceCAIInfo.toJSON(v);
        });
      }
    }
    if (message.intent !== 0) {
      obj.intent = resource_IntentToJSON(message.intent);
    }
    if (message.state !== 0) {
      obj.state = resource_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Resource>): Resource {
    return Resource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Resource>): Resource {
    const message = createBaseResource();
    message.name = object.name ?? "";
    message.terraformInfo = (object.terraformInfo !== undefined && object.terraformInfo !== null)
      ? ResourceTerraformInfo.fromPartial(object.terraformInfo)
      : undefined;
    message.caiAssets = Object.entries(object.caiAssets ?? {}).reduce<{ [key: string]: ResourceCAIInfo }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ResourceCAIInfo.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.intent = object.intent ?? 0;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseResource_CaiAssetsEntry(): Resource_CaiAssetsEntry {
  return { key: "", value: undefined };
}

export const Resource_CaiAssetsEntry: MessageFns<Resource_CaiAssetsEntry> = {
  encode(message: Resource_CaiAssetsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ResourceCAIInfo.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resource_CaiAssetsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResource_CaiAssetsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ResourceCAIInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resource_CaiAssetsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ResourceCAIInfo.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Resource_CaiAssetsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ResourceCAIInfo.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Resource_CaiAssetsEntry>): Resource_CaiAssetsEntry {
    return Resource_CaiAssetsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Resource_CaiAssetsEntry>): Resource_CaiAssetsEntry {
    const message = createBaseResource_CaiAssetsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ResourceCAIInfo.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseResourceTerraformInfo(): ResourceTerraformInfo {
  return { address: "", type: "", id: "" };
}

export const ResourceTerraformInfo: MessageFns<ResourceTerraformInfo> = {
  encode(message: ResourceTerraformInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceTerraformInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceTerraformInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceTerraformInfo {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: ResourceTerraformInfo): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceTerraformInfo>): ResourceTerraformInfo {
    return ResourceTerraformInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceTerraformInfo>): ResourceTerraformInfo {
    const message = createBaseResourceTerraformInfo();
    message.address = object.address ?? "";
    message.type = object.type ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseResourceCAIInfo(): ResourceCAIInfo {
  return { fullResourceName: "" };
}

export const ResourceCAIInfo: MessageFns<ResourceCAIInfo> = {
  encode(message: ResourceCAIInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullResourceName !== "") {
      writer.uint32(10).string(message.fullResourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceCAIInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceCAIInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fullResourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceCAIInfo {
    return { fullResourceName: isSet(object.fullResourceName) ? globalThis.String(object.fullResourceName) : "" };
  },

  toJSON(message: ResourceCAIInfo): unknown {
    const obj: any = {};
    if (message.fullResourceName !== "") {
      obj.fullResourceName = message.fullResourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceCAIInfo>): ResourceCAIInfo {
    return ResourceCAIInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceCAIInfo>): ResourceCAIInfo {
    const message = createBaseResourceCAIInfo();
    message.fullResourceName = object.fullResourceName ?? "";
    return message;
  },
};

function createBaseGetResourceRequest(): GetResourceRequest {
  return { name: "" };
}

export const GetResourceRequest: MessageFns<GetResourceRequest> = {
  encode(message: GetResourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetResourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResourceRequest>): GetResourceRequest {
    return GetResourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResourceRequest>): GetResourceRequest {
    const message = createBaseGetResourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListResourcesRequest(): ListResourcesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListResourcesRequest: MessageFns<ListResourcesRequest> = {
  encode(message: ListResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListResourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListResourcesRequest>): ListResourcesRequest {
    return ListResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListResourcesRequest>): ListResourcesRequest {
    const message = createBaseListResourcesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListResourcesResponse(): ListResourcesResponse {
  return { resources: [], nextPageToken: "", unreachable: [] };
}

export const ListResourcesResponse: MessageFns<ListResourcesResponse> = {
  encode(message: ListResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resources) {
      Resource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resources.push(Resource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResourcesResponse {
    return {
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => Resource.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListResourcesResponse): unknown {
    const obj: any = {};
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => Resource.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListResourcesResponse>): ListResourcesResponse {
    return ListResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListResourcesResponse>): ListResourcesResponse {
    const message = createBaseListResourcesResponse();
    message.resources = object.resources?.map((e) => Resource.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseStatefile(): Statefile {
  return { signedUri: "" };
}

export const Statefile: MessageFns<Statefile> = {
  encode(message: Statefile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signedUri !== "") {
      writer.uint32(10).string(message.signedUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Statefile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatefile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signedUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Statefile {
    return { signedUri: isSet(object.signedUri) ? globalThis.String(object.signedUri) : "" };
  },

  toJSON(message: Statefile): unknown {
    const obj: any = {};
    if (message.signedUri !== "") {
      obj.signedUri = message.signedUri;
    }
    return obj;
  },

  create(base?: DeepPartial<Statefile>): Statefile {
    return Statefile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Statefile>): Statefile {
    const message = createBaseStatefile();
    message.signedUri = object.signedUri ?? "";
    return message;
  },
};

function createBaseExportDeploymentStatefileRequest(): ExportDeploymentStatefileRequest {
  return { parent: "", draft: false };
}

export const ExportDeploymentStatefileRequest: MessageFns<ExportDeploymentStatefileRequest> = {
  encode(message: ExportDeploymentStatefileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.draft !== false) {
      writer.uint32(24).bool(message.draft);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDeploymentStatefileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDeploymentStatefileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.draft = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDeploymentStatefileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      draft: isSet(object.draft) ? globalThis.Boolean(object.draft) : false,
    };
  },

  toJSON(message: ExportDeploymentStatefileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.draft !== false) {
      obj.draft = message.draft;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDeploymentStatefileRequest>): ExportDeploymentStatefileRequest {
    return ExportDeploymentStatefileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDeploymentStatefileRequest>): ExportDeploymentStatefileRequest {
    const message = createBaseExportDeploymentStatefileRequest();
    message.parent = object.parent ?? "";
    message.draft = object.draft ?? false;
    return message;
  },
};

function createBaseExportRevisionStatefileRequest(): ExportRevisionStatefileRequest {
  return { parent: "" };
}

export const ExportRevisionStatefileRequest: MessageFns<ExportRevisionStatefileRequest> = {
  encode(message: ExportRevisionStatefileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportRevisionStatefileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportRevisionStatefileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportRevisionStatefileRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ExportRevisionStatefileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportRevisionStatefileRequest>): ExportRevisionStatefileRequest {
    return ExportRevisionStatefileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportRevisionStatefileRequest>): ExportRevisionStatefileRequest {
    const message = createBaseExportRevisionStatefileRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseImportStatefileRequest(): ImportStatefileRequest {
  return { parent: "", lockId: Long.ZERO, skipDraft: false };
}

export const ImportStatefileRequest: MessageFns<ImportStatefileRequest> = {
  encode(message: ImportStatefileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (!message.lockId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.lockId.toString());
    }
    if (message.skipDraft !== false) {
      writer.uint32(24).bool(message.skipDraft);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportStatefileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportStatefileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lockId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.skipDraft = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportStatefileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      lockId: isSet(object.lockId) ? Long.fromValue(object.lockId) : Long.ZERO,
      skipDraft: isSet(object.skipDraft) ? globalThis.Boolean(object.skipDraft) : false,
    };
  },

  toJSON(message: ImportStatefileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (!message.lockId.equals(Long.ZERO)) {
      obj.lockId = (message.lockId || Long.ZERO).toString();
    }
    if (message.skipDraft !== false) {
      obj.skipDraft = message.skipDraft;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportStatefileRequest>): ImportStatefileRequest {
    return ImportStatefileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportStatefileRequest>): ImportStatefileRequest {
    const message = createBaseImportStatefileRequest();
    message.parent = object.parent ?? "";
    message.lockId = (object.lockId !== undefined && object.lockId !== null)
      ? Long.fromValue(object.lockId)
      : Long.ZERO;
    message.skipDraft = object.skipDraft ?? false;
    return message;
  },
};

function createBaseDeleteStatefileRequest(): DeleteStatefileRequest {
  return { name: "", lockId: Long.ZERO };
}

export const DeleteStatefileRequest: MessageFns<DeleteStatefileRequest> = {
  encode(message: DeleteStatefileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.lockId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.lockId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteStatefileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStatefileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lockId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteStatefileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      lockId: isSet(object.lockId) ? Long.fromValue(object.lockId) : Long.ZERO,
    };
  },

  toJSON(message: DeleteStatefileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.lockId.equals(Long.ZERO)) {
      obj.lockId = (message.lockId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteStatefileRequest>): DeleteStatefileRequest {
    return DeleteStatefileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteStatefileRequest>): DeleteStatefileRequest {
    const message = createBaseDeleteStatefileRequest();
    message.name = object.name ?? "";
    message.lockId = (object.lockId !== undefined && object.lockId !== null)
      ? Long.fromValue(object.lockId)
      : Long.ZERO;
    return message;
  },
};

function createBaseLockDeploymentRequest(): LockDeploymentRequest {
  return { name: "" };
}

export const LockDeploymentRequest: MessageFns<LockDeploymentRequest> = {
  encode(message: LockDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LockDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: LockDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<LockDeploymentRequest>): LockDeploymentRequest {
    return LockDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LockDeploymentRequest>): LockDeploymentRequest {
    const message = createBaseLockDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUnlockDeploymentRequest(): UnlockDeploymentRequest {
  return { name: "", lockId: Long.ZERO };
}

export const UnlockDeploymentRequest: MessageFns<UnlockDeploymentRequest> = {
  encode(message: UnlockDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.lockId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.lockId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnlockDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lockId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnlockDeploymentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      lockId: isSet(object.lockId) ? Long.fromValue(object.lockId) : Long.ZERO,
    };
  },

  toJSON(message: UnlockDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.lockId.equals(Long.ZERO)) {
      obj.lockId = (message.lockId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<UnlockDeploymentRequest>): UnlockDeploymentRequest {
    return UnlockDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnlockDeploymentRequest>): UnlockDeploymentRequest {
    const message = createBaseUnlockDeploymentRequest();
    message.name = object.name ?? "";
    message.lockId = (object.lockId !== undefined && object.lockId !== null)
      ? Long.fromValue(object.lockId)
      : Long.ZERO;
    return message;
  },
};

function createBaseExportLockInfoRequest(): ExportLockInfoRequest {
  return { name: "" };
}

export const ExportLockInfoRequest: MessageFns<ExportLockInfoRequest> = {
  encode(message: ExportLockInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportLockInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportLockInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportLockInfoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ExportLockInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportLockInfoRequest>): ExportLockInfoRequest {
    return ExportLockInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportLockInfoRequest>): ExportLockInfoRequest {
    const message = createBaseExportLockInfoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLockInfo(): LockInfo {
  return { lockId: Long.ZERO, operation: "", info: "", who: "", version: "", createTime: undefined };
}

export const LockInfo: MessageFns<LockInfo> = {
  encode(message: LockInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.lockId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.lockId.toString());
    }
    if (message.operation !== "") {
      writer.uint32(18).string(message.operation);
    }
    if (message.info !== "") {
      writer.uint32(26).string(message.info);
    }
    if (message.who !== "") {
      writer.uint32(34).string(message.who);
    }
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LockInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.lockId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.info = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.who = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.version = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockInfo {
    return {
      lockId: isSet(object.lockId) ? Long.fromValue(object.lockId) : Long.ZERO,
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      info: isSet(object.info) ? globalThis.String(object.info) : "",
      who: isSet(object.who) ? globalThis.String(object.who) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: LockInfo): unknown {
    const obj: any = {};
    if (!message.lockId.equals(Long.ZERO)) {
      obj.lockId = (message.lockId || Long.ZERO).toString();
    }
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.who !== "") {
      obj.who = message.who;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<LockInfo>): LockInfo {
    return LockInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LockInfo>): LockInfo {
    const message = createBaseLockInfo();
    message.lockId = (object.lockId !== undefined && object.lockId !== null)
      ? Long.fromValue(object.lockId)
      : Long.ZERO;
    message.operation = object.operation ?? "";
    message.info = object.info ?? "";
    message.who = object.who ?? "";
    message.version = object.version ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBasePreview(): Preview {
  return {
    terraformBlueprint: undefined,
    name: "",
    createTime: undefined,
    labels: {},
    state: 0,
    deployment: "",
    previewMode: 0,
    serviceAccount: "",
    artifactsGcsBucket: undefined,
    workerPool: undefined,
    errorCode: 0,
    errorStatus: undefined,
    build: "",
    tfErrors: [],
    errorLogs: "",
    previewArtifacts: undefined,
    logs: "",
    tfVersion: "",
    tfVersionConstraint: undefined,
  };
}

export const Preview: MessageFns<Preview> = {
  encode(message: Preview, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.terraformBlueprint !== undefined) {
      TerraformBlueprint.encode(message.terraformBlueprint, writer.uint32(50).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Preview_LabelsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.deployment !== "") {
      writer.uint32(42).string(message.deployment);
    }
    if (message.previewMode !== 0) {
      writer.uint32(120).int32(message.previewMode);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(58).string(message.serviceAccount);
    }
    if (message.artifactsGcsBucket !== undefined) {
      writer.uint32(66).string(message.artifactsGcsBucket);
    }
    if (message.workerPool !== undefined) {
      writer.uint32(74).string(message.workerPool);
    }
    if (message.errorCode !== 0) {
      writer.uint32(80).int32(message.errorCode);
    }
    if (message.errorStatus !== undefined) {
      Status.encode(message.errorStatus, writer.uint32(90).fork()).join();
    }
    if (message.build !== "") {
      writer.uint32(98).string(message.build);
    }
    for (const v of message.tfErrors) {
      TerraformError.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.errorLogs !== "") {
      writer.uint32(114).string(message.errorLogs);
    }
    if (message.previewArtifacts !== undefined) {
      PreviewArtifacts.encode(message.previewArtifacts, writer.uint32(130).fork()).join();
    }
    if (message.logs !== "") {
      writer.uint32(138).string(message.logs);
    }
    if (message.tfVersion !== "") {
      writer.uint32(146).string(message.tfVersion);
    }
    if (message.tfVersionConstraint !== undefined) {
      writer.uint32(154).string(message.tfVersionConstraint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Preview {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.terraformBlueprint = TerraformBlueprint.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Preview_LabelsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.labels[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deployment = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.previewMode = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.artifactsGcsBucket = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.workerPool = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.errorCode = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.errorStatus = Status.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.build = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.tfErrors.push(TerraformError.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.errorLogs = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.previewArtifacts = PreviewArtifacts.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.logs = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.tfVersion = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.tfVersionConstraint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Preview {
    return {
      terraformBlueprint: isSet(object.terraformBlueprint)
        ? TerraformBlueprint.fromJSON(object.terraformBlueprint)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? preview_StateFromJSON(object.state) : 0,
      deployment: isSet(object.deployment) ? globalThis.String(object.deployment) : "",
      previewMode: isSet(object.previewMode) ? preview_PreviewModeFromJSON(object.previewMode) : 0,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      artifactsGcsBucket: isSet(object.artifactsGcsBucket) ? globalThis.String(object.artifactsGcsBucket) : undefined,
      workerPool: isSet(object.workerPool) ? globalThis.String(object.workerPool) : undefined,
      errorCode: isSet(object.errorCode) ? preview_ErrorCodeFromJSON(object.errorCode) : 0,
      errorStatus: isSet(object.errorStatus) ? Status.fromJSON(object.errorStatus) : undefined,
      build: isSet(object.build) ? globalThis.String(object.build) : "",
      tfErrors: globalThis.Array.isArray(object?.tfErrors)
        ? object.tfErrors.map((e: any) => TerraformError.fromJSON(e))
        : [],
      errorLogs: isSet(object.errorLogs) ? globalThis.String(object.errorLogs) : "",
      previewArtifacts: isSet(object.previewArtifacts) ? PreviewArtifacts.fromJSON(object.previewArtifacts) : undefined,
      logs: isSet(object.logs) ? globalThis.String(object.logs) : "",
      tfVersion: isSet(object.tfVersion) ? globalThis.String(object.tfVersion) : "",
      tfVersionConstraint: isSet(object.tfVersionConstraint)
        ? globalThis.String(object.tfVersionConstraint)
        : undefined,
    };
  },

  toJSON(message: Preview): unknown {
    const obj: any = {};
    if (message.terraformBlueprint !== undefined) {
      obj.terraformBlueprint = TerraformBlueprint.toJSON(message.terraformBlueprint);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = preview_StateToJSON(message.state);
    }
    if (message.deployment !== "") {
      obj.deployment = message.deployment;
    }
    if (message.previewMode !== 0) {
      obj.previewMode = preview_PreviewModeToJSON(message.previewMode);
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.artifactsGcsBucket !== undefined) {
      obj.artifactsGcsBucket = message.artifactsGcsBucket;
    }
    if (message.workerPool !== undefined) {
      obj.workerPool = message.workerPool;
    }
    if (message.errorCode !== 0) {
      obj.errorCode = preview_ErrorCodeToJSON(message.errorCode);
    }
    if (message.errorStatus !== undefined) {
      obj.errorStatus = Status.toJSON(message.errorStatus);
    }
    if (message.build !== "") {
      obj.build = message.build;
    }
    if (message.tfErrors?.length) {
      obj.tfErrors = message.tfErrors.map((e) => TerraformError.toJSON(e));
    }
    if (message.errorLogs !== "") {
      obj.errorLogs = message.errorLogs;
    }
    if (message.previewArtifacts !== undefined) {
      obj.previewArtifacts = PreviewArtifacts.toJSON(message.previewArtifacts);
    }
    if (message.logs !== "") {
      obj.logs = message.logs;
    }
    if (message.tfVersion !== "") {
      obj.tfVersion = message.tfVersion;
    }
    if (message.tfVersionConstraint !== undefined) {
      obj.tfVersionConstraint = message.tfVersionConstraint;
    }
    return obj;
  },

  create(base?: DeepPartial<Preview>): Preview {
    return Preview.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Preview>): Preview {
    const message = createBasePreview();
    message.terraformBlueprint = (object.terraformBlueprint !== undefined && object.terraformBlueprint !== null)
      ? TerraformBlueprint.fromPartial(object.terraformBlueprint)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    message.deployment = object.deployment ?? "";
    message.previewMode = object.previewMode ?? 0;
    message.serviceAccount = object.serviceAccount ?? "";
    message.artifactsGcsBucket = object.artifactsGcsBucket ?? undefined;
    message.workerPool = object.workerPool ?? undefined;
    message.errorCode = object.errorCode ?? 0;
    message.errorStatus = (object.errorStatus !== undefined && object.errorStatus !== null)
      ? Status.fromPartial(object.errorStatus)
      : undefined;
    message.build = object.build ?? "";
    message.tfErrors = object.tfErrors?.map((e) => TerraformError.fromPartial(e)) || [];
    message.errorLogs = object.errorLogs ?? "";
    message.previewArtifacts = (object.previewArtifacts !== undefined && object.previewArtifacts !== null)
      ? PreviewArtifacts.fromPartial(object.previewArtifacts)
      : undefined;
    message.logs = object.logs ?? "";
    message.tfVersion = object.tfVersion ?? "";
    message.tfVersionConstraint = object.tfVersionConstraint ?? undefined;
    return message;
  },
};

function createBasePreview_LabelsEntry(): Preview_LabelsEntry {
  return { key: "", value: "" };
}

export const Preview_LabelsEntry: MessageFns<Preview_LabelsEntry> = {
  encode(message: Preview_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Preview_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreview_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Preview_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Preview_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Preview_LabelsEntry>): Preview_LabelsEntry {
    return Preview_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Preview_LabelsEntry>): Preview_LabelsEntry {
    const message = createBasePreview_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBasePreviewOperationMetadata(): PreviewOperationMetadata {
  return { step: 0, previewArtifacts: undefined, logs: "", build: "" };
}

export const PreviewOperationMetadata: MessageFns<PreviewOperationMetadata> = {
  encode(message: PreviewOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.step !== 0) {
      writer.uint32(8).int32(message.step);
    }
    if (message.previewArtifacts !== undefined) {
      PreviewArtifacts.encode(message.previewArtifacts, writer.uint32(18).fork()).join();
    }
    if (message.logs !== "") {
      writer.uint32(26).string(message.logs);
    }
    if (message.build !== "") {
      writer.uint32(34).string(message.build);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreviewOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreviewOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.step = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.previewArtifacts = PreviewArtifacts.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logs = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.build = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreviewOperationMetadata {
    return {
      step: isSet(object.step) ? previewOperationMetadata_PreviewStepFromJSON(object.step) : 0,
      previewArtifacts: isSet(object.previewArtifacts) ? PreviewArtifacts.fromJSON(object.previewArtifacts) : undefined,
      logs: isSet(object.logs) ? globalThis.String(object.logs) : "",
      build: isSet(object.build) ? globalThis.String(object.build) : "",
    };
  },

  toJSON(message: PreviewOperationMetadata): unknown {
    const obj: any = {};
    if (message.step !== 0) {
      obj.step = previewOperationMetadata_PreviewStepToJSON(message.step);
    }
    if (message.previewArtifacts !== undefined) {
      obj.previewArtifacts = PreviewArtifacts.toJSON(message.previewArtifacts);
    }
    if (message.logs !== "") {
      obj.logs = message.logs;
    }
    if (message.build !== "") {
      obj.build = message.build;
    }
    return obj;
  },

  create(base?: DeepPartial<PreviewOperationMetadata>): PreviewOperationMetadata {
    return PreviewOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PreviewOperationMetadata>): PreviewOperationMetadata {
    const message = createBasePreviewOperationMetadata();
    message.step = object.step ?? 0;
    message.previewArtifacts = (object.previewArtifacts !== undefined && object.previewArtifacts !== null)
      ? PreviewArtifacts.fromPartial(object.previewArtifacts)
      : undefined;
    message.logs = object.logs ?? "";
    message.build = object.build ?? "";
    return message;
  },
};

function createBasePreviewArtifacts(): PreviewArtifacts {
  return { content: "", artifacts: "" };
}

export const PreviewArtifacts: MessageFns<PreviewArtifacts> = {
  encode(message: PreviewArtifacts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    if (message.artifacts !== "") {
      writer.uint32(18).string(message.artifacts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreviewArtifacts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreviewArtifacts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artifacts = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreviewArtifacts {
    return {
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      artifacts: isSet(object.artifacts) ? globalThis.String(object.artifacts) : "",
    };
  },

  toJSON(message: PreviewArtifacts): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.artifacts !== "") {
      obj.artifacts = message.artifacts;
    }
    return obj;
  },

  create(base?: DeepPartial<PreviewArtifacts>): PreviewArtifacts {
    return PreviewArtifacts.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PreviewArtifacts>): PreviewArtifacts {
    const message = createBasePreviewArtifacts();
    message.content = object.content ?? "";
    message.artifacts = object.artifacts ?? "";
    return message;
  },
};

function createBaseCreatePreviewRequest(): CreatePreviewRequest {
  return { parent: "", previewId: "", preview: undefined, requestId: "" };
}

export const CreatePreviewRequest: MessageFns<CreatePreviewRequest> = {
  encode(message: CreatePreviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.previewId !== "") {
      writer.uint32(18).string(message.previewId);
    }
    if (message.preview !== undefined) {
      Preview.encode(message.preview, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePreviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePreviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.previewId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preview = Preview.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePreviewRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      previewId: isSet(object.previewId) ? globalThis.String(object.previewId) : "",
      preview: isSet(object.preview) ? Preview.fromJSON(object.preview) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreatePreviewRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.previewId !== "") {
      obj.previewId = message.previewId;
    }
    if (message.preview !== undefined) {
      obj.preview = Preview.toJSON(message.preview);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePreviewRequest>): CreatePreviewRequest {
    return CreatePreviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePreviewRequest>): CreatePreviewRequest {
    const message = createBaseCreatePreviewRequest();
    message.parent = object.parent ?? "";
    message.previewId = object.previewId ?? "";
    message.preview = (object.preview !== undefined && object.preview !== null)
      ? Preview.fromPartial(object.preview)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetPreviewRequest(): GetPreviewRequest {
  return { name: "" };
}

export const GetPreviewRequest: MessageFns<GetPreviewRequest> = {
  encode(message: GetPreviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPreviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPreviewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPreviewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPreviewRequest>): GetPreviewRequest {
    return GetPreviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPreviewRequest>): GetPreviewRequest {
    const message = createBaseGetPreviewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPreviewsRequest(): ListPreviewsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListPreviewsRequest: MessageFns<ListPreviewsRequest> = {
  encode(message: ListPreviewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPreviewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPreviewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPreviewsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListPreviewsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPreviewsRequest>): ListPreviewsRequest {
    return ListPreviewsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPreviewsRequest>): ListPreviewsRequest {
    const message = createBaseListPreviewsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListPreviewsResponse(): ListPreviewsResponse {
  return { previews: [], nextPageToken: "", unreachable: [] };
}

export const ListPreviewsResponse: MessageFns<ListPreviewsResponse> = {
  encode(message: ListPreviewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.previews) {
      Preview.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPreviewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPreviewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.previews.push(Preview.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPreviewsResponse {
    return {
      previews: globalThis.Array.isArray(object?.previews) ? object.previews.map((e: any) => Preview.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListPreviewsResponse): unknown {
    const obj: any = {};
    if (message.previews?.length) {
      obj.previews = message.previews.map((e) => Preview.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPreviewsResponse>): ListPreviewsResponse {
    return ListPreviewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPreviewsResponse>): ListPreviewsResponse {
    const message = createBaseListPreviewsResponse();
    message.previews = object.previews?.map((e) => Preview.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeletePreviewRequest(): DeletePreviewRequest {
  return { name: "", requestId: "" };
}

export const DeletePreviewRequest: MessageFns<DeletePreviewRequest> = {
  encode(message: DeletePreviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePreviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePreviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePreviewRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeletePreviewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePreviewRequest>): DeletePreviewRequest {
    return DeletePreviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePreviewRequest>): DeletePreviewRequest {
    const message = createBaseDeletePreviewRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseExportPreviewResultRequest(): ExportPreviewResultRequest {
  return { parent: "" };
}

export const ExportPreviewResultRequest: MessageFns<ExportPreviewResultRequest> = {
  encode(message: ExportPreviewResultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportPreviewResultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportPreviewResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportPreviewResultRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ExportPreviewResultRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportPreviewResultRequest>): ExportPreviewResultRequest {
    return ExportPreviewResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportPreviewResultRequest>): ExportPreviewResultRequest {
    const message = createBaseExportPreviewResultRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseExportPreviewResultResponse(): ExportPreviewResultResponse {
  return { result: undefined };
}

export const ExportPreviewResultResponse: MessageFns<ExportPreviewResultResponse> = {
  encode(message: ExportPreviewResultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      PreviewResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportPreviewResultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportPreviewResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = PreviewResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportPreviewResultResponse {
    return { result: isSet(object.result) ? PreviewResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: ExportPreviewResultResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = PreviewResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportPreviewResultResponse>): ExportPreviewResultResponse {
    return ExportPreviewResultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportPreviewResultResponse>): ExportPreviewResultResponse {
    const message = createBaseExportPreviewResultResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? PreviewResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBasePreviewResult(): PreviewResult {
  return { binarySignedUri: "", jsonSignedUri: "" };
}

export const PreviewResult: MessageFns<PreviewResult> = {
  encode(message: PreviewResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.binarySignedUri !== "") {
      writer.uint32(10).string(message.binarySignedUri);
    }
    if (message.jsonSignedUri !== "") {
      writer.uint32(18).string(message.jsonSignedUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreviewResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreviewResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.binarySignedUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jsonSignedUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreviewResult {
    return {
      binarySignedUri: isSet(object.binarySignedUri) ? globalThis.String(object.binarySignedUri) : "",
      jsonSignedUri: isSet(object.jsonSignedUri) ? globalThis.String(object.jsonSignedUri) : "",
    };
  },

  toJSON(message: PreviewResult): unknown {
    const obj: any = {};
    if (message.binarySignedUri !== "") {
      obj.binarySignedUri = message.binarySignedUri;
    }
    if (message.jsonSignedUri !== "") {
      obj.jsonSignedUri = message.jsonSignedUri;
    }
    return obj;
  },

  create(base?: DeepPartial<PreviewResult>): PreviewResult {
    return PreviewResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PreviewResult>): PreviewResult {
    const message = createBasePreviewResult();
    message.binarySignedUri = object.binarySignedUri ?? "";
    message.jsonSignedUri = object.jsonSignedUri ?? "";
    return message;
  },
};

function createBaseGetTerraformVersionRequest(): GetTerraformVersionRequest {
  return { name: "" };
}

export const GetTerraformVersionRequest: MessageFns<GetTerraformVersionRequest> = {
  encode(message: GetTerraformVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTerraformVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTerraformVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTerraformVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTerraformVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTerraformVersionRequest>): GetTerraformVersionRequest {
    return GetTerraformVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTerraformVersionRequest>): GetTerraformVersionRequest {
    const message = createBaseGetTerraformVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTerraformVersionsRequest(): ListTerraformVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListTerraformVersionsRequest: MessageFns<ListTerraformVersionsRequest> = {
  encode(message: ListTerraformVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTerraformVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTerraformVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTerraformVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListTerraformVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTerraformVersionsRequest>): ListTerraformVersionsRequest {
    return ListTerraformVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTerraformVersionsRequest>): ListTerraformVersionsRequest {
    const message = createBaseListTerraformVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListTerraformVersionsResponse(): ListTerraformVersionsResponse {
  return { terraformVersions: [], nextPageToken: "", unreachable: [] };
}

export const ListTerraformVersionsResponse: MessageFns<ListTerraformVersionsResponse> = {
  encode(message: ListTerraformVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.terraformVersions) {
      TerraformVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTerraformVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTerraformVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.terraformVersions.push(TerraformVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTerraformVersionsResponse {
    return {
      terraformVersions: globalThis.Array.isArray(object?.terraformVersions)
        ? object.terraformVersions.map((e: any) => TerraformVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListTerraformVersionsResponse): unknown {
    const obj: any = {};
    if (message.terraformVersions?.length) {
      obj.terraformVersions = message.terraformVersions.map((e) => TerraformVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTerraformVersionsResponse>): ListTerraformVersionsResponse {
    return ListTerraformVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTerraformVersionsResponse>): ListTerraformVersionsResponse {
    const message = createBaseListTerraformVersionsResponse();
    message.terraformVersions = object.terraformVersions?.map((e) => TerraformVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseTerraformVersion(): TerraformVersion {
  return { name: "", state: 0, supportTime: undefined, deprecateTime: undefined, obsoleteTime: undefined };
}

export const TerraformVersion: MessageFns<TerraformVersion> = {
  encode(message: TerraformVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.supportTime !== undefined) {
      Timestamp.encode(toTimestamp(message.supportTime), writer.uint32(26).fork()).join();
    }
    if (message.deprecateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deprecateTime), writer.uint32(34).fork()).join();
    }
    if (message.obsoleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.obsoleteTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerraformVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerraformVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.supportTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deprecateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.obsoleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerraformVersion {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? terraformVersion_StateFromJSON(object.state) : 0,
      supportTime: isSet(object.supportTime) ? fromJsonTimestamp(object.supportTime) : undefined,
      deprecateTime: isSet(object.deprecateTime) ? fromJsonTimestamp(object.deprecateTime) : undefined,
      obsoleteTime: isSet(object.obsoleteTime) ? fromJsonTimestamp(object.obsoleteTime) : undefined,
    };
  },

  toJSON(message: TerraformVersion): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = terraformVersion_StateToJSON(message.state);
    }
    if (message.supportTime !== undefined) {
      obj.supportTime = message.supportTime.toISOString();
    }
    if (message.deprecateTime !== undefined) {
      obj.deprecateTime = message.deprecateTime.toISOString();
    }
    if (message.obsoleteTime !== undefined) {
      obj.obsoleteTime = message.obsoleteTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<TerraformVersion>): TerraformVersion {
    return TerraformVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerraformVersion>): TerraformVersion {
    const message = createBaseTerraformVersion();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.supportTime = object.supportTime ?? undefined;
    message.deprecateTime = object.deprecateTime ?? undefined;
    message.obsoleteTime = object.obsoleteTime ?? undefined;
    return message;
  },
};

/**
 * Infrastructure Manager is a managed service that automates the deployment and
 * management of Google Cloud infrastructure resources.
 */
export type ConfigDefinition = typeof ConfigDefinition;
export const ConfigDefinition = {
  name: "Config",
  fullName: "google.cloud.config.v1.Config",
  methods: {
    /**
     * Lists [Deployment][google.cloud.config.v1.Deployment]s in a given project
     * and location.
     */
    listDeployments: {
      name: "ListDeployments",
      requestType: ListDeploymentsRequest,
      requestStream: false,
      responseType: ListDeploymentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a [Deployment][google.cloud.config.v1.Deployment]. */
    getDeployment: {
      name: "GetDeployment",
      requestType: GetDeploymentRequest,
      requestStream: false,
      responseType: Deployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a [Deployment][google.cloud.config.v1.Deployment]. */
    createDeployment: {
      name: "CreateDeployment",
      requestType: CreateDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              10,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a [Deployment][google.cloud.config.v1.Deployment]. */
    updateDeployment: {
      name: "UpdateDeployment",
      requestType: UpdateDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              10,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              50,
              58,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Deployment][google.cloud.config.v1.Deployment]. */
    deleteDeployment: {
      name: "DeleteDeployment",
      requestType: DeleteDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists [Revision][google.cloud.config.v1.Revision]s of a deployment. */
    listRevisions: {
      name: "ListRevisions",
      requestType: ListRevisionsRequest,
      requestStream: false,
      responseType: ListRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a [Revision][google.cloud.config.v1.Revision]. */
    getRevision: {
      name: "GetRevision",
      requestType: GetRevisionRequest,
      requestStream: false,
      responseType: Revision,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets details about a [Resource][google.cloud.config.v1.Resource] deployed
     * by Infra Manager.
     */
    getResource: {
      name: "GetResource",
      requestType: GetResourceRequest,
      requestStream: false,
      responseType: Resource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists [Resource][google.cloud.config.v1.Resource]s in a given revision. */
    listResources: {
      name: "ListResources",
      requestType: ListResourcesRequest,
      requestStream: false,
      responseType: ListResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Exports Terraform state file from a given deployment. */
    exportDeploymentStatefile: {
      name: "ExportDeploymentStatefile",
      requestType: ExportDeploymentStatefileRequest,
      requestStream: false,
      responseType: Statefile,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              83,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Exports Terraform state file from a given revision. */
    exportRevisionStatefile: {
      name: "ExportRevisionStatefile",
      requestType: ExportRevisionStatefileRequest,
      requestStream: false,
      responseType: Statefile,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              78,
              58,
              1,
              42,
              34,
              73,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              83,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Imports Terraform state file in a given deployment. The state file does not
     * take effect until the Deployment has been unlocked.
     */
    importStatefile: {
      name: "ImportStatefile",
      requestType: ImportStatefileRequest,
      requestStream: false,
      responseType: Statefile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 108, 111, 99, 107, 95, 105, 100])],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              83,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes Terraform state file in a given deployment. */
    deleteStatefile: {
      name: "DeleteStatefile",
      requestType: DeleteStatefileRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
              83,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Locks a deployment. */
    lockDeployment: {
      name: "LockDeployment",
      requestType: LockDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              108,
              111,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Unlocks a locked deployment. */
    unlockDeployment: {
      name: "UnlockDeployment",
      requestType: UnlockDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 110, 97, 109, 101, 44, 108, 111, 99, 107, 95, 105, 100])],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              108,
              111,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Exports the lock info on a locked deployment. */
    exportLockInfo: {
      name: "ExportLockInfo",
      requestType: ExportLockInfoRequest,
      requestStream: false,
      responseType: LockInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              76,
              111,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Creates a [Preview][google.cloud.config.v1.Preview]. */
    createPreview: {
      name: "CreatePreview",
      requestType: CreatePreviewRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              114,
              101,
              118,
              105,
              101,
              119,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 112, 114, 101, 118, 105, 101, 119])],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a [Preview][google.cloud.config.v1.Preview]. */
    getPreview: {
      name: "GetPreview",
      requestType: GetPreviewRequest,
      requestStream: false,
      responseType: Preview,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists [Preview][google.cloud.config.v1.Preview]s in a given project and
     * location.
     */
    listPreviews: {
      name: "ListPreviews",
      requestType: ListPreviewsRequest,
      requestStream: false,
      responseType: ListPreviewsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Preview][google.cloud.config.v1.Preview]. */
    deletePreview: {
      name: "DeletePreview",
      requestType: DeletePreviewRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              114,
              101,
              118,
              105,
              101,
              119,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Export [Preview][google.cloud.config.v1.Preview] results. */
    exportPreviewResult: {
      name: "ExportPreviewResult",
      requestType: ExportPreviewResultRequest,
      requestStream: false,
      responseType: ExportPreviewResultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Lists [TerraformVersion][google.cloud.config.v1.TerraformVersion]s in a
     * given project and location.
     */
    listTerraformVersions: {
      name: "ListTerraformVersions",
      requestType: ListTerraformVersionsRequest,
      requestStream: false,
      responseType: ListTerraformVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              114,
              114,
              97,
              102,
              111,
              114,
              109,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets details about a
     * [TerraformVersion][google.cloud.config.v1.TerraformVersion].
     */
    getTerraformVersion: {
      name: "GetTerraformVersion",
      requestType: GetTerraformVersionRequest,
      requestStream: false,
      responseType: TerraformVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              114,
              114,
              97,
              102,
              111,
              114,
              109,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConfigServiceImplementation<CallContextExt = {}> {
  /**
   * Lists [Deployment][google.cloud.config.v1.Deployment]s in a given project
   * and location.
   */
  listDeployments(
    request: ListDeploymentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeploymentsResponse>>;
  /** Gets details about a [Deployment][google.cloud.config.v1.Deployment]. */
  getDeployment(request: GetDeploymentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Deployment>>;
  /** Creates a [Deployment][google.cloud.config.v1.Deployment]. */
  createDeployment(
    request: CreateDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a [Deployment][google.cloud.config.v1.Deployment]. */
  updateDeployment(
    request: UpdateDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a [Deployment][google.cloud.config.v1.Deployment]. */
  deleteDeployment(
    request: DeleteDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists [Revision][google.cloud.config.v1.Revision]s of a deployment. */
  listRevisions(
    request: ListRevisionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRevisionsResponse>>;
  /** Gets details about a [Revision][google.cloud.config.v1.Revision]. */
  getRevision(request: GetRevisionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Revision>>;
  /**
   * Gets details about a [Resource][google.cloud.config.v1.Resource] deployed
   * by Infra Manager.
   */
  getResource(request: GetResourceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Resource>>;
  /** Lists [Resource][google.cloud.config.v1.Resource]s in a given revision. */
  listResources(
    request: ListResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListResourcesResponse>>;
  /** Exports Terraform state file from a given deployment. */
  exportDeploymentStatefile(
    request: ExportDeploymentStatefileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Statefile>>;
  /** Exports Terraform state file from a given revision. */
  exportRevisionStatefile(
    request: ExportRevisionStatefileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Statefile>>;
  /**
   * Imports Terraform state file in a given deployment. The state file does not
   * take effect until the Deployment has been unlocked.
   */
  importStatefile(
    request: ImportStatefileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Statefile>>;
  /** Deletes Terraform state file in a given deployment. */
  deleteStatefile(request: DeleteStatefileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Locks a deployment. */
  lockDeployment(
    request: LockDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Unlocks a locked deployment. */
  unlockDeployment(
    request: UnlockDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Exports the lock info on a locked deployment. */
  exportLockInfo(request: ExportLockInfoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LockInfo>>;
  /** Creates a [Preview][google.cloud.config.v1.Preview]. */
  createPreview(request: CreatePreviewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets details about a [Preview][google.cloud.config.v1.Preview]. */
  getPreview(request: GetPreviewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Preview>>;
  /**
   * Lists [Preview][google.cloud.config.v1.Preview]s in a given project and
   * location.
   */
  listPreviews(
    request: ListPreviewsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPreviewsResponse>>;
  /** Deletes a [Preview][google.cloud.config.v1.Preview]. */
  deletePreview(request: DeletePreviewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Export [Preview][google.cloud.config.v1.Preview] results. */
  exportPreviewResult(
    request: ExportPreviewResultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExportPreviewResultResponse>>;
  /**
   * Lists [TerraformVersion][google.cloud.config.v1.TerraformVersion]s in a
   * given project and location.
   */
  listTerraformVersions(
    request: ListTerraformVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTerraformVersionsResponse>>;
  /**
   * Gets details about a
   * [TerraformVersion][google.cloud.config.v1.TerraformVersion].
   */
  getTerraformVersion(
    request: GetTerraformVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TerraformVersion>>;
}

export interface ConfigClient<CallOptionsExt = {}> {
  /**
   * Lists [Deployment][google.cloud.config.v1.Deployment]s in a given project
   * and location.
   */
  listDeployments(
    request: DeepPartial<ListDeploymentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeploymentsResponse>;
  /** Gets details about a [Deployment][google.cloud.config.v1.Deployment]. */
  getDeployment(
    request: DeepPartial<GetDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Deployment>;
  /** Creates a [Deployment][google.cloud.config.v1.Deployment]. */
  createDeployment(
    request: DeepPartial<CreateDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a [Deployment][google.cloud.config.v1.Deployment]. */
  updateDeployment(
    request: DeepPartial<UpdateDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a [Deployment][google.cloud.config.v1.Deployment]. */
  deleteDeployment(
    request: DeepPartial<DeleteDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists [Revision][google.cloud.config.v1.Revision]s of a deployment. */
  listRevisions(
    request: DeepPartial<ListRevisionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRevisionsResponse>;
  /** Gets details about a [Revision][google.cloud.config.v1.Revision]. */
  getRevision(request: DeepPartial<GetRevisionRequest>, options?: CallOptions & CallOptionsExt): Promise<Revision>;
  /**
   * Gets details about a [Resource][google.cloud.config.v1.Resource] deployed
   * by Infra Manager.
   */
  getResource(request: DeepPartial<GetResourceRequest>, options?: CallOptions & CallOptionsExt): Promise<Resource>;
  /** Lists [Resource][google.cloud.config.v1.Resource]s in a given revision. */
  listResources(
    request: DeepPartial<ListResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListResourcesResponse>;
  /** Exports Terraform state file from a given deployment. */
  exportDeploymentStatefile(
    request: DeepPartial<ExportDeploymentStatefileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Statefile>;
  /** Exports Terraform state file from a given revision. */
  exportRevisionStatefile(
    request: DeepPartial<ExportRevisionStatefileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Statefile>;
  /**
   * Imports Terraform state file in a given deployment. The state file does not
   * take effect until the Deployment has been unlocked.
   */
  importStatefile(
    request: DeepPartial<ImportStatefileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Statefile>;
  /** Deletes Terraform state file in a given deployment. */
  deleteStatefile(request: DeepPartial<DeleteStatefileRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Locks a deployment. */
  lockDeployment(
    request: DeepPartial<LockDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Unlocks a locked deployment. */
  unlockDeployment(
    request: DeepPartial<UnlockDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Exports the lock info on a locked deployment. */
  exportLockInfo(
    request: DeepPartial<ExportLockInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LockInfo>;
  /** Creates a [Preview][google.cloud.config.v1.Preview]. */
  createPreview(request: DeepPartial<CreatePreviewRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets details about a [Preview][google.cloud.config.v1.Preview]. */
  getPreview(request: DeepPartial<GetPreviewRequest>, options?: CallOptions & CallOptionsExt): Promise<Preview>;
  /**
   * Lists [Preview][google.cloud.config.v1.Preview]s in a given project and
   * location.
   */
  listPreviews(
    request: DeepPartial<ListPreviewsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPreviewsResponse>;
  /** Deletes a [Preview][google.cloud.config.v1.Preview]. */
  deletePreview(request: DeepPartial<DeletePreviewRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Export [Preview][google.cloud.config.v1.Preview] results. */
  exportPreviewResult(
    request: DeepPartial<ExportPreviewResultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExportPreviewResultResponse>;
  /**
   * Lists [TerraformVersion][google.cloud.config.v1.TerraformVersion]s in a
   * given project and location.
   */
  listTerraformVersions(
    request: DeepPartial<ListTerraformVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTerraformVersionsResponse>;
  /**
   * Gets details about a
   * [TerraformVersion][google.cloud.config.v1.TerraformVersion].
   */
  getTerraformVersion(
    request: DeepPartial<GetTerraformVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TerraformVersion>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
