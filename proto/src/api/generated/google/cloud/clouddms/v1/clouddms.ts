// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/clouddms/v1/clouddms.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ConnectionProfile, MigrationJob, PrivateConnection } from "./clouddms_resources.js";
import {
  BackgroundJobLogEntry,
  ConversionWorkspace,
  DatabaseEntity,
  ImportRulesFileFormat,
  importRulesFileFormatFromJSON,
  importRulesFileFormatToJSON,
  MappingRule,
} from "./conversionworkspace_resources.js";

export const protobufPackage = "google.cloud.clouddms.v1";

/** AIP-157 Partial Response view for Database Entity. */
export enum DatabaseEntityView {
  /** DATABASE_ENTITY_VIEW_UNSPECIFIED - Unspecified view. Defaults to basic view. */
  DATABASE_ENTITY_VIEW_UNSPECIFIED = 0,
  /** DATABASE_ENTITY_VIEW_BASIC - Default view. Does not return DDLs or Issues. */
  DATABASE_ENTITY_VIEW_BASIC = 1,
  /** DATABASE_ENTITY_VIEW_FULL - Return full entity details including mappings, ddl and issues. */
  DATABASE_ENTITY_VIEW_FULL = 2,
  /**
   * DATABASE_ENTITY_VIEW_ROOT_SUMMARY - Top-most (Database, Schema) nodes which are returned contains summary
   * details for their decendents such as the number of entities per type and
   * issues rollups. When this view is used, only a single page of result is
   * returned and the page_size property of the request is ignored. The
   * returned page will only include the top-most node types.
   */
  DATABASE_ENTITY_VIEW_ROOT_SUMMARY = 3,
  UNRECOGNIZED = -1,
}

export function databaseEntityViewFromJSON(object: any): DatabaseEntityView {
  switch (object) {
    case 0:
    case "DATABASE_ENTITY_VIEW_UNSPECIFIED":
      return DatabaseEntityView.DATABASE_ENTITY_VIEW_UNSPECIFIED;
    case 1:
    case "DATABASE_ENTITY_VIEW_BASIC":
      return DatabaseEntityView.DATABASE_ENTITY_VIEW_BASIC;
    case 2:
    case "DATABASE_ENTITY_VIEW_FULL":
      return DatabaseEntityView.DATABASE_ENTITY_VIEW_FULL;
    case 3:
    case "DATABASE_ENTITY_VIEW_ROOT_SUMMARY":
      return DatabaseEntityView.DATABASE_ENTITY_VIEW_ROOT_SUMMARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseEntityView.UNRECOGNIZED;
  }
}

export function databaseEntityViewToJSON(object: DatabaseEntityView): string {
  switch (object) {
    case DatabaseEntityView.DATABASE_ENTITY_VIEW_UNSPECIFIED:
      return "DATABASE_ENTITY_VIEW_UNSPECIFIED";
    case DatabaseEntityView.DATABASE_ENTITY_VIEW_BASIC:
      return "DATABASE_ENTITY_VIEW_BASIC";
    case DatabaseEntityView.DATABASE_ENTITY_VIEW_FULL:
      return "DATABASE_ENTITY_VIEW_FULL";
    case DatabaseEntityView.DATABASE_ENTITY_VIEW_ROOT_SUMMARY:
      return "DATABASE_ENTITY_VIEW_ROOT_SUMMARY";
    case DatabaseEntityView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Retrieves a list of all migration jobs in a given project and location. */
export interface ListMigrationJobsRequest {
  /** Required. The parent which owns this collection of migrationJobs. */
  parent: string;
  /**
   * The maximum number of migration jobs to return. The service may return
   * fewer than this value. If unspecified, at most 50 migration jobs will be
   * returned. The maximum value is 1000; values above 1000 are coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * The nextPageToken value received in the previous call to
   * migrationJobs.list, used in the subsequent request to retrieve the next
   * page of results. On first call this should be left blank. When paginating,
   * all other parameters provided to migrationJobs.list must match the call
   * that provided the page token.
   */
  pageToken: string;
  /**
   * A filter expression that filters migration jobs listed in the response.
   * The expression must specify the field name, a comparison operator, and the
   * value that you want to use for filtering. The value must be a string,
   * a number, or a boolean. The comparison operator must be
   * either =, !=, >, or <. For example, list migration jobs created this year
   * by specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z.**
   * You can also filter nested fields. For example, you could specify
   * **reverseSshConnectivity.vmIp = "1.2.3.4"** to select all migration
   * jobs connecting through the specific SSH tunnel bastion.
   */
  filter: string;
  /**
   * Sort the results based on the migration job name.
   * Valid values are: "name", "name asc", and "name desc".
   */
  orderBy: string;
}

/** Response message for 'ListMigrationJobs' request. */
export interface ListMigrationJobsResponse {
  /** The list of migration jobs objects. */
  migrationJobs: MigrationJob[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for 'GetMigrationJob' request. */
export interface GetMigrationJobRequest {
  /** Required. Name of the migration job resource to get. */
  name: string;
}

/**
 * Request message to create a new Database Migration Service migration job
 * in the specified project and region.
 */
export interface CreateMigrationJobRequest {
  /** Required. The parent which owns this collection of migration jobs. */
  parent: string;
  /** Required. The ID of the instance to create. */
  migrationJobId: string;
  /**
   * Required. Represents a [migration
   * job](https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs)
   * object.
   */
  migrationJob:
    | MigrationJob
    | undefined;
  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message for 'UpdateMigrationJob' request. */
export interface UpdateMigrationJobRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten by the
   * update in the conversion workspace resource.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The migration job parameters to update. */
  migrationJob:
    | MigrationJob
    | undefined;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message for 'DeleteMigrationJob' request. */
export interface DeleteMigrationJobRequest {
  /** Required. Name of the migration job resource to delete. */
  name: string;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
  /**
   * The destination CloudSQL connection profile is always deleted with the
   * migration job. In case of force delete, the destination CloudSQL replica
   * database is also deleted.
   */
  force: boolean;
}

/** Request message for 'StartMigrationJob' request. */
export interface StartMigrationJobRequest {
  /** Name of the migration job resource to start. */
  name: string;
  /**
   * Optional. Start the migration job without running prior configuration
   * verification. Defaults to `false`.
   */
  skipValidation: boolean;
}

/** Request message for 'StopMigrationJob' request. */
export interface StopMigrationJobRequest {
  /** Name of the migration job resource to stop. */
  name: string;
}

/** Request message for 'ResumeMigrationJob' request. */
export interface ResumeMigrationJobRequest {
  /** Name of the migration job resource to resume. */
  name: string;
}

/** Request message for 'PromoteMigrationJob' request. */
export interface PromoteMigrationJobRequest {
  /** Name of the migration job resource to promote. */
  name: string;
}

/** Request message for 'VerifyMigrationJob' request. */
export interface VerifyMigrationJobRequest {
  /** Name of the migration job resource to verify. */
  name: string;
  /**
   * Optional. Field mask is used to specify the changed fields to be verified.
   * It will not update the migration job.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. The changed migration job parameters to verify.
   * It will not update the migration job.
   */
  migrationJob: MigrationJob | undefined;
}

/** Request message for 'RestartMigrationJob' request. */
export interface RestartMigrationJobRequest {
  /** Name of the migration job resource to restart. */
  name: string;
  /**
   * Optional. Restart the migration job without running prior configuration
   * verification. Defaults to `false`.
   */
  skipValidation: boolean;
}

/** Request message for 'GenerateSshScript' request. */
export interface GenerateSshScriptRequest {
  /** Name of the migration job resource to generate the SSH script. */
  migrationJob: string;
  /** Required. Bastion VM Instance name to use or to create. */
  vm: string;
  /** The VM creation configuration */
  vmCreationConfig?:
    | VmCreationConfig
    | undefined;
  /** The VM selection configuration */
  vmSelectionConfig?:
    | VmSelectionConfig
    | undefined;
  /** The port that will be open on the bastion host. */
  vmPort: number;
}

/** VM creation configuration message */
export interface VmCreationConfig {
  /** Required. VM instance machine type to create. */
  vmMachineType: string;
  /** The Google Cloud Platform zone to create the VM in. */
  vmZone: string;
  /** The subnet name the vm needs to be created in. */
  subnet: string;
}

/** VM selection configuration message */
export interface VmSelectionConfig {
  /** Required. The Google Cloud Platform zone the VM is located. */
  vmZone: string;
}

/** Response message for 'GenerateSshScript' request. */
export interface SshScript {
  /** The ssh configuration script. */
  script: string;
}

/** Request message for 'GenerateTcpProxyScript' request. */
export interface GenerateTcpProxyScriptRequest {
  /** Name of the migration job resource to generate the TCP Proxy script. */
  migrationJob: string;
  /** Required. The name of the Compute instance that will host the proxy. */
  vmName: string;
  /** Required. The type of the Compute instance that will host the proxy. */
  vmMachineType: string;
  /**
   * Optional. The Google Cloud Platform zone to create the VM in. The fully
   * qualified name of the zone must be specified, including the region name,
   * for example "us-central1-b". If not specified, uses the "-b" zone of the
   * destination Connection Profile's region.
   */
  vmZone: string;
  /**
   * Required. The name of the subnet the Compute instance will use for private
   * connectivity. Must be supplied in the form of
   * projects/{project}/regions/{region}/subnetworks/{subnetwork}.
   * Note: the region for the subnet must match the Compute instance region.
   */
  vmSubnet: string;
}

/** Response message for 'GenerateTcpProxyScript' request. */
export interface TcpProxyScript {
  /** The TCP Proxy configuration script. */
  script: string;
}

/** Request message for 'ListConnectionProfiles' request. */
export interface ListConnectionProfilesRequest {
  /** Required. The parent which owns this collection of connection profiles. */
  parent: string;
  /**
   * The maximum number of connection profiles to return. The service may return
   * fewer than this value. If unspecified, at most 50 connection profiles will
   * be returned. The maximum value is 1000; values above 1000 are coerced
   * to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListConnectionProfiles` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListConnectionProfiles`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * A filter expression that filters connection profiles listed in the
   * response. The expression must specify the field name, a comparison
   * operator, and the value that you want to use for filtering. The value must
   * be a string, a number, or a boolean. The comparison operator must be either
   * =, !=, >, or <. For example, list connection profiles created this year by
   * specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z**. You can
   * also filter nested fields. For example, you could specify **mySql.username
   * = %lt;my_username%gt;** to list all connection profiles configured to
   * connect with a specific username.
   */
  filter: string;
  /** A comma-separated list of fields to order results according to. */
  orderBy: string;
}

/** Response message for 'ListConnectionProfiles' request. */
export interface ListConnectionProfilesResponse {
  /** The response list of connection profiles. */
  connectionProfiles: ConnectionProfile[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for 'GetConnectionProfile' request. */
export interface GetConnectionProfileRequest {
  /** Required. Name of the connection profile resource to get. */
  name: string;
}

/** Request message for 'CreateConnectionProfile' request. */
export interface CreateConnectionProfileRequest {
  /** Required. The parent which owns this collection of connection profiles. */
  parent: string;
  /** Required. The connection profile identifier. */
  connectionProfileId: string;
  /** Required. The create request body including the connection profile data */
  connectionProfile:
    | ConnectionProfile
    | undefined;
  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
  /**
   * Optional. Only validate the connection profile, but don't create any
   * resources. The default is false. Only supported for Oracle connection
   * profiles.
   */
  validateOnly: boolean;
  /**
   * Optional. Create the connection profile without validating it.
   * The default is false.
   * Only supported for Oracle connection profiles.
   */
  skipValidation: boolean;
}

/** Request message for 'UpdateConnectionProfile' request. */
export interface UpdateConnectionProfileRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten by the
   * update in the conversion workspace resource.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The connection profile parameters to update. */
  connectionProfile:
    | ConnectionProfile
    | undefined;
  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
  /**
   * Optional. Only validate the connection profile, but don't update any
   * resources. The default is false. Only supported for Oracle connection
   * profiles.
   */
  validateOnly: boolean;
  /**
   * Optional. Update the connection profile without validating it.
   * The default is false.
   * Only supported for Oracle connection profiles.
   */
  skipValidation: boolean;
}

/** Request message for 'DeleteConnectionProfile' request. */
export interface DeleteConnectionProfileRequest {
  /** Required. Name of the connection profile resource to delete. */
  name: string;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
  /**
   * In case of force delete, the CloudSQL replica database is also deleted
   * (only for CloudSQL connection profile).
   */
  force: boolean;
}

/**
 * Request message to create a new private connection in the specified project
 * and region.
 */
export interface CreatePrivateConnectionRequest {
  /** Required. The parent that owns the collection of PrivateConnections. */
  parent: string;
  /** Required. The private connection identifier. */
  privateConnectionId: string;
  /** Required. The private connection resource to create. */
  privateConnection:
    | PrivateConnection
    | undefined;
  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
  /** Optional. If set to true, will skip validations. */
  skipValidation: boolean;
}

/**
 * Request message to retrieve a list of private connections in a given project
 * and location.
 */
export interface ListPrivateConnectionsRequest {
  /** Required. The parent that owns the collection of private connections. */
  parent: string;
  /**
   * Maximum number of private connections to return.
   * If unspecified, at most 50 private connections that are returned.
   * The maximum value is 1000; values above 1000 are coerced to 1000.
   */
  pageSize: number;
  /**
   * Page token received from a previous `ListPrivateConnections` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListPrivateConnections` must match the call that provided the page
   * token.
   */
  pageToken: string;
  /**
   * A filter expression that filters private connections listed in the
   * response. The expression must specify the field name, a comparison
   * operator, and the value that you want to use for filtering. The value must
   * be a string, a number, or a boolean. The comparison operator must be either
   * =, !=, >, or <. For example, list private connections created this year by
   * specifying **createTime %gt; 2021-01-01T00:00:00.000000000Z**.
   */
  filter: string;
  /** Order by fields for the result. */
  orderBy: string;
}

/** Response message for 'ListPrivateConnections' request. */
export interface ListPrivateConnectionsResponse {
  /** List of private connections. */
  privateConnections: PrivateConnection[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message to delete a private connection. */
export interface DeletePrivateConnectionRequest {
  /** Required. The name of the private connection to delete. */
  name: string;
  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message to get a private connection resource. */
export interface GetPrivateConnectionRequest {
  /** Required. The name of the private connection to get. */
  name: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/** Retrieve a list of all conversion workspaces in a given project and location. */
export interface ListConversionWorkspacesRequest {
  /** Required. The parent which owns this collection of conversion workspaces. */
  parent: string;
  /**
   * The maximum number of conversion workspaces to return. The service may
   * return fewer than this value. If unspecified, at most 50 sets are returned.
   */
  pageSize: number;
  /**
   * The nextPageToken value received in the previous call to
   * conversionWorkspaces.list, used in the subsequent request to retrieve the
   * next page of results. On first call this should be left blank. When
   * paginating, all other parameters provided to conversionWorkspaces.list must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * A filter expression that filters conversion workspaces listed in the
   * response. The expression must specify the field name, a comparison
   * operator, and the value that you want to use for filtering. The value must
   * be a string, a number, or a boolean. The comparison operator must be either
   * =, !=, >, or <. For example, list conversion workspaces created this year
   * by specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z.** You can
   * also filter nested fields. For example, you could specify
   * **source.version = "12.c.1"** to select all conversion workspaces with
   * source database version equal to 12.c.1.
   */
  filter: string;
}

/** Response message for 'ListConversionWorkspaces' request. */
export interface ListConversionWorkspacesResponse {
  /** The list of conversion workspace objects. */
  conversionWorkspaces: ConversionWorkspace[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for 'GetConversionWorkspace' request. */
export interface GetConversionWorkspaceRequest {
  /** Required. Name of the conversion workspace resource to get. */
  name: string;
}

/**
 * Request message to create a new Conversion Workspace
 * in the specified project and region.
 */
export interface CreateConversionWorkspaceRequest {
  /** Required. The parent which owns this collection of conversion workspaces. */
  parent: string;
  /** Required. The ID of the conversion workspace to create. */
  conversionWorkspaceId: string;
  /** Required. Represents a conversion workspace object. */
  conversionWorkspace:
    | ConversionWorkspace
    | undefined;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message for 'UpdateConversionWorkspace' request. */
export interface UpdateConversionWorkspaceRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten by the
   * update in the conversion workspace resource.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The conversion workspace parameters to update. */
  conversionWorkspace:
    | ConversionWorkspace
    | undefined;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message for 'DeleteConversionWorkspace' request. */
export interface DeleteConversionWorkspaceRequest {
  /** Required. Name of the conversion workspace resource to delete. */
  name: string;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
  /**
   * Force delete the conversion workspace, even if there's a running migration
   * that is using the workspace.
   */
  force: boolean;
}

/** Request message for 'CommitConversionWorkspace' request. */
export interface CommitConversionWorkspaceRequest {
  /** Required. Name of the conversion workspace resource to commit. */
  name: string;
  /** Optional. Optional name of the commit. */
  commitName: string;
}

/** Request message for 'RollbackConversionWorkspace' request. */
export interface RollbackConversionWorkspaceRequest {
  /** Required. Name of the conversion workspace resource to roll back to. */
  name: string;
}

/** Request message for 'ApplyConversionWorkspace' request. */
export interface ApplyConversionWorkspaceRequest {
  /**
   * Required. The name of the conversion workspace resource for which to apply
   * the draft tree. Must be in the form of:
   *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  name: string;
  /**
   * Filter which entities to apply. Leaving this field empty will apply all of
   * the entities. Supports Google AIP 160 based filtering.
   */
  filter: string;
  /**
   * Optional. Only validates the apply process, but doesn't change the
   * destination database. Only works for PostgreSQL destination connection
   * profile.
   */
  dryRun: boolean;
  /**
   * Optional. Specifies whether the conversion workspace is to be committed
   * automatically after the apply.
   */
  autoCommit: boolean;
  /**
   * Optional. Fully qualified (Uri) name of the destination connection
   * profile.
   */
  connectionProfile?: string | undefined;
}

/** Retrieve a list of all mapping rules in a given conversion workspace. */
export interface ListMappingRulesRequest {
  /**
   * Required. Name of the conversion workspace resource whose mapping rules are
   * listed in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  parent: string;
  /**
   * The maximum number of rules to return. The service may return
   * fewer than this value.
   */
  pageSize: number;
  /**
   * The nextPageToken value received in the previous call to
   * mappingRules.list, used in the subsequent request to retrieve the next
   * page of results. On first call this should be left blank. When paginating,
   * all other parameters provided to mappingRules.list must match the call
   * that provided the page token.
   */
  pageToken: string;
}

/** Response message for 'ListMappingRulesRequest' request. */
export interface ListMappingRulesResponse {
  /** The list of conversion workspace mapping rules. */
  mappingRules: MappingRule[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for 'GetMappingRule' request. */
export interface GetMappingRuleRequest {
  /**
   * Required. Name of the mapping rule resource to get.
   * Example: conversionWorkspaces/123/mappingRules/rule123
   *
   * In order to retrieve a previous revision of the mapping rule, also provide
   * the revision ID.
   * Example:
   * conversionWorkspace/123/mappingRules/rule123@c7cfa2a8c7cfa2a8c7cfa2a8c7cfa2a8
   */
  name: string;
}

/** Request message for 'SeedConversionWorkspace' request. */
export interface SeedConversionWorkspaceRequest {
  /**
   * Name of the conversion workspace resource to seed with new database
   * structure, in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  name: string;
  /**
   * Should the conversion workspace be committed automatically after the
   * seed operation.
   */
  autoCommit: boolean;
  /** Optional. Fully qualified (Uri) name of the source connection profile. */
  sourceConnectionProfile?:
    | string
    | undefined;
  /**
   * Optional. Fully qualified (Uri) name of the destination connection
   * profile.
   */
  destinationConnectionProfile?: string | undefined;
}

/** Request message for 'ConvertConversionWorkspace' request. */
export interface ConvertConversionWorkspaceRequest {
  /**
   * Name of the conversion workspace resource to convert in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  name: string;
  /**
   * Optional. Specifies whether the conversion workspace is to be committed
   * automatically after the conversion.
   */
  autoCommit: boolean;
  /**
   * Optional. Filter the entities to convert. Leaving this field empty will
   * convert all of the entities. Supports Google AIP-160 style filtering.
   */
  filter: string;
  /**
   * Optional. Automatically convert the full entity path for each entity
   * specified by the filter. For example, if the filter specifies a table, that
   * table schema (and database if there is one) will also be converted.
   */
  convertFullPath: boolean;
}

/** Request message for 'ImportMappingRules' request. */
export interface ImportMappingRulesRequest {
  /**
   * Required. Name of the conversion workspace resource to import the rules to
   * in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  parent: string;
  /** Required. The format of the rules content file. */
  rulesFormat: ImportRulesFileFormat;
  /** Required. One or more rules files. */
  rulesFiles: ImportMappingRulesRequest_RulesFile[];
  /**
   * Required. Should the conversion workspace be committed automatically after
   * the import operation.
   */
  autoCommit: boolean;
}

/** Details of a single rules file. */
export interface ImportMappingRulesRequest_RulesFile {
  /**
   * Required. The filename of the rules that needs to be converted. The
   * filename is used mainly so that future logs of the import rules job
   * contain it, and can therefore be searched by it.
   */
  rulesSourceFilename: string;
  /** Required. The text content of the rules that needs to be converted. */
  rulesContent: string;
}

/** Request message for 'DescribeDatabaseEntities' request. */
export interface DescribeDatabaseEntitiesRequest {
  /**
   * Required. Name of the conversion workspace resource whose database entities
   * are described. Must be in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  conversionWorkspace: string;
  /**
   * Optional. The maximum number of entities to return. The service may return
   * fewer entities than the value specifies.
   */
  pageSize: number;
  /**
   * Optional. The nextPageToken value received in the previous call to
   * conversionWorkspace.describeDatabaseEntities, used in the subsequent
   * request to retrieve the next page of results. On first call this should be
   * left blank. When paginating, all other parameters provided to
   * conversionWorkspace.describeDatabaseEntities must match the call that
   * provided the page token.
   */
  pageToken: string;
  /** Required. The tree to fetch. */
  tree: DescribeDatabaseEntitiesRequest_DBTreeType;
  /**
   * Optional. Whether to retrieve the latest committed version of the entities
   * or the latest version. This field is ignored if a specific commit_id is
   * specified.
   */
  uncommitted: boolean;
  /**
   * Optional. Request a specific commit ID. If not specified, the entities from
   * the latest commit are returned.
   */
  commitId: string;
  /** Optional. Filter the returned entities based on AIP-160 standard. */
  filter: string;
  /** Optional. Results view based on AIP-157 */
  view: DatabaseEntityView;
}

/** The type of a tree to return */
export enum DescribeDatabaseEntitiesRequest_DBTreeType {
  /** DB_TREE_TYPE_UNSPECIFIED - Unspecified tree type. */
  DB_TREE_TYPE_UNSPECIFIED = 0,
  /** SOURCE_TREE - The source database tree. */
  SOURCE_TREE = 1,
  /** DRAFT_TREE - The draft database tree. */
  DRAFT_TREE = 2,
  /** DESTINATION_TREE - The destination database tree. */
  DESTINATION_TREE = 3,
  UNRECOGNIZED = -1,
}

export function describeDatabaseEntitiesRequest_DBTreeTypeFromJSON(
  object: any,
): DescribeDatabaseEntitiesRequest_DBTreeType {
  switch (object) {
    case 0:
    case "DB_TREE_TYPE_UNSPECIFIED":
      return DescribeDatabaseEntitiesRequest_DBTreeType.DB_TREE_TYPE_UNSPECIFIED;
    case 1:
    case "SOURCE_TREE":
      return DescribeDatabaseEntitiesRequest_DBTreeType.SOURCE_TREE;
    case 2:
    case "DRAFT_TREE":
      return DescribeDatabaseEntitiesRequest_DBTreeType.DRAFT_TREE;
    case 3:
    case "DESTINATION_TREE":
      return DescribeDatabaseEntitiesRequest_DBTreeType.DESTINATION_TREE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DescribeDatabaseEntitiesRequest_DBTreeType.UNRECOGNIZED;
  }
}

export function describeDatabaseEntitiesRequest_DBTreeTypeToJSON(
  object: DescribeDatabaseEntitiesRequest_DBTreeType,
): string {
  switch (object) {
    case DescribeDatabaseEntitiesRequest_DBTreeType.DB_TREE_TYPE_UNSPECIFIED:
      return "DB_TREE_TYPE_UNSPECIFIED";
    case DescribeDatabaseEntitiesRequest_DBTreeType.SOURCE_TREE:
      return "SOURCE_TREE";
    case DescribeDatabaseEntitiesRequest_DBTreeType.DRAFT_TREE:
      return "DRAFT_TREE";
    case DescribeDatabaseEntitiesRequest_DBTreeType.DESTINATION_TREE:
      return "DESTINATION_TREE";
    case DescribeDatabaseEntitiesRequest_DBTreeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response message for 'DescribeDatabaseEntities' request. */
export interface DescribeDatabaseEntitiesResponse {
  /** The list of database entities for the conversion workspace. */
  databaseEntities: DatabaseEntity[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for 'SearchBackgroundJobs' request. */
export interface SearchBackgroundJobsRequest {
  /**
   * Required. Name of the conversion workspace resource whose jobs are listed,
   * in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  conversionWorkspace: string;
  /** Optional. Whether or not to return just the most recent job per job type, */
  returnMostRecentPerJobType: boolean;
  /**
   * Optional. The maximum number of jobs to return. The service may return
   * fewer than this value. If unspecified, at most 100 jobs are
   * returned. The maximum value is 100; values above 100 are coerced to
   * 100.
   */
  maxSize: number;
  /**
   * Optional. If provided, only returns jobs that completed until (not
   * including) the given timestamp.
   */
  completedUntilTime: Date | undefined;
}

/** Response message for 'SearchBackgroundJobs' request. */
export interface SearchBackgroundJobsResponse {
  /** The list of conversion workspace mapping rules. */
  jobs: BackgroundJobLogEntry[];
}

/** Request message for 'DescribeConversionWorkspaceRevisions' request. */
export interface DescribeConversionWorkspaceRevisionsRequest {
  /**
   * Required. Name of the conversion workspace resource whose revisions are
   * listed. Must be in the form of:
   * projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  conversionWorkspace: string;
  /** Optional. Optional filter to request a specific commit ID. */
  commitId: string;
}

/** Response message for 'DescribeConversionWorkspaceRevisions' request. */
export interface DescribeConversionWorkspaceRevisionsResponse {
  /** The list of conversion workspace revisions. */
  revisions: ConversionWorkspace[];
}

/** Request message for 'CreateMappingRule' command. */
export interface CreateMappingRuleRequest {
  /** Required. The parent which owns this collection of mapping rules. */
  parent: string;
  /** Required. The ID of the rule to create. */
  mappingRuleId: string;
  /**
   * Required. Represents a [mapping rule]
   * (https://cloud.google.com/database-migration/reference/rest/v1/projects.locations.mappingRules)
   * object.
   */
  mappingRule:
    | MappingRule
    | undefined;
  /**
   * A unique ID used to identify the request. If the server receives two
   * requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message for 'DeleteMappingRule' request. */
export interface DeleteMappingRuleRequest {
  /** Required. Name of the mapping rule resource to delete. */
  name: string;
  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two requests with the same ID, then the second request is ignored.
   *
   * It is recommended to always set this value to a UUID.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
   * (_), and hyphens (-). The maximum length is 40 characters.
   */
  requestId: string;
}

/** Request message for 'FetchStaticIps' request. */
export interface FetchStaticIpsRequest {
  /**
   * Required. The resource name for the location for which static IPs should be
   * returned. Must be in the format `projects/* /locations/*`.
   */
  name: string;
  /** Maximum number of IPs to return. */
  pageSize: number;
  /** A page token, received from a previous `FetchStaticIps` call. */
  pageToken: string;
}

/** Response message for a 'FetchStaticIps' request. */
export interface FetchStaticIpsResponse {
  /** List of static IPs. */
  staticIps: string[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseListMigrationJobsRequest(): ListMigrationJobsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListMigrationJobsRequest: MessageFns<ListMigrationJobsRequest> = {
  encode(message: ListMigrationJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMigrationJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMigrationJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMigrationJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListMigrationJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMigrationJobsRequest>): ListMigrationJobsRequest {
    return ListMigrationJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMigrationJobsRequest>): ListMigrationJobsRequest {
    const message = createBaseListMigrationJobsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListMigrationJobsResponse(): ListMigrationJobsResponse {
  return { migrationJobs: [], nextPageToken: "", unreachable: [] };
}

export const ListMigrationJobsResponse: MessageFns<ListMigrationJobsResponse> = {
  encode(message: ListMigrationJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.migrationJobs) {
      MigrationJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMigrationJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMigrationJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrationJobs.push(MigrationJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMigrationJobsResponse {
    return {
      migrationJobs: globalThis.Array.isArray(object?.migrationJobs)
        ? object.migrationJobs.map((e: any) => MigrationJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListMigrationJobsResponse): unknown {
    const obj: any = {};
    if (message.migrationJobs?.length) {
      obj.migrationJobs = message.migrationJobs.map((e) => MigrationJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMigrationJobsResponse>): ListMigrationJobsResponse {
    return ListMigrationJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMigrationJobsResponse>): ListMigrationJobsResponse {
    const message = createBaseListMigrationJobsResponse();
    message.migrationJobs = object.migrationJobs?.map((e) => MigrationJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetMigrationJobRequest(): GetMigrationJobRequest {
  return { name: "" };
}

export const GetMigrationJobRequest: MessageFns<GetMigrationJobRequest> = {
  encode(message: GetMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMigrationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMigrationJobRequest>): GetMigrationJobRequest {
    return GetMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMigrationJobRequest>): GetMigrationJobRequest {
    const message = createBaseGetMigrationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateMigrationJobRequest(): CreateMigrationJobRequest {
  return { parent: "", migrationJobId: "", migrationJob: undefined, requestId: "" };
}

export const CreateMigrationJobRequest: MessageFns<CreateMigrationJobRequest> = {
  encode(message: CreateMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.migrationJobId !== "") {
      writer.uint32(18).string(message.migrationJobId);
    }
    if (message.migrationJob !== undefined) {
      MigrationJob.encode(message.migrationJob, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.migrationJobId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.migrationJob = MigrationJob.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMigrationJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      migrationJobId: isSet(object.migrationJobId) ? globalThis.String(object.migrationJobId) : "",
      migrationJob: isSet(object.migrationJob) ? MigrationJob.fromJSON(object.migrationJob) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.migrationJobId !== "") {
      obj.migrationJobId = message.migrationJobId;
    }
    if (message.migrationJob !== undefined) {
      obj.migrationJob = MigrationJob.toJSON(message.migrationJob);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMigrationJobRequest>): CreateMigrationJobRequest {
    return CreateMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMigrationJobRequest>): CreateMigrationJobRequest {
    const message = createBaseCreateMigrationJobRequest();
    message.parent = object.parent ?? "";
    message.migrationJobId = object.migrationJobId ?? "";
    message.migrationJob = (object.migrationJob !== undefined && object.migrationJob !== null)
      ? MigrationJob.fromPartial(object.migrationJob)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateMigrationJobRequest(): UpdateMigrationJobRequest {
  return { updateMask: undefined, migrationJob: undefined, requestId: "" };
}

export const UpdateMigrationJobRequest: MessageFns<UpdateMigrationJobRequest> = {
  encode(message: UpdateMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.migrationJob !== undefined) {
      MigrationJob.encode(message.migrationJob, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.migrationJob = MigrationJob.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMigrationJobRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      migrationJob: isSet(object.migrationJob) ? MigrationJob.fromJSON(object.migrationJob) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.migrationJob !== undefined) {
      obj.migrationJob = MigrationJob.toJSON(message.migrationJob);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMigrationJobRequest>): UpdateMigrationJobRequest {
    return UpdateMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMigrationJobRequest>): UpdateMigrationJobRequest {
    const message = createBaseUpdateMigrationJobRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.migrationJob = (object.migrationJob !== undefined && object.migrationJob !== null)
      ? MigrationJob.fromPartial(object.migrationJob)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteMigrationJobRequest(): DeleteMigrationJobRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteMigrationJobRequest: MessageFns<DeleteMigrationJobRequest> = {
  encode(message: DeleteMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMigrationJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMigrationJobRequest>): DeleteMigrationJobRequest {
    return DeleteMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMigrationJobRequest>): DeleteMigrationJobRequest {
    const message = createBaseDeleteMigrationJobRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseStartMigrationJobRequest(): StartMigrationJobRequest {
  return { name: "", skipValidation: false };
}

export const StartMigrationJobRequest: MessageFns<StartMigrationJobRequest> = {
  encode(message: StartMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.skipValidation !== false) {
      writer.uint32(16).bool(message.skipValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.skipValidation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartMigrationJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      skipValidation: isSet(object.skipValidation) ? globalThis.Boolean(object.skipValidation) : false,
    };
  },

  toJSON(message: StartMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.skipValidation !== false) {
      obj.skipValidation = message.skipValidation;
    }
    return obj;
  },

  create(base?: DeepPartial<StartMigrationJobRequest>): StartMigrationJobRequest {
    return StartMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartMigrationJobRequest>): StartMigrationJobRequest {
    const message = createBaseStartMigrationJobRequest();
    message.name = object.name ?? "";
    message.skipValidation = object.skipValidation ?? false;
    return message;
  },
};

function createBaseStopMigrationJobRequest(): StopMigrationJobRequest {
  return { name: "" };
}

export const StopMigrationJobRequest: MessageFns<StopMigrationJobRequest> = {
  encode(message: StopMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopMigrationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StopMigrationJobRequest>): StopMigrationJobRequest {
    return StopMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopMigrationJobRequest>): StopMigrationJobRequest {
    const message = createBaseStopMigrationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeMigrationJobRequest(): ResumeMigrationJobRequest {
  return { name: "" };
}

export const ResumeMigrationJobRequest: MessageFns<ResumeMigrationJobRequest> = {
  encode(message: ResumeMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeMigrationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeMigrationJobRequest>): ResumeMigrationJobRequest {
    return ResumeMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeMigrationJobRequest>): ResumeMigrationJobRequest {
    const message = createBaseResumeMigrationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePromoteMigrationJobRequest(): PromoteMigrationJobRequest {
  return { name: "" };
}

export const PromoteMigrationJobRequest: MessageFns<PromoteMigrationJobRequest> = {
  encode(message: PromoteMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromoteMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromoteMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromoteMigrationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PromoteMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PromoteMigrationJobRequest>): PromoteMigrationJobRequest {
    return PromoteMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromoteMigrationJobRequest>): PromoteMigrationJobRequest {
    const message = createBasePromoteMigrationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseVerifyMigrationJobRequest(): VerifyMigrationJobRequest {
  return { name: "", updateMask: undefined, migrationJob: undefined };
}

export const VerifyMigrationJobRequest: MessageFns<VerifyMigrationJobRequest> = {
  encode(message: VerifyMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.migrationJob !== undefined) {
      MigrationJob.encode(message.migrationJob, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.migrationJob = MigrationJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMigrationJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      migrationJob: isSet(object.migrationJob) ? MigrationJob.fromJSON(object.migrationJob) : undefined,
    };
  },

  toJSON(message: VerifyMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.migrationJob !== undefined) {
      obj.migrationJob = MigrationJob.toJSON(message.migrationJob);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyMigrationJobRequest>): VerifyMigrationJobRequest {
    return VerifyMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyMigrationJobRequest>): VerifyMigrationJobRequest {
    const message = createBaseVerifyMigrationJobRequest();
    message.name = object.name ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.migrationJob = (object.migrationJob !== undefined && object.migrationJob !== null)
      ? MigrationJob.fromPartial(object.migrationJob)
      : undefined;
    return message;
  },
};

function createBaseRestartMigrationJobRequest(): RestartMigrationJobRequest {
  return { name: "", skipValidation: false };
}

export const RestartMigrationJobRequest: MessageFns<RestartMigrationJobRequest> = {
  encode(message: RestartMigrationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.skipValidation !== false) {
      writer.uint32(16).bool(message.skipValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartMigrationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartMigrationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.skipValidation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestartMigrationJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      skipValidation: isSet(object.skipValidation) ? globalThis.Boolean(object.skipValidation) : false,
    };
  },

  toJSON(message: RestartMigrationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.skipValidation !== false) {
      obj.skipValidation = message.skipValidation;
    }
    return obj;
  },

  create(base?: DeepPartial<RestartMigrationJobRequest>): RestartMigrationJobRequest {
    return RestartMigrationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestartMigrationJobRequest>): RestartMigrationJobRequest {
    const message = createBaseRestartMigrationJobRequest();
    message.name = object.name ?? "";
    message.skipValidation = object.skipValidation ?? false;
    return message;
  },
};

function createBaseGenerateSshScriptRequest(): GenerateSshScriptRequest {
  return { migrationJob: "", vm: "", vmCreationConfig: undefined, vmSelectionConfig: undefined, vmPort: 0 };
}

export const GenerateSshScriptRequest: MessageFns<GenerateSshScriptRequest> = {
  encode(message: GenerateSshScriptRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.migrationJob !== "") {
      writer.uint32(10).string(message.migrationJob);
    }
    if (message.vm !== "") {
      writer.uint32(18).string(message.vm);
    }
    if (message.vmCreationConfig !== undefined) {
      VmCreationConfig.encode(message.vmCreationConfig, writer.uint32(802).fork()).join();
    }
    if (message.vmSelectionConfig !== undefined) {
      VmSelectionConfig.encode(message.vmSelectionConfig, writer.uint32(810).fork()).join();
    }
    if (message.vmPort !== 0) {
      writer.uint32(24).int32(message.vmPort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateSshScriptRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateSshScriptRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrationJob = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vm = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.vmCreationConfig = VmCreationConfig.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.vmSelectionConfig = VmSelectionConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.vmPort = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateSshScriptRequest {
    return {
      migrationJob: isSet(object.migrationJob) ? globalThis.String(object.migrationJob) : "",
      vm: isSet(object.vm) ? globalThis.String(object.vm) : "",
      vmCreationConfig: isSet(object.vmCreationConfig) ? VmCreationConfig.fromJSON(object.vmCreationConfig) : undefined,
      vmSelectionConfig: isSet(object.vmSelectionConfig)
        ? VmSelectionConfig.fromJSON(object.vmSelectionConfig)
        : undefined,
      vmPort: isSet(object.vmPort) ? globalThis.Number(object.vmPort) : 0,
    };
  },

  toJSON(message: GenerateSshScriptRequest): unknown {
    const obj: any = {};
    if (message.migrationJob !== "") {
      obj.migrationJob = message.migrationJob;
    }
    if (message.vm !== "") {
      obj.vm = message.vm;
    }
    if (message.vmCreationConfig !== undefined) {
      obj.vmCreationConfig = VmCreationConfig.toJSON(message.vmCreationConfig);
    }
    if (message.vmSelectionConfig !== undefined) {
      obj.vmSelectionConfig = VmSelectionConfig.toJSON(message.vmSelectionConfig);
    }
    if (message.vmPort !== 0) {
      obj.vmPort = Math.round(message.vmPort);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateSshScriptRequest>): GenerateSshScriptRequest {
    return GenerateSshScriptRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateSshScriptRequest>): GenerateSshScriptRequest {
    const message = createBaseGenerateSshScriptRequest();
    message.migrationJob = object.migrationJob ?? "";
    message.vm = object.vm ?? "";
    message.vmCreationConfig = (object.vmCreationConfig !== undefined && object.vmCreationConfig !== null)
      ? VmCreationConfig.fromPartial(object.vmCreationConfig)
      : undefined;
    message.vmSelectionConfig = (object.vmSelectionConfig !== undefined && object.vmSelectionConfig !== null)
      ? VmSelectionConfig.fromPartial(object.vmSelectionConfig)
      : undefined;
    message.vmPort = object.vmPort ?? 0;
    return message;
  },
};

function createBaseVmCreationConfig(): VmCreationConfig {
  return { vmMachineType: "", vmZone: "", subnet: "" };
}

export const VmCreationConfig: MessageFns<VmCreationConfig> = {
  encode(message: VmCreationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vmMachineType !== "") {
      writer.uint32(10).string(message.vmMachineType);
    }
    if (message.vmZone !== "") {
      writer.uint32(18).string(message.vmZone);
    }
    if (message.subnet !== "") {
      writer.uint32(26).string(message.subnet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VmCreationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVmCreationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vmMachineType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmZone = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subnet = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VmCreationConfig {
    return {
      vmMachineType: isSet(object.vmMachineType) ? globalThis.String(object.vmMachineType) : "",
      vmZone: isSet(object.vmZone) ? globalThis.String(object.vmZone) : "",
      subnet: isSet(object.subnet) ? globalThis.String(object.subnet) : "",
    };
  },

  toJSON(message: VmCreationConfig): unknown {
    const obj: any = {};
    if (message.vmMachineType !== "") {
      obj.vmMachineType = message.vmMachineType;
    }
    if (message.vmZone !== "") {
      obj.vmZone = message.vmZone;
    }
    if (message.subnet !== "") {
      obj.subnet = message.subnet;
    }
    return obj;
  },

  create(base?: DeepPartial<VmCreationConfig>): VmCreationConfig {
    return VmCreationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VmCreationConfig>): VmCreationConfig {
    const message = createBaseVmCreationConfig();
    message.vmMachineType = object.vmMachineType ?? "";
    message.vmZone = object.vmZone ?? "";
    message.subnet = object.subnet ?? "";
    return message;
  },
};

function createBaseVmSelectionConfig(): VmSelectionConfig {
  return { vmZone: "" };
}

export const VmSelectionConfig: MessageFns<VmSelectionConfig> = {
  encode(message: VmSelectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vmZone !== "") {
      writer.uint32(10).string(message.vmZone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VmSelectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVmSelectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vmZone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VmSelectionConfig {
    return { vmZone: isSet(object.vmZone) ? globalThis.String(object.vmZone) : "" };
  },

  toJSON(message: VmSelectionConfig): unknown {
    const obj: any = {};
    if (message.vmZone !== "") {
      obj.vmZone = message.vmZone;
    }
    return obj;
  },

  create(base?: DeepPartial<VmSelectionConfig>): VmSelectionConfig {
    return VmSelectionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VmSelectionConfig>): VmSelectionConfig {
    const message = createBaseVmSelectionConfig();
    message.vmZone = object.vmZone ?? "";
    return message;
  },
};

function createBaseSshScript(): SshScript {
  return { script: "" };
}

export const SshScript: MessageFns<SshScript> = {
  encode(message: SshScript, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.script !== "") {
      writer.uint32(10).string(message.script);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SshScript {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSshScript();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.script = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SshScript {
    return { script: isSet(object.script) ? globalThis.String(object.script) : "" };
  },

  toJSON(message: SshScript): unknown {
    const obj: any = {};
    if (message.script !== "") {
      obj.script = message.script;
    }
    return obj;
  },

  create(base?: DeepPartial<SshScript>): SshScript {
    return SshScript.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SshScript>): SshScript {
    const message = createBaseSshScript();
    message.script = object.script ?? "";
    return message;
  },
};

function createBaseGenerateTcpProxyScriptRequest(): GenerateTcpProxyScriptRequest {
  return { migrationJob: "", vmName: "", vmMachineType: "", vmZone: "", vmSubnet: "" };
}

export const GenerateTcpProxyScriptRequest: MessageFns<GenerateTcpProxyScriptRequest> = {
  encode(message: GenerateTcpProxyScriptRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.migrationJob !== "") {
      writer.uint32(10).string(message.migrationJob);
    }
    if (message.vmName !== "") {
      writer.uint32(18).string(message.vmName);
    }
    if (message.vmMachineType !== "") {
      writer.uint32(26).string(message.vmMachineType);
    }
    if (message.vmZone !== "") {
      writer.uint32(34).string(message.vmZone);
    }
    if (message.vmSubnet !== "") {
      writer.uint32(42).string(message.vmSubnet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTcpProxyScriptRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTcpProxyScriptRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrationJob = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vmMachineType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.vmZone = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vmSubnet = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTcpProxyScriptRequest {
    return {
      migrationJob: isSet(object.migrationJob) ? globalThis.String(object.migrationJob) : "",
      vmName: isSet(object.vmName) ? globalThis.String(object.vmName) : "",
      vmMachineType: isSet(object.vmMachineType) ? globalThis.String(object.vmMachineType) : "",
      vmZone: isSet(object.vmZone) ? globalThis.String(object.vmZone) : "",
      vmSubnet: isSet(object.vmSubnet) ? globalThis.String(object.vmSubnet) : "",
    };
  },

  toJSON(message: GenerateTcpProxyScriptRequest): unknown {
    const obj: any = {};
    if (message.migrationJob !== "") {
      obj.migrationJob = message.migrationJob;
    }
    if (message.vmName !== "") {
      obj.vmName = message.vmName;
    }
    if (message.vmMachineType !== "") {
      obj.vmMachineType = message.vmMachineType;
    }
    if (message.vmZone !== "") {
      obj.vmZone = message.vmZone;
    }
    if (message.vmSubnet !== "") {
      obj.vmSubnet = message.vmSubnet;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateTcpProxyScriptRequest>): GenerateTcpProxyScriptRequest {
    return GenerateTcpProxyScriptRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateTcpProxyScriptRequest>): GenerateTcpProxyScriptRequest {
    const message = createBaseGenerateTcpProxyScriptRequest();
    message.migrationJob = object.migrationJob ?? "";
    message.vmName = object.vmName ?? "";
    message.vmMachineType = object.vmMachineType ?? "";
    message.vmZone = object.vmZone ?? "";
    message.vmSubnet = object.vmSubnet ?? "";
    return message;
  },
};

function createBaseTcpProxyScript(): TcpProxyScript {
  return { script: "" };
}

export const TcpProxyScript: MessageFns<TcpProxyScript> = {
  encode(message: TcpProxyScript, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.script !== "") {
      writer.uint32(10).string(message.script);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpProxyScript {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpProxyScript();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.script = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpProxyScript {
    return { script: isSet(object.script) ? globalThis.String(object.script) : "" };
  },

  toJSON(message: TcpProxyScript): unknown {
    const obj: any = {};
    if (message.script !== "") {
      obj.script = message.script;
    }
    return obj;
  },

  create(base?: DeepPartial<TcpProxyScript>): TcpProxyScript {
    return TcpProxyScript.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpProxyScript>): TcpProxyScript {
    const message = createBaseTcpProxyScript();
    message.script = object.script ?? "";
    return message;
  },
};

function createBaseListConnectionProfilesRequest(): ListConnectionProfilesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListConnectionProfilesRequest: MessageFns<ListConnectionProfilesRequest> = {
  encode(message: ListConnectionProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectionProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectionProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectionProfilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListConnectionProfilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectionProfilesRequest>): ListConnectionProfilesRequest {
    return ListConnectionProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectionProfilesRequest>): ListConnectionProfilesRequest {
    const message = createBaseListConnectionProfilesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListConnectionProfilesResponse(): ListConnectionProfilesResponse {
  return { connectionProfiles: [], nextPageToken: "", unreachable: [] };
}

export const ListConnectionProfilesResponse: MessageFns<ListConnectionProfilesResponse> = {
  encode(message: ListConnectionProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectionProfiles) {
      ConnectionProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectionProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectionProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectionProfiles.push(ConnectionProfile.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectionProfilesResponse {
    return {
      connectionProfiles: globalThis.Array.isArray(object?.connectionProfiles)
        ? object.connectionProfiles.map((e: any) => ConnectionProfile.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListConnectionProfilesResponse): unknown {
    const obj: any = {};
    if (message.connectionProfiles?.length) {
      obj.connectionProfiles = message.connectionProfiles.map((e) => ConnectionProfile.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectionProfilesResponse>): ListConnectionProfilesResponse {
    return ListConnectionProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectionProfilesResponse>): ListConnectionProfilesResponse {
    const message = createBaseListConnectionProfilesResponse();
    message.connectionProfiles = object.connectionProfiles?.map((e) => ConnectionProfile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetConnectionProfileRequest(): GetConnectionProfileRequest {
  return { name: "" };
}

export const GetConnectionProfileRequest: MessageFns<GetConnectionProfileRequest> = {
  encode(message: GetConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConnectionProfileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConnectionProfileRequest>): GetConnectionProfileRequest {
    return GetConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConnectionProfileRequest>): GetConnectionProfileRequest {
    const message = createBaseGetConnectionProfileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConnectionProfileRequest(): CreateConnectionProfileRequest {
  return {
    parent: "",
    connectionProfileId: "",
    connectionProfile: undefined,
    requestId: "",
    validateOnly: false,
    skipValidation: false,
  };
}

export const CreateConnectionProfileRequest: MessageFns<CreateConnectionProfileRequest> = {
  encode(message: CreateConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.connectionProfileId !== "") {
      writer.uint32(18).string(message.connectionProfileId);
    }
    if (message.connectionProfile !== undefined) {
      ConnectionProfile.encode(message.connectionProfile, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    if (message.skipValidation !== false) {
      writer.uint32(48).bool(message.skipValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionProfileId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connectionProfile = ConnectionProfile.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.skipValidation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConnectionProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      connectionProfileId: isSet(object.connectionProfileId) ? globalThis.String(object.connectionProfileId) : "",
      connectionProfile: isSet(object.connectionProfile)
        ? ConnectionProfile.fromJSON(object.connectionProfile)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      skipValidation: isSet(object.skipValidation) ? globalThis.Boolean(object.skipValidation) : false,
    };
  },

  toJSON(message: CreateConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.connectionProfileId !== "") {
      obj.connectionProfileId = message.connectionProfileId;
    }
    if (message.connectionProfile !== undefined) {
      obj.connectionProfile = ConnectionProfile.toJSON(message.connectionProfile);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.skipValidation !== false) {
      obj.skipValidation = message.skipValidation;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConnectionProfileRequest>): CreateConnectionProfileRequest {
    return CreateConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConnectionProfileRequest>): CreateConnectionProfileRequest {
    const message = createBaseCreateConnectionProfileRequest();
    message.parent = object.parent ?? "";
    message.connectionProfileId = object.connectionProfileId ?? "";
    message.connectionProfile = (object.connectionProfile !== undefined && object.connectionProfile !== null)
      ? ConnectionProfile.fromPartial(object.connectionProfile)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.skipValidation = object.skipValidation ?? false;
    return message;
  },
};

function createBaseUpdateConnectionProfileRequest(): UpdateConnectionProfileRequest {
  return {
    updateMask: undefined,
    connectionProfile: undefined,
    requestId: "",
    validateOnly: false,
    skipValidation: false,
  };
}

export const UpdateConnectionProfileRequest: MessageFns<UpdateConnectionProfileRequest> = {
  encode(message: UpdateConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.connectionProfile !== undefined) {
      ConnectionProfile.encode(message.connectionProfile, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.skipValidation !== false) {
      writer.uint32(40).bool(message.skipValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionProfile = ConnectionProfile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.skipValidation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConnectionProfileRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      connectionProfile: isSet(object.connectionProfile)
        ? ConnectionProfile.fromJSON(object.connectionProfile)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      skipValidation: isSet(object.skipValidation) ? globalThis.Boolean(object.skipValidation) : false,
    };
  },

  toJSON(message: UpdateConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.connectionProfile !== undefined) {
      obj.connectionProfile = ConnectionProfile.toJSON(message.connectionProfile);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.skipValidation !== false) {
      obj.skipValidation = message.skipValidation;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConnectionProfileRequest>): UpdateConnectionProfileRequest {
    return UpdateConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConnectionProfileRequest>): UpdateConnectionProfileRequest {
    const message = createBaseUpdateConnectionProfileRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.connectionProfile = (object.connectionProfile !== undefined && object.connectionProfile !== null)
      ? ConnectionProfile.fromPartial(object.connectionProfile)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.skipValidation = object.skipValidation ?? false;
    return message;
  },
};

function createBaseDeleteConnectionProfileRequest(): DeleteConnectionProfileRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteConnectionProfileRequest: MessageFns<DeleteConnectionProfileRequest> = {
  encode(message: DeleteConnectionProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConnectionProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConnectionProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConnectionProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteConnectionProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConnectionProfileRequest>): DeleteConnectionProfileRequest {
    return DeleteConnectionProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConnectionProfileRequest>): DeleteConnectionProfileRequest {
    const message = createBaseDeleteConnectionProfileRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCreatePrivateConnectionRequest(): CreatePrivateConnectionRequest {
  return { parent: "", privateConnectionId: "", privateConnection: undefined, requestId: "", skipValidation: false };
}

export const CreatePrivateConnectionRequest: MessageFns<CreatePrivateConnectionRequest> = {
  encode(message: CreatePrivateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.privateConnectionId !== "") {
      writer.uint32(18).string(message.privateConnectionId);
    }
    if (message.privateConnection !== undefined) {
      PrivateConnection.encode(message.privateConnection, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.skipValidation !== false) {
      writer.uint32(40).bool(message.skipValidation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePrivateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePrivateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privateConnectionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.privateConnection = PrivateConnection.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.skipValidation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePrivateConnectionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      privateConnectionId: isSet(object.privateConnectionId) ? globalThis.String(object.privateConnectionId) : "",
      privateConnection: isSet(object.privateConnection)
        ? PrivateConnection.fromJSON(object.privateConnection)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      skipValidation: isSet(object.skipValidation) ? globalThis.Boolean(object.skipValidation) : false,
    };
  },

  toJSON(message: CreatePrivateConnectionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.privateConnectionId !== "") {
      obj.privateConnectionId = message.privateConnectionId;
    }
    if (message.privateConnection !== undefined) {
      obj.privateConnection = PrivateConnection.toJSON(message.privateConnection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.skipValidation !== false) {
      obj.skipValidation = message.skipValidation;
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePrivateConnectionRequest>): CreatePrivateConnectionRequest {
    return CreatePrivateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePrivateConnectionRequest>): CreatePrivateConnectionRequest {
    const message = createBaseCreatePrivateConnectionRequest();
    message.parent = object.parent ?? "";
    message.privateConnectionId = object.privateConnectionId ?? "";
    message.privateConnection = (object.privateConnection !== undefined && object.privateConnection !== null)
      ? PrivateConnection.fromPartial(object.privateConnection)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.skipValidation = object.skipValidation ?? false;
    return message;
  },
};

function createBaseListPrivateConnectionsRequest(): ListPrivateConnectionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListPrivateConnectionsRequest: MessageFns<ListPrivateConnectionsRequest> = {
  encode(message: ListPrivateConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPrivateConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPrivateConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPrivateConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListPrivateConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPrivateConnectionsRequest>): ListPrivateConnectionsRequest {
    return ListPrivateConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPrivateConnectionsRequest>): ListPrivateConnectionsRequest {
    const message = createBaseListPrivateConnectionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListPrivateConnectionsResponse(): ListPrivateConnectionsResponse {
  return { privateConnections: [], nextPageToken: "", unreachable: [] };
}

export const ListPrivateConnectionsResponse: MessageFns<ListPrivateConnectionsResponse> = {
  encode(message: ListPrivateConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.privateConnections) {
      PrivateConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPrivateConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPrivateConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.privateConnections.push(PrivateConnection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPrivateConnectionsResponse {
    return {
      privateConnections: globalThis.Array.isArray(object?.privateConnections)
        ? object.privateConnections.map((e: any) => PrivateConnection.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListPrivateConnectionsResponse): unknown {
    const obj: any = {};
    if (message.privateConnections?.length) {
      obj.privateConnections = message.privateConnections.map((e) => PrivateConnection.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPrivateConnectionsResponse>): ListPrivateConnectionsResponse {
    return ListPrivateConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPrivateConnectionsResponse>): ListPrivateConnectionsResponse {
    const message = createBaseListPrivateConnectionsResponse();
    message.privateConnections = object.privateConnections?.map((e) => PrivateConnection.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeletePrivateConnectionRequest(): DeletePrivateConnectionRequest {
  return { name: "", requestId: "" };
}

export const DeletePrivateConnectionRequest: MessageFns<DeletePrivateConnectionRequest> = {
  encode(message: DeletePrivateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePrivateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePrivateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePrivateConnectionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeletePrivateConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePrivateConnectionRequest>): DeletePrivateConnectionRequest {
    return DeletePrivateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePrivateConnectionRequest>): DeletePrivateConnectionRequest {
    const message = createBaseDeletePrivateConnectionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetPrivateConnectionRequest(): GetPrivateConnectionRequest {
  return { name: "" };
}

export const GetPrivateConnectionRequest: MessageFns<GetPrivateConnectionRequest> = {
  encode(message: GetPrivateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPrivateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPrivateConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPrivateConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPrivateConnectionRequest>): GetPrivateConnectionRequest {
    return GetPrivateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPrivateConnectionRequest>): GetPrivateConnectionRequest {
    const message = createBaseGetPrivateConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseListConversionWorkspacesRequest(): ListConversionWorkspacesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListConversionWorkspacesRequest: MessageFns<ListConversionWorkspacesRequest> = {
  encode(message: ListConversionWorkspacesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionWorkspacesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionWorkspacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionWorkspacesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListConversionWorkspacesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionWorkspacesRequest>): ListConversionWorkspacesRequest {
    return ListConversionWorkspacesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionWorkspacesRequest>): ListConversionWorkspacesRequest {
    const message = createBaseListConversionWorkspacesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListConversionWorkspacesResponse(): ListConversionWorkspacesResponse {
  return { conversionWorkspaces: [], nextPageToken: "", unreachable: [] };
}

export const ListConversionWorkspacesResponse: MessageFns<ListConversionWorkspacesResponse> = {
  encode(message: ListConversionWorkspacesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionWorkspaces) {
      ConversionWorkspace.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionWorkspacesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionWorkspacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionWorkspaces.push(ConversionWorkspace.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionWorkspacesResponse {
    return {
      conversionWorkspaces: globalThis.Array.isArray(object?.conversionWorkspaces)
        ? object.conversionWorkspaces.map((e: any) => ConversionWorkspace.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListConversionWorkspacesResponse): unknown {
    const obj: any = {};
    if (message.conversionWorkspaces?.length) {
      obj.conversionWorkspaces = message.conversionWorkspaces.map((e) => ConversionWorkspace.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionWorkspacesResponse>): ListConversionWorkspacesResponse {
    return ListConversionWorkspacesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionWorkspacesResponse>): ListConversionWorkspacesResponse {
    const message = createBaseListConversionWorkspacesResponse();
    message.conversionWorkspaces = object.conversionWorkspaces?.map((e) => ConversionWorkspace.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetConversionWorkspaceRequest(): GetConversionWorkspaceRequest {
  return { name: "" };
}

export const GetConversionWorkspaceRequest: MessageFns<GetConversionWorkspaceRequest> = {
  encode(message: GetConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversionWorkspaceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversionWorkspaceRequest>): GetConversionWorkspaceRequest {
    return GetConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversionWorkspaceRequest>): GetConversionWorkspaceRequest {
    const message = createBaseGetConversionWorkspaceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConversionWorkspaceRequest(): CreateConversionWorkspaceRequest {
  return { parent: "", conversionWorkspaceId: "", conversionWorkspace: undefined, requestId: "" };
}

export const CreateConversionWorkspaceRequest: MessageFns<CreateConversionWorkspaceRequest> = {
  encode(message: CreateConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversionWorkspaceId !== "") {
      writer.uint32(18).string(message.conversionWorkspaceId);
    }
    if (message.conversionWorkspace !== undefined) {
      ConversionWorkspace.encode(message.conversionWorkspace, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversionWorkspaceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversionWorkspace = ConversionWorkspace.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversionWorkspaceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversionWorkspaceId: isSet(object.conversionWorkspaceId) ? globalThis.String(object.conversionWorkspaceId) : "",
      conversionWorkspace: isSet(object.conversionWorkspace)
        ? ConversionWorkspace.fromJSON(object.conversionWorkspace)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversionWorkspaceId !== "") {
      obj.conversionWorkspaceId = message.conversionWorkspaceId;
    }
    if (message.conversionWorkspace !== undefined) {
      obj.conversionWorkspace = ConversionWorkspace.toJSON(message.conversionWorkspace);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversionWorkspaceRequest>): CreateConversionWorkspaceRequest {
    return CreateConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversionWorkspaceRequest>): CreateConversionWorkspaceRequest {
    const message = createBaseCreateConversionWorkspaceRequest();
    message.parent = object.parent ?? "";
    message.conversionWorkspaceId = object.conversionWorkspaceId ?? "";
    message.conversionWorkspace = (object.conversionWorkspace !== undefined && object.conversionWorkspace !== null)
      ? ConversionWorkspace.fromPartial(object.conversionWorkspace)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateConversionWorkspaceRequest(): UpdateConversionWorkspaceRequest {
  return { updateMask: undefined, conversionWorkspace: undefined, requestId: "" };
}

export const UpdateConversionWorkspaceRequest: MessageFns<UpdateConversionWorkspaceRequest> = {
  encode(message: UpdateConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.conversionWorkspace !== undefined) {
      ConversionWorkspace.encode(message.conversionWorkspace, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversionWorkspace = ConversionWorkspace.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversionWorkspaceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      conversionWorkspace: isSet(object.conversionWorkspace)
        ? ConversionWorkspace.fromJSON(object.conversionWorkspace)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.conversionWorkspace !== undefined) {
      obj.conversionWorkspace = ConversionWorkspace.toJSON(message.conversionWorkspace);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversionWorkspaceRequest>): UpdateConversionWorkspaceRequest {
    return UpdateConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversionWorkspaceRequest>): UpdateConversionWorkspaceRequest {
    const message = createBaseUpdateConversionWorkspaceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.conversionWorkspace = (object.conversionWorkspace !== undefined && object.conversionWorkspace !== null)
      ? ConversionWorkspace.fromPartial(object.conversionWorkspace)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteConversionWorkspaceRequest(): DeleteConversionWorkspaceRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteConversionWorkspaceRequest: MessageFns<DeleteConversionWorkspaceRequest> = {
  encode(message: DeleteConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversionWorkspaceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversionWorkspaceRequest>): DeleteConversionWorkspaceRequest {
    return DeleteConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversionWorkspaceRequest>): DeleteConversionWorkspaceRequest {
    const message = createBaseDeleteConversionWorkspaceRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCommitConversionWorkspaceRequest(): CommitConversionWorkspaceRequest {
  return { name: "", commitName: "" };
}

export const CommitConversionWorkspaceRequest: MessageFns<CommitConversionWorkspaceRequest> = {
  encode(message: CommitConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.commitName !== "") {
      writer.uint32(18).string(message.commitName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commitName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitConversionWorkspaceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      commitName: isSet(object.commitName) ? globalThis.String(object.commitName) : "",
    };
  },

  toJSON(message: CommitConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.commitName !== "") {
      obj.commitName = message.commitName;
    }
    return obj;
  },

  create(base?: DeepPartial<CommitConversionWorkspaceRequest>): CommitConversionWorkspaceRequest {
    return CommitConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitConversionWorkspaceRequest>): CommitConversionWorkspaceRequest {
    const message = createBaseCommitConversionWorkspaceRequest();
    message.name = object.name ?? "";
    message.commitName = object.commitName ?? "";
    return message;
  },
};

function createBaseRollbackConversionWorkspaceRequest(): RollbackConversionWorkspaceRequest {
  return { name: "" };
}

export const RollbackConversionWorkspaceRequest: MessageFns<RollbackConversionWorkspaceRequest> = {
  encode(message: RollbackConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollbackConversionWorkspaceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: RollbackConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RollbackConversionWorkspaceRequest>): RollbackConversionWorkspaceRequest {
    return RollbackConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RollbackConversionWorkspaceRequest>): RollbackConversionWorkspaceRequest {
    const message = createBaseRollbackConversionWorkspaceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseApplyConversionWorkspaceRequest(): ApplyConversionWorkspaceRequest {
  return { name: "", filter: "", dryRun: false, autoCommit: false, connectionProfile: undefined };
}

export const ApplyConversionWorkspaceRequest: MessageFns<ApplyConversionWorkspaceRequest> = {
  encode(message: ApplyConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.dryRun !== false) {
      writer.uint32(24).bool(message.dryRun);
    }
    if (message.autoCommit !== false) {
      writer.uint32(32).bool(message.autoCommit);
    }
    if (message.connectionProfile !== undefined) {
      writer.uint32(802).string(message.connectionProfile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.dryRun = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoCommit = reader.bool();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.connectionProfile = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyConversionWorkspaceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      dryRun: isSet(object.dryRun) ? globalThis.Boolean(object.dryRun) : false,
      autoCommit: isSet(object.autoCommit) ? globalThis.Boolean(object.autoCommit) : false,
      connectionProfile: isSet(object.connectionProfile) ? globalThis.String(object.connectionProfile) : undefined,
    };
  },

  toJSON(message: ApplyConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.dryRun !== false) {
      obj.dryRun = message.dryRun;
    }
    if (message.autoCommit !== false) {
      obj.autoCommit = message.autoCommit;
    }
    if (message.connectionProfile !== undefined) {
      obj.connectionProfile = message.connectionProfile;
    }
    return obj;
  },

  create(base?: DeepPartial<ApplyConversionWorkspaceRequest>): ApplyConversionWorkspaceRequest {
    return ApplyConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplyConversionWorkspaceRequest>): ApplyConversionWorkspaceRequest {
    const message = createBaseApplyConversionWorkspaceRequest();
    message.name = object.name ?? "";
    message.filter = object.filter ?? "";
    message.dryRun = object.dryRun ?? false;
    message.autoCommit = object.autoCommit ?? false;
    message.connectionProfile = object.connectionProfile ?? undefined;
    return message;
  },
};

function createBaseListMappingRulesRequest(): ListMappingRulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMappingRulesRequest: MessageFns<ListMappingRulesRequest> = {
  encode(message: ListMappingRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMappingRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMappingRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMappingRulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMappingRulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMappingRulesRequest>): ListMappingRulesRequest {
    return ListMappingRulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMappingRulesRequest>): ListMappingRulesRequest {
    const message = createBaseListMappingRulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMappingRulesResponse(): ListMappingRulesResponse {
  return { mappingRules: [], nextPageToken: "" };
}

export const ListMappingRulesResponse: MessageFns<ListMappingRulesResponse> = {
  encode(message: ListMappingRulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.mappingRules) {
      MappingRule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMappingRulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMappingRulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mappingRules.push(MappingRule.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMappingRulesResponse {
    return {
      mappingRules: globalThis.Array.isArray(object?.mappingRules)
        ? object.mappingRules.map((e: any) => MappingRule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMappingRulesResponse): unknown {
    const obj: any = {};
    if (message.mappingRules?.length) {
      obj.mappingRules = message.mappingRules.map((e) => MappingRule.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMappingRulesResponse>): ListMappingRulesResponse {
    return ListMappingRulesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMappingRulesResponse>): ListMappingRulesResponse {
    const message = createBaseListMappingRulesResponse();
    message.mappingRules = object.mappingRules?.map((e) => MappingRule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetMappingRuleRequest(): GetMappingRuleRequest {
  return { name: "" };
}

export const GetMappingRuleRequest: MessageFns<GetMappingRuleRequest> = {
  encode(message: GetMappingRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMappingRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMappingRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMappingRuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMappingRuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMappingRuleRequest>): GetMappingRuleRequest {
    return GetMappingRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMappingRuleRequest>): GetMappingRuleRequest {
    const message = createBaseGetMappingRuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSeedConversionWorkspaceRequest(): SeedConversionWorkspaceRequest {
  return { name: "", autoCommit: false, sourceConnectionProfile: undefined, destinationConnectionProfile: undefined };
}

export const SeedConversionWorkspaceRequest: MessageFns<SeedConversionWorkspaceRequest> = {
  encode(message: SeedConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.autoCommit !== false) {
      writer.uint32(16).bool(message.autoCommit);
    }
    if (message.sourceConnectionProfile !== undefined) {
      writer.uint32(802).string(message.sourceConnectionProfile);
    }
    if (message.destinationConnectionProfile !== undefined) {
      writer.uint32(810).string(message.destinationConnectionProfile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeedConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeedConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.autoCommit = reader.bool();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.sourceConnectionProfile = reader.string();
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.destinationConnectionProfile = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeedConversionWorkspaceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      autoCommit: isSet(object.autoCommit) ? globalThis.Boolean(object.autoCommit) : false,
      sourceConnectionProfile: isSet(object.sourceConnectionProfile)
        ? globalThis.String(object.sourceConnectionProfile)
        : undefined,
      destinationConnectionProfile: isSet(object.destinationConnectionProfile)
        ? globalThis.String(object.destinationConnectionProfile)
        : undefined,
    };
  },

  toJSON(message: SeedConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.autoCommit !== false) {
      obj.autoCommit = message.autoCommit;
    }
    if (message.sourceConnectionProfile !== undefined) {
      obj.sourceConnectionProfile = message.sourceConnectionProfile;
    }
    if (message.destinationConnectionProfile !== undefined) {
      obj.destinationConnectionProfile = message.destinationConnectionProfile;
    }
    return obj;
  },

  create(base?: DeepPartial<SeedConversionWorkspaceRequest>): SeedConversionWorkspaceRequest {
    return SeedConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SeedConversionWorkspaceRequest>): SeedConversionWorkspaceRequest {
    const message = createBaseSeedConversionWorkspaceRequest();
    message.name = object.name ?? "";
    message.autoCommit = object.autoCommit ?? false;
    message.sourceConnectionProfile = object.sourceConnectionProfile ?? undefined;
    message.destinationConnectionProfile = object.destinationConnectionProfile ?? undefined;
    return message;
  },
};

function createBaseConvertConversionWorkspaceRequest(): ConvertConversionWorkspaceRequest {
  return { name: "", autoCommit: false, filter: "", convertFullPath: false };
}

export const ConvertConversionWorkspaceRequest: MessageFns<ConvertConversionWorkspaceRequest> = {
  encode(message: ConvertConversionWorkspaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.autoCommit !== false) {
      writer.uint32(32).bool(message.autoCommit);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.convertFullPath !== false) {
      writer.uint32(48).bool(message.convertFullPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConvertConversionWorkspaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConvertConversionWorkspaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoCommit = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.convertFullPath = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConvertConversionWorkspaceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      autoCommit: isSet(object.autoCommit) ? globalThis.Boolean(object.autoCommit) : false,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      convertFullPath: isSet(object.convertFullPath) ? globalThis.Boolean(object.convertFullPath) : false,
    };
  },

  toJSON(message: ConvertConversionWorkspaceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.autoCommit !== false) {
      obj.autoCommit = message.autoCommit;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.convertFullPath !== false) {
      obj.convertFullPath = message.convertFullPath;
    }
    return obj;
  },

  create(base?: DeepPartial<ConvertConversionWorkspaceRequest>): ConvertConversionWorkspaceRequest {
    return ConvertConversionWorkspaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConvertConversionWorkspaceRequest>): ConvertConversionWorkspaceRequest {
    const message = createBaseConvertConversionWorkspaceRequest();
    message.name = object.name ?? "";
    message.autoCommit = object.autoCommit ?? false;
    message.filter = object.filter ?? "";
    message.convertFullPath = object.convertFullPath ?? false;
    return message;
  },
};

function createBaseImportMappingRulesRequest(): ImportMappingRulesRequest {
  return { parent: "", rulesFormat: 0, rulesFiles: [], autoCommit: false };
}

export const ImportMappingRulesRequest: MessageFns<ImportMappingRulesRequest> = {
  encode(message: ImportMappingRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.rulesFormat !== 0) {
      writer.uint32(16).int32(message.rulesFormat);
    }
    for (const v of message.rulesFiles) {
      ImportMappingRulesRequest_RulesFile.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.autoCommit !== false) {
      writer.uint32(48).bool(message.autoCommit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportMappingRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportMappingRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rulesFormat = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rulesFiles.push(ImportMappingRulesRequest_RulesFile.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.autoCommit = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportMappingRulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      rulesFormat: isSet(object.rulesFormat) ? importRulesFileFormatFromJSON(object.rulesFormat) : 0,
      rulesFiles: globalThis.Array.isArray(object?.rulesFiles)
        ? object.rulesFiles.map((e: any) => ImportMappingRulesRequest_RulesFile.fromJSON(e))
        : [],
      autoCommit: isSet(object.autoCommit) ? globalThis.Boolean(object.autoCommit) : false,
    };
  },

  toJSON(message: ImportMappingRulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.rulesFormat !== 0) {
      obj.rulesFormat = importRulesFileFormatToJSON(message.rulesFormat);
    }
    if (message.rulesFiles?.length) {
      obj.rulesFiles = message.rulesFiles.map((e) => ImportMappingRulesRequest_RulesFile.toJSON(e));
    }
    if (message.autoCommit !== false) {
      obj.autoCommit = message.autoCommit;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportMappingRulesRequest>): ImportMappingRulesRequest {
    return ImportMappingRulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportMappingRulesRequest>): ImportMappingRulesRequest {
    const message = createBaseImportMappingRulesRequest();
    message.parent = object.parent ?? "";
    message.rulesFormat = object.rulesFormat ?? 0;
    message.rulesFiles = object.rulesFiles?.map((e) => ImportMappingRulesRequest_RulesFile.fromPartial(e)) || [];
    message.autoCommit = object.autoCommit ?? false;
    return message;
  },
};

function createBaseImportMappingRulesRequest_RulesFile(): ImportMappingRulesRequest_RulesFile {
  return { rulesSourceFilename: "", rulesContent: "" };
}

export const ImportMappingRulesRequest_RulesFile: MessageFns<ImportMappingRulesRequest_RulesFile> = {
  encode(message: ImportMappingRulesRequest_RulesFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rulesSourceFilename !== "") {
      writer.uint32(10).string(message.rulesSourceFilename);
    }
    if (message.rulesContent !== "") {
      writer.uint32(18).string(message.rulesContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportMappingRulesRequest_RulesFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportMappingRulesRequest_RulesFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rulesSourceFilename = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rulesContent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportMappingRulesRequest_RulesFile {
    return {
      rulesSourceFilename: isSet(object.rulesSourceFilename) ? globalThis.String(object.rulesSourceFilename) : "",
      rulesContent: isSet(object.rulesContent) ? globalThis.String(object.rulesContent) : "",
    };
  },

  toJSON(message: ImportMappingRulesRequest_RulesFile): unknown {
    const obj: any = {};
    if (message.rulesSourceFilename !== "") {
      obj.rulesSourceFilename = message.rulesSourceFilename;
    }
    if (message.rulesContent !== "") {
      obj.rulesContent = message.rulesContent;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportMappingRulesRequest_RulesFile>): ImportMappingRulesRequest_RulesFile {
    return ImportMappingRulesRequest_RulesFile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportMappingRulesRequest_RulesFile>): ImportMappingRulesRequest_RulesFile {
    const message = createBaseImportMappingRulesRequest_RulesFile();
    message.rulesSourceFilename = object.rulesSourceFilename ?? "";
    message.rulesContent = object.rulesContent ?? "";
    return message;
  },
};

function createBaseDescribeDatabaseEntitiesRequest(): DescribeDatabaseEntitiesRequest {
  return {
    conversionWorkspace: "",
    pageSize: 0,
    pageToken: "",
    tree: 0,
    uncommitted: false,
    commitId: "",
    filter: "",
    view: 0,
  };
}

export const DescribeDatabaseEntitiesRequest: MessageFns<DescribeDatabaseEntitiesRequest> = {
  encode(message: DescribeDatabaseEntitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionWorkspace !== "") {
      writer.uint32(10).string(message.conversionWorkspace);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.tree !== 0) {
      writer.uint32(48).int32(message.tree);
    }
    if (message.uncommitted !== false) {
      writer.uint32(88).bool(message.uncommitted);
    }
    if (message.commitId !== "") {
      writer.uint32(98).string(message.commitId);
    }
    if (message.filter !== "") {
      writer.uint32(106).string(message.filter);
    }
    if (message.view !== 0) {
      writer.uint32(112).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DescribeDatabaseEntitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescribeDatabaseEntitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionWorkspace = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.tree = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.uncommitted = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.commitId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DescribeDatabaseEntitiesRequest {
    return {
      conversionWorkspace: isSet(object.conversionWorkspace) ? globalThis.String(object.conversionWorkspace) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      tree: isSet(object.tree) ? describeDatabaseEntitiesRequest_DBTreeTypeFromJSON(object.tree) : 0,
      uncommitted: isSet(object.uncommitted) ? globalThis.Boolean(object.uncommitted) : false,
      commitId: isSet(object.commitId) ? globalThis.String(object.commitId) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      view: isSet(object.view) ? databaseEntityViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: DescribeDatabaseEntitiesRequest): unknown {
    const obj: any = {};
    if (message.conversionWorkspace !== "") {
      obj.conversionWorkspace = message.conversionWorkspace;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.tree !== 0) {
      obj.tree = describeDatabaseEntitiesRequest_DBTreeTypeToJSON(message.tree);
    }
    if (message.uncommitted !== false) {
      obj.uncommitted = message.uncommitted;
    }
    if (message.commitId !== "") {
      obj.commitId = message.commitId;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.view !== 0) {
      obj.view = databaseEntityViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<DescribeDatabaseEntitiesRequest>): DescribeDatabaseEntitiesRequest {
    return DescribeDatabaseEntitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DescribeDatabaseEntitiesRequest>): DescribeDatabaseEntitiesRequest {
    const message = createBaseDescribeDatabaseEntitiesRequest();
    message.conversionWorkspace = object.conversionWorkspace ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.tree = object.tree ?? 0;
    message.uncommitted = object.uncommitted ?? false;
    message.commitId = object.commitId ?? "";
    message.filter = object.filter ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseDescribeDatabaseEntitiesResponse(): DescribeDatabaseEntitiesResponse {
  return { databaseEntities: [], nextPageToken: "" };
}

export const DescribeDatabaseEntitiesResponse: MessageFns<DescribeDatabaseEntitiesResponse> = {
  encode(message: DescribeDatabaseEntitiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.databaseEntities) {
      DatabaseEntity.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DescribeDatabaseEntitiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescribeDatabaseEntitiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.databaseEntities.push(DatabaseEntity.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DescribeDatabaseEntitiesResponse {
    return {
      databaseEntities: globalThis.Array.isArray(object?.databaseEntities)
        ? object.databaseEntities.map((e: any) => DatabaseEntity.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: DescribeDatabaseEntitiesResponse): unknown {
    const obj: any = {};
    if (message.databaseEntities?.length) {
      obj.databaseEntities = message.databaseEntities.map((e) => DatabaseEntity.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<DescribeDatabaseEntitiesResponse>): DescribeDatabaseEntitiesResponse {
    return DescribeDatabaseEntitiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DescribeDatabaseEntitiesResponse>): DescribeDatabaseEntitiesResponse {
    const message = createBaseDescribeDatabaseEntitiesResponse();
    message.databaseEntities = object.databaseEntities?.map((e) => DatabaseEntity.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchBackgroundJobsRequest(): SearchBackgroundJobsRequest {
  return { conversionWorkspace: "", returnMostRecentPerJobType: false, maxSize: 0, completedUntilTime: undefined };
}

export const SearchBackgroundJobsRequest: MessageFns<SearchBackgroundJobsRequest> = {
  encode(message: SearchBackgroundJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionWorkspace !== "") {
      writer.uint32(10).string(message.conversionWorkspace);
    }
    if (message.returnMostRecentPerJobType !== false) {
      writer.uint32(16).bool(message.returnMostRecentPerJobType);
    }
    if (message.maxSize !== 0) {
      writer.uint32(24).int32(message.maxSize);
    }
    if (message.completedUntilTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completedUntilTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchBackgroundJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchBackgroundJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionWorkspace = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.returnMostRecentPerJobType = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.completedUntilTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchBackgroundJobsRequest {
    return {
      conversionWorkspace: isSet(object.conversionWorkspace) ? globalThis.String(object.conversionWorkspace) : "",
      returnMostRecentPerJobType: isSet(object.returnMostRecentPerJobType)
        ? globalThis.Boolean(object.returnMostRecentPerJobType)
        : false,
      maxSize: isSet(object.maxSize) ? globalThis.Number(object.maxSize) : 0,
      completedUntilTime: isSet(object.completedUntilTime) ? fromJsonTimestamp(object.completedUntilTime) : undefined,
    };
  },

  toJSON(message: SearchBackgroundJobsRequest): unknown {
    const obj: any = {};
    if (message.conversionWorkspace !== "") {
      obj.conversionWorkspace = message.conversionWorkspace;
    }
    if (message.returnMostRecentPerJobType !== false) {
      obj.returnMostRecentPerJobType = message.returnMostRecentPerJobType;
    }
    if (message.maxSize !== 0) {
      obj.maxSize = Math.round(message.maxSize);
    }
    if (message.completedUntilTime !== undefined) {
      obj.completedUntilTime = message.completedUntilTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SearchBackgroundJobsRequest>): SearchBackgroundJobsRequest {
    return SearchBackgroundJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchBackgroundJobsRequest>): SearchBackgroundJobsRequest {
    const message = createBaseSearchBackgroundJobsRequest();
    message.conversionWorkspace = object.conversionWorkspace ?? "";
    message.returnMostRecentPerJobType = object.returnMostRecentPerJobType ?? false;
    message.maxSize = object.maxSize ?? 0;
    message.completedUntilTime = object.completedUntilTime ?? undefined;
    return message;
  },
};

function createBaseSearchBackgroundJobsResponse(): SearchBackgroundJobsResponse {
  return { jobs: [] };
}

export const SearchBackgroundJobsResponse: MessageFns<SearchBackgroundJobsResponse> = {
  encode(message: SearchBackgroundJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      BackgroundJobLogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchBackgroundJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchBackgroundJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobs.push(BackgroundJobLogEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchBackgroundJobsResponse {
    return {
      jobs: globalThis.Array.isArray(object?.jobs)
        ? object.jobs.map((e: any) => BackgroundJobLogEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SearchBackgroundJobsResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => BackgroundJobLogEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SearchBackgroundJobsResponse>): SearchBackgroundJobsResponse {
    return SearchBackgroundJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchBackgroundJobsResponse>): SearchBackgroundJobsResponse {
    const message = createBaseSearchBackgroundJobsResponse();
    message.jobs = object.jobs?.map((e) => BackgroundJobLogEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDescribeConversionWorkspaceRevisionsRequest(): DescribeConversionWorkspaceRevisionsRequest {
  return { conversionWorkspace: "", commitId: "" };
}

export const DescribeConversionWorkspaceRevisionsRequest: MessageFns<DescribeConversionWorkspaceRevisionsRequest> = {
  encode(
    message: DescribeConversionWorkspaceRevisionsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.conversionWorkspace !== "") {
      writer.uint32(10).string(message.conversionWorkspace);
    }
    if (message.commitId !== "") {
      writer.uint32(18).string(message.commitId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DescribeConversionWorkspaceRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescribeConversionWorkspaceRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionWorkspace = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commitId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DescribeConversionWorkspaceRevisionsRequest {
    return {
      conversionWorkspace: isSet(object.conversionWorkspace) ? globalThis.String(object.conversionWorkspace) : "",
      commitId: isSet(object.commitId) ? globalThis.String(object.commitId) : "",
    };
  },

  toJSON(message: DescribeConversionWorkspaceRevisionsRequest): unknown {
    const obj: any = {};
    if (message.conversionWorkspace !== "") {
      obj.conversionWorkspace = message.conversionWorkspace;
    }
    if (message.commitId !== "") {
      obj.commitId = message.commitId;
    }
    return obj;
  },

  create(base?: DeepPartial<DescribeConversionWorkspaceRevisionsRequest>): DescribeConversionWorkspaceRevisionsRequest {
    return DescribeConversionWorkspaceRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DescribeConversionWorkspaceRevisionsRequest>,
  ): DescribeConversionWorkspaceRevisionsRequest {
    const message = createBaseDescribeConversionWorkspaceRevisionsRequest();
    message.conversionWorkspace = object.conversionWorkspace ?? "";
    message.commitId = object.commitId ?? "";
    return message;
  },
};

function createBaseDescribeConversionWorkspaceRevisionsResponse(): DescribeConversionWorkspaceRevisionsResponse {
  return { revisions: [] };
}

export const DescribeConversionWorkspaceRevisionsResponse: MessageFns<DescribeConversionWorkspaceRevisionsResponse> = {
  encode(
    message: DescribeConversionWorkspaceRevisionsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.revisions) {
      ConversionWorkspace.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DescribeConversionWorkspaceRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescribeConversionWorkspaceRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.revisions.push(ConversionWorkspace.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DescribeConversionWorkspaceRevisionsResponse {
    return {
      revisions: globalThis.Array.isArray(object?.revisions)
        ? object.revisions.map((e: any) => ConversionWorkspace.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DescribeConversionWorkspaceRevisionsResponse): unknown {
    const obj: any = {};
    if (message.revisions?.length) {
      obj.revisions = message.revisions.map((e) => ConversionWorkspace.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<DescribeConversionWorkspaceRevisionsResponse>,
  ): DescribeConversionWorkspaceRevisionsResponse {
    return DescribeConversionWorkspaceRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DescribeConversionWorkspaceRevisionsResponse>,
  ): DescribeConversionWorkspaceRevisionsResponse {
    const message = createBaseDescribeConversionWorkspaceRevisionsResponse();
    message.revisions = object.revisions?.map((e) => ConversionWorkspace.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMappingRuleRequest(): CreateMappingRuleRequest {
  return { parent: "", mappingRuleId: "", mappingRule: undefined, requestId: "" };
}

export const CreateMappingRuleRequest: MessageFns<CreateMappingRuleRequest> = {
  encode(message: CreateMappingRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.mappingRuleId !== "") {
      writer.uint32(18).string(message.mappingRuleId);
    }
    if (message.mappingRule !== undefined) {
      MappingRule.encode(message.mappingRule, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMappingRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMappingRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mappingRuleId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mappingRule = MappingRule.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMappingRuleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      mappingRuleId: isSet(object.mappingRuleId) ? globalThis.String(object.mappingRuleId) : "",
      mappingRule: isSet(object.mappingRule) ? MappingRule.fromJSON(object.mappingRule) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateMappingRuleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.mappingRuleId !== "") {
      obj.mappingRuleId = message.mappingRuleId;
    }
    if (message.mappingRule !== undefined) {
      obj.mappingRule = MappingRule.toJSON(message.mappingRule);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMappingRuleRequest>): CreateMappingRuleRequest {
    return CreateMappingRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMappingRuleRequest>): CreateMappingRuleRequest {
    const message = createBaseCreateMappingRuleRequest();
    message.parent = object.parent ?? "";
    message.mappingRuleId = object.mappingRuleId ?? "";
    message.mappingRule = (object.mappingRule !== undefined && object.mappingRule !== null)
      ? MappingRule.fromPartial(object.mappingRule)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteMappingRuleRequest(): DeleteMappingRuleRequest {
  return { name: "", requestId: "" };
}

export const DeleteMappingRuleRequest: MessageFns<DeleteMappingRuleRequest> = {
  encode(message: DeleteMappingRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMappingRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMappingRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMappingRuleRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteMappingRuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMappingRuleRequest>): DeleteMappingRuleRequest {
    return DeleteMappingRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMappingRuleRequest>): DeleteMappingRuleRequest {
    const message = createBaseDeleteMappingRuleRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseFetchStaticIpsRequest(): FetchStaticIpsRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const FetchStaticIpsRequest: MessageFns<FetchStaticIpsRequest> = {
  encode(message: FetchStaticIpsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchStaticIpsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchStaticIpsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchStaticIpsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: FetchStaticIpsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchStaticIpsRequest>): FetchStaticIpsRequest {
    return FetchStaticIpsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchStaticIpsRequest>): FetchStaticIpsRequest {
    const message = createBaseFetchStaticIpsRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseFetchStaticIpsResponse(): FetchStaticIpsResponse {
  return { staticIps: [], nextPageToken: "" };
}

export const FetchStaticIpsResponse: MessageFns<FetchStaticIpsResponse> = {
  encode(message: FetchStaticIpsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.staticIps) {
      writer.uint32(10).string(v!);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchStaticIpsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchStaticIpsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.staticIps.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchStaticIpsResponse {
    return {
      staticIps: globalThis.Array.isArray(object?.staticIps)
        ? object.staticIps.map((e: any) => globalThis.String(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: FetchStaticIpsResponse): unknown {
    const obj: any = {};
    if (message.staticIps?.length) {
      obj.staticIps = message.staticIps;
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchStaticIpsResponse>): FetchStaticIpsResponse {
    return FetchStaticIpsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchStaticIpsResponse>): FetchStaticIpsResponse {
    const message = createBaseFetchStaticIpsResponse();
    message.staticIps = object.staticIps?.map((e) => e) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Database Migration service */
export type DataMigrationServiceDefinition = typeof DataMigrationServiceDefinition;
export const DataMigrationServiceDefinition = {
  name: "DataMigrationService",
  fullName: "google.cloud.clouddms.v1.DataMigrationService",
  methods: {
    /** Lists migration jobs in a given project and location. */
    listMigrationJobs: {
      name: "ListMigrationJobs",
      requestType: ListMigrationJobsRequest,
      requestStream: false,
      responseType: ListMigrationJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single migration job. */
    getMigrationJob: {
      name: "GetMigrationJob",
      requestType: GetMigrationJobRequest,
      requestStream: false,
      responseType: MigrationJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new migration job in a given project and location. */
    createMigrationJob: {
      name: "CreateMigrationJob",
      requestType: CreateMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              44,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              13,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single migration job. */
    updateMigrationJob: {
      name: "UpdateMigrationJob",
      requestType: UpdateMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              13,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single migration job. */
    deleteMigrationJob: {
      name: "DeleteMigrationJob",
      requestType: DeleteMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Start an already created migration job. */
    startMigrationJob: {
      name: "StartMigrationJob",
      requestType: StartMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Stops a running migration job. */
    stopMigrationJob: {
      name: "StopMigrationJob",
      requestType: StopMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Resume a migration job that is currently stopped and is resumable (was
     * stopped during CDC phase).
     */
    resumeMigrationJob: {
      name: "ResumeMigrationJob",
      requestType: ResumeMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Promote a migration job, stopping replication to the destination and
     * promoting the destination to be a standalone database.
     */
    promoteMigrationJob: {
      name: "PromoteMigrationJob",
      requestType: PromoteMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              111,
              109,
              111,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Verify a migration job, making sure the destination can reach the source
     * and that all configuration and prerequisites are met.
     */
    verifyMigrationJob: {
      name: "VerifyMigrationJob",
      requestType: VerifyMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              118,
              101,
              114,
              105,
              102,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Restart a stopped or failed migration job, resetting the destination
     * instance to its original state and starting the migration process from
     * scratch.
     */
    restartMigrationJob: {
      name: "RestartMigrationJob",
      requestType: RestartMigrationJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              77,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Generate a SSH configuration script to configure the reverse SSH
     * connectivity.
     */
    generateSshScript: {
      name: "GenerateSshScript",
      requestType: GenerateSshScriptRequest,
      requestStream: false,
      responseType: SshScript,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              47,
              123,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              83,
              115,
              104,
              83,
              99,
              114,
              105,
              112,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Generate a TCP Proxy configuration script to configure a cloud-hosted VM
     * running a TCP Proxy.
     */
    generateTcpProxyScript: {
      name: "GenerateTcpProxyScript",
      requestType: GenerateTcpProxyScriptRequest,
      requestStream: false,
      responseType: TcpProxyScript,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              47,
              123,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              84,
              99,
              112,
              80,
              114,
              111,
              120,
              121,
              83,
              99,
              114,
              105,
              112,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a list of all connection profiles in a given project and
     * location.
     */
    listConnectionProfiles: {
      name: "ListConnectionProfiles",
      requestType: ListConnectionProfilesRequest,
      requestStream: false,
      responseType: ListConnectionProfilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single connection profile. */
    getConnectionProfile: {
      name: "GetConnectionProfile",
      requestType: GetConnectionProfileRequest,
      requestStream: false,
      responseType: ConnectionProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new connection profile in a given project and location. */
    createConnectionProfile: {
      name: "CreateConnectionProfile",
      requestType: CreateConnectionProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              18,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Update the configuration of a single connection profile. */
    updateConnectionProfile: {
      name: "UpdateConnectionProfile",
      requestType: UpdateConnectionProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              30,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              95,
              58,
              18,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              50,
              73,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a single Database Migration Service connection profile.
     * A connection profile can only be deleted if it is not in use by any
     * active migration jobs.
     */
    deleteConnectionProfile: {
      name: "DeleteConnectionProfile",
      requestType: DeleteConnectionProfileRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new private connection in a given project and location. */
    createPrivateConnection: {
      name: "CreatePrivateConnection",
      requestType: CreatePrivateConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              18,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single private connection. */
    getPrivateConnection: {
      name: "GetPrivateConnection",
      requestType: GetPrivateConnectionRequest,
      requestStream: false,
      responseType: PrivateConnection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves a list of private connections in a given project and location. */
    listPrivateConnections: {
      name: "ListPrivateConnections",
      requestType: ListPrivateConnectionsRequest,
      requestStream: false,
      responseType: ListPrivateConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Database Migration Service private connection. */
    deletePrivateConnection: {
      name: "DeletePrivateConnection",
      requestType: DeletePrivateConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single conversion workspace. */
    getConversionWorkspace: {
      name: "GetConversionWorkspace",
      requestType: GetConversionWorkspaceRequest,
      requestStream: false,
      responseType: ConversionWorkspace,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists conversion workspaces in a given project and location. */
    listConversionWorkspaces: {
      name: "ListConversionWorkspaces",
      requestType: ListConversionWorkspacesRequest,
      requestStream: false,
      responseType: ListConversionWorkspacesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new conversion workspace in a given project and location. */
    createConversionWorkspace: {
      name: "CreateConversionWorkspace",
      requestType: CreateConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              51,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single conversion workspace. */
    updateConversionWorkspace: {
      name: "UpdateConversionWorkspace",
      requestType: UpdateConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              20,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              50,
              77,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single conversion workspace. */
    deleteConversionWorkspace: {
      name: "DeleteConversionWorkspace",
      requestType: DeleteConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new mapping rule for a given conversion workspace. */
    createMappingRule: {
      name: "CreateMappingRule",
      requestType: CreateMappingRuleRequest,
      requestStream: false,
      responseType: MappingRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              95,
              114,
              117,
              108,
              101,
              44,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              95,
              114,
              117,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              12,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              95,
              114,
              117,
              108,
              101,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single mapping rule. */
    deleteMappingRule: {
      name: "DeleteMappingRule",
      requestType: DeleteMappingRuleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the mapping rules for a specific conversion workspace. */
    listMappingRules: {
      name: "ListMappingRules",
      requestType: ListMappingRulesRequest,
      requestStream: false,
      responseType: ListMappingRulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a mapping rule. */
    getMappingRule: {
      name: "GetMappingRule",
      requestType: GetMappingRuleRequest,
      requestStream: false,
      responseType: MappingRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Imports a snapshot of the source database into the
     * conversion workspace.
     */
    seedConversionWorkspace: {
      name: "SeedConversionWorkspace",
      requestType: SeedConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Imports the mapping rules for a given conversion workspace.
     * Supports various formats of external rules files.
     */
    importMappingRules: {
      name: "ImportMappingRules",
      requestType: ImportMappingRulesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              1,
              42,
              34,
              78,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              82,
              117,
              108,
              101,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Creates a draft tree schema for the destination database. */
    convertConversionWorkspace: {
      name: "ConvertConversionWorkspace",
      requestType: ConvertConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              110,
              118,
              101,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Marks all the data in the conversion workspace as committed. */
    commitConversionWorkspace: {
      name: "CommitConversionWorkspace",
      requestType: CommitConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              109,
              105,
              116,
            ]),
          ],
        },
      },
    },
    /** Rolls back a conversion workspace to the last committed snapshot. */
    rollbackConversionWorkspace: {
      name: "RollbackConversionWorkspace",
      requestType: RollbackConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              111,
              108,
              108,
              98,
              97,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Applies draft tree onto a specific destination database. */
    applyConversionWorkspace: {
      name: "ApplyConversionWorkspace",
      requestType: ApplyConversionWorkspaceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              112,
              112,
              108,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Describes the database entities tree for a specific conversion workspace
     * and a specific tree type.
     *
     * Database entities are not resources like conversion workspaces or mapping
     * rules, and they can't be created, updated or deleted. Instead, they are
     * simple data objects describing the structure of the client database.
     */
    describeDatabaseEntities: {
      name: "DescribeDatabaseEntities",
      requestType: DescribeDatabaseEntitiesRequest,
      requestStream: false,
      responseType: DescribeDatabaseEntitiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              99,
              18,
              97,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              115,
              99,
              114,
              105,
              98,
              101,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              69,
              110,
              116,
              105,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Searches/lists the background jobs for a specific
     * conversion workspace.
     *
     * The background jobs are not resources like conversion workspaces or
     * mapping rules, and they can't be created, updated or deleted.
     * Instead, they are a way to expose the data plane jobs log.
     */
    searchBackgroundJobs: {
      name: "SearchBackgroundJobs",
      requestType: SearchBackgroundJobsRequest,
      requestStream: false,
      responseType: SearchBackgroundJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              95,
              18,
              93,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              66,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a list of committed revisions of a specific conversion
     * workspace.
     */
    describeConversionWorkspaceRevisions: {
      name: "DescribeConversionWorkspaceRevisions",
      requestType: DescribeConversionWorkspaceRevisionsRequest,
      requestStream: false,
      responseType: DescribeConversionWorkspaceRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              111,
              18,
              109,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              115,
              99,
              114,
              105,
              98,
              101,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Fetches a set of static IP addresses that need to be allowlisted by the
     * customer when using the static-IP connectivity method.
     */
    fetchStaticIps: {
      name: "FetchStaticIps",
      requestType: FetchStaticIpsRequest,
      requestStream: false,
      responseType: FetchStaticIpsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              83,
              116,
              97,
              116,
              105,
              99,
              73,
              112,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataMigrationServiceImplementation<CallContextExt = {}> {
  /** Lists migration jobs in a given project and location. */
  listMigrationJobs(
    request: ListMigrationJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMigrationJobsResponse>>;
  /** Gets details of a single migration job. */
  getMigrationJob(
    request: GetMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MigrationJob>>;
  /** Creates a new migration job in a given project and location. */
  createMigrationJob(
    request: CreateMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single migration job. */
  updateMigrationJob(
    request: UpdateMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single migration job. */
  deleteMigrationJob(
    request: DeleteMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Start an already created migration job. */
  startMigrationJob(
    request: StartMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Stops a running migration job. */
  stopMigrationJob(
    request: StopMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Resume a migration job that is currently stopped and is resumable (was
   * stopped during CDC phase).
   */
  resumeMigrationJob(
    request: ResumeMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Promote a migration job, stopping replication to the destination and
   * promoting the destination to be a standalone database.
   */
  promoteMigrationJob(
    request: PromoteMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Verify a migration job, making sure the destination can reach the source
   * and that all configuration and prerequisites are met.
   */
  verifyMigrationJob(
    request: VerifyMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Restart a stopped or failed migration job, resetting the destination
   * instance to its original state and starting the migration process from
   * scratch.
   */
  restartMigrationJob(
    request: RestartMigrationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Generate a SSH configuration script to configure the reverse SSH
   * connectivity.
   */
  generateSshScript(
    request: GenerateSshScriptRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SshScript>>;
  /**
   * Generate a TCP Proxy configuration script to configure a cloud-hosted VM
   * running a TCP Proxy.
   */
  generateTcpProxyScript(
    request: GenerateTcpProxyScriptRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TcpProxyScript>>;
  /**
   * Retrieves a list of all connection profiles in a given project and
   * location.
   */
  listConnectionProfiles(
    request: ListConnectionProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConnectionProfilesResponse>>;
  /** Gets details of a single connection profile. */
  getConnectionProfile(
    request: GetConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConnectionProfile>>;
  /** Creates a new connection profile in a given project and location. */
  createConnectionProfile(
    request: CreateConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Update the configuration of a single connection profile. */
  updateConnectionProfile(
    request: UpdateConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a single Database Migration Service connection profile.
   * A connection profile can only be deleted if it is not in use by any
   * active migration jobs.
   */
  deleteConnectionProfile(
    request: DeleteConnectionProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new private connection in a given project and location. */
  createPrivateConnection(
    request: CreatePrivateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single private connection. */
  getPrivateConnection(
    request: GetPrivateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PrivateConnection>>;
  /** Retrieves a list of private connections in a given project and location. */
  listPrivateConnections(
    request: ListPrivateConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPrivateConnectionsResponse>>;
  /** Deletes a single Database Migration Service private connection. */
  deletePrivateConnection(
    request: DeletePrivateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single conversion workspace. */
  getConversionWorkspace(
    request: GetConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionWorkspace>>;
  /** Lists conversion workspaces in a given project and location. */
  listConversionWorkspaces(
    request: ListConversionWorkspacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversionWorkspacesResponse>>;
  /** Creates a new conversion workspace in a given project and location. */
  createConversionWorkspace(
    request: CreateConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single conversion workspace. */
  updateConversionWorkspace(
    request: UpdateConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single conversion workspace. */
  deleteConversionWorkspace(
    request: DeleteConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new mapping rule for a given conversion workspace. */
  createMappingRule(
    request: CreateMappingRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MappingRule>>;
  /** Deletes a single mapping rule. */
  deleteMappingRule(
    request: DeleteMappingRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists the mapping rules for a specific conversion workspace. */
  listMappingRules(
    request: ListMappingRulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMappingRulesResponse>>;
  /** Gets the details of a mapping rule. */
  getMappingRule(
    request: GetMappingRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MappingRule>>;
  /**
   * Imports a snapshot of the source database into the
   * conversion workspace.
   */
  seedConversionWorkspace(
    request: SeedConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Imports the mapping rules for a given conversion workspace.
   * Supports various formats of external rules files.
   */
  importMappingRules(
    request: ImportMappingRulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a draft tree schema for the destination database. */
  convertConversionWorkspace(
    request: ConvertConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Marks all the data in the conversion workspace as committed. */
  commitConversionWorkspace(
    request: CommitConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Rolls back a conversion workspace to the last committed snapshot. */
  rollbackConversionWorkspace(
    request: RollbackConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Applies draft tree onto a specific destination database. */
  applyConversionWorkspace(
    request: ApplyConversionWorkspaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Describes the database entities tree for a specific conversion workspace
   * and a specific tree type.
   *
   * Database entities are not resources like conversion workspaces or mapping
   * rules, and they can't be created, updated or deleted. Instead, they are
   * simple data objects describing the structure of the client database.
   */
  describeDatabaseEntities(
    request: DescribeDatabaseEntitiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DescribeDatabaseEntitiesResponse>>;
  /**
   * Searches/lists the background jobs for a specific
   * conversion workspace.
   *
   * The background jobs are not resources like conversion workspaces or
   * mapping rules, and they can't be created, updated or deleted.
   * Instead, they are a way to expose the data plane jobs log.
   */
  searchBackgroundJobs(
    request: SearchBackgroundJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchBackgroundJobsResponse>>;
  /**
   * Retrieves a list of committed revisions of a specific conversion
   * workspace.
   */
  describeConversionWorkspaceRevisions(
    request: DescribeConversionWorkspaceRevisionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DescribeConversionWorkspaceRevisionsResponse>>;
  /**
   * Fetches a set of static IP addresses that need to be allowlisted by the
   * customer when using the static-IP connectivity method.
   */
  fetchStaticIps(
    request: FetchStaticIpsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchStaticIpsResponse>>;
}

export interface DataMigrationServiceClient<CallOptionsExt = {}> {
  /** Lists migration jobs in a given project and location. */
  listMigrationJobs(
    request: DeepPartial<ListMigrationJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMigrationJobsResponse>;
  /** Gets details of a single migration job. */
  getMigrationJob(
    request: DeepPartial<GetMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MigrationJob>;
  /** Creates a new migration job in a given project and location. */
  createMigrationJob(
    request: DeepPartial<CreateMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single migration job. */
  updateMigrationJob(
    request: DeepPartial<UpdateMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single migration job. */
  deleteMigrationJob(
    request: DeepPartial<DeleteMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Start an already created migration job. */
  startMigrationJob(
    request: DeepPartial<StartMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Stops a running migration job. */
  stopMigrationJob(
    request: DeepPartial<StopMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Resume a migration job that is currently stopped and is resumable (was
   * stopped during CDC phase).
   */
  resumeMigrationJob(
    request: DeepPartial<ResumeMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Promote a migration job, stopping replication to the destination and
   * promoting the destination to be a standalone database.
   */
  promoteMigrationJob(
    request: DeepPartial<PromoteMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Verify a migration job, making sure the destination can reach the source
   * and that all configuration and prerequisites are met.
   */
  verifyMigrationJob(
    request: DeepPartial<VerifyMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Restart a stopped or failed migration job, resetting the destination
   * instance to its original state and starting the migration process from
   * scratch.
   */
  restartMigrationJob(
    request: DeepPartial<RestartMigrationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Generate a SSH configuration script to configure the reverse SSH
   * connectivity.
   */
  generateSshScript(
    request: DeepPartial<GenerateSshScriptRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SshScript>;
  /**
   * Generate a TCP Proxy configuration script to configure a cloud-hosted VM
   * running a TCP Proxy.
   */
  generateTcpProxyScript(
    request: DeepPartial<GenerateTcpProxyScriptRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TcpProxyScript>;
  /**
   * Retrieves a list of all connection profiles in a given project and
   * location.
   */
  listConnectionProfiles(
    request: DeepPartial<ListConnectionProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConnectionProfilesResponse>;
  /** Gets details of a single connection profile. */
  getConnectionProfile(
    request: DeepPartial<GetConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConnectionProfile>;
  /** Creates a new connection profile in a given project and location. */
  createConnectionProfile(
    request: DeepPartial<CreateConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Update the configuration of a single connection profile. */
  updateConnectionProfile(
    request: DeepPartial<UpdateConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a single Database Migration Service connection profile.
   * A connection profile can only be deleted if it is not in use by any
   * active migration jobs.
   */
  deleteConnectionProfile(
    request: DeepPartial<DeleteConnectionProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new private connection in a given project and location. */
  createPrivateConnection(
    request: DeepPartial<CreatePrivateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single private connection. */
  getPrivateConnection(
    request: DeepPartial<GetPrivateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PrivateConnection>;
  /** Retrieves a list of private connections in a given project and location. */
  listPrivateConnections(
    request: DeepPartial<ListPrivateConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPrivateConnectionsResponse>;
  /** Deletes a single Database Migration Service private connection. */
  deletePrivateConnection(
    request: DeepPartial<DeletePrivateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single conversion workspace. */
  getConversionWorkspace(
    request: DeepPartial<GetConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionWorkspace>;
  /** Lists conversion workspaces in a given project and location. */
  listConversionWorkspaces(
    request: DeepPartial<ListConversionWorkspacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversionWorkspacesResponse>;
  /** Creates a new conversion workspace in a given project and location. */
  createConversionWorkspace(
    request: DeepPartial<CreateConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single conversion workspace. */
  updateConversionWorkspace(
    request: DeepPartial<UpdateConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single conversion workspace. */
  deleteConversionWorkspace(
    request: DeepPartial<DeleteConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new mapping rule for a given conversion workspace. */
  createMappingRule(
    request: DeepPartial<CreateMappingRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MappingRule>;
  /** Deletes a single mapping rule. */
  deleteMappingRule(
    request: DeepPartial<DeleteMappingRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists the mapping rules for a specific conversion workspace. */
  listMappingRules(
    request: DeepPartial<ListMappingRulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMappingRulesResponse>;
  /** Gets the details of a mapping rule. */
  getMappingRule(
    request: DeepPartial<GetMappingRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MappingRule>;
  /**
   * Imports a snapshot of the source database into the
   * conversion workspace.
   */
  seedConversionWorkspace(
    request: DeepPartial<SeedConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Imports the mapping rules for a given conversion workspace.
   * Supports various formats of external rules files.
   */
  importMappingRules(
    request: DeepPartial<ImportMappingRulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a draft tree schema for the destination database. */
  convertConversionWorkspace(
    request: DeepPartial<ConvertConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Marks all the data in the conversion workspace as committed. */
  commitConversionWorkspace(
    request: DeepPartial<CommitConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Rolls back a conversion workspace to the last committed snapshot. */
  rollbackConversionWorkspace(
    request: DeepPartial<RollbackConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Applies draft tree onto a specific destination database. */
  applyConversionWorkspace(
    request: DeepPartial<ApplyConversionWorkspaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Describes the database entities tree for a specific conversion workspace
   * and a specific tree type.
   *
   * Database entities are not resources like conversion workspaces or mapping
   * rules, and they can't be created, updated or deleted. Instead, they are
   * simple data objects describing the structure of the client database.
   */
  describeDatabaseEntities(
    request: DeepPartial<DescribeDatabaseEntitiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DescribeDatabaseEntitiesResponse>;
  /**
   * Searches/lists the background jobs for a specific
   * conversion workspace.
   *
   * The background jobs are not resources like conversion workspaces or
   * mapping rules, and they can't be created, updated or deleted.
   * Instead, they are a way to expose the data plane jobs log.
   */
  searchBackgroundJobs(
    request: DeepPartial<SearchBackgroundJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchBackgroundJobsResponse>;
  /**
   * Retrieves a list of committed revisions of a specific conversion
   * workspace.
   */
  describeConversionWorkspaceRevisions(
    request: DeepPartial<DescribeConversionWorkspaceRevisionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DescribeConversionWorkspaceRevisionsResponse>;
  /**
   * Fetches a set of static IP addresses that need to be allowlisted by the
   * customer when using the static-IP connectivity method.
   */
  fetchStaticIps(
    request: DeepPartial<FetchStaticIpsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchStaticIpsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
