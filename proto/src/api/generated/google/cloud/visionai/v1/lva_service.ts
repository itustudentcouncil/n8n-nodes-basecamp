// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/visionai/v1/lva_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Analysis, Operator, Process } from "./lva_resources.js";

export const protobufPackage = "google.cloud.visionai.v1";

/** The enum of the types of the Registry. */
export enum Registry {
  /** REGISTRY_UNSPECIFIED - Registry is unspecified. */
  REGISTRY_UNSPECIFIED = 0,
  /** PUBLIC - Public Registry containing the public Operators released by Google. */
  PUBLIC = 1,
  /** PRIVATE - Private Registry containing the local registered operators. */
  PRIVATE = 2,
  UNRECOGNIZED = -1,
}

export function registryFromJSON(object: any): Registry {
  switch (object) {
    case 0:
    case "REGISTRY_UNSPECIFIED":
      return Registry.REGISTRY_UNSPECIFIED;
    case 1:
    case "PUBLIC":
      return Registry.PUBLIC;
    case 2:
    case "PRIVATE":
      return Registry.PRIVATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Registry.UNRECOGNIZED;
  }
}

export function registryToJSON(object: Registry): string {
  switch (object) {
    case Registry.REGISTRY_UNSPECIFIED:
      return "REGISTRY_UNSPECIFIED";
    case Registry.PUBLIC:
      return "PUBLIC";
    case Registry.PRIVATE:
      return "PRIVATE";
    case Registry.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message for requesting list of Operators. */
export interface ListOperatorsRequest {
  /** Required. Parent value for ListOperatorsRequest. */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results. */
  filter: string;
  /** Hint for how to order the results. */
  orderBy: string;
}

/** Message for response to listing Operators. */
export interface ListOperatorsResponse {
  /** The list of Operator */
  operators: Operator[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a Operator. */
export interface GetOperatorRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating a Operator. */
export interface CreateOperatorRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. Id of the requesting object. */
  operatorId: string;
  /** Required. The resource being created. */
  operator:
    | Operator
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating a Operator. */
export interface UpdateOperatorRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Operator resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated */
  operator:
    | Operator
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting a Operator */
export interface DeleteOperatorRequest {
  /** Required. Name of the resource */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for requesting list of Analyses */
export interface ListAnalysesRequest {
  /** Required. Parent value for ListAnalysesRequest */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing Analyses */
export interface ListAnalysesResponse {
  /** The list of Analysis */
  analyses: Analysis[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting an Analysis. */
export interface GetAnalysisRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating an Analysis. */
export interface CreateAnalysisRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. Id of the requesting object. */
  analysisId: string;
  /** Required. The resource being created. */
  analysis:
    | Analysis
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating an Analysis. */
export interface UpdateAnalysisRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Analysis resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  analysis:
    | Analysis
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting an Analysis. */
export interface DeleteAnalysisRequest {
  /** Required. Name of the resource. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for requesting list of Processes. */
export interface ListProcessesRequest {
  /** Required. Parent value for ListProcessesRequest. */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing Processes. */
export interface ListProcessesResponse {
  /** The list of Processes. */
  processes: Process[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a Process. */
export interface GetProcessRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating a Process. */
export interface CreateProcessRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. Id of the requesting object. */
  processId: string;
  /** Required. The resource being created. */
  process:
    | Process
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating a Process. */
export interface UpdateProcessRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Process resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  process:
    | Process
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting a Process. */
export interface DeleteProcessRequest {
  /** Required. Name of the resource. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request message for running the processes in a batch. */
export interface BatchRunProcessRequest {
  /** Required. The parent resource shared by all processes being created. */
  parent: string;
  /** Required. The create process requests. */
  requests: CreateProcessRequest[];
  /** Optional. Options for batch processes. */
  options:
    | BatchRunProcessRequest_BatchRunProcessOptions
    | undefined;
  /** Output only. The batch ID. */
  batchId: string;
}

/** Options for batch processes. */
export interface BatchRunProcessRequest_BatchRunProcessOptions {
  /** The retry counts per process. Default: 3. */
  retryCount: number;
  /** The batch size. Default: 5, maximum: 100. */
  batchSize: number;
}

/** Response message for running the processes in a batch. */
export interface BatchRunProcessResponse {
  /** The batch ID. */
  batchId: string;
  /** Processes created. */
  processes: Process[];
}

/** Request message for querying operator info. */
export interface ResolveOperatorInfoRequest {
  /** Required. Parent value for ResolveOperatorInfoRequest. */
  parent: string;
  /** Required. The operator queries. */
  queries: OperatorQuery[];
}

/** OperatorQuery represents one query to a Operator. */
export interface OperatorQuery {
  /** Required. The canonical Name of the operator. e.g. OccupancyCounting. */
  operator: string;
  /** Optional. Tag of the operator. */
  tag: string;
  /** Optional. Registry of the operator. */
  registry: Registry;
}

/** Response message of ResolveOperatorInfo API. */
export interface ResolveOperatorInfoResponse {
  /** Operators with detailed information. */
  operators: Operator[];
}

/** Request message of ListPublicOperatorsRequest API. */
export interface ListPublicOperatorsRequest {
  /** Required. Parent value for ListPublicOperatorsRequest. */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results. */
  filter: string;
  /** Hint for how to order the results. */
  orderBy: string;
}

/** Response message of ListPublicOperators API. */
export interface ListPublicOperatorsResponse {
  /** The list of Operator */
  operators: Operator[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

function createBaseListOperatorsRequest(): ListOperatorsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListOperatorsRequest: MessageFns<ListOperatorsRequest> = {
  encode(message: ListOperatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOperatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOperatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOperatorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListOperatorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOperatorsRequest>): ListOperatorsRequest {
    return ListOperatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOperatorsRequest>): ListOperatorsRequest {
    const message = createBaseListOperatorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListOperatorsResponse(): ListOperatorsResponse {
  return { operators: [], nextPageToken: "", unreachable: [] };
}

export const ListOperatorsResponse: MessageFns<ListOperatorsResponse> = {
  encode(message: ListOperatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOperatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOperatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOperatorsResponse {
    return {
      operators: globalThis.Array.isArray(object?.operators)
        ? object.operators.map((e: any) => Operator.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListOperatorsResponse): unknown {
    const obj: any = {};
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOperatorsResponse>): ListOperatorsResponse {
    return ListOperatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOperatorsResponse>): ListOperatorsResponse {
    const message = createBaseListOperatorsResponse();
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetOperatorRequest(): GetOperatorRequest {
  return { name: "" };
}

export const GetOperatorRequest: MessageFns<GetOperatorRequest> = {
  encode(message: GetOperatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOperatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOperatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOperatorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetOperatorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetOperatorRequest>): GetOperatorRequest {
    return GetOperatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOperatorRequest>): GetOperatorRequest {
    const message = createBaseGetOperatorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateOperatorRequest(): CreateOperatorRequest {
  return { parent: "", operatorId: "", operator: undefined, requestId: "" };
}

export const CreateOperatorRequest: MessageFns<CreateOperatorRequest> = {
  encode(message: CreateOperatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.operatorId !== "") {
      writer.uint32(18).string(message.operatorId);
    }
    if (message.operator !== undefined) {
      Operator.encode(message.operator, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOperatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOperatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.operator = Operator.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOperatorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      operatorId: isSet(object.operatorId) ? globalThis.String(object.operatorId) : "",
      operator: isSet(object.operator) ? Operator.fromJSON(object.operator) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateOperatorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.operatorId !== "") {
      obj.operatorId = message.operatorId;
    }
    if (message.operator !== undefined) {
      obj.operator = Operator.toJSON(message.operator);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateOperatorRequest>): CreateOperatorRequest {
    return CreateOperatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateOperatorRequest>): CreateOperatorRequest {
    const message = createBaseCreateOperatorRequest();
    message.parent = object.parent ?? "";
    message.operatorId = object.operatorId ?? "";
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? Operator.fromPartial(object.operator)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateOperatorRequest(): UpdateOperatorRequest {
  return { updateMask: undefined, operator: undefined, requestId: "" };
}

export const UpdateOperatorRequest: MessageFns<UpdateOperatorRequest> = {
  encode(message: UpdateOperatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.operator !== undefined) {
      Operator.encode(message.operator, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOperatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOperatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operator = Operator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOperatorRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      operator: isSet(object.operator) ? Operator.fromJSON(object.operator) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateOperatorRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.operator !== undefined) {
      obj.operator = Operator.toJSON(message.operator);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateOperatorRequest>): UpdateOperatorRequest {
    return UpdateOperatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOperatorRequest>): UpdateOperatorRequest {
    const message = createBaseUpdateOperatorRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? Operator.fromPartial(object.operator)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteOperatorRequest(): DeleteOperatorRequest {
  return { name: "", requestId: "" };
}

export const DeleteOperatorRequest: MessageFns<DeleteOperatorRequest> = {
  encode(message: DeleteOperatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteOperatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOperatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteOperatorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteOperatorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteOperatorRequest>): DeleteOperatorRequest {
    return DeleteOperatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteOperatorRequest>): DeleteOperatorRequest {
    const message = createBaseDeleteOperatorRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListAnalysesRequest(): ListAnalysesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListAnalysesRequest: MessageFns<ListAnalysesRequest> = {
  encode(message: ListAnalysesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnalysesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnalysesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnalysesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAnalysesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnalysesRequest>): ListAnalysesRequest {
    return ListAnalysesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnalysesRequest>): ListAnalysesRequest {
    const message = createBaseListAnalysesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAnalysesResponse(): ListAnalysesResponse {
  return { analyses: [], nextPageToken: "", unreachable: [] };
}

export const ListAnalysesResponse: MessageFns<ListAnalysesResponse> = {
  encode(message: ListAnalysesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.analyses) {
      Analysis.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnalysesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnalysesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.analyses.push(Analysis.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnalysesResponse {
    return {
      analyses: globalThis.Array.isArray(object?.analyses) ? object.analyses.map((e: any) => Analysis.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAnalysesResponse): unknown {
    const obj: any = {};
    if (message.analyses?.length) {
      obj.analyses = message.analyses.map((e) => Analysis.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnalysesResponse>): ListAnalysesResponse {
    return ListAnalysesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnalysesResponse>): ListAnalysesResponse {
    const message = createBaseListAnalysesResponse();
    message.analyses = object.analyses?.map((e) => Analysis.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAnalysisRequest(): GetAnalysisRequest {
  return { name: "" };
}

export const GetAnalysisRequest: MessageFns<GetAnalysisRequest> = {
  encode(message: GetAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnalysisRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnalysisRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnalysisRequest>): GetAnalysisRequest {
    return GetAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnalysisRequest>): GetAnalysisRequest {
    const message = createBaseGetAnalysisRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAnalysisRequest(): CreateAnalysisRequest {
  return { parent: "", analysisId: "", analysis: undefined, requestId: "" };
}

export const CreateAnalysisRequest: MessageFns<CreateAnalysisRequest> = {
  encode(message: CreateAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.analysisId !== "") {
      writer.uint32(18).string(message.analysisId);
    }
    if (message.analysis !== undefined) {
      Analysis.encode(message.analysis, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.analysisId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.analysis = Analysis.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAnalysisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      analysisId: isSet(object.analysisId) ? globalThis.String(object.analysisId) : "",
      analysis: isSet(object.analysis) ? Analysis.fromJSON(object.analysis) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateAnalysisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.analysisId !== "") {
      obj.analysisId = message.analysisId;
    }
    if (message.analysis !== undefined) {
      obj.analysis = Analysis.toJSON(message.analysis);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAnalysisRequest>): CreateAnalysisRequest {
    return CreateAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAnalysisRequest>): CreateAnalysisRequest {
    const message = createBaseCreateAnalysisRequest();
    message.parent = object.parent ?? "";
    message.analysisId = object.analysisId ?? "";
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? Analysis.fromPartial(object.analysis)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateAnalysisRequest(): UpdateAnalysisRequest {
  return { updateMask: undefined, analysis: undefined, requestId: "" };
}

export const UpdateAnalysisRequest: MessageFns<UpdateAnalysisRequest> = {
  encode(message: UpdateAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.analysis !== undefined) {
      Analysis.encode(message.analysis, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.analysis = Analysis.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAnalysisRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      analysis: isSet(object.analysis) ? Analysis.fromJSON(object.analysis) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateAnalysisRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.analysis !== undefined) {
      obj.analysis = Analysis.toJSON(message.analysis);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAnalysisRequest>): UpdateAnalysisRequest {
    return UpdateAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAnalysisRequest>): UpdateAnalysisRequest {
    const message = createBaseUpdateAnalysisRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? Analysis.fromPartial(object.analysis)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteAnalysisRequest(): DeleteAnalysisRequest {
  return { name: "", requestId: "" };
}

export const DeleteAnalysisRequest: MessageFns<DeleteAnalysisRequest> = {
  encode(message: DeleteAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAnalysisRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteAnalysisRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAnalysisRequest>): DeleteAnalysisRequest {
    return DeleteAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAnalysisRequest>): DeleteAnalysisRequest {
    const message = createBaseDeleteAnalysisRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListProcessesRequest(): ListProcessesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListProcessesRequest: MessageFns<ListProcessesRequest> = {
  encode(message: ListProcessesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListProcessesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessesRequest>): ListProcessesRequest {
    return ListProcessesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessesRequest>): ListProcessesRequest {
    const message = createBaseListProcessesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListProcessesResponse(): ListProcessesResponse {
  return { processes: [], nextPageToken: "", unreachable: [] };
}

export const ListProcessesResponse: MessageFns<ListProcessesResponse> = {
  encode(message: ListProcessesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.processes) {
      Process.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processes.push(Process.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessesResponse {
    return {
      processes: globalThis.Array.isArray(object?.processes)
        ? object.processes.map((e: any) => Process.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListProcessesResponse): unknown {
    const obj: any = {};
    if (message.processes?.length) {
      obj.processes = message.processes.map((e) => Process.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessesResponse>): ListProcessesResponse {
    return ListProcessesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessesResponse>): ListProcessesResponse {
    const message = createBaseListProcessesResponse();
    message.processes = object.processes?.map((e) => Process.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetProcessRequest(): GetProcessRequest {
  return { name: "" };
}

export const GetProcessRequest: MessageFns<GetProcessRequest> = {
  encode(message: GetProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProcessRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProcessRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProcessRequest>): GetProcessRequest {
    return GetProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProcessRequest>): GetProcessRequest {
    const message = createBaseGetProcessRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateProcessRequest(): CreateProcessRequest {
  return { parent: "", processId: "", process: undefined, requestId: "" };
}

export const CreateProcessRequest: MessageFns<CreateProcessRequest> = {
  encode(message: CreateProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.processId !== "") {
      writer.uint32(18).string(message.processId);
    }
    if (message.process !== undefined) {
      Process.encode(message.process, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.process = Process.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProcessRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      processId: isSet(object.processId) ? globalThis.String(object.processId) : "",
      process: isSet(object.process) ? Process.fromJSON(object.process) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateProcessRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.processId !== "") {
      obj.processId = message.processId;
    }
    if (message.process !== undefined) {
      obj.process = Process.toJSON(message.process);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProcessRequest>): CreateProcessRequest {
    return CreateProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProcessRequest>): CreateProcessRequest {
    const message = createBaseCreateProcessRequest();
    message.parent = object.parent ?? "";
    message.processId = object.processId ?? "";
    message.process = (object.process !== undefined && object.process !== null)
      ? Process.fromPartial(object.process)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateProcessRequest(): UpdateProcessRequest {
  return { updateMask: undefined, process: undefined, requestId: "" };
}

export const UpdateProcessRequest: MessageFns<UpdateProcessRequest> = {
  encode(message: UpdateProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.process !== undefined) {
      Process.encode(message.process, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.process = Process.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProcessRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      process: isSet(object.process) ? Process.fromJSON(object.process) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateProcessRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.process !== undefined) {
      obj.process = Process.toJSON(message.process);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProcessRequest>): UpdateProcessRequest {
    return UpdateProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProcessRequest>): UpdateProcessRequest {
    const message = createBaseUpdateProcessRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.process = (object.process !== undefined && object.process !== null)
      ? Process.fromPartial(object.process)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteProcessRequest(): DeleteProcessRequest {
  return { name: "", requestId: "" };
}

export const DeleteProcessRequest: MessageFns<DeleteProcessRequest> = {
  encode(message: DeleteProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProcessRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteProcessRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProcessRequest>): DeleteProcessRequest {
    return DeleteProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProcessRequest>): DeleteProcessRequest {
    const message = createBaseDeleteProcessRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseBatchRunProcessRequest(): BatchRunProcessRequest {
  return { parent: "", requests: [], options: undefined, batchId: "" };
}

export const BatchRunProcessRequest: MessageFns<BatchRunProcessRequest> = {
  encode(message: BatchRunProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateProcessRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.options !== undefined) {
      BatchRunProcessRequest_BatchRunProcessOptions.encode(message.options, writer.uint32(26).fork()).join();
    }
    if (message.batchId !== "") {
      writer.uint32(34).string(message.batchId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchRunProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchRunProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(CreateProcessRequest.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.options = BatchRunProcessRequest_BatchRunProcessOptions.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.batchId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchRunProcessRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateProcessRequest.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? BatchRunProcessRequest_BatchRunProcessOptions.fromJSON(object.options)
        : undefined,
      batchId: isSet(object.batchId) ? globalThis.String(object.batchId) : "",
    };
  },

  toJSON(message: BatchRunProcessRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateProcessRequest.toJSON(e));
    }
    if (message.options !== undefined) {
      obj.options = BatchRunProcessRequest_BatchRunProcessOptions.toJSON(message.options);
    }
    if (message.batchId !== "") {
      obj.batchId = message.batchId;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchRunProcessRequest>): BatchRunProcessRequest {
    return BatchRunProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchRunProcessRequest>): BatchRunProcessRequest {
    const message = createBaseBatchRunProcessRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateProcessRequest.fromPartial(e)) || [];
    message.options = (object.options !== undefined && object.options !== null)
      ? BatchRunProcessRequest_BatchRunProcessOptions.fromPartial(object.options)
      : undefined;
    message.batchId = object.batchId ?? "";
    return message;
  },
};

function createBaseBatchRunProcessRequest_BatchRunProcessOptions(): BatchRunProcessRequest_BatchRunProcessOptions {
  return { retryCount: 0, batchSize: 0 };
}

export const BatchRunProcessRequest_BatchRunProcessOptions: MessageFns<BatchRunProcessRequest_BatchRunProcessOptions> =
  {
    encode(
      message: BatchRunProcessRequest_BatchRunProcessOptions,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.retryCount !== 0) {
        writer.uint32(8).int32(message.retryCount);
      }
      if (message.batchSize !== 0) {
        writer.uint32(16).int32(message.batchSize);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BatchRunProcessRequest_BatchRunProcessOptions {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseBatchRunProcessRequest_BatchRunProcessOptions();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.retryCount = reader.int32();
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.batchSize = reader.int32();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): BatchRunProcessRequest_BatchRunProcessOptions {
      return {
        retryCount: isSet(object.retryCount) ? globalThis.Number(object.retryCount) : 0,
        batchSize: isSet(object.batchSize) ? globalThis.Number(object.batchSize) : 0,
      };
    },

    toJSON(message: BatchRunProcessRequest_BatchRunProcessOptions): unknown {
      const obj: any = {};
      if (message.retryCount !== 0) {
        obj.retryCount = Math.round(message.retryCount);
      }
      if (message.batchSize !== 0) {
        obj.batchSize = Math.round(message.batchSize);
      }
      return obj;
    },

    create(
      base?: DeepPartial<BatchRunProcessRequest_BatchRunProcessOptions>,
    ): BatchRunProcessRequest_BatchRunProcessOptions {
      return BatchRunProcessRequest_BatchRunProcessOptions.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<BatchRunProcessRequest_BatchRunProcessOptions>,
    ): BatchRunProcessRequest_BatchRunProcessOptions {
      const message = createBaseBatchRunProcessRequest_BatchRunProcessOptions();
      message.retryCount = object.retryCount ?? 0;
      message.batchSize = object.batchSize ?? 0;
      return message;
    },
  };

function createBaseBatchRunProcessResponse(): BatchRunProcessResponse {
  return { batchId: "", processes: [] };
}

export const BatchRunProcessResponse: MessageFns<BatchRunProcessResponse> = {
  encode(message: BatchRunProcessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.batchId !== "") {
      writer.uint32(10).string(message.batchId);
    }
    for (const v of message.processes) {
      Process.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchRunProcessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchRunProcessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batchId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processes.push(Process.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchRunProcessResponse {
    return {
      batchId: isSet(object.batchId) ? globalThis.String(object.batchId) : "",
      processes: globalThis.Array.isArray(object?.processes)
        ? object.processes.map((e: any) => Process.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchRunProcessResponse): unknown {
    const obj: any = {};
    if (message.batchId !== "") {
      obj.batchId = message.batchId;
    }
    if (message.processes?.length) {
      obj.processes = message.processes.map((e) => Process.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchRunProcessResponse>): BatchRunProcessResponse {
    return BatchRunProcessResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchRunProcessResponse>): BatchRunProcessResponse {
    const message = createBaseBatchRunProcessResponse();
    message.batchId = object.batchId ?? "";
    message.processes = object.processes?.map((e) => Process.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResolveOperatorInfoRequest(): ResolveOperatorInfoRequest {
  return { parent: "", queries: [] };
}

export const ResolveOperatorInfoRequest: MessageFns<ResolveOperatorInfoRequest> = {
  encode(message: ResolveOperatorInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.queries) {
      OperatorQuery.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveOperatorInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveOperatorInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(OperatorQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveOperatorInfoRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => OperatorQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResolveOperatorInfoRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => OperatorQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveOperatorInfoRequest>): ResolveOperatorInfoRequest {
    return ResolveOperatorInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveOperatorInfoRequest>): ResolveOperatorInfoRequest {
    const message = createBaseResolveOperatorInfoRequest();
    message.parent = object.parent ?? "";
    message.queries = object.queries?.map((e) => OperatorQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOperatorQuery(): OperatorQuery {
  return { operator: "", tag: "", registry: 0 };
}

export const OperatorQuery: MessageFns<OperatorQuery> = {
  encode(message: OperatorQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== "") {
      writer.uint32(10).string(message.operator);
    }
    if (message.tag !== "") {
      writer.uint32(18).string(message.tag);
    }
    if (message.registry !== 0) {
      writer.uint32(24).int32(message.registry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tag = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.registry = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorQuery {
    return {
      operator: isSet(object.operator) ? globalThis.String(object.operator) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      registry: isSet(object.registry) ? registryFromJSON(object.registry) : 0,
    };
  },

  toJSON(message: OperatorQuery): unknown {
    const obj: any = {};
    if (message.operator !== "") {
      obj.operator = message.operator;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.registry !== 0) {
      obj.registry = registryToJSON(message.registry);
    }
    return obj;
  },

  create(base?: DeepPartial<OperatorQuery>): OperatorQuery {
    return OperatorQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperatorQuery>): OperatorQuery {
    const message = createBaseOperatorQuery();
    message.operator = object.operator ?? "";
    message.tag = object.tag ?? "";
    message.registry = object.registry ?? 0;
    return message;
  },
};

function createBaseResolveOperatorInfoResponse(): ResolveOperatorInfoResponse {
  return { operators: [] };
}

export const ResolveOperatorInfoResponse: MessageFns<ResolveOperatorInfoResponse> = {
  encode(message: ResolveOperatorInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveOperatorInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveOperatorInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveOperatorInfoResponse {
    return {
      operators: globalThis.Array.isArray(object?.operators)
        ? object.operators.map((e: any) => Operator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResolveOperatorInfoResponse): unknown {
    const obj: any = {};
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveOperatorInfoResponse>): ResolveOperatorInfoResponse {
    return ResolveOperatorInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveOperatorInfoResponse>): ResolveOperatorInfoResponse {
    const message = createBaseResolveOperatorInfoResponse();
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListPublicOperatorsRequest(): ListPublicOperatorsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListPublicOperatorsRequest: MessageFns<ListPublicOperatorsRequest> = {
  encode(message: ListPublicOperatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPublicOperatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPublicOperatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPublicOperatorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListPublicOperatorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPublicOperatorsRequest>): ListPublicOperatorsRequest {
    return ListPublicOperatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPublicOperatorsRequest>): ListPublicOperatorsRequest {
    const message = createBaseListPublicOperatorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListPublicOperatorsResponse(): ListPublicOperatorsResponse {
  return { operators: [], nextPageToken: "" };
}

export const ListPublicOperatorsResponse: MessageFns<ListPublicOperatorsResponse> = {
  encode(message: ListPublicOperatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPublicOperatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPublicOperatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPublicOperatorsResponse {
    return {
      operators: globalThis.Array.isArray(object?.operators)
        ? object.operators.map((e: any) => Operator.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPublicOperatorsResponse): unknown {
    const obj: any = {};
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPublicOperatorsResponse>): ListPublicOperatorsResponse {
    return ListPublicOperatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPublicOperatorsResponse>): ListPublicOperatorsResponse {
    const message = createBaseListPublicOperatorsResponse();
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service describing handlers for resources. The service enables clients to run
 * Live Video Analytics (LVA) on the streaming inputs.
 */
export type LiveVideoAnalyticsDefinition = typeof LiveVideoAnalyticsDefinition;
export const LiveVideoAnalyticsDefinition = {
  name: "LiveVideoAnalytics",
  fullName: "google.cloud.visionai.v1.LiveVideoAnalytics",
  methods: {
    /** ListPublicOperators returns all the operators in public registry. */
    listPublicOperators: {
      name: "ListPublicOperators",
      requestType: ListPublicOperatorsRequest,
      requestStream: false,
      responseType: ListPublicOperatorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              80,
              117,
              98,
              108,
              105,
              99,
              79,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** ResolveOperatorInfo returns the operator information based on the request. */
    resolveOperatorInfo: {
      name: "ResolveOperatorInfo",
      requestType: ResolveOperatorInfoRequest,
      requestStream: false,
      responseType: ResolveOperatorInfoResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 113, 117, 101, 114, 105, 101, 115])],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              111,
              108,
              118,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              73,
              110,
              102,
              111,
            ]),
          ],
        },
      },
    },
    /** Lists Operators in a given project and location. */
    listOperators: {
      name: "ListOperators",
      requestType: ListOperatorsRequest,
      requestStream: false,
      responseType: ListOperatorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Operator. */
    getOperator: {
      name: "GetOperator",
      requestType: GetOperatorRequest,
      requestStream: false,
      responseType: Operator,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Operator in a given project and location. */
    createOperator: {
      name: "CreateOperator",
      requestType: CreateOperatorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              79,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              8,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Operator. */
    updateOperator: {
      name: "UpdateOperator",
      requestType: UpdateOperatorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              79,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              8,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              50,
              54,
              47,
              118,
              49,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Operator. */
    deleteOperator: {
      name: "DeleteOperator",
      requestType: DeleteOperatorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Analyses in a given project and location. */
    listAnalyses: {
      name: "ListAnalyses",
      requestType: ListAnalysesRequest,
      requestStream: false,
      responseType: ListAnalysesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Analysis. */
    getAnalysis: {
      name: "GetAnalysis",
      requestType: GetAnalysisRequest,
      requestStream: false,
      responseType: Analysis,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Analysis in a given project and location. */
    createAnalysis: {
      name: "CreateAnalysis",
      requestType: CreateAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              65,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              44,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              8,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Analysis. */
    updateAnalysis: {
      name: "UpdateAnalysis",
      requestType: UpdateAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              65,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              8,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              50,
              64,
              47,
              118,
              49,
              47,
              123,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Analysis. */
    deleteAnalysis: {
      name: "DeleteAnalysis",
      requestType: DeleteAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              42,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Processes in a given project and location. */
    listProcesses: {
      name: "ListProcesses",
      requestType: ListProcessesRequest,
      requestStream: false,
      responseType: ListProcessesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Process. */
    getProcess: {
      name: "GetProcess",
      requestType: GetProcessRequest,
      requestStream: false,
      responseType: Process,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Process in a given project and location. */
    createProcess: {
      name: "CreateProcess",
      requestType: CreateProcessRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              44,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              7,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Process. */
    updateProcess: {
      name: "UpdateProcess",
      requestType: UpdateProcessRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 112, 114, 111, 99, 101, 115, 115, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              7,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              50,
              64,
              47,
              118,
              49,
              47,
              123,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Process. */
    deleteProcess: {
      name: "DeleteProcess",
      requestType: DeleteProcessRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Run all of the processes to "completion". Max time for each process is
     * the LRO time limit.
     */
    batchRunProcess: {
      name: "BatchRunProcess",
      requestType: BatchRunProcessRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              44,
              10,
              23,
              66,
              97,
              116,
              99,
              104,
              82,
              117,
              110,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 114, 101, 113, 117, 101, 115, 116, 115])],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              82,
              117,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface LiveVideoAnalyticsServiceImplementation<CallContextExt = {}> {
  /** ListPublicOperators returns all the operators in public registry. */
  listPublicOperators(
    request: ListPublicOperatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPublicOperatorsResponse>>;
  /** ResolveOperatorInfo returns the operator information based on the request. */
  resolveOperatorInfo(
    request: ResolveOperatorInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResolveOperatorInfoResponse>>;
  /** Lists Operators in a given project and location. */
  listOperators(
    request: ListOperatorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOperatorsResponse>>;
  /** Gets details of a single Operator. */
  getOperator(request: GetOperatorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operator>>;
  /** Creates a new Operator in a given project and location. */
  createOperator(
    request: CreateOperatorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Operator. */
  updateOperator(
    request: UpdateOperatorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Operator. */
  deleteOperator(
    request: DeleteOperatorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists Analyses in a given project and location. */
  listAnalyses(
    request: ListAnalysesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAnalysesResponse>>;
  /** Gets details of a single Analysis. */
  getAnalysis(request: GetAnalysisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Analysis>>;
  /** Creates a new Analysis in a given project and location. */
  createAnalysis(
    request: CreateAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Analysis. */
  updateAnalysis(
    request: UpdateAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Analysis. */
  deleteAnalysis(
    request: DeleteAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists Processes in a given project and location. */
  listProcesses(
    request: ListProcessesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProcessesResponse>>;
  /** Gets details of a single Process. */
  getProcess(request: GetProcessRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Process>>;
  /** Creates a new Process in a given project and location. */
  createProcess(request: CreateProcessRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Process. */
  updateProcess(request: UpdateProcessRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a single Process. */
  deleteProcess(request: DeleteProcessRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Run all of the processes to "completion". Max time for each process is
   * the LRO time limit.
   */
  batchRunProcess(
    request: BatchRunProcessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface LiveVideoAnalyticsClient<CallOptionsExt = {}> {
  /** ListPublicOperators returns all the operators in public registry. */
  listPublicOperators(
    request: DeepPartial<ListPublicOperatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPublicOperatorsResponse>;
  /** ResolveOperatorInfo returns the operator information based on the request. */
  resolveOperatorInfo(
    request: DeepPartial<ResolveOperatorInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResolveOperatorInfoResponse>;
  /** Lists Operators in a given project and location. */
  listOperators(
    request: DeepPartial<ListOperatorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOperatorsResponse>;
  /** Gets details of a single Operator. */
  getOperator(request: DeepPartial<GetOperatorRequest>, options?: CallOptions & CallOptionsExt): Promise<Operator>;
  /** Creates a new Operator in a given project and location. */
  createOperator(
    request: DeepPartial<CreateOperatorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single Operator. */
  updateOperator(
    request: DeepPartial<UpdateOperatorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Operator. */
  deleteOperator(
    request: DeepPartial<DeleteOperatorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists Analyses in a given project and location. */
  listAnalyses(
    request: DeepPartial<ListAnalysesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAnalysesResponse>;
  /** Gets details of a single Analysis. */
  getAnalysis(request: DeepPartial<GetAnalysisRequest>, options?: CallOptions & CallOptionsExt): Promise<Analysis>;
  /** Creates a new Analysis in a given project and location. */
  createAnalysis(
    request: DeepPartial<CreateAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single Analysis. */
  updateAnalysis(
    request: DeepPartial<UpdateAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Analysis. */
  deleteAnalysis(
    request: DeepPartial<DeleteAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists Processes in a given project and location. */
  listProcesses(
    request: DeepPartial<ListProcessesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProcessesResponse>;
  /** Gets details of a single Process. */
  getProcess(request: DeepPartial<GetProcessRequest>, options?: CallOptions & CallOptionsExt): Promise<Process>;
  /** Creates a new Process in a given project and location. */
  createProcess(request: DeepPartial<CreateProcessRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a single Process. */
  updateProcess(request: DeepPartial<UpdateProcessRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a single Process. */
  deleteProcess(request: DeepPartial<DeleteProcessRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Run all of the processes to "completion". Max time for each process is
   * the LRO time limit.
   */
  batchRunProcess(
    request: DeepPartial<BatchRunProcessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
