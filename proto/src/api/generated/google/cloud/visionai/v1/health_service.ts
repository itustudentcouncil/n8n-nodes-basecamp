// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/visionai/v1/health_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.visionai.v1";

/** HealthCheckRequest is the request message for Check. */
export interface HealthCheckRequest {
  /** The parent of the resource. */
  cluster: string;
}

/** HealthCheckResponse is the response message for Check. */
export interface HealthCheckResponse {
  /** Indicates whether the cluster is in healthy state or not. */
  healthy: boolean;
  /** Reason of why the cluster is in unhealthy state. */
  reason: string;
  /** Other information of the cluster client may be interested. */
  clusterInfo: ClusterInfo | undefined;
}

export interface ClusterInfo {
  /** The number of active streams in the cluster. */
  streamsCount: number;
  /** The number of active processes in the cluster. */
  processesCount: number;
}

function createBaseHealthCheckRequest(): HealthCheckRequest {
  return { cluster: "" };
}

export const HealthCheckRequest: MessageFns<HealthCheckRequest> = {
  encode(message: HealthCheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckRequest {
    return { cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : "" };
  },

  toJSON(message: HealthCheckRequest): unknown {
    const obj: any = {};
    if (message.cluster !== "") {
      obj.cluster = message.cluster;
    }
    return obj;
  },

  create(base?: DeepPartial<HealthCheckRequest>): HealthCheckRequest {
    return HealthCheckRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HealthCheckRequest>): HealthCheckRequest {
    const message = createBaseHealthCheckRequest();
    message.cluster = object.cluster ?? "";
    return message;
  },
};

function createBaseHealthCheckResponse(): HealthCheckResponse {
  return { healthy: false, reason: "", clusterInfo: undefined };
}

export const HealthCheckResponse: MessageFns<HealthCheckResponse> = {
  encode(message: HealthCheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.healthy !== false) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    if (message.clusterInfo !== undefined) {
      ClusterInfo.encode(message.clusterInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clusterInfo = ClusterInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckResponse {
    return {
      healthy: isSet(object.healthy) ? globalThis.Boolean(object.healthy) : false,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      clusterInfo: isSet(object.clusterInfo) ? ClusterInfo.fromJSON(object.clusterInfo) : undefined,
    };
  },

  toJSON(message: HealthCheckResponse): unknown {
    const obj: any = {};
    if (message.healthy !== false) {
      obj.healthy = message.healthy;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.clusterInfo !== undefined) {
      obj.clusterInfo = ClusterInfo.toJSON(message.clusterInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<HealthCheckResponse>): HealthCheckResponse {
    return HealthCheckResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HealthCheckResponse>): HealthCheckResponse {
    const message = createBaseHealthCheckResponse();
    message.healthy = object.healthy ?? false;
    message.reason = object.reason ?? "";
    message.clusterInfo = (object.clusterInfo !== undefined && object.clusterInfo !== null)
      ? ClusterInfo.fromPartial(object.clusterInfo)
      : undefined;
    return message;
  },
};

function createBaseClusterInfo(): ClusterInfo {
  return { streamsCount: 0, processesCount: 0 };
}

export const ClusterInfo: MessageFns<ClusterInfo> = {
  encode(message: ClusterInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamsCount !== 0) {
      writer.uint32(8).int32(message.streamsCount);
    }
    if (message.processesCount !== 0) {
      writer.uint32(16).int32(message.processesCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.streamsCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.processesCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterInfo {
    return {
      streamsCount: isSet(object.streamsCount) ? globalThis.Number(object.streamsCount) : 0,
      processesCount: isSet(object.processesCount) ? globalThis.Number(object.processesCount) : 0,
    };
  },

  toJSON(message: ClusterInfo): unknown {
    const obj: any = {};
    if (message.streamsCount !== 0) {
      obj.streamsCount = Math.round(message.streamsCount);
    }
    if (message.processesCount !== 0) {
      obj.processesCount = Math.round(message.processesCount);
    }
    return obj;
  },

  create(base?: DeepPartial<ClusterInfo>): ClusterInfo {
    return ClusterInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClusterInfo>): ClusterInfo {
    const message = createBaseClusterInfo();
    message.streamsCount = object.streamsCount ?? 0;
    message.processesCount = object.processesCount ?? 0;
    return message;
  },
};

/**
 * HealthCheckService provides an interface for Vertex AI Vision Cluster Health
 * Check.
 */
export type HealthCheckServiceDefinition = typeof HealthCheckServiceDefinition;
export const HealthCheckServiceDefinition = {
  name: "HealthCheckService",
  fullName: "google.cloud.visionai.v1.HealthCheckService",
  methods: {
    /** HealthCheck method checks the health status of the cluster. */
    healthCheck: {
      name: "HealthCheck",
      requestType: HealthCheckRequest,
      requestStream: false,
      responseType: HealthCheckResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              104,
              101,
              97,
              108,
              116,
              104,
              67,
              104,
              101,
              99,
              107,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface HealthCheckServiceImplementation<CallContextExt = {}> {
  /** HealthCheck method checks the health status of the cluster. */
  healthCheck(
    request: HealthCheckRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HealthCheckResponse>>;
}

export interface HealthCheckServiceClient<CallOptionsExt = {}> {
  /** HealthCheck method checks the health status of the cluster. */
  healthCheck(
    request: DeepPartial<HealthCheckRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HealthCheckResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
