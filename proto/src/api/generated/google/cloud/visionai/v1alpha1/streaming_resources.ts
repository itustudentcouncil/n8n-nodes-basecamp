// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/visionai/v1alpha1/streaming_resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.visionai.v1alpha1";

/** The descriptor for a gstreamer buffer payload. */
export interface GstreamerBufferDescriptor {
  /** The caps string of the payload. */
  capsString: string;
  /** Whether the buffer is a key frame. */
  isKeyFrame: boolean;
  /** PTS of the frame. */
  ptsTime:
    | Date
    | undefined;
  /** DTS of the frame. */
  dtsTime:
    | Date
    | undefined;
  /** Duration of the frame. */
  duration: Duration | undefined;
}

/** The descriptor for a raw image. */
export interface RawImageDescriptor {
  /** Raw image format. Its possible values are: "srgb". */
  format: string;
  /** The height of the image. */
  height: number;
  /** The width of the image. */
  width: number;
}

/** The message that represents the data type of a packet. */
export interface PacketType {
  /**
   * The type class of the packet. Its possible values are:
   * "gst", "protobuf", and "string".
   */
  typeClass: string;
  /** The type descriptor. */
  typeDescriptor: PacketType_TypeDescriptor | undefined;
}

/** The message that fully specifies the type of the packet. */
export interface PacketType_TypeDescriptor {
  /** GstreamerBufferDescriptor is the descriptor for gstreamer buffer type. */
  gstreamerBufferDescriptor?:
    | GstreamerBufferDescriptor
    | undefined;
  /** RawImageDescriptor is the descriptor for the raw image type. */
  rawImageDescriptor?:
    | RawImageDescriptor
    | undefined;
  /**
   * The type of the packet. Its possible values is codec dependent.
   *
   * The fully qualified type name is always the concatenation of the
   * value in `type_class` together with the value in `type`, separated by a
   * '/'.
   *
   * Note that specific codecs can define their own type hierarchy, and so the
   * type string here can in fact be separated by multiple '/'s of its own.
   *
   * Please see the open source SDK for specific codec documentation.
   */
  type: string;
}

/** The message that represents server metadata. */
export interface ServerMetadata {
  /** The offset position for the packet in its stream. */
  offset: Long;
  /**
   * The timestamp at which the stream server receives this packet. This is
   * based on the local clock of on the server side. It is guaranteed to be
   * monotonically increasing for the packets within each session; however
   * this timestamp is not comparable across packets sent to the same stream
   * different sessions. Session here refers to one individual gRPC streaming
   * request to the stream server.
   */
  ingestTime: Date | undefined;
}

/** The message that represents series metadata. */
export interface SeriesMetadata {
  /**
   * Series name. It's in the format of
   * "projects/{project}/locations/{location}/clusters/{cluster}/series/{stream}".
   */
  series: string;
}

/** The message that represents packet header. */
export interface PacketHeader {
  /** Input only. The capture time of the packet. */
  captureTime:
    | Date
    | undefined;
  /** Input only. Immutable. The type of the payload. */
  type:
    | PacketType
    | undefined;
  /** Input only. This field is for users to attach user managed metadata. */
  metadata:
    | { [key: string]: any }
    | undefined;
  /**
   * Output only. Metadata that the server appends to each packet before sending
   * it to receivers. You don't need to set a value for this field when sending
   * packets.
   */
  serverMetadata:
    | ServerMetadata
    | undefined;
  /**
   * Input only. Immutable. Metadata that the server needs to know where to
   * write the packets to. It's only required for the first packet.
   */
  seriesMetadata:
    | SeriesMetadata
    | undefined;
  /** Immutable. Packet flag set. SDK will set the flag automatically. */
  flags: number;
  /**
   * Immutable. Header string for tracing across services. It should be set when the packet
   * is first arrived in the stream server.
   *
   * The input format is a lowercase hex string:
   *   - version_id: 1 byte, currently must be zero - hex encoded (2 characters)
   *   - trace_id: 16 bytes (opaque blob) - hex encoded (32 characters)
   *   - span_id: 8 bytes (opaque blob) - hex encoded (16 characters)
   *   - trace_options: 1 byte (LSB means tracing enabled) - hex encoded (2
   *   characters)
   * Example: "00-404142434445464748494a4b4c4d4e4f-6162636465666768-01"
   *           v  trace_id                         span_id          options
   */
  traceContext: string;
}

/** The quanta of datum that the series accepts. */
export interface Packet {
  /** The packet header. */
  header:
    | PacketHeader
    | undefined;
  /** The payload of the packet. */
  payload: Buffer;
}

function createBaseGstreamerBufferDescriptor(): GstreamerBufferDescriptor {
  return { capsString: "", isKeyFrame: false, ptsTime: undefined, dtsTime: undefined, duration: undefined };
}

export const GstreamerBufferDescriptor: MessageFns<GstreamerBufferDescriptor> = {
  encode(message: GstreamerBufferDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.capsString !== "") {
      writer.uint32(10).string(message.capsString);
    }
    if (message.isKeyFrame !== false) {
      writer.uint32(16).bool(message.isKeyFrame);
    }
    if (message.ptsTime !== undefined) {
      Timestamp.encode(toTimestamp(message.ptsTime), writer.uint32(26).fork()).join();
    }
    if (message.dtsTime !== undefined) {
      Timestamp.encode(toTimestamp(message.dtsTime), writer.uint32(34).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GstreamerBufferDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGstreamerBufferDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.capsString = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isKeyFrame = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ptsTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dtsTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GstreamerBufferDescriptor {
    return {
      capsString: isSet(object.capsString) ? globalThis.String(object.capsString) : "",
      isKeyFrame: isSet(object.isKeyFrame) ? globalThis.Boolean(object.isKeyFrame) : false,
      ptsTime: isSet(object.ptsTime) ? fromJsonTimestamp(object.ptsTime) : undefined,
      dtsTime: isSet(object.dtsTime) ? fromJsonTimestamp(object.dtsTime) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
    };
  },

  toJSON(message: GstreamerBufferDescriptor): unknown {
    const obj: any = {};
    if (message.capsString !== "") {
      obj.capsString = message.capsString;
    }
    if (message.isKeyFrame !== false) {
      obj.isKeyFrame = message.isKeyFrame;
    }
    if (message.ptsTime !== undefined) {
      obj.ptsTime = message.ptsTime.toISOString();
    }
    if (message.dtsTime !== undefined) {
      obj.dtsTime = message.dtsTime.toISOString();
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    return obj;
  },

  create(base?: DeepPartial<GstreamerBufferDescriptor>): GstreamerBufferDescriptor {
    return GstreamerBufferDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GstreamerBufferDescriptor>): GstreamerBufferDescriptor {
    const message = createBaseGstreamerBufferDescriptor();
    message.capsString = object.capsString ?? "";
    message.isKeyFrame = object.isKeyFrame ?? false;
    message.ptsTime = object.ptsTime ?? undefined;
    message.dtsTime = object.dtsTime ?? undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    return message;
  },
};

function createBaseRawImageDescriptor(): RawImageDescriptor {
  return { format: "", height: 0, width: 0 };
}

export const RawImageDescriptor: MessageFns<RawImageDescriptor> = {
  encode(message: RawImageDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.format !== "") {
      writer.uint32(10).string(message.format);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(24).int32(message.width);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RawImageDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRawImageDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.format = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.width = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RawImageDescriptor {
    return {
      format: isSet(object.format) ? globalThis.String(object.format) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
    };
  },

  toJSON(message: RawImageDescriptor): unknown {
    const obj: any = {};
    if (message.format !== "") {
      obj.format = message.format;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    return obj;
  },

  create(base?: DeepPartial<RawImageDescriptor>): RawImageDescriptor {
    return RawImageDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RawImageDescriptor>): RawImageDescriptor {
    const message = createBaseRawImageDescriptor();
    message.format = object.format ?? "";
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    return message;
  },
};

function createBasePacketType(): PacketType {
  return { typeClass: "", typeDescriptor: undefined };
}

export const PacketType: MessageFns<PacketType> = {
  encode(message: PacketType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typeClass !== "") {
      writer.uint32(10).string(message.typeClass);
    }
    if (message.typeDescriptor !== undefined) {
      PacketType_TypeDescriptor.encode(message.typeDescriptor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PacketType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.typeClass = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.typeDescriptor = PacketType_TypeDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketType {
    return {
      typeClass: isSet(object.typeClass) ? globalThis.String(object.typeClass) : "",
      typeDescriptor: isSet(object.typeDescriptor)
        ? PacketType_TypeDescriptor.fromJSON(object.typeDescriptor)
        : undefined,
    };
  },

  toJSON(message: PacketType): unknown {
    const obj: any = {};
    if (message.typeClass !== "") {
      obj.typeClass = message.typeClass;
    }
    if (message.typeDescriptor !== undefined) {
      obj.typeDescriptor = PacketType_TypeDescriptor.toJSON(message.typeDescriptor);
    }
    return obj;
  },

  create(base?: DeepPartial<PacketType>): PacketType {
    return PacketType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PacketType>): PacketType {
    const message = createBasePacketType();
    message.typeClass = object.typeClass ?? "";
    message.typeDescriptor = (object.typeDescriptor !== undefined && object.typeDescriptor !== null)
      ? PacketType_TypeDescriptor.fromPartial(object.typeDescriptor)
      : undefined;
    return message;
  },
};

function createBasePacketType_TypeDescriptor(): PacketType_TypeDescriptor {
  return { gstreamerBufferDescriptor: undefined, rawImageDescriptor: undefined, type: "" };
}

export const PacketType_TypeDescriptor: MessageFns<PacketType_TypeDescriptor> = {
  encode(message: PacketType_TypeDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gstreamerBufferDescriptor !== undefined) {
      GstreamerBufferDescriptor.encode(message.gstreamerBufferDescriptor, writer.uint32(18).fork()).join();
    }
    if (message.rawImageDescriptor !== undefined) {
      RawImageDescriptor.encode(message.rawImageDescriptor, writer.uint32(26).fork()).join();
    }
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PacketType_TypeDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketType_TypeDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gstreamerBufferDescriptor = GstreamerBufferDescriptor.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rawImageDescriptor = RawImageDescriptor.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketType_TypeDescriptor {
    return {
      gstreamerBufferDescriptor: isSet(object.gstreamerBufferDescriptor)
        ? GstreamerBufferDescriptor.fromJSON(object.gstreamerBufferDescriptor)
        : undefined,
      rawImageDescriptor: isSet(object.rawImageDescriptor)
        ? RawImageDescriptor.fromJSON(object.rawImageDescriptor)
        : undefined,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: PacketType_TypeDescriptor): unknown {
    const obj: any = {};
    if (message.gstreamerBufferDescriptor !== undefined) {
      obj.gstreamerBufferDescriptor = GstreamerBufferDescriptor.toJSON(message.gstreamerBufferDescriptor);
    }
    if (message.rawImageDescriptor !== undefined) {
      obj.rawImageDescriptor = RawImageDescriptor.toJSON(message.rawImageDescriptor);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(base?: DeepPartial<PacketType_TypeDescriptor>): PacketType_TypeDescriptor {
    return PacketType_TypeDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PacketType_TypeDescriptor>): PacketType_TypeDescriptor {
    const message = createBasePacketType_TypeDescriptor();
    message.gstreamerBufferDescriptor =
      (object.gstreamerBufferDescriptor !== undefined && object.gstreamerBufferDescriptor !== null)
        ? GstreamerBufferDescriptor.fromPartial(object.gstreamerBufferDescriptor)
        : undefined;
    message.rawImageDescriptor = (object.rawImageDescriptor !== undefined && object.rawImageDescriptor !== null)
      ? RawImageDescriptor.fromPartial(object.rawImageDescriptor)
      : undefined;
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseServerMetadata(): ServerMetadata {
  return { offset: Long.ZERO, ingestTime: undefined };
}

export const ServerMetadata: MessageFns<ServerMetadata> = {
  encode(message: ServerMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.offset.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.offset.toString());
    }
    if (message.ingestTime !== undefined) {
      Timestamp.encode(toTimestamp(message.ingestTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.offset = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ingestTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerMetadata {
    return {
      offset: isSet(object.offset) ? Long.fromValue(object.offset) : Long.ZERO,
      ingestTime: isSet(object.ingestTime) ? fromJsonTimestamp(object.ingestTime) : undefined,
    };
  },

  toJSON(message: ServerMetadata): unknown {
    const obj: any = {};
    if (!message.offset.equals(Long.ZERO)) {
      obj.offset = (message.offset || Long.ZERO).toString();
    }
    if (message.ingestTime !== undefined) {
      obj.ingestTime = message.ingestTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ServerMetadata>): ServerMetadata {
    return ServerMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerMetadata>): ServerMetadata {
    const message = createBaseServerMetadata();
    message.offset = (object.offset !== undefined && object.offset !== null)
      ? Long.fromValue(object.offset)
      : Long.ZERO;
    message.ingestTime = object.ingestTime ?? undefined;
    return message;
  },
};

function createBaseSeriesMetadata(): SeriesMetadata {
  return { series: "" };
}

export const SeriesMetadata: MessageFns<SeriesMetadata> = {
  encode(message: SeriesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.series !== "") {
      writer.uint32(10).string(message.series);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SeriesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSeriesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.series = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SeriesMetadata {
    return { series: isSet(object.series) ? globalThis.String(object.series) : "" };
  },

  toJSON(message: SeriesMetadata): unknown {
    const obj: any = {};
    if (message.series !== "") {
      obj.series = message.series;
    }
    return obj;
  },

  create(base?: DeepPartial<SeriesMetadata>): SeriesMetadata {
    return SeriesMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SeriesMetadata>): SeriesMetadata {
    const message = createBaseSeriesMetadata();
    message.series = object.series ?? "";
    return message;
  },
};

function createBasePacketHeader(): PacketHeader {
  return {
    captureTime: undefined,
    type: undefined,
    metadata: undefined,
    serverMetadata: undefined,
    seriesMetadata: undefined,
    flags: 0,
    traceContext: "",
  };
}

export const PacketHeader: MessageFns<PacketHeader> = {
  encode(message: PacketHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.captureTime !== undefined) {
      Timestamp.encode(toTimestamp(message.captureTime), writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      PacketType.encode(message.type, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(26).fork()).join();
    }
    if (message.serverMetadata !== undefined) {
      ServerMetadata.encode(message.serverMetadata, writer.uint32(34).fork()).join();
    }
    if (message.seriesMetadata !== undefined) {
      SeriesMetadata.encode(message.seriesMetadata, writer.uint32(42).fork()).join();
    }
    if (message.flags !== 0) {
      writer.uint32(48).int32(message.flags);
    }
    if (message.traceContext !== "") {
      writer.uint32(58).string(message.traceContext);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PacketHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.captureTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = PacketType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serverMetadata = ServerMetadata.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.seriesMetadata = SeriesMetadata.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.flags = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.traceContext = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketHeader {
    return {
      captureTime: isSet(object.captureTime) ? fromJsonTimestamp(object.captureTime) : undefined,
      type: isSet(object.type) ? PacketType.fromJSON(object.type) : undefined,
      metadata: isObject(object.metadata) ? object.metadata : undefined,
      serverMetadata: isSet(object.serverMetadata) ? ServerMetadata.fromJSON(object.serverMetadata) : undefined,
      seriesMetadata: isSet(object.seriesMetadata) ? SeriesMetadata.fromJSON(object.seriesMetadata) : undefined,
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
      traceContext: isSet(object.traceContext) ? globalThis.String(object.traceContext) : "",
    };
  },

  toJSON(message: PacketHeader): unknown {
    const obj: any = {};
    if (message.captureTime !== undefined) {
      obj.captureTime = message.captureTime.toISOString();
    }
    if (message.type !== undefined) {
      obj.type = PacketType.toJSON(message.type);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.serverMetadata !== undefined) {
      obj.serverMetadata = ServerMetadata.toJSON(message.serverMetadata);
    }
    if (message.seriesMetadata !== undefined) {
      obj.seriesMetadata = SeriesMetadata.toJSON(message.seriesMetadata);
    }
    if (message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    if (message.traceContext !== "") {
      obj.traceContext = message.traceContext;
    }
    return obj;
  },

  create(base?: DeepPartial<PacketHeader>): PacketHeader {
    return PacketHeader.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PacketHeader>): PacketHeader {
    const message = createBasePacketHeader();
    message.captureTime = object.captureTime ?? undefined;
    message.type = (object.type !== undefined && object.type !== null)
      ? PacketType.fromPartial(object.type)
      : undefined;
    message.metadata = object.metadata ?? undefined;
    message.serverMetadata = (object.serverMetadata !== undefined && object.serverMetadata !== null)
      ? ServerMetadata.fromPartial(object.serverMetadata)
      : undefined;
    message.seriesMetadata = (object.seriesMetadata !== undefined && object.seriesMetadata !== null)
      ? SeriesMetadata.fromPartial(object.seriesMetadata)
      : undefined;
    message.flags = object.flags ?? 0;
    message.traceContext = object.traceContext ?? "";
    return message;
  },
};

function createBasePacket(): Packet {
  return { header: undefined, payload: Buffer.alloc(0) };
}

export const Packet: MessageFns<Packet> = {
  encode(message: Packet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      PacketHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Packet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = PacketHeader.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Packet {
    return {
      header: isSet(object.header) ? PacketHeader.fromJSON(object.header) : undefined,
      payload: isSet(object.payload) ? Buffer.from(bytesFromBase64(object.payload)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Packet): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = PacketHeader.toJSON(message.header);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<Packet>): Packet {
    return Packet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Packet>): Packet {
    const message = createBasePacket();
    message.header = (object.header !== undefined && object.header !== null)
      ? PacketHeader.fromPartial(object.header)
      : undefined;
    message.payload = object.payload ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
