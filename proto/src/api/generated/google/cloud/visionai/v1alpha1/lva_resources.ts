// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/visionai/v1alpha1/lva_resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AnalysisDefinition } from "./lva.js";

export const protobufPackage = "google.cloud.visionai.v1alpha1";

/** Message describing the Analysis object. */
export interface Analysis {
  /** The name of resource. */
  name: string;
  /** Output only. The create timestamp. */
  createTime:
    | Date
    | undefined;
  /** Output only. The update timestamp. */
  updateTime:
    | Date
    | undefined;
  /** Labels as key value pairs. */
  labels: { [key: string]: string };
  /** The definition of the analysis. */
  analysisDefinition:
    | AnalysisDefinition
    | undefined;
  /**
   * Map from the input parameter in the definition to the real stream.
   * E.g., suppose you had a stream source operator named "input-0" and you try
   * to receive from the real stream "stream-0". You can add the following
   * mapping: [input-0: stream-0].
   */
  inputStreamsMapping: { [key: string]: string };
  /**
   * Map from the output parameter in the definition to the real stream.
   * E.g., suppose you had a stream sink operator named "output-0" and you try
   * to send to the real stream "stream-0". You can add the following
   * mapping: [output-0: stream-0].
   */
  outputStreamsMapping: { [key: string]: string };
}

export interface Analysis_LabelsEntry {
  key: string;
  value: string;
}

export interface Analysis_InputStreamsMappingEntry {
  key: string;
  value: string;
}

export interface Analysis_OutputStreamsMappingEntry {
  key: string;
  value: string;
}

function createBaseAnalysis(): Analysis {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    analysisDefinition: undefined,
    inputStreamsMapping: {},
    outputStreamsMapping: {},
  };
}

export const Analysis: MessageFns<Analysis> = {
  encode(message: Analysis, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Analysis_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.analysisDefinition !== undefined) {
      AnalysisDefinition.encode(message.analysisDefinition, writer.uint32(42).fork()).join();
    }
    Object.entries(message.inputStreamsMapping).forEach(([key, value]) => {
      Analysis_InputStreamsMappingEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    Object.entries(message.outputStreamsMapping).forEach(([key, value]) => {
      Analysis_OutputStreamsMappingEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Analysis {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Analysis_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.analysisDefinition = AnalysisDefinition.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Analysis_InputStreamsMappingEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.inputStreamsMapping[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Analysis_OutputStreamsMappingEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.outputStreamsMapping[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Analysis {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      analysisDefinition: isSet(object.analysisDefinition)
        ? AnalysisDefinition.fromJSON(object.analysisDefinition)
        : undefined,
      inputStreamsMapping: isObject(object.inputStreamsMapping)
        ? Object.entries(object.inputStreamsMapping).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      outputStreamsMapping: isObject(object.outputStreamsMapping)
        ? Object.entries(object.outputStreamsMapping).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Analysis): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.analysisDefinition !== undefined) {
      obj.analysisDefinition = AnalysisDefinition.toJSON(message.analysisDefinition);
    }
    if (message.inputStreamsMapping) {
      const entries = Object.entries(message.inputStreamsMapping);
      if (entries.length > 0) {
        obj.inputStreamsMapping = {};
        entries.forEach(([k, v]) => {
          obj.inputStreamsMapping[k] = v;
        });
      }
    }
    if (message.outputStreamsMapping) {
      const entries = Object.entries(message.outputStreamsMapping);
      if (entries.length > 0) {
        obj.outputStreamsMapping = {};
        entries.forEach(([k, v]) => {
          obj.outputStreamsMapping[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Analysis>): Analysis {
    return Analysis.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Analysis>): Analysis {
    const message = createBaseAnalysis();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.analysisDefinition = (object.analysisDefinition !== undefined && object.analysisDefinition !== null)
      ? AnalysisDefinition.fromPartial(object.analysisDefinition)
      : undefined;
    message.inputStreamsMapping = Object.entries(object.inputStreamsMapping ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.outputStreamsMapping = Object.entries(object.outputStreamsMapping ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseAnalysis_LabelsEntry(): Analysis_LabelsEntry {
  return { key: "", value: "" };
}

export const Analysis_LabelsEntry: MessageFns<Analysis_LabelsEntry> = {
  encode(message: Analysis_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Analysis_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysis_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Analysis_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Analysis_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Analysis_LabelsEntry>): Analysis_LabelsEntry {
    return Analysis_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Analysis_LabelsEntry>): Analysis_LabelsEntry {
    const message = createBaseAnalysis_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAnalysis_InputStreamsMappingEntry(): Analysis_InputStreamsMappingEntry {
  return { key: "", value: "" };
}

export const Analysis_InputStreamsMappingEntry: MessageFns<Analysis_InputStreamsMappingEntry> = {
  encode(message: Analysis_InputStreamsMappingEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Analysis_InputStreamsMappingEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysis_InputStreamsMappingEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Analysis_InputStreamsMappingEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Analysis_InputStreamsMappingEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Analysis_InputStreamsMappingEntry>): Analysis_InputStreamsMappingEntry {
    return Analysis_InputStreamsMappingEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Analysis_InputStreamsMappingEntry>): Analysis_InputStreamsMappingEntry {
    const message = createBaseAnalysis_InputStreamsMappingEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAnalysis_OutputStreamsMappingEntry(): Analysis_OutputStreamsMappingEntry {
  return { key: "", value: "" };
}

export const Analysis_OutputStreamsMappingEntry: MessageFns<Analysis_OutputStreamsMappingEntry> = {
  encode(message: Analysis_OutputStreamsMappingEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Analysis_OutputStreamsMappingEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysis_OutputStreamsMappingEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Analysis_OutputStreamsMappingEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Analysis_OutputStreamsMappingEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Analysis_OutputStreamsMappingEntry>): Analysis_OutputStreamsMappingEntry {
    return Analysis_OutputStreamsMappingEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Analysis_OutputStreamsMappingEntry>): Analysis_OutputStreamsMappingEntry {
    const message = createBaseAnalysis_OutputStreamsMappingEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
