// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/resourcemanager/v3/tag_holds.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.resourcemanager.v3";

/**
 * A TagHold represents the use of a TagValue that is not captured by
 * TagBindings. If a TagValue has any TagHolds, deletion will be blocked.
 * This resource is intended to be created in the same cloud location as the
 * `holder`.
 */
export interface TagHold {
  /**
   * Output only. The resource name of a TagHold. This is a String of the form:
   * `tagValues/{tag-value-id}/tagHolds/{tag-hold-id}`
   * (e.g. `tagValues/123/tagHolds/456`). This resource name is generated by
   * the server.
   */
  name: string;
  /**
   * Required. The name of the resource where the TagValue is being used. Must
   * be less than 200 characters. E.g.
   * `//compute.googleapis.com/compute/projects/myproject/regions/us-east-1/instanceGroupManagers/instance-group`
   */
  holder: string;
  /**
   * Optional. An optional string representing the origin of this request. This
   * field should include human-understandable information to distinguish
   * origins from each other. Must be less than 200 characters. E.g.
   * `migs-35678234`
   */
  origin: string;
  /**
   * Optional. A URL where an end user can learn more about removing this hold.
   * E.g.
   * `https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing`
   */
  helpLink: string;
  /** Output only. The time this TagHold was created. */
  createTime: Date | undefined;
}

/** The request message to create a TagHold. */
export interface CreateTagHoldRequest {
  /**
   * Required. The resource name of the TagHold's parent TagValue. Must be of
   * the form: `tagValues/{tag-value-id}`.
   */
  parent: string;
  /** Required. The TagHold to be created. */
  tagHold:
    | TagHold
    | undefined;
  /**
   * Optional. Set to true to perform the validations necessary for creating the
   * resource, but not actually perform the action.
   */
  validateOnly: boolean;
}

/**
 * Runtime operation information for creating a TagHold.
 * (-- The metadata is currently empty, but may include information in the
 * future. --)
 */
export interface CreateTagHoldMetadata {
}

/** The request message to delete a TagHold. */
export interface DeleteTagHoldRequest {
  /**
   * Required. The resource name of the TagHold to delete. Must be of the form:
   * `tagValues/{tag-value-id}/tagHolds/{tag-hold-id}`.
   */
  name: string;
  /**
   * Optional. Set to true to perform the validations necessary for deleting the
   * resource, but not actually perform the action.
   */
  validateOnly: boolean;
}

/**
 * Runtime operation information for deleting a TagHold.
 * (-- The metadata is currently empty, but may include information in the
 * future. --)
 */
export interface DeleteTagHoldMetadata {
}

/** The request message for listing the TagHolds under a TagValue. */
export interface ListTagHoldsRequest {
  /**
   * Required. The resource name of the parent TagValue. Must be of the form:
   * `tagValues/{tag-value-id}`.
   */
  parent: string;
  /**
   * Optional. The maximum number of TagHolds to return in the response. The
   * server allows a maximum of 300 TagHolds to return. If unspecified, the
   * server will use 100 as the default.
   */
  pageSize: number;
  /**
   * Optional. A pagination token returned from a previous call to
   * `ListTagHolds` that indicates where this listing should continue from.
   */
  pageToken: string;
  /**
   * Optional. Criteria used to select a subset of TagHolds parented by the
   * TagValue to return. This field follows the syntax defined by aip.dev/160;
   * the `holder` and `origin` fields are supported for filtering. Currently
   * only `AND` syntax is supported. Some example queries are:
   *
   *   * `holder =
   *     //compute.googleapis.com/compute/projects/myproject/regions/us-east-1/instanceGroupManagers/instance-group`
   *   * `origin = 35678234`
   *   * `holder =
   *     //compute.googleapis.com/compute/projects/myproject/regions/us-east-1/instanceGroupManagers/instance-group
   *     AND origin = 35678234`
   */
  filter: string;
}

/** The ListTagHolds response. */
export interface ListTagHoldsResponse {
  /** A possibly paginated list of TagHolds. */
  tagHolds: TagHold[];
  /**
   * Pagination token.
   *
   * If the result set is too large to fit in a single response, this token
   * is returned. It encodes the position of the current result cursor.
   * Feeding this value into a new list request with the `page_token` parameter
   * gives the next page of the results.
   *
   * When `next_page_token` is not filled in, there is no next page and
   * the list returned is the last page in the result set.
   *
   * Pagination tokens have a limited lifetime.
   */
  nextPageToken: string;
}

function createBaseTagHold(): TagHold {
  return { name: "", holder: "", origin: "", helpLink: "", createTime: undefined };
}

export const TagHold: MessageFns<TagHold> = {
  encode(message: TagHold, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.holder !== "") {
      writer.uint32(18).string(message.holder);
    }
    if (message.origin !== "") {
      writer.uint32(26).string(message.origin);
    }
    if (message.helpLink !== "") {
      writer.uint32(34).string(message.helpLink);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagHold {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagHold();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.holder = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.origin = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagHold {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      holder: isSet(object.holder) ? globalThis.String(object.holder) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
      helpLink: isSet(object.helpLink) ? globalThis.String(object.helpLink) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: TagHold): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.holder !== "") {
      obj.holder = message.holder;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    if (message.helpLink !== "") {
      obj.helpLink = message.helpLink;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<TagHold>): TagHold {
    return TagHold.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagHold>): TagHold {
    const message = createBaseTagHold();
    message.name = object.name ?? "";
    message.holder = object.holder ?? "";
    message.origin = object.origin ?? "";
    message.helpLink = object.helpLink ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseCreateTagHoldRequest(): CreateTagHoldRequest {
  return { parent: "", tagHold: undefined, validateOnly: false };
}

export const CreateTagHoldRequest: MessageFns<CreateTagHoldRequest> = {
  encode(message: CreateTagHoldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tagHold !== undefined) {
      TagHold.encode(message.tagHold, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagHoldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagHoldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tagHold = TagHold.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTagHoldRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tagHold: isSet(object.tagHold) ? TagHold.fromJSON(object.tagHold) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateTagHoldRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tagHold !== undefined) {
      obj.tagHold = TagHold.toJSON(message.tagHold);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTagHoldRequest>): CreateTagHoldRequest {
    return CreateTagHoldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTagHoldRequest>): CreateTagHoldRequest {
    const message = createBaseCreateTagHoldRequest();
    message.parent = object.parent ?? "";
    message.tagHold = (object.tagHold !== undefined && object.tagHold !== null)
      ? TagHold.fromPartial(object.tagHold)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCreateTagHoldMetadata(): CreateTagHoldMetadata {
  return {};
}

export const CreateTagHoldMetadata: MessageFns<CreateTagHoldMetadata> = {
  encode(_: CreateTagHoldMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagHoldMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagHoldMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateTagHoldMetadata {
    return {};
  },

  toJSON(_: CreateTagHoldMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateTagHoldMetadata>): CreateTagHoldMetadata {
    return CreateTagHoldMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateTagHoldMetadata>): CreateTagHoldMetadata {
    const message = createBaseCreateTagHoldMetadata();
    return message;
  },
};

function createBaseDeleteTagHoldRequest(): DeleteTagHoldRequest {
  return { name: "", validateOnly: false };
}

export const DeleteTagHoldRequest: MessageFns<DeleteTagHoldRequest> = {
  encode(message: DeleteTagHoldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagHoldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagHoldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTagHoldRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteTagHoldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTagHoldRequest>): DeleteTagHoldRequest {
    return DeleteTagHoldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagHoldRequest>): DeleteTagHoldRequest {
    const message = createBaseDeleteTagHoldRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteTagHoldMetadata(): DeleteTagHoldMetadata {
  return {};
}

export const DeleteTagHoldMetadata: MessageFns<DeleteTagHoldMetadata> = {
  encode(_: DeleteTagHoldMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagHoldMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagHoldMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteTagHoldMetadata {
    return {};
  },

  toJSON(_: DeleteTagHoldMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteTagHoldMetadata>): DeleteTagHoldMetadata {
    return DeleteTagHoldMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteTagHoldMetadata>): DeleteTagHoldMetadata {
    const message = createBaseDeleteTagHoldMetadata();
    return message;
  },
};

function createBaseListTagHoldsRequest(): ListTagHoldsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListTagHoldsRequest: MessageFns<ListTagHoldsRequest> = {
  encode(message: ListTagHoldsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagHoldsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagHoldsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagHoldsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListTagHoldsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagHoldsRequest>): ListTagHoldsRequest {
    return ListTagHoldsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagHoldsRequest>): ListTagHoldsRequest {
    const message = createBaseListTagHoldsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListTagHoldsResponse(): ListTagHoldsResponse {
  return { tagHolds: [], nextPageToken: "" };
}

export const ListTagHoldsResponse: MessageFns<ListTagHoldsResponse> = {
  encode(message: ListTagHoldsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tagHolds) {
      TagHold.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagHoldsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagHoldsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagHolds.push(TagHold.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagHoldsResponse {
    return {
      tagHolds: globalThis.Array.isArray(object?.tagHolds) ? object.tagHolds.map((e: any) => TagHold.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTagHoldsResponse): unknown {
    const obj: any = {};
    if (message.tagHolds?.length) {
      obj.tagHolds = message.tagHolds.map((e) => TagHold.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagHoldsResponse>): ListTagHoldsResponse {
    return ListTagHoldsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagHoldsResponse>): ListTagHoldsResponse {
    const message = createBaseListTagHoldsResponse();
    message.tagHolds = object.tagHolds?.map((e) => TagHold.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Allow users to create and manage TagHolds for TagValues. TagHolds represent
 * the use of a Tag Value that is not captured by TagBindings but
 * should still block TagValue deletion (such as a reference in a policy
 * condition). This service provides isolated failure domains by cloud location
 * so that TagHolds can be managed in the same location as their usage.
 */
export type TagHoldsDefinition = typeof TagHoldsDefinition;
export const TagHoldsDefinition = {
  name: "TagHolds",
  fullName: "google.cloud.resourcemanager.v3.TagHolds",
  methods: {
    /**
     * Creates a TagHold. Returns ALREADY_EXISTS if a TagHold with the same
     * resource and origin exists under the same TagValue.
     */
    createTagHold: {
      name: "CreateTagHold",
      requestType: CreateTagHoldRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              84,
              97,
              103,
              72,
              111,
              108,
              100,
              18,
              21,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              97,
              103,
              72,
              111,
              108,
              100,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 116, 97, 103, 95, 104, 111, 108, 100])],
          578365826: [
            Buffer.from([
              45,
              58,
              8,
              116,
              97,
              103,
              95,
              104,
              111,
              108,
              100,
              34,
              33,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              72,
              111,
              108,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a TagHold. */
    deleteTagHold: {
      name: "DeleteTagHold",
      requestType: DeleteTagHoldRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              21,
              68,
              101,
              108,
              101,
              116,
              101,
              84,
              97,
              103,
              72,
              111,
              108,
              100,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              42,
              33,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              47,
              116,
              97,
              103,
              72,
              111,
              108,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists TagHolds under a TagValue. */
    listTagHolds: {
      name: "ListTagHolds",
      requestType: ListTagHoldsRequest,
      requestStream: false,
      responseType: ListTagHoldsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              103,
              72,
              111,
              108,
              100,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TagHoldsServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a TagHold. Returns ALREADY_EXISTS if a TagHold with the same
   * resource and origin exists under the same TagValue.
   */
  createTagHold(request: CreateTagHoldRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a TagHold. */
  deleteTagHold(request: DeleteTagHoldRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists TagHolds under a TagValue. */
  listTagHolds(
    request: ListTagHoldsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTagHoldsResponse>>;
}

export interface TagHoldsClient<CallOptionsExt = {}> {
  /**
   * Creates a TagHold. Returns ALREADY_EXISTS if a TagHold with the same
   * resource and origin exists under the same TagValue.
   */
  createTagHold(request: DeepPartial<CreateTagHoldRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a TagHold. */
  deleteTagHold(request: DeepPartial<DeleteTagHoldRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists TagHolds under a TagValue. */
  listTagHolds(
    request: DeepPartial<ListTagHoldsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTagHoldsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
