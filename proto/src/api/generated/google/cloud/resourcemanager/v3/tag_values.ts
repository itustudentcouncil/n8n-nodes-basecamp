// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/resourcemanager/v3/tag_values.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.resourcemanager.v3";

/**
 * A TagValue is a child of a particular TagKey. This is used to group
 * cloud resources for the purpose of controlling them using policies.
 */
export interface TagValue {
  /** Immutable. Resource name for TagValue in the format `tagValues/456`. */
  name: string;
  /**
   * Immutable. The resource name of the new TagValue's parent TagKey.
   * Must be of the form `tagKeys/{tag_key_id}`.
   */
  parent: string;
  /**
   * Required. Immutable. User-assigned short name for TagValue. The short name
   * should be unique for TagValues within the same parent TagKey.
   *
   * The short name must be 63 characters or less, beginning and ending with
   * an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_),
   * dots (.), and alphanumerics between.
   */
  shortName: string;
  /**
   * Output only. The namespaced name of the TagValue. Can be in the form
   * `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or
   * `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or
   * `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.
   */
  namespacedName: string;
  /**
   * Optional. User-assigned description of the TagValue.
   * Must not exceed 256 characters.
   *
   * Read-write.
   */
  description: string;
  /** Output only. Creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Entity tag which users can pass to prevent race conditions. This
   * field is always set in server responses. See UpdateTagValueRequest for
   * details.
   */
  etag: string;
}

/**
 * The request message for listing TagValues for the specified TagKey.
 * Resource name for TagKey, parent of the TagValues to be listed,
 * in the format `tagKeys/123`.
 */
export interface ListTagValuesRequest {
  /** Required. */
  parent: string;
  /**
   * Optional. The maximum number of TagValues to return in the response. The
   * server allows a maximum of 300 TagValues to return. If unspecified, the
   * server will use 100 as the default.
   */
  pageSize: number;
  /**
   * Optional. A pagination token returned from a previous call to
   * `ListTagValues` that indicates where this listing should continue from.
   */
  pageToken: string;
}

/** The ListTagValues response. */
export interface ListTagValuesResponse {
  /**
   * A possibly paginated list of TagValues that are direct descendants of
   * the specified parent TagKey.
   */
  tagValues: TagValue[];
  /**
   * A pagination token returned from a previous call to `ListTagValues`
   * that indicates from where listing should continue. This is currently not
   * used, but the server may at any point start supplying a valid token.
   */
  nextPageToken: string;
}

/** The request message for getting a TagValue. */
export interface GetTagValueRequest {
  /**
   * Required. Resource name for TagValue to be fetched in the format
   * `tagValues/456`.
   */
  name: string;
}

/** The request message for getting a TagValue by its namespaced name. */
export interface GetNamespacedTagValueRequest {
  /**
   * Required. A namespaced tag value name in the following format:
   *
   *   `{parentId}/{tagKeyShort}/{tagValueShort}`
   *
   * Examples:
   * - `42/foo/abc` for a value with short name "abc" under the key with short
   *   name "foo" under the organization with ID 42
   * - `r2-d2/bar/xyz` for a value with short name "xyz" under the key with
   *    short name "bar" under the project with ID "r2-d2"
   */
  name: string;
}

/** The request message for creating a TagValue. */
export interface CreateTagValueRequest {
  /**
   * Required. The TagValue to be created. Only fields `short_name`,
   * `description`, and `parent` are considered during the creation request.
   */
  tagValue:
    | TagValue
    | undefined;
  /**
   * Optional. Set as true to perform the validations necessary for creating the
   * resource, but not actually perform the action.
   */
  validateOnly: boolean;
}

/** Runtime operation information for creating a TagValue. */
export interface CreateTagValueMetadata {
}

/** The request message for updating a TagValue. */
export interface UpdateTagValueRequest {
  /**
   * Required. The new definition of the TagValue. Only fields `description` and
   * `etag` fields can be updated by this request. If the `etag` field is
   * nonempty, it must match the `etag` field of the existing ControlGroup.
   * Otherwise, `ABORTED` will be returned.
   */
  tagValue:
    | TagValue
    | undefined;
  /** Optional. Fields to be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. True to perform validations necessary for updating the resource,
   * but not actually perform the action.
   */
  validateOnly: boolean;
}

/** Runtime operation information for updating a TagValue. */
export interface UpdateTagValueMetadata {
}

/** The request message for deleting a TagValue. */
export interface DeleteTagValueRequest {
  /**
   * Required. Resource name for TagValue to be deleted in the format
   * tagValues/456.
   */
  name: string;
  /**
   * Optional. Set as true to perform the validations necessary for deletion,
   * but not actually perform the action.
   */
  validateOnly: boolean;
  /**
   * Optional. The etag known to the client for the expected state of the
   * TagValue. This is to be used for optimistic concurrency.
   */
  etag: string;
}

/** Runtime operation information for deleting a TagValue. */
export interface DeleteTagValueMetadata {
}

function createBaseTagValue(): TagValue {
  return {
    name: "",
    parent: "",
    shortName: "",
    namespacedName: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    etag: "",
  };
}

export const TagValue: MessageFns<TagValue> = {
  encode(message: TagValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    if (message.shortName !== "") {
      writer.uint32(26).string(message.shortName);
    }
    if (message.namespacedName !== "") {
      writer.uint32(34).string(message.namespacedName);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shortName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.namespacedName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagValue {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      shortName: isSet(object.shortName) ? globalThis.String(object.shortName) : "",
      namespacedName: isSet(object.namespacedName) ? globalThis.String(object.namespacedName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: TagValue): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.shortName !== "") {
      obj.shortName = message.shortName;
    }
    if (message.namespacedName !== "") {
      obj.namespacedName = message.namespacedName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<TagValue>): TagValue {
    return TagValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagValue>): TagValue {
    const message = createBaseTagValue();
    message.name = object.name ?? "";
    message.parent = object.parent ?? "";
    message.shortName = object.shortName ?? "";
    message.namespacedName = object.namespacedName ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseListTagValuesRequest(): ListTagValuesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListTagValuesRequest: MessageFns<ListTagValuesRequest> = {
  encode(message: ListTagValuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagValuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagValuesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTagValuesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagValuesRequest>): ListTagValuesRequest {
    return ListTagValuesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagValuesRequest>): ListTagValuesRequest {
    const message = createBaseListTagValuesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTagValuesResponse(): ListTagValuesResponse {
  return { tagValues: [], nextPageToken: "" };
}

export const ListTagValuesResponse: MessageFns<ListTagValuesResponse> = {
  encode(message: ListTagValuesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tagValues) {
      TagValue.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagValuesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagValues.push(TagValue.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagValuesResponse {
    return {
      tagValues: globalThis.Array.isArray(object?.tagValues)
        ? object.tagValues.map((e: any) => TagValue.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTagValuesResponse): unknown {
    const obj: any = {};
    if (message.tagValues?.length) {
      obj.tagValues = message.tagValues.map((e) => TagValue.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagValuesResponse>): ListTagValuesResponse {
    return ListTagValuesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagValuesResponse>): ListTagValuesResponse {
    const message = createBaseListTagValuesResponse();
    message.tagValues = object.tagValues?.map((e) => TagValue.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTagValueRequest(): GetTagValueRequest {
  return { name: "" };
}

export const GetTagValueRequest: MessageFns<GetTagValueRequest> = {
  encode(message: GetTagValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTagValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTagValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTagValueRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTagValueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTagValueRequest>): GetTagValueRequest {
    return GetTagValueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTagValueRequest>): GetTagValueRequest {
    const message = createBaseGetTagValueRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetNamespacedTagValueRequest(): GetNamespacedTagValueRequest {
  return { name: "" };
}

export const GetNamespacedTagValueRequest: MessageFns<GetNamespacedTagValueRequest> = {
  encode(message: GetNamespacedTagValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNamespacedTagValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNamespacedTagValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNamespacedTagValueRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNamespacedTagValueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNamespacedTagValueRequest>): GetNamespacedTagValueRequest {
    return GetNamespacedTagValueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNamespacedTagValueRequest>): GetNamespacedTagValueRequest {
    const message = createBaseGetNamespacedTagValueRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateTagValueRequest(): CreateTagValueRequest {
  return { tagValue: undefined, validateOnly: false };
}

export const CreateTagValueRequest: MessageFns<CreateTagValueRequest> = {
  encode(message: CreateTagValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagValue !== undefined) {
      TagValue.encode(message.tagValue, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagValue = TagValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTagValueRequest {
    return {
      tagValue: isSet(object.tagValue) ? TagValue.fromJSON(object.tagValue) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateTagValueRequest): unknown {
    const obj: any = {};
    if (message.tagValue !== undefined) {
      obj.tagValue = TagValue.toJSON(message.tagValue);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTagValueRequest>): CreateTagValueRequest {
    return CreateTagValueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTagValueRequest>): CreateTagValueRequest {
    const message = createBaseCreateTagValueRequest();
    message.tagValue = (object.tagValue !== undefined && object.tagValue !== null)
      ? TagValue.fromPartial(object.tagValue)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCreateTagValueMetadata(): CreateTagValueMetadata {
  return {};
}

export const CreateTagValueMetadata: MessageFns<CreateTagValueMetadata> = {
  encode(_: CreateTagValueMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagValueMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagValueMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateTagValueMetadata {
    return {};
  },

  toJSON(_: CreateTagValueMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateTagValueMetadata>): CreateTagValueMetadata {
    return CreateTagValueMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateTagValueMetadata>): CreateTagValueMetadata {
    const message = createBaseCreateTagValueMetadata();
    return message;
  },
};

function createBaseUpdateTagValueRequest(): UpdateTagValueRequest {
  return { tagValue: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateTagValueRequest: MessageFns<UpdateTagValueRequest> = {
  encode(message: UpdateTagValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagValue !== undefined) {
      TagValue.encode(message.tagValue, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagValue = TagValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTagValueRequest {
    return {
      tagValue: isSet(object.tagValue) ? TagValue.fromJSON(object.tagValue) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateTagValueRequest): unknown {
    const obj: any = {};
    if (message.tagValue !== undefined) {
      obj.tagValue = TagValue.toJSON(message.tagValue);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTagValueRequest>): UpdateTagValueRequest {
    return UpdateTagValueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTagValueRequest>): UpdateTagValueRequest {
    const message = createBaseUpdateTagValueRequest();
    message.tagValue = (object.tagValue !== undefined && object.tagValue !== null)
      ? TagValue.fromPartial(object.tagValue)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateTagValueMetadata(): UpdateTagValueMetadata {
  return {};
}

export const UpdateTagValueMetadata: MessageFns<UpdateTagValueMetadata> = {
  encode(_: UpdateTagValueMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagValueMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagValueMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateTagValueMetadata {
    return {};
  },

  toJSON(_: UpdateTagValueMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateTagValueMetadata>): UpdateTagValueMetadata {
    return UpdateTagValueMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateTagValueMetadata>): UpdateTagValueMetadata {
    const message = createBaseUpdateTagValueMetadata();
    return message;
  },
};

function createBaseDeleteTagValueRequest(): DeleteTagValueRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const DeleteTagValueRequest: MessageFns<DeleteTagValueRequest> = {
  encode(message: DeleteTagValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTagValueRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteTagValueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTagValueRequest>): DeleteTagValueRequest {
    return DeleteTagValueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagValueRequest>): DeleteTagValueRequest {
    const message = createBaseDeleteTagValueRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseDeleteTagValueMetadata(): DeleteTagValueMetadata {
  return {};
}

export const DeleteTagValueMetadata: MessageFns<DeleteTagValueMetadata> = {
  encode(_: DeleteTagValueMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagValueMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagValueMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteTagValueMetadata {
    return {};
  },

  toJSON(_: DeleteTagValueMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteTagValueMetadata>): DeleteTagValueMetadata {
    return DeleteTagValueMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteTagValueMetadata>): DeleteTagValueMetadata {
    const message = createBaseDeleteTagValueMetadata();
    return message;
  },
};

/** Allow users to create and manage tag values. */
export type TagValuesDefinition = typeof TagValuesDefinition;
export const TagValuesDefinition = {
  name: "TagValues",
  fullName: "google.cloud.resourcemanager.v3.TagValues",
  methods: {
    /** Lists all TagValues for a specific TagKey. */
    listTagValues: {
      name: "ListTagValues",
      requestType: ListTagValuesRequest,
      requestStream: false,
      responseType: ListTagValuesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [Buffer.from([15, 18, 13, 47, 118, 51, 47, 116, 97, 103, 86, 97, 108, 117, 101, 115])],
        },
      },
    },
    /**
     * Retrieves a TagValue. This method will return `PERMISSION_DENIED` if the
     * value does not exist or the user does not have permission to view it.
     */
    getTagValue: {
      name: "GetTagValue",
      requestType: GetTagValueRequest,
      requestStream: false,
      responseType: TagValue,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              24,
              18,
              22,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a TagValue by its namespaced name.
     * This method will return `PERMISSION_DENIED` if the value does not exist
     * or the user does not have permission to view it.
     */
    getNamespacedTagValue: {
      name: "GetNamespacedTagValue",
      requestType: GetNamespacedTagValueRequest,
      requestStream: false,
      responseType: TagValue,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              26,
              18,
              24,
              47,
              118,
              51,
              47,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a TagValue as a child of the specified TagKey. If a another
     * request with the same parameters is sent while the original request is in
     * process the second request will receive an error. A maximum of 1000
     * TagValues can exist under a TagKey at any given time.
     */
    createTagValue: {
      name: "CreateTagValue",
      requestType: CreateTagValueRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              8,
              84,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              18,
              22,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([9, 116, 97, 103, 95, 118, 97, 108, 117, 101])],
          578365826: [
            Buffer.from([
              26,
              58,
              9,
              116,
              97,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              13,
              47,
              118,
              51,
              47,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the attributes of the TagValue resource. */
    updateTagValue: {
      name: "UpdateTagValue",
      requestType: UpdateTagValueRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              8,
              84,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              18,
              22,
              85,
              112,
              100,
              97,
              116,
              101,
              84,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              116,
              97,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              45,
              58,
              9,
              116,
              97,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              50,
              32,
              47,
              118,
              51,
              47,
              123,
              116,
              97,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a TagValue. The TagValue cannot have any bindings when it is
     * deleted.
     */
    deleteTagValue: {
      name: "DeleteTagValue",
      requestType: DeleteTagValueRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              8,
              84,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              18,
              22,
              68,
              101,
              108,
              101,
              116,
              101,
              84,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              24,
              42,
              22,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a TagValue. The returned policy may be
     * empty if no such policy or resource exists. The `resource` field should
     * be the TagValue's resource name. For example: `tagValues/1234`.
     * The caller must have the
     * `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on
     * the identified TagValue to get the access control policy.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on a TagValue, replacing any existing
     * policy. The `resource` field should be the TagValue's resource name.
     * For example: `tagValues/1234`.
     * The caller must have `resourcemanager.tagValues.setIamPolicy` permission
     * on the identified tagValue.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified TagValue.
     * The `resource` field should be the TagValue's resource name. For example:
     * `tagValues/1234`.
     *
     * There are no permissions required for making this API call.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              50,
              58,
              1,
              42,
              34,
              45,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              116,
              97,
              103,
              86,
              97,
              108,
              117,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TagValuesServiceImplementation<CallContextExt = {}> {
  /** Lists all TagValues for a specific TagKey. */
  listTagValues(
    request: ListTagValuesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTagValuesResponse>>;
  /**
   * Retrieves a TagValue. This method will return `PERMISSION_DENIED` if the
   * value does not exist or the user does not have permission to view it.
   */
  getTagValue(request: GetTagValueRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TagValue>>;
  /**
   * Retrieves a TagValue by its namespaced name.
   * This method will return `PERMISSION_DENIED` if the value does not exist
   * or the user does not have permission to view it.
   */
  getNamespacedTagValue(
    request: GetNamespacedTagValueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagValue>>;
  /**
   * Creates a TagValue as a child of the specified TagKey. If a another
   * request with the same parameters is sent while the original request is in
   * process the second request will receive an error. A maximum of 1000
   * TagValues can exist under a TagKey at any given time.
   */
  createTagValue(
    request: CreateTagValueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the attributes of the TagValue resource. */
  updateTagValue(
    request: UpdateTagValueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a TagValue. The TagValue cannot have any bindings when it is
   * deleted.
   */
  deleteTagValue(
    request: DeleteTagValueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets the access control policy for a TagValue. The returned policy may be
   * empty if no such policy or resource exists. The `resource` field should
   * be the TagValue's resource name. For example: `tagValues/1234`.
   * The caller must have the
   * `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on
   * the identified TagValue to get the access control policy.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the access control policy on a TagValue, replacing any existing
   * policy. The `resource` field should be the TagValue's resource name.
   * For example: `tagValues/1234`.
   * The caller must have `resourcemanager.tagValues.setIamPolicy` permission
   * on the identified tagValue.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified TagValue.
   * The `resource` field should be the TagValue's resource name. For example:
   * `tagValues/1234`.
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface TagValuesClient<CallOptionsExt = {}> {
  /** Lists all TagValues for a specific TagKey. */
  listTagValues(
    request: DeepPartial<ListTagValuesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTagValuesResponse>;
  /**
   * Retrieves a TagValue. This method will return `PERMISSION_DENIED` if the
   * value does not exist or the user does not have permission to view it.
   */
  getTagValue(request: DeepPartial<GetTagValueRequest>, options?: CallOptions & CallOptionsExt): Promise<TagValue>;
  /**
   * Retrieves a TagValue by its namespaced name.
   * This method will return `PERMISSION_DENIED` if the value does not exist
   * or the user does not have permission to view it.
   */
  getNamespacedTagValue(
    request: DeepPartial<GetNamespacedTagValueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagValue>;
  /**
   * Creates a TagValue as a child of the specified TagKey. If a another
   * request with the same parameters is sent while the original request is in
   * process the second request will receive an error. A maximum of 1000
   * TagValues can exist under a TagKey at any given time.
   */
  createTagValue(
    request: DeepPartial<CreateTagValueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the attributes of the TagValue resource. */
  updateTagValue(
    request: DeepPartial<UpdateTagValueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a TagValue. The TagValue cannot have any bindings when it is
   * deleted.
   */
  deleteTagValue(
    request: DeepPartial<DeleteTagValueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets the access control policy for a TagValue. The returned policy may be
   * empty if no such policy or resource exists. The `resource` field should
   * be the TagValue's resource name. For example: `tagValues/1234`.
   * The caller must have the
   * `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on
   * the identified TagValue to get the access control policy.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the access control policy on a TagValue, replacing any existing
   * policy. The `resource` field should be the TagValue's resource name.
   * For example: `tagValues/1234`.
   * The caller must have `resourcemanager.tagValues.setIamPolicy` permission
   * on the identified tagValue.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified TagValue.
   * The `resource` field should be the TagValue's resource name. For example:
   * `tagValues/1234`.
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
