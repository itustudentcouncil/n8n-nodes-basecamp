// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/resourcemanager/v3/tag_keys.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.resourcemanager.v3";

/**
 * A purpose for each policy engine requiring such an integration. A single
 * policy engine may have multiple purposes defined, however a TagKey may only
 * specify a single purpose.
 */
export enum Purpose {
  /** PURPOSE_UNSPECIFIED - Unspecified purpose. */
  PURPOSE_UNSPECIFIED = 0,
  /**
   * GCE_FIREWALL - Purpose for Compute Engine firewalls.
   * A corresponding `purpose_data` should be set for the network the tag is
   * intended for. The key should be `network` and the value should be in
   * either of these two formats:
   *
   * -
   * `https://www.googleapis.com/compute/{compute_version}/projects/{project_id}/global/networks/{network_id}`
   * - `{project_id}/{network_name}`
   *
   * Examples:
   *
   * -
   * `https://www.googleapis.com/compute/staging_v1/projects/fail-closed-load-testing/global/networks/6992953698831725600`
   * - `fail-closed-load-testing/load-testing-network`
   */
  GCE_FIREWALL = 1,
  UNRECOGNIZED = -1,
}

export function purposeFromJSON(object: any): Purpose {
  switch (object) {
    case 0:
    case "PURPOSE_UNSPECIFIED":
      return Purpose.PURPOSE_UNSPECIFIED;
    case 1:
    case "GCE_FIREWALL":
      return Purpose.GCE_FIREWALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Purpose.UNRECOGNIZED;
  }
}

export function purposeToJSON(object: Purpose): string {
  switch (object) {
    case Purpose.PURPOSE_UNSPECIFIED:
      return "PURPOSE_UNSPECIFIED";
    case Purpose.GCE_FIREWALL:
      return "GCE_FIREWALL";
    case Purpose.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A TagKey, used to group a set of TagValues. */
export interface TagKey {
  /**
   * Immutable. The resource name for a TagKey. Must be in the format
   * `tagKeys/{tag_key_id}`, where `tag_key_id` is the generated numeric id for
   * the TagKey.
   */
  name: string;
  /**
   * Immutable. The resource name of the TagKey's parent. A TagKey can be
   * parented by an Organization or a Project. For a TagKey parented by an
   * Organization, its parent must be in the form `organizations/{org_id}`. For
   * a TagKey parented by a Project, its parent can be in the form
   * `projects/{project_id}` or `projects/{project_number}`.
   */
  parent: string;
  /**
   * Required. Immutable. The user friendly name for a TagKey. The short name
   * should be unique for TagKeys within the same tag namespace.
   *
   * The short name must be 1-63 characters, beginning and ending with
   * an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_),
   * dots (.), and alphanumerics between.
   */
  shortName: string;
  /** Output only. Immutable. Namespaced name of the TagKey. */
  namespacedName: string;
  /**
   * Optional. User-assigned description of the TagKey. Must not exceed 256
   * characters.
   *
   * Read-write.
   */
  description: string;
  /** Output only. Creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Entity tag which users can pass to prevent race conditions. This
   * field is always set in server responses. See UpdateTagKeyRequest for
   * details.
   */
  etag: string;
  /**
   * Optional. A purpose denotes that this Tag is intended for use in policies
   * of a specific policy engine, and will involve that policy engine in
   * management operations involving this Tag. A purpose does not grant a
   * policy engine exclusive rights to the Tag, and it may be referenced by
   * other policy engines.
   *
   * A purpose cannot be changed once set.
   */
  purpose: Purpose;
  /**
   * Optional. Purpose data corresponds to the policy system that the tag is
   * intended for. See documentation for `Purpose` for formatting of this field.
   *
   * Purpose data cannot be changed once set.
   */
  purposeData: { [key: string]: string };
}

export interface TagKey_PurposeDataEntry {
  key: string;
  value: string;
}

/** The request message for listing all TagKeys under a parent resource. */
export interface ListTagKeysRequest {
  /**
   * Required. The resource name of the TagKey's parent.
   * Must be of the form `organizations/{org_id}` or `projects/{project_id}` or
   * `projects/{project_number}`
   */
  parent: string;
  /**
   * Optional. The maximum number of TagKeys to return in the response. The
   * server allows a maximum of 300 TagKeys to return. If unspecified, the
   * server will use 100 as the default.
   */
  pageSize: number;
  /**
   * Optional. A pagination token returned from a previous call to `ListTagKey`
   * that indicates where this listing should continue from.
   */
  pageToken: string;
}

/** The ListTagKeys response message. */
export interface ListTagKeysResponse {
  /** List of TagKeys that live under the specified parent in the request. */
  tagKeys: TagKey[];
  /**
   * A pagination token returned from a previous call to `ListTagKeys`
   * that indicates from where listing should continue.
   */
  nextPageToken: string;
}

/** The request message for getting a TagKey. */
export interface GetTagKeyRequest {
  /**
   * Required. A resource name in the format `tagKeys/{id}`, such as
   * `tagKeys/123`.
   */
  name: string;
}

/** The request message for getting a TagKey by its namespaced name. */
export interface GetNamespacedTagKeyRequest {
  /**
   * Required. A namespaced tag key name in the format
   * `{parentId}/{tagKeyShort}`, such as `42/foo` for a key with short name
   * "foo" under the organization with ID 42 or `r2-d2/bar` for a key with short
   * name "bar" under the project `r2-d2`.
   */
  name: string;
}

/** The request message for creating a TagKey. */
export interface CreateTagKeyRequest {
  /**
   * Required. The TagKey to be created. Only fields `short_name`,
   * `description`, and `parent` are considered during the creation request.
   */
  tagKey:
    | TagKey
    | undefined;
  /**
   * Optional. Set to true to perform validations necessary for creating the
   * resource, but not actually perform the action.
   */
  validateOnly: boolean;
}

/** Runtime operation information for creating a TagKey. */
export interface CreateTagKeyMetadata {
}

/** The request message for updating a TagKey. */
export interface UpdateTagKeyRequest {
  /**
   * Required. The new definition of the TagKey. Only the `description` and
   * `etag` fields can be updated by this request. If the `etag` field is not
   * empty, it must match the `etag` field of the existing tag key. Otherwise,
   * `ABORTED` will be returned.
   */
  tagKey:
    | TagKey
    | undefined;
  /**
   * Fields to be updated. The mask may only contain `description` or
   * `etag`. If omitted entirely, both `description` and `etag` are assumed to
   * be significant.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Set as true to perform validations necessary for updating the resource, but
   * not actually perform the action.
   */
  validateOnly: boolean;
}

/** Runtime operation information for updating a TagKey. */
export interface UpdateTagKeyMetadata {
}

/** The request message for deleting a TagKey. */
export interface DeleteTagKeyRequest {
  /**
   * Required. The resource name of a TagKey to be deleted in the format
   * `tagKeys/123`. The TagKey cannot be a parent of any existing TagValues or
   * it will not be deleted successfully.
   */
  name: string;
  /**
   * Optional. Set as true to perform validations necessary for deletion, but
   * not actually perform the action.
   */
  validateOnly: boolean;
  /**
   * Optional. The etag known to the client for the expected state of the
   * TagKey. This is to be used for optimistic concurrency.
   */
  etag: string;
}

/** Runtime operation information for deleting a TagKey. */
export interface DeleteTagKeyMetadata {
}

function createBaseTagKey(): TagKey {
  return {
    name: "",
    parent: "",
    shortName: "",
    namespacedName: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    etag: "",
    purpose: 0,
    purposeData: {},
  };
}

export const TagKey: MessageFns<TagKey> = {
  encode(message: TagKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    if (message.shortName !== "") {
      writer.uint32(26).string(message.shortName);
    }
    if (message.namespacedName !== "") {
      writer.uint32(34).string(message.namespacedName);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    if (message.purpose !== 0) {
      writer.uint32(88).int32(message.purpose);
    }
    Object.entries(message.purposeData).forEach(([key, value]) => {
      TagKey_PurposeDataEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.shortName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.namespacedName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.purpose = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = TagKey_PurposeDataEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.purposeData[entry12.key] = entry12.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagKey {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      shortName: isSet(object.shortName) ? globalThis.String(object.shortName) : "",
      namespacedName: isSet(object.namespacedName) ? globalThis.String(object.namespacedName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      purpose: isSet(object.purpose) ? purposeFromJSON(object.purpose) : 0,
      purposeData: isObject(object.purposeData)
        ? Object.entries(object.purposeData).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TagKey): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.shortName !== "") {
      obj.shortName = message.shortName;
    }
    if (message.namespacedName !== "") {
      obj.namespacedName = message.namespacedName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.purpose !== 0) {
      obj.purpose = purposeToJSON(message.purpose);
    }
    if (message.purposeData) {
      const entries = Object.entries(message.purposeData);
      if (entries.length > 0) {
        obj.purposeData = {};
        entries.forEach(([k, v]) => {
          obj.purposeData[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TagKey>): TagKey {
    return TagKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagKey>): TagKey {
    const message = createBaseTagKey();
    message.name = object.name ?? "";
    message.parent = object.parent ?? "";
    message.shortName = object.shortName ?? "";
    message.namespacedName = object.namespacedName ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    message.purpose = object.purpose ?? 0;
    message.purposeData = Object.entries(object.purposeData ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTagKey_PurposeDataEntry(): TagKey_PurposeDataEntry {
  return { key: "", value: "" };
}

export const TagKey_PurposeDataEntry: MessageFns<TagKey_PurposeDataEntry> = {
  encode(message: TagKey_PurposeDataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagKey_PurposeDataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagKey_PurposeDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagKey_PurposeDataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TagKey_PurposeDataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TagKey_PurposeDataEntry>): TagKey_PurposeDataEntry {
    return TagKey_PurposeDataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagKey_PurposeDataEntry>): TagKey_PurposeDataEntry {
    const message = createBaseTagKey_PurposeDataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListTagKeysRequest(): ListTagKeysRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListTagKeysRequest: MessageFns<ListTagKeysRequest> = {
  encode(message: ListTagKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagKeysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTagKeysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagKeysRequest>): ListTagKeysRequest {
    return ListTagKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagKeysRequest>): ListTagKeysRequest {
    const message = createBaseListTagKeysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTagKeysResponse(): ListTagKeysResponse {
  return { tagKeys: [], nextPageToken: "" };
}

export const ListTagKeysResponse: MessageFns<ListTagKeysResponse> = {
  encode(message: ListTagKeysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tagKeys) {
      TagKey.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTagKeysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTagKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagKeys.push(TagKey.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTagKeysResponse {
    return {
      tagKeys: globalThis.Array.isArray(object?.tagKeys) ? object.tagKeys.map((e: any) => TagKey.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTagKeysResponse): unknown {
    const obj: any = {};
    if (message.tagKeys?.length) {
      obj.tagKeys = message.tagKeys.map((e) => TagKey.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTagKeysResponse>): ListTagKeysResponse {
    return ListTagKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTagKeysResponse>): ListTagKeysResponse {
    const message = createBaseListTagKeysResponse();
    message.tagKeys = object.tagKeys?.map((e) => TagKey.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTagKeyRequest(): GetTagKeyRequest {
  return { name: "" };
}

export const GetTagKeyRequest: MessageFns<GetTagKeyRequest> = {
  encode(message: GetTagKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTagKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTagKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTagKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTagKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTagKeyRequest>): GetTagKeyRequest {
    return GetTagKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTagKeyRequest>): GetTagKeyRequest {
    const message = createBaseGetTagKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetNamespacedTagKeyRequest(): GetNamespacedTagKeyRequest {
  return { name: "" };
}

export const GetNamespacedTagKeyRequest: MessageFns<GetNamespacedTagKeyRequest> = {
  encode(message: GetNamespacedTagKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNamespacedTagKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNamespacedTagKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNamespacedTagKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNamespacedTagKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNamespacedTagKeyRequest>): GetNamespacedTagKeyRequest {
    return GetNamespacedTagKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNamespacedTagKeyRequest>): GetNamespacedTagKeyRequest {
    const message = createBaseGetNamespacedTagKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateTagKeyRequest(): CreateTagKeyRequest {
  return { tagKey: undefined, validateOnly: false };
}

export const CreateTagKeyRequest: MessageFns<CreateTagKeyRequest> = {
  encode(message: CreateTagKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagKey !== undefined) {
      TagKey.encode(message.tagKey, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagKey = TagKey.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTagKeyRequest {
    return {
      tagKey: isSet(object.tagKey) ? TagKey.fromJSON(object.tagKey) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateTagKeyRequest): unknown {
    const obj: any = {};
    if (message.tagKey !== undefined) {
      obj.tagKey = TagKey.toJSON(message.tagKey);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTagKeyRequest>): CreateTagKeyRequest {
    return CreateTagKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTagKeyRequest>): CreateTagKeyRequest {
    const message = createBaseCreateTagKeyRequest();
    message.tagKey = (object.tagKey !== undefined && object.tagKey !== null)
      ? TagKey.fromPartial(object.tagKey)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCreateTagKeyMetadata(): CreateTagKeyMetadata {
  return {};
}

export const CreateTagKeyMetadata: MessageFns<CreateTagKeyMetadata> = {
  encode(_: CreateTagKeyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTagKeyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTagKeyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateTagKeyMetadata {
    return {};
  },

  toJSON(_: CreateTagKeyMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateTagKeyMetadata>): CreateTagKeyMetadata {
    return CreateTagKeyMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateTagKeyMetadata>): CreateTagKeyMetadata {
    const message = createBaseCreateTagKeyMetadata();
    return message;
  },
};

function createBaseUpdateTagKeyRequest(): UpdateTagKeyRequest {
  return { tagKey: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateTagKeyRequest: MessageFns<UpdateTagKeyRequest> = {
  encode(message: UpdateTagKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagKey !== undefined) {
      TagKey.encode(message.tagKey, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tagKey = TagKey.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTagKeyRequest {
    return {
      tagKey: isSet(object.tagKey) ? TagKey.fromJSON(object.tagKey) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateTagKeyRequest): unknown {
    const obj: any = {};
    if (message.tagKey !== undefined) {
      obj.tagKey = TagKey.toJSON(message.tagKey);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTagKeyRequest>): UpdateTagKeyRequest {
    return UpdateTagKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTagKeyRequest>): UpdateTagKeyRequest {
    const message = createBaseUpdateTagKeyRequest();
    message.tagKey = (object.tagKey !== undefined && object.tagKey !== null)
      ? TagKey.fromPartial(object.tagKey)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateTagKeyMetadata(): UpdateTagKeyMetadata {
  return {};
}

export const UpdateTagKeyMetadata: MessageFns<UpdateTagKeyMetadata> = {
  encode(_: UpdateTagKeyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTagKeyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTagKeyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateTagKeyMetadata {
    return {};
  },

  toJSON(_: UpdateTagKeyMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateTagKeyMetadata>): UpdateTagKeyMetadata {
    return UpdateTagKeyMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateTagKeyMetadata>): UpdateTagKeyMetadata {
    const message = createBaseUpdateTagKeyMetadata();
    return message;
  },
};

function createBaseDeleteTagKeyRequest(): DeleteTagKeyRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const DeleteTagKeyRequest: MessageFns<DeleteTagKeyRequest> = {
  encode(message: DeleteTagKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTagKeyRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteTagKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTagKeyRequest>): DeleteTagKeyRequest {
    return DeleteTagKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTagKeyRequest>): DeleteTagKeyRequest {
    const message = createBaseDeleteTagKeyRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseDeleteTagKeyMetadata(): DeleteTagKeyMetadata {
  return {};
}

export const DeleteTagKeyMetadata: MessageFns<DeleteTagKeyMetadata> = {
  encode(_: DeleteTagKeyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTagKeyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTagKeyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteTagKeyMetadata {
    return {};
  },

  toJSON(_: DeleteTagKeyMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteTagKeyMetadata>): DeleteTagKeyMetadata {
    return DeleteTagKeyMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteTagKeyMetadata>): DeleteTagKeyMetadata {
    const message = createBaseDeleteTagKeyMetadata();
    return message;
  },
};

/** Allow users to create and manage tag keys. */
export type TagKeysDefinition = typeof TagKeysDefinition;
export const TagKeysDefinition = {
  name: "TagKeys",
  fullName: "google.cloud.resourcemanager.v3.TagKeys",
  methods: {
    /** Lists all TagKeys for a parent resource. */
    listTagKeys: {
      name: "ListTagKeys",
      requestType: ListTagKeysRequest,
      requestStream: false,
      responseType: ListTagKeysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [Buffer.from([13, 18, 11, 47, 118, 51, 47, 116, 97, 103, 75, 101, 121, 115])],
        },
      },
    },
    /**
     * Retrieves a TagKey. This method will return `PERMISSION_DENIED` if the
     * key does not exist or the user does not have permission to view it.
     */
    getTagKey: {
      name: "GetTagKey",
      requestType: GetTagKeyRequest,
      requestStream: false,
      responseType: TagKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              22,
              18,
              20,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a TagKey by its namespaced name.
     * This method will return `PERMISSION_DENIED` if the key does not exist
     * or the user does not have permission to view it.
     */
    getNamespacedTagKey: {
      name: "GetNamespacedTagKey",
      requestType: GetNamespacedTagKeyRequest,
      requestStream: false,
      responseType: TagKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              24,
              18,
              22,
              47,
              118,
              51,
              47,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              110,
              97,
              109,
              101,
              115,
              112,
              97,
              99,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new TagKey. If another request with the same parameters is
     * sent while the original request is in process, the second request
     * will receive an error. A maximum of 1000 TagKeys can exist under a parent
     * at any given time.
     */
    createTagKey: {
      name: "CreateTagKey",
      requestType: CreateTagKeyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              30,
              10,
              6,
              84,
              97,
              103,
              75,
              101,
              121,
              18,
              20,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              97,
              103,
              75,
              101,
              121,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 116, 97, 103, 95, 107, 101, 121])],
          578365826: [
            Buffer.from([
              22,
              58,
              7,
              116,
              97,
              103,
              95,
              107,
              101,
              121,
              34,
              11,
              47,
              118,
              51,
              47,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the attributes of the TagKey resource. */
    updateTagKey: {
      name: "UpdateTagKey",
      requestType: UpdateTagKeyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              30,
              10,
              6,
              84,
              97,
              103,
              75,
              101,
              121,
              18,
              20,
              85,
              112,
              100,
              97,
              116,
              101,
              84,
              97,
              103,
              75,
              101,
              121,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 116, 97, 103, 95, 107, 101, 121, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              39,
              58,
              7,
              116,
              97,
              103,
              95,
              107,
              101,
              121,
              50,
              28,
              47,
              118,
              51,
              47,
              123,
              116,
              97,
              103,
              95,
              107,
              101,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a TagKey. The TagKey cannot be deleted if it has any child
     * TagValues.
     */
    deleteTagKey: {
      name: "DeleteTagKey",
      requestType: DeleteTagKeyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              30,
              10,
              6,
              84,
              97,
              103,
              75,
              101,
              121,
              18,
              20,
              68,
              101,
              108,
              101,
              116,
              101,
              84,
              97,
              103,
              75,
              101,
              121,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              22,
              42,
              20,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a TagKey. The returned policy may be
     * empty if no such policy or resource exists. The `resource` field should
     * be the TagKey's resource name. For example, "tagKeys/1234".
     * The caller must have
     * `cloudresourcemanager.googleapis.com/tagKeys.getIamPolicy` permission on
     * the specified TagKey.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on a TagKey, replacing any existing
     * policy. The `resource` field should be the TagKey's resource name.
     * For example, "tagKeys/1234".
     * The caller must have `resourcemanager.tagKeys.setIamPolicy` permission
     * on the identified tagValue.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified TagKey.
     * The `resource` field should be the TagKey's resource name.
     * For example, "tagKeys/1234".
     *
     * There are no permissions required for making this API call.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              116,
              97,
              103,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TagKeysServiceImplementation<CallContextExt = {}> {
  /** Lists all TagKeys for a parent resource. */
  listTagKeys(
    request: ListTagKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTagKeysResponse>>;
  /**
   * Retrieves a TagKey. This method will return `PERMISSION_DENIED` if the
   * key does not exist or the user does not have permission to view it.
   */
  getTagKey(request: GetTagKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TagKey>>;
  /**
   * Retrieves a TagKey by its namespaced name.
   * This method will return `PERMISSION_DENIED` if the key does not exist
   * or the user does not have permission to view it.
   */
  getNamespacedTagKey(
    request: GetNamespacedTagKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TagKey>>;
  /**
   * Creates a new TagKey. If another request with the same parameters is
   * sent while the original request is in process, the second request
   * will receive an error. A maximum of 1000 TagKeys can exist under a parent
   * at any given time.
   */
  createTagKey(request: CreateTagKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the attributes of the TagKey resource. */
  updateTagKey(request: UpdateTagKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a TagKey. The TagKey cannot be deleted if it has any child
   * TagValues.
   */
  deleteTagKey(request: DeleteTagKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Gets the access control policy for a TagKey. The returned policy may be
   * empty if no such policy or resource exists. The `resource` field should
   * be the TagKey's resource name. For example, "tagKeys/1234".
   * The caller must have
   * `cloudresourcemanager.googleapis.com/tagKeys.getIamPolicy` permission on
   * the specified TagKey.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the access control policy on a TagKey, replacing any existing
   * policy. The `resource` field should be the TagKey's resource name.
   * For example, "tagKeys/1234".
   * The caller must have `resourcemanager.tagKeys.setIamPolicy` permission
   * on the identified tagValue.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified TagKey.
   * The `resource` field should be the TagKey's resource name.
   * For example, "tagKeys/1234".
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface TagKeysClient<CallOptionsExt = {}> {
  /** Lists all TagKeys for a parent resource. */
  listTagKeys(
    request: DeepPartial<ListTagKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTagKeysResponse>;
  /**
   * Retrieves a TagKey. This method will return `PERMISSION_DENIED` if the
   * key does not exist or the user does not have permission to view it.
   */
  getTagKey(request: DeepPartial<GetTagKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<TagKey>;
  /**
   * Retrieves a TagKey by its namespaced name.
   * This method will return `PERMISSION_DENIED` if the key does not exist
   * or the user does not have permission to view it.
   */
  getNamespacedTagKey(
    request: DeepPartial<GetNamespacedTagKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TagKey>;
  /**
   * Creates a new TagKey. If another request with the same parameters is
   * sent while the original request is in process, the second request
   * will receive an error. A maximum of 1000 TagKeys can exist under a parent
   * at any given time.
   */
  createTagKey(request: DeepPartial<CreateTagKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the attributes of the TagKey resource. */
  updateTagKey(request: DeepPartial<UpdateTagKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Deletes a TagKey. The TagKey cannot be deleted if it has any child
   * TagValues.
   */
  deleteTagKey(request: DeepPartial<DeleteTagKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Gets the access control policy for a TagKey. The returned policy may be
   * empty if no such policy or resource exists. The `resource` field should
   * be the TagKey's resource name. For example, "tagKeys/1234".
   * The caller must have
   * `cloudresourcemanager.googleapis.com/tagKeys.getIamPolicy` permission on
   * the specified TagKey.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the access control policy on a TagKey, replacing any existing
   * policy. The `resource` field should be the TagKey's resource name.
   * For example, "tagKeys/1234".
   * The caller must have `resourcemanager.tagKeys.setIamPolicy` permission
   * on the identified tagValue.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified TagKey.
   * The `resource` field should be the TagKey's resource name.
   * For example, "tagKeys/1234".
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
