// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/resourcemanager/v3/projects.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.resourcemanager.v3";

/**
 * A project is a high-level Google Cloud entity. It is a
 * container for ACLs, APIs, App Engine Apps, VMs, and other
 * Google Cloud Platform resources.
 */
export interface Project {
  /**
   * Output only. The unique resource name of the project. It is an int64
   * generated number prefixed by "projects/".
   *
   * Example: `projects/415104041262`
   */
  name: string;
  /**
   * Optional. A reference to a parent Resource. eg., `organizations/123` or
   * `folders/876`.
   */
  parent: string;
  /**
   * Immutable. The unique, user-assigned id of the project.
   * It must be 6 to 30 lowercase ASCII letters, digits, or hyphens.
   * It must start with a letter.
   * Trailing hyphens are prohibited.
   *
   * Example: `tokyo-rain-123`
   */
  projectId: string;
  /** Output only. The project lifecycle state. */
  state: Project_State;
  /**
   * Optional. A user-assigned display name of the project.
   * When present it must be between 4 to 30 characters.
   * Allowed characters are: lowercase and uppercase letters, numbers,
   * hyphen, single-quote, double-quote, space, and exclamation point.
   *
   * Example: `My Project`
   */
  displayName: string;
  /** Output only. Creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. The most recent time this resource was modified. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The time at which this resource was requested for deletion. */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. A checksum computed by the server based on the current value
   * of the Project resource. This may be sent on update and delete requests to
   * ensure the client has an up-to-date value before proceeding.
   */
  etag: string;
  /**
   * Optional. The labels associated with this project.
   *
   * Label keys must be between 1 and 63 characters long and must conform
   * to the following regular expression: \[a-z\](\[-a-z0-9\]*\[a-z0-9\])?.
   *
   * Label values must be between 0 and 63 characters long and must conform
   * to the regular expression (\[a-z\](\[-a-z0-9\]*\[a-z0-9\])?)?.
   *
   * No more than 64 labels can be associated with a given resource.
   *
   * Clients should store labels in a representation such as JSON that does not
   * depend on specific characters being disallowed.
   *
   * Example: `"myBusinessDimension" : "businessValue"`
   */
  labels: { [key: string]: string };
}

/** Project lifecycle states. */
export enum Project_State {
  /**
   * STATE_UNSPECIFIED - Unspecified state.  This is only used/useful for distinguishing
   * unset values.
   */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The normal and active state. */
  ACTIVE = 1,
  /**
   * DELETE_REQUESTED - The project has been marked for deletion by the user
   * (by invoking
   * [DeleteProject][google.cloud.resourcemanager.v3.Projects.DeleteProject])
   * or by the system (Google Cloud Platform).
   * This can generally be reversed by invoking [UndeleteProject]
   * [google.cloud.resourcemanager.v3.Projects.UndeleteProject].
   */
  DELETE_REQUESTED = 2,
  UNRECOGNIZED = -1,
}

export function project_StateFromJSON(object: any): Project_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Project_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Project_State.ACTIVE;
    case 2:
    case "DELETE_REQUESTED":
      return Project_State.DELETE_REQUESTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Project_State.UNRECOGNIZED;
  }
}

export function project_StateToJSON(object: Project_State): string {
  switch (object) {
    case Project_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Project_State.ACTIVE:
      return "ACTIVE";
    case Project_State.DELETE_REQUESTED:
      return "DELETE_REQUESTED";
    case Project_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Project_LabelsEntry {
  key: string;
  value: string;
}

/**
 * The request sent to the
 * [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject]
 * method.
 */
export interface GetProjectRequest {
  /** Required. The name of the project (for example, `projects/415104041262`). */
  name: string;
}

/**
 * The request sent to the
 * [ListProjects][google.cloud.resourcemanager.v3.Projects.ListProjects]
 * method.
 */
export interface ListProjectsRequest {
  /**
   * Required. The name of the parent resource whose projects are being listed.
   * Only children of this parent resource are listed; descendants are not
   * listed.
   *
   * If the parent is a folder, use the value `folders/{folder_id}`. If the
   * parent is an organization, use the value `organizations/{org_id}`.
   */
  parent: string;
  /**
   * Optional. A pagination token returned from a previous call to
   * [ListProjects] [google.cloud.resourcemanager.v3.Projects.ListProjects] that
   * indicates from where listing should continue.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of projects to return in the response.
   * The server can return fewer projects than requested.
   * If unspecified, server picks an appropriate default.
   */
  pageSize: number;
  /**
   * Optional. Indicate that projects in the `DELETE_REQUESTED` state should
   * also be returned. Normally only `ACTIVE` projects are returned.
   */
  showDeleted: boolean;
}

/**
 * A page of the response received from the
 * [ListProjects][google.cloud.resourcemanager.v3.Projects.ListProjects]
 * method.
 *
 * A paginated response where more pages are available has
 * `next_page_token` set. This token can be used in a subsequent request to
 * retrieve the next request page.
 *
 * NOTE: A response may contain fewer elements than the request `page_size` and
 * still have a `next_page_token`.
 */
export interface ListProjectsResponse {
  /** The list of Projects under the parent. This list can be paginated. */
  projects: Project[];
  /**
   * Pagination token.
   *
   * If the result set is too large to fit in a single response, this token
   * is returned. It encodes the position of the current result cursor.
   * Feeding this value into a new list request with the `page_token` parameter
   * gives the next page of the results.
   *
   * When `next_page_token` is not filled in, there is no next page and
   * the list returned is the last page in the result set.
   *
   * Pagination tokens have a limited lifetime.
   */
  nextPageToken: string;
}

/**
 * The request sent to the
 * [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
 * method.
 */
export interface SearchProjectsRequest {
  /**
   * Optional. A query string for searching for projects that the caller has
   * `resourcemanager.projects.get` permission to. If multiple fields are
   * included in the query, then it will return results that match any of the
   * fields. Some eligible fields are:
   *
   * - **`displayName`, `name`**: Filters by displayName.
   * - **`parent`**: Project's parent (for example: `folders/123`,
   * `organizations/*`). Prefer `parent` field over `parent.type` and
   * `parent.id`.
   * - **`parent.type`**: Parent's type: `folder` or `organization`.
   * - **`parent.id`**: Parent's id number (for example: `123`).
   * - **`id`, `projectId`**: Filters by projectId.
   * - **`state`, `lifecycleState`**: Filters by state.
   * - **`labels`**: Filters by label name or value.
   * - **`labels.<key>` (where `<key>` is the name of a label)**: Filters by label
   * name.
   *
   * Search expressions are case insensitive.
   *
   * Some examples queries:
   *
   * - **`name:how*`**: The project's name starts with "how".
   * - **`name:Howl`**: The project's name is `Howl` or `howl`.
   * - **`name:HOWL`**: Equivalent to above.
   * - **`NAME:howl`**: Equivalent to above.
   * - **`labels.color:*`**: The project has the label `color`.
   * - **`labels.color:red`**:  The project's label `color` has the value `red`.
   * - **`labels.color:red labels.size:big`**: The project's label `color` has
   * the value `red` or its label `size` has the value `big`.
   *
   * If no query is specified, the call will return projects for which the user
   * has the `resourcemanager.projects.get` permission.
   */
  query: string;
  /**
   * Optional. A pagination token returned from a previous call to
   * [ListProjects] [google.cloud.resourcemanager.v3.Projects.ListProjects] that
   * indicates from where listing should continue.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of projects to return in the response.
   * The server can return fewer projects than requested.
   * If unspecified, server picks an appropriate default.
   */
  pageSize: number;
}

/**
 * A page of the response received from the
 * [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
 * method.
 *
 * A paginated response where more pages are available has
 * `next_page_token` set. This token can be used in a subsequent request to
 * retrieve the next request page.
 */
export interface SearchProjectsResponse {
  /**
   * The list of Projects that matched the list filter query. This list can
   * be paginated.
   */
  projects: Project[];
  /**
   * Pagination token.
   *
   * If the result set is too large to fit in a single response, this token
   * is returned. It encodes the position of the current result cursor.
   * Feeding this value into a new list request with the `page_token` parameter
   * gives the next page of the results.
   *
   * When `next_page_token` is not filled in, there is no next page and
   * the list returned is the last page in the result set.
   *
   * Pagination tokens have a limited lifetime.
   */
  nextPageToken: string;
}

/**
 * The request sent to the
 * [CreateProject][google.cloud.resourcemanager.v3.Projects.CreateProject]
 * method.
 */
export interface CreateProjectRequest {
  /**
   * Required. The Project to create.
   *
   * Project ID is required. If the requested ID is unavailable, the request
   * fails.
   *
   * If the `parent` field is set, the `resourcemanager.projects.create`
   * permission is checked on the parent resource. If no parent is set and
   * the authorization credentials belong to an Organization, the parent
   * will be set to that Organization.
   */
  project: Project | undefined;
}

/**
 * A status object which is used as the `metadata` field for the Operation
 * returned by CreateProject. It provides insight for when significant phases of
 * Project creation have completed.
 */
export interface CreateProjectMetadata {
  /** Creation time of the project creation workflow. */
  createTime:
    | Date
    | undefined;
  /**
   * True if the project can be retrieved using `GetProject`. No other
   * operations on the project are guaranteed to work until the project creation
   * is complete.
   */
  gettable: boolean;
  /** True if the project creation process is complete. */
  ready: boolean;
}

/**
 * The request sent to the
 * [UpdateProject][google.cloud.resourcemanager.v3.Projects.UpdateProject]
 * method.
 *
 * Only the `display_name` and `labels` fields can be change. Use the
 * [MoveProject][google.cloud.resourcemanager.v3.Projects.MoveProject] method to
 * change the `parent` field.
 */
export interface UpdateProjectRequest {
  /** Required. The new definition of the project. */
  project:
    | Project
    | undefined;
  /** Optional. An update mask to selectively update fields. */
  updateMask: string[] | undefined;
}

/**
 * A status object which is used as the `metadata` field for the Operation
 * returned by UpdateProject.
 */
export interface UpdateProjectMetadata {
}

/**
 * The request sent to
 * [MoveProject][google.cloud.resourcemanager.v3.Projects.MoveProject]
 * method.
 */
export interface MoveProjectRequest {
  /** Required. The name of the project to move. */
  name: string;
  /** Required. The new parent to move the Project under. */
  destinationParent: string;
}

/**
 * A status object which is used as the `metadata` field for the Operation
 * returned by MoveProject.
 */
export interface MoveProjectMetadata {
}

/**
 * [DeleteProject][google.cloud.resourcemanager.v3.Projects.DeleteProject]
 * method.
 */
export interface DeleteProjectRequest {
  /** Required. The name of the Project (for example, `projects/415104041262`). */
  name: string;
}

/**
 * A status object which is used as the `metadata` field for the Operation
 * returned by `DeleteProject`.
 */
export interface DeleteProjectMetadata {
}

/**
 * The request sent to the [UndeleteProject]
 * [google.cloud.resourcemanager.v3.Projects.UndeleteProject]
 * method.
 */
export interface UndeleteProjectRequest {
  /**
   * Required. The name of the project (for example, `projects/415104041262`).
   *
   * Required.
   */
  name: string;
}

/**
 * A status object which is used as the `metadata` field for the Operation
 * returned by `UndeleteProject`.
 */
export interface UndeleteProjectMetadata {
}

function createBaseProject(): Project {
  return {
    name: "",
    parent: "",
    projectId: "",
    state: 0,
    displayName: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    etag: "",
    labels: {},
  };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(66).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(74).string(message.etag);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Project_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = Project_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      state: isSet(object.state) ? project_StateFromJSON(object.state) : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.state !== 0) {
      obj.state = project_StateToJSON(message.state);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Project>): Project {
    return Project.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project>): Project {
    const message = createBaseProject();
    message.name = object.name ?? "";
    message.parent = object.parent ?? "";
    message.projectId = object.projectId ?? "";
    message.state = object.state ?? 0;
    message.displayName = object.displayName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.etag = object.etag ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseProject_LabelsEntry(): Project_LabelsEntry {
  return { key: "", value: "" };
}

export const Project_LabelsEntry: MessageFns<Project_LabelsEntry> = {
  encode(message: Project_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Project_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Project_LabelsEntry>): Project_LabelsEntry {
    return Project_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project_LabelsEntry>): Project_LabelsEntry {
    const message = createBaseProject_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetProjectRequest(): GetProjectRequest {
  return { name: "" };
}

export const GetProjectRequest: MessageFns<GetProjectRequest> = {
  encode(message: GetProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProjectRequest>): GetProjectRequest {
    return GetProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectRequest>): GetProjectRequest {
    const message = createBaseGetProjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListProjectsRequest(): ListProjectsRequest {
  return { parent: "", pageToken: "", pageSize: 0, showDeleted: false };
}

export const ListProjectsRequest: MessageFns<ListProjectsRequest> = {
  encode(message: ListProjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListProjectsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    return ListProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    const message = createBaseListProjectsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListProjectsResponse(): ListProjectsResponse {
  return { projects: [], nextPageToken: "" };
}

export const ListProjectsResponse: MessageFns<ListProjectsResponse> = {
  encode(message: ListProjectsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProjectsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectsResponse {
    return {
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProjectsResponse): unknown {
    const obj: any = {};
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    return ListProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    const message = createBaseListProjectsResponse();
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchProjectsRequest(): SearchProjectsRequest {
  return { query: "", pageToken: "", pageSize: 0 };
}

export const SearchProjectsRequest: MessageFns<SearchProjectsRequest> = {
  encode(message: SearchProjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchProjectsRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: SearchProjectsRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchProjectsRequest>): SearchProjectsRequest {
    return SearchProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProjectsRequest>): SearchProjectsRequest {
    const message = createBaseSearchProjectsRequest();
    message.query = object.query ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseSearchProjectsResponse(): SearchProjectsResponse {
  return { projects: [], nextPageToken: "" };
}

export const SearchProjectsResponse: MessageFns<SearchProjectsResponse> = {
  encode(message: SearchProjectsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProjectsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchProjectsResponse {
    return {
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchProjectsResponse): unknown {
    const obj: any = {};
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchProjectsResponse>): SearchProjectsResponse {
    return SearchProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProjectsResponse>): SearchProjectsResponse {
    const message = createBaseSearchProjectsResponse();
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateProjectRequest(): CreateProjectRequest {
  return { project: undefined };
}

export const CreateProjectRequest: MessageFns<CreateProjectRequest> = {
  encode(message: CreateProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProjectRequest {
    return { project: isSet(object.project) ? Project.fromJSON(object.project) : undefined };
  },

  toJSON(message: CreateProjectRequest): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProjectRequest>): CreateProjectRequest {
    return CreateProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProjectRequest>): CreateProjectRequest {
    const message = createBaseCreateProjectRequest();
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseCreateProjectMetadata(): CreateProjectMetadata {
  return { createTime: undefined, gettable: false, ready: false };
}

export const CreateProjectMetadata: MessageFns<CreateProjectMetadata> = {
  encode(message: CreateProjectMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.gettable !== false) {
      writer.uint32(16).bool(message.gettable);
    }
    if (message.ready !== false) {
      writer.uint32(24).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProjectMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProjectMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gettable = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ready = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProjectMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      gettable: isSet(object.gettable) ? globalThis.Boolean(object.gettable) : false,
      ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false,
    };
  },

  toJSON(message: CreateProjectMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.gettable !== false) {
      obj.gettable = message.gettable;
    }
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProjectMetadata>): CreateProjectMetadata {
    return CreateProjectMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProjectMetadata>): CreateProjectMetadata {
    const message = createBaseCreateProjectMetadata();
    message.createTime = object.createTime ?? undefined;
    message.gettable = object.gettable ?? false;
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBaseUpdateProjectRequest(): UpdateProjectRequest {
  return { project: undefined, updateMask: undefined };
}

export const UpdateProjectRequest: MessageFns<UpdateProjectRequest> = {
  encode(message: UpdateProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectRequest {
    return {
      project: isSet(object.project) ? Project.fromJSON(object.project) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateProjectRequest): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProjectRequest>): UpdateProjectRequest {
    return UpdateProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectRequest>): UpdateProjectRequest {
    const message = createBaseUpdateProjectRequest();
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateProjectMetadata(): UpdateProjectMetadata {
  return {};
}

export const UpdateProjectMetadata: MessageFns<UpdateProjectMetadata> = {
  encode(_: UpdateProjectMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProjectMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateProjectMetadata {
    return {};
  },

  toJSON(_: UpdateProjectMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateProjectMetadata>): UpdateProjectMetadata {
    return UpdateProjectMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateProjectMetadata>): UpdateProjectMetadata {
    const message = createBaseUpdateProjectMetadata();
    return message;
  },
};

function createBaseMoveProjectRequest(): MoveProjectRequest {
  return { name: "", destinationParent: "" };
}

export const MoveProjectRequest: MessageFns<MoveProjectRequest> = {
  encode(message: MoveProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.destinationParent !== "") {
      writer.uint32(18).string(message.destinationParent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationParent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveProjectRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      destinationParent: isSet(object.destinationParent) ? globalThis.String(object.destinationParent) : "",
    };
  },

  toJSON(message: MoveProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.destinationParent !== "") {
      obj.destinationParent = message.destinationParent;
    }
    return obj;
  },

  create(base?: DeepPartial<MoveProjectRequest>): MoveProjectRequest {
    return MoveProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MoveProjectRequest>): MoveProjectRequest {
    const message = createBaseMoveProjectRequest();
    message.name = object.name ?? "";
    message.destinationParent = object.destinationParent ?? "";
    return message;
  },
};

function createBaseMoveProjectMetadata(): MoveProjectMetadata {
  return {};
}

export const MoveProjectMetadata: MessageFns<MoveProjectMetadata> = {
  encode(_: MoveProjectMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveProjectMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveProjectMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MoveProjectMetadata {
    return {};
  },

  toJSON(_: MoveProjectMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MoveProjectMetadata>): MoveProjectMetadata {
    return MoveProjectMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MoveProjectMetadata>): MoveProjectMetadata {
    const message = createBaseMoveProjectMetadata();
    return message;
  },
};

function createBaseDeleteProjectRequest(): DeleteProjectRequest {
  return { name: "" };
}

export const DeleteProjectRequest: MessageFns<DeleteProjectRequest> = {
  encode(message: DeleteProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProjectRequest>): DeleteProjectRequest {
    return DeleteProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProjectRequest>): DeleteProjectRequest {
    const message = createBaseDeleteProjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteProjectMetadata(): DeleteProjectMetadata {
  return {};
}

export const DeleteProjectMetadata: MessageFns<DeleteProjectMetadata> = {
  encode(_: DeleteProjectMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProjectMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProjectMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteProjectMetadata {
    return {};
  },

  toJSON(_: DeleteProjectMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteProjectMetadata>): DeleteProjectMetadata {
    return DeleteProjectMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteProjectMetadata>): DeleteProjectMetadata {
    const message = createBaseDeleteProjectMetadata();
    return message;
  },
};

function createBaseUndeleteProjectRequest(): UndeleteProjectRequest {
  return { name: "" };
}

export const UndeleteProjectRequest: MessageFns<UndeleteProjectRequest> = {
  encode(message: UndeleteProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteProjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeleteProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteProjectRequest>): UndeleteProjectRequest {
    return UndeleteProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteProjectRequest>): UndeleteProjectRequest {
    const message = createBaseUndeleteProjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeleteProjectMetadata(): UndeleteProjectMetadata {
  return {};
}

export const UndeleteProjectMetadata: MessageFns<UndeleteProjectMetadata> = {
  encode(_: UndeleteProjectMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteProjectMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteProjectMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeleteProjectMetadata {
    return {};
  },

  toJSON(_: UndeleteProjectMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeleteProjectMetadata>): UndeleteProjectMetadata {
    return UndeleteProjectMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeleteProjectMetadata>): UndeleteProjectMetadata {
    const message = createBaseUndeleteProjectMetadata();
    return message;
  },
};

/** Manages Google Cloud Projects. */
export type ProjectsDefinition = typeof ProjectsDefinition;
export const ProjectsDefinition = {
  name: "Projects",
  fullName: "google.cloud.resourcemanager.v3.Projects",
  methods: {
    /**
     * Retrieves the project identified by the specified `name` (for example,
     * `projects/415104041262`).
     *
     * The caller must have `resourcemanager.projects.get` permission
     * for this project.
     */
    getProject: {
      name: "GetProject",
      requestType: GetProjectRequest,
      requestStream: false,
      responseType: Project,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              23,
              18,
              21,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists projects that are direct children of the specified folder or
     * organization resource. `list()` provides a strongly consistent view of the
     * projects underneath the specified parent resource. `list()` returns
     * projects sorted based upon the (ascending) lexical ordering of their
     * `display_name`. The caller must have `resourcemanager.projects.list`
     * permission on the identified parent.
     */
    listProjects: {
      name: "ListProjects",
      requestType: ListProjectsRequest,
      requestStream: false,
      responseType: ListProjectsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [Buffer.from([14, 18, 12, 47, 118, 51, 47, 112, 114, 111, 106, 101, 99, 116, 115])],
        },
      },
    },
    /**
     * Search for projects that the caller has both `resourcemanager.projects.get`
     * permission on, and also satisfy the specified query.
     *
     * This method returns projects in an unspecified order.
     *
     * This method is eventually consistent with project mutations; this means
     * that a newly created project may not appear in the results or recent
     * updates to an existing project may not be reflected in the results. To
     * retrieve the latest state of a project, use the
     * [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
     */
    searchProjects: {
      name: "SearchProjects",
      requestType: SearchProjectsRequest,
      requestStream: false,
      responseType: SearchProjectsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([5, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              21,
              18,
              19,
              47,
              118,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Request that a new project be created. The result is an `Operation` which
     * can be used to track the creation process. This process usually takes a few
     * seconds, but can sometimes take much longer. The tracking `Operation` is
     * automatically deleted after a few hours, so there is no need to call
     * `DeleteOperation`.
     */
    createProject: {
      name: "CreateProject",
      requestType: CreateProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              21,
              67,
              114,
              101,
              97,
              116,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 112, 114, 111, 106, 101, 99, 116])],
          578365826: [
            Buffer.from([
              23,
              58,
              7,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              12,
              47,
              118,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the `display_name` and labels of the project identified by the
     * specified `name` (for example, `projects/415104041262`). Deleting all
     * labels requires an update mask for labels field.
     *
     * The caller must have `resourcemanager.projects.update` permission for this
     * project.
     */
    updateProject: {
      name: "UpdateProject",
      requestType: UpdateProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              21,
              85,
              112,
              100,
              97,
              116,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 112, 114, 111, 106, 101, 99, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              40,
              58,
              7,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              50,
              29,
              47,
              118,
              51,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Move a project to another place in your resource hierarchy, under a new
     * resource parent.
     *
     * Returns an operation which can be used to track the process of the project
     * move workflow.
     * Upon success, the `Operation.response` field will be populated with the
     * moved project.
     *
     * The caller must have `resourcemanager.projects.move` permission on the
     * project, on the project's current and proposed new parent.
     *
     * If project has no current parent, or it currently does not have an
     * associated organization resource, you will also need the
     * `resourcemanager.projects.setIamPolicy` permission in the project.
     */
    moveProject: {
      name: "MoveProject",
      requestType: MoveProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              30,
              10,
              7,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              19,
              77,
              111,
              118,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              110,
              97,
              109,
              101,
              44,
              32,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              97,
              114,
              101,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              111,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Marks the project identified by the specified
     * `name` (for example, `projects/415104041262`) for deletion.
     *
     * This method will only affect the project if it has a lifecycle state of
     * [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
     *
     * This method changes the Project's lifecycle state from
     * [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
     * to
     * [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
     * The deletion starts at an unspecified time,
     * at which point the Project is no longer accessible.
     *
     * Until the deletion completes, you can check the lifecycle state
     * checked by retrieving the project with [GetProject]
     * [google.cloud.resourcemanager.v3.Projects.GetProject],
     * and the project remains visible to [ListProjects]
     * [google.cloud.resourcemanager.v3.Projects.ListProjects].
     * However, you cannot update the project.
     *
     * After the deletion completes, the project is not retrievable by
     * the  [GetProject]
     * [google.cloud.resourcemanager.v3.Projects.GetProject],
     * [ListProjects]
     * [google.cloud.resourcemanager.v3.Projects.ListProjects], and
     * [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
     * methods.
     *
     * This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
     * project will not cause an error, but also won't do anything.
     *
     * The caller must have `resourcemanager.projects.delete` permissions for this
     * project.
     */
    deleteProject: {
      name: "DeleteProject",
      requestType: DeleteProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              7,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              21,
              68,
              101,
              108,
              101,
              116,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              23,
              42,
              21,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Restores the project identified by the specified
     * `name` (for example, `projects/415104041262`).
     * You can only use this method for a project that has a lifecycle state of
     * [DELETE_REQUESTED]
     * [Projects.State.DELETE_REQUESTED].
     * After deletion starts, the project cannot be restored.
     *
     * The caller must have `resourcemanager.projects.undelete` permission for
     * this project.
     */
    undeleteProject: {
      name: "UndeleteProject",
      requestType: UndeleteProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              7,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              23,
              85,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              34,
              30,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the IAM access control policy for the specified project, in the
     * format `projects/{ProjectIdOrNumber}` e.g. projects/123.
     * Permission is denied if the policy or the resource do not exist.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the IAM access control policy for the specified project, in the
     * format `projects/{ProjectIdOrNumber}` e.g. projects/123.
     *
     * CAUTION: This method will replace the existing policy, and cannot be used
     * to append additional IAM settings.
     *
     * Note: Removing service accounts from policies or changing their roles can
     * render services completely inoperable. It is important to understand how
     * the service account is being used before removing or updating its roles.
     *
     * The following constraints apply when using `setIamPolicy()`:
     *
     * + Project does not support `allUsers` and `allAuthenticatedUsers` as
     * `members` in a `Binding` of a `Policy`.
     *
     * + The owner role can be granted to a `user`, `serviceAccount`, or a group
     * that is part of an organization. For example,
     * group@myownpersonaldomain.com could be added as an owner to a project in
     * the myownpersonaldomain.com organization, but not the examplepetstore.com
     * organization.
     *
     * + Service accounts can be made owners of a project directly
     * without any restrictions. However, to be added as an owner, a user must be
     * invited using the Cloud Platform console and must accept the invitation.
     *
     * + A user cannot be granted the owner role using `setIamPolicy()`. The user
     * must be granted the owner role using the Cloud Platform Console and must
     * explicitly accept the invitation.
     *
     * + Invitations to grant the owner role cannot be sent using
     * `setIamPolicy()`;
     * they must be sent only using the Cloud Platform Console.
     *
     * + If the project is not part of an organization, there must be at least
     * one owner who has accepted the Terms of Service (ToS) agreement in the
     * policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
     * from the policy will fail. This restriction also applies to legacy
     * projects that no longer have owners who have accepted the ToS. Edits to
     * IAM policies will be rejected until the lack of a ToS-accepting owner is
     * rectified. If the project is part of an organization, you can remove all
     * owners, potentially making the organization inaccessible.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 114, 101, 115, 111, 117, 114, 99, 101, 44, 32, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified project, in the
     * format `projects/{ProjectIdOrNumber}` e.g. projects/123..
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              58,
              1,
              42,
              34,
              44,
              47,
              118,
              51,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProjectsServiceImplementation<CallContextExt = {}> {
  /**
   * Retrieves the project identified by the specified `name` (for example,
   * `projects/415104041262`).
   *
   * The caller must have `resourcemanager.projects.get` permission
   * for this project.
   */
  getProject(request: GetProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Project>>;
  /**
   * Lists projects that are direct children of the specified folder or
   * organization resource. `list()` provides a strongly consistent view of the
   * projects underneath the specified parent resource. `list()` returns
   * projects sorted based upon the (ascending) lexical ordering of their
   * `display_name`. The caller must have `resourcemanager.projects.list`
   * permission on the identified parent.
   */
  listProjects(
    request: ListProjectsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectsResponse>>;
  /**
   * Search for projects that the caller has both `resourcemanager.projects.get`
   * permission on, and also satisfy the specified query.
   *
   * This method returns projects in an unspecified order.
   *
   * This method is eventually consistent with project mutations; this means
   * that a newly created project may not appear in the results or recent
   * updates to an existing project may not be reflected in the results. To
   * retrieve the latest state of a project, use the
   * [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
   */
  searchProjects(
    request: SearchProjectsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchProjectsResponse>>;
  /**
   * Request that a new project be created. The result is an `Operation` which
   * can be used to track the creation process. This process usually takes a few
   * seconds, but can sometimes take much longer. The tracking `Operation` is
   * automatically deleted after a few hours, so there is no need to call
   * `DeleteOperation`.
   */
  createProject(request: CreateProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates the `display_name` and labels of the project identified by the
   * specified `name` (for example, `projects/415104041262`). Deleting all
   * labels requires an update mask for labels field.
   *
   * The caller must have `resourcemanager.projects.update` permission for this
   * project.
   */
  updateProject(request: UpdateProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Move a project to another place in your resource hierarchy, under a new
   * resource parent.
   *
   * Returns an operation which can be used to track the process of the project
   * move workflow.
   * Upon success, the `Operation.response` field will be populated with the
   * moved project.
   *
   * The caller must have `resourcemanager.projects.move` permission on the
   * project, on the project's current and proposed new parent.
   *
   * If project has no current parent, or it currently does not have an
   * associated organization resource, you will also need the
   * `resourcemanager.projects.setIamPolicy` permission in the project.
   */
  moveProject(request: MoveProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Marks the project identified by the specified
   * `name` (for example, `projects/415104041262`) for deletion.
   *
   * This method will only affect the project if it has a lifecycle state of
   * [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
   *
   * This method changes the Project's lifecycle state from
   * [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
   * to
   * [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
   * The deletion starts at an unspecified time,
   * at which point the Project is no longer accessible.
   *
   * Until the deletion completes, you can check the lifecycle state
   * checked by retrieving the project with [GetProject]
   * [google.cloud.resourcemanager.v3.Projects.GetProject],
   * and the project remains visible to [ListProjects]
   * [google.cloud.resourcemanager.v3.Projects.ListProjects].
   * However, you cannot update the project.
   *
   * After the deletion completes, the project is not retrievable by
   * the  [GetProject]
   * [google.cloud.resourcemanager.v3.Projects.GetProject],
   * [ListProjects]
   * [google.cloud.resourcemanager.v3.Projects.ListProjects], and
   * [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
   * methods.
   *
   * This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
   * project will not cause an error, but also won't do anything.
   *
   * The caller must have `resourcemanager.projects.delete` permissions for this
   * project.
   */
  deleteProject(request: DeleteProjectRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Restores the project identified by the specified
   * `name` (for example, `projects/415104041262`).
   * You can only use this method for a project that has a lifecycle state of
   * [DELETE_REQUESTED]
   * [Projects.State.DELETE_REQUESTED].
   * After deletion starts, the project cannot be restored.
   *
   * The caller must have `resourcemanager.projects.undelete` permission for
   * this project.
   */
  undeleteProject(
    request: UndeleteProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Returns the IAM access control policy for the specified project, in the
   * format `projects/{ProjectIdOrNumber}` e.g. projects/123.
   * Permission is denied if the policy or the resource do not exist.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the IAM access control policy for the specified project, in the
   * format `projects/{ProjectIdOrNumber}` e.g. projects/123.
   *
   * CAUTION: This method will replace the existing policy, and cannot be used
   * to append additional IAM settings.
   *
   * Note: Removing service accounts from policies or changing their roles can
   * render services completely inoperable. It is important to understand how
   * the service account is being used before removing or updating its roles.
   *
   * The following constraints apply when using `setIamPolicy()`:
   *
   * + Project does not support `allUsers` and `allAuthenticatedUsers` as
   * `members` in a `Binding` of a `Policy`.
   *
   * + The owner role can be granted to a `user`, `serviceAccount`, or a group
   * that is part of an organization. For example,
   * group@myownpersonaldomain.com could be added as an owner to a project in
   * the myownpersonaldomain.com organization, but not the examplepetstore.com
   * organization.
   *
   * + Service accounts can be made owners of a project directly
   * without any restrictions. However, to be added as an owner, a user must be
   * invited using the Cloud Platform console and must accept the invitation.
   *
   * + A user cannot be granted the owner role using `setIamPolicy()`. The user
   * must be granted the owner role using the Cloud Platform Console and must
   * explicitly accept the invitation.
   *
   * + Invitations to grant the owner role cannot be sent using
   * `setIamPolicy()`;
   * they must be sent only using the Cloud Platform Console.
   *
   * + If the project is not part of an organization, there must be at least
   * one owner who has accepted the Terms of Service (ToS) agreement in the
   * policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
   * from the policy will fail. This restriction also applies to legacy
   * projects that no longer have owners who have accepted the ToS. Edits to
   * IAM policies will be rejected until the lack of a ToS-accepting owner is
   * rectified. If the project is part of an organization, you can remove all
   * owners, potentially making the organization inaccessible.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified project, in the
   * format `projects/{ProjectIdOrNumber}` e.g. projects/123..
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface ProjectsClient<CallOptionsExt = {}> {
  /**
   * Retrieves the project identified by the specified `name` (for example,
   * `projects/415104041262`).
   *
   * The caller must have `resourcemanager.projects.get` permission
   * for this project.
   */
  getProject(request: DeepPartial<GetProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Project>;
  /**
   * Lists projects that are direct children of the specified folder or
   * organization resource. `list()` provides a strongly consistent view of the
   * projects underneath the specified parent resource. `list()` returns
   * projects sorted based upon the (ascending) lexical ordering of their
   * `display_name`. The caller must have `resourcemanager.projects.list`
   * permission on the identified parent.
   */
  listProjects(
    request: DeepPartial<ListProjectsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectsResponse>;
  /**
   * Search for projects that the caller has both `resourcemanager.projects.get`
   * permission on, and also satisfy the specified query.
   *
   * This method returns projects in an unspecified order.
   *
   * This method is eventually consistent with project mutations; this means
   * that a newly created project may not appear in the results or recent
   * updates to an existing project may not be reflected in the results. To
   * retrieve the latest state of a project, use the
   * [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
   */
  searchProjects(
    request: DeepPartial<SearchProjectsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchProjectsResponse>;
  /**
   * Request that a new project be created. The result is an `Operation` which
   * can be used to track the creation process. This process usually takes a few
   * seconds, but can sometimes take much longer. The tracking `Operation` is
   * automatically deleted after a few hours, so there is no need to call
   * `DeleteOperation`.
   */
  createProject(request: DeepPartial<CreateProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates the `display_name` and labels of the project identified by the
   * specified `name` (for example, `projects/415104041262`). Deleting all
   * labels requires an update mask for labels field.
   *
   * The caller must have `resourcemanager.projects.update` permission for this
   * project.
   */
  updateProject(request: DeepPartial<UpdateProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Move a project to another place in your resource hierarchy, under a new
   * resource parent.
   *
   * Returns an operation which can be used to track the process of the project
   * move workflow.
   * Upon success, the `Operation.response` field will be populated with the
   * moved project.
   *
   * The caller must have `resourcemanager.projects.move` permission on the
   * project, on the project's current and proposed new parent.
   *
   * If project has no current parent, or it currently does not have an
   * associated organization resource, you will also need the
   * `resourcemanager.projects.setIamPolicy` permission in the project.
   */
  moveProject(request: DeepPartial<MoveProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Marks the project identified by the specified
   * `name` (for example, `projects/415104041262`) for deletion.
   *
   * This method will only affect the project if it has a lifecycle state of
   * [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
   *
   * This method changes the Project's lifecycle state from
   * [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
   * to
   * [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
   * The deletion starts at an unspecified time,
   * at which point the Project is no longer accessible.
   *
   * Until the deletion completes, you can check the lifecycle state
   * checked by retrieving the project with [GetProject]
   * [google.cloud.resourcemanager.v3.Projects.GetProject],
   * and the project remains visible to [ListProjects]
   * [google.cloud.resourcemanager.v3.Projects.ListProjects].
   * However, you cannot update the project.
   *
   * After the deletion completes, the project is not retrievable by
   * the  [GetProject]
   * [google.cloud.resourcemanager.v3.Projects.GetProject],
   * [ListProjects]
   * [google.cloud.resourcemanager.v3.Projects.ListProjects], and
   * [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
   * methods.
   *
   * This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
   * project will not cause an error, but also won't do anything.
   *
   * The caller must have `resourcemanager.projects.delete` permissions for this
   * project.
   */
  deleteProject(request: DeepPartial<DeleteProjectRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Restores the project identified by the specified
   * `name` (for example, `projects/415104041262`).
   * You can only use this method for a project that has a lifecycle state of
   * [DELETE_REQUESTED]
   * [Projects.State.DELETE_REQUESTED].
   * After deletion starts, the project cannot be restored.
   *
   * The caller must have `resourcemanager.projects.undelete` permission for
   * this project.
   */
  undeleteProject(
    request: DeepPartial<UndeleteProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Returns the IAM access control policy for the specified project, in the
   * format `projects/{ProjectIdOrNumber}` e.g. projects/123.
   * Permission is denied if the policy or the resource do not exist.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the IAM access control policy for the specified project, in the
   * format `projects/{ProjectIdOrNumber}` e.g. projects/123.
   *
   * CAUTION: This method will replace the existing policy, and cannot be used
   * to append additional IAM settings.
   *
   * Note: Removing service accounts from policies or changing their roles can
   * render services completely inoperable. It is important to understand how
   * the service account is being used before removing or updating its roles.
   *
   * The following constraints apply when using `setIamPolicy()`:
   *
   * + Project does not support `allUsers` and `allAuthenticatedUsers` as
   * `members` in a `Binding` of a `Policy`.
   *
   * + The owner role can be granted to a `user`, `serviceAccount`, or a group
   * that is part of an organization. For example,
   * group@myownpersonaldomain.com could be added as an owner to a project in
   * the myownpersonaldomain.com organization, but not the examplepetstore.com
   * organization.
   *
   * + Service accounts can be made owners of a project directly
   * without any restrictions. However, to be added as an owner, a user must be
   * invited using the Cloud Platform console and must accept the invitation.
   *
   * + A user cannot be granted the owner role using `setIamPolicy()`. The user
   * must be granted the owner role using the Cloud Platform Console and must
   * explicitly accept the invitation.
   *
   * + Invitations to grant the owner role cannot be sent using
   * `setIamPolicy()`;
   * they must be sent only using the Cloud Platform Console.
   *
   * + If the project is not part of an organization, there must be at least
   * one owner who has accepted the Terms of Service (ToS) agreement in the
   * policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
   * from the policy will fail. This restriction also applies to legacy
   * projects that no longer have owners who have accepted the ToS. Edits to
   * IAM policies will be rejected until the lack of a ToS-accepting owner is
   * rectified. If the project is part of an organization, you can remove all
   * owners, potentially making the organization inaccessible.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified project, in the
   * format `projects/{ProjectIdOrNumber}` e.g. projects/123..
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
