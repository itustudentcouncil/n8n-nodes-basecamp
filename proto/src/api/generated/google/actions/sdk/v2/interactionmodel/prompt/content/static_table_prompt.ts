// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/prompt/content/static_table_prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { StaticImagePrompt } from "./static_image_prompt.js";
import { StaticLinkPrompt } from "./static_link_prompt.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.prompt";

/** A table card for displaying a table of text. */
export interface StaticTablePrompt {
  /** Optional. Overall title of the table. Must be set if subtitle is set. */
  title: string;
  /** Optional. Subtitle for the table. */
  subtitle: string;
  /** Optional. Image associated with the table. */
  image:
    | StaticImagePrompt
    | undefined;
  /** Optional. Headers and alignment of columns. */
  columns: TableColumn[];
  /**
   * Optional. Row data of the table. The first 3 rows are guaranteed to be shown but
   * others might be cut on certain surfaces. Please test with the simulator to
   * see which rows will be shown for a given surface. On surfaces that support
   * the `WEB_BROWSER` capability, you can point the user to
   * a web page with more data.
   */
  rows: TableRow[];
  /** Optional. Button. */
  button: StaticLinkPrompt | undefined;
}

/** Describes a column in the table. */
export interface TableColumn {
  /** Header text for the column. */
  header: string;
  /**
   * Horizontal alignment of content w.r.t column. If unspecified, content
   * will be aligned to the leading edge.
   */
  align: TableColumn_HorizontalAlignment;
}

/** The alignment of the content within the cell. */
export enum TableColumn_HorizontalAlignment {
  /** UNSPECIFIED - HorizontalAlignment unspecified. */
  UNSPECIFIED = 0,
  /** LEADING - Leading edge of the cell. This is the default. */
  LEADING = 1,
  /** CENTER - Content is aligned to the center of the column. */
  CENTER = 2,
  /** TRAILING - Content is aligned to the trailing edge of the column. */
  TRAILING = 3,
  UNRECOGNIZED = -1,
}

export function tableColumn_HorizontalAlignmentFromJSON(object: any): TableColumn_HorizontalAlignment {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return TableColumn_HorizontalAlignment.UNSPECIFIED;
    case 1:
    case "LEADING":
      return TableColumn_HorizontalAlignment.LEADING;
    case 2:
    case "CENTER":
      return TableColumn_HorizontalAlignment.CENTER;
    case 3:
    case "TRAILING":
      return TableColumn_HorizontalAlignment.TRAILING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TableColumn_HorizontalAlignment.UNRECOGNIZED;
  }
}

export function tableColumn_HorizontalAlignmentToJSON(object: TableColumn_HorizontalAlignment): string {
  switch (object) {
    case TableColumn_HorizontalAlignment.UNSPECIFIED:
      return "UNSPECIFIED";
    case TableColumn_HorizontalAlignment.LEADING:
      return "LEADING";
    case TableColumn_HorizontalAlignment.CENTER:
      return "CENTER";
    case TableColumn_HorizontalAlignment.TRAILING:
      return "TRAILING";
    case TableColumn_HorizontalAlignment.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Describes a cell in a row. */
export interface TableCell {
  /** Text content of the cell. */
  text: string;
}

/** Describes a row in the table. */
export interface TableRow {
  /**
   * Cells in this row. The first 3 cells are guaranteed to be shown but
   * others might be cut on certain surfaces. Please test with the simulator
   * to see which cells will be shown for a given surface.
   */
  cells: TableCell[];
  /** Indicates whether there should be a divider after each row. */
  divider: boolean;
}

function createBaseStaticTablePrompt(): StaticTablePrompt {
  return { title: "", subtitle: "", image: undefined, columns: [], rows: [], button: undefined };
}

export const StaticTablePrompt: MessageFns<StaticTablePrompt> = {
  encode(message: StaticTablePrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subtitle !== "") {
      writer.uint32(18).string(message.subtitle);
    }
    if (message.image !== undefined) {
      StaticImagePrompt.encode(message.image, writer.uint32(26).fork()).join();
    }
    for (const v of message.columns) {
      TableColumn.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.rows) {
      TableRow.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.button !== undefined) {
      StaticLinkPrompt.encode(message.button, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticTablePrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticTablePrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.image = StaticImagePrompt.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.columns.push(TableColumn.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rows.push(TableRow.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.button = StaticLinkPrompt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticTablePrompt {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
      image: isSet(object.image) ? StaticImagePrompt.fromJSON(object.image) : undefined,
      columns: globalThis.Array.isArray(object?.columns) ? object.columns.map((e: any) => TableColumn.fromJSON(e)) : [],
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => TableRow.fromJSON(e)) : [],
      button: isSet(object.button) ? StaticLinkPrompt.fromJSON(object.button) : undefined,
    };
  },

  toJSON(message: StaticTablePrompt): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    if (message.image !== undefined) {
      obj.image = StaticImagePrompt.toJSON(message.image);
    }
    if (message.columns?.length) {
      obj.columns = message.columns.map((e) => TableColumn.toJSON(e));
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => TableRow.toJSON(e));
    }
    if (message.button !== undefined) {
      obj.button = StaticLinkPrompt.toJSON(message.button);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticTablePrompt>): StaticTablePrompt {
    return StaticTablePrompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticTablePrompt>): StaticTablePrompt {
    const message = createBaseStaticTablePrompt();
    message.title = object.title ?? "";
    message.subtitle = object.subtitle ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? StaticImagePrompt.fromPartial(object.image)
      : undefined;
    message.columns = object.columns?.map((e) => TableColumn.fromPartial(e)) || [];
    message.rows = object.rows?.map((e) => TableRow.fromPartial(e)) || [];
    message.button = (object.button !== undefined && object.button !== null)
      ? StaticLinkPrompt.fromPartial(object.button)
      : undefined;
    return message;
  },
};

function createBaseTableColumn(): TableColumn {
  return { header: "", align: 0 };
}

export const TableColumn: MessageFns<TableColumn> = {
  encode(message: TableColumn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.align !== 0) {
      writer.uint32(16).int32(message.align);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableColumn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableColumn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.align = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableColumn {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : "",
      align: isSet(object.align) ? tableColumn_HorizontalAlignmentFromJSON(object.align) : 0,
    };
  },

  toJSON(message: TableColumn): unknown {
    const obj: any = {};
    if (message.header !== "") {
      obj.header = message.header;
    }
    if (message.align !== 0) {
      obj.align = tableColumn_HorizontalAlignmentToJSON(message.align);
    }
    return obj;
  },

  create(base?: DeepPartial<TableColumn>): TableColumn {
    return TableColumn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TableColumn>): TableColumn {
    const message = createBaseTableColumn();
    message.header = object.header ?? "";
    message.align = object.align ?? 0;
    return message;
  },
};

function createBaseTableCell(): TableCell {
  return { text: "" };
}

export const TableCell: MessageFns<TableCell> = {
  encode(message: TableCell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableCell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableCell {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: TableCell): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<TableCell>): TableCell {
    return TableCell.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TableCell>): TableCell {
    const message = createBaseTableCell();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseTableRow(): TableRow {
  return { cells: [], divider: false };
}

export const TableRow: MessageFns<TableRow> = {
  encode(message: TableRow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cells) {
      TableCell.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.divider !== false) {
      writer.uint32(16).bool(message.divider);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableRow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cells.push(TableCell.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.divider = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableRow {
    return {
      cells: globalThis.Array.isArray(object?.cells) ? object.cells.map((e: any) => TableCell.fromJSON(e)) : [],
      divider: isSet(object.divider) ? globalThis.Boolean(object.divider) : false,
    };
  },

  toJSON(message: TableRow): unknown {
    const obj: any = {};
    if (message.cells?.length) {
      obj.cells = message.cells.map((e) => TableCell.toJSON(e));
    }
    if (message.divider !== false) {
      obj.divider = message.divider;
    }
    return obj;
  },

  create(base?: DeepPartial<TableRow>): TableRow {
    return TableRow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TableRow>): TableRow {
    const message = createBaseTableRow();
    message.cells = object.cells?.map((e) => TableCell.fromPartial(e)) || [];
    message.divider = object.divider ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
