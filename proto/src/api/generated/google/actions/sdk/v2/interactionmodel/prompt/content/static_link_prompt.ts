// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/prompt/content/static_link_prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.prompt";

/** Different types of url hints. */
export enum UrlHint {
  /** HINT_UNSPECIFIED - Unspecified */
  HINT_UNSPECIFIED = 0,
  /**
   * AMP - URL that points directly to AMP content, or to a canonical URL
   * which refers to AMP content via `<link rel="amphtml">`.
   */
  AMP = 1,
  UNRECOGNIZED = -1,
}

export function urlHintFromJSON(object: any): UrlHint {
  switch (object) {
    case 0:
    case "HINT_UNSPECIFIED":
      return UrlHint.HINT_UNSPECIFIED;
    case 1:
    case "AMP":
      return UrlHint.AMP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UrlHint.UNRECOGNIZED;
  }
}

export function urlHintToJSON(object: UrlHint): string {
  switch (object) {
    case UrlHint.HINT_UNSPECIFIED:
      return "HINT_UNSPECIFIED";
    case UrlHint.AMP:
      return "AMP";
    case UrlHint.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines a link which will be displayed as a suggestion chip and can be opened
 * by the user.
 */
export interface StaticLinkPrompt {
  /** Name of the link */
  name: string;
  /** Defines behavior when the user opens the link. */
  open: OpenUrl | undefined;
}

/** Defines behavior when the user opens the link. */
export interface OpenUrl {
  /**
   * The url field which could be any of:
   * - http/https urls for opening an App-linked App or a webpage
   */
  url: string;
  /** Indicates a hint for the url type. */
  hint: UrlHint;
}

function createBaseStaticLinkPrompt(): StaticLinkPrompt {
  return { name: "", open: undefined };
}

export const StaticLinkPrompt: MessageFns<StaticLinkPrompt> = {
  encode(message: StaticLinkPrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.open !== undefined) {
      OpenUrl.encode(message.open, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticLinkPrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticLinkPrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.open = OpenUrl.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticLinkPrompt {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      open: isSet(object.open) ? OpenUrl.fromJSON(object.open) : undefined,
    };
  },

  toJSON(message: StaticLinkPrompt): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.open !== undefined) {
      obj.open = OpenUrl.toJSON(message.open);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticLinkPrompt>): StaticLinkPrompt {
    return StaticLinkPrompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticLinkPrompt>): StaticLinkPrompt {
    const message = createBaseStaticLinkPrompt();
    message.name = object.name ?? "";
    message.open = (object.open !== undefined && object.open !== null) ? OpenUrl.fromPartial(object.open) : undefined;
    return message;
  },
};

function createBaseOpenUrl(): OpenUrl {
  return { url: "", hint: 0 };
}

export const OpenUrl: MessageFns<OpenUrl> = {
  encode(message: OpenUrl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.hint !== 0) {
      writer.uint32(16).int32(message.hint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenUrl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hint = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenUrl {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      hint: isSet(object.hint) ? urlHintFromJSON(object.hint) : 0,
    };
  },

  toJSON(message: OpenUrl): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.hint !== 0) {
      obj.hint = urlHintToJSON(message.hint);
    }
    return obj;
  },

  create(base?: DeepPartial<OpenUrl>): OpenUrl {
    return OpenUrl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OpenUrl>): OpenUrl {
    const message = createBaseOpenUrl();
    message.url = object.url ?? "";
    message.hint = object.hint ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
