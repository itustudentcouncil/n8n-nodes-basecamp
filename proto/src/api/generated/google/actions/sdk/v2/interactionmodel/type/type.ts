// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/type/type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FreeTextType } from "./free_text_type.js";
import { RegularExpressionType } from "./regular_expression_type.js";
import { SynonymType } from "./synonym_type.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.type";

/**
 * Declaration of a custom type, as opposed to built-in types. Types can be
 * assigned to slots in a scene or parameters of an intent's training phrases.
 * Practically, Types can be thought of as enums.
 * Note, type name is specified in the name of the file.
 */
export interface Type {
  /** Synonyms type, which is essentially an enum. */
  synonym?:
    | SynonymType
    | undefined;
  /** Regex type, allows regular expression matching. */
  regularExpression?:
    | RegularExpressionType
    | undefined;
  /** FreeText type. */
  freeText?:
    | FreeTextType
    | undefined;
  /**
   * Set of exceptional words/phrases that shouldn't be matched by type.
   * Note: If word/phrase is matched by the type but listed as an exclusion it
   * won't be returned in parameter extraction result.
   * **This field is localizable.**
   */
  exclusions: string[];
}

function createBaseType(): Type {
  return { synonym: undefined, regularExpression: undefined, freeText: undefined, exclusions: [] };
}

export const Type: MessageFns<Type> = {
  encode(message: Type, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.synonym !== undefined) {
      SynonymType.encode(message.synonym, writer.uint32(10).fork()).join();
    }
    if (message.regularExpression !== undefined) {
      RegularExpressionType.encode(message.regularExpression, writer.uint32(18).fork()).join();
    }
    if (message.freeText !== undefined) {
      FreeTextType.encode(message.freeText, writer.uint32(26).fork()).join();
    }
    for (const v of message.exclusions) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.synonym = SynonymType.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regularExpression = RegularExpressionType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.freeText = FreeTextType.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.exclusions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type {
    return {
      synonym: isSet(object.synonym) ? SynonymType.fromJSON(object.synonym) : undefined,
      regularExpression: isSet(object.regularExpression)
        ? RegularExpressionType.fromJSON(object.regularExpression)
        : undefined,
      freeText: isSet(object.freeText) ? FreeTextType.fromJSON(object.freeText) : undefined,
      exclusions: globalThis.Array.isArray(object?.exclusions)
        ? object.exclusions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Type): unknown {
    const obj: any = {};
    if (message.synonym !== undefined) {
      obj.synonym = SynonymType.toJSON(message.synonym);
    }
    if (message.regularExpression !== undefined) {
      obj.regularExpression = RegularExpressionType.toJSON(message.regularExpression);
    }
    if (message.freeText !== undefined) {
      obj.freeText = FreeTextType.toJSON(message.freeText);
    }
    if (message.exclusions?.length) {
      obj.exclusions = message.exclusions;
    }
    return obj;
  },

  create(base?: DeepPartial<Type>): Type {
    return Type.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Type>): Type {
    const message = createBaseType();
    message.synonym = (object.synonym !== undefined && object.synonym !== null)
      ? SynonymType.fromPartial(object.synonym)
      : undefined;
    message.regularExpression = (object.regularExpression !== undefined && object.regularExpression !== null)
      ? RegularExpressionType.fromPartial(object.regularExpression)
      : undefined;
    message.freeText = (object.freeText !== undefined && object.freeText !== null)
      ? FreeTextType.fromPartial(object.freeText)
      : undefined;
    message.exclusions = object.exclusions?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
