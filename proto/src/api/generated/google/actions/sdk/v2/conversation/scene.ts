// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/conversation/scene.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../../protobuf/struct.js";
import { Prompt } from "./prompt/prompt.js";

export const protobufPackage = "google.actions.sdk.v2.conversation";

/** Represents the current status of slot filling. */
export enum SlotFillingStatus {
  /** UNSPECIFIED - Fallback value when the usage field is not populated. */
  UNSPECIFIED = 0,
  /** INITIALIZED - The slots have been initialized but slot filling has not started. */
  INITIALIZED = 1,
  /** COLLECTING - The slot values are being collected. */
  COLLECTING = 2,
  /** FINAL - All slot values are final and cannot be changed. */
  FINAL = 4,
  UNRECOGNIZED = -1,
}

export function slotFillingStatusFromJSON(object: any): SlotFillingStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SlotFillingStatus.UNSPECIFIED;
    case 1:
    case "INITIALIZED":
      return SlotFillingStatus.INITIALIZED;
    case 2:
    case "COLLECTING":
      return SlotFillingStatus.COLLECTING;
    case 4:
    case "FINAL":
      return SlotFillingStatus.FINAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SlotFillingStatus.UNRECOGNIZED;
  }
}

export function slotFillingStatusToJSON(object: SlotFillingStatus): string {
  switch (object) {
    case SlotFillingStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case SlotFillingStatus.INITIALIZED:
      return "INITIALIZED";
    case SlotFillingStatus.COLLECTING:
      return "COLLECTING";
    case SlotFillingStatus.FINAL:
      return "FINAL";
    case SlotFillingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a slot. */
export interface Slot {
  /** The mode of the slot (required or optional). Can be set by developer. */
  mode: Slot_SlotMode;
  /** The status of the slot. */
  status: Slot_SlotStatus;
  /**
   * The value of the slot. Changing this value in the response, will
   * modify the value in slot filling.
   */
  value:
    | any
    | undefined;
  /**
   * Indicates if the slot value was collected on the last turn.
   * This field is read-only.
   */
  updated: boolean;
  /**
   * Optional. This prompt is sent to the user when needed to fill a required
   * slot. This prompt overrides the existing prompt defined in the console.
   * This field is not included in the webhook request.
   */
  prompt: Prompt | undefined;
}

/** Represents the mode of a slot, that is, if it is required or not. */
export enum Slot_SlotMode {
  /** MODE_UNSPECIFIED - Fallback value when the usage field is not populated. */
  MODE_UNSPECIFIED = 0,
  /** OPTIONAL - Indicates that the slot is not required to complete slot filling. */
  OPTIONAL = 1,
  /** REQUIRED - Indicates that the slot is required to complete slot filling. */
  REQUIRED = 2,
  UNRECOGNIZED = -1,
}

export function slot_SlotModeFromJSON(object: any): Slot_SlotMode {
  switch (object) {
    case 0:
    case "MODE_UNSPECIFIED":
      return Slot_SlotMode.MODE_UNSPECIFIED;
    case 1:
    case "OPTIONAL":
      return Slot_SlotMode.OPTIONAL;
    case 2:
    case "REQUIRED":
      return Slot_SlotMode.REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Slot_SlotMode.UNRECOGNIZED;
  }
}

export function slot_SlotModeToJSON(object: Slot_SlotMode): string {
  switch (object) {
    case Slot_SlotMode.MODE_UNSPECIFIED:
      return "MODE_UNSPECIFIED";
    case Slot_SlotMode.OPTIONAL:
      return "OPTIONAL";
    case Slot_SlotMode.REQUIRED:
      return "REQUIRED";
    case Slot_SlotMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the status of a slot. */
export enum Slot_SlotStatus {
  /** SLOT_UNSPECIFIED - Fallback value when the usage field is not populated. */
  SLOT_UNSPECIFIED = 0,
  /**
   * EMPTY - Indicates that the slot does not have any values. This status cannot be
   * modified through the response.
   */
  EMPTY = 1,
  /**
   * INVALID - Indicates that the slot value is invalid. This status can be set
   * through the response.
   */
  INVALID = 2,
  /**
   * FILLED - Indicates that the slot has a value. This status cannot be modified
   * through the response.
   */
  FILLED = 3,
  UNRECOGNIZED = -1,
}

export function slot_SlotStatusFromJSON(object: any): Slot_SlotStatus {
  switch (object) {
    case 0:
    case "SLOT_UNSPECIFIED":
      return Slot_SlotStatus.SLOT_UNSPECIFIED;
    case 1:
    case "EMPTY":
      return Slot_SlotStatus.EMPTY;
    case 2:
    case "INVALID":
      return Slot_SlotStatus.INVALID;
    case 3:
    case "FILLED":
      return Slot_SlotStatus.FILLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Slot_SlotStatus.UNRECOGNIZED;
  }
}

export function slot_SlotStatusToJSON(object: Slot_SlotStatus): string {
  switch (object) {
    case Slot_SlotStatus.SLOT_UNSPECIFIED:
      return "SLOT_UNSPECIFIED";
    case Slot_SlotStatus.EMPTY:
      return "EMPTY";
    case Slot_SlotStatus.INVALID:
      return "INVALID";
    case Slot_SlotStatus.FILLED:
      return "FILLED";
    case Slot_SlotStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSlot(): Slot {
  return { mode: 0, status: 0, value: undefined, updated: false, prompt: undefined };
}

export const Slot: MessageFns<Slot> = {
  encode(message: Slot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(26).fork()).join();
    }
    if (message.updated !== false) {
      writer.uint32(32).bool(message.updated);
    }
    if (message.prompt !== undefined) {
      Prompt.encode(message.prompt, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Slot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.updated = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.prompt = Prompt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Slot {
    return {
      mode: isSet(object.mode) ? slot_SlotModeFromJSON(object.mode) : 0,
      status: isSet(object.status) ? slot_SlotStatusFromJSON(object.status) : 0,
      value: isSet(object?.value) ? object.value : undefined,
      updated: isSet(object.updated) ? globalThis.Boolean(object.updated) : false,
      prompt: isSet(object.prompt) ? Prompt.fromJSON(object.prompt) : undefined,
    };
  },

  toJSON(message: Slot): unknown {
    const obj: any = {};
    if (message.mode !== 0) {
      obj.mode = slot_SlotModeToJSON(message.mode);
    }
    if (message.status !== 0) {
      obj.status = slot_SlotStatusToJSON(message.status);
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.updated !== false) {
      obj.updated = message.updated;
    }
    if (message.prompt !== undefined) {
      obj.prompt = Prompt.toJSON(message.prompt);
    }
    return obj;
  },

  create(base?: DeepPartial<Slot>): Slot {
    return Slot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Slot>): Slot {
    const message = createBaseSlot();
    message.mode = object.mode ?? 0;
    message.status = object.status ?? 0;
    message.value = object.value ?? undefined;
    message.updated = object.updated ?? false;
    message.prompt = (object.prompt !== undefined && object.prompt !== null)
      ? Prompt.fromPartial(object.prompt)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
