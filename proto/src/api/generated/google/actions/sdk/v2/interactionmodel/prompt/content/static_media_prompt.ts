// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/prompt/content/static_media_prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../../../../protobuf/duration.js";
import { StaticImagePrompt } from "./static_image_prompt.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.prompt";

/**
 * Contains information about the media, such as name, description, url, etc.
 * Next id: 11
 */
export interface StaticMediaPrompt {
  /** Media type of this response. */
  mediaType: StaticMediaPrompt_MediaType;
  /** Start offset of the first media object. */
  startOffset:
    | Duration
    | undefined;
  /**
   * Optional media control types this media response session can support.
   * If set, request will be made to 3p when a certain media event happens.
   * If not set, 3p must still handle two default control type, FINISHED and
   * FAILED.
   */
  optionalMediaControls: StaticMediaPrompt_OptionalMediaControls[];
  /** List of media objects. */
  mediaObjects: MediaObject[];
  /** Repeat mode for the list of Media Objects. */
  repeatMode: StaticMediaPrompt_RepeatMode;
}

/** Media type of this response. */
export enum StaticMediaPrompt_MediaType {
  /** MEDIA_TYPE_UNSPECIFIED - UNSPECIFIED value */
  MEDIA_TYPE_UNSPECIFIED = 0,
  /** AUDIO - Audio file. */
  AUDIO = 1,
  /** MEDIA_STATUS_ACK - Response to acknowledge a media status report. */
  MEDIA_STATUS_ACK = 2,
  UNRECOGNIZED = -1,
}

export function staticMediaPrompt_MediaTypeFromJSON(object: any): StaticMediaPrompt_MediaType {
  switch (object) {
    case 0:
    case "MEDIA_TYPE_UNSPECIFIED":
      return StaticMediaPrompt_MediaType.MEDIA_TYPE_UNSPECIFIED;
    case 1:
    case "AUDIO":
      return StaticMediaPrompt_MediaType.AUDIO;
    case 2:
    case "MEDIA_STATUS_ACK":
      return StaticMediaPrompt_MediaType.MEDIA_STATUS_ACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StaticMediaPrompt_MediaType.UNRECOGNIZED;
  }
}

export function staticMediaPrompt_MediaTypeToJSON(object: StaticMediaPrompt_MediaType): string {
  switch (object) {
    case StaticMediaPrompt_MediaType.MEDIA_TYPE_UNSPECIFIED:
      return "MEDIA_TYPE_UNSPECIFIED";
    case StaticMediaPrompt_MediaType.AUDIO:
      return "AUDIO";
    case StaticMediaPrompt_MediaType.MEDIA_STATUS_ACK:
      return "MEDIA_STATUS_ACK";
    case StaticMediaPrompt_MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Media control types the media response can supported optionally */
export enum StaticMediaPrompt_OptionalMediaControls {
  /** OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED - Unspecified value */
  OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED = 0,
  /** PAUSED - Paused event. Triggered when user pauses the media. */
  PAUSED = 1,
  /** STOPPED - Stopped event. Triggered when user exit out 3p session during media play. */
  STOPPED = 2,
  UNRECOGNIZED = -1,
}

export function staticMediaPrompt_OptionalMediaControlsFromJSON(object: any): StaticMediaPrompt_OptionalMediaControls {
  switch (object) {
    case 0:
    case "OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED":
      return StaticMediaPrompt_OptionalMediaControls.OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED;
    case 1:
    case "PAUSED":
      return StaticMediaPrompt_OptionalMediaControls.PAUSED;
    case 2:
    case "STOPPED":
      return StaticMediaPrompt_OptionalMediaControls.STOPPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StaticMediaPrompt_OptionalMediaControls.UNRECOGNIZED;
  }
}

export function staticMediaPrompt_OptionalMediaControlsToJSON(object: StaticMediaPrompt_OptionalMediaControls): string {
  switch (object) {
    case StaticMediaPrompt_OptionalMediaControls.OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED:
      return "OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED";
    case StaticMediaPrompt_OptionalMediaControls.PAUSED:
      return "PAUSED";
    case StaticMediaPrompt_OptionalMediaControls.STOPPED:
      return "STOPPED";
    case StaticMediaPrompt_OptionalMediaControls.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The types of repeat mode for a list of media objects. */
export enum StaticMediaPrompt_RepeatMode {
  /** REPEAT_MODE_UNSPECIFIED - Equivalent to OFF. */
  REPEAT_MODE_UNSPECIFIED = 0,
  /** OFF - End media session at the end of the last media object. */
  OFF = 1,
  /**
   * ALL - Loop to the beginning of the first media object when the end of the last
   * media object is reached.
   */
  ALL = 2,
  UNRECOGNIZED = -1,
}

export function staticMediaPrompt_RepeatModeFromJSON(object: any): StaticMediaPrompt_RepeatMode {
  switch (object) {
    case 0:
    case "REPEAT_MODE_UNSPECIFIED":
      return StaticMediaPrompt_RepeatMode.REPEAT_MODE_UNSPECIFIED;
    case 1:
    case "OFF":
      return StaticMediaPrompt_RepeatMode.OFF;
    case 2:
    case "ALL":
      return StaticMediaPrompt_RepeatMode.ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StaticMediaPrompt_RepeatMode.UNRECOGNIZED;
  }
}

export function staticMediaPrompt_RepeatModeToJSON(object: StaticMediaPrompt_RepeatMode): string {
  switch (object) {
    case StaticMediaPrompt_RepeatMode.REPEAT_MODE_UNSPECIFIED:
      return "REPEAT_MODE_UNSPECIFIED";
    case StaticMediaPrompt_RepeatMode.OFF:
      return "OFF";
    case StaticMediaPrompt_RepeatMode.ALL:
      return "ALL";
    case StaticMediaPrompt_RepeatMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a single media object. */
export interface MediaObject {
  /** Name of this media object. */
  name: string;
  /** Description of this media object. */
  description: string;
  /** The url pointing to the media content. */
  url: string;
  /** Image to show with the media card. */
  image: MediaImage | undefined;
}

/** Image to be shown inside a MediaPrompt. */
export interface MediaImage {
  /** A large image, such as the cover of the album, etc. */
  large?:
    | StaticImagePrompt
    | undefined;
  /**
   * A small image icon displayed on the right from the title.
   * It's resized to 36x36 dp.
   */
  icon?: StaticImagePrompt | undefined;
}

function createBaseStaticMediaPrompt(): StaticMediaPrompt {
  return { mediaType: 0, startOffset: undefined, optionalMediaControls: [], mediaObjects: [], repeatMode: 0 };
}

export const StaticMediaPrompt: MessageFns<StaticMediaPrompt> = {
  encode(message: StaticMediaPrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaType !== 0) {
      writer.uint32(64).int32(message.mediaType);
    }
    if (message.startOffset !== undefined) {
      Duration.encode(message.startOffset, writer.uint32(42).fork()).join();
    }
    writer.uint32(50).fork();
    for (const v of message.optionalMediaControls) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.mediaObjects) {
      MediaObject.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.repeatMode !== 0) {
      writer.uint32(72).int32(message.repeatMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticMediaPrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticMediaPrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 64) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startOffset = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag === 48) {
            message.optionalMediaControls.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.optionalMediaControls.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.mediaObjects.push(MediaObject.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.repeatMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticMediaPrompt {
    return {
      mediaType: isSet(object.mediaType) ? staticMediaPrompt_MediaTypeFromJSON(object.mediaType) : 0,
      startOffset: isSet(object.startOffset) ? Duration.fromJSON(object.startOffset) : undefined,
      optionalMediaControls: globalThis.Array.isArray(object?.optionalMediaControls)
        ? object.optionalMediaControls.map((e: any) => staticMediaPrompt_OptionalMediaControlsFromJSON(e))
        : [],
      mediaObjects: globalThis.Array.isArray(object?.mediaObjects)
        ? object.mediaObjects.map((e: any) => MediaObject.fromJSON(e))
        : [],
      repeatMode: isSet(object.repeatMode) ? staticMediaPrompt_RepeatModeFromJSON(object.repeatMode) : 0,
    };
  },

  toJSON(message: StaticMediaPrompt): unknown {
    const obj: any = {};
    if (message.mediaType !== 0) {
      obj.mediaType = staticMediaPrompt_MediaTypeToJSON(message.mediaType);
    }
    if (message.startOffset !== undefined) {
      obj.startOffset = Duration.toJSON(message.startOffset);
    }
    if (message.optionalMediaControls?.length) {
      obj.optionalMediaControls = message.optionalMediaControls.map((e) =>
        staticMediaPrompt_OptionalMediaControlsToJSON(e)
      );
    }
    if (message.mediaObjects?.length) {
      obj.mediaObjects = message.mediaObjects.map((e) => MediaObject.toJSON(e));
    }
    if (message.repeatMode !== 0) {
      obj.repeatMode = staticMediaPrompt_RepeatModeToJSON(message.repeatMode);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticMediaPrompt>): StaticMediaPrompt {
    return StaticMediaPrompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticMediaPrompt>): StaticMediaPrompt {
    const message = createBaseStaticMediaPrompt();
    message.mediaType = object.mediaType ?? 0;
    message.startOffset = (object.startOffset !== undefined && object.startOffset !== null)
      ? Duration.fromPartial(object.startOffset)
      : undefined;
    message.optionalMediaControls = object.optionalMediaControls?.map((e) => e) || [];
    message.mediaObjects = object.mediaObjects?.map((e) => MediaObject.fromPartial(e)) || [];
    message.repeatMode = object.repeatMode ?? 0;
    return message;
  },
};

function createBaseMediaObject(): MediaObject {
  return { name: "", description: "", url: "", image: undefined };
}

export const MediaObject: MessageFns<MediaObject> = {
  encode(message: MediaObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.image !== undefined) {
      MediaImage.encode(message.image, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.image = MediaImage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaObject {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      image: isSet(object.image) ? MediaImage.fromJSON(object.image) : undefined,
    };
  },

  toJSON(message: MediaObject): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.image !== undefined) {
      obj.image = MediaImage.toJSON(message.image);
    }
    return obj;
  },

  create(base?: DeepPartial<MediaObject>): MediaObject {
    return MediaObject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MediaObject>): MediaObject {
    const message = createBaseMediaObject();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.url = object.url ?? "";
    message.image = (object.image !== undefined && object.image !== null)
      ? MediaImage.fromPartial(object.image)
      : undefined;
    return message;
  },
};

function createBaseMediaImage(): MediaImage {
  return { large: undefined, icon: undefined };
}

export const MediaImage: MessageFns<MediaImage> = {
  encode(message: MediaImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.large !== undefined) {
      StaticImagePrompt.encode(message.large, writer.uint32(10).fork()).join();
    }
    if (message.icon !== undefined) {
      StaticImagePrompt.encode(message.icon, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.large = StaticImagePrompt.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.icon = StaticImagePrompt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaImage {
    return {
      large: isSet(object.large) ? StaticImagePrompt.fromJSON(object.large) : undefined,
      icon: isSet(object.icon) ? StaticImagePrompt.fromJSON(object.icon) : undefined,
    };
  },

  toJSON(message: MediaImage): unknown {
    const obj: any = {};
    if (message.large !== undefined) {
      obj.large = StaticImagePrompt.toJSON(message.large);
    }
    if (message.icon !== undefined) {
      obj.icon = StaticImagePrompt.toJSON(message.icon);
    }
    return obj;
  },

  create(base?: DeepPartial<MediaImage>): MediaImage {
    return MediaImage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MediaImage>): MediaImage {
    const message = createBaseMediaImage();
    message.large = (object.large !== undefined && object.large !== null)
      ? StaticImagePrompt.fromPartial(object.large)
      : undefined;
    message.icon = (object.icon !== undefined && object.icon !== null)
      ? StaticImagePrompt.fromPartial(object.icon)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
