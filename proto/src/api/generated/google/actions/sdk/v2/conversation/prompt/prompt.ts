// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/conversation/prompt/prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Canvas } from "./content/canvas.js";
import { Content } from "./content/content.js";
import { Link } from "./content/link.js";
import { Simple } from "./simple.js";
import { Suggestion } from "./suggestion.js";

export const protobufPackage = "google.actions.sdk.v2.conversation";

/** Represent a response to a user. */
export interface Prompt {
  /**
   * Optional. Mode for how this messages should be merged with previously
   * defined messages.
   * "false" will clear all previously defined messages (first and last
   * simple, content, suggestions link and canvas) and add messages defined in
   * this prompt.
   * "true" will add messages defined in this prompt to messages defined in
   * previous responses. Setting this field to "true" will also enable appending
   * to some fields inside Simple prompts, the Suggestion prompt and the Canvas
   * prompt (part of the Content prompt). The Content and Link messages will
   * always be overwritten if defined in the prompt.
   * Default value is "false".
   *
   * @deprecated
   */
  append: boolean;
  /**
   * Optional. Mode for how this messages should be merged with previously
   * defined messages.
   * "true" clears all previously defined messages (first and last
   * simple, content, suggestions link and canvas) and adds messages defined in
   * this prompt.
   * "false" adds messages defined in this prompt to messages defined in
   * previous responses. Leaving this field to "false" also enables
   * appending to some fields inside Simple prompts, the Suggestions prompt,
   * and the Canvas prompt (part of the Content prompt). The Content and Link
   * messages are always overwritten if defined in the prompt. Default
   * value is "false".
   */
  override: boolean;
  /** Optional. The first voice and text-only response. */
  firstSimple:
    | Simple
    | undefined;
  /** Optional. A content like a card, list or media to display to the user. */
  content:
    | Content
    | undefined;
  /** Optional. The last voice and text-only response. */
  lastSimple:
    | Simple
    | undefined;
  /**
   * Optional. Suggestions to be displayed to the user which will always appear
   * at the end of the response.
   * If the "override" field in the containing prompt is "false", the titles
   * defined in this field will be added to titles defined in any previously
   * defined suggestions prompts and duplicate values will be removed.
   */
  suggestions: Suggestion[];
  /**
   * Optional. An additional suggestion chip that can link out to the associated app
   * or site.
   * The chip will be rendered with the title "Open <name>". Max 20 chars.
   */
  link:
    | Link
    | undefined;
  /** Optional. Represents a Interactive Canvas response to be sent to the user. */
  canvas: Canvas | undefined;
}

function createBasePrompt(): Prompt {
  return {
    append: false,
    override: false,
    firstSimple: undefined,
    content: undefined,
    lastSimple: undefined,
    suggestions: [],
    link: undefined,
    canvas: undefined,
  };
}

export const Prompt: MessageFns<Prompt> = {
  encode(message: Prompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.append !== false) {
      writer.uint32(8).bool(message.append);
    }
    if (message.override !== false) {
      writer.uint32(64).bool(message.override);
    }
    if (message.firstSimple !== undefined) {
      Simple.encode(message.firstSimple, writer.uint32(18).fork()).join();
    }
    if (message.content !== undefined) {
      Content.encode(message.content, writer.uint32(26).fork()).join();
    }
    if (message.lastSimple !== undefined) {
      Simple.encode(message.lastSimple, writer.uint32(34).fork()).join();
    }
    for (const v of message.suggestions) {
      Suggestion.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.link !== undefined) {
      Link.encode(message.link, writer.uint32(50).fork()).join();
    }
    if (message.canvas !== undefined) {
      Canvas.encode(message.canvas, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Prompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.append = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.override = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstSimple = Simple.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = Content.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastSimple = Simple.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.suggestions.push(Suggestion.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.link = Link.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.canvas = Canvas.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Prompt {
    return {
      append: isSet(object.append) ? globalThis.Boolean(object.append) : false,
      override: isSet(object.override) ? globalThis.Boolean(object.override) : false,
      firstSimple: isSet(object.firstSimple) ? Simple.fromJSON(object.firstSimple) : undefined,
      content: isSet(object.content) ? Content.fromJSON(object.content) : undefined,
      lastSimple: isSet(object.lastSimple) ? Simple.fromJSON(object.lastSimple) : undefined,
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => Suggestion.fromJSON(e))
        : [],
      link: isSet(object.link) ? Link.fromJSON(object.link) : undefined,
      canvas: isSet(object.canvas) ? Canvas.fromJSON(object.canvas) : undefined,
    };
  },

  toJSON(message: Prompt): unknown {
    const obj: any = {};
    if (message.append !== false) {
      obj.append = message.append;
    }
    if (message.override !== false) {
      obj.override = message.override;
    }
    if (message.firstSimple !== undefined) {
      obj.firstSimple = Simple.toJSON(message.firstSimple);
    }
    if (message.content !== undefined) {
      obj.content = Content.toJSON(message.content);
    }
    if (message.lastSimple !== undefined) {
      obj.lastSimple = Simple.toJSON(message.lastSimple);
    }
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions.map((e) => Suggestion.toJSON(e));
    }
    if (message.link !== undefined) {
      obj.link = Link.toJSON(message.link);
    }
    if (message.canvas !== undefined) {
      obj.canvas = Canvas.toJSON(message.canvas);
    }
    return obj;
  },

  create(base?: DeepPartial<Prompt>): Prompt {
    return Prompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Prompt>): Prompt {
    const message = createBasePrompt();
    message.append = object.append ?? false;
    message.override = object.override ?? false;
    message.firstSimple = (object.firstSimple !== undefined && object.firstSimple !== null)
      ? Simple.fromPartial(object.firstSimple)
      : undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? Content.fromPartial(object.content)
      : undefined;
    message.lastSimple = (object.lastSimple !== undefined && object.lastSimple !== null)
      ? Simple.fromPartial(object.lastSimple)
      : undefined;
    message.suggestions = object.suggestions?.map((e) => Suggestion.fromPartial(e)) || [];
    message.link = (object.link !== undefined && object.link !== null) ? Link.fromPartial(object.link) : undefined;
    message.canvas = (object.canvas !== undefined && object.canvas !== null)
      ? Canvas.fromPartial(object.canvas)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
