// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/** Represents the list of Actions defined in a project. */
export interface Actions {
  /**
   * Map from intents to custom Actions to configure invocation for the project.
   * The invocation intents could either be system or custom intents defined
   * in the "custom/intents/" package. All intents defined here (system
   * intents & custom intents) must have a corresponding intent file in the
   * "custom/global/" package.
   */
  custom: { [key: string]: Actions_CustomAction };
}

/**
 * Defines the engagement mechanisms associated with this action. This
 * allows end users to subscribe to push notification and daily update.
 */
export interface Actions_Engagement {
  /**
   * The title of the engagement that will be sent to end users asking for
   * their permission to receive updates. The prompt sent to end users for
   * daily updates will look like "What time would you like me to send your
   * daily {title}" and for push notifications will look like
   * "Is it ok if I send push notifications for {title}".
   * **This field is localizable.**
   */
  title: string;
  /** Push notification settings that this engagement supports. */
  pushNotification:
    | Actions_Engagement_PushNotification
    | undefined;
  /** Daily update settings that this engagement supports. */
  dailyUpdate?:
    | Actions_Engagement_DailyUpdate
    | undefined;
  /**
   * Link config for an action which determines whether sharing links is
   * enabled for the action and if so, contains the user friendly display name
   * for the link.
   * ActionLink is deprecated. Use AssistantLink instead.
   *
   * @deprecated
   */
  actionLink:
    | Actions_Engagement_ActionLink
    | undefined;
  /**
   * Link config for an action which determines whether sharing links is
   * enabled for the action and if so, contains the user friendly display name
   * for the link.
   */
  assistantLink: Actions_Engagement_AssistantLink | undefined;
}

/** Defines push notification settings that this engagement supports. */
export interface Actions_Engagement_PushNotification {
}

/** Defines daily update settings that this engagement supports. */
export interface Actions_Engagement_DailyUpdate {
}

/**
 * Indicates whether sharing links is enabled for this action and the
 * corresponding settings. Action links are used to deep link a user into a
 * specific action.
 * ActionLink is deprecated. Use AssistantLink instead.
 *
 * @deprecated
 */
export interface Actions_Engagement_ActionLink {
  /** User friendly display title for the link. */
  title: string;
}

/**
 * Indicates whether sharing links is enabled for this action and the
 * corresponding settings. Assistant links are used to deep link a user into
 * a specific action.
 */
export interface Actions_Engagement_AssistantLink {
  /** User friendly display title for the link. */
  title: string;
}

/** Details regarding a custom action. */
export interface Actions_CustomAction {
  /**
   * Engagement mechanisms associated with the action to help end users
   * subscribe to push notifications and daily updates.
   * Note that the intent name specified in daily updates/push notifications
   * slot config needs to match the intent corresponding to this action for
   * end users to subscribe to these updates.
   */
  engagement: Actions_Engagement | undefined;
}

export interface Actions_CustomEntry {
  key: string;
  value: Actions_CustomAction | undefined;
}

function createBaseActions(): Actions {
  return { custom: {} };
}

export const Actions: MessageFns<Actions> = {
  encode(message: Actions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.custom).forEach(([key, value]) => {
      Actions_CustomEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Actions_CustomEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.custom[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actions {
    return {
      custom: isObject(object.custom)
        ? Object.entries(object.custom).reduce<{ [key: string]: Actions_CustomAction }>((acc, [key, value]) => {
          acc[key] = Actions_CustomAction.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Actions): unknown {
    const obj: any = {};
    if (message.custom) {
      const entries = Object.entries(message.custom);
      if (entries.length > 0) {
        obj.custom = {};
        entries.forEach(([k, v]) => {
          obj.custom[k] = Actions_CustomAction.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Actions>): Actions {
    return Actions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actions>): Actions {
    const message = createBaseActions();
    message.custom = Object.entries(object.custom ?? {}).reduce<{ [key: string]: Actions_CustomAction }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Actions_CustomAction.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseActions_Engagement(): Actions_Engagement {
  return {
    title: "",
    pushNotification: undefined,
    dailyUpdate: undefined,
    actionLink: undefined,
    assistantLink: undefined,
  };
}

export const Actions_Engagement: MessageFns<Actions_Engagement> = {
  encode(message: Actions_Engagement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.pushNotification !== undefined) {
      Actions_Engagement_PushNotification.encode(message.pushNotification, writer.uint32(18).fork()).join();
    }
    if (message.dailyUpdate !== undefined) {
      Actions_Engagement_DailyUpdate.encode(message.dailyUpdate, writer.uint32(26).fork()).join();
    }
    if (message.actionLink !== undefined) {
      Actions_Engagement_ActionLink.encode(message.actionLink, writer.uint32(34).fork()).join();
    }
    if (message.assistantLink !== undefined) {
      Actions_Engagement_AssistantLink.encode(message.assistantLink, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_Engagement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_Engagement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pushNotification = Actions_Engagement_PushNotification.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dailyUpdate = Actions_Engagement_DailyUpdate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actionLink = Actions_Engagement_ActionLink.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.assistantLink = Actions_Engagement_AssistantLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actions_Engagement {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      pushNotification: isSet(object.pushNotification)
        ? Actions_Engagement_PushNotification.fromJSON(object.pushNotification)
        : undefined,
      dailyUpdate: isSet(object.dailyUpdate) ? Actions_Engagement_DailyUpdate.fromJSON(object.dailyUpdate) : undefined,
      actionLink: isSet(object.actionLink) ? Actions_Engagement_ActionLink.fromJSON(object.actionLink) : undefined,
      assistantLink: isSet(object.assistantLink)
        ? Actions_Engagement_AssistantLink.fromJSON(object.assistantLink)
        : undefined,
    };
  },

  toJSON(message: Actions_Engagement): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.pushNotification !== undefined) {
      obj.pushNotification = Actions_Engagement_PushNotification.toJSON(message.pushNotification);
    }
    if (message.dailyUpdate !== undefined) {
      obj.dailyUpdate = Actions_Engagement_DailyUpdate.toJSON(message.dailyUpdate);
    }
    if (message.actionLink !== undefined) {
      obj.actionLink = Actions_Engagement_ActionLink.toJSON(message.actionLink);
    }
    if (message.assistantLink !== undefined) {
      obj.assistantLink = Actions_Engagement_AssistantLink.toJSON(message.assistantLink);
    }
    return obj;
  },

  create(base?: DeepPartial<Actions_Engagement>): Actions_Engagement {
    return Actions_Engagement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actions_Engagement>): Actions_Engagement {
    const message = createBaseActions_Engagement();
    message.title = object.title ?? "";
    message.pushNotification = (object.pushNotification !== undefined && object.pushNotification !== null)
      ? Actions_Engagement_PushNotification.fromPartial(object.pushNotification)
      : undefined;
    message.dailyUpdate = (object.dailyUpdate !== undefined && object.dailyUpdate !== null)
      ? Actions_Engagement_DailyUpdate.fromPartial(object.dailyUpdate)
      : undefined;
    message.actionLink = (object.actionLink !== undefined && object.actionLink !== null)
      ? Actions_Engagement_ActionLink.fromPartial(object.actionLink)
      : undefined;
    message.assistantLink = (object.assistantLink !== undefined && object.assistantLink !== null)
      ? Actions_Engagement_AssistantLink.fromPartial(object.assistantLink)
      : undefined;
    return message;
  },
};

function createBaseActions_Engagement_PushNotification(): Actions_Engagement_PushNotification {
  return {};
}

export const Actions_Engagement_PushNotification: MessageFns<Actions_Engagement_PushNotification> = {
  encode(_: Actions_Engagement_PushNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_Engagement_PushNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_Engagement_PushNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Actions_Engagement_PushNotification {
    return {};
  },

  toJSON(_: Actions_Engagement_PushNotification): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Actions_Engagement_PushNotification>): Actions_Engagement_PushNotification {
    return Actions_Engagement_PushNotification.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Actions_Engagement_PushNotification>): Actions_Engagement_PushNotification {
    const message = createBaseActions_Engagement_PushNotification();
    return message;
  },
};

function createBaseActions_Engagement_DailyUpdate(): Actions_Engagement_DailyUpdate {
  return {};
}

export const Actions_Engagement_DailyUpdate: MessageFns<Actions_Engagement_DailyUpdate> = {
  encode(_: Actions_Engagement_DailyUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_Engagement_DailyUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_Engagement_DailyUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Actions_Engagement_DailyUpdate {
    return {};
  },

  toJSON(_: Actions_Engagement_DailyUpdate): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Actions_Engagement_DailyUpdate>): Actions_Engagement_DailyUpdate {
    return Actions_Engagement_DailyUpdate.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Actions_Engagement_DailyUpdate>): Actions_Engagement_DailyUpdate {
    const message = createBaseActions_Engagement_DailyUpdate();
    return message;
  },
};

function createBaseActions_Engagement_ActionLink(): Actions_Engagement_ActionLink {
  return { title: "" };
}

export const Actions_Engagement_ActionLink: MessageFns<Actions_Engagement_ActionLink> = {
  encode(message: Actions_Engagement_ActionLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_Engagement_ActionLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_Engagement_ActionLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actions_Engagement_ActionLink {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: Actions_Engagement_ActionLink): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create(base?: DeepPartial<Actions_Engagement_ActionLink>): Actions_Engagement_ActionLink {
    return Actions_Engagement_ActionLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actions_Engagement_ActionLink>): Actions_Engagement_ActionLink {
    const message = createBaseActions_Engagement_ActionLink();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseActions_Engagement_AssistantLink(): Actions_Engagement_AssistantLink {
  return { title: "" };
}

export const Actions_Engagement_AssistantLink: MessageFns<Actions_Engagement_AssistantLink> = {
  encode(message: Actions_Engagement_AssistantLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_Engagement_AssistantLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_Engagement_AssistantLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actions_Engagement_AssistantLink {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: Actions_Engagement_AssistantLink): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create(base?: DeepPartial<Actions_Engagement_AssistantLink>): Actions_Engagement_AssistantLink {
    return Actions_Engagement_AssistantLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actions_Engagement_AssistantLink>): Actions_Engagement_AssistantLink {
    const message = createBaseActions_Engagement_AssistantLink();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseActions_CustomAction(): Actions_CustomAction {
  return { engagement: undefined };
}

export const Actions_CustomAction: MessageFns<Actions_CustomAction> = {
  encode(message: Actions_CustomAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.engagement !== undefined) {
      Actions_Engagement.encode(message.engagement, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_CustomAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_CustomAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.engagement = Actions_Engagement.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actions_CustomAction {
    return { engagement: isSet(object.engagement) ? Actions_Engagement.fromJSON(object.engagement) : undefined };
  },

  toJSON(message: Actions_CustomAction): unknown {
    const obj: any = {};
    if (message.engagement !== undefined) {
      obj.engagement = Actions_Engagement.toJSON(message.engagement);
    }
    return obj;
  },

  create(base?: DeepPartial<Actions_CustomAction>): Actions_CustomAction {
    return Actions_CustomAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actions_CustomAction>): Actions_CustomAction {
    const message = createBaseActions_CustomAction();
    message.engagement = (object.engagement !== undefined && object.engagement !== null)
      ? Actions_Engagement.fromPartial(object.engagement)
      : undefined;
    return message;
  },
};

function createBaseActions_CustomEntry(): Actions_CustomEntry {
  return { key: "", value: undefined };
}

export const Actions_CustomEntry: MessageFns<Actions_CustomEntry> = {
  encode(message: Actions_CustomEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Actions_CustomAction.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actions_CustomEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActions_CustomEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Actions_CustomAction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actions_CustomEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Actions_CustomAction.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Actions_CustomEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Actions_CustomAction.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Actions_CustomEntry>): Actions_CustomEntry {
    return Actions_CustomEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actions_CustomEntry>): Actions_CustomEntry {
    const message = createBaseActions_CustomEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Actions_CustomAction.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
