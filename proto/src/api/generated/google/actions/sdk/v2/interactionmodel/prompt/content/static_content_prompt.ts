// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/prompt/content/static_content_prompt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { StaticCardPrompt } from "./static_card_prompt.js";
import { StaticCollectionBrowsePrompt } from "./static_collection_browse_prompt.js";
import { StaticCollectionPrompt } from "./static_collection_prompt.js";
import { StaticImagePrompt } from "./static_image_prompt.js";
import { StaticListPrompt } from "./static_list_prompt.js";
import { StaticMediaPrompt } from "./static_media_prompt.js";
import { StaticTablePrompt } from "./static_table_prompt.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel.prompt";

/** A placeholder for the Content part of a StaticPrompt. */
export interface StaticContentPrompt {
  /** A basic card. */
  card?:
    | StaticCardPrompt
    | undefined;
  /** An image. */
  image?:
    | StaticImagePrompt
    | undefined;
  /** Table card. */
  table?:
    | StaticTablePrompt
    | undefined;
  /** Response indicating a set of media to be played. */
  media?:
    | StaticMediaPrompt
    | undefined;
  /** A card for presenting a list of options to select from. */
  list?:
    | StaticListPrompt
    | undefined;
  /** A card presenting a list of options to select from. */
  collection?:
    | StaticCollectionPrompt
    | undefined;
  /** A card presenting a collection of web pages to open. */
  collectionBrowse?: StaticCollectionBrowsePrompt | undefined;
}

function createBaseStaticContentPrompt(): StaticContentPrompt {
  return {
    card: undefined,
    image: undefined,
    table: undefined,
    media: undefined,
    list: undefined,
    collection: undefined,
    collectionBrowse: undefined,
  };
}

export const StaticContentPrompt: MessageFns<StaticContentPrompt> = {
  encode(message: StaticContentPrompt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.card !== undefined) {
      StaticCardPrompt.encode(message.card, writer.uint32(10).fork()).join();
    }
    if (message.image !== undefined) {
      StaticImagePrompt.encode(message.image, writer.uint32(18).fork()).join();
    }
    if (message.table !== undefined) {
      StaticTablePrompt.encode(message.table, writer.uint32(26).fork()).join();
    }
    if (message.media !== undefined) {
      StaticMediaPrompt.encode(message.media, writer.uint32(34).fork()).join();
    }
    if (message.list !== undefined) {
      StaticListPrompt.encode(message.list, writer.uint32(42).fork()).join();
    }
    if (message.collection !== undefined) {
      StaticCollectionPrompt.encode(message.collection, writer.uint32(50).fork()).join();
    }
    if (message.collectionBrowse !== undefined) {
      StaticCollectionBrowsePrompt.encode(message.collectionBrowse, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StaticContentPrompt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStaticContentPrompt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.card = StaticCardPrompt.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.image = StaticImagePrompt.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.table = StaticTablePrompt.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.media = StaticMediaPrompt.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.list = StaticListPrompt.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.collection = StaticCollectionPrompt.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.collectionBrowse = StaticCollectionBrowsePrompt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StaticContentPrompt {
    return {
      card: isSet(object.card) ? StaticCardPrompt.fromJSON(object.card) : undefined,
      image: isSet(object.image) ? StaticImagePrompt.fromJSON(object.image) : undefined,
      table: isSet(object.table) ? StaticTablePrompt.fromJSON(object.table) : undefined,
      media: isSet(object.media) ? StaticMediaPrompt.fromJSON(object.media) : undefined,
      list: isSet(object.list) ? StaticListPrompt.fromJSON(object.list) : undefined,
      collection: isSet(object.collection) ? StaticCollectionPrompt.fromJSON(object.collection) : undefined,
      collectionBrowse: isSet(object.collectionBrowse)
        ? StaticCollectionBrowsePrompt.fromJSON(object.collectionBrowse)
        : undefined,
    };
  },

  toJSON(message: StaticContentPrompt): unknown {
    const obj: any = {};
    if (message.card !== undefined) {
      obj.card = StaticCardPrompt.toJSON(message.card);
    }
    if (message.image !== undefined) {
      obj.image = StaticImagePrompt.toJSON(message.image);
    }
    if (message.table !== undefined) {
      obj.table = StaticTablePrompt.toJSON(message.table);
    }
    if (message.media !== undefined) {
      obj.media = StaticMediaPrompt.toJSON(message.media);
    }
    if (message.list !== undefined) {
      obj.list = StaticListPrompt.toJSON(message.list);
    }
    if (message.collection !== undefined) {
      obj.collection = StaticCollectionPrompt.toJSON(message.collection);
    }
    if (message.collectionBrowse !== undefined) {
      obj.collectionBrowse = StaticCollectionBrowsePrompt.toJSON(message.collectionBrowse);
    }
    return obj;
  },

  create(base?: DeepPartial<StaticContentPrompt>): StaticContentPrompt {
    return StaticContentPrompt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StaticContentPrompt>): StaticContentPrompt {
    const message = createBaseStaticContentPrompt();
    message.card = (object.card !== undefined && object.card !== null)
      ? StaticCardPrompt.fromPartial(object.card)
      : undefined;
    message.image = (object.image !== undefined && object.image !== null)
      ? StaticImagePrompt.fromPartial(object.image)
      : undefined;
    message.table = (object.table !== undefined && object.table !== null)
      ? StaticTablePrompt.fromPartial(object.table)
      : undefined;
    message.media = (object.media !== undefined && object.media !== null)
      ? StaticMediaPrompt.fromPartial(object.media)
      : undefined;
    message.list = (object.list !== undefined && object.list !== null)
      ? StaticListPrompt.fromPartial(object.list)
      : undefined;
    message.collection = (object.collection !== undefined && object.collection !== null)
      ? StaticCollectionPrompt.fromPartial(object.collection)
      : undefined;
    message.collectionBrowse = (object.collectionBrowse !== undefined && object.collectionBrowse !== null)
      ? StaticCollectionBrowsePrompt.fromPartial(object.collectionBrowse)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
