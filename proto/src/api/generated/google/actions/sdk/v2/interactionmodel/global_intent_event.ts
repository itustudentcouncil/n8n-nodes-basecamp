// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/global_intent_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EventHandler } from "./event_handler.js";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel";

/**
 * Defines a global intent handler. Global intent events are scoped to the
 * entire Actions project and may be overridden by intent handlers in a scene.
 * Intent names must be unique within an Actions project.
 *
 * Global intents can be matched anytime during a session, allowing users to
 * access common flows like  "get help" or "go back home." They can also be
 * used to deep link users into specific flows when they invoke an Action.
 *
 * Note, the intent name is specified in the name of the file.
 */
export interface GlobalIntentEvent {
  /**
   * Optional. Destination scene which the conversation should jump to. The state of the
   * current scene is destroyed on the transition.
   */
  transitionToScene: string;
  /**
   * Optional. Event handler which is triggered when the intent is matched. Should execute
   * before transitioning to the destination scene. Useful to generate Prompts
   * in response to events.
   */
  handler: EventHandler | undefined;
}

function createBaseGlobalIntentEvent(): GlobalIntentEvent {
  return { transitionToScene: "", handler: undefined };
}

export const GlobalIntentEvent: MessageFns<GlobalIntentEvent> = {
  encode(message: GlobalIntentEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transitionToScene !== "") {
      writer.uint32(10).string(message.transitionToScene);
    }
    if (message.handler !== undefined) {
      EventHandler.encode(message.handler, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalIntentEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalIntentEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transitionToScene = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.handler = EventHandler.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalIntentEvent {
    return {
      transitionToScene: isSet(object.transitionToScene) ? globalThis.String(object.transitionToScene) : "",
      handler: isSet(object.handler) ? EventHandler.fromJSON(object.handler) : undefined,
    };
  },

  toJSON(message: GlobalIntentEvent): unknown {
    const obj: any = {};
    if (message.transitionToScene !== "") {
      obj.transitionToScene = message.transitionToScene;
    }
    if (message.handler !== undefined) {
      obj.handler = EventHandler.toJSON(message.handler);
    }
    return obj;
  },

  create(base?: DeepPartial<GlobalIntentEvent>): GlobalIntentEvent {
    return GlobalIntentEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlobalIntentEvent>): GlobalIntentEvent {
    const message = createBaseGlobalIntentEvent();
    message.transitionToScene = object.transitionToScene ?? "";
    message.handler = (object.handler !== undefined && object.handler !== null)
      ? EventHandler.fromPartial(object.handler)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
