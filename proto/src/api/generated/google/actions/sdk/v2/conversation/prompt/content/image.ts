// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/conversation/prompt/content/image.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2.conversation";

/** An image displayed in the card. */
export interface Image {
  /**
   * The source url of the image. Images can be JPG, PNG and GIF (animated and
   * non-animated). For example,`https://www.agentx.com/logo.png`. Required.
   */
  url: string;
  /**
   * A text description of the image to be used for accessibility, e.g. screen
   * readers.
   * Required.
   */
  alt: string;
  /**
   * The height of the image in pixels.
   * Optional.
   */
  height: number;
  /**
   * The width of the image in pixels.
   * Optional.
   */
  width: number;
}

/**
 * Possible image display options for affecting the presentation of the image.
 * This should be used for when the image's aspect ratio does not match the
 * image container's aspect ratio.
 */
export enum Image_ImageFill {
  /** UNSPECIFIED - Unspecified image fill. */
  UNSPECIFIED = 0,
  /** GRAY - Fill the gaps between the image and the image container with gray bars. */
  GRAY = 1,
  /** WHITE - Fill the gaps between the image and the image container with white bars. */
  WHITE = 2,
  /**
   * CROPPED - Image is scaled such that the image width and height match or exceed the
   * container dimensions. This may crop the top and bottom of the image if
   * the scaled image height is greater than the container height, or crop the
   * left and right of the image if the scaled image width is greater than the
   * container width. This is similar to "Zoom Mode" on a widescreen TV when
   * playing a 4:3 video.
   */
  CROPPED = 3,
  UNRECOGNIZED = -1,
}

export function image_ImageFillFromJSON(object: any): Image_ImageFill {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return Image_ImageFill.UNSPECIFIED;
    case 1:
    case "GRAY":
      return Image_ImageFill.GRAY;
    case 2:
    case "WHITE":
      return Image_ImageFill.WHITE;
    case 3:
    case "CROPPED":
      return Image_ImageFill.CROPPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Image_ImageFill.UNRECOGNIZED;
  }
}

export function image_ImageFillToJSON(object: Image_ImageFill): string {
  switch (object) {
    case Image_ImageFill.UNSPECIFIED:
      return "UNSPECIFIED";
    case Image_ImageFill.GRAY:
      return "GRAY";
    case Image_ImageFill.WHITE:
      return "WHITE";
    case Image_ImageFill.CROPPED:
      return "CROPPED";
    case Image_ImageFill.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseImage(): Image {
  return { url: "", alt: "", height: 0, width: 0 };
}

export const Image: MessageFns<Image> = {
  encode(message: Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.alt !== "") {
      writer.uint32(18).string(message.alt);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(32).int32(message.width);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.alt = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.width = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Image {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      alt: isSet(object.alt) ? globalThis.String(object.alt) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
    };
  },

  toJSON(message: Image): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.alt !== "") {
      obj.alt = message.alt;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    return obj;
  },

  create(base?: DeepPartial<Image>): Image {
    return Image.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Image>): Image {
    const message = createBaseImage();
    message.url = object.url ?? "";
    message.alt = object.alt ?? "";
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
