// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/interactionmodel/entity_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2.interactionmodel";

/**
 * Entity sets describe the pre-defined set of entities that the values of
 * built-in intent parameters can come from. Entity sets can be referenced from
 * entity_set in built-in intent parameters.
 */
export interface EntitySet {
  /** Required. The list of entities this entity set supports. */
  entities: EntitySet_Entity[];
}

/** An entity a built-in intent parameter value can come from. */
export interface EntitySet_Entity {
  /**
   * Required. The ID of the entity.
   * For a list of built-in-intent parameters and their supported entities,
   * see
   * https://developers.google.com/assistant/conversational/build/built-in-intents
   */
  id: string;
}

function createBaseEntitySet(): EntitySet {
  return { entities: [] };
}

export const EntitySet: MessageFns<EntitySet> = {
  encode(message: EntitySet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entities) {
      EntitySet_Entity.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntitySet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitySet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entities.push(EntitySet_Entity.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntitySet {
    return {
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => EntitySet_Entity.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EntitySet): unknown {
    const obj: any = {};
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => EntitySet_Entity.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EntitySet>): EntitySet {
    return EntitySet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntitySet>): EntitySet {
    const message = createBaseEntitySet();
    message.entities = object.entities?.map((e) => EntitySet_Entity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEntitySet_Entity(): EntitySet_Entity {
  return { id: "" };
}

export const EntitySet_Entity: MessageFns<EntitySet_Entity> = {
  encode(message: EntitySet_Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntitySet_Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitySet_Entity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntitySet_Entity {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: EntitySet_Entity): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<EntitySet_Entity>): EntitySet_Entity {
    return EntitySet_Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntitySet_Entity>): EntitySet_Entity {
    const message = createBaseEntitySet_Entity();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
