// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/release_channel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/** Definition of release channel resource. */
export interface ReleaseChannel {
  /**
   * The unique name of the release channel in the following format.
   * `projects/{project}/releaseChannels/{release_channel}`.
   */
  name: string;
  /**
   * Version currently deployed to this release channel in the following format:
   * `projects/{project}/versions/{version}`.
   */
  currentVersion: string;
  /**
   * Version to be deployed to this release channel in the following format:
   * `projects/{project}/versions/{version}`.
   */
  pendingVersion: string;
}

function createBaseReleaseChannel(): ReleaseChannel {
  return { name: "", currentVersion: "", pendingVersion: "" };
}

export const ReleaseChannel: MessageFns<ReleaseChannel> = {
  encode(message: ReleaseChannel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.currentVersion !== "") {
      writer.uint32(18).string(message.currentVersion);
    }
    if (message.pendingVersion !== "") {
      writer.uint32(26).string(message.pendingVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleaseChannel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleaseChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.currentVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pendingVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleaseChannel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      currentVersion: isSet(object.currentVersion) ? globalThis.String(object.currentVersion) : "",
      pendingVersion: isSet(object.pendingVersion) ? globalThis.String(object.pendingVersion) : "",
    };
  },

  toJSON(message: ReleaseChannel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.currentVersion !== "") {
      obj.currentVersion = message.currentVersion;
    }
    if (message.pendingVersion !== "") {
      obj.pendingVersion = message.pendingVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ReleaseChannel>): ReleaseChannel {
    return ReleaseChannel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReleaseChannel>): ReleaseChannel {
    const message = createBaseReleaseChannel();
    message.name = object.name ?? "";
    message.currentVersion = object.currentVersion ?? "";
    message.pendingVersion = object.pendingVersion ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
