// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/webhook.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/**
 * Metadata for different types of webhooks. If you're using
 * `inlineCloudFunction`, your source code must be in a directory with the same
 * name as the value for the `executeFunction` key.
 * For example, a value of `my_webhook` for the`executeFunction` key would have
 * a code structure like this:
 *  - `/webhooks/my_webhook.yaml`
 *  - `/webhooks/my_webhook/index.js`
 *  - `/webhooks/my_webhook/package.json`
 */
export interface Webhook {
  /** List of handlers for this webhook. */
  handlers: Webhook_Handler[];
  /** Custom webhook HTTPS endpoint. */
  httpsEndpoint?:
    | Webhook_HttpsEndpoint
    | undefined;
  /** Metadata for cloud function deployed from code in the webhooks folder. */
  inlineCloudFunction?: Webhook_InlineCloudFunction | undefined;
}

/**
 * Declares the name of the webhoook handler. A webhook can have
 * multiple handlers registered. These handlers can be called from multiple
 * places in your Actions project.
 */
export interface Webhook_Handler {
  /**
   * Required. Name of the handler. Must be unique across all handlers the Actions
   * project. You can check the name of this handler to invoke the correct
   * function in your fulfillment source code.
   */
  name: string;
}

/** REST endpoint to notify if you're not using the inline editor. */
export interface Webhook_HttpsEndpoint {
  /**
   * The HTTPS base URL for your fulfillment endpoint (HTTP is not supported).
   * Handler names are appended to the base URL path after a colon
   * (following the style guide in
   * https://cloud.google.com/apis/design/custom_methods).
   * For example a base URL of 'https://gactions.service.com/api' would
   * receive requests with URL 'https://gactions.service.com/api:{method}'.
   */
  baseUrl: string;
  /** Map of HTTP parameters to be included in the POST request. */
  httpHeaders: { [key: string]: string };
  /**
   * Version of the protocol used by the endpoint. This is the protocol shared
   * by all fulfillment types and not specific to Google fulfillment type.
   */
  endpointApiVersion: number;
}

export interface Webhook_HttpsEndpoint_HttpHeadersEntry {
  key: string;
  value: string;
}

/**
 * Holds the metadata of an inline Cloud Function deployed from the
 * webhooks folder.
 */
export interface Webhook_InlineCloudFunction {
  /**
   * The name of the Cloud Function entry point. The value of this field
   * should match the name of the method exported from the source code.
   */
  executeFunction: string;
}

function createBaseWebhook(): Webhook {
  return { handlers: [], httpsEndpoint: undefined, inlineCloudFunction: undefined };
}

export const Webhook: MessageFns<Webhook> = {
  encode(message: Webhook, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.handlers) {
      Webhook_Handler.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.httpsEndpoint !== undefined) {
      Webhook_HttpsEndpoint.encode(message.httpsEndpoint, writer.uint32(18).fork()).join();
    }
    if (message.inlineCloudFunction !== undefined) {
      Webhook_InlineCloudFunction.encode(message.inlineCloudFunction, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Webhook {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.handlers.push(Webhook_Handler.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.httpsEndpoint = Webhook_HttpsEndpoint.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inlineCloudFunction = Webhook_InlineCloudFunction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Webhook {
    return {
      handlers: globalThis.Array.isArray(object?.handlers)
        ? object.handlers.map((e: any) => Webhook_Handler.fromJSON(e))
        : [],
      httpsEndpoint: isSet(object.httpsEndpoint) ? Webhook_HttpsEndpoint.fromJSON(object.httpsEndpoint) : undefined,
      inlineCloudFunction: isSet(object.inlineCloudFunction)
        ? Webhook_InlineCloudFunction.fromJSON(object.inlineCloudFunction)
        : undefined,
    };
  },

  toJSON(message: Webhook): unknown {
    const obj: any = {};
    if (message.handlers?.length) {
      obj.handlers = message.handlers.map((e) => Webhook_Handler.toJSON(e));
    }
    if (message.httpsEndpoint !== undefined) {
      obj.httpsEndpoint = Webhook_HttpsEndpoint.toJSON(message.httpsEndpoint);
    }
    if (message.inlineCloudFunction !== undefined) {
      obj.inlineCloudFunction = Webhook_InlineCloudFunction.toJSON(message.inlineCloudFunction);
    }
    return obj;
  },

  create(base?: DeepPartial<Webhook>): Webhook {
    return Webhook.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Webhook>): Webhook {
    const message = createBaseWebhook();
    message.handlers = object.handlers?.map((e) => Webhook_Handler.fromPartial(e)) || [];
    message.httpsEndpoint = (object.httpsEndpoint !== undefined && object.httpsEndpoint !== null)
      ? Webhook_HttpsEndpoint.fromPartial(object.httpsEndpoint)
      : undefined;
    message.inlineCloudFunction = (object.inlineCloudFunction !== undefined && object.inlineCloudFunction !== null)
      ? Webhook_InlineCloudFunction.fromPartial(object.inlineCloudFunction)
      : undefined;
    return message;
  },
};

function createBaseWebhook_Handler(): Webhook_Handler {
  return { name: "" };
}

export const Webhook_Handler: MessageFns<Webhook_Handler> = {
  encode(message: Webhook_Handler, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Webhook_Handler {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhook_Handler();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Webhook_Handler {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Webhook_Handler): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Webhook_Handler>): Webhook_Handler {
    return Webhook_Handler.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Webhook_Handler>): Webhook_Handler {
    const message = createBaseWebhook_Handler();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseWebhook_HttpsEndpoint(): Webhook_HttpsEndpoint {
  return { baseUrl: "", httpHeaders: {}, endpointApiVersion: 0 };
}

export const Webhook_HttpsEndpoint: MessageFns<Webhook_HttpsEndpoint> = {
  encode(message: Webhook_HttpsEndpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseUrl !== "") {
      writer.uint32(10).string(message.baseUrl);
    }
    Object.entries(message.httpHeaders).forEach(([key, value]) => {
      Webhook_HttpsEndpoint_HttpHeadersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.endpointApiVersion !== 0) {
      writer.uint32(24).int32(message.endpointApiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Webhook_HttpsEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhook_HttpsEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.baseUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Webhook_HttpsEndpoint_HttpHeadersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.httpHeaders[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.endpointApiVersion = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Webhook_HttpsEndpoint {
    return {
      baseUrl: isSet(object.baseUrl) ? globalThis.String(object.baseUrl) : "",
      httpHeaders: isObject(object.httpHeaders)
        ? Object.entries(object.httpHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      endpointApiVersion: isSet(object.endpointApiVersion) ? globalThis.Number(object.endpointApiVersion) : 0,
    };
  },

  toJSON(message: Webhook_HttpsEndpoint): unknown {
    const obj: any = {};
    if (message.baseUrl !== "") {
      obj.baseUrl = message.baseUrl;
    }
    if (message.httpHeaders) {
      const entries = Object.entries(message.httpHeaders);
      if (entries.length > 0) {
        obj.httpHeaders = {};
        entries.forEach(([k, v]) => {
          obj.httpHeaders[k] = v;
        });
      }
    }
    if (message.endpointApiVersion !== 0) {
      obj.endpointApiVersion = Math.round(message.endpointApiVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<Webhook_HttpsEndpoint>): Webhook_HttpsEndpoint {
    return Webhook_HttpsEndpoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Webhook_HttpsEndpoint>): Webhook_HttpsEndpoint {
    const message = createBaseWebhook_HttpsEndpoint();
    message.baseUrl = object.baseUrl ?? "";
    message.httpHeaders = Object.entries(object.httpHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.endpointApiVersion = object.endpointApiVersion ?? 0;
    return message;
  },
};

function createBaseWebhook_HttpsEndpoint_HttpHeadersEntry(): Webhook_HttpsEndpoint_HttpHeadersEntry {
  return { key: "", value: "" };
}

export const Webhook_HttpsEndpoint_HttpHeadersEntry: MessageFns<Webhook_HttpsEndpoint_HttpHeadersEntry> = {
  encode(message: Webhook_HttpsEndpoint_HttpHeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Webhook_HttpsEndpoint_HttpHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhook_HttpsEndpoint_HttpHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Webhook_HttpsEndpoint_HttpHeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Webhook_HttpsEndpoint_HttpHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Webhook_HttpsEndpoint_HttpHeadersEntry>): Webhook_HttpsEndpoint_HttpHeadersEntry {
    return Webhook_HttpsEndpoint_HttpHeadersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Webhook_HttpsEndpoint_HttpHeadersEntry>): Webhook_HttpsEndpoint_HttpHeadersEntry {
    const message = createBaseWebhook_HttpsEndpoint_HttpHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWebhook_InlineCloudFunction(): Webhook_InlineCloudFunction {
  return { executeFunction: "" };
}

export const Webhook_InlineCloudFunction: MessageFns<Webhook_InlineCloudFunction> = {
  encode(message: Webhook_InlineCloudFunction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.executeFunction !== "") {
      writer.uint32(10).string(message.executeFunction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Webhook_InlineCloudFunction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhook_InlineCloudFunction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executeFunction = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Webhook_InlineCloudFunction {
    return { executeFunction: isSet(object.executeFunction) ? globalThis.String(object.executeFunction) : "" };
  },

  toJSON(message: Webhook_InlineCloudFunction): unknown {
    const obj: any = {};
    if (message.executeFunction !== "") {
      obj.executeFunction = message.executeFunction;
    }
    return obj;
  },

  create(base?: DeepPartial<Webhook_InlineCloudFunction>): Webhook_InlineCloudFunction {
    return Webhook_InlineCloudFunction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Webhook_InlineCloudFunction>): Webhook_InlineCloudFunction {
    const message = createBaseWebhook_InlineCloudFunction();
    message.executeFunction = object.executeFunction ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
