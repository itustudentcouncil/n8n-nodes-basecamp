// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/sdk/v2/theme_customization.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.actions.sdk.v2";

/** Styles applied to cards that are presented to users */
export interface ThemeCustomization {
  /**
   * Background color of cards. Acts as a fallback if `background_image` is
   * not provided by developers or `background_image` doesn't fit for certain
   * surfaces.
   * Example usage: #FAFAFA
   */
  backgroundColor: string;
  /**
   * Primary theme color of the Action will be used to set text color of title,
   * action item background color for Actions on Google cards.
   * Example usage: #FAFAFA
   */
  primaryColor: string;
  /**
   * The font family that will be used for title of cards.
   * Supported fonts:
   * - Sans Serif
   * - Sans Serif Medium
   * - Sans Serif Bold
   * - Sans Serif Black
   * - Sans Serif Condensed
   * - Sans Serif Condensed Medium
   * - Serif
   * - Serif Bold
   * - Monospace
   * - Cursive
   * - Sans Serif Smallcaps
   */
  fontFamily: string;
  /**
   * Border style of foreground image of cards. For example, can be applied on
   * the foreground image of a basic card or carousel card.
   */
  imageCornerStyle: ThemeCustomization_ImageCornerStyle;
  /**
   * Landscape mode (minimum 1920x1200 pixels).
   * This should be specified as a reference to the corresponding image in the
   * `resources/images/` directory. Eg: `$resources.images.foo` (without the
   * extension) for image in `resources/images/foo.jpg`
   * When working on a project pulled from Console the Google managed url pulled
   * could be used.
   */
  landscapeBackgroundImage: string;
  /**
   * Portrait mode (minimum 1200x1920 pixels).
   * This should be specified as a reference to the corresponding image in the
   * `resources/images/` directory. Eg: `$resources.images.foo` (without the
   * extension) for image in `resources/images/foo.jpg`
   * When working on a project pulled from Console the Google managed url pulled
   * could be used.
   */
  portraitBackgroundImage: string;
}

/** Describes how the borders of images should be rendered. */
export enum ThemeCustomization_ImageCornerStyle {
  /** IMAGE_CORNER_STYLE_UNSPECIFIED - Undefined / Unspecified. */
  IMAGE_CORNER_STYLE_UNSPECIFIED = 0,
  /** CURVED - Round corner for image. */
  CURVED = 1,
  /** ANGLED - Rectangular corner for image. */
  ANGLED = 2,
  UNRECOGNIZED = -1,
}

export function themeCustomization_ImageCornerStyleFromJSON(object: any): ThemeCustomization_ImageCornerStyle {
  switch (object) {
    case 0:
    case "IMAGE_CORNER_STYLE_UNSPECIFIED":
      return ThemeCustomization_ImageCornerStyle.IMAGE_CORNER_STYLE_UNSPECIFIED;
    case 1:
    case "CURVED":
      return ThemeCustomization_ImageCornerStyle.CURVED;
    case 2:
    case "ANGLED":
      return ThemeCustomization_ImageCornerStyle.ANGLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ThemeCustomization_ImageCornerStyle.UNRECOGNIZED;
  }
}

export function themeCustomization_ImageCornerStyleToJSON(object: ThemeCustomization_ImageCornerStyle): string {
  switch (object) {
    case ThemeCustomization_ImageCornerStyle.IMAGE_CORNER_STYLE_UNSPECIFIED:
      return "IMAGE_CORNER_STYLE_UNSPECIFIED";
    case ThemeCustomization_ImageCornerStyle.CURVED:
      return "CURVED";
    case ThemeCustomization_ImageCornerStyle.ANGLED:
      return "ANGLED";
    case ThemeCustomization_ImageCornerStyle.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseThemeCustomization(): ThemeCustomization {
  return {
    backgroundColor: "",
    primaryColor: "",
    fontFamily: "",
    imageCornerStyle: 0,
    landscapeBackgroundImage: "",
    portraitBackgroundImage: "",
  };
}

export const ThemeCustomization: MessageFns<ThemeCustomization> = {
  encode(message: ThemeCustomization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backgroundColor !== "") {
      writer.uint32(10).string(message.backgroundColor);
    }
    if (message.primaryColor !== "") {
      writer.uint32(18).string(message.primaryColor);
    }
    if (message.fontFamily !== "") {
      writer.uint32(26).string(message.fontFamily);
    }
    if (message.imageCornerStyle !== 0) {
      writer.uint32(32).int32(message.imageCornerStyle);
    }
    if (message.landscapeBackgroundImage !== "") {
      writer.uint32(42).string(message.landscapeBackgroundImage);
    }
    if (message.portraitBackgroundImage !== "") {
      writer.uint32(50).string(message.portraitBackgroundImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThemeCustomization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThemeCustomization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fontFamily = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.imageCornerStyle = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.landscapeBackgroundImage = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.portraitBackgroundImage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThemeCustomization {
    return {
      backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : "",
      primaryColor: isSet(object.primaryColor) ? globalThis.String(object.primaryColor) : "",
      fontFamily: isSet(object.fontFamily) ? globalThis.String(object.fontFamily) : "",
      imageCornerStyle: isSet(object.imageCornerStyle)
        ? themeCustomization_ImageCornerStyleFromJSON(object.imageCornerStyle)
        : 0,
      landscapeBackgroundImage: isSet(object.landscapeBackgroundImage)
        ? globalThis.String(object.landscapeBackgroundImage)
        : "",
      portraitBackgroundImage: isSet(object.portraitBackgroundImage)
        ? globalThis.String(object.portraitBackgroundImage)
        : "",
    };
  },

  toJSON(message: ThemeCustomization): unknown {
    const obj: any = {};
    if (message.backgroundColor !== "") {
      obj.backgroundColor = message.backgroundColor;
    }
    if (message.primaryColor !== "") {
      obj.primaryColor = message.primaryColor;
    }
    if (message.fontFamily !== "") {
      obj.fontFamily = message.fontFamily;
    }
    if (message.imageCornerStyle !== 0) {
      obj.imageCornerStyle = themeCustomization_ImageCornerStyleToJSON(message.imageCornerStyle);
    }
    if (message.landscapeBackgroundImage !== "") {
      obj.landscapeBackgroundImage = message.landscapeBackgroundImage;
    }
    if (message.portraitBackgroundImage !== "") {
      obj.portraitBackgroundImage = message.portraitBackgroundImage;
    }
    return obj;
  },

  create(base?: DeepPartial<ThemeCustomization>): ThemeCustomization {
    return ThemeCustomization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ThemeCustomization>): ThemeCustomization {
    const message = createBaseThemeCustomization();
    message.backgroundColor = object.backgroundColor ?? "";
    message.primaryColor = object.primaryColor ?? "";
    message.fontFamily = object.fontFamily ?? "";
    message.imageCornerStyle = object.imageCornerStyle ?? 0;
    message.landscapeBackgroundImage = object.landscapeBackgroundImage ?? "";
    message.portraitBackgroundImage = object.portraitBackgroundImage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
