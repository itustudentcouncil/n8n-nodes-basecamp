// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/actions/type/datetime_range.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DateTime } from "../../type/datetime.js";

export const protobufPackage = "google.actions.type";

/**
 * Represents a date and time range. This can represent:
 *
 * * A range between points in time with time zone or offset, e.g. the duration
 *   of a flight which starts in the "America/New_York" time zone and ends in
 *   the "Australia/Sydney" time zone
 * * A range between points in time without time zone/offset info, e.g. an
 *   appointment in local time
 * * A range starting at a specific date and time, e.g. the range of time which
 *   can be measured in milliseconds since the Unix epoch (period starting with
 *   1970-01-01T00:00:00Z)
 * * A range ending at a specific date and time, e.g. range of time before
 *   a deadline
 *
 * When considering whether a DateTime falls within a DateTimeRange, the start
 * of the range is inclusive and the end is exclusive.
 *
 * While [google.type.DateTime][google.type.DateTime] allows zero years, DateTimeRange does not.
 * Year must always be non-zero.
 *
 * When both start and end are set, either both or neither must have a
 * time_offset. When set, time_offset can be specified by either utc_offset or
 * time_zone and must match for start and end, that is if start has utc_offset
 * set then end must also have utc_offset set. The values of utc_offset or
 * time_zone need not be the same for start and end.
 *
 * When both start and end are set, start must be chronologically less than or
 * equal to end. When start and end are equal, the range is empty.
 *
 * The semantics of start and end are the same as those of
 * [google.type.DateTime][google.type.DateTime].
 */
export interface DateTimeRange {
  /**
   * DateTime at which the date range begins. If unset, the range has no
   * beginning bound.
   */
  start:
    | DateTime
    | undefined;
  /**
   * DateTime at which the date range ends. If unset, the range has no ending
   * bound.
   */
  end: DateTime | undefined;
}

function createBaseDateTimeRange(): DateTimeRange {
  return { start: undefined, end: undefined };
}

export const DateTimeRange: MessageFns<DateTimeRange> = {
  encode(message: DateTimeRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      DateTime.encode(message.start, writer.uint32(10).fork()).join();
    }
    if (message.end !== undefined) {
      DateTime.encode(message.end, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DateTimeRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDateTimeRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = DateTime.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = DateTime.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DateTimeRange {
    return {
      start: isSet(object.start) ? DateTime.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? DateTime.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: DateTimeRange): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = DateTime.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = DateTime.toJSON(message.end);
    }
    return obj;
  },

  create(base?: DeepPartial<DateTimeRange>): DateTimeRange {
    return DateTimeRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DateTimeRange>): DateTimeRange {
    const message = createBaseDateTimeRange();
    message.start = (object.start !== undefined && object.start !== null)
      ? DateTime.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null) ? DateTime.fromPartial(object.end) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
