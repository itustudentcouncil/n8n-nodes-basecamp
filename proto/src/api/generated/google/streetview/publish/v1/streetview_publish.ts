// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/streetview/publish/v1/streetview_publish.proto

/* eslint-disable */
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { Photo, UploadRef } from "./resources.js";
import {
  BatchDeletePhotosRequest,
  BatchDeletePhotosResponse,
  BatchGetPhotosRequest,
  BatchGetPhotosResponse,
  BatchUpdatePhotosRequest,
  BatchUpdatePhotosResponse,
  CreatePhotoRequest,
  CreatePhotoSequenceRequest,
  DeletePhotoRequest,
  DeletePhotoSequenceRequest,
  GetPhotoRequest,
  GetPhotoSequenceRequest,
  ListPhotoSequencesRequest,
  ListPhotoSequencesResponse,
  ListPhotosRequest,
  ListPhotosResponse,
  UpdatePhotoRequest,
} from "./rpcmessages.js";

export const protobufPackage = "google.streetview.publish.v1";

/** Publishes and connects user-contributed photos on Street View. */
export type StreetViewPublishServiceDefinition = typeof StreetViewPublishServiceDefinition;
export const StreetViewPublishServiceDefinition = {
  name: "StreetViewPublishService",
  fullName: "google.streetview.publish.v1.StreetViewPublishService",
  methods: {
    /**
     * Creates an upload session to start uploading photo bytes.  The method uses
     * the upload URL of the returned
     * [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
     * the [Photo][google.streetview.publish.v1.Photo].
     *
     * In addition to the photo requirements shown in
     * https://support.google.com/maps/answer/7012050?ref_topic=6275604,
     * the photo must meet the following requirements:
     *
     * * Photo Sphere XMP metadata must be included in the photo metadata. See
     * https://developers.google.com/streetview/spherical-metadata for the
     * required fields.
     * * The pixel size of the photo must meet the size requirements listed in
     * https://support.google.com/maps/answer/7012050?ref_topic=6275604, and
     * the photo must be a full 360 horizontally.
     *
     * After the upload completes, the method uses
     * [UploadRef][google.streetview.publish.v1.UploadRef] with
     * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
     * to create the [Photo][google.streetview.publish.v1.Photo] object entry.
     */
    startUpload: {
      name: "StartUpload",
      requestType: Empty,
      requestStream: false,
      responseType: UploadRef,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              58,
              115,
              116,
              97,
              114,
              116,
              85,
              112,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * After the client finishes uploading the photo with the returned
     * [UploadRef][google.streetview.publish.v1.UploadRef],
     * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
     * publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
     * Street View on Google Maps.
     *
     * Currently, the only way to set heading, pitch, and roll in CreatePhoto is
     * through the [Photo Sphere XMP
     * metadata](https://developers.google.com/streetview/spherical-metadata) in
     * the photo bytes. CreatePhoto ignores the  `pose.heading`, `pose.pitch`,
     * `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
     * the request is malformed or if the uploaded photo is not a 360 photo.
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
     * reference does not exist.
     * * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
     * if the account has reached the storage limit.
     */
    createPhoto: {
      name: "CreatePhoto",
      requestType: CreatePhotoRequest,
      requestStream: false,
      responseType: Photo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([5, 112, 104, 111, 116, 111])],
          578365826: [
            Buffer.from([18, 58, 5, 112, 104, 111, 116, 111, 34, 9, 47, 118, 49, 47, 112, 104, 111, 116, 111]),
          ],
        },
      },
    },
    /**
     * Gets the metadata of the specified
     * [Photo][google.streetview.publish.v1.Photo].
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
     * the requesting user did not create the requested
     * [Photo][google.streetview.publish.v1.Photo].
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
     * [Photo][google.streetview.publish.v1.Photo] does not exist.
     * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
     * requested [Photo][google.streetview.publish.v1.Photo] is still being
     * indexed.
     */
    getPhoto: {
      name: "GetPhoto",
      requestType: GetPhotoRequest,
      requestStream: false,
      responseType: Photo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 104, 111, 116, 111, 95, 105, 100, 44, 118, 105, 101, 119])],
          578365826: [
            Buffer.from([
              22,
              18,
              20,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              47,
              123,
              112,
              104,
              111,
              116,
              111,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the metadata of the specified
     * [Photo][google.streetview.publish.v1.Photo] batch.
     *
     * Note that if
     * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
     * fails, either critical fields are missing or there is an authentication
     * error. Even if
     * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
     * succeeds, individual photos in the batch may have failures.
     * These failures are specified in each
     * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
     * in
     * [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
     * See
     * [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
     * for specific failures that can occur per photo.
     */
    batchGetPhotos: {
      name: "BatchGetPhotos",
      requestType: BatchGetPhotosRequest,
      requestStream: false,
      responseType: BatchGetPhotosResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 118, 105, 101, 119, 44, 112, 104, 111, 116, 111, 95, 105, 100, 115])],
          578365826: [
            Buffer.from([
              21,
              18,
              19,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              71,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
     * the user.
     *
     * > Note: Recently created photos that are still
     * being indexed are not returned in the response.
     */
    listPhotos: {
      name: "ListPhotos",
      requestType: ListPhotosRequest,
      requestStream: false,
      responseType: ListPhotosResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 118, 105, 101, 119, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [Buffer.from([12, 18, 10, 47, 118, 49, 47, 112, 104, 111, 116, 111, 115])],
        },
      },
    },
    /**
     * Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
     * as pose, place association, connections, etc. Changing the pixels of a
     * photo is not supported.
     *
     * Only the fields specified in the
     * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
     * field are used. If `updateMask` is not present, the update applies to all
     * fields.
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
     * the requesting user did not create the requested photo.
     * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
     * the request is malformed.
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
     * photo does not exist.
     * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
     * requested [Photo][google.streetview.publish.v1.Photo] is still being
     * indexed.
     */
    updatePhoto: {
      name: "UpdatePhoto",
      requestType: UpdatePhotoRequest,
      requestStream: false,
      responseType: Photo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 104, 111, 116, 111, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              38,
              58,
              5,
              112,
              104,
              111,
              116,
              111,
              26,
              29,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              47,
              123,
              112,
              104,
              111,
              116,
              111,
              46,
              112,
              104,
              111,
              116,
              111,
              95,
              105,
              100,
              46,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
     * as pose, place association, connections, etc. Changing the pixels of photos
     * is not supported.
     *
     * Note that if
     * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
     * fails, either critical fields are missing or there is an authentication
     * error. Even if
     * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
     * succeeds, individual photos in the batch may have failures.
     * These failures are specified in each
     * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
     * in
     * [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
     * See
     * [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
     * for specific failures that can occur per photo.
     *
     * Only the fields specified in
     * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
     * field are used. If `updateMask` is not present, the update applies to all
     * fields.
     *
     * The number of
     * [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
     * messages in a
     * [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
     * must not exceed 20.
     *
     * > Note: To update
     * [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
     * [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
     * filled as well. Otherwise, the request will fail.
     */
    batchUpdatePhotos: {
      name: "BatchUpdatePhotos",
      requestType: BatchUpdatePhotosRequest,
      requestStream: false,
      responseType: BatchUpdatePhotosResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              112,
              104,
              111,
              116,
              111,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
     * the requesting user did not create the requested photo.
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
     * does not exist.
     */
    deletePhoto: {
      name: "DeletePhoto",
      requestType: DeletePhotoRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 112, 104, 111, 116, 111, 95, 105, 100])],
          578365826: [
            Buffer.from([
              22,
              42,
              20,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              47,
              123,
              112,
              104,
              111,
              116,
              111,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
     * metadata.
     *
     * Note that if
     * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
     * fails, either critical fields are missing or there is an authentication
     * error. Even if
     * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
     * succeeds, individual photos in the batch may have failures.
     * These failures are specified in each
     * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
     * in
     * [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
     * See
     * [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
     * for specific failures that can occur per photo.
     */
    batchDeletePhotos: {
      name: "BatchDeletePhotos",
      requestType: BatchDeletePhotosRequest,
      requestStream: false,
      responseType: BatchDeletePhotosResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([9, 112, 104, 111, 116, 111, 95, 105, 100, 115])],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an upload session to start uploading photo sequence data.
     * The upload URL of the returned
     * [UploadRef][google.streetview.publish.v1.UploadRef] is used to upload the
     * data for the `photoSequence`.
     *
     * After the upload is complete, the
     * [UploadRef][google.streetview.publish.v1.UploadRef] is used with
     * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
     * to create the [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
     * object entry.
     */
    startPhotoSequenceUpload: {
      name: "StartPhotoSequenceUpload",
      requestType: Empty,
      requestStream: false,
      responseType: UploadRef,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              58,
              115,
              116,
              97,
              114,
              116,
              85,
              112,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * After the client finishes uploading the
     * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] with the
     * returned [UploadRef][google.streetview.publish.v1.UploadRef],
     * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
     * extracts a sequence of 360 photos from a video or Extensible Device
     * Metadata (XDM, http://www.xdm.org/) to be published to Street View on
     * Google Maps.
     *
     * `CreatePhotoSequence` returns an [Operation][google.longrunning.Operation],
     * with the [PhotoSequence][google.streetview.publish.v1.PhotoSequence] Id set
     * in the `Operation.name` field.
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
     * the request is malformed.
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
     * reference does not exist.
     */
    createPhotoSequence: {
      name: "CreatePhotoSequence",
      requestType: CreatePhotoSequenceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              13,
              80,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              18,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              104,
              111,
              116,
              111,
              95,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              44,
              105,
              110,
              112,
              117,
              116,
              95,
              116,
              121,
              112,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              14,
              112,
              104,
              111,
              116,
              111,
              95,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              34,
              17,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the metadata of the specified
     * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] via the
     * [Operation][google.longrunning.Operation] interface.
     *
     * This method returns the following three types of responses:
     *
     * * `Operation.done` = false, if the processing of
     *   [PhotoSequence][google.streetview.publish.v1.PhotoSequence] is not
     *   finished yet.
     * * `Operation.done` = true and `Operation.error` is populated, if there was
     *   an error in processing.
     * * `Operation.done` = true and `Operation.response` is poulated, which
     *   contains a [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
     *   message.
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
     * the requesting user did not create the requested
     * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
     * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] does not exist.
     */
    getPhotoSequence: {
      name: "GetPhotoSequence",
      requestType: GetPhotoSequenceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              13,
              80,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              18,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              47,
              123,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all the [PhotoSequences][google.streetview.publish.v1.PhotoSequence]
     * that belong to the user, in descending CreatePhotoSequence timestamp order.
     */
    listPhotoSequences: {
      name: "ListPhotoSequences",
      requestType: ListPhotoSequencesRequest,
      requestStream: false,
      responseType: ListPhotoSequencesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              20,
              18,
              18,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a [PhotoSequence][google.streetview.publish.v1.PhotoSequence] and
     * its metadata.
     *
     * This method returns the following error codes:
     *
     * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
     * the requesting user did not create the requested photo sequence.
     * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo
     * sequence ID does not exist.
     * * [google.rpc.Code.FAILED_PRECONDITION][google.rpc.Code.FAILED_PRECONDITION] if the photo sequence ID is not
     * yet finished processing.
     */
    deletePhotoSequence: {
      name: "DeletePhotoSequence",
      requestType: DeletePhotoSequenceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 115, 101, 113, 117, 101, 110, 99, 101, 95, 105, 100])],
          578365826: [
            Buffer.from([
              33,
              42,
              31,
              47,
              118,
              49,
              47,
              112,
              104,
              111,
              116,
              111,
              83,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              47,
              123,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface StreetViewPublishServiceImplementation<CallContextExt = {}> {
  /**
   * Creates an upload session to start uploading photo bytes.  The method uses
   * the upload URL of the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
   * the [Photo][google.streetview.publish.v1.Photo].
   *
   * In addition to the photo requirements shown in
   * https://support.google.com/maps/answer/7012050?ref_topic=6275604,
   * the photo must meet the following requirements:
   *
   * * Photo Sphere XMP metadata must be included in the photo metadata. See
   * https://developers.google.com/streetview/spherical-metadata for the
   * required fields.
   * * The pixel size of the photo must meet the size requirements listed in
   * https://support.google.com/maps/answer/7012050?ref_topic=6275604, and
   * the photo must be a full 360 horizontally.
   *
   * After the upload completes, the method uses
   * [UploadRef][google.streetview.publish.v1.UploadRef] with
   * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
   * to create the [Photo][google.streetview.publish.v1.Photo] object entry.
   */
  startUpload(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<UploadRef>>;
  /**
   * After the client finishes uploading the photo with the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef],
   * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
   * publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
   * Street View on Google Maps.
   *
   * Currently, the only way to set heading, pitch, and roll in CreatePhoto is
   * through the [Photo Sphere XMP
   * metadata](https://developers.google.com/streetview/spherical-metadata) in
   * the photo bytes. CreatePhoto ignores the  `pose.heading`, `pose.pitch`,
   * `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed or if the uploaded photo is not a 360 photo.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
   * reference does not exist.
   * * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
   * if the account has reached the storage limit.
   */
  createPhoto(request: CreatePhotoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Photo>>;
  /**
   * Gets the metadata of the specified
   * [Photo][google.streetview.publish.v1.Photo].
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested
   * [Photo][google.streetview.publish.v1.Photo].
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * [Photo][google.streetview.publish.v1.Photo] does not exist.
   * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
   * requested [Photo][google.streetview.publish.v1.Photo] is still being
   * indexed.
   */
  getPhoto(request: GetPhotoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Photo>>;
  /**
   * Gets the metadata of the specified
   * [Photo][google.streetview.publish.v1.Photo] batch.
   *
   * Note that if
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
   * See
   * [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
   * for specific failures that can occur per photo.
   */
  batchGetPhotos(
    request: BatchGetPhotosRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchGetPhotosResponse>>;
  /**
   * Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
   * the user.
   *
   * > Note: Recently created photos that are still
   * being indexed are not returned in the response.
   */
  listPhotos(
    request: ListPhotosRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPhotosResponse>>;
  /**
   * Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
   * as pose, place association, connections, etc. Changing the pixels of a
   * photo is not supported.
   *
   * Only the fields specified in the
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * field are used. If `updateMask` is not present, the update applies to all
   * fields.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo.
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * photo does not exist.
   * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
   * requested [Photo][google.streetview.publish.v1.Photo] is still being
   * indexed.
   */
  updatePhoto(request: UpdatePhotoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Photo>>;
  /**
   * Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
   * as pose, place association, connections, etc. Changing the pixels of photos
   * is not supported.
   *
   * Note that if
   * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
   * See
   * [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
   * for specific failures that can occur per photo.
   *
   * Only the fields specified in
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * field are used. If `updateMask` is not present, the update applies to all
   * fields.
   *
   * The number of
   * [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
   * messages in a
   * [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
   * must not exceed 20.
   *
   * > Note: To update
   * [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
   * [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
   * filled as well. Otherwise, the request will fail.
   */
  batchUpdatePhotos(
    request: BatchUpdatePhotosRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchUpdatePhotosResponse>>;
  /**
   * Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
   * does not exist.
   */
  deletePhoto(request: DeletePhotoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
   * metadata.
   *
   * Note that if
   * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
   * See
   * [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
   * for specific failures that can occur per photo.
   */
  batchDeletePhotos(
    request: BatchDeletePhotosRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchDeletePhotosResponse>>;
  /**
   * Creates an upload session to start uploading photo sequence data.
   * The upload URL of the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef] is used to upload the
   * data for the `photoSequence`.
   *
   * After the upload is complete, the
   * [UploadRef][google.streetview.publish.v1.UploadRef] is used with
   * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
   * to create the [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
   * object entry.
   */
  startPhotoSequenceUpload(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<UploadRef>>;
  /**
   * After the client finishes uploading the
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] with the
   * returned [UploadRef][google.streetview.publish.v1.UploadRef],
   * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
   * extracts a sequence of 360 photos from a video or Extensible Device
   * Metadata (XDM, http://www.xdm.org/) to be published to Street View on
   * Google Maps.
   *
   * `CreatePhotoSequence` returns an [Operation][google.longrunning.Operation],
   * with the [PhotoSequence][google.streetview.publish.v1.PhotoSequence] Id set
   * in the `Operation.name` field.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
   * reference does not exist.
   */
  createPhotoSequence(
    request: CreatePhotoSequenceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets the metadata of the specified
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] via the
   * [Operation][google.longrunning.Operation] interface.
   *
   * This method returns the following three types of responses:
   *
   * * `Operation.done` = false, if the processing of
   *   [PhotoSequence][google.streetview.publish.v1.PhotoSequence] is not
   *   finished yet.
   * * `Operation.done` = true and `Operation.error` is populated, if there was
   *   an error in processing.
   * * `Operation.done` = true and `Operation.response` is poulated, which
   *   contains a [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
   *   message.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] does not exist.
   */
  getPhotoSequence(
    request: GetPhotoSequenceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all the [PhotoSequences][google.streetview.publish.v1.PhotoSequence]
   * that belong to the user, in descending CreatePhotoSequence timestamp order.
   */
  listPhotoSequences(
    request: ListPhotoSequencesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPhotoSequencesResponse>>;
  /**
   * Deletes a [PhotoSequence][google.streetview.publish.v1.PhotoSequence] and
   * its metadata.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo sequence.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo
   * sequence ID does not exist.
   * * [google.rpc.Code.FAILED_PRECONDITION][google.rpc.Code.FAILED_PRECONDITION] if the photo sequence ID is not
   * yet finished processing.
   */
  deletePhotoSequence(
    request: DeletePhotoSequenceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface StreetViewPublishServiceClient<CallOptionsExt = {}> {
  /**
   * Creates an upload session to start uploading photo bytes.  The method uses
   * the upload URL of the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
   * the [Photo][google.streetview.publish.v1.Photo].
   *
   * In addition to the photo requirements shown in
   * https://support.google.com/maps/answer/7012050?ref_topic=6275604,
   * the photo must meet the following requirements:
   *
   * * Photo Sphere XMP metadata must be included in the photo metadata. See
   * https://developers.google.com/streetview/spherical-metadata for the
   * required fields.
   * * The pixel size of the photo must meet the size requirements listed in
   * https://support.google.com/maps/answer/7012050?ref_topic=6275604, and
   * the photo must be a full 360 horizontally.
   *
   * After the upload completes, the method uses
   * [UploadRef][google.streetview.publish.v1.UploadRef] with
   * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
   * to create the [Photo][google.streetview.publish.v1.Photo] object entry.
   */
  startUpload(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<UploadRef>;
  /**
   * After the client finishes uploading the photo with the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef],
   * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
   * publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
   * Street View on Google Maps.
   *
   * Currently, the only way to set heading, pitch, and roll in CreatePhoto is
   * through the [Photo Sphere XMP
   * metadata](https://developers.google.com/streetview/spherical-metadata) in
   * the photo bytes. CreatePhoto ignores the  `pose.heading`, `pose.pitch`,
   * `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed or if the uploaded photo is not a 360 photo.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
   * reference does not exist.
   * * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
   * if the account has reached the storage limit.
   */
  createPhoto(request: DeepPartial<CreatePhotoRequest>, options?: CallOptions & CallOptionsExt): Promise<Photo>;
  /**
   * Gets the metadata of the specified
   * [Photo][google.streetview.publish.v1.Photo].
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested
   * [Photo][google.streetview.publish.v1.Photo].
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * [Photo][google.streetview.publish.v1.Photo] does not exist.
   * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
   * requested [Photo][google.streetview.publish.v1.Photo] is still being
   * indexed.
   */
  getPhoto(request: DeepPartial<GetPhotoRequest>, options?: CallOptions & CallOptionsExt): Promise<Photo>;
  /**
   * Gets the metadata of the specified
   * [Photo][google.streetview.publish.v1.Photo] batch.
   *
   * Note that if
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
   * See
   * [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
   * for specific failures that can occur per photo.
   */
  batchGetPhotos(
    request: DeepPartial<BatchGetPhotosRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchGetPhotosResponse>;
  /**
   * Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
   * the user.
   *
   * > Note: Recently created photos that are still
   * being indexed are not returned in the response.
   */
  listPhotos(
    request: DeepPartial<ListPhotosRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPhotosResponse>;
  /**
   * Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
   * as pose, place association, connections, etc. Changing the pixels of a
   * photo is not supported.
   *
   * Only the fields specified in the
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * field are used. If `updateMask` is not present, the update applies to all
   * fields.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo.
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * photo does not exist.
   * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
   * requested [Photo][google.streetview.publish.v1.Photo] is still being
   * indexed.
   */
  updatePhoto(request: DeepPartial<UpdatePhotoRequest>, options?: CallOptions & CallOptionsExt): Promise<Photo>;
  /**
   * Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
   * as pose, place association, connections, etc. Changing the pixels of photos
   * is not supported.
   *
   * Note that if
   * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
   * See
   * [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
   * for specific failures that can occur per photo.
   *
   * Only the fields specified in
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * field are used. If `updateMask` is not present, the update applies to all
   * fields.
   *
   * The number of
   * [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
   * messages in a
   * [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
   * must not exceed 20.
   *
   * > Note: To update
   * [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
   * [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
   * filled as well. Otherwise, the request will fail.
   */
  batchUpdatePhotos(
    request: DeepPartial<BatchUpdatePhotosRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchUpdatePhotosResponse>;
  /**
   * Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
   * does not exist.
   */
  deletePhoto(request: DeepPartial<DeletePhotoRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
   * metadata.
   *
   * Note that if
   * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
   * See
   * [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
   * for specific failures that can occur per photo.
   */
  batchDeletePhotos(
    request: DeepPartial<BatchDeletePhotosRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchDeletePhotosResponse>;
  /**
   * Creates an upload session to start uploading photo sequence data.
   * The upload URL of the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef] is used to upload the
   * data for the `photoSequence`.
   *
   * After the upload is complete, the
   * [UploadRef][google.streetview.publish.v1.UploadRef] is used with
   * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
   * to create the [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
   * object entry.
   */
  startPhotoSequenceUpload(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<UploadRef>;
  /**
   * After the client finishes uploading the
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] with the
   * returned [UploadRef][google.streetview.publish.v1.UploadRef],
   * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
   * extracts a sequence of 360 photos from a video or Extensible Device
   * Metadata (XDM, http://www.xdm.org/) to be published to Street View on
   * Google Maps.
   *
   * `CreatePhotoSequence` returns an [Operation][google.longrunning.Operation],
   * with the [PhotoSequence][google.streetview.publish.v1.PhotoSequence] Id set
   * in the `Operation.name` field.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
   * reference does not exist.
   */
  createPhotoSequence(
    request: DeepPartial<CreatePhotoSequenceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets the metadata of the specified
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] via the
   * [Operation][google.longrunning.Operation] interface.
   *
   * This method returns the following three types of responses:
   *
   * * `Operation.done` = false, if the processing of
   *   [PhotoSequence][google.streetview.publish.v1.PhotoSequence] is not
   *   finished yet.
   * * `Operation.done` = true and `Operation.error` is populated, if there was
   *   an error in processing.
   * * `Operation.done` = true and `Operation.response` is poulated, which
   *   contains a [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
   *   message.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] does not exist.
   */
  getPhotoSequence(
    request: DeepPartial<GetPhotoSequenceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all the [PhotoSequences][google.streetview.publish.v1.PhotoSequence]
   * that belong to the user, in descending CreatePhotoSequence timestamp order.
   */
  listPhotoSequences(
    request: DeepPartial<ListPhotoSequencesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPhotoSequencesResponse>;
  /**
   * Deletes a [PhotoSequence][google.streetview.publish.v1.PhotoSequence] and
   * its metadata.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo sequence.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo
   * sequence ID does not exist.
   * * [google.rpc.Code.FAILED_PRECONDITION][google.rpc.Code.FAILED_PRECONDITION] if the photo sequence ID is not
   * yet finished processing.
   */
  deletePhotoSequence(
    request: DeepPartial<DeletePhotoSequenceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
