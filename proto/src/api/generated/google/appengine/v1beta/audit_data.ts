// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1beta/audit_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CreateVersionRequest, UpdateServiceRequest } from "./appengine.js";

export const protobufPackage = "google.appengine.v1beta";

/** App Engine admin service audit log. */
export interface AuditData {
  /** Detailed information about UpdateService call. */
  updateService?:
    | UpdateServiceMethod
    | undefined;
  /** Detailed information about CreateVersion call. */
  createVersion?: CreateVersionMethod | undefined;
}

/** Detailed information about UpdateService call. */
export interface UpdateServiceMethod {
  /** Update service request. */
  request: UpdateServiceRequest | undefined;
}

/** Detailed information about CreateVersion call. */
export interface CreateVersionMethod {
  /** Create version request. */
  request: CreateVersionRequest | undefined;
}

function createBaseAuditData(): AuditData {
  return { updateService: undefined, createVersion: undefined };
}

export const AuditData: MessageFns<AuditData> = {
  encode(message: AuditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateService !== undefined) {
      UpdateServiceMethod.encode(message.updateService, writer.uint32(10).fork()).join();
    }
    if (message.createVersion !== undefined) {
      CreateVersionMethod.encode(message.createVersion, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateService = UpdateServiceMethod.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createVersion = CreateVersionMethod.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditData {
    return {
      updateService: isSet(object.updateService) ? UpdateServiceMethod.fromJSON(object.updateService) : undefined,
      createVersion: isSet(object.createVersion) ? CreateVersionMethod.fromJSON(object.createVersion) : undefined,
    };
  },

  toJSON(message: AuditData): unknown {
    const obj: any = {};
    if (message.updateService !== undefined) {
      obj.updateService = UpdateServiceMethod.toJSON(message.updateService);
    }
    if (message.createVersion !== undefined) {
      obj.createVersion = CreateVersionMethod.toJSON(message.createVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<AuditData>): AuditData {
    return AuditData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuditData>): AuditData {
    const message = createBaseAuditData();
    message.updateService = (object.updateService !== undefined && object.updateService !== null)
      ? UpdateServiceMethod.fromPartial(object.updateService)
      : undefined;
    message.createVersion = (object.createVersion !== undefined && object.createVersion !== null)
      ? CreateVersionMethod.fromPartial(object.createVersion)
      : undefined;
    return message;
  },
};

function createBaseUpdateServiceMethod(): UpdateServiceMethod {
  return { request: undefined };
}

export const UpdateServiceMethod: MessageFns<UpdateServiceMethod> = {
  encode(message: UpdateServiceMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      UpdateServiceRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServiceMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServiceMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = UpdateServiceRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServiceMethod {
    return { request: isSet(object.request) ? UpdateServiceRequest.fromJSON(object.request) : undefined };
  },

  toJSON(message: UpdateServiceMethod): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = UpdateServiceRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServiceMethod>): UpdateServiceMethod {
    return UpdateServiceMethod.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServiceMethod>): UpdateServiceMethod {
    const message = createBaseUpdateServiceMethod();
    message.request = (object.request !== undefined && object.request !== null)
      ? UpdateServiceRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseCreateVersionMethod(): CreateVersionMethod {
  return { request: undefined };
}

export const CreateVersionMethod: MessageFns<CreateVersionMethod> = {
  encode(message: CreateVersionMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      CreateVersionRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVersionMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVersionMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = CreateVersionRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVersionMethod {
    return { request: isSet(object.request) ? CreateVersionRequest.fromJSON(object.request) : undefined };
  },

  toJSON(message: CreateVersionMethod): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = CreateVersionRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVersionMethod>): CreateVersionMethod {
    return CreateVersionMethod.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVersionMethod>): CreateVersionMethod {
    const message = createBaseCreateVersionMethod();
    message.request = (object.request !== undefined && object.request !== null)
      ? CreateVersionRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
