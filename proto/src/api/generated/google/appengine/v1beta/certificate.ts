// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1beta/certificate.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.appengine.v1beta";

/**
 * State of certificate management. Refers to the most recent certificate
 * acquisition or renewal attempt.
 */
export enum ManagementStatus {
  MANAGEMENT_STATUS_UNSPECIFIED = 0,
  /**
   * OK - Certificate was successfully obtained and inserted into the serving
   * system.
   */
  OK = 1,
  /** PENDING - Certificate is under active attempts to acquire or renew. */
  PENDING = 2,
  /**
   * FAILED_RETRYING_NOT_VISIBLE - Most recent renewal failed due to an invalid DNS setup and will be
   * retried. Renewal attempts will continue to fail until the certificate
   * domain's DNS configuration is fixed. The last successfully provisioned
   * certificate may still be serving.
   */
  FAILED_RETRYING_NOT_VISIBLE = 4,
  /**
   * FAILED_PERMANENT - All renewal attempts have been exhausted, likely due to an invalid DNS
   * setup.
   */
  FAILED_PERMANENT = 6,
  /**
   * FAILED_RETRYING_CAA_FORBIDDEN - Most recent renewal failed due to an explicit CAA record that does not
   * include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will
   * continue to fail until the CAA is reconfigured. The last successfully
   * provisioned certificate may still be serving.
   */
  FAILED_RETRYING_CAA_FORBIDDEN = 7,
  /**
   * FAILED_RETRYING_CAA_CHECKING - Most recent renewal failed due to a CAA retrieval failure. This means that
   * the domain's DNS provider does not properly handle CAA records, failing
   * requests for CAA records when no CAA records are defined. Renewals will
   * continue to fail until the DNS provider is changed or a CAA record is
   * added for the given domain. The last successfully provisioned certificate
   * may still be serving.
   */
  FAILED_RETRYING_CAA_CHECKING = 8,
  UNRECOGNIZED = -1,
}

export function managementStatusFromJSON(object: any): ManagementStatus {
  switch (object) {
    case 0:
    case "MANAGEMENT_STATUS_UNSPECIFIED":
      return ManagementStatus.MANAGEMENT_STATUS_UNSPECIFIED;
    case 1:
    case "OK":
      return ManagementStatus.OK;
    case 2:
    case "PENDING":
      return ManagementStatus.PENDING;
    case 4:
    case "FAILED_RETRYING_NOT_VISIBLE":
      return ManagementStatus.FAILED_RETRYING_NOT_VISIBLE;
    case 6:
    case "FAILED_PERMANENT":
      return ManagementStatus.FAILED_PERMANENT;
    case 7:
    case "FAILED_RETRYING_CAA_FORBIDDEN":
      return ManagementStatus.FAILED_RETRYING_CAA_FORBIDDEN;
    case 8:
    case "FAILED_RETRYING_CAA_CHECKING":
      return ManagementStatus.FAILED_RETRYING_CAA_CHECKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagementStatus.UNRECOGNIZED;
  }
}

export function managementStatusToJSON(object: ManagementStatus): string {
  switch (object) {
    case ManagementStatus.MANAGEMENT_STATUS_UNSPECIFIED:
      return "MANAGEMENT_STATUS_UNSPECIFIED";
    case ManagementStatus.OK:
      return "OK";
    case ManagementStatus.PENDING:
      return "PENDING";
    case ManagementStatus.FAILED_RETRYING_NOT_VISIBLE:
      return "FAILED_RETRYING_NOT_VISIBLE";
    case ManagementStatus.FAILED_PERMANENT:
      return "FAILED_PERMANENT";
    case ManagementStatus.FAILED_RETRYING_CAA_FORBIDDEN:
      return "FAILED_RETRYING_CAA_FORBIDDEN";
    case ManagementStatus.FAILED_RETRYING_CAA_CHECKING:
      return "FAILED_RETRYING_CAA_CHECKING";
    case ManagementStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * An SSL certificate that a user has been authorized to administer. A user
 * is authorized to administer any certificate that applies to one of their
 * authorized domains.
 */
export interface AuthorizedCertificate {
  /**
   * Full path to the `AuthorizedCertificate` resource in the API. Example:
   * `apps/myapp/authorizedCertificates/12345`.
   *
   * @OutputOnly
   */
  name: string;
  /**
   * Relative name of the certificate. This is a unique value autogenerated
   * on `AuthorizedCertificate` resource creation. Example: `12345`.
   *
   * @OutputOnly
   */
  id: string;
  /**
   * The user-specified display name of the certificate. This is not
   * guaranteed to be unique. Example: `My Certificate`.
   */
  displayName: string;
  /**
   * Topmost applicable domains of this certificate. This certificate
   * applies to these domains and their subdomains. Example: `example.com`.
   *
   * @OutputOnly
   */
  domainNames: string[];
  /**
   * The time when this certificate expires. To update the renewal time on this
   * certificate, upload an SSL certificate with a different expiration time
   * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
   *
   * @OutputOnly
   */
  expireTime:
    | Date
    | undefined;
  /**
   * The SSL certificate serving the `AuthorizedCertificate` resource. This
   * must be obtained independently from a certificate authority.
   */
  certificateRawData:
    | CertificateRawData
    | undefined;
  /**
   * Only applicable if this certificate is managed by App Engine. Managed
   * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
   * updated or deleted via the `AuthorizedCertificates` API. If this
   * certificate is manually administered by the user, this field will be empty.
   *
   * @OutputOnly
   */
  managedCertificate:
    | ManagedCertificate
    | undefined;
  /**
   * The full paths to user visible Domain Mapping resources that have this
   * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
   *
   * This may not represent the full list of mapped domain mappings if the user
   * does not have `VIEWER` permissions on all of the applications that have
   * this certificate mapped. See `domain_mappings_count` for a complete count.
   *
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   *
   * @OutputOnly
   */
  visibleDomainMappings: string[];
  /**
   * Aggregate count of the domain mappings with this certificate mapped. This
   * count includes domain mappings on applications for which the user does not
   * have `VIEWER` permissions.
   *
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   *
   * @OutputOnly
   */
  domainMappingsCount: number;
}

/** An SSL certificate obtained from a certificate authority. */
export interface CertificateRawData {
  /**
   * PEM encoded x.509 public key certificate. This field is set once on
   * certificate creation. Must include the header and footer. Example:
   * <pre>
   * -----BEGIN CERTIFICATE-----
   * <certificate_value>
   * -----END CERTIFICATE-----
   * </pre>
   */
  publicCertificate: string;
  /**
   * Unencrypted PEM encoded RSA private key. This field is set once on
   * certificate creation and then encrypted. The key size must be 2048
   * bits or fewer. Must include the header and footer. Example:
   * <pre>
   * -----BEGIN RSA PRIVATE KEY-----
   * <unencrypted_key_value>
   * -----END RSA PRIVATE KEY-----
   * </pre>
   * @InputOnly
   */
  privateKey: string;
}

/** A certificate managed by App Engine. */
export interface ManagedCertificate {
  /**
   * Time at which the certificate was last renewed. The renewal process is
   * fully managed. Certificate renewal will automatically occur before the
   * certificate expires. Renewal errors can be tracked via `ManagementStatus`.
   *
   * @OutputOnly
   */
  lastRenewalTime:
    | Date
    | undefined;
  /**
   * Status of certificate management. Refers to the most recent certificate
   * acquisition or renewal attempt.
   *
   * @OutputOnly
   */
  status: ManagementStatus;
}

function createBaseAuthorizedCertificate(): AuthorizedCertificate {
  return {
    name: "",
    id: "",
    displayName: "",
    domainNames: [],
    expireTime: undefined,
    certificateRawData: undefined,
    managedCertificate: undefined,
    visibleDomainMappings: [],
    domainMappingsCount: 0,
  };
}

export const AuthorizedCertificate: MessageFns<AuthorizedCertificate> = {
  encode(message: AuthorizedCertificate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    for (const v of message.domainNames) {
      writer.uint32(34).string(v!);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(42).fork()).join();
    }
    if (message.certificateRawData !== undefined) {
      CertificateRawData.encode(message.certificateRawData, writer.uint32(50).fork()).join();
    }
    if (message.managedCertificate !== undefined) {
      ManagedCertificate.encode(message.managedCertificate, writer.uint32(58).fork()).join();
    }
    for (const v of message.visibleDomainMappings) {
      writer.uint32(66).string(v!);
    }
    if (message.domainMappingsCount !== 0) {
      writer.uint32(72).int32(message.domainMappingsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizedCertificate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizedCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.domainNames.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.certificateRawData = CertificateRawData.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.managedCertificate = ManagedCertificate.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.visibleDomainMappings.push(reader.string());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.domainMappingsCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizedCertificate {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      domainNames: globalThis.Array.isArray(object?.domainNames)
        ? object.domainNames.map((e: any) => globalThis.String(e))
        : [],
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      certificateRawData: isSet(object.certificateRawData)
        ? CertificateRawData.fromJSON(object.certificateRawData)
        : undefined,
      managedCertificate: isSet(object.managedCertificate)
        ? ManagedCertificate.fromJSON(object.managedCertificate)
        : undefined,
      visibleDomainMappings: globalThis.Array.isArray(object?.visibleDomainMappings)
        ? object.visibleDomainMappings.map((e: any) => globalThis.String(e))
        : [],
      domainMappingsCount: isSet(object.domainMappingsCount) ? globalThis.Number(object.domainMappingsCount) : 0,
    };
  },

  toJSON(message: AuthorizedCertificate): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.domainNames?.length) {
      obj.domainNames = message.domainNames;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.certificateRawData !== undefined) {
      obj.certificateRawData = CertificateRawData.toJSON(message.certificateRawData);
    }
    if (message.managedCertificate !== undefined) {
      obj.managedCertificate = ManagedCertificate.toJSON(message.managedCertificate);
    }
    if (message.visibleDomainMappings?.length) {
      obj.visibleDomainMappings = message.visibleDomainMappings;
    }
    if (message.domainMappingsCount !== 0) {
      obj.domainMappingsCount = Math.round(message.domainMappingsCount);
    }
    return obj;
  },

  create(base?: DeepPartial<AuthorizedCertificate>): AuthorizedCertificate {
    return AuthorizedCertificate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthorizedCertificate>): AuthorizedCertificate {
    const message = createBaseAuthorizedCertificate();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    message.domainNames = object.domainNames?.map((e) => e) || [];
    message.expireTime = object.expireTime ?? undefined;
    message.certificateRawData = (object.certificateRawData !== undefined && object.certificateRawData !== null)
      ? CertificateRawData.fromPartial(object.certificateRawData)
      : undefined;
    message.managedCertificate = (object.managedCertificate !== undefined && object.managedCertificate !== null)
      ? ManagedCertificate.fromPartial(object.managedCertificate)
      : undefined;
    message.visibleDomainMappings = object.visibleDomainMappings?.map((e) => e) || [];
    message.domainMappingsCount = object.domainMappingsCount ?? 0;
    return message;
  },
};

function createBaseCertificateRawData(): CertificateRawData {
  return { publicCertificate: "", privateKey: "" };
}

export const CertificateRawData: MessageFns<CertificateRawData> = {
  encode(message: CertificateRawData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicCertificate !== "") {
      writer.uint32(10).string(message.publicCertificate);
    }
    if (message.privateKey !== "") {
      writer.uint32(18).string(message.privateKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateRawData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateRawData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publicCertificate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privateKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateRawData {
    return {
      publicCertificate: isSet(object.publicCertificate) ? globalThis.String(object.publicCertificate) : "",
      privateKey: isSet(object.privateKey) ? globalThis.String(object.privateKey) : "",
    };
  },

  toJSON(message: CertificateRawData): unknown {
    const obj: any = {};
    if (message.publicCertificate !== "") {
      obj.publicCertificate = message.publicCertificate;
    }
    if (message.privateKey !== "") {
      obj.privateKey = message.privateKey;
    }
    return obj;
  },

  create(base?: DeepPartial<CertificateRawData>): CertificateRawData {
    return CertificateRawData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CertificateRawData>): CertificateRawData {
    const message = createBaseCertificateRawData();
    message.publicCertificate = object.publicCertificate ?? "";
    message.privateKey = object.privateKey ?? "";
    return message;
  },
};

function createBaseManagedCertificate(): ManagedCertificate {
  return { lastRenewalTime: undefined, status: 0 };
}

export const ManagedCertificate: MessageFns<ManagedCertificate> = {
  encode(message: ManagedCertificate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastRenewalTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRenewalTime), writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagedCertificate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagedCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastRenewalTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagedCertificate {
    return {
      lastRenewalTime: isSet(object.lastRenewalTime) ? fromJsonTimestamp(object.lastRenewalTime) : undefined,
      status: isSet(object.status) ? managementStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: ManagedCertificate): unknown {
    const obj: any = {};
    if (message.lastRenewalTime !== undefined) {
      obj.lastRenewalTime = message.lastRenewalTime.toISOString();
    }
    if (message.status !== 0) {
      obj.status = managementStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<ManagedCertificate>): ManagedCertificate {
    return ManagedCertificate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManagedCertificate>): ManagedCertificate {
    const message = createBaseManagedCertificate();
    message.lastRenewalTime = object.lastRenewalTime ?? undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
