// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1/location.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.appengine.v1";

/** Metadata for the given [google.cloud.location.Location][google.cloud.location.Location]. */
export interface LocationMetadata {
  /**
   * App Engine standard environment is available in the given location.
   *
   * @OutputOnly
   */
  standardEnvironmentAvailable: boolean;
  /**
   * App Engine flexible environment is available in the given location.
   *
   * @OutputOnly
   */
  flexibleEnvironmentAvailable: boolean;
  /**
   * Output only. [Search API](https://cloud.google.com/appengine/docs/standard/python/search)
   * is available in the given location.
   */
  searchApiAvailable: boolean;
}

function createBaseLocationMetadata(): LocationMetadata {
  return { standardEnvironmentAvailable: false, flexibleEnvironmentAvailable: false, searchApiAvailable: false };
}

export const LocationMetadata: MessageFns<LocationMetadata> = {
  encode(message: LocationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.standardEnvironmentAvailable !== false) {
      writer.uint32(16).bool(message.standardEnvironmentAvailable);
    }
    if (message.flexibleEnvironmentAvailable !== false) {
      writer.uint32(32).bool(message.flexibleEnvironmentAvailable);
    }
    if (message.searchApiAvailable !== false) {
      writer.uint32(48).bool(message.searchApiAvailable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.standardEnvironmentAvailable = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.flexibleEnvironmentAvailable = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.searchApiAvailable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationMetadata {
    return {
      standardEnvironmentAvailable: isSet(object.standardEnvironmentAvailable)
        ? globalThis.Boolean(object.standardEnvironmentAvailable)
        : false,
      flexibleEnvironmentAvailable: isSet(object.flexibleEnvironmentAvailable)
        ? globalThis.Boolean(object.flexibleEnvironmentAvailable)
        : false,
      searchApiAvailable: isSet(object.searchApiAvailable) ? globalThis.Boolean(object.searchApiAvailable) : false,
    };
  },

  toJSON(message: LocationMetadata): unknown {
    const obj: any = {};
    if (message.standardEnvironmentAvailable !== false) {
      obj.standardEnvironmentAvailable = message.standardEnvironmentAvailable;
    }
    if (message.flexibleEnvironmentAvailable !== false) {
      obj.flexibleEnvironmentAvailable = message.flexibleEnvironmentAvailable;
    }
    if (message.searchApiAvailable !== false) {
      obj.searchApiAvailable = message.searchApiAvailable;
    }
    return obj;
  },

  create(base?: DeepPartial<LocationMetadata>): LocationMetadata {
    return LocationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationMetadata>): LocationMetadata {
    const message = createBaseLocationMetadata();
    message.standardEnvironmentAvailable = object.standardEnvironmentAvailable ?? false;
    message.flexibleEnvironmentAvailable = object.flexibleEnvironmentAvailable ?? false;
    message.searchApiAvailable = object.searchApiAvailable ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
