// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1/domain_mapping.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.appengine.v1";

/** A domain serving an App Engine application. */
export interface DomainMapping {
  /**
   * Full path to the `DomainMapping` resource in the API. Example:
   * `apps/myapp/domainMapping/example.com`.
   *
   * @OutputOnly
   */
  name: string;
  /**
   * Relative name of the domain serving the application. Example:
   * `example.com`.
   */
  id: string;
  /**
   * SSL configuration for this domain. If unconfigured, this domain will not
   * serve with SSL.
   */
  sslSettings:
    | SslSettings
    | undefined;
  /**
   * The resource records required to configure this domain mapping. These
   * records must be added to the domain's DNS configuration in order to
   * serve the application via this domain mapping.
   *
   * @OutputOnly
   */
  resourceRecords: ResourceRecord[];
}

/** SSL configuration for a `DomainMapping` resource. */
export interface SslSettings {
  /**
   * ID of the `AuthorizedCertificate` resource configuring SSL for the
   * application. Clearing this field will remove SSL support.
   *
   * By default, a managed certificate is automatically created for every
   * domain mapping. To omit SSL support or to configure SSL manually, specify
   * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
   * be authorized to administer the `AuthorizedCertificate` resource to
   * manually map it to a `DomainMapping` resource.
   * Example: `12345`.
   */
  certificateId: string;
  /**
   * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
   * is automatically provisioned. If `MANUAL`, `certificate_id` must be
   * manually specified in order to configure SSL for this domain.
   */
  sslManagementType: SslSettings_SslManagementType;
  /**
   * ID of the managed `AuthorizedCertificate` resource currently being
   * provisioned, if applicable. Until the new managed certificate has been
   * successfully provisioned, the previous SSL state will be preserved. Once
   * the provisioning process completes, the `certificate_id` field will reflect
   * the new managed certificate and this field will be left empty. To remove
   * SSL support while there is still a pending managed certificate, clear the
   * `certificate_id` field with an `UpdateDomainMappingRequest`.
   *
   * @OutputOnly
   */
  pendingManagedCertificateId: string;
}

/** The SSL management type for this domain. */
export enum SslSettings_SslManagementType {
  /** SSL_MANAGEMENT_TYPE_UNSPECIFIED - Defaults to `AUTOMATIC`. */
  SSL_MANAGEMENT_TYPE_UNSPECIFIED = 0,
  /**
   * AUTOMATIC - SSL support for this domain is configured automatically. The mapped SSL
   * certificate will be automatically renewed.
   */
  AUTOMATIC = 1,
  /**
   * MANUAL - SSL support for this domain is configured manually by the user. Either
   * the domain has no SSL support or a user-obtained SSL certificate has been
   * explictly mapped to this domain.
   */
  MANUAL = 2,
  UNRECOGNIZED = -1,
}

export function sslSettings_SslManagementTypeFromJSON(object: any): SslSettings_SslManagementType {
  switch (object) {
    case 0:
    case "SSL_MANAGEMENT_TYPE_UNSPECIFIED":
      return SslSettings_SslManagementType.SSL_MANAGEMENT_TYPE_UNSPECIFIED;
    case 1:
    case "AUTOMATIC":
      return SslSettings_SslManagementType.AUTOMATIC;
    case 2:
    case "MANUAL":
      return SslSettings_SslManagementType.MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SslSettings_SslManagementType.UNRECOGNIZED;
  }
}

export function sslSettings_SslManagementTypeToJSON(object: SslSettings_SslManagementType): string {
  switch (object) {
    case SslSettings_SslManagementType.SSL_MANAGEMENT_TYPE_UNSPECIFIED:
      return "SSL_MANAGEMENT_TYPE_UNSPECIFIED";
    case SslSettings_SslManagementType.AUTOMATIC:
      return "AUTOMATIC";
    case SslSettings_SslManagementType.MANUAL:
      return "MANUAL";
    case SslSettings_SslManagementType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A DNS resource record. */
export interface ResourceRecord {
  /**
   * Relative name of the object affected by this record. Only applicable for
   * `CNAME` records. Example: 'www'.
   */
  name: string;
  /**
   * Data for this record. Values vary by record type, as defined in RFC 1035
   * (section 5) and RFC 1034 (section 3.6.1).
   */
  rrdata: string;
  /** Resource record type. Example: `AAAA`. */
  type: ResourceRecord_RecordType;
}

/** A resource record type. */
export enum ResourceRecord_RecordType {
  /** RECORD_TYPE_UNSPECIFIED - An unknown resource record. */
  RECORD_TYPE_UNSPECIFIED = 0,
  /** A - An A resource record. Data is an IPv4 address. */
  A = 1,
  /** AAAA - An AAAA resource record. Data is an IPv6 address. */
  AAAA = 2,
  /** CNAME - A CNAME resource record. Data is a domain name to be aliased. */
  CNAME = 3,
  UNRECOGNIZED = -1,
}

export function resourceRecord_RecordTypeFromJSON(object: any): ResourceRecord_RecordType {
  switch (object) {
    case 0:
    case "RECORD_TYPE_UNSPECIFIED":
      return ResourceRecord_RecordType.RECORD_TYPE_UNSPECIFIED;
    case 1:
    case "A":
      return ResourceRecord_RecordType.A;
    case 2:
    case "AAAA":
      return ResourceRecord_RecordType.AAAA;
    case 3:
    case "CNAME":
      return ResourceRecord_RecordType.CNAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResourceRecord_RecordType.UNRECOGNIZED;
  }
}

export function resourceRecord_RecordTypeToJSON(object: ResourceRecord_RecordType): string {
  switch (object) {
    case ResourceRecord_RecordType.RECORD_TYPE_UNSPECIFIED:
      return "RECORD_TYPE_UNSPECIFIED";
    case ResourceRecord_RecordType.A:
      return "A";
    case ResourceRecord_RecordType.AAAA:
      return "AAAA";
    case ResourceRecord_RecordType.CNAME:
      return "CNAME";
    case ResourceRecord_RecordType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDomainMapping(): DomainMapping {
  return { name: "", id: "", sslSettings: undefined, resourceRecords: [] };
}

export const DomainMapping: MessageFns<DomainMapping> = {
  encode(message: DomainMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.sslSettings !== undefined) {
      SslSettings.encode(message.sslSettings, writer.uint32(26).fork()).join();
    }
    for (const v of message.resourceRecords) {
      ResourceRecord.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DomainMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDomainMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sslSettings = SslSettings.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resourceRecords.push(ResourceRecord.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DomainMapping {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sslSettings: isSet(object.sslSettings) ? SslSettings.fromJSON(object.sslSettings) : undefined,
      resourceRecords: globalThis.Array.isArray(object?.resourceRecords)
        ? object.resourceRecords.map((e: any) => ResourceRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DomainMapping): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sslSettings !== undefined) {
      obj.sslSettings = SslSettings.toJSON(message.sslSettings);
    }
    if (message.resourceRecords?.length) {
      obj.resourceRecords = message.resourceRecords.map((e) => ResourceRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DomainMapping>): DomainMapping {
    return DomainMapping.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DomainMapping>): DomainMapping {
    const message = createBaseDomainMapping();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.sslSettings = (object.sslSettings !== undefined && object.sslSettings !== null)
      ? SslSettings.fromPartial(object.sslSettings)
      : undefined;
    message.resourceRecords = object.resourceRecords?.map((e) => ResourceRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSslSettings(): SslSettings {
  return { certificateId: "", sslManagementType: 0, pendingManagedCertificateId: "" };
}

export const SslSettings: MessageFns<SslSettings> = {
  encode(message: SslSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificateId !== "") {
      writer.uint32(10).string(message.certificateId);
    }
    if (message.sslManagementType !== 0) {
      writer.uint32(24).int32(message.sslManagementType);
    }
    if (message.pendingManagedCertificateId !== "") {
      writer.uint32(34).string(message.pendingManagedCertificateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SslSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSslSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sslManagementType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pendingManagedCertificateId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SslSettings {
    return {
      certificateId: isSet(object.certificateId) ? globalThis.String(object.certificateId) : "",
      sslManagementType: isSet(object.sslManagementType)
        ? sslSettings_SslManagementTypeFromJSON(object.sslManagementType)
        : 0,
      pendingManagedCertificateId: isSet(object.pendingManagedCertificateId)
        ? globalThis.String(object.pendingManagedCertificateId)
        : "",
    };
  },

  toJSON(message: SslSettings): unknown {
    const obj: any = {};
    if (message.certificateId !== "") {
      obj.certificateId = message.certificateId;
    }
    if (message.sslManagementType !== 0) {
      obj.sslManagementType = sslSettings_SslManagementTypeToJSON(message.sslManagementType);
    }
    if (message.pendingManagedCertificateId !== "") {
      obj.pendingManagedCertificateId = message.pendingManagedCertificateId;
    }
    return obj;
  },

  create(base?: DeepPartial<SslSettings>): SslSettings {
    return SslSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SslSettings>): SslSettings {
    const message = createBaseSslSettings();
    message.certificateId = object.certificateId ?? "";
    message.sslManagementType = object.sslManagementType ?? 0;
    message.pendingManagedCertificateId = object.pendingManagedCertificateId ?? "";
    return message;
  },
};

function createBaseResourceRecord(): ResourceRecord {
  return { name: "", rrdata: "", type: 0 };
}

export const ResourceRecord: MessageFns<ResourceRecord> = {
  encode(message: ResourceRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.rrdata !== "") {
      writer.uint32(18).string(message.rrdata);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rrdata = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceRecord {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rrdata: isSet(object.rrdata) ? globalThis.String(object.rrdata) : "",
      type: isSet(object.type) ? resourceRecord_RecordTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: ResourceRecord): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rrdata !== "") {
      obj.rrdata = message.rrdata;
    }
    if (message.type !== 0) {
      obj.type = resourceRecord_RecordTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceRecord>): ResourceRecord {
    return ResourceRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceRecord>): ResourceRecord {
    const message = createBaseResourceRecord();
    message.name = object.name ?? "";
    message.rrdata = object.rrdata ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
