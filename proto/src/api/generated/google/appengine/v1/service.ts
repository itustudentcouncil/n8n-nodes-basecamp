// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/appengine/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { NetworkSettings } from "./network_settings.js";

export const protobufPackage = "google.appengine.v1";

/**
 * A Service resource is a logical component of an application that can share
 * state and communicate in a secure fashion with other services.
 * For example, an application that handles customer requests might
 * include separate services to handle tasks such as backend data
 * analysis or API requests from mobile devices. Each service has a
 * collection of versions that define a specific set of code used to
 * implement the functionality of that service.
 */
export interface Service {
  /**
   * Full path to the Service resource in the API.
   * Example: `apps/myapp/services/default`.
   *
   * @OutputOnly
   */
  name: string;
  /**
   * Relative name of the service within the application.
   * Example: `default`.
   *
   * @OutputOnly
   */
  id: string;
  /**
   * Mapping that defines fractional HTTP traffic diversion to
   * different versions within the service.
   */
  split:
    | TrafficSplit
    | undefined;
  /**
   * A set of labels to apply to this service. Labels are key/value pairs that
   * describe the service and all resources that belong to it (e.g.,
   * versions). The labels can be used to search and group resources, and are
   * propagated to the usage and billing reports, enabling fine-grain analysis
   * of costs. An example of using labels is to tag resources belonging to
   * different environments (e.g., "env=prod", "env=qa").
   *
   * <p>Label keys and values can be no longer than 63 characters and can only
   * contain lowercase letters, numeric characters, underscores, dashes, and
   * international characters. Label keys must start with a lowercase letter
   * or an international character. Each service can have at most 32 labels.
   */
  labels: { [key: string]: string };
  /** Ingress settings for this service. Will apply to all versions. */
  networkSettings: NetworkSettings | undefined;
}

export interface Service_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Traffic routing configuration for versions within a single service. Traffic
 * splits define how traffic directed to the service is assigned to versions.
 */
export interface TrafficSplit {
  /**
   * Mechanism used to determine which version a request is sent to.
   * The traffic selection algorithm will
   * be stable for either type until allocations are changed.
   */
  shardBy: TrafficSplit_ShardBy;
  /**
   * Mapping from version IDs within the service to fractional
   * (0.000, 1] allocations of traffic for that version. Each version can
   * be specified only once, but some versions in the service may not
   * have any traffic allocation. Services that have traffic allocated
   * cannot be deleted until either the service is deleted or
   * their traffic allocation is removed. Allocations must sum to 1.
   * Up to two decimal place precision is supported for IP-based splits and
   * up to three decimal places is supported for cookie-based splits.
   */
  allocations: { [key: string]: number };
}

/** Available sharding mechanisms. */
export enum TrafficSplit_ShardBy {
  /** UNSPECIFIED - Diversion method unspecified. */
  UNSPECIFIED = 0,
  /**
   * COOKIE - Diversion based on a specially named cookie, "GOOGAPPUID." The cookie
   * must be set by the application itself or no diversion will occur.
   */
  COOKIE = 1,
  /**
   * IP - Diversion based on applying the modulus operation to a fingerprint
   * of the IP address.
   */
  IP = 2,
  /**
   * RANDOM - Diversion based on weighted random assignment. An incoming request is
   * randomly routed to a version in the traffic split, with probability
   * proportional to the version's traffic share.
   */
  RANDOM = 3,
  UNRECOGNIZED = -1,
}

export function trafficSplit_ShardByFromJSON(object: any): TrafficSplit_ShardBy {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return TrafficSplit_ShardBy.UNSPECIFIED;
    case 1:
    case "COOKIE":
      return TrafficSplit_ShardBy.COOKIE;
    case 2:
    case "IP":
      return TrafficSplit_ShardBy.IP;
    case 3:
    case "RANDOM":
      return TrafficSplit_ShardBy.RANDOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrafficSplit_ShardBy.UNRECOGNIZED;
  }
}

export function trafficSplit_ShardByToJSON(object: TrafficSplit_ShardBy): string {
  switch (object) {
    case TrafficSplit_ShardBy.UNSPECIFIED:
      return "UNSPECIFIED";
    case TrafficSplit_ShardBy.COOKIE:
      return "COOKIE";
    case TrafficSplit_ShardBy.IP:
      return "IP";
    case TrafficSplit_ShardBy.RANDOM:
      return "RANDOM";
    case TrafficSplit_ShardBy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TrafficSplit_AllocationsEntry {
  key: string;
  value: number;
}

function createBaseService(): Service {
  return { name: "", id: "", split: undefined, labels: {}, networkSettings: undefined };
}

export const Service: MessageFns<Service> = {
  encode(message: Service, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.split !== undefined) {
      TrafficSplit.encode(message.split, writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Service_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.networkSettings !== undefined) {
      NetworkSettings.encode(message.networkSettings, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Service {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.split = TrafficSplit.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Service_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.networkSettings = NetworkSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Service {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      split: isSet(object.split) ? TrafficSplit.fromJSON(object.split) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      networkSettings: isSet(object.networkSettings) ? NetworkSettings.fromJSON(object.networkSettings) : undefined,
    };
  },

  toJSON(message: Service): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.split !== undefined) {
      obj.split = TrafficSplit.toJSON(message.split);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.networkSettings !== undefined) {
      obj.networkSettings = NetworkSettings.toJSON(message.networkSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<Service>): Service {
    return Service.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Service>): Service {
    const message = createBaseService();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.split = (object.split !== undefined && object.split !== null)
      ? TrafficSplit.fromPartial(object.split)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.networkSettings = (object.networkSettings !== undefined && object.networkSettings !== null)
      ? NetworkSettings.fromPartial(object.networkSettings)
      : undefined;
    return message;
  },
};

function createBaseService_LabelsEntry(): Service_LabelsEntry {
  return { key: "", value: "" };
}

export const Service_LabelsEntry: MessageFns<Service_LabelsEntry> = {
  encode(message: Service_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Service_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseService_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Service_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Service_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Service_LabelsEntry>): Service_LabelsEntry {
    return Service_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Service_LabelsEntry>): Service_LabelsEntry {
    const message = createBaseService_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTrafficSplit(): TrafficSplit {
  return { shardBy: 0, allocations: {} };
}

export const TrafficSplit: MessageFns<TrafficSplit> = {
  encode(message: TrafficSplit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shardBy !== 0) {
      writer.uint32(8).int32(message.shardBy);
    }
    Object.entries(message.allocations).forEach(([key, value]) => {
      TrafficSplit_AllocationsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficSplit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficSplit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.shardBy = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = TrafficSplit_AllocationsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.allocations[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficSplit {
    return {
      shardBy: isSet(object.shardBy) ? trafficSplit_ShardByFromJSON(object.shardBy) : 0,
      allocations: isObject(object.allocations)
        ? Object.entries(object.allocations).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TrafficSplit): unknown {
    const obj: any = {};
    if (message.shardBy !== 0) {
      obj.shardBy = trafficSplit_ShardByToJSON(message.shardBy);
    }
    if (message.allocations) {
      const entries = Object.entries(message.allocations);
      if (entries.length > 0) {
        obj.allocations = {};
        entries.forEach(([k, v]) => {
          obj.allocations[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TrafficSplit>): TrafficSplit {
    return TrafficSplit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrafficSplit>): TrafficSplit {
    const message = createBaseTrafficSplit();
    message.shardBy = object.shardBy ?? 0;
    message.allocations = Object.entries(object.allocations ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTrafficSplit_AllocationsEntry(): TrafficSplit_AllocationsEntry {
  return { key: "", value: 0 };
}

export const TrafficSplit_AllocationsEntry: MessageFns<TrafficSplit_AllocationsEntry> = {
  encode(message: TrafficSplit_AllocationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficSplit_AllocationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficSplit_AllocationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficSplit_AllocationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: TrafficSplit_AllocationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TrafficSplit_AllocationsEntry>): TrafficSplit_AllocationsEntry {
    return TrafficSplit_AllocationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrafficSplit_AllocationsEntry>): TrafficSplit_AllocationsEntry {
    const message = createBaseTrafficSplit_AllocationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
