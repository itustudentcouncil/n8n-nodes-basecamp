// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firebase/fcm/connection/v1alpha1/connection_api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.firebase.fcm.connection.v1alpha1";

/** Request sent to FCM from the connected client. */
export interface UpstreamRequest {
  /** Message acknowledgement. */
  ack?: Ack | undefined;
}

/** Response sent to the connected client from FCM. */
export interface DownstreamResponse {
  /**
   * Message sent to FCM via the [Send
   * API](https://firebase.google.com/docs/cloud-messaging/send-message)
   * targeting this client.
   */
  message?: Message | undefined;
}

/**
 * Acknowledgement to indicate a client successfully received an FCM message.
 *
 * If a message is not acked, FCM will continously resend the message until
 * it expires. Duplicate delivery in this case is working as intended.
 */
export interface Ack {
  /** Id of message being acknowledged */
  messageId: string;
}

/**
 * Message created through the [Send
 * API](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message).
 */
export interface Message {
  /** The identifier of the message. Used to ack the message. */
  messageId: string;
  /** Time the message was received in FCM. */
  createTime:
    | Date
    | undefined;
  /** Expiry time of the message. Currently it is always 4 weeks. */
  expireTime:
    | Date
    | undefined;
  /**
   * The arbitrary payload set in the [Send
   * API](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message).
   */
  data: { [key: string]: string };
}

export interface Message_DataEntry {
  key: string;
  value: string;
}

function createBaseUpstreamRequest(): UpstreamRequest {
  return { ack: undefined };
}

export const UpstreamRequest: MessageFns<UpstreamRequest> = {
  encode(message: UpstreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ack !== undefined) {
      Ack.encode(message.ack, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpstreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpstreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ack = Ack.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpstreamRequest {
    return { ack: isSet(object.ack) ? Ack.fromJSON(object.ack) : undefined };
  },

  toJSON(message: UpstreamRequest): unknown {
    const obj: any = {};
    if (message.ack !== undefined) {
      obj.ack = Ack.toJSON(message.ack);
    }
    return obj;
  },

  create(base?: DeepPartial<UpstreamRequest>): UpstreamRequest {
    return UpstreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpstreamRequest>): UpstreamRequest {
    const message = createBaseUpstreamRequest();
    message.ack = (object.ack !== undefined && object.ack !== null) ? Ack.fromPartial(object.ack) : undefined;
    return message;
  },
};

function createBaseDownstreamResponse(): DownstreamResponse {
  return { message: undefined };
}

export const DownstreamResponse: MessageFns<DownstreamResponse> = {
  encode(message: DownstreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownstreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownstreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownstreamResponse {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: DownstreamResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create(base?: DeepPartial<DownstreamResponse>): DownstreamResponse {
    return DownstreamResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DownstreamResponse>): DownstreamResponse {
    const message = createBaseDownstreamResponse();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseAck(): Ack {
  return { messageId: "" };
}

export const Ack: MessageFns<Ack> = {
  encode(message: Ack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ack {
    return { messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "" };
  },

  toJSON(message: Ack): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    return obj;
  },

  create(base?: DeepPartial<Ack>): Ack {
    return Ack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Ack>): Ack {
    const message = createBaseAck();
    message.messageId = object.messageId ?? "";
    return message;
  },
};

function createBaseMessage(): Message {
  return { messageId: "", createTime: undefined, expireTime: undefined, data: {} };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.data).forEach(([key, value]) => {
      Message_DataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Message_DataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.data[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.data) {
      const entries = Object.entries(message.data);
      if (entries.length > 0) {
        obj.data = {};
        entries.forEach(([k, v]) => {
          obj.data[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Message>): Message {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message>): Message {
    const message = createBaseMessage();
    message.messageId = object.messageId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseMessage_DataEntry(): Message_DataEntry {
  return { key: "", value: "" };
}

export const Message_DataEntry: MessageFns<Message_DataEntry> = {
  encode(message: Message_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_DataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Message_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Message_DataEntry>): Message_DataEntry {
    return Message_DataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message_DataEntry>): Message_DataEntry {
    const message = createBaseMessage_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** FCM's service to create client connections to send/receive messages. */
export type ConnectionApiDefinition = typeof ConnectionApiDefinition;
export const ConnectionApiDefinition = {
  name: "ConnectionApi",
  fullName: "google.firebase.fcm.connection.v1alpha1.ConnectionApi",
  methods: {
    /**
     * Creates a streaming connection with FCM to send messages and their
     * respective ACKs.
     *
     * The client credentials need to be passed in the [gRPC
     * Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
     * of the header is:
     *   Key: "authorization"
     *   Value: "Checkin [client_id:secret]"
     *
     * The project's API key also needs to be sent to authorize the project.
     * That can be set in the X-Goog-Api-Key Metadata header.
     */
    connect: {
      name: "Connect",
      requestType: UpstreamRequest,
      requestStream: true,
      responseType: DownstreamResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface ConnectionApiServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a streaming connection with FCM to send messages and their
   * respective ACKs.
   *
   * The client credentials need to be passed in the [gRPC
   * Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
   * of the header is:
   *   Key: "authorization"
   *   Value: "Checkin [client_id:secret]"
   *
   * The project's API key also needs to be sent to authorize the project.
   * That can be set in the X-Goog-Api-Key Metadata header.
   */
  connect(
    request: AsyncIterable<UpstreamRequest>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<DownstreamResponse>>;
}

export interface ConnectionApiClient<CallOptionsExt = {}> {
  /**
   * Creates a streaming connection with FCM to send messages and their
   * respective ACKs.
   *
   * The client credentials need to be passed in the [gRPC
   * Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
   * of the header is:
   *   Key: "authorization"
   *   Value: "Checkin [client_id:secret]"
   *
   * The project's API key also needs to be sent to authorize the project.
   * That can be set in the X-Goog-Api-Key Metadata header.
   */
  connect(
    request: AsyncIterable<DeepPartial<UpstreamRequest>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<DownstreamResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
