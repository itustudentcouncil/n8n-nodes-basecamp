// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/home/graph/v1/homegraph.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Struct } from "../../../protobuf/struct.js";
import { Device } from "./device.js";

export const protobufPackage = "google.home.graph.v1";

/**
 * Request type for the
 * [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)
 * call.
 */
export interface RequestSyncDevicesRequest {
  /** Required. Third-party user ID. */
  agentUserId: string;
  /**
   * Optional. If set, the request will be added to a queue and a response will
   * be returned immediately. This enables concurrent requests for the given
   * `agent_user_id`, but the caller will not receive any error responses.
   */
  async: boolean;
}

/**
 * Response type for the
 * [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices)
 * call.
 *
 * Intentionally empty upon success. An HTTP response code is returned
 * with more details upon failure.
 */
export interface RequestSyncDevicesResponse {
}

/**
 * Request type for the
 * [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)
 * call. It may include states, notifications, or both. States and notifications
 * are defined per `device_id` (for example, "123" and "456" in the following
 * example).
 *
 * Example:
 *
 * ```json
 * {
 *   "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
 *   "agentUserId": "1234",
 *   "payload": {
 *     "devices": {
 *       "states": {
 *         "123": {
 *           "on": true
 *         },
 *         "456": {
 *           "on": true,
 *           "brightness": 10
 *         }
 *       },
 *     }
 *   }
 * }
 * ```
 */
export interface ReportStateAndNotificationRequest {
  /** Request ID used for debugging. */
  requestId: string;
  /** Unique identifier per event (for example, a doorbell press). */
  eventId: string;
  /** Required. Third-party user ID. */
  agentUserId: string;
  /**
   * Deprecated.
   *
   * @deprecated
   */
  followUpToken: string;
  /** Required. State of devices to update and notification metadata for devices. */
  payload: StateAndNotificationPayload | undefined;
}

/**
 * Response type for the
 * [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)
 * call.
 */
export interface ReportStateAndNotificationResponse {
  /**
   * Request ID copied from
   * [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest].
   */
  requestId: string;
}

/** Payload containing the state and notification information for devices. */
export interface StateAndNotificationPayload {
  /** The devices for updating state and sending notifications. */
  devices: ReportStateAndNotificationDevice | undefined;
}

/** The states and notifications specific to a device. */
export interface ReportStateAndNotificationDevice {
  /**
   * States of devices to update. See the **Device STATES** section
   * of the individual trait [reference
   * guides](https://developers.home.google.com/cloud-to-cloud/traits).
   */
  states:
    | { [key: string]: any }
    | undefined;
  /**
   * Notifications metadata for devices. See the **Device NOTIFICATIONS**
   * section of the individual trait [reference
   * guides](https://developers.home.google.com/cloud-to-cloud/traits).
   */
  notifications: { [key: string]: any } | undefined;
}

/**
 * Request type for the
 * [`DeleteAgentUser`](#google.home.graph.v1.HomeGraphApiService.DeleteAgentUser)
 * call.
 */
export interface DeleteAgentUserRequest {
  /** Request ID used for debugging. */
  requestId: string;
  /** Required. Third-party user ID. */
  agentUserId: string;
}

/**
 * Request type for the
 * [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call.
 */
export interface QueryRequest {
  /** Request ID used for debugging. */
  requestId: string;
  /** Required. Third-party user ID. */
  agentUserId: string;
  /**
   * Required. Inputs containing third-party device IDs for which to
   * get the device states.
   */
  inputs: QueryRequestInput[];
}

/** Device ID inputs to [QueryRequest][google.home.graph.v1.QueryRequest]. */
export interface QueryRequestInput {
  /** Payload containing third-party device IDs. */
  payload: QueryRequestPayload | undefined;
}

/** Payload containing device IDs. */
export interface QueryRequestPayload {
  /** Third-party device IDs for which to get the device states. */
  devices: AgentDeviceId[];
}

/** Third-party device ID for one device. */
export interface AgentDeviceId {
  /** Third-party device ID. */
  id: string;
}

/**
 * Response type for the
 * [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call.
 * This should follow the same format as the Google smart home
 * `action.devices.QUERY`
 * [response](https://developers.home.google.com/cloud-to-cloud/intents/query).
 *
 * Example:
 *
 * ```json
 * {
 *   "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
 *   "payload": {
 *     "devices": {
 *       "123": {
 *         "on": true,
 *         "online": true
 *       },
 *       "456": {
 *         "on": true,
 *         "online": true,
 *         "brightness": 80,
 *         "color": {
 *           "name": "cerulean",
 *           "spectrumRGB": 31655
 *         }
 *       }
 *     }
 *   }
 * }
 * ```
 */
export interface QueryResponse {
  /** Request ID used for debugging. Copied from the request. */
  requestId: string;
  /** Device states for the devices given in the request. */
  payload: QueryResponsePayload | undefined;
}

/** Payload containing device states information. */
export interface QueryResponsePayload {
  /**
   * States of the devices. Map of third-party device ID to struct of device
   * states.
   */
  devices: { [key: string]: { [key: string]: any } | undefined };
}

export interface QueryResponsePayload_DevicesEntry {
  key: string;
  value: { [key: string]: any } | undefined;
}

/**
 * Request type for the [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync)
 * call.
 */
export interface SyncRequest {
  /** Request ID used for debugging. */
  requestId: string;
  /** Required. Third-party user ID. */
  agentUserId: string;
}

/**
 * Response type for the
 * [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call.
 * This should follow the same format as the Google smart home
 * `action.devices.SYNC`
 * [response](https://developers.home.google.com/cloud-to-cloud/intents/sync).
 *
 * Example:
 *
 * ```json
 * {
 *   "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
 *   "payload": {
 *     "agentUserId": "1836.15267389",
 *     "devices": [{
 *       "id": "123",
 *       "type": "action.devices.types.OUTLET",
 *       "traits": [
 *         "action.devices.traits.OnOff"
 *       ],
 *       "name": {
 *         "defaultNames": ["My Outlet 1234"],
 *         "name": "Night light",
 *         "nicknames": ["wall plug"]
 *       },
 *       "willReportState": false,
 *       "deviceInfo": {
 *         "manufacturer": "lights-out-inc",
 *         "model": "hs1234",
 *         "hwVersion": "3.2",
 *         "swVersion": "11.4"
 *       },
 *       "customData": {
 *         "fooValue": 74,
 *         "barValue": true,
 *         "bazValue": "foo"
 *       }
 *     }]
 *   }
 * }
 * ```
 */
export interface SyncResponse {
  /** Request ID used for debugging. Copied from the request. */
  requestId: string;
  /** Devices associated with the third-party user. */
  payload: SyncResponsePayload | undefined;
}

/** Payload containing device information. */
export interface SyncResponsePayload {
  /** Third-party user ID */
  agentUserId: string;
  /** Devices associated with the third-party user. */
  devices: Device[];
}

function createBaseRequestSyncDevicesRequest(): RequestSyncDevicesRequest {
  return { agentUserId: "", async: false };
}

export const RequestSyncDevicesRequest: MessageFns<RequestSyncDevicesRequest> = {
  encode(message: RequestSyncDevicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentUserId !== "") {
      writer.uint32(10).string(message.agentUserId);
    }
    if (message.async !== false) {
      writer.uint32(16).bool(message.async);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestSyncDevicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestSyncDevicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentUserId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.async = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestSyncDevicesRequest {
    return {
      agentUserId: isSet(object.agentUserId) ? globalThis.String(object.agentUserId) : "",
      async: isSet(object.async) ? globalThis.Boolean(object.async) : false,
    };
  },

  toJSON(message: RequestSyncDevicesRequest): unknown {
    const obj: any = {};
    if (message.agentUserId !== "") {
      obj.agentUserId = message.agentUserId;
    }
    if (message.async !== false) {
      obj.async = message.async;
    }
    return obj;
  },

  create(base?: DeepPartial<RequestSyncDevicesRequest>): RequestSyncDevicesRequest {
    return RequestSyncDevicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestSyncDevicesRequest>): RequestSyncDevicesRequest {
    const message = createBaseRequestSyncDevicesRequest();
    message.agentUserId = object.agentUserId ?? "";
    message.async = object.async ?? false;
    return message;
  },
};

function createBaseRequestSyncDevicesResponse(): RequestSyncDevicesResponse {
  return {};
}

export const RequestSyncDevicesResponse: MessageFns<RequestSyncDevicesResponse> = {
  encode(_: RequestSyncDevicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestSyncDevicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestSyncDevicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RequestSyncDevicesResponse {
    return {};
  },

  toJSON(_: RequestSyncDevicesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RequestSyncDevicesResponse>): RequestSyncDevicesResponse {
    return RequestSyncDevicesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RequestSyncDevicesResponse>): RequestSyncDevicesResponse {
    const message = createBaseRequestSyncDevicesResponse();
    return message;
  },
};

function createBaseReportStateAndNotificationRequest(): ReportStateAndNotificationRequest {
  return { requestId: "", eventId: "", agentUserId: "", followUpToken: "", payload: undefined };
}

export const ReportStateAndNotificationRequest: MessageFns<ReportStateAndNotificationRequest> = {
  encode(message: ReportStateAndNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.eventId !== "") {
      writer.uint32(34).string(message.eventId);
    }
    if (message.agentUserId !== "") {
      writer.uint32(18).string(message.agentUserId);
    }
    if (message.followUpToken !== "") {
      writer.uint32(42).string(message.followUpToken);
    }
    if (message.payload !== undefined) {
      StateAndNotificationPayload.encode(message.payload, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportStateAndNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportStateAndNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUserId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.followUpToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = StateAndNotificationPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportStateAndNotificationRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      agentUserId: isSet(object.agentUserId) ? globalThis.String(object.agentUserId) : "",
      followUpToken: isSet(object.followUpToken) ? globalThis.String(object.followUpToken) : "",
      payload: isSet(object.payload) ? StateAndNotificationPayload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: ReportStateAndNotificationRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.agentUserId !== "") {
      obj.agentUserId = message.agentUserId;
    }
    if (message.followUpToken !== "") {
      obj.followUpToken = message.followUpToken;
    }
    if (message.payload !== undefined) {
      obj.payload = StateAndNotificationPayload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportStateAndNotificationRequest>): ReportStateAndNotificationRequest {
    return ReportStateAndNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportStateAndNotificationRequest>): ReportStateAndNotificationRequest {
    const message = createBaseReportStateAndNotificationRequest();
    message.requestId = object.requestId ?? "";
    message.eventId = object.eventId ?? "";
    message.agentUserId = object.agentUserId ?? "";
    message.followUpToken = object.followUpToken ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? StateAndNotificationPayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseReportStateAndNotificationResponse(): ReportStateAndNotificationResponse {
  return { requestId: "" };
}

export const ReportStateAndNotificationResponse: MessageFns<ReportStateAndNotificationResponse> = {
  encode(message: ReportStateAndNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportStateAndNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportStateAndNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportStateAndNotificationResponse {
    return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
  },

  toJSON(message: ReportStateAndNotificationResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportStateAndNotificationResponse>): ReportStateAndNotificationResponse {
    return ReportStateAndNotificationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportStateAndNotificationResponse>): ReportStateAndNotificationResponse {
    const message = createBaseReportStateAndNotificationResponse();
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseStateAndNotificationPayload(): StateAndNotificationPayload {
  return { devices: undefined };
}

export const StateAndNotificationPayload: MessageFns<StateAndNotificationPayload> = {
  encode(message: StateAndNotificationPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.devices !== undefined) {
      ReportStateAndNotificationDevice.encode(message.devices, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateAndNotificationPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateAndNotificationPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.devices = ReportStateAndNotificationDevice.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateAndNotificationPayload {
    return { devices: isSet(object.devices) ? ReportStateAndNotificationDevice.fromJSON(object.devices) : undefined };
  },

  toJSON(message: StateAndNotificationPayload): unknown {
    const obj: any = {};
    if (message.devices !== undefined) {
      obj.devices = ReportStateAndNotificationDevice.toJSON(message.devices);
    }
    return obj;
  },

  create(base?: DeepPartial<StateAndNotificationPayload>): StateAndNotificationPayload {
    return StateAndNotificationPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateAndNotificationPayload>): StateAndNotificationPayload {
    const message = createBaseStateAndNotificationPayload();
    message.devices = (object.devices !== undefined && object.devices !== null)
      ? ReportStateAndNotificationDevice.fromPartial(object.devices)
      : undefined;
    return message;
  },
};

function createBaseReportStateAndNotificationDevice(): ReportStateAndNotificationDevice {
  return { states: undefined, notifications: undefined };
}

export const ReportStateAndNotificationDevice: MessageFns<ReportStateAndNotificationDevice> = {
  encode(message: ReportStateAndNotificationDevice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.states !== undefined) {
      Struct.encode(Struct.wrap(message.states), writer.uint32(10).fork()).join();
    }
    if (message.notifications !== undefined) {
      Struct.encode(Struct.wrap(message.notifications), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportStateAndNotificationDevice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportStateAndNotificationDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.states = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notifications = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportStateAndNotificationDevice {
    return {
      states: isObject(object.states) ? object.states : undefined,
      notifications: isObject(object.notifications) ? object.notifications : undefined,
    };
  },

  toJSON(message: ReportStateAndNotificationDevice): unknown {
    const obj: any = {};
    if (message.states !== undefined) {
      obj.states = message.states;
    }
    if (message.notifications !== undefined) {
      obj.notifications = message.notifications;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportStateAndNotificationDevice>): ReportStateAndNotificationDevice {
    return ReportStateAndNotificationDevice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportStateAndNotificationDevice>): ReportStateAndNotificationDevice {
    const message = createBaseReportStateAndNotificationDevice();
    message.states = object.states ?? undefined;
    message.notifications = object.notifications ?? undefined;
    return message;
  },
};

function createBaseDeleteAgentUserRequest(): DeleteAgentUserRequest {
  return { requestId: "", agentUserId: "" };
}

export const DeleteAgentUserRequest: MessageFns<DeleteAgentUserRequest> = {
  encode(message: DeleteAgentUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.agentUserId !== "") {
      writer.uint32(18).string(message.agentUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAgentUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAgentUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUserId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAgentUserRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      agentUserId: isSet(object.agentUserId) ? globalThis.String(object.agentUserId) : "",
    };
  },

  toJSON(message: DeleteAgentUserRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.agentUserId !== "") {
      obj.agentUserId = message.agentUserId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAgentUserRequest>): DeleteAgentUserRequest {
    return DeleteAgentUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAgentUserRequest>): DeleteAgentUserRequest {
    const message = createBaseDeleteAgentUserRequest();
    message.requestId = object.requestId ?? "";
    message.agentUserId = object.agentUserId ?? "";
    return message;
  },
};

function createBaseQueryRequest(): QueryRequest {
  return { requestId: "", agentUserId: "", inputs: [] };
}

export const QueryRequest: MessageFns<QueryRequest> = {
  encode(message: QueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.agentUserId !== "") {
      writer.uint32(18).string(message.agentUserId);
    }
    for (const v of message.inputs) {
      QueryRequestInput.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inputs.push(QueryRequestInput.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      agentUserId: isSet(object.agentUserId) ? globalThis.String(object.agentUserId) : "",
      inputs: globalThis.Array.isArray(object?.inputs)
        ? object.inputs.map((e: any) => QueryRequestInput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.agentUserId !== "") {
      obj.agentUserId = message.agentUserId;
    }
    if (message.inputs?.length) {
      obj.inputs = message.inputs.map((e) => QueryRequestInput.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRequest>): QueryRequest {
    return QueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRequest>): QueryRequest {
    const message = createBaseQueryRequest();
    message.requestId = object.requestId ?? "";
    message.agentUserId = object.agentUserId ?? "";
    message.inputs = object.inputs?.map((e) => QueryRequestInput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryRequestInput(): QueryRequestInput {
  return { payload: undefined };
}

export const QueryRequestInput: MessageFns<QueryRequestInput> = {
  encode(message: QueryRequestInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      QueryRequestPayload.encode(message.payload, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRequestInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequestInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = QueryRequestPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequestInput {
    return { payload: isSet(object.payload) ? QueryRequestPayload.fromJSON(object.payload) : undefined };
  },

  toJSON(message: QueryRequestInput): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = QueryRequestPayload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRequestInput>): QueryRequestInput {
    return QueryRequestInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRequestInput>): QueryRequestInput {
    const message = createBaseQueryRequestInput();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? QueryRequestPayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseQueryRequestPayload(): QueryRequestPayload {
  return { devices: [] };
}

export const QueryRequestPayload: MessageFns<QueryRequestPayload> = {
  encode(message: QueryRequestPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.devices) {
      AgentDeviceId.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRequestPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequestPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.devices.push(AgentDeviceId.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequestPayload {
    return {
      devices: globalThis.Array.isArray(object?.devices)
        ? object.devices.map((e: any) => AgentDeviceId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryRequestPayload): unknown {
    const obj: any = {};
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => AgentDeviceId.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRequestPayload>): QueryRequestPayload {
    return QueryRequestPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRequestPayload>): QueryRequestPayload {
    const message = createBaseQueryRequestPayload();
    message.devices = object.devices?.map((e) => AgentDeviceId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAgentDeviceId(): AgentDeviceId {
  return { id: "" };
}

export const AgentDeviceId: MessageFns<AgentDeviceId> = {
  encode(message: AgentDeviceId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentDeviceId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentDeviceId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentDeviceId {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AgentDeviceId): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AgentDeviceId>): AgentDeviceId {
    return AgentDeviceId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentDeviceId>): AgentDeviceId {
    const message = createBaseAgentDeviceId();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryResponse(): QueryResponse {
  return { requestId: "", payload: undefined };
}

export const QueryResponse: MessageFns<QueryResponse> = {
  encode(message: QueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.payload !== undefined) {
      QueryResponsePayload.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = QueryResponsePayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      payload: isSet(object.payload) ? QueryResponsePayload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: QueryResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.payload !== undefined) {
      obj.payload = QueryResponsePayload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryResponse>): QueryResponse {
    return QueryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryResponse>): QueryResponse {
    const message = createBaseQueryResponse();
    message.requestId = object.requestId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? QueryResponsePayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseQueryResponsePayload(): QueryResponsePayload {
  return { devices: {} };
}

export const QueryResponsePayload: MessageFns<QueryResponsePayload> = {
  encode(message: QueryResponsePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.devices).forEach(([key, value]) => {
      if (value !== undefined) {
        QueryResponsePayload_DevicesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryResponsePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponsePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = QueryResponsePayload_DevicesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.devices[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponsePayload {
    return {
      devices: isObject(object.devices)
        ? Object.entries(object.devices).reduce<{ [key: string]: { [key: string]: any } | undefined }>(
          (acc, [key, value]) => {
            acc[key] = value as { [key: string]: any } | undefined;
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: QueryResponsePayload): unknown {
    const obj: any = {};
    if (message.devices) {
      const entries = Object.entries(message.devices);
      if (entries.length > 0) {
        obj.devices = {};
        entries.forEach(([k, v]) => {
          obj.devices[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<QueryResponsePayload>): QueryResponsePayload {
    return QueryResponsePayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryResponsePayload>): QueryResponsePayload {
    const message = createBaseQueryResponsePayload();
    message.devices = Object.entries(object.devices ?? {}).reduce<
      { [key: string]: { [key: string]: any } | undefined }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value;
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseQueryResponsePayload_DevicesEntry(): QueryResponsePayload_DevicesEntry {
  return { key: "", value: undefined };
}

export const QueryResponsePayload_DevicesEntry: MessageFns<QueryResponsePayload_DevicesEntry> = {
  encode(message: QueryResponsePayload_DevicesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryResponsePayload_DevicesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponsePayload_DevicesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponsePayload_DevicesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isObject(object.value) ? object.value : undefined,
    };
  },

  toJSON(message: QueryResponsePayload_DevicesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryResponsePayload_DevicesEntry>): QueryResponsePayload_DevicesEntry {
    return QueryResponsePayload_DevicesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryResponsePayload_DevicesEntry>): QueryResponsePayload_DevicesEntry {
    const message = createBaseQueryResponsePayload_DevicesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseSyncRequest(): SyncRequest {
  return { requestId: "", agentUserId: "" };
}

export const SyncRequest: MessageFns<SyncRequest> = {
  encode(message: SyncRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.agentUserId !== "") {
      writer.uint32(18).string(message.agentUserId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUserId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      agentUserId: isSet(object.agentUserId) ? globalThis.String(object.agentUserId) : "",
    };
  },

  toJSON(message: SyncRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.agentUserId !== "") {
      obj.agentUserId = message.agentUserId;
    }
    return obj;
  },

  create(base?: DeepPartial<SyncRequest>): SyncRequest {
    return SyncRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SyncRequest>): SyncRequest {
    const message = createBaseSyncRequest();
    message.requestId = object.requestId ?? "";
    message.agentUserId = object.agentUserId ?? "";
    return message;
  },
};

function createBaseSyncResponse(): SyncResponse {
  return { requestId: "", payload: undefined };
}

export const SyncResponse: MessageFns<SyncResponse> = {
  encode(message: SyncResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.payload !== undefined) {
      SyncResponsePayload.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = SyncResponsePayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      payload: isSet(object.payload) ? SyncResponsePayload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: SyncResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.payload !== undefined) {
      obj.payload = SyncResponsePayload.toJSON(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<SyncResponse>): SyncResponse {
    return SyncResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SyncResponse>): SyncResponse {
    const message = createBaseSyncResponse();
    message.requestId = object.requestId ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? SyncResponsePayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseSyncResponsePayload(): SyncResponsePayload {
  return { agentUserId: "", devices: [] };
}

export const SyncResponsePayload: MessageFns<SyncResponsePayload> = {
  encode(message: SyncResponsePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentUserId !== "") {
      writer.uint32(10).string(message.agentUserId);
    }
    for (const v of message.devices) {
      Device.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncResponsePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncResponsePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentUserId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.devices.push(Device.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncResponsePayload {
    return {
      agentUserId: isSet(object.agentUserId) ? globalThis.String(object.agentUserId) : "",
      devices: globalThis.Array.isArray(object?.devices) ? object.devices.map((e: any) => Device.fromJSON(e)) : [],
    };
  },

  toJSON(message: SyncResponsePayload): unknown {
    const obj: any = {};
    if (message.agentUserId !== "") {
      obj.agentUserId = message.agentUserId;
    }
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => Device.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SyncResponsePayload>): SyncResponsePayload {
    return SyncResponsePayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SyncResponsePayload>): SyncResponsePayload {
    const message = createBaseSyncResponsePayload();
    message.agentUserId = object.agentUserId ?? "";
    message.devices = object.devices?.map((e) => Device.fromPartial(e)) || [];
    return message;
  },
};

/**
 * Google Home Graph API service. The Home Graph service provides support for
 * accessing first-party and third-party devices stored in Google's Home Graph.
 * The Home Graph database provides contextual data about the relationships
 * between devices and the home.
 *
 * For more details, see the [Home Graph developer
 * guide](https://developers.home.google.com/cloud-to-cloud/primer/home-graph).
 */
export type HomeGraphApiServiceDefinition = typeof HomeGraphApiServiceDefinition;
export const HomeGraphApiServiceDefinition = {
  name: "HomeGraphApiService",
  fullName: "google.home.graph.v1.HomeGraphApiService",
  methods: {
    /**
     * Requests Google to send an `action.devices.SYNC`
     * [intent](https://developers.home.google.com/cloud-to-cloud/intents/sync)
     * to your smart home Action to update device metadata for the given user.
     *
     * The third-party user's identity is passed via the `agent_user_id`
     * (see
     * [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
     * This request must be authorized using service account credentials from your
     * Actions console project.
     */
    requestSyncDevices: {
      name: "RequestSyncDevices",
      requestType: RequestSyncDevicesRequest,
      requestStream: false,
      responseType: RequestSyncDevicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 97, 103, 101, 110, 116, 95, 117, 115, 101, 114, 95, 105, 100])],
          578365826: [
            Buffer.from([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              118,
              49,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              58,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              83,
              121,
              110,
              99,
            ]),
          ],
        },
      },
    },
    /**
     * Reports device state and optionally sends device notifications.
     * Called by your smart home Action when the state of a third-party device
     * changes or you need to send a notification about the device.
     * See [Implement Report
     * State](https://developers.home.google.com/cloud-to-cloud/integration/report-state)
     * for more information.
     *
     * This method updates the device state according to its declared
     * [traits](https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits).
     * Publishing a new state value outside of these traits will result in an
     * `INVALID_ARGUMENT` error response.
     *
     * The third-party user's identity is passed in via the `agent_user_id`
     * (see
     * [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
     * This request must be authorized using service account credentials from your
     * Actions console project.
     */
    reportStateAndNotification: {
      name: "ReportStateAndNotification",
      requestType: ReportStateAndNotificationRequest,
      requestStream: false,
      responseType: ReportStateAndNotificationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              41,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              101,
              118,
              101,
              110,
              116,
              95,
              105,
              100,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              44,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              49,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
              83,
              116,
              97,
              116,
              101,
              65,
              110,
              100,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Unlinks the given third-party user from your smart home Action.
     * All data related to this user will be deleted.
     *
     * For more details on how users link their accounts, see
     * [fulfillment and
     * authentication](https://developers.home.google.com/cloud-to-cloud/primer/fulfillment).
     *
     * The third-party user's identity is passed in via the `agent_user_id`
     * (see
     * [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
     * This request must be authorized using service account credentials from your
     * Actions console project.
     */
    deleteAgentUser: {
      name: "DeleteAgentUser",
      requestType: DeleteAgentUserRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              35,
              42,
              33,
              47,
              118,
              49,
              47,
              123,
              97,
              103,
              101,
              110,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              61,
              97,
              103,
              101,
              110,
              116,
              85,
              115,
              101,
              114,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the current states in Home Graph for the given set of the third-party
     * user's devices.
     *
     * The third-party user's identity is passed in via the `agent_user_id`
     * (see [QueryRequest][google.home.graph.v1.QueryRequest]).
     * This request must be authorized using service account credentials from your
     * Actions console project.
     */
    query: {
      name: "Query",
      requestType: QueryRequest,
      requestStream: false,
      responseType: QueryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              44,
              105,
              110,
              112,
              117,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              118,
              49,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              58,
              113,
              117,
              101,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets all the devices associated with the given third-party user.
     *
     * The third-party user's identity is passed in via the `agent_user_id`
     * (see [SyncRequest][google.home.graph.v1.SyncRequest]).
     * This request must be authorized using service account credentials from your
     * Actions console project.
     */
    sync: {
      name: "Sync",
      requestType: SyncRequest,
      requestStream: false,
      responseType: SyncResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              118,
              49,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              58,
              115,
              121,
              110,
              99,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface HomeGraphApiServiceImplementation<CallContextExt = {}> {
  /**
   * Requests Google to send an `action.devices.SYNC`
   * [intent](https://developers.home.google.com/cloud-to-cloud/intents/sync)
   * to your smart home Action to update device metadata for the given user.
   *
   * The third-party user's identity is passed via the `agent_user_id`
   * (see
   * [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  requestSyncDevices(
    request: RequestSyncDevicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RequestSyncDevicesResponse>>;
  /**
   * Reports device state and optionally sends device notifications.
   * Called by your smart home Action when the state of a third-party device
   * changes or you need to send a notification about the device.
   * See [Implement Report
   * State](https://developers.home.google.com/cloud-to-cloud/integration/report-state)
   * for more information.
   *
   * This method updates the device state according to its declared
   * [traits](https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits).
   * Publishing a new state value outside of these traits will result in an
   * `INVALID_ARGUMENT` error response.
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see
   * [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  reportStateAndNotification(
    request: ReportStateAndNotificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportStateAndNotificationResponse>>;
  /**
   * Unlinks the given third-party user from your smart home Action.
   * All data related to this user will be deleted.
   *
   * For more details on how users link their accounts, see
   * [fulfillment and
   * authentication](https://developers.home.google.com/cloud-to-cloud/primer/fulfillment).
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see
   * [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  deleteAgentUser(request: DeleteAgentUserRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Gets the current states in Home Graph for the given set of the third-party
   * user's devices.
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see [QueryRequest][google.home.graph.v1.QueryRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  query(request: QueryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<QueryResponse>>;
  /**
   * Gets all the devices associated with the given third-party user.
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see [SyncRequest][google.home.graph.v1.SyncRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  sync(request: SyncRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SyncResponse>>;
}

export interface HomeGraphApiServiceClient<CallOptionsExt = {}> {
  /**
   * Requests Google to send an `action.devices.SYNC`
   * [intent](https://developers.home.google.com/cloud-to-cloud/intents/sync)
   * to your smart home Action to update device metadata for the given user.
   *
   * The third-party user's identity is passed via the `agent_user_id`
   * (see
   * [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  requestSyncDevices(
    request: DeepPartial<RequestSyncDevicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RequestSyncDevicesResponse>;
  /**
   * Reports device state and optionally sends device notifications.
   * Called by your smart home Action when the state of a third-party device
   * changes or you need to send a notification about the device.
   * See [Implement Report
   * State](https://developers.home.google.com/cloud-to-cloud/integration/report-state)
   * for more information.
   *
   * This method updates the device state according to its declared
   * [traits](https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits).
   * Publishing a new state value outside of these traits will result in an
   * `INVALID_ARGUMENT` error response.
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see
   * [ReportStateAndNotificationRequest][google.home.graph.v1.ReportStateAndNotificationRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  reportStateAndNotification(
    request: DeepPartial<ReportStateAndNotificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportStateAndNotificationResponse>;
  /**
   * Unlinks the given third-party user from your smart home Action.
   * All data related to this user will be deleted.
   *
   * For more details on how users link their accounts, see
   * [fulfillment and
   * authentication](https://developers.home.google.com/cloud-to-cloud/primer/fulfillment).
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see
   * [DeleteAgentUserRequest][google.home.graph.v1.DeleteAgentUserRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  deleteAgentUser(request: DeepPartial<DeleteAgentUserRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Gets the current states in Home Graph for the given set of the third-party
   * user's devices.
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see [QueryRequest][google.home.graph.v1.QueryRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  query(request: DeepPartial<QueryRequest>, options?: CallOptions & CallOptionsExt): Promise<QueryResponse>;
  /**
   * Gets all the devices associated with the given third-party user.
   *
   * The third-party user's identity is passed in via the `agent_user_id`
   * (see [SyncRequest][google.home.graph.v1.SyncRequest]).
   * This request must be authorized using service account credentials from your
   * Actions console project.
   */
  sync(request: DeepPartial<SyncRequest>, options?: CallOptions & CallOptionsExt): Promise<SyncResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
