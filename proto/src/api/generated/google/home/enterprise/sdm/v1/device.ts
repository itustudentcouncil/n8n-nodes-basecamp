// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/home/enterprise/sdm/v1/device.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.home.enterprise.sdm.v1";

/**
 * Device resource represents an instance of enterprise managed device in the
 * property.
 */
export interface Device {
  /**
   * Required. The resource name of the device. For example:
   * "enterprises/XYZ/devices/123".
   */
  name: string;
  /**
   * Output only. Type of the device for general display purposes.
   * For example: "THERMOSTAT". The device type should not be used to deduce or
   * infer functionality of the actual device it is assigned to. Instead, use
   * the returned traits for the device.
   */
  type: string;
  /** Output only. Device traits. */
  traits:
    | { [key: string]: any }
    | undefined;
  /** Assignee details of the device. */
  parentRelations: ParentRelation[];
}

/**
 * Represents device relationships, for instance, structure/room to which the
 * device is assigned to.
 */
export interface ParentRelation {
  /**
   * Output only. The name of the relation -- e.g., structure/room where the
   * device is assigned to. For example: "enterprises/XYZ/structures/ABC" or
   * "enterprises/XYZ/structures/ABC/rooms/123"
   */
  parent: string;
  /**
   * Output only. The custom name of the relation -- e.g., structure/room where
   * the device is assigned to.
   */
  displayName: string;
}

function createBaseDevice(): Device {
  return { name: "", type: "", traits: undefined, parentRelations: [] };
}

export const Device: MessageFns<Device> = {
  encode(message: Device, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.traits !== undefined) {
      Struct.encode(Struct.wrap(message.traits), writer.uint32(34).fork()).join();
    }
    for (const v of message.parentRelations) {
      ParentRelation.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Device {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.traits = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.parentRelations.push(ParentRelation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Device {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      traits: isObject(object.traits) ? object.traits : undefined,
      parentRelations: globalThis.Array.isArray(object?.parentRelations)
        ? object.parentRelations.map((e: any) => ParentRelation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Device): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.traits !== undefined) {
      obj.traits = message.traits;
    }
    if (message.parentRelations?.length) {
      obj.parentRelations = message.parentRelations.map((e) => ParentRelation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Device>): Device {
    return Device.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Device>): Device {
    const message = createBaseDevice();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.traits = object.traits ?? undefined;
    message.parentRelations = object.parentRelations?.map((e) => ParentRelation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseParentRelation(): ParentRelation {
  return { parent: "", displayName: "" };
}

export const ParentRelation: MessageFns<ParentRelation> = {
  encode(message: ParentRelation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParentRelation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParentRelation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParentRelation {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: ParentRelation): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<ParentRelation>): ParentRelation {
    return ParentRelation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParentRelation>): ParentRelation {
    const message = createBaseParentRelation();
    message.parent = object.parent ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
