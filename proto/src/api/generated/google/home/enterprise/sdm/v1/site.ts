// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/home/enterprise/sdm/v1/site.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../../protobuf/struct.js";

export const protobufPackage = "google.home.enterprise.sdm.v1";

/**
 * Structure resource represents an instance of enterprise managed home or hotel
 * room.
 */
export interface Structure {
  /**
   * Output only. The resource name of the structure. For example:
   * "enterprises/XYZ/structures/ABC".
   */
  name: string;
  /** Structure traits. */
  traits: { [key: string]: any } | undefined;
}

/**
 * Room resource represents an instance of sub-space within a structure such as
 * rooms in a hotel suite or rental apartment.
 */
export interface Room {
  /**
   * Output only. The resource name of the room. For example:
   * "enterprises/XYZ/structures/ABC/rooms/123".
   */
  name: string;
  /** Room traits. */
  traits: { [key: string]: any } | undefined;
}

function createBaseStructure(): Structure {
  return { name: "", traits: undefined };
}

export const Structure: MessageFns<Structure> = {
  encode(message: Structure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.traits !== undefined) {
      Struct.encode(Struct.wrap(message.traits), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Structure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.traits = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Structure {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      traits: isObject(object.traits) ? object.traits : undefined,
    };
  },

  toJSON(message: Structure): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.traits !== undefined) {
      obj.traits = message.traits;
    }
    return obj;
  },

  create(base?: DeepPartial<Structure>): Structure {
    return Structure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Structure>): Structure {
    const message = createBaseStructure();
    message.name = object.name ?? "";
    message.traits = object.traits ?? undefined;
    return message;
  },
};

function createBaseRoom(): Room {
  return { name: "", traits: undefined };
}

export const Room: MessageFns<Room> = {
  encode(message: Room, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.traits !== undefined) {
      Struct.encode(Struct.wrap(message.traits), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Room {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.traits = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Room {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      traits: isObject(object.traits) ? object.traits : undefined,
    };
  },

  toJSON(message: Room): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.traits !== undefined) {
      obj.traits = message.traits;
    }
    return obj;
  },

  create(base?: DeepPartial<Room>): Room {
    return Room.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Room>): Room {
    const message = createBaseRoom();
    message.name = object.name ?? "";
    message.traits = object.traits ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
