// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/attachment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.chat.v1";

/** An attachment in Google Chat. */
export interface Attachment {
  /**
   * Resource name of the attachment, in the form
   * `spaces/{space}/messages/{message}/attachments/{attachment}`.
   */
  name: string;
  /** Output only. The original file name for the content, not the full path. */
  contentName: string;
  /** Output only. The content type (MIME type) of the file. */
  contentType: string;
  /**
   * A reference to the attachment data. This field is used with the media API
   * to download the attachment data.
   */
  attachmentDataRef?:
    | AttachmentDataRef
    | undefined;
  /**
   * Output only. A reference to the Google Drive attachment. This field is
   * used with the Google Drive API.
   */
  driveDataRef?:
    | DriveDataRef
    | undefined;
  /**
   * Output only. The thumbnail URL which should be used to preview the
   * attachment to a human user. Chat apps shouldn't use this URL to download
   * attachment content.
   */
  thumbnailUri: string;
  /**
   * Output only. The download URL which should be used to allow a human user to
   * download the attachment. Chat apps shouldn't use this URL to download
   * attachment content.
   */
  downloadUri: string;
  /** Output only. The source of the attachment. */
  source: Attachment_Source;
}

/** The source of the attachment. */
export enum Attachment_Source {
  /** SOURCE_UNSPECIFIED - Reserved. */
  SOURCE_UNSPECIFIED = 0,
  /** DRIVE_FILE - The file is a Google Drive file. */
  DRIVE_FILE = 1,
  /** UPLOADED_CONTENT - The file is uploaded to Chat. */
  UPLOADED_CONTENT = 2,
  UNRECOGNIZED = -1,
}

export function attachment_SourceFromJSON(object: any): Attachment_Source {
  switch (object) {
    case 0:
    case "SOURCE_UNSPECIFIED":
      return Attachment_Source.SOURCE_UNSPECIFIED;
    case 1:
    case "DRIVE_FILE":
      return Attachment_Source.DRIVE_FILE;
    case 2:
    case "UPLOADED_CONTENT":
      return Attachment_Source.UPLOADED_CONTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Attachment_Source.UNRECOGNIZED;
  }
}

export function attachment_SourceToJSON(object: Attachment_Source): string {
  switch (object) {
    case Attachment_Source.SOURCE_UNSPECIFIED:
      return "SOURCE_UNSPECIFIED";
    case Attachment_Source.DRIVE_FILE:
      return "DRIVE_FILE";
    case Attachment_Source.UPLOADED_CONTENT:
      return "UPLOADED_CONTENT";
    case Attachment_Source.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A reference to the data of a drive attachment. */
export interface DriveDataRef {
  /** The ID for the drive file. Use with the Drive API. */
  driveFileId: string;
}

/** A reference to the attachment data. */
export interface AttachmentDataRef {
  /**
   * The resource name of the attachment data. This field is used with the media
   * API to download the attachment data.
   */
  resourceName: string;
  /**
   * Opaque token containing a reference to an uploaded attachment. Treated by
   * clients as an opaque string and used to create or update Chat messages with
   * attachments.
   */
  attachmentUploadToken: string;
}

/** Request to get an attachment. */
export interface GetAttachmentRequest {
  /**
   * Required. Resource name of the attachment, in the form
   * `spaces/{space}/messages/{message}/attachments/{attachment}`.
   */
  name: string;
}

/** Request to upload an attachment. */
export interface UploadAttachmentRequest {
  /**
   * Required. Resource name of the Chat space in which the attachment is
   * uploaded. Format "spaces/{space}".
   */
  parent: string;
  /** Required. The filename of the attachment, including the file extension. */
  filename: string;
}

/** Response of uploading an attachment. */
export interface UploadAttachmentResponse {
  /** Reference to the uploaded attachment. */
  attachmentDataRef: AttachmentDataRef | undefined;
}

function createBaseAttachment(): Attachment {
  return {
    name: "",
    contentName: "",
    contentType: "",
    attachmentDataRef: undefined,
    driveDataRef: undefined,
    thumbnailUri: "",
    downloadUri: "",
    source: 0,
  };
}

export const Attachment: MessageFns<Attachment> = {
  encode(message: Attachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.contentName !== "") {
      writer.uint32(18).string(message.contentName);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    if (message.attachmentDataRef !== undefined) {
      AttachmentDataRef.encode(message.attachmentDataRef, writer.uint32(34).fork()).join();
    }
    if (message.driveDataRef !== undefined) {
      DriveDataRef.encode(message.driveDataRef, writer.uint32(58).fork()).join();
    }
    if (message.thumbnailUri !== "") {
      writer.uint32(42).string(message.thumbnailUri);
    }
    if (message.downloadUri !== "") {
      writer.uint32(50).string(message.downloadUri);
    }
    if (message.source !== 0) {
      writer.uint32(72).int32(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contentName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.attachmentDataRef = AttachmentDataRef.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.driveDataRef = DriveDataRef.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.thumbnailUri = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.downloadUri = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attachment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      contentName: isSet(object.contentName) ? globalThis.String(object.contentName) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      attachmentDataRef: isSet(object.attachmentDataRef)
        ? AttachmentDataRef.fromJSON(object.attachmentDataRef)
        : undefined,
      driveDataRef: isSet(object.driveDataRef) ? DriveDataRef.fromJSON(object.driveDataRef) : undefined,
      thumbnailUri: isSet(object.thumbnailUri) ? globalThis.String(object.thumbnailUri) : "",
      downloadUri: isSet(object.downloadUri) ? globalThis.String(object.downloadUri) : "",
      source: isSet(object.source) ? attachment_SourceFromJSON(object.source) : 0,
    };
  },

  toJSON(message: Attachment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.contentName !== "") {
      obj.contentName = message.contentName;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.attachmentDataRef !== undefined) {
      obj.attachmentDataRef = AttachmentDataRef.toJSON(message.attachmentDataRef);
    }
    if (message.driveDataRef !== undefined) {
      obj.driveDataRef = DriveDataRef.toJSON(message.driveDataRef);
    }
    if (message.thumbnailUri !== "") {
      obj.thumbnailUri = message.thumbnailUri;
    }
    if (message.downloadUri !== "") {
      obj.downloadUri = message.downloadUri;
    }
    if (message.source !== 0) {
      obj.source = attachment_SourceToJSON(message.source);
    }
    return obj;
  },

  create(base?: DeepPartial<Attachment>): Attachment {
    return Attachment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Attachment>): Attachment {
    const message = createBaseAttachment();
    message.name = object.name ?? "";
    message.contentName = object.contentName ?? "";
    message.contentType = object.contentType ?? "";
    message.attachmentDataRef = (object.attachmentDataRef !== undefined && object.attachmentDataRef !== null)
      ? AttachmentDataRef.fromPartial(object.attachmentDataRef)
      : undefined;
    message.driveDataRef = (object.driveDataRef !== undefined && object.driveDataRef !== null)
      ? DriveDataRef.fromPartial(object.driveDataRef)
      : undefined;
    message.thumbnailUri = object.thumbnailUri ?? "";
    message.downloadUri = object.downloadUri ?? "";
    message.source = object.source ?? 0;
    return message;
  },
};

function createBaseDriveDataRef(): DriveDataRef {
  return { driveFileId: "" };
}

export const DriveDataRef: MessageFns<DriveDataRef> = {
  encode(message: DriveDataRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.driveFileId !== "") {
      writer.uint32(18).string(message.driveFileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DriveDataRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDriveDataRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.driveFileId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DriveDataRef {
    return { driveFileId: isSet(object.driveFileId) ? globalThis.String(object.driveFileId) : "" };
  },

  toJSON(message: DriveDataRef): unknown {
    const obj: any = {};
    if (message.driveFileId !== "") {
      obj.driveFileId = message.driveFileId;
    }
    return obj;
  },

  create(base?: DeepPartial<DriveDataRef>): DriveDataRef {
    return DriveDataRef.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DriveDataRef>): DriveDataRef {
    const message = createBaseDriveDataRef();
    message.driveFileId = object.driveFileId ?? "";
    return message;
  },
};

function createBaseAttachmentDataRef(): AttachmentDataRef {
  return { resourceName: "", attachmentUploadToken: "" };
}

export const AttachmentDataRef: MessageFns<AttachmentDataRef> = {
  encode(message: AttachmentDataRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.attachmentUploadToken !== "") {
      writer.uint32(18).string(message.attachmentUploadToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachmentDataRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachmentDataRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attachmentUploadToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachmentDataRef {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      attachmentUploadToken: isSet(object.attachmentUploadToken) ? globalThis.String(object.attachmentUploadToken) : "",
    };
  },

  toJSON(message: AttachmentDataRef): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.attachmentUploadToken !== "") {
      obj.attachmentUploadToken = message.attachmentUploadToken;
    }
    return obj;
  },

  create(base?: DeepPartial<AttachmentDataRef>): AttachmentDataRef {
    return AttachmentDataRef.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachmentDataRef>): AttachmentDataRef {
    const message = createBaseAttachmentDataRef();
    message.resourceName = object.resourceName ?? "";
    message.attachmentUploadToken = object.attachmentUploadToken ?? "";
    return message;
  },
};

function createBaseGetAttachmentRequest(): GetAttachmentRequest {
  return { name: "" };
}

export const GetAttachmentRequest: MessageFns<GetAttachmentRequest> = {
  encode(message: GetAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAttachmentRequest>): GetAttachmentRequest {
    return GetAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAttachmentRequest>): GetAttachmentRequest {
    const message = createBaseGetAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUploadAttachmentRequest(): UploadAttachmentRequest {
  return { parent: "", filename: "" };
}

export const UploadAttachmentRequest: MessageFns<UploadAttachmentRequest> = {
  encode(message: UploadAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filename !== "") {
      writer.uint32(34).string(message.filename);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filename = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadAttachmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
    };
  },

  toJSON(message: UploadAttachmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    return obj;
  },

  create(base?: DeepPartial<UploadAttachmentRequest>): UploadAttachmentRequest {
    return UploadAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadAttachmentRequest>): UploadAttachmentRequest {
    const message = createBaseUploadAttachmentRequest();
    message.parent = object.parent ?? "";
    message.filename = object.filename ?? "";
    return message;
  },
};

function createBaseUploadAttachmentResponse(): UploadAttachmentResponse {
  return { attachmentDataRef: undefined };
}

export const UploadAttachmentResponse: MessageFns<UploadAttachmentResponse> = {
  encode(message: UploadAttachmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attachmentDataRef !== undefined) {
      AttachmentDataRef.encode(message.attachmentDataRef, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadAttachmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadAttachmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attachmentDataRef = AttachmentDataRef.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadAttachmentResponse {
    return {
      attachmentDataRef: isSet(object.attachmentDataRef)
        ? AttachmentDataRef.fromJSON(object.attachmentDataRef)
        : undefined,
    };
  },

  toJSON(message: UploadAttachmentResponse): unknown {
    const obj: any = {};
    if (message.attachmentDataRef !== undefined) {
      obj.attachmentDataRef = AttachmentDataRef.toJSON(message.attachmentDataRef);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadAttachmentResponse>): UploadAttachmentResponse {
    return UploadAttachmentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadAttachmentResponse>): UploadAttachmentResponse {
    const message = createBaseUploadAttachmentResponse();
    message.attachmentDataRef = (object.attachmentDataRef !== undefined && object.attachmentDataRef !== null)
      ? AttachmentDataRef.fromPartial(object.attachmentDataRef)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
