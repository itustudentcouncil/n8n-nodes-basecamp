// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/annotation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DriveDataRef } from "./attachment.js";
import { User } from "./user.js";

export const protobufPackage = "google.chat.v1";

/** Type of the annotation. */
export enum AnnotationType {
  /** ANNOTATION_TYPE_UNSPECIFIED - Default value for the enum. Don't use. */
  ANNOTATION_TYPE_UNSPECIFIED = 0,
  /** USER_MENTION - A user is mentioned. */
  USER_MENTION = 1,
  /** SLASH_COMMAND - A slash command is invoked. */
  SLASH_COMMAND = 2,
  /** RICH_LINK - A rich link annotation. */
  RICH_LINK = 3,
  UNRECOGNIZED = -1,
}

export function annotationTypeFromJSON(object: any): AnnotationType {
  switch (object) {
    case 0:
    case "ANNOTATION_TYPE_UNSPECIFIED":
      return AnnotationType.ANNOTATION_TYPE_UNSPECIFIED;
    case 1:
    case "USER_MENTION":
      return AnnotationType.USER_MENTION;
    case 2:
    case "SLASH_COMMAND":
      return AnnotationType.SLASH_COMMAND;
    case 3:
    case "RICH_LINK":
      return AnnotationType.RICH_LINK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AnnotationType.UNRECOGNIZED;
  }
}

export function annotationTypeToJSON(object: AnnotationType): string {
  switch (object) {
    case AnnotationType.ANNOTATION_TYPE_UNSPECIFIED:
      return "ANNOTATION_TYPE_UNSPECIFIED";
    case AnnotationType.USER_MENTION:
      return "USER_MENTION";
    case AnnotationType.SLASH_COMMAND:
      return "SLASH_COMMAND";
    case AnnotationType.RICH_LINK:
      return "RICH_LINK";
    case AnnotationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Output only. Annotations associated with the plain-text body of the message.
 * To add basic formatting to a text message, see
 * [Format text
 * messages](https://developers.google.com/workspace/chat/format-messages).
 *
 * Example plain-text message body:
 * ```
 * Hello @FooBot how are you!"
 * ```
 *
 * The corresponding annotations metadata:
 * ```
 * "annotations":[{
 *   "type":"USER_MENTION",
 *   "startIndex":6,
 *   "length":7,
 *   "userMention": {
 *     "user": {
 *       "name":"users/{user}",
 *       "displayName":"FooBot",
 *       "avatarUrl":"https://goo.gl/aeDtrS",
 *       "type":"BOT"
 *     },
 *     "type":"MENTION"
 *    }
 * }]
 * ```
 */
export interface Annotation {
  /** The type of this annotation. */
  type: AnnotationType;
  /**
   * Start index (0-based, inclusive) in the plain-text message body this
   * annotation corresponds to.
   */
  startIndex?:
    | number
    | undefined;
  /**
   * Length of the substring in the plain-text message body this annotation
   * corresponds to.
   */
  length: number;
  /** The metadata of user mention. */
  userMention?:
    | UserMentionMetadata
    | undefined;
  /** The metadata for a slash command. */
  slashCommand?:
    | SlashCommandMetadata
    | undefined;
  /** The metadata for a rich link. */
  richLinkMetadata?: RichLinkMetadata | undefined;
}

/** Annotation metadata for user mentions (@). */
export interface UserMentionMetadata {
  /** The user mentioned. */
  user:
    | User
    | undefined;
  /** The type of user mention. */
  type: UserMentionMetadata_Type;
}

export enum UserMentionMetadata_Type {
  /** TYPE_UNSPECIFIED - Default value for the enum. Don't use. */
  TYPE_UNSPECIFIED = 0,
  /** ADD - Add user to space. */
  ADD = 1,
  /** MENTION - Mention user in space. */
  MENTION = 2,
  UNRECOGNIZED = -1,
}

export function userMentionMetadata_TypeFromJSON(object: any): UserMentionMetadata_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return UserMentionMetadata_Type.TYPE_UNSPECIFIED;
    case 1:
    case "ADD":
      return UserMentionMetadata_Type.ADD;
    case 2:
    case "MENTION":
      return UserMentionMetadata_Type.MENTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserMentionMetadata_Type.UNRECOGNIZED;
  }
}

export function userMentionMetadata_TypeToJSON(object: UserMentionMetadata_Type): string {
  switch (object) {
    case UserMentionMetadata_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case UserMentionMetadata_Type.ADD:
      return "ADD";
    case UserMentionMetadata_Type.MENTION:
      return "MENTION";
    case UserMentionMetadata_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Annotation metadata for slash commands (/). */
export interface SlashCommandMetadata {
  /** The Chat app whose command was invoked. */
  bot:
    | User
    | undefined;
  /** The type of slash command. */
  type: SlashCommandMetadata_Type;
  /** The name of the invoked slash command. */
  commandName: string;
  /** The command ID of the invoked slash command. */
  commandId: Long;
  /** Indicates whether the slash command is for a dialog. */
  triggersDialog: boolean;
}

export enum SlashCommandMetadata_Type {
  /** TYPE_UNSPECIFIED - Default value for the enum. Don't use. */
  TYPE_UNSPECIFIED = 0,
  /** ADD - Add Chat app to space. */
  ADD = 1,
  /** INVOKE - Invoke slash command in space. */
  INVOKE = 2,
  UNRECOGNIZED = -1,
}

export function slashCommandMetadata_TypeFromJSON(object: any): SlashCommandMetadata_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SlashCommandMetadata_Type.TYPE_UNSPECIFIED;
    case 1:
    case "ADD":
      return SlashCommandMetadata_Type.ADD;
    case 2:
    case "INVOKE":
      return SlashCommandMetadata_Type.INVOKE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SlashCommandMetadata_Type.UNRECOGNIZED;
  }
}

export function slashCommandMetadata_TypeToJSON(object: SlashCommandMetadata_Type): string {
  switch (object) {
    case SlashCommandMetadata_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SlashCommandMetadata_Type.ADD:
      return "ADD";
    case SlashCommandMetadata_Type.INVOKE:
      return "INVOKE";
    case SlashCommandMetadata_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A rich link to a resource. */
export interface RichLinkMetadata {
  /** The URI of this link. */
  uri: string;
  /** The rich link type. */
  richLinkType: RichLinkMetadata_RichLinkType;
  /** Data for a drive link. */
  driveLinkData?:
    | DriveLinkData
    | undefined;
  /** Data for a chat space link. */
  chatSpaceLinkData?: ChatSpaceLinkData | undefined;
}

/** The rich link type. More types might be added in the future. */
export enum RichLinkMetadata_RichLinkType {
  /** RICH_LINK_TYPE_UNSPECIFIED - Default value for the enum. Don't use. */
  RICH_LINK_TYPE_UNSPECIFIED = 0,
  /** DRIVE_FILE - A Google Drive rich link type. */
  DRIVE_FILE = 1,
  /** CHAT_SPACE - A Chat space rich link type. For example, a space smart chip. */
  CHAT_SPACE = 2,
  UNRECOGNIZED = -1,
}

export function richLinkMetadata_RichLinkTypeFromJSON(object: any): RichLinkMetadata_RichLinkType {
  switch (object) {
    case 0:
    case "RICH_LINK_TYPE_UNSPECIFIED":
      return RichLinkMetadata_RichLinkType.RICH_LINK_TYPE_UNSPECIFIED;
    case 1:
    case "DRIVE_FILE":
      return RichLinkMetadata_RichLinkType.DRIVE_FILE;
    case 2:
    case "CHAT_SPACE":
      return RichLinkMetadata_RichLinkType.CHAT_SPACE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RichLinkMetadata_RichLinkType.UNRECOGNIZED;
  }
}

export function richLinkMetadata_RichLinkTypeToJSON(object: RichLinkMetadata_RichLinkType): string {
  switch (object) {
    case RichLinkMetadata_RichLinkType.RICH_LINK_TYPE_UNSPECIFIED:
      return "RICH_LINK_TYPE_UNSPECIFIED";
    case RichLinkMetadata_RichLinkType.DRIVE_FILE:
      return "DRIVE_FILE";
    case RichLinkMetadata_RichLinkType.CHAT_SPACE:
      return "CHAT_SPACE";
    case RichLinkMetadata_RichLinkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Data for Google Drive links. */
export interface DriveLinkData {
  /**
   * A
   * [DriveDataRef](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.attachments#drivedataref)
   * which references a Google Drive file.
   */
  driveDataRef:
    | DriveDataRef
    | undefined;
  /** The mime type of the linked Google Drive resource. */
  mimeType: string;
}

/** Data for Chat space links. */
export interface ChatSpaceLinkData {
  /**
   * The space of the linked Chat space resource.
   *
   * Format: `spaces/{space}`
   */
  space: string;
  /**
   * The thread of the linked Chat space resource.
   *
   * Format: `spaces/{space}/threads/{thread}`
   */
  thread: string;
  /**
   * The message of the linked Chat space resource.
   *
   * Format: `spaces/{space}/messages/{message}`
   */
  message: string;
}

function createBaseAnnotation(): Annotation {
  return {
    type: 0,
    startIndex: undefined,
    length: 0,
    userMention: undefined,
    slashCommand: undefined,
    richLinkMetadata: undefined,
  };
}

export const Annotation: MessageFns<Annotation> = {
  encode(message: Annotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.startIndex !== undefined) {
      writer.uint32(16).int32(message.startIndex);
    }
    if (message.length !== 0) {
      writer.uint32(24).int32(message.length);
    }
    if (message.userMention !== undefined) {
      UserMentionMetadata.encode(message.userMention, writer.uint32(34).fork()).join();
    }
    if (message.slashCommand !== undefined) {
      SlashCommandMetadata.encode(message.slashCommand, writer.uint32(42).fork()).join();
    }
    if (message.richLinkMetadata !== undefined) {
      RichLinkMetadata.encode(message.richLinkMetadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Annotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.startIndex = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.length = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userMention = UserMentionMetadata.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.slashCommand = SlashCommandMetadata.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.richLinkMetadata = RichLinkMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Annotation {
    return {
      type: isSet(object.type) ? annotationTypeFromJSON(object.type) : 0,
      startIndex: isSet(object.startIndex) ? globalThis.Number(object.startIndex) : undefined,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      userMention: isSet(object.userMention) ? UserMentionMetadata.fromJSON(object.userMention) : undefined,
      slashCommand: isSet(object.slashCommand) ? SlashCommandMetadata.fromJSON(object.slashCommand) : undefined,
      richLinkMetadata: isSet(object.richLinkMetadata) ? RichLinkMetadata.fromJSON(object.richLinkMetadata) : undefined,
    };
  },

  toJSON(message: Annotation): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = annotationTypeToJSON(message.type);
    }
    if (message.startIndex !== undefined) {
      obj.startIndex = Math.round(message.startIndex);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.userMention !== undefined) {
      obj.userMention = UserMentionMetadata.toJSON(message.userMention);
    }
    if (message.slashCommand !== undefined) {
      obj.slashCommand = SlashCommandMetadata.toJSON(message.slashCommand);
    }
    if (message.richLinkMetadata !== undefined) {
      obj.richLinkMetadata = RichLinkMetadata.toJSON(message.richLinkMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<Annotation>): Annotation {
    return Annotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Annotation>): Annotation {
    const message = createBaseAnnotation();
    message.type = object.type ?? 0;
    message.startIndex = object.startIndex ?? undefined;
    message.length = object.length ?? 0;
    message.userMention = (object.userMention !== undefined && object.userMention !== null)
      ? UserMentionMetadata.fromPartial(object.userMention)
      : undefined;
    message.slashCommand = (object.slashCommand !== undefined && object.slashCommand !== null)
      ? SlashCommandMetadata.fromPartial(object.slashCommand)
      : undefined;
    message.richLinkMetadata = (object.richLinkMetadata !== undefined && object.richLinkMetadata !== null)
      ? RichLinkMetadata.fromPartial(object.richLinkMetadata)
      : undefined;
    return message;
  },
};

function createBaseUserMentionMetadata(): UserMentionMetadata {
  return { user: undefined, type: 0 };
}

export const UserMentionMetadata: MessageFns<UserMentionMetadata> = {
  encode(message: UserMentionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserMentionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserMentionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserMentionMetadata {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      type: isSet(object.type) ? userMentionMetadata_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: UserMentionMetadata): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.type !== 0) {
      obj.type = userMentionMetadata_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<UserMentionMetadata>): UserMentionMetadata {
    return UserMentionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserMentionMetadata>): UserMentionMetadata {
    const message = createBaseUserMentionMetadata();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseSlashCommandMetadata(): SlashCommandMetadata {
  return { bot: undefined, type: 0, commandName: "", commandId: Long.ZERO, triggersDialog: false };
}

export const SlashCommandMetadata: MessageFns<SlashCommandMetadata> = {
  encode(message: SlashCommandMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bot !== undefined) {
      User.encode(message.bot, writer.uint32(10).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.commandName !== "") {
      writer.uint32(26).string(message.commandName);
    }
    if (!message.commandId.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.commandId.toString());
    }
    if (message.triggersDialog !== false) {
      writer.uint32(40).bool(message.triggersDialog);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlashCommandMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlashCommandMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bot = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.commandId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.triggersDialog = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlashCommandMetadata {
    return {
      bot: isSet(object.bot) ? User.fromJSON(object.bot) : undefined,
      type: isSet(object.type) ? slashCommandMetadata_TypeFromJSON(object.type) : 0,
      commandName: isSet(object.commandName) ? globalThis.String(object.commandName) : "",
      commandId: isSet(object.commandId) ? Long.fromValue(object.commandId) : Long.ZERO,
      triggersDialog: isSet(object.triggersDialog) ? globalThis.Boolean(object.triggersDialog) : false,
    };
  },

  toJSON(message: SlashCommandMetadata): unknown {
    const obj: any = {};
    if (message.bot !== undefined) {
      obj.bot = User.toJSON(message.bot);
    }
    if (message.type !== 0) {
      obj.type = slashCommandMetadata_TypeToJSON(message.type);
    }
    if (message.commandName !== "") {
      obj.commandName = message.commandName;
    }
    if (!message.commandId.equals(Long.ZERO)) {
      obj.commandId = (message.commandId || Long.ZERO).toString();
    }
    if (message.triggersDialog !== false) {
      obj.triggersDialog = message.triggersDialog;
    }
    return obj;
  },

  create(base?: DeepPartial<SlashCommandMetadata>): SlashCommandMetadata {
    return SlashCommandMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SlashCommandMetadata>): SlashCommandMetadata {
    const message = createBaseSlashCommandMetadata();
    message.bot = (object.bot !== undefined && object.bot !== null) ? User.fromPartial(object.bot) : undefined;
    message.type = object.type ?? 0;
    message.commandName = object.commandName ?? "";
    message.commandId = (object.commandId !== undefined && object.commandId !== null)
      ? Long.fromValue(object.commandId)
      : Long.ZERO;
    message.triggersDialog = object.triggersDialog ?? false;
    return message;
  },
};

function createBaseRichLinkMetadata(): RichLinkMetadata {
  return { uri: "", richLinkType: 0, driveLinkData: undefined, chatSpaceLinkData: undefined };
}

export const RichLinkMetadata: MessageFns<RichLinkMetadata> = {
  encode(message: RichLinkMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.richLinkType !== 0) {
      writer.uint32(16).int32(message.richLinkType);
    }
    if (message.driveLinkData !== undefined) {
      DriveLinkData.encode(message.driveLinkData, writer.uint32(26).fork()).join();
    }
    if (message.chatSpaceLinkData !== undefined) {
      ChatSpaceLinkData.encode(message.chatSpaceLinkData, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RichLinkMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRichLinkMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.richLinkType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.driveLinkData = DriveLinkData.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.chatSpaceLinkData = ChatSpaceLinkData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RichLinkMetadata {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      richLinkType: isSet(object.richLinkType) ? richLinkMetadata_RichLinkTypeFromJSON(object.richLinkType) : 0,
      driveLinkData: isSet(object.driveLinkData) ? DriveLinkData.fromJSON(object.driveLinkData) : undefined,
      chatSpaceLinkData: isSet(object.chatSpaceLinkData)
        ? ChatSpaceLinkData.fromJSON(object.chatSpaceLinkData)
        : undefined,
    };
  },

  toJSON(message: RichLinkMetadata): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.richLinkType !== 0) {
      obj.richLinkType = richLinkMetadata_RichLinkTypeToJSON(message.richLinkType);
    }
    if (message.driveLinkData !== undefined) {
      obj.driveLinkData = DriveLinkData.toJSON(message.driveLinkData);
    }
    if (message.chatSpaceLinkData !== undefined) {
      obj.chatSpaceLinkData = ChatSpaceLinkData.toJSON(message.chatSpaceLinkData);
    }
    return obj;
  },

  create(base?: DeepPartial<RichLinkMetadata>): RichLinkMetadata {
    return RichLinkMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RichLinkMetadata>): RichLinkMetadata {
    const message = createBaseRichLinkMetadata();
    message.uri = object.uri ?? "";
    message.richLinkType = object.richLinkType ?? 0;
    message.driveLinkData = (object.driveLinkData !== undefined && object.driveLinkData !== null)
      ? DriveLinkData.fromPartial(object.driveLinkData)
      : undefined;
    message.chatSpaceLinkData = (object.chatSpaceLinkData !== undefined && object.chatSpaceLinkData !== null)
      ? ChatSpaceLinkData.fromPartial(object.chatSpaceLinkData)
      : undefined;
    return message;
  },
};

function createBaseDriveLinkData(): DriveLinkData {
  return { driveDataRef: undefined, mimeType: "" };
}

export const DriveLinkData: MessageFns<DriveLinkData> = {
  encode(message: DriveLinkData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.driveDataRef !== undefined) {
      DriveDataRef.encode(message.driveDataRef, writer.uint32(10).fork()).join();
    }
    if (message.mimeType !== "") {
      writer.uint32(18).string(message.mimeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DriveLinkData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDriveLinkData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.driveDataRef = DriveDataRef.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mimeType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DriveLinkData {
    return {
      driveDataRef: isSet(object.driveDataRef) ? DriveDataRef.fromJSON(object.driveDataRef) : undefined,
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
    };
  },

  toJSON(message: DriveLinkData): unknown {
    const obj: any = {};
    if (message.driveDataRef !== undefined) {
      obj.driveDataRef = DriveDataRef.toJSON(message.driveDataRef);
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create(base?: DeepPartial<DriveLinkData>): DriveLinkData {
    return DriveLinkData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DriveLinkData>): DriveLinkData {
    const message = createBaseDriveLinkData();
    message.driveDataRef = (object.driveDataRef !== undefined && object.driveDataRef !== null)
      ? DriveDataRef.fromPartial(object.driveDataRef)
      : undefined;
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseChatSpaceLinkData(): ChatSpaceLinkData {
  return { space: "", thread: "", message: "" };
}

export const ChatSpaceLinkData: MessageFns<ChatSpaceLinkData> = {
  encode(message: ChatSpaceLinkData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.space !== "") {
      writer.uint32(10).string(message.space);
    }
    if (message.thread !== "") {
      writer.uint32(18).string(message.thread);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatSpaceLinkData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatSpaceLinkData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.space = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.thread = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatSpaceLinkData {
    return {
      space: isSet(object.space) ? globalThis.String(object.space) : "",
      thread: isSet(object.thread) ? globalThis.String(object.thread) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ChatSpaceLinkData): unknown {
    const obj: any = {};
    if (message.space !== "") {
      obj.space = message.space;
    }
    if (message.thread !== "") {
      obj.thread = message.thread;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ChatSpaceLinkData>): ChatSpaceLinkData {
    return ChatSpaceLinkData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatSpaceLinkData>): ChatSpaceLinkData {
    const message = createBaseChatSpaceLinkData();
    message.space = object.space ?? "";
    message.thread = object.thread ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
