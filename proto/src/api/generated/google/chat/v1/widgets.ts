// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/widgets.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.chat.v1";

/** A widget is a UI element that presents text and images. */
export interface WidgetMarkup {
  /** Display a text paragraph in this widget. */
  textParagraph?:
    | WidgetMarkup_TextParagraph
    | undefined;
  /** Display an image in this widget. */
  image?:
    | WidgetMarkup_Image
    | undefined;
  /** Display a key value item in this widget. */
  keyValue?:
    | WidgetMarkup_KeyValue
    | undefined;
  /**
   * A list of buttons. Buttons is also `oneof data` and only one of these
   * fields should be set.
   */
  buttons: WidgetMarkup_Button[];
}

/** The set of supported icons. */
export enum WidgetMarkup_Icon {
  ICON_UNSPECIFIED = 0,
  AIRPLANE = 1,
  BOOKMARK = 26,
  BUS = 25,
  CAR = 9,
  CLOCK = 2,
  CONFIRMATION_NUMBER_ICON = 12,
  DOLLAR = 14,
  DESCRIPTION = 27,
  EMAIL = 10,
  EVENT_PERFORMER = 20,
  EVENT_SEAT = 21,
  FLIGHT_ARRIVAL = 16,
  FLIGHT_DEPARTURE = 15,
  HOTEL = 6,
  HOTEL_ROOM_TYPE = 17,
  INVITE = 19,
  MAP_PIN = 3,
  MEMBERSHIP = 24,
  MULTIPLE_PEOPLE = 18,
  OFFER = 30,
  PERSON = 11,
  PHONE = 13,
  RESTAURANT_ICON = 7,
  SHOPPING_CART = 8,
  STAR = 5,
  STORE = 22,
  TICKET = 4,
  TRAIN = 23,
  VIDEO_CAMERA = 28,
  VIDEO_PLAY = 29,
  UNRECOGNIZED = -1,
}

export function widgetMarkup_IconFromJSON(object: any): WidgetMarkup_Icon {
  switch (object) {
    case 0:
    case "ICON_UNSPECIFIED":
      return WidgetMarkup_Icon.ICON_UNSPECIFIED;
    case 1:
    case "AIRPLANE":
      return WidgetMarkup_Icon.AIRPLANE;
    case 26:
    case "BOOKMARK":
      return WidgetMarkup_Icon.BOOKMARK;
    case 25:
    case "BUS":
      return WidgetMarkup_Icon.BUS;
    case 9:
    case "CAR":
      return WidgetMarkup_Icon.CAR;
    case 2:
    case "CLOCK":
      return WidgetMarkup_Icon.CLOCK;
    case 12:
    case "CONFIRMATION_NUMBER_ICON":
      return WidgetMarkup_Icon.CONFIRMATION_NUMBER_ICON;
    case 14:
    case "DOLLAR":
      return WidgetMarkup_Icon.DOLLAR;
    case 27:
    case "DESCRIPTION":
      return WidgetMarkup_Icon.DESCRIPTION;
    case 10:
    case "EMAIL":
      return WidgetMarkup_Icon.EMAIL;
    case 20:
    case "EVENT_PERFORMER":
      return WidgetMarkup_Icon.EVENT_PERFORMER;
    case 21:
    case "EVENT_SEAT":
      return WidgetMarkup_Icon.EVENT_SEAT;
    case 16:
    case "FLIGHT_ARRIVAL":
      return WidgetMarkup_Icon.FLIGHT_ARRIVAL;
    case 15:
    case "FLIGHT_DEPARTURE":
      return WidgetMarkup_Icon.FLIGHT_DEPARTURE;
    case 6:
    case "HOTEL":
      return WidgetMarkup_Icon.HOTEL;
    case 17:
    case "HOTEL_ROOM_TYPE":
      return WidgetMarkup_Icon.HOTEL_ROOM_TYPE;
    case 19:
    case "INVITE":
      return WidgetMarkup_Icon.INVITE;
    case 3:
    case "MAP_PIN":
      return WidgetMarkup_Icon.MAP_PIN;
    case 24:
    case "MEMBERSHIP":
      return WidgetMarkup_Icon.MEMBERSHIP;
    case 18:
    case "MULTIPLE_PEOPLE":
      return WidgetMarkup_Icon.MULTIPLE_PEOPLE;
    case 30:
    case "OFFER":
      return WidgetMarkup_Icon.OFFER;
    case 11:
    case "PERSON":
      return WidgetMarkup_Icon.PERSON;
    case 13:
    case "PHONE":
      return WidgetMarkup_Icon.PHONE;
    case 7:
    case "RESTAURANT_ICON":
      return WidgetMarkup_Icon.RESTAURANT_ICON;
    case 8:
    case "SHOPPING_CART":
      return WidgetMarkup_Icon.SHOPPING_CART;
    case 5:
    case "STAR":
      return WidgetMarkup_Icon.STAR;
    case 22:
    case "STORE":
      return WidgetMarkup_Icon.STORE;
    case 4:
    case "TICKET":
      return WidgetMarkup_Icon.TICKET;
    case 23:
    case "TRAIN":
      return WidgetMarkup_Icon.TRAIN;
    case 28:
    case "VIDEO_CAMERA":
      return WidgetMarkup_Icon.VIDEO_CAMERA;
    case 29:
    case "VIDEO_PLAY":
      return WidgetMarkup_Icon.VIDEO_PLAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WidgetMarkup_Icon.UNRECOGNIZED;
  }
}

export function widgetMarkup_IconToJSON(object: WidgetMarkup_Icon): string {
  switch (object) {
    case WidgetMarkup_Icon.ICON_UNSPECIFIED:
      return "ICON_UNSPECIFIED";
    case WidgetMarkup_Icon.AIRPLANE:
      return "AIRPLANE";
    case WidgetMarkup_Icon.BOOKMARK:
      return "BOOKMARK";
    case WidgetMarkup_Icon.BUS:
      return "BUS";
    case WidgetMarkup_Icon.CAR:
      return "CAR";
    case WidgetMarkup_Icon.CLOCK:
      return "CLOCK";
    case WidgetMarkup_Icon.CONFIRMATION_NUMBER_ICON:
      return "CONFIRMATION_NUMBER_ICON";
    case WidgetMarkup_Icon.DOLLAR:
      return "DOLLAR";
    case WidgetMarkup_Icon.DESCRIPTION:
      return "DESCRIPTION";
    case WidgetMarkup_Icon.EMAIL:
      return "EMAIL";
    case WidgetMarkup_Icon.EVENT_PERFORMER:
      return "EVENT_PERFORMER";
    case WidgetMarkup_Icon.EVENT_SEAT:
      return "EVENT_SEAT";
    case WidgetMarkup_Icon.FLIGHT_ARRIVAL:
      return "FLIGHT_ARRIVAL";
    case WidgetMarkup_Icon.FLIGHT_DEPARTURE:
      return "FLIGHT_DEPARTURE";
    case WidgetMarkup_Icon.HOTEL:
      return "HOTEL";
    case WidgetMarkup_Icon.HOTEL_ROOM_TYPE:
      return "HOTEL_ROOM_TYPE";
    case WidgetMarkup_Icon.INVITE:
      return "INVITE";
    case WidgetMarkup_Icon.MAP_PIN:
      return "MAP_PIN";
    case WidgetMarkup_Icon.MEMBERSHIP:
      return "MEMBERSHIP";
    case WidgetMarkup_Icon.MULTIPLE_PEOPLE:
      return "MULTIPLE_PEOPLE";
    case WidgetMarkup_Icon.OFFER:
      return "OFFER";
    case WidgetMarkup_Icon.PERSON:
      return "PERSON";
    case WidgetMarkup_Icon.PHONE:
      return "PHONE";
    case WidgetMarkup_Icon.RESTAURANT_ICON:
      return "RESTAURANT_ICON";
    case WidgetMarkup_Icon.SHOPPING_CART:
      return "SHOPPING_CART";
    case WidgetMarkup_Icon.STAR:
      return "STAR";
    case WidgetMarkup_Icon.STORE:
      return "STORE";
    case WidgetMarkup_Icon.TICKET:
      return "TICKET";
    case WidgetMarkup_Icon.TRAIN:
      return "TRAIN";
    case WidgetMarkup_Icon.VIDEO_CAMERA:
      return "VIDEO_CAMERA";
    case WidgetMarkup_Icon.VIDEO_PLAY:
      return "VIDEO_PLAY";
    case WidgetMarkup_Icon.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A paragraph of text. Formatted text supported. For more information
 * about formatting text, see
 * [Formatting text in Google Chat
 * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 * and
 * [Formatting
 * text in Google Workspace
 * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
export interface WidgetMarkup_TextParagraph {
  text: string;
}

/** A button. Can be a text button or an image button. */
export interface WidgetMarkup_Button {
  /** A button with text and `onclick` action. */
  textButton?:
    | WidgetMarkup_TextButton
    | undefined;
  /** A button with image and `onclick` action. */
  imageButton?: WidgetMarkup_ImageButton | undefined;
}

/** A button with text and `onclick` action. */
export interface WidgetMarkup_TextButton {
  /** The text of the button. */
  text: string;
  /** The `onclick` action of the button. */
  onClick: WidgetMarkup_OnClick | undefined;
}

/**
 * A UI element contains a key (label) and a value (content). This
 * element can also contain some actions such as `onclick` button.
 */
export interface WidgetMarkup_KeyValue {
  /**
   * An enum value that's replaced by the Chat API with the
   * corresponding icon image.
   */
  icon?:
    | WidgetMarkup_Icon
    | undefined;
  /** The icon specified by a URL. */
  iconUrl?:
    | string
    | undefined;
  /**
   * The text of the top label. Formatted text supported. For more information
   * about formatting text, see
   * [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   */
  topLabel: string;
  /**
   * The text of the content. Formatted text supported and always required.
   * For more information
   * about formatting text, see
   * [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   */
  content: string;
  /** If the content should be multiline. */
  contentMultiline: boolean;
  /**
   * The text of the bottom label. Formatted text supported. For more
   * information about formatting text, see [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   */
  bottomLabel: string;
  /**
   * The `onclick` action. Only the top label, bottom label, and content
   * region are clickable.
   */
  onClick:
    | WidgetMarkup_OnClick
    | undefined;
  /** A button that can be clicked to trigger an action. */
  button?: WidgetMarkup_Button | undefined;
}

/** An image that's specified by a URL and can have an `onclick` action. */
export interface WidgetMarkup_Image {
  /** The URL of the image. */
  imageUrl: string;
  /** The `onclick` action. */
  onClick:
    | WidgetMarkup_OnClick
    | undefined;
  /**
   * The aspect ratio of this image (width and height). This field lets you
   * reserve the right height for the image while waiting for it to load.
   * It's not meant to override the built-in aspect ratio of the image.
   * If unset, the server fills it by prefetching the image.
   */
  aspectRatio: number;
}

/** An image button with an `onclick` action. */
export interface WidgetMarkup_ImageButton {
  /**
   * The icon specified by an `enum` that indices to an icon provided by
   * Chat API.
   */
  icon?:
    | WidgetMarkup_Icon
    | undefined;
  /** The icon specified by a URL. */
  iconUrl?:
    | string
    | undefined;
  /** The `onclick` action. */
  onClick:
    | WidgetMarkup_OnClick
    | undefined;
  /**
   * The name of this `image_button` that's used for accessibility.
   * Default value is provided if this name isn't specified.
   */
  name: string;
}

/** An `onclick` action (for example, open a link). */
export interface WidgetMarkup_OnClick {
  /** A form action is triggered by this `onclick` action if specified. */
  action?:
    | WidgetMarkup_FormAction
    | undefined;
  /** This `onclick` action triggers an open link action if specified. */
  openLink?: WidgetMarkup_OpenLink | undefined;
}

/** A link that opens a new window. */
export interface WidgetMarkup_OpenLink {
  /** The URL to open. */
  url: string;
}

/**
 * A form action describes the behavior when the form is submitted.
 * For example, you can invoke Apps Script to handle the form.
 */
export interface WidgetMarkup_FormAction {
  /**
   * The method name is used to identify which part of the form triggered the
   * form submission. This information is echoed back to the Chat app as part
   * of the card click event. You can use the same method name for several
   * elements that trigger a common behavior.
   */
  actionMethodName: string;
  /** List of action parameters. */
  parameters: WidgetMarkup_FormAction_ActionParameter[];
}

/**
 * List of string parameters to supply when the action method is invoked.
 * For example, consider three snooze buttons: snooze now, snooze one day,
 * snooze next week. You might use `action method = snooze()`, passing the
 * snooze type and snooze time in the list of string parameters.
 */
export interface WidgetMarkup_FormAction_ActionParameter {
  /** The name of the parameter for the action script. */
  key: string;
  /** The value of the parameter. */
  value: string;
}

function createBaseWidgetMarkup(): WidgetMarkup {
  return { textParagraph: undefined, image: undefined, keyValue: undefined, buttons: [] };
}

export const WidgetMarkup: MessageFns<WidgetMarkup> = {
  encode(message: WidgetMarkup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textParagraph !== undefined) {
      WidgetMarkup_TextParagraph.encode(message.textParagraph, writer.uint32(10).fork()).join();
    }
    if (message.image !== undefined) {
      WidgetMarkup_Image.encode(message.image, writer.uint32(18).fork()).join();
    }
    if (message.keyValue !== undefined) {
      WidgetMarkup_KeyValue.encode(message.keyValue, writer.uint32(26).fork()).join();
    }
    for (const v of message.buttons) {
      WidgetMarkup_Button.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.textParagraph = WidgetMarkup_TextParagraph.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.image = WidgetMarkup_Image.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyValue = WidgetMarkup_KeyValue.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.buttons.push(WidgetMarkup_Button.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup {
    return {
      textParagraph: isSet(object.textParagraph)
        ? WidgetMarkup_TextParagraph.fromJSON(object.textParagraph)
        : undefined,
      image: isSet(object.image) ? WidgetMarkup_Image.fromJSON(object.image) : undefined,
      keyValue: isSet(object.keyValue) ? WidgetMarkup_KeyValue.fromJSON(object.keyValue) : undefined,
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => WidgetMarkup_Button.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WidgetMarkup): unknown {
    const obj: any = {};
    if (message.textParagraph !== undefined) {
      obj.textParagraph = WidgetMarkup_TextParagraph.toJSON(message.textParagraph);
    }
    if (message.image !== undefined) {
      obj.image = WidgetMarkup_Image.toJSON(message.image);
    }
    if (message.keyValue !== undefined) {
      obj.keyValue = WidgetMarkup_KeyValue.toJSON(message.keyValue);
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => WidgetMarkup_Button.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup>): WidgetMarkup {
    return WidgetMarkup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup>): WidgetMarkup {
    const message = createBaseWidgetMarkup();
    message.textParagraph = (object.textParagraph !== undefined && object.textParagraph !== null)
      ? WidgetMarkup_TextParagraph.fromPartial(object.textParagraph)
      : undefined;
    message.image = (object.image !== undefined && object.image !== null)
      ? WidgetMarkup_Image.fromPartial(object.image)
      : undefined;
    message.keyValue = (object.keyValue !== undefined && object.keyValue !== null)
      ? WidgetMarkup_KeyValue.fromPartial(object.keyValue)
      : undefined;
    message.buttons = object.buttons?.map((e) => WidgetMarkup_Button.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWidgetMarkup_TextParagraph(): WidgetMarkup_TextParagraph {
  return { text: "" };
}

export const WidgetMarkup_TextParagraph: MessageFns<WidgetMarkup_TextParagraph> = {
  encode(message: WidgetMarkup_TextParagraph, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_TextParagraph {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_TextParagraph();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_TextParagraph {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: WidgetMarkup_TextParagraph): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_TextParagraph>): WidgetMarkup_TextParagraph {
    return WidgetMarkup_TextParagraph.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_TextParagraph>): WidgetMarkup_TextParagraph {
    const message = createBaseWidgetMarkup_TextParagraph();
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseWidgetMarkup_Button(): WidgetMarkup_Button {
  return { textButton: undefined, imageButton: undefined };
}

export const WidgetMarkup_Button: MessageFns<WidgetMarkup_Button> = {
  encode(message: WidgetMarkup_Button, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textButton !== undefined) {
      WidgetMarkup_TextButton.encode(message.textButton, writer.uint32(10).fork()).join();
    }
    if (message.imageButton !== undefined) {
      WidgetMarkup_ImageButton.encode(message.imageButton, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_Button {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_Button();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.textButton = WidgetMarkup_TextButton.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.imageButton = WidgetMarkup_ImageButton.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_Button {
    return {
      textButton: isSet(object.textButton) ? WidgetMarkup_TextButton.fromJSON(object.textButton) : undefined,
      imageButton: isSet(object.imageButton) ? WidgetMarkup_ImageButton.fromJSON(object.imageButton) : undefined,
    };
  },

  toJSON(message: WidgetMarkup_Button): unknown {
    const obj: any = {};
    if (message.textButton !== undefined) {
      obj.textButton = WidgetMarkup_TextButton.toJSON(message.textButton);
    }
    if (message.imageButton !== undefined) {
      obj.imageButton = WidgetMarkup_ImageButton.toJSON(message.imageButton);
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_Button>): WidgetMarkup_Button {
    return WidgetMarkup_Button.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_Button>): WidgetMarkup_Button {
    const message = createBaseWidgetMarkup_Button();
    message.textButton = (object.textButton !== undefined && object.textButton !== null)
      ? WidgetMarkup_TextButton.fromPartial(object.textButton)
      : undefined;
    message.imageButton = (object.imageButton !== undefined && object.imageButton !== null)
      ? WidgetMarkup_ImageButton.fromPartial(object.imageButton)
      : undefined;
    return message;
  },
};

function createBaseWidgetMarkup_TextButton(): WidgetMarkup_TextButton {
  return { text: "", onClick: undefined };
}

export const WidgetMarkup_TextButton: MessageFns<WidgetMarkup_TextButton> = {
  encode(message: WidgetMarkup_TextButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.onClick !== undefined) {
      WidgetMarkup_OnClick.encode(message.onClick, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_TextButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_TextButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.onClick = WidgetMarkup_OnClick.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_TextButton {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      onClick: isSet(object.onClick) ? WidgetMarkup_OnClick.fromJSON(object.onClick) : undefined,
    };
  },

  toJSON(message: WidgetMarkup_TextButton): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.onClick !== undefined) {
      obj.onClick = WidgetMarkup_OnClick.toJSON(message.onClick);
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_TextButton>): WidgetMarkup_TextButton {
    return WidgetMarkup_TextButton.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_TextButton>): WidgetMarkup_TextButton {
    const message = createBaseWidgetMarkup_TextButton();
    message.text = object.text ?? "";
    message.onClick = (object.onClick !== undefined && object.onClick !== null)
      ? WidgetMarkup_OnClick.fromPartial(object.onClick)
      : undefined;
    return message;
  },
};

function createBaseWidgetMarkup_KeyValue(): WidgetMarkup_KeyValue {
  return {
    icon: undefined,
    iconUrl: undefined,
    topLabel: "",
    content: "",
    contentMultiline: false,
    bottomLabel: "",
    onClick: undefined,
    button: undefined,
  };
}

export const WidgetMarkup_KeyValue: MessageFns<WidgetMarkup_KeyValue> = {
  encode(message: WidgetMarkup_KeyValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      writer.uint32(8).int32(message.icon);
    }
    if (message.iconUrl !== undefined) {
      writer.uint32(18).string(message.iconUrl);
    }
    if (message.topLabel !== "") {
      writer.uint32(26).string(message.topLabel);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.contentMultiline !== false) {
      writer.uint32(72).bool(message.contentMultiline);
    }
    if (message.bottomLabel !== "") {
      writer.uint32(42).string(message.bottomLabel);
    }
    if (message.onClick !== undefined) {
      WidgetMarkup_OnClick.encode(message.onClick, writer.uint32(50).fork()).join();
    }
    if (message.button !== undefined) {
      WidgetMarkup_Button.encode(message.button, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_KeyValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_KeyValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.icon = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.topLabel = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.contentMultiline = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bottomLabel = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.onClick = WidgetMarkup_OnClick.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.button = WidgetMarkup_Button.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_KeyValue {
    return {
      icon: isSet(object.icon) ? widgetMarkup_IconFromJSON(object.icon) : undefined,
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
      topLabel: isSet(object.topLabel) ? globalThis.String(object.topLabel) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      contentMultiline: isSet(object.contentMultiline) ? globalThis.Boolean(object.contentMultiline) : false,
      bottomLabel: isSet(object.bottomLabel) ? globalThis.String(object.bottomLabel) : "",
      onClick: isSet(object.onClick) ? WidgetMarkup_OnClick.fromJSON(object.onClick) : undefined,
      button: isSet(object.button) ? WidgetMarkup_Button.fromJSON(object.button) : undefined,
    };
  },

  toJSON(message: WidgetMarkup_KeyValue): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = widgetMarkup_IconToJSON(message.icon);
    }
    if (message.iconUrl !== undefined) {
      obj.iconUrl = message.iconUrl;
    }
    if (message.topLabel !== "") {
      obj.topLabel = message.topLabel;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.contentMultiline !== false) {
      obj.contentMultiline = message.contentMultiline;
    }
    if (message.bottomLabel !== "") {
      obj.bottomLabel = message.bottomLabel;
    }
    if (message.onClick !== undefined) {
      obj.onClick = WidgetMarkup_OnClick.toJSON(message.onClick);
    }
    if (message.button !== undefined) {
      obj.button = WidgetMarkup_Button.toJSON(message.button);
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_KeyValue>): WidgetMarkup_KeyValue {
    return WidgetMarkup_KeyValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_KeyValue>): WidgetMarkup_KeyValue {
    const message = createBaseWidgetMarkup_KeyValue();
    message.icon = object.icon ?? undefined;
    message.iconUrl = object.iconUrl ?? undefined;
    message.topLabel = object.topLabel ?? "";
    message.content = object.content ?? "";
    message.contentMultiline = object.contentMultiline ?? false;
    message.bottomLabel = object.bottomLabel ?? "";
    message.onClick = (object.onClick !== undefined && object.onClick !== null)
      ? WidgetMarkup_OnClick.fromPartial(object.onClick)
      : undefined;
    message.button = (object.button !== undefined && object.button !== null)
      ? WidgetMarkup_Button.fromPartial(object.button)
      : undefined;
    return message;
  },
};

function createBaseWidgetMarkup_Image(): WidgetMarkup_Image {
  return { imageUrl: "", onClick: undefined, aspectRatio: 0 };
}

export const WidgetMarkup_Image: MessageFns<WidgetMarkup_Image> = {
  encode(message: WidgetMarkup_Image, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageUrl !== "") {
      writer.uint32(10).string(message.imageUrl);
    }
    if (message.onClick !== undefined) {
      WidgetMarkup_OnClick.encode(message.onClick, writer.uint32(18).fork()).join();
    }
    if (message.aspectRatio !== 0) {
      writer.uint32(25).double(message.aspectRatio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_Image {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_Image();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.onClick = WidgetMarkup_OnClick.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.aspectRatio = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_Image {
    return {
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      onClick: isSet(object.onClick) ? WidgetMarkup_OnClick.fromJSON(object.onClick) : undefined,
      aspectRatio: isSet(object.aspectRatio) ? globalThis.Number(object.aspectRatio) : 0,
    };
  },

  toJSON(message: WidgetMarkup_Image): unknown {
    const obj: any = {};
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.onClick !== undefined) {
      obj.onClick = WidgetMarkup_OnClick.toJSON(message.onClick);
    }
    if (message.aspectRatio !== 0) {
      obj.aspectRatio = message.aspectRatio;
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_Image>): WidgetMarkup_Image {
    return WidgetMarkup_Image.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_Image>): WidgetMarkup_Image {
    const message = createBaseWidgetMarkup_Image();
    message.imageUrl = object.imageUrl ?? "";
    message.onClick = (object.onClick !== undefined && object.onClick !== null)
      ? WidgetMarkup_OnClick.fromPartial(object.onClick)
      : undefined;
    message.aspectRatio = object.aspectRatio ?? 0;
    return message;
  },
};

function createBaseWidgetMarkup_ImageButton(): WidgetMarkup_ImageButton {
  return { icon: undefined, iconUrl: undefined, onClick: undefined, name: "" };
}

export const WidgetMarkup_ImageButton: MessageFns<WidgetMarkup_ImageButton> = {
  encode(message: WidgetMarkup_ImageButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.icon !== undefined) {
      writer.uint32(8).int32(message.icon);
    }
    if (message.iconUrl !== undefined) {
      writer.uint32(26).string(message.iconUrl);
    }
    if (message.onClick !== undefined) {
      WidgetMarkup_OnClick.encode(message.onClick, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_ImageButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_ImageButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.icon = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.iconUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.onClick = WidgetMarkup_OnClick.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_ImageButton {
    return {
      icon: isSet(object.icon) ? widgetMarkup_IconFromJSON(object.icon) : undefined,
      iconUrl: isSet(object.iconUrl) ? globalThis.String(object.iconUrl) : undefined,
      onClick: isSet(object.onClick) ? WidgetMarkup_OnClick.fromJSON(object.onClick) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: WidgetMarkup_ImageButton): unknown {
    const obj: any = {};
    if (message.icon !== undefined) {
      obj.icon = widgetMarkup_IconToJSON(message.icon);
    }
    if (message.iconUrl !== undefined) {
      obj.iconUrl = message.iconUrl;
    }
    if (message.onClick !== undefined) {
      obj.onClick = WidgetMarkup_OnClick.toJSON(message.onClick);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_ImageButton>): WidgetMarkup_ImageButton {
    return WidgetMarkup_ImageButton.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_ImageButton>): WidgetMarkup_ImageButton {
    const message = createBaseWidgetMarkup_ImageButton();
    message.icon = object.icon ?? undefined;
    message.iconUrl = object.iconUrl ?? undefined;
    message.onClick = (object.onClick !== undefined && object.onClick !== null)
      ? WidgetMarkup_OnClick.fromPartial(object.onClick)
      : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseWidgetMarkup_OnClick(): WidgetMarkup_OnClick {
  return { action: undefined, openLink: undefined };
}

export const WidgetMarkup_OnClick: MessageFns<WidgetMarkup_OnClick> = {
  encode(message: WidgetMarkup_OnClick, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.action !== undefined) {
      WidgetMarkup_FormAction.encode(message.action, writer.uint32(10).fork()).join();
    }
    if (message.openLink !== undefined) {
      WidgetMarkup_OpenLink.encode(message.openLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_OnClick {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_OnClick();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = WidgetMarkup_FormAction.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.openLink = WidgetMarkup_OpenLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_OnClick {
    return {
      action: isSet(object.action) ? WidgetMarkup_FormAction.fromJSON(object.action) : undefined,
      openLink: isSet(object.openLink) ? WidgetMarkup_OpenLink.fromJSON(object.openLink) : undefined,
    };
  },

  toJSON(message: WidgetMarkup_OnClick): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = WidgetMarkup_FormAction.toJSON(message.action);
    }
    if (message.openLink !== undefined) {
      obj.openLink = WidgetMarkup_OpenLink.toJSON(message.openLink);
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_OnClick>): WidgetMarkup_OnClick {
    return WidgetMarkup_OnClick.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_OnClick>): WidgetMarkup_OnClick {
    const message = createBaseWidgetMarkup_OnClick();
    message.action = (object.action !== undefined && object.action !== null)
      ? WidgetMarkup_FormAction.fromPartial(object.action)
      : undefined;
    message.openLink = (object.openLink !== undefined && object.openLink !== null)
      ? WidgetMarkup_OpenLink.fromPartial(object.openLink)
      : undefined;
    return message;
  },
};

function createBaseWidgetMarkup_OpenLink(): WidgetMarkup_OpenLink {
  return { url: "" };
}

export const WidgetMarkup_OpenLink: MessageFns<WidgetMarkup_OpenLink> = {
  encode(message: WidgetMarkup_OpenLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_OpenLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_OpenLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_OpenLink {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: WidgetMarkup_OpenLink): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_OpenLink>): WidgetMarkup_OpenLink {
    return WidgetMarkup_OpenLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_OpenLink>): WidgetMarkup_OpenLink {
    const message = createBaseWidgetMarkup_OpenLink();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseWidgetMarkup_FormAction(): WidgetMarkup_FormAction {
  return { actionMethodName: "", parameters: [] };
}

export const WidgetMarkup_FormAction: MessageFns<WidgetMarkup_FormAction> = {
  encode(message: WidgetMarkup_FormAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionMethodName !== "") {
      writer.uint32(10).string(message.actionMethodName);
    }
    for (const v of message.parameters) {
      WidgetMarkup_FormAction_ActionParameter.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_FormAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_FormAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actionMethodName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parameters.push(WidgetMarkup_FormAction_ActionParameter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_FormAction {
    return {
      actionMethodName: isSet(object.actionMethodName) ? globalThis.String(object.actionMethodName) : "",
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => WidgetMarkup_FormAction_ActionParameter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WidgetMarkup_FormAction): unknown {
    const obj: any = {};
    if (message.actionMethodName !== "") {
      obj.actionMethodName = message.actionMethodName;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => WidgetMarkup_FormAction_ActionParameter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_FormAction>): WidgetMarkup_FormAction {
    return WidgetMarkup_FormAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_FormAction>): WidgetMarkup_FormAction {
    const message = createBaseWidgetMarkup_FormAction();
    message.actionMethodName = object.actionMethodName ?? "";
    message.parameters = object.parameters?.map((e) => WidgetMarkup_FormAction_ActionParameter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWidgetMarkup_FormAction_ActionParameter(): WidgetMarkup_FormAction_ActionParameter {
  return { key: "", value: "" };
}

export const WidgetMarkup_FormAction_ActionParameter: MessageFns<WidgetMarkup_FormAction_ActionParameter> = {
  encode(message: WidgetMarkup_FormAction_ActionParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WidgetMarkup_FormAction_ActionParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWidgetMarkup_FormAction_ActionParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WidgetMarkup_FormAction_ActionParameter {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WidgetMarkup_FormAction_ActionParameter): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<WidgetMarkup_FormAction_ActionParameter>): WidgetMarkup_FormAction_ActionParameter {
    return WidgetMarkup_FormAction_ActionParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WidgetMarkup_FormAction_ActionParameter>): WidgetMarkup_FormAction_ActionParameter {
    const message = createBaseWidgetMarkup_FormAction_ActionParameter();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
