// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/chat_service.proto

/* eslint-disable */
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../protobuf/empty.js";
import { Attachment, GetAttachmentRequest, UploadAttachmentRequest, UploadAttachmentResponse } from "./attachment.js";
import {
  CreateMembershipRequest,
  DeleteMembershipRequest,
  GetMembershipRequest,
  ListMembershipsRequest,
  ListMembershipsResponse,
  Membership,
  UpdateMembershipRequest,
} from "./membership.js";
import {
  CreateMessageRequest,
  DeleteMessageRequest,
  GetMessageRequest,
  ListMessagesRequest,
  ListMessagesResponse,
  Message,
  UpdateMessageRequest,
} from "./message.js";
import {
  CreateReactionRequest,
  DeleteReactionRequest,
  ListReactionsRequest,
  ListReactionsResponse,
  Reaction,
} from "./reaction.js";
import {
  CompleteImportSpaceRequest,
  CompleteImportSpaceResponse,
  CreateSpaceRequest,
  DeleteSpaceRequest,
  FindDirectMessageRequest,
  GetSpaceRequest,
  ListSpacesRequest,
  ListSpacesResponse,
  SearchSpacesRequest,
  SearchSpacesResponse,
  Space,
  UpdateSpaceRequest,
} from "./space.js";
import { GetSpaceEventRequest, ListSpaceEventsRequest, ListSpaceEventsResponse, SpaceEvent } from "./space_event.js";
import { GetSpaceReadStateRequest, SpaceReadState, UpdateSpaceReadStateRequest } from "./space_read_state.js";
import { SetUpSpaceRequest } from "./space_setup.js";
import { GetThreadReadStateRequest, ThreadReadState } from "./thread_read_state.js";

export const protobufPackage = "google.chat.v1";

/**
 * Enables developers to build Chat apps and
 * integrations on Google Chat Platform.
 */
export type ChatServiceDefinition = typeof ChatServiceDefinition;
export const ChatServiceDefinition = {
  name: "ChatService",
  fullName: "google.chat.v1.ChatService",
  methods: {
    /**
     * Creates a message in a Google Chat space. The maximum message size,
     * including text and cards, is 32,000 bytes. For an example, see [Send a
     * message](https://developers.google.com/workspace/chat/create-messages).
     *
     * Calling this method requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize)
     * and supports the following authentication types:
     *
     * - For text messages, user authentication or app authentication are
     * supported.
     * - For card messages, only app authentication is supported. (Only Chat apps
     * can create card messages.)
     */
    createMessage: {
      name: "CreateMessage",
      requestType: CreateMessageRequest,
      requestStream: false,
      responseType: Message,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              44,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              41,
              58,
              7,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists messages in a space that the caller is a member of, including
     * messages from blocked members and spaces. For an example, see
     * [List messages](/chat/api/guides/v1/messages/list).
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    listMessages: {
      name: "ListMessages",
      requestType: ListMessagesRequest,
      requestStream: false,
      responseType: ListMessagesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists memberships in a space. For an example, see [List users and Google
     * Chat apps in a
     * space](https://developers.google.com/workspace/chat/list-members). Listing
     * memberships with [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * lists memberships in spaces that the Chat app has
     * access to, but excludes Chat app memberships,
     * including its own. Listing memberships with
     * [User
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
     * lists memberships in spaces that the authenticated user has access to.
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    listMemberships: {
      name: "ListMemberships",
      requestType: ListMembershipsRequest,
      requestStream: false,
      responseType: ListMembershipsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns details about a membership. For an example, see
     * [Get details about a user's or Google Chat app's
     * membership](https://developers.google.com/workspace/chat/get-members).
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    getMembership: {
      name: "GetMembership",
      requestType: GetMembershipRequest,
      requestStream: false,
      responseType: Membership,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns details about a message.
     * For an example, see [Get details about a
     * message](https://developers.google.com/workspace/chat/get-messages).
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     *
     * Note: Might return a message from a blocked member or space.
     */
    getMessage: {
      name: "GetMessage",
      requestType: GetMessageRequest,
      requestStream: false,
      responseType: Message,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a message. There's a difference between the `patch` and `update`
     * methods. The `patch`
     * method uses a `patch` request while the `update` method uses a `put`
     * request. We recommend using the `patch` method. For an example, see
     * [Update a
     * message](https://developers.google.com/workspace/chat/update-messages).
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     * When using app authentication, requests can only update messages
     * created by the calling Chat app.
     */
    updateMessage: {
      name: "UpdateMessage",
      requestType: UpdateMessageRequest,
      requestStream: false,
      responseType: Message,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 109, 101, 115, 115, 97, 103, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              7,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              90,
              49,
              58,
              7,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              50,
              38,
              47,
              118,
              49,
              47,
              123,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              125,
              26,
              38,
              47,
              118,
              49,
              47,
              123,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a message.
     * For an example, see [Delete a
     * message](https://developers.google.com/workspace/chat/delete-messages).
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     * When using app authentication, requests can only delete messages
     * created by the calling Chat app.
     */
    deleteMessage: {
      name: "DeleteMessage",
      requestType: DeleteMessageRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              32,
              42,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the metadata of a message attachment. The attachment data is fetched
     * using the [media
     * API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
     * For an example, see
     * [Get metadata about a message
     * attachment](https://developers.google.com/workspace/chat/get-media-attachments).
     * Requires [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
     */
    getAttachment: {
      name: "GetAttachment",
      requestType: GetAttachmentRequest,
      requestStream: false,
      responseType: Attachment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Uploads an attachment. For an example, see
     * [Upload media as a file
     * attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
     * Requires user
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     *
     * You can upload attachments up to 200 MB. Certain file types aren't
     * supported. For details, see [File types blocked by Google
     * Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
     */
    uploadAttachment: {
      name: "UploadAttachment",
      requestType: UploadAttachmentRequest,
      requestStream: false,
      responseType: UploadAttachmentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
              58,
              117,
              112,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Lists spaces the caller is a member of. Group chats and DMs aren't listed
     * until the first message is sent. For an example, see
     * [List
     * spaces](https://developers.google.com/workspace/chat/list-spaces).
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     *
     * Lists spaces visible to the caller or authenticated user. Group chats
     * and DMs aren't listed until the first message is sent.
     *
     * To list all named spaces by Google Workspace organization, use the
     * [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
     * method using Workspace administrator privileges instead.
     */
    listSpaces: {
      name: "ListSpaces",
      requestType: ListSpacesRequest,
      requestStream: false,
      responseType: ListSpacesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([0])],
          578365826: [Buffer.from([12, 18, 10, 47, 118, 49, 47, 115, 112, 97, 99, 101, 115])],
        },
      },
    },
    /**
     * Returns a list of spaces in a Google Workspace organization based on an
     * administrator's search. Requires [user
     * authentication with administrator
     * privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
     * In the request, set `use_admin_access` to `true`.
     */
    searchSpaces: {
      name: "SearchSpaces",
      requestType: SearchSpacesRequest,
      requestStream: false,
      responseType: SearchSpacesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([0])],
          578365826: [
            Buffer.from([19, 18, 17, 47, 118, 49, 47, 115, 112, 97, 99, 101, 115, 58, 115, 101, 97, 114, 99, 104]),
          ],
        },
      },
    },
    /**
     * Returns details about a space. For an example, see
     * [Get details about a
     * space](https://developers.google.com/workspace/chat/get-spaces).
     *
     * Requires
     * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
     * Supports
     * [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
     * and [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    getSpace: {
      name: "GetSpace",
      requestType: GetSpaceRequest,
      requestStream: false,
      responseType: Space,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              21,
              18,
              19,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a named space. Spaces grouped by topics aren't supported. For an
     * example, see [Create a
     * space](https://developers.google.com/workspace/chat/create-spaces).
     *
     *  If you receive the error message `ALREADY_EXISTS` when creating
     *  a space, try a different `displayName`. An existing space within
     *  the Google Workspace organization might already use this display name.
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    createSpace: {
      name: "CreateSpace",
      requestType: CreateSpaceRequest,
      requestStream: false,
      responseType: Space,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([5, 115, 112, 97, 99, 101])],
          578365826: [
            Buffer.from([19, 58, 5, 115, 112, 97, 99, 101, 34, 10, 47, 118, 49, 47, 115, 112, 97, 99, 101, 115]),
          ],
        },
      },
    },
    /**
     * Creates a space and adds specified users to it. The calling user is
     * automatically added to the space, and shouldn't be specified as a
     * membership in the request. For an example, see
     * [Set up a space with initial
     * members](https://developers.google.com/workspace/chat/set-up-spaces).
     *
     * To specify the human members to add, add memberships with the appropriate
     * `membership.member.name`. To add a human user, use `users/{user}`, where
     * `{user}` can be the email address for the user. For users in the same
     * Workspace organization `{user}` can also be the `id` for the person from
     * the People API, or the `id` for the user in the Directory API. For example,
     * if the People API Person profile ID for `user@example.com` is `123456789`,
     * you can add the user to the space by setting the `membership.member.name`
     * to `users/user@example.com` or `users/123456789`.
     *
     * To specify the Google groups to add, add memberships with the
     * appropriate `membership.group_member.name`. To add or invite a Google
     * group, use `groups/{group}`, where `{group}` is the `id` for the group from
     * the Cloud Identity Groups API. For example, you can use [Cloud Identity
     * Groups lookup
     * API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
     * to retrieve the ID `123456789` for group email `group@example.com`, then
     * you can add the group to the space by setting the
     * `membership.group_member.name` to `groups/123456789`. Group email is not
     * supported, and Google groups can only be added as members in named spaces.
     *
     * For a named space or group chat, if the caller blocks, or is blocked
     * by some members, or doesn't have permission to add some members, then
     * those members aren't added to the created space.
     *
     * To create a direct message (DM) between the calling user and another human
     * user, specify exactly one membership to represent the human user. If
     * one user blocks the other, the request fails and the DM isn't created.
     *
     * To create a DM between the calling user and the calling app, set
     * `Space.singleUserBotDm` to `true` and don't specify any memberships. You
     * can only use this method to set up a DM with the calling app. To add the
     * calling app as a member of a space or an existing DM between two human
     * users, see
     * [Invite or add a user or app to a
     * space](https://developers.google.com/workspace/chat/create-members).
     *
     * If a DM already exists between two users, even when one user blocks the
     * other at the time a request is made, then the existing DM is returned.
     *
     * Spaces with threaded replies aren't supported. If you receive the error
     * message `ALREADY_EXISTS` when setting up a space, try a different
     * `displayName`. An existing space within the Google Workspace organization
     * might already use this display name.
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    setUpSpace: {
      name: "SetUpSpace",
      requestType: SetUpSpaceRequest,
      requestStream: false,
      responseType: Space,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              118,
              49,
              47,
              115,
              112,
              97,
              99,
              101,
              115,
              58,
              115,
              101,
              116,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a space. For an example, see
     * [Update a
     * space](https://developers.google.com/workspace/chat/update-spaces).
     *
     * If you're updating the `displayName` field and receive the error message
     * `ALREADY_EXISTS`, try a different display name.. An existing space within
     * the Google Workspace organization might already use this display name.
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    updateSpace: {
      name: "UpdateSpace",
      requestType: UpdateSpaceRequest,
      requestStream: false,
      responseType: Space,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 115, 112, 97, 99, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              34,
              58,
              5,
              115,
              112,
              97,
              99,
              101,
              50,
              25,
              47,
              118,
              49,
              47,
              123,
              115,
              112,
              97,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a named space. Always performs a cascading delete, which means
     * that the space's child resources—like messages posted in the space and
     * memberships in the space—are also deleted. For an example, see
     * [Delete a
     * space](https://developers.google.com/workspace/chat/delete-spaces).
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
     * from a user who has permission to delete the space.
     */
    deleteSpace: {
      name: "DeleteSpace",
      requestType: DeleteSpaceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              21,
              42,
              19,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Completes the
     * [import process](https://developers.google.com/workspace/chat/import-data)
     * for the specified space and makes it visible to users.
     * Requires app authentication and domain-wide delegation. For more
     * information, see [Authorize Google Chat apps to import
     * data](https://developers.google.com/workspace/chat/authorize-import).
     */
    completeImportSpace: {
      name: "CompleteImportSpace",
      requestType: CompleteImportSpaceRequest,
      requestStream: false,
      responseType: CompleteImportSpaceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              73,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the existing direct message with the specified user. If no direct
     * message space is found, returns a `404 NOT_FOUND` error. For an example,
     * see
     * [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
     *
     * With [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
     * returns the direct message space between the specified user and the
     * authenticated user.
     *
     * With [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
     * returns the direct message space between the specified user and the calling
     * Chat app.
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
     * or [app
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
     */
    findDirectMessage: {
      name: "FindDirectMessage",
      requestType: FindDirectMessageRequest,
      requestStream: false,
      responseType: Space,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              30,
              18,
              28,
              47,
              118,
              49,
              47,
              115,
              112,
              97,
              99,
              101,
              115,
              58,
              102,
              105,
              110,
              100,
              68,
              105,
              114,
              101,
              99,
              116,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a human membership or app membership for the calling app. Creating
     * memberships for other apps isn't supported. For an example, see
     * [Invite or add a user or a Google Chat app to a
     * space](https://developers.google.com/workspace/chat/create-members).
     * When creating a membership, if the specified member has their auto-accept
     * policy turned off, then they're invited, and must accept the space
     * invitation before joining. Otherwise, creating a membership adds the member
     * directly to the specified space. Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     *
     * To specify the member to add, set the `membership.member.name` for the
     * human or app member, or set the `membership.group_member.name` for the
     * group member.
     *
     * - To add the calling app to a space or a direct message between two human
     *   users, use `users/app`. Unable to add other
     *   apps to the space.
     *
     * - To add a human user, use `users/{user}`, where `{user}` can be the email
     * address for the user. For users in the same Workspace organization `{user}`
     * can also be the `id` for the person from the People API, or the `id` for
     * the user in the Directory API. For example, if the People API Person
     * profile ID for `user@example.com` is `123456789`, you can add the user to
     * the space by setting the `membership.member.name` to
     * `users/user@example.com` or `users/123456789`.
     *
     * - To add or invite a Google group in a named space, use
     * `groups/{group}`, where `{group}` is the `id` for the group from the Cloud
     * Identity Groups API. For example, you can use [Cloud Identity Groups lookup
     * API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
     * to retrieve the ID `123456789` for group email `group@example.com`, then
     * you can add or invite the group to a named space by setting the
     * `membership.group_member.name` to `groups/123456789`. Group email is not
     * supported, and Google groups can only be added as members in named spaces.
     */
    createMembership: {
      name: "CreateMembership",
      requestType: CreateMembershipRequest,
      requestStream: false,
      responseType: Membership,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 109, 101, 109, 98, 101, 114, 115, 104, 105, 112])],
          578365826: [
            Buffer.from([
              43,
              58,
              10,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              34,
              29,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a membership. For an example, see [Update a user's membership in
     * a space](https://developers.google.com/workspace/chat/update-members).
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    updateMembership: {
      name: "UpdateMembership",
      requestType: UpdateMembershipRequest,
      requestStream: false,
      responseType: Membership,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              10,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              50,
              40,
              47,
              118,
              49,
              47,
              123,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a membership. For an example, see
     * [Remove a user or a Google Chat app from a
     * space](https://developers.google.com/workspace/chat/delete-members).
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    deleteMembership: {
      name: "DeleteMembership",
      requestType: DeleteMembershipRequest,
      requestStream: false,
      responseType: Membership,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              31,
              42,
              29,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a reaction and adds it to a message. Only unicode emojis are
     * supported. For an example, see
     * [Add a reaction to a
     * message](https://developers.google.com/workspace/chat/create-reactions).
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    createReaction: {
      name: "CreateReaction",
      requestType: CreateReactionRequest,
      requestStream: false,
      responseType: Reaction,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 114, 101, 97, 99, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              54,
              58,
              8,
              114,
              101,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists reactions to a message. For an example, see
     * [List reactions for a
     * message](https://developers.google.com/workspace/chat/list-reactions).
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    listReactions: {
      name: "ListReactions",
      requestType: ListReactionsRequest,
      requestStream: false,
      responseType: ListReactionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a reaction to a message. Only unicode emojis are supported.
     * For an example, see
     * [Delete a
     * reaction](https://developers.google.com/workspace/chat/delete-reactions).
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    deleteReaction: {
      name: "DeleteReaction",
      requestType: DeleteReactionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              47,
              42,
              47,
              114,
              101,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns details about a user's read state within a space, used to identify
     * read and unread messages. For an example, see [Get details about a user's
     * space read
     * state](https://developers.google.com/workspace/chat/get-space-read-state).
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    getSpaceReadState: {
      name: "GetSpaceReadState",
      requestType: GetSpaceReadStateRequest,
      requestStream: false,
      responseType: SpaceReadState,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              99,
              101,
              82,
              101,
              97,
              100,
              83,
              116,
              97,
              116,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a user's read state within a space, used to identify read and
     * unread messages. For an example, see [Update a user's space read
     * state](https://developers.google.com/workspace/chat/update-space-read-state).
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    updateSpaceReadState: {
      name: "UpdateSpaceReadState",
      requestType: UpdateSpaceReadStateRequest,
      requestStream: false,
      responseType: SpaceReadState,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              115,
              112,
              97,
              99,
              101,
              95,
              114,
              101,
              97,
              100,
              95,
              115,
              116,
              97,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              16,
              115,
              112,
              97,
              99,
              101,
              95,
              114,
              101,
              97,
              100,
              95,
              115,
              116,
              97,
              116,
              101,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              115,
              112,
              97,
              99,
              101,
              95,
              114,
              101,
              97,
              100,
              95,
              115,
              116,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              99,
              101,
              82,
              101,
              97,
              100,
              83,
              116,
              97,
              116,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns details about a user's read state within a thread, used to identify
     * read and unread messages. For an example, see [Get details about a user's
     * thread read
     * state](https://developers.google.com/workspace/chat/get-thread-read-state).
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     */
    getThreadReadState: {
      name: "GetThreadReadState",
      requestType: GetThreadReadStateRequest,
      requestStream: false,
      responseType: ThreadReadState,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              116,
              104,
              114,
              101,
              97,
              100,
              115,
              47,
              42,
              47,
              116,
              104,
              114,
              101,
              97,
              100,
              82,
              101,
              97,
              100,
              83,
              116,
              97,
              116,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns an event from a Google Chat space. The [event
     * payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
     * contains the most recent version of the resource that changed. For example,
     * if you request an event about a new message but the message was later
     * updated, the server returns the updated `Message` resource in the event
     * payload.
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     * To get an event, the authenticated user must be a member of the space.
     *
     * For an example, see [Get details about an
     * event from a Google Chat
     * space](https://developers.google.com/workspace/chat/get-space-event).
     */
    getSpaceEvent: {
      name: "GetSpaceEvent",
      requestType: GetSpaceEventRequest,
      requestStream: false,
      responseType: SpaceEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              99,
              101,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists events from a Google Chat space. For each event, the
     * [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
     * contains the most recent version of the Chat resource. For example, if you
     * list events about new space members, the server returns `Membership`
     * resources that contain the latest membership details. If new members were
     * removed during the requested period, the event payload contains an empty
     * `Membership` resource.
     *
     * Requires [user
     * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
     * To list events, the authenticated user must be a member of the space.
     *
     * For an example, see [List events from a Google Chat
     * space](https://developers.google.com/workspace/chat/list-space-events).
     */
    listSpaceEvents: {
      name: "ListSpaceEvents",
      requestType: ListSpaceEventsRequest,
      requestStream: false,
      responseType: ListSpaceEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              115,
              112,
              97,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              97,
              99,
              101,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ChatServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a message in a Google Chat space. The maximum message size,
   * including text and cards, is 32,000 bytes. For an example, see [Send a
   * message](https://developers.google.com/workspace/chat/create-messages).
   *
   * Calling this method requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize)
   * and supports the following authentication types:
   *
   * - For text messages, user authentication or app authentication are
   * supported.
   * - For card messages, only app authentication is supported. (Only Chat apps
   * can create card messages.)
   */
  createMessage(request: CreateMessageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Message>>;
  /**
   * Lists messages in a space that the caller is a member of, including
   * messages from blocked members and spaces. For an example, see
   * [List messages](/chat/api/guides/v1/messages/list).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  listMessages(
    request: ListMessagesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMessagesResponse>>;
  /**
   * Lists memberships in a space. For an example, see [List users and Google
   * Chat apps in a
   * space](https://developers.google.com/workspace/chat/list-members). Listing
   * memberships with [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * lists memberships in spaces that the Chat app has
   * access to, but excludes Chat app memberships,
   * including its own. Listing memberships with
   * [User
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * lists memberships in spaces that the authenticated user has access to.
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  listMemberships(
    request: ListMembershipsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMembershipsResponse>>;
  /**
   * Returns details about a membership. For an example, see
   * [Get details about a user's or Google Chat app's
   * membership](https://developers.google.com/workspace/chat/get-members).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getMembership(request: GetMembershipRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Membership>>;
  /**
   * Returns details about a message.
   * For an example, see [Get details about a
   * message](https://developers.google.com/workspace/chat/get-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * Note: Might return a message from a blocked member or space.
   */
  getMessage(request: GetMessageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Message>>;
  /**
   * Updates a message. There's a difference between the `patch` and `update`
   * methods. The `patch`
   * method uses a `patch` request while the `update` method uses a `put`
   * request. We recommend using the `patch` method. For an example, see
   * [Update a
   * message](https://developers.google.com/workspace/chat/update-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * When using app authentication, requests can only update messages
   * created by the calling Chat app.
   */
  updateMessage(request: UpdateMessageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Message>>;
  /**
   * Deletes a message.
   * For an example, see [Delete a
   * message](https://developers.google.com/workspace/chat/delete-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * When using app authentication, requests can only delete messages
   * created by the calling Chat app.
   */
  deleteMessage(request: DeleteMessageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Gets the metadata of a message attachment. The attachment data is fetched
   * using the [media
   * API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
   * For an example, see
   * [Get metadata about a message
   * attachment](https://developers.google.com/workspace/chat/get-media-attachments).
   * Requires [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   */
  getAttachment(request: GetAttachmentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Attachment>>;
  /**
   * Uploads an attachment. For an example, see
   * [Upload media as a file
   * attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
   * Requires user
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * You can upload attachments up to 200 MB. Certain file types aren't
   * supported. For details, see [File types blocked by Google
   * Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
   */
  uploadAttachment(
    request: UploadAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UploadAttachmentResponse>>;
  /**
   * Lists spaces the caller is a member of. Group chats and DMs aren't listed
   * until the first message is sent. For an example, see
   * [List
   * spaces](https://developers.google.com/workspace/chat/list-spaces).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * Lists spaces visible to the caller or authenticated user. Group chats
   * and DMs aren't listed until the first message is sent.
   *
   * To list all named spaces by Google Workspace organization, use the
   * [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
   * method using Workspace administrator privileges instead.
   */
  listSpaces(
    request: ListSpacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSpacesResponse>>;
  /**
   * Returns a list of spaces in a Google Workspace organization based on an
   * administrator's search. Requires [user
   * authentication with administrator
   * privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
   * In the request, set `use_admin_access` to `true`.
   */
  searchSpaces(
    request: SearchSpacesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchSpacesResponse>>;
  /**
   * Returns details about a space. For an example, see
   * [Get details about a
   * space](https://developers.google.com/workspace/chat/get-spaces).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getSpace(request: GetSpaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Space>>;
  /**
   * Creates a named space. Spaces grouped by topics aren't supported. For an
   * example, see [Create a
   * space](https://developers.google.com/workspace/chat/create-spaces).
   *
   *  If you receive the error message `ALREADY_EXISTS` when creating
   *  a space, try a different `displayName`. An existing space within
   *  the Google Workspace organization might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  createSpace(request: CreateSpaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Space>>;
  /**
   * Creates a space and adds specified users to it. The calling user is
   * automatically added to the space, and shouldn't be specified as a
   * membership in the request. For an example, see
   * [Set up a space with initial
   * members](https://developers.google.com/workspace/chat/set-up-spaces).
   *
   * To specify the human members to add, add memberships with the appropriate
   * `membership.member.name`. To add a human user, use `users/{user}`, where
   * `{user}` can be the email address for the user. For users in the same
   * Workspace organization `{user}` can also be the `id` for the person from
   * the People API, or the `id` for the user in the Directory API. For example,
   * if the People API Person profile ID for `user@example.com` is `123456789`,
   * you can add the user to the space by setting the `membership.member.name`
   * to `users/user@example.com` or `users/123456789`.
   *
   * To specify the Google groups to add, add memberships with the
   * appropriate `membership.group_member.name`. To add or invite a Google
   * group, use `groups/{group}`, where `{group}` is the `id` for the group from
   * the Cloud Identity Groups API. For example, you can use [Cloud Identity
   * Groups lookup
   * API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
   * to retrieve the ID `123456789` for group email `group@example.com`, then
   * you can add the group to the space by setting the
   * `membership.group_member.name` to `groups/123456789`. Group email is not
   * supported, and Google groups can only be added as members in named spaces.
   *
   * For a named space or group chat, if the caller blocks, or is blocked
   * by some members, or doesn't have permission to add some members, then
   * those members aren't added to the created space.
   *
   * To create a direct message (DM) between the calling user and another human
   * user, specify exactly one membership to represent the human user. If
   * one user blocks the other, the request fails and the DM isn't created.
   *
   * To create a DM between the calling user and the calling app, set
   * `Space.singleUserBotDm` to `true` and don't specify any memberships. You
   * can only use this method to set up a DM with the calling app. To add the
   * calling app as a member of a space or an existing DM between two human
   * users, see
   * [Invite or add a user or app to a
   * space](https://developers.google.com/workspace/chat/create-members).
   *
   * If a DM already exists between two users, even when one user blocks the
   * other at the time a request is made, then the existing DM is returned.
   *
   * Spaces with threaded replies aren't supported. If you receive the error
   * message `ALREADY_EXISTS` when setting up a space, try a different
   * `displayName`. An existing space within the Google Workspace organization
   * might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  setUpSpace(request: SetUpSpaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Space>>;
  /**
   * Updates a space. For an example, see
   * [Update a
   * space](https://developers.google.com/workspace/chat/update-spaces).
   *
   * If you're updating the `displayName` field and receive the error message
   * `ALREADY_EXISTS`, try a different display name.. An existing space within
   * the Google Workspace organization might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  updateSpace(request: UpdateSpaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Space>>;
  /**
   * Deletes a named space. Always performs a cascading delete, which means
   * that the space's child resources—like messages posted in the space and
   * memberships in the space—are also deleted. For an example, see
   * [Delete a
   * space](https://developers.google.com/workspace/chat/delete-spaces).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * from a user who has permission to delete the space.
   */
  deleteSpace(request: DeleteSpaceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Completes the
   * [import process](https://developers.google.com/workspace/chat/import-data)
   * for the specified space and makes it visible to users.
   * Requires app authentication and domain-wide delegation. For more
   * information, see [Authorize Google Chat apps to import
   * data](https://developers.google.com/workspace/chat/authorize-import).
   */
  completeImportSpace(
    request: CompleteImportSpaceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CompleteImportSpaceResponse>>;
  /**
   * Returns the existing direct message with the specified user. If no direct
   * message space is found, returns a `404 NOT_FOUND` error. For an example,
   * see
   * [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
   *
   * With [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * returns the direct message space between the specified user and the
   * authenticated user.
   *
   * With [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
   * returns the direct message space between the specified user and the calling
   * Chat app.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * or [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   */
  findDirectMessage(
    request: FindDirectMessageRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Space>>;
  /**
   * Creates a human membership or app membership for the calling app. Creating
   * memberships for other apps isn't supported. For an example, see
   * [Invite or add a user or a Google Chat app to a
   * space](https://developers.google.com/workspace/chat/create-members).
   * When creating a membership, if the specified member has their auto-accept
   * policy turned off, then they're invited, and must accept the space
   * invitation before joining. Otherwise, creating a membership adds the member
   * directly to the specified space. Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * To specify the member to add, set the `membership.member.name` for the
   * human or app member, or set the `membership.group_member.name` for the
   * group member.
   *
   * - To add the calling app to a space or a direct message between two human
   *   users, use `users/app`. Unable to add other
   *   apps to the space.
   *
   * - To add a human user, use `users/{user}`, where `{user}` can be the email
   * address for the user. For users in the same Workspace organization `{user}`
   * can also be the `id` for the person from the People API, or the `id` for
   * the user in the Directory API. For example, if the People API Person
   * profile ID for `user@example.com` is `123456789`, you can add the user to
   * the space by setting the `membership.member.name` to
   * `users/user@example.com` or `users/123456789`.
   *
   * - To add or invite a Google group in a named space, use
   * `groups/{group}`, where `{group}` is the `id` for the group from the Cloud
   * Identity Groups API. For example, you can use [Cloud Identity Groups lookup
   * API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
   * to retrieve the ID `123456789` for group email `group@example.com`, then
   * you can add or invite the group to a named space by setting the
   * `membership.group_member.name` to `groups/123456789`. Group email is not
   * supported, and Google groups can only be added as members in named spaces.
   */
  createMembership(
    request: CreateMembershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Membership>>;
  /**
   * Updates a membership. For an example, see [Update a user's membership in
   * a space](https://developers.google.com/workspace/chat/update-members).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  updateMembership(
    request: UpdateMembershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Membership>>;
  /**
   * Deletes a membership. For an example, see
   * [Remove a user or a Google Chat app from a
   * space](https://developers.google.com/workspace/chat/delete-members).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  deleteMembership(
    request: DeleteMembershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Membership>>;
  /**
   * Creates a reaction and adds it to a message. Only unicode emojis are
   * supported. For an example, see
   * [Add a reaction to a
   * message](https://developers.google.com/workspace/chat/create-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  createReaction(request: CreateReactionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Reaction>>;
  /**
   * Lists reactions to a message. For an example, see
   * [List reactions for a
   * message](https://developers.google.com/workspace/chat/list-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  listReactions(
    request: ListReactionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListReactionsResponse>>;
  /**
   * Deletes a reaction to a message. Only unicode emojis are supported.
   * For an example, see
   * [Delete a
   * reaction](https://developers.google.com/workspace/chat/delete-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  deleteReaction(request: DeleteReactionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Returns details about a user's read state within a space, used to identify
   * read and unread messages. For an example, see [Get details about a user's
   * space read
   * state](https://developers.google.com/workspace/chat/get-space-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getSpaceReadState(
    request: GetSpaceReadStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SpaceReadState>>;
  /**
   * Updates a user's read state within a space, used to identify read and
   * unread messages. For an example, see [Update a user's space read
   * state](https://developers.google.com/workspace/chat/update-space-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  updateSpaceReadState(
    request: UpdateSpaceReadStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SpaceReadState>>;
  /**
   * Returns details about a user's read state within a thread, used to identify
   * read and unread messages. For an example, see [Get details about a user's
   * thread read
   * state](https://developers.google.com/workspace/chat/get-thread-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getThreadReadState(
    request: GetThreadReadStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ThreadReadState>>;
  /**
   * Returns an event from a Google Chat space. The [event
   * payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
   * contains the most recent version of the resource that changed. For example,
   * if you request an event about a new message but the message was later
   * updated, the server returns the updated `Message` resource in the event
   * payload.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * To get an event, the authenticated user must be a member of the space.
   *
   * For an example, see [Get details about an
   * event from a Google Chat
   * space](https://developers.google.com/workspace/chat/get-space-event).
   */
  getSpaceEvent(request: GetSpaceEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SpaceEvent>>;
  /**
   * Lists events from a Google Chat space. For each event, the
   * [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
   * contains the most recent version of the Chat resource. For example, if you
   * list events about new space members, the server returns `Membership`
   * resources that contain the latest membership details. If new members were
   * removed during the requested period, the event payload contains an empty
   * `Membership` resource.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * To list events, the authenticated user must be a member of the space.
   *
   * For an example, see [List events from a Google Chat
   * space](https://developers.google.com/workspace/chat/list-space-events).
   */
  listSpaceEvents(
    request: ListSpaceEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSpaceEventsResponse>>;
}

export interface ChatServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a message in a Google Chat space. The maximum message size,
   * including text and cards, is 32,000 bytes. For an example, see [Send a
   * message](https://developers.google.com/workspace/chat/create-messages).
   *
   * Calling this method requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize)
   * and supports the following authentication types:
   *
   * - For text messages, user authentication or app authentication are
   * supported.
   * - For card messages, only app authentication is supported. (Only Chat apps
   * can create card messages.)
   */
  createMessage(request: DeepPartial<CreateMessageRequest>, options?: CallOptions & CallOptionsExt): Promise<Message>;
  /**
   * Lists messages in a space that the caller is a member of, including
   * messages from blocked members and spaces. For an example, see
   * [List messages](/chat/api/guides/v1/messages/list).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  listMessages(
    request: DeepPartial<ListMessagesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMessagesResponse>;
  /**
   * Lists memberships in a space. For an example, see [List users and Google
   * Chat apps in a
   * space](https://developers.google.com/workspace/chat/list-members). Listing
   * memberships with [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * lists memberships in spaces that the Chat app has
   * access to, but excludes Chat app memberships,
   * including its own. Listing memberships with
   * [User
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * lists memberships in spaces that the authenticated user has access to.
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  listMemberships(
    request: DeepPartial<ListMembershipsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMembershipsResponse>;
  /**
   * Returns details about a membership. For an example, see
   * [Get details about a user's or Google Chat app's
   * membership](https://developers.google.com/workspace/chat/get-members).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getMembership(
    request: DeepPartial<GetMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Membership>;
  /**
   * Returns details about a message.
   * For an example, see [Get details about a
   * message](https://developers.google.com/workspace/chat/get-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * Note: Might return a message from a blocked member or space.
   */
  getMessage(request: DeepPartial<GetMessageRequest>, options?: CallOptions & CallOptionsExt): Promise<Message>;
  /**
   * Updates a message. There's a difference between the `patch` and `update`
   * methods. The `patch`
   * method uses a `patch` request while the `update` method uses a `put`
   * request. We recommend using the `patch` method. For an example, see
   * [Update a
   * message](https://developers.google.com/workspace/chat/update-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * When using app authentication, requests can only update messages
   * created by the calling Chat app.
   */
  updateMessage(request: DeepPartial<UpdateMessageRequest>, options?: CallOptions & CallOptionsExt): Promise<Message>;
  /**
   * Deletes a message.
   * For an example, see [Delete a
   * message](https://developers.google.com/workspace/chat/delete-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * When using app authentication, requests can only delete messages
   * created by the calling Chat app.
   */
  deleteMessage(request: DeepPartial<DeleteMessageRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Gets the metadata of a message attachment. The attachment data is fetched
   * using the [media
   * API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
   * For an example, see
   * [Get metadata about a message
   * attachment](https://developers.google.com/workspace/chat/get-media-attachments).
   * Requires [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   */
  getAttachment(
    request: DeepPartial<GetAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Attachment>;
  /**
   * Uploads an attachment. For an example, see
   * [Upload media as a file
   * attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
   * Requires user
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * You can upload attachments up to 200 MB. Certain file types aren't
   * supported. For details, see [File types blocked by Google
   * Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
   */
  uploadAttachment(
    request: DeepPartial<UploadAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadAttachmentResponse>;
  /**
   * Lists spaces the caller is a member of. Group chats and DMs aren't listed
   * until the first message is sent. For an example, see
   * [List
   * spaces](https://developers.google.com/workspace/chat/list-spaces).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * Lists spaces visible to the caller or authenticated user. Group chats
   * and DMs aren't listed until the first message is sent.
   *
   * To list all named spaces by Google Workspace organization, use the
   * [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
   * method using Workspace administrator privileges instead.
   */
  listSpaces(
    request: DeepPartial<ListSpacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSpacesResponse>;
  /**
   * Returns a list of spaces in a Google Workspace organization based on an
   * administrator's search. Requires [user
   * authentication with administrator
   * privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
   * In the request, set `use_admin_access` to `true`.
   */
  searchSpaces(
    request: DeepPartial<SearchSpacesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchSpacesResponse>;
  /**
   * Returns details about a space. For an example, see
   * [Get details about a
   * space](https://developers.google.com/workspace/chat/get-spaces).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getSpace(request: DeepPartial<GetSpaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Space>;
  /**
   * Creates a named space. Spaces grouped by topics aren't supported. For an
   * example, see [Create a
   * space](https://developers.google.com/workspace/chat/create-spaces).
   *
   *  If you receive the error message `ALREADY_EXISTS` when creating
   *  a space, try a different `displayName`. An existing space within
   *  the Google Workspace organization might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  createSpace(request: DeepPartial<CreateSpaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Space>;
  /**
   * Creates a space and adds specified users to it. The calling user is
   * automatically added to the space, and shouldn't be specified as a
   * membership in the request. For an example, see
   * [Set up a space with initial
   * members](https://developers.google.com/workspace/chat/set-up-spaces).
   *
   * To specify the human members to add, add memberships with the appropriate
   * `membership.member.name`. To add a human user, use `users/{user}`, where
   * `{user}` can be the email address for the user. For users in the same
   * Workspace organization `{user}` can also be the `id` for the person from
   * the People API, or the `id` for the user in the Directory API. For example,
   * if the People API Person profile ID for `user@example.com` is `123456789`,
   * you can add the user to the space by setting the `membership.member.name`
   * to `users/user@example.com` or `users/123456789`.
   *
   * To specify the Google groups to add, add memberships with the
   * appropriate `membership.group_member.name`. To add or invite a Google
   * group, use `groups/{group}`, where `{group}` is the `id` for the group from
   * the Cloud Identity Groups API. For example, you can use [Cloud Identity
   * Groups lookup
   * API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
   * to retrieve the ID `123456789` for group email `group@example.com`, then
   * you can add the group to the space by setting the
   * `membership.group_member.name` to `groups/123456789`. Group email is not
   * supported, and Google groups can only be added as members in named spaces.
   *
   * For a named space or group chat, if the caller blocks, or is blocked
   * by some members, or doesn't have permission to add some members, then
   * those members aren't added to the created space.
   *
   * To create a direct message (DM) between the calling user and another human
   * user, specify exactly one membership to represent the human user. If
   * one user blocks the other, the request fails and the DM isn't created.
   *
   * To create a DM between the calling user and the calling app, set
   * `Space.singleUserBotDm` to `true` and don't specify any memberships. You
   * can only use this method to set up a DM with the calling app. To add the
   * calling app as a member of a space or an existing DM between two human
   * users, see
   * [Invite or add a user or app to a
   * space](https://developers.google.com/workspace/chat/create-members).
   *
   * If a DM already exists between two users, even when one user blocks the
   * other at the time a request is made, then the existing DM is returned.
   *
   * Spaces with threaded replies aren't supported. If you receive the error
   * message `ALREADY_EXISTS` when setting up a space, try a different
   * `displayName`. An existing space within the Google Workspace organization
   * might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  setUpSpace(request: DeepPartial<SetUpSpaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Space>;
  /**
   * Updates a space. For an example, see
   * [Update a
   * space](https://developers.google.com/workspace/chat/update-spaces).
   *
   * If you're updating the `displayName` field and receive the error message
   * `ALREADY_EXISTS`, try a different display name.. An existing space within
   * the Google Workspace organization might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  updateSpace(request: DeepPartial<UpdateSpaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Space>;
  /**
   * Deletes a named space. Always performs a cascading delete, which means
   * that the space's child resources—like messages posted in the space and
   * memberships in the space—are also deleted. For an example, see
   * [Delete a
   * space](https://developers.google.com/workspace/chat/delete-spaces).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * from a user who has permission to delete the space.
   */
  deleteSpace(request: DeepPartial<DeleteSpaceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Completes the
   * [import process](https://developers.google.com/workspace/chat/import-data)
   * for the specified space and makes it visible to users.
   * Requires app authentication and domain-wide delegation. For more
   * information, see [Authorize Google Chat apps to import
   * data](https://developers.google.com/workspace/chat/authorize-import).
   */
  completeImportSpace(
    request: DeepPartial<CompleteImportSpaceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CompleteImportSpaceResponse>;
  /**
   * Returns the existing direct message with the specified user. If no direct
   * message space is found, returns a `404 NOT_FOUND` error. For an example,
   * see
   * [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
   *
   * With [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * returns the direct message space between the specified user and the
   * authenticated user.
   *
   * With [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
   * returns the direct message space between the specified user and the calling
   * Chat app.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * or [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   */
  findDirectMessage(
    request: DeepPartial<FindDirectMessageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Space>;
  /**
   * Creates a human membership or app membership for the calling app. Creating
   * memberships for other apps isn't supported. For an example, see
   * [Invite or add a user or a Google Chat app to a
   * space](https://developers.google.com/workspace/chat/create-members).
   * When creating a membership, if the specified member has their auto-accept
   * policy turned off, then they're invited, and must accept the space
   * invitation before joining. Otherwise, creating a membership adds the member
   * directly to the specified space. Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * To specify the member to add, set the `membership.member.name` for the
   * human or app member, or set the `membership.group_member.name` for the
   * group member.
   *
   * - To add the calling app to a space or a direct message between two human
   *   users, use `users/app`. Unable to add other
   *   apps to the space.
   *
   * - To add a human user, use `users/{user}`, where `{user}` can be the email
   * address for the user. For users in the same Workspace organization `{user}`
   * can also be the `id` for the person from the People API, or the `id` for
   * the user in the Directory API. For example, if the People API Person
   * profile ID for `user@example.com` is `123456789`, you can add the user to
   * the space by setting the `membership.member.name` to
   * `users/user@example.com` or `users/123456789`.
   *
   * - To add or invite a Google group in a named space, use
   * `groups/{group}`, where `{group}` is the `id` for the group from the Cloud
   * Identity Groups API. For example, you can use [Cloud Identity Groups lookup
   * API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
   * to retrieve the ID `123456789` for group email `group@example.com`, then
   * you can add or invite the group to a named space by setting the
   * `membership.group_member.name` to `groups/123456789`. Group email is not
   * supported, and Google groups can only be added as members in named spaces.
   */
  createMembership(
    request: DeepPartial<CreateMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Membership>;
  /**
   * Updates a membership. For an example, see [Update a user's membership in
   * a space](https://developers.google.com/workspace/chat/update-members).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  updateMembership(
    request: DeepPartial<UpdateMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Membership>;
  /**
   * Deletes a membership. For an example, see
   * [Remove a user or a Google Chat app from a
   * space](https://developers.google.com/workspace/chat/delete-members).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  deleteMembership(
    request: DeepPartial<DeleteMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Membership>;
  /**
   * Creates a reaction and adds it to a message. Only unicode emojis are
   * supported. For an example, see
   * [Add a reaction to a
   * message](https://developers.google.com/workspace/chat/create-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  createReaction(
    request: DeepPartial<CreateReactionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Reaction>;
  /**
   * Lists reactions to a message. For an example, see
   * [List reactions for a
   * message](https://developers.google.com/workspace/chat/list-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  listReactions(
    request: DeepPartial<ListReactionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListReactionsResponse>;
  /**
   * Deletes a reaction to a message. Only unicode emojis are supported.
   * For an example, see
   * [Delete a
   * reaction](https://developers.google.com/workspace/chat/delete-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  deleteReaction(request: DeepPartial<DeleteReactionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Returns details about a user's read state within a space, used to identify
   * read and unread messages. For an example, see [Get details about a user's
   * space read
   * state](https://developers.google.com/workspace/chat/get-space-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getSpaceReadState(
    request: DeepPartial<GetSpaceReadStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SpaceReadState>;
  /**
   * Updates a user's read state within a space, used to identify read and
   * unread messages. For an example, see [Update a user's space read
   * state](https://developers.google.com/workspace/chat/update-space-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  updateSpaceReadState(
    request: DeepPartial<UpdateSpaceReadStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SpaceReadState>;
  /**
   * Returns details about a user's read state within a thread, used to identify
   * read and unread messages. For an example, see [Get details about a user's
   * thread read
   * state](https://developers.google.com/workspace/chat/get-thread-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  getThreadReadState(
    request: DeepPartial<GetThreadReadStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ThreadReadState>;
  /**
   * Returns an event from a Google Chat space. The [event
   * payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
   * contains the most recent version of the resource that changed. For example,
   * if you request an event about a new message but the message was later
   * updated, the server returns the updated `Message` resource in the event
   * payload.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * To get an event, the authenticated user must be a member of the space.
   *
   * For an example, see [Get details about an
   * event from a Google Chat
   * space](https://developers.google.com/workspace/chat/get-space-event).
   */
  getSpaceEvent(
    request: DeepPartial<GetSpaceEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SpaceEvent>;
  /**
   * Lists events from a Google Chat space. For each event, the
   * [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
   * contains the most recent version of the Chat resource. For example, if you
   * list events about new space members, the server returns `Membership`
   * resources that contain the latest membership details. If new members were
   * removed during the requested period, the event payload contains an empty
   * `Membership` resource.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * To list events, the authenticated user must be a member of the space.
   *
   * For an example, see [List events from a Google Chat
   * space](https://developers.google.com/workspace/chat/list-space-events).
   */
  listSpaceEvents(
    request: DeepPartial<ListSpaceEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSpaceEventsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
