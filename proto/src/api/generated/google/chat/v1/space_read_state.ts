// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/space_read_state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../protobuf/field_mask.js";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.chat.v1";

/**
 * A user's read state within a space, used to identify read and unread
 * messages.
 */
export interface SpaceReadState {
  /**
   * Resource name of the space read state.
   *
   * Format: `users/{user}/spaces/{space}/spaceReadState`
   */
  name: string;
  /**
   * Optional. The time when the user's space read state was updated. Usually
   * this corresponds with either the timestamp of the last read message, or a
   * timestamp specified by the user to mark the last read position in a space.
   */
  lastReadTime: Date | undefined;
}

/** Request message for GetSpaceReadState API. */
export interface GetSpaceReadStateRequest {
  /**
   * Required. Resource name of the space read state to retrieve.
   *
   * Only supports getting read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user@example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   */
  name: string;
}

/** Request message for UpdateSpaceReadState API. */
export interface UpdateSpaceReadStateRequest {
  /**
   * Required. The space read state and fields to update.
   *
   * Only supports updating read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user@example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   */
  spaceReadState:
    | SpaceReadState
    | undefined;
  /**
   * Required. The field paths to update. Currently supported field paths:
   *
   * - `last_read_time`
   *
   * When the `last_read_time` is before the latest message create time, the
   * space appears as unread in the UI.
   *
   * To mark the space as read, set `last_read_time` to any value later (larger)
   * than the latest message create time. The `last_read_time` is coerced to
   * match the latest message create time. Note that the space read state only
   * affects the read state of messages that are visible in the space's
   * top-level conversation. Replies in threads are unaffected by this
   * timestamp, and instead rely on the thread read state.
   */
  updateMask: string[] | undefined;
}

function createBaseSpaceReadState(): SpaceReadState {
  return { name: "", lastReadTime: undefined };
}

export const SpaceReadState: MessageFns<SpaceReadState> = {
  encode(message: SpaceReadState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.lastReadTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastReadTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpaceReadState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceReadState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastReadTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceReadState {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      lastReadTime: isSet(object.lastReadTime) ? fromJsonTimestamp(object.lastReadTime) : undefined,
    };
  },

  toJSON(message: SpaceReadState): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.lastReadTime !== undefined) {
      obj.lastReadTime = message.lastReadTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SpaceReadState>): SpaceReadState {
    return SpaceReadState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpaceReadState>): SpaceReadState {
    const message = createBaseSpaceReadState();
    message.name = object.name ?? "";
    message.lastReadTime = object.lastReadTime ?? undefined;
    return message;
  },
};

function createBaseGetSpaceReadStateRequest(): GetSpaceReadStateRequest {
  return { name: "" };
}

export const GetSpaceReadStateRequest: MessageFns<GetSpaceReadStateRequest> = {
  encode(message: GetSpaceReadStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpaceReadStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpaceReadStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpaceReadStateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpaceReadStateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpaceReadStateRequest>): GetSpaceReadStateRequest {
    return GetSpaceReadStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpaceReadStateRequest>): GetSpaceReadStateRequest {
    const message = createBaseGetSpaceReadStateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSpaceReadStateRequest(): UpdateSpaceReadStateRequest {
  return { spaceReadState: undefined, updateMask: undefined };
}

export const UpdateSpaceReadStateRequest: MessageFns<UpdateSpaceReadStateRequest> = {
  encode(message: UpdateSpaceReadStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spaceReadState !== undefined) {
      SpaceReadState.encode(message.spaceReadState, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpaceReadStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpaceReadStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spaceReadState = SpaceReadState.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpaceReadStateRequest {
    return {
      spaceReadState: isSet(object.spaceReadState) ? SpaceReadState.fromJSON(object.spaceReadState) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSpaceReadStateRequest): unknown {
    const obj: any = {};
    if (message.spaceReadState !== undefined) {
      obj.spaceReadState = SpaceReadState.toJSON(message.spaceReadState);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSpaceReadStateRequest>): UpdateSpaceReadStateRequest {
    return UpdateSpaceReadStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSpaceReadStateRequest>): UpdateSpaceReadStateRequest {
    const message = createBaseUpdateSpaceReadStateRequest();
    message.spaceReadState = (object.spaceReadState !== undefined && object.spaceReadState !== null)
      ? SpaceReadState.fromPartial(object.spaceReadState)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
