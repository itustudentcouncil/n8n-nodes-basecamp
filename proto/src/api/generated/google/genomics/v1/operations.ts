// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/genomics/v1/operations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../protobuf/any.js";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.genomics.v1";

/** Metadata describing an [Operation][google.longrunning.Operation]. */
export interface OperationMetadata {
  /** The Google Cloud Project in which the job is scoped. */
  projectId: string;
  /** The time at which the job was submitted to the Genomics service. */
  createTime:
    | Date
    | undefined;
  /** The time at which the job began to run. */
  startTime:
    | Date
    | undefined;
  /** The time at which the job stopped running. */
  endTime:
    | Date
    | undefined;
  /**
   * The original request that started the operation. Note that this will be in
   * current version of the API. If the operation was started with v1beta2 API
   * and a GetOperation is performed on v1 API, a v1 request will be returned.
   */
  request:
    | Any
    | undefined;
  /**
   * Optional event messages that were generated during the job's execution.
   * This also contains any warnings that were generated during import
   * or export.
   */
  events: OperationEvent[];
  /**
   * This field is deprecated. Use `labels` instead. Optionally provided by the
   * caller when submitting the request that creates the operation.
   */
  clientId: string;
  /** Runtime metadata on this Operation. */
  runtimeMetadata:
    | Any
    | undefined;
  /**
   * Optionally provided by the caller when submitting the request that creates
   * the operation.
   */
  labels: { [key: string]: string };
}

export interface OperationMetadata_LabelsEntry {
  key: string;
  value: string;
}

/** An event that occurred during an [Operation][google.longrunning.Operation]. */
export interface OperationEvent {
  /** Optional time of when event started. */
  startTime:
    | Date
    | undefined;
  /**
   * Optional time of when event finished. An event can have a start time and no
   * finish time. If an event has a finish time, there must be a start time.
   */
  endTime:
    | Date
    | undefined;
  /** Required description of event. */
  description: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    projectId: "",
    createTime: undefined,
    startTime: undefined,
    endTime: undefined,
    request: undefined,
    events: [],
    clientId: "",
    runtimeMetadata: undefined,
    labels: {},
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(34).fork()).join();
    }
    if (message.request !== undefined) {
      Any.encode(message.request, writer.uint32(42).fork()).join();
    }
    for (const v of message.events) {
      OperationEvent.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.clientId !== "") {
      writer.uint32(58).string(message.clientId);
    }
    if (message.runtimeMetadata !== undefined) {
      Any.encode(message.runtimeMetadata, writer.uint32(66).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      OperationMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.request = Any.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.events.push(OperationEvent.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.runtimeMetadata = Any.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = OperationMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.labels[entry9.key] = entry9.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? Any.fromJSON(object.request) : undefined,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => OperationEvent.fromJSON(e)) : [],
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      runtimeMetadata: isSet(object.runtimeMetadata) ? Any.fromJSON(object.runtimeMetadata) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = Any.toJSON(message.request);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => OperationEvent.toJSON(e));
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.runtimeMetadata !== undefined) {
      obj.runtimeMetadata = Any.toJSON(message.runtimeMetadata);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.projectId = object.projectId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? Any.fromPartial(object.request)
      : undefined;
    message.events = object.events?.map((e) => OperationEvent.fromPartial(e)) || [];
    message.clientId = object.clientId ?? "";
    message.runtimeMetadata = (object.runtimeMetadata !== undefined && object.runtimeMetadata !== null)
      ? Any.fromPartial(object.runtimeMetadata)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseOperationMetadata_LabelsEntry(): OperationMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const OperationMetadata_LabelsEntry: MessageFns<OperationMetadata_LabelsEntry> = {
  encode(message: OperationMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: OperationMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata_LabelsEntry>): OperationMetadata_LabelsEntry {
    return OperationMetadata_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata_LabelsEntry>): OperationMetadata_LabelsEntry {
    const message = createBaseOperationMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseOperationEvent(): OperationEvent {
  return { startTime: undefined, endTime: undefined, description: "" };
}

export const OperationEvent: MessageFns<OperationEvent> = {
  encode(message: OperationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationEvent {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: OperationEvent): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationEvent>): OperationEvent {
    return OperationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationEvent>): OperationEvent {
    const message = createBaseOperationEvent();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
