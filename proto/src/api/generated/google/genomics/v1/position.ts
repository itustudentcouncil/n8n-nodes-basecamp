// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/genomics/v1/position.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.genomics.v1";

/**
 * An abstraction for referring to a genomic position, in relation to some
 * already known reference. For now, represents a genomic position as a
 * reference name, a base number on that reference (0-based), and a
 * determination of forward or reverse strand.
 */
export interface Position {
  /** The name of the reference in whatever reference set is being used. */
  referenceName: string;
  /** The 0-based offset from the start of the forward strand for that reference. */
  position: Long;
  /**
   * Whether this position is on the reverse strand, as opposed to the forward
   * strand.
   */
  reverseStrand: boolean;
}

function createBasePosition(): Position {
  return { referenceName: "", position: Long.ZERO, reverseStrand: false };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referenceName !== "") {
      writer.uint32(10).string(message.referenceName);
    }
    if (!message.position.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.position.toString());
    }
    if (message.reverseStrand !== false) {
      writer.uint32(24).bool(message.reverseStrand);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.referenceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.position = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reverseStrand = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      referenceName: isSet(object.referenceName) ? globalThis.String(object.referenceName) : "",
      position: isSet(object.position) ? Long.fromValue(object.position) : Long.ZERO,
      reverseStrand: isSet(object.reverseStrand) ? globalThis.Boolean(object.reverseStrand) : false,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.referenceName !== "") {
      obj.referenceName = message.referenceName;
    }
    if (!message.position.equals(Long.ZERO)) {
      obj.position = (message.position || Long.ZERO).toString();
    }
    if (message.reverseStrand !== false) {
      obj.reverseStrand = message.reverseStrand;
    }
    return obj;
  },

  create(base?: DeepPartial<Position>): Position {
    return Position.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Position>): Position {
    const message = createBasePosition();
    message.referenceName = object.referenceName ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Long.fromValue(object.position)
      : Long.ZERO;
    message.reverseStrand = object.reverseStrand ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
