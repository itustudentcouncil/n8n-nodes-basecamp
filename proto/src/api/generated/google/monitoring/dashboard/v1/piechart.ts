// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/piechart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { TimeSeriesQuery } from "./metrics.js";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** A widget that displays timeseries data as a pie or a donut. */
export interface PieChart {
  /** Required. The queries for the chart's data. */
  dataSets: PieChart_PieChartDataSet[];
  /** Required. Indicates the visualization type for the PieChart. */
  chartType: PieChart_PieChartType;
  /** Optional. Indicates whether or not the pie chart should show slices' labels */
  showLabels: boolean;
}

/** Types for the pie chart. */
export enum PieChart_PieChartType {
  /** PIE_CHART_TYPE_UNSPECIFIED - The zero value. No type specified. Do not use. */
  PIE_CHART_TYPE_UNSPECIFIED = 0,
  /** PIE - A Pie type PieChart. */
  PIE = 1,
  /** DONUT - Similar to PIE, but the DONUT type PieChart has a hole in the middle. */
  DONUT = 2,
  UNRECOGNIZED = -1,
}

export function pieChart_PieChartTypeFromJSON(object: any): PieChart_PieChartType {
  switch (object) {
    case 0:
    case "PIE_CHART_TYPE_UNSPECIFIED":
      return PieChart_PieChartType.PIE_CHART_TYPE_UNSPECIFIED;
    case 1:
    case "PIE":
      return PieChart_PieChartType.PIE;
    case 2:
    case "DONUT":
      return PieChart_PieChartType.DONUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PieChart_PieChartType.UNRECOGNIZED;
  }
}

export function pieChart_PieChartTypeToJSON(object: PieChart_PieChartType): string {
  switch (object) {
    case PieChart_PieChartType.PIE_CHART_TYPE_UNSPECIFIED:
      return "PIE_CHART_TYPE_UNSPECIFIED";
    case PieChart_PieChartType.PIE:
      return "PIE";
    case PieChart_PieChartType.DONUT:
      return "DONUT";
    case PieChart_PieChartType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Groups a time series query definition. */
export interface PieChart_PieChartDataSet {
  /**
   * Required. The query for the PieChart. See,
   * `google.monitoring.dashboard.v1.TimeSeriesQuery`.
   */
  timeSeriesQuery:
    | TimeSeriesQuery
    | undefined;
  /**
   * Optional. A template for the name of the slice. This name will be
   * displayed in the legend and the tooltip of the pie chart. It replaces the
   * auto-generated names for the slices. For example, if the template is set
   * to
   * `${resource.labels.zone}`, the zone's value will be used for the name
   * instead of the default name.
   */
  sliceNameTemplate: string;
  /**
   * Optional. The lower bound on data point frequency for this data set,
   * implemented by specifying the minimum alignment period to use in a time
   * series query. For example, if the data is published once every 10
   * minutes, the `min_alignment_period` should be at least 10 minutes. It
   * would not make sense to fetch and align data at one minute intervals.
   */
  minAlignmentPeriod: Duration | undefined;
}

function createBasePieChart(): PieChart {
  return { dataSets: [], chartType: 0, showLabels: false };
}

export const PieChart: MessageFns<PieChart> = {
  encode(message: PieChart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataSets) {
      PieChart_PieChartDataSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.chartType !== 0) {
      writer.uint32(16).int32(message.chartType);
    }
    if (message.showLabels !== false) {
      writer.uint32(32).bool(message.showLabels);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PieChart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePieChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataSets.push(PieChart_PieChartDataSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.chartType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showLabels = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PieChart {
    return {
      dataSets: globalThis.Array.isArray(object?.dataSets)
        ? object.dataSets.map((e: any) => PieChart_PieChartDataSet.fromJSON(e))
        : [],
      chartType: isSet(object.chartType) ? pieChart_PieChartTypeFromJSON(object.chartType) : 0,
      showLabels: isSet(object.showLabels) ? globalThis.Boolean(object.showLabels) : false,
    };
  },

  toJSON(message: PieChart): unknown {
    const obj: any = {};
    if (message.dataSets?.length) {
      obj.dataSets = message.dataSets.map((e) => PieChart_PieChartDataSet.toJSON(e));
    }
    if (message.chartType !== 0) {
      obj.chartType = pieChart_PieChartTypeToJSON(message.chartType);
    }
    if (message.showLabels !== false) {
      obj.showLabels = message.showLabels;
    }
    return obj;
  },

  create(base?: DeepPartial<PieChart>): PieChart {
    return PieChart.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PieChart>): PieChart {
    const message = createBasePieChart();
    message.dataSets = object.dataSets?.map((e) => PieChart_PieChartDataSet.fromPartial(e)) || [];
    message.chartType = object.chartType ?? 0;
    message.showLabels = object.showLabels ?? false;
    return message;
  },
};

function createBasePieChart_PieChartDataSet(): PieChart_PieChartDataSet {
  return { timeSeriesQuery: undefined, sliceNameTemplate: "", minAlignmentPeriod: undefined };
}

export const PieChart_PieChartDataSet: MessageFns<PieChart_PieChartDataSet> = {
  encode(message: PieChart_PieChartDataSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeSeriesQuery !== undefined) {
      TimeSeriesQuery.encode(message.timeSeriesQuery, writer.uint32(10).fork()).join();
    }
    if (message.sliceNameTemplate !== "") {
      writer.uint32(18).string(message.sliceNameTemplate);
    }
    if (message.minAlignmentPeriod !== undefined) {
      Duration.encode(message.minAlignmentPeriod, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PieChart_PieChartDataSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePieChart_PieChartDataSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeSeriesQuery = TimeSeriesQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sliceNameTemplate = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minAlignmentPeriod = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PieChart_PieChartDataSet {
    return {
      timeSeriesQuery: isSet(object.timeSeriesQuery) ? TimeSeriesQuery.fromJSON(object.timeSeriesQuery) : undefined,
      sliceNameTemplate: isSet(object.sliceNameTemplate) ? globalThis.String(object.sliceNameTemplate) : "",
      minAlignmentPeriod: isSet(object.minAlignmentPeriod) ? Duration.fromJSON(object.minAlignmentPeriod) : undefined,
    };
  },

  toJSON(message: PieChart_PieChartDataSet): unknown {
    const obj: any = {};
    if (message.timeSeriesQuery !== undefined) {
      obj.timeSeriesQuery = TimeSeriesQuery.toJSON(message.timeSeriesQuery);
    }
    if (message.sliceNameTemplate !== "") {
      obj.sliceNameTemplate = message.sliceNameTemplate;
    }
    if (message.minAlignmentPeriod !== undefined) {
      obj.minAlignmentPeriod = Duration.toJSON(message.minAlignmentPeriod);
    }
    return obj;
  },

  create(base?: DeepPartial<PieChart_PieChartDataSet>): PieChart_PieChartDataSet {
    return PieChart_PieChartDataSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PieChart_PieChartDataSet>): PieChart_PieChartDataSet {
    const message = createBasePieChart_PieChartDataSet();
    message.timeSeriesQuery = (object.timeSeriesQuery !== undefined && object.timeSeriesQuery !== null)
      ? TimeSeriesQuery.fromPartial(object.timeSeriesQuery)
      : undefined;
    message.sliceNameTemplate = object.sliceNameTemplate ?? "";
    message.minAlignmentPeriod = (object.minAlignmentPeriod !== undefined && object.minAlignmentPeriod !== null)
      ? Duration.fromPartial(object.minAlignmentPeriod)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
