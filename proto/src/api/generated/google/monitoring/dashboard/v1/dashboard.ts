// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/dashboard.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DashboardFilter } from "./dashboard_filter.js";
import { ColumnLayout, GridLayout, MosaicLayout, RowLayout } from "./layouts.js";

export const protobufPackage = "google.monitoring.dashboard.v1";

/**
 * A Google Stackdriver dashboard. Dashboards define the content and layout
 * of pages in the Stackdriver web application.
 */
export interface Dashboard {
  /** Identifier. The resource name of the dashboard. */
  name: string;
  /** Required. The mutable, human-readable name. */
  displayName: string;
  /**
   * `etag` is used for optimistic concurrency control as a way to help
   * prevent simultaneous updates of a policy from overwriting each other.
   * An `etag` is returned in the response to `GetDashboard`, and
   * users are expected to put that etag in the request to `UpdateDashboard` to
   * ensure that their change will be applied to the same version of the
   * Dashboard configuration. The field should not be passed during
   * dashboard creation.
   */
  etag: string;
  /**
   * Content is arranged with a basic layout that re-flows a simple list of
   * informational elements like widgets or tiles.
   */
  gridLayout?:
    | GridLayout
    | undefined;
  /**
   * The content is arranged as a grid of tiles, with each content widget
   * occupying one or more grid blocks.
   */
  mosaicLayout?:
    | MosaicLayout
    | undefined;
  /**
   * The content is divided into equally spaced rows and the widgets are
   * arranged horizontally.
   */
  rowLayout?:
    | RowLayout
    | undefined;
  /**
   * The content is divided into equally spaced columns and the widgets are
   * arranged vertically.
   */
  columnLayout?:
    | ColumnLayout
    | undefined;
  /** Filters to reduce the amount of data charted based on the filter criteria. */
  dashboardFilters: DashboardFilter[];
  /** Labels applied to the dashboard */
  labels: { [key: string]: string };
}

export interface Dashboard_LabelsEntry {
  key: string;
  value: string;
}

function createBaseDashboard(): Dashboard {
  return {
    name: "",
    displayName: "",
    etag: "",
    gridLayout: undefined,
    mosaicLayout: undefined,
    rowLayout: undefined,
    columnLayout: undefined,
    dashboardFilters: [],
    labels: {},
  };
}

export const Dashboard: MessageFns<Dashboard> = {
  encode(message: Dashboard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    if (message.gridLayout !== undefined) {
      GridLayout.encode(message.gridLayout, writer.uint32(42).fork()).join();
    }
    if (message.mosaicLayout !== undefined) {
      MosaicLayout.encode(message.mosaicLayout, writer.uint32(50).fork()).join();
    }
    if (message.rowLayout !== undefined) {
      RowLayout.encode(message.rowLayout, writer.uint32(66).fork()).join();
    }
    if (message.columnLayout !== undefined) {
      ColumnLayout.encode(message.columnLayout, writer.uint32(74).fork()).join();
    }
    for (const v of message.dashboardFilters) {
      DashboardFilter.encode(v!, writer.uint32(90).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Dashboard_LabelsEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dashboard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.gridLayout = GridLayout.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.mosaicLayout = MosaicLayout.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.rowLayout = RowLayout.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.columnLayout = ColumnLayout.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.dashboardFilters.push(DashboardFilter.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = Dashboard_LabelsEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.labels[entry12.key] = entry12.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dashboard {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      gridLayout: isSet(object.gridLayout) ? GridLayout.fromJSON(object.gridLayout) : undefined,
      mosaicLayout: isSet(object.mosaicLayout) ? MosaicLayout.fromJSON(object.mosaicLayout) : undefined,
      rowLayout: isSet(object.rowLayout) ? RowLayout.fromJSON(object.rowLayout) : undefined,
      columnLayout: isSet(object.columnLayout) ? ColumnLayout.fromJSON(object.columnLayout) : undefined,
      dashboardFilters: globalThis.Array.isArray(object?.dashboardFilters)
        ? object.dashboardFilters.map((e: any) => DashboardFilter.fromJSON(e))
        : [],
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Dashboard): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.gridLayout !== undefined) {
      obj.gridLayout = GridLayout.toJSON(message.gridLayout);
    }
    if (message.mosaicLayout !== undefined) {
      obj.mosaicLayout = MosaicLayout.toJSON(message.mosaicLayout);
    }
    if (message.rowLayout !== undefined) {
      obj.rowLayout = RowLayout.toJSON(message.rowLayout);
    }
    if (message.columnLayout !== undefined) {
      obj.columnLayout = ColumnLayout.toJSON(message.columnLayout);
    }
    if (message.dashboardFilters?.length) {
      obj.dashboardFilters = message.dashboardFilters.map((e) => DashboardFilter.toJSON(e));
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Dashboard>): Dashboard {
    return Dashboard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dashboard>): Dashboard {
    const message = createBaseDashboard();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.etag = object.etag ?? "";
    message.gridLayout = (object.gridLayout !== undefined && object.gridLayout !== null)
      ? GridLayout.fromPartial(object.gridLayout)
      : undefined;
    message.mosaicLayout = (object.mosaicLayout !== undefined && object.mosaicLayout !== null)
      ? MosaicLayout.fromPartial(object.mosaicLayout)
      : undefined;
    message.rowLayout = (object.rowLayout !== undefined && object.rowLayout !== null)
      ? RowLayout.fromPartial(object.rowLayout)
      : undefined;
    message.columnLayout = (object.columnLayout !== undefined && object.columnLayout !== null)
      ? ColumnLayout.fromPartial(object.columnLayout)
      : undefined;
    message.dashboardFilters = object.dashboardFilters?.map((e) => DashboardFilter.fromPartial(e)) || [];
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseDashboard_LabelsEntry(): Dashboard_LabelsEntry {
  return { key: "", value: "" };
}

export const Dashboard_LabelsEntry: MessageFns<Dashboard_LabelsEntry> = {
  encode(message: Dashboard_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dashboard_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboard_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dashboard_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Dashboard_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Dashboard_LabelsEntry>): Dashboard_LabelsEntry {
    return Dashboard_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dashboard_LabelsEntry>): Dashboard_LabelsEntry {
    const message = createBaseDashboard_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
