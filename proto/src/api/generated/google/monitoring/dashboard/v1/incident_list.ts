// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/incident_list.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { MonitoredResource } from "../../../api/monitored_resource.js";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** A widget that displays a list of incidents */
export interface IncidentList {
  /**
   * Optional. The monitored resource for which incidents are listed.
   * The resource doesn't need to be fully specified. That is, you can specify
   * the resource type but not the values of the resource labels.
   * The resource type and labels are used for filtering.
   */
  monitoredResources: MonitoredResource[];
  /**
   * Optional. A list of alert policy names to filter the incident list by.
   * Don't include the project ID prefix in the policy name. For
   * example, use `alertPolicies/utilization`.
   */
  policyNames: string[];
}

function createBaseIncidentList(): IncidentList {
  return { monitoredResources: [], policyNames: [] };
}

export const IncidentList: MessageFns<IncidentList> = {
  encode(message: IncidentList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.monitoredResources) {
      MonitoredResource.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.policyNames) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncidentList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncidentList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.monitoredResources.push(MonitoredResource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncidentList {
    return {
      monitoredResources: globalThis.Array.isArray(object?.monitoredResources)
        ? object.monitoredResources.map((e: any) => MonitoredResource.fromJSON(e))
        : [],
      policyNames: globalThis.Array.isArray(object?.policyNames)
        ? object.policyNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: IncidentList): unknown {
    const obj: any = {};
    if (message.monitoredResources?.length) {
      obj.monitoredResources = message.monitoredResources.map((e) => MonitoredResource.toJSON(e));
    }
    if (message.policyNames?.length) {
      obj.policyNames = message.policyNames;
    }
    return obj;
  },

  create(base?: DeepPartial<IncidentList>): IncidentList {
    return IncidentList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IncidentList>): IncidentList {
    const message = createBaseIncidentList();
    message.monitoredResources = object.monitoredResources?.map((e) => MonitoredResource.fromPartial(e)) || [];
    message.policyNames = object.policyNames?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
