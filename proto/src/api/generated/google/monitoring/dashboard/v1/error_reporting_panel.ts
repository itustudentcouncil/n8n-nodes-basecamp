// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/error_reporting_panel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** A widget that displays a list of error groups. */
export interface ErrorReportingPanel {
  /**
   * The resource name of the Google Cloud Platform project. Written
   * as `projects/{projectID}` or `projects/{projectNumber}`, where
   * `{projectID}` and `{projectNumber}` can be found in the
   * [Google Cloud console](https://support.google.com/cloud/answer/6158840).
   *
   * Examples: `projects/my-project-123`, `projects/5551234`.
   */
  projectNames: string[];
  /**
   * An identifier of the service, such as the name of the
   * executable, job, or Google App Engine service name. This field is expected
   * to have a low number of values that are relatively stable over time, as
   * opposed to `version`, which can be changed whenever new code is deployed.
   *
   * Contains the service name for error reports extracted from Google
   * App Engine logs or `default` if the App Engine default service is used.
   */
  services: string[];
  /**
   * Represents the source code version that the developer provided,
   * which could represent a version label or a Git SHA-1 hash, for example.
   * For App Engine standard environment, the version is set to the version of
   * the app.
   */
  versions: string[];
}

function createBaseErrorReportingPanel(): ErrorReportingPanel {
  return { projectNames: [], services: [], versions: [] };
}

export const ErrorReportingPanel: MessageFns<ErrorReportingPanel> = {
  encode(message: ErrorReportingPanel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projectNames) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.services) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.versions) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorReportingPanel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorReportingPanel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectNames.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.services.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.versions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorReportingPanel {
    return {
      projectNames: globalThis.Array.isArray(object?.projectNames)
        ? object.projectNames.map((e: any) => globalThis.String(e))
        : [],
      services: globalThis.Array.isArray(object?.services) ? object.services.map((e: any) => globalThis.String(e)) : [],
      versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ErrorReportingPanel): unknown {
    const obj: any = {};
    if (message.projectNames?.length) {
      obj.projectNames = message.projectNames;
    }
    if (message.services?.length) {
      obj.services = message.services;
    }
    if (message.versions?.length) {
      obj.versions = message.versions;
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorReportingPanel>): ErrorReportingPanel {
    return ErrorReportingPanel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorReportingPanel>): ErrorReportingPanel {
    const message = createBaseErrorReportingPanel();
    message.projectNames = object.projectNames?.map((e) => e) || [];
    message.services = object.services?.map((e) => e) || [];
    message.versions = object.versions?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
