// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/snooze.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TimeInterval } from "./common.js";

export const protobufPackage = "google.monitoring.v3";

/**
 * A `Snooze` will prevent any alerts from being opened, and close any that
 * are already open. The `Snooze` will work on alerts that match the
 * criteria defined in the `Snooze`. The `Snooze` will be active from
 * `interval.start_time` through `interval.end_time`.
 */
export interface Snooze {
  /**
   * Required. The name of the `Snooze`. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]
   *
   * The ID of the `Snooze` will be generated by the system.
   */
  name: string;
  /**
   * Required. This defines the criteria for applying the `Snooze`. See
   * `Criteria` for more information.
   */
  criteria:
    | Snooze_Criteria
    | undefined;
  /**
   * Required. The `Snooze` will be active from `interval.start_time` through
   * `interval.end_time`.
   * `interval.start_time` cannot be in the past. There is a 15 second clock
   * skew to account for the time it takes for a request to reach the API from
   * the UI.
   */
  interval:
    | TimeInterval
    | undefined;
  /**
   * Required. A display name for the `Snooze`. This can be, at most, 512
   * unicode characters.
   */
  displayName: string;
}

/**
 * Criteria specific to the `AlertPolicy`s that this `Snooze` applies to. The
 * `Snooze` will suppress alerts that come from one of the `AlertPolicy`s
 * whose names are supplied.
 */
export interface Snooze_Criteria {
  /**
   * The specific `AlertPolicy` names for the alert that should be snoozed.
   * The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]
   *
   * There is a limit of 16 policies per snooze. This limit is checked during
   * snooze creation.
   */
  policies: string[];
}

function createBaseSnooze(): Snooze {
  return { name: "", criteria: undefined, interval: undefined, displayName: "" };
}

export const Snooze: MessageFns<Snooze> = {
  encode(message: Snooze, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.criteria !== undefined) {
      Snooze_Criteria.encode(message.criteria, writer.uint32(26).fork()).join();
    }
    if (message.interval !== undefined) {
      TimeInterval.encode(message.interval, writer.uint32(34).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Snooze {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnooze();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.criteria = Snooze_Criteria.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.interval = TimeInterval.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snooze {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      criteria: isSet(object.criteria) ? Snooze_Criteria.fromJSON(object.criteria) : undefined,
      interval: isSet(object.interval) ? TimeInterval.fromJSON(object.interval) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: Snooze): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.criteria !== undefined) {
      obj.criteria = Snooze_Criteria.toJSON(message.criteria);
    }
    if (message.interval !== undefined) {
      obj.interval = TimeInterval.toJSON(message.interval);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<Snooze>): Snooze {
    return Snooze.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Snooze>): Snooze {
    const message = createBaseSnooze();
    message.name = object.name ?? "";
    message.criteria = (object.criteria !== undefined && object.criteria !== null)
      ? Snooze_Criteria.fromPartial(object.criteria)
      : undefined;
    message.interval = (object.interval !== undefined && object.interval !== null)
      ? TimeInterval.fromPartial(object.interval)
      : undefined;
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseSnooze_Criteria(): Snooze_Criteria {
  return { policies: [] };
}

export const Snooze_Criteria: MessageFns<Snooze_Criteria> = {
  encode(message: Snooze_Criteria, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policies) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Snooze_Criteria {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnooze_Criteria();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policies.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snooze_Criteria {
    return {
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Snooze_Criteria): unknown {
    const obj: any = {};
    if (message.policies?.length) {
      obj.policies = message.policies;
    }
    return obj;
  },

  create(base?: DeepPartial<Snooze_Criteria>): Snooze_Criteria {
    return Snooze_Criteria.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Snooze_Criteria>): Snooze_Criteria {
    const message = createBaseSnooze_Criteria();
    message.policies = object.policies?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
