// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/snooze_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../protobuf/field_mask.js";
import { Snooze } from "./snooze.js";

export const protobufPackage = "google.monitoring.v3";

/**
 * The message definition for creating a `Snooze`. Users must provide the body
 * of the `Snooze` to be created but must omit the `Snooze` field, `name`.
 */
export interface CreateSnoozeRequest {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
   * a `Snooze` should be created. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /**
   * Required. The `Snooze` to create. Omit the `name` field, as it will be
   * filled in by the API.
   */
  snooze: Snooze | undefined;
}

/**
 * The message definition for listing `Snooze`s associated with the given
 * `parent`, satisfying the optional `filter`.
 */
export interface ListSnoozesRequest {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
   * `Snooze`s should be listed. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /**
   * Optional. Optional filter to restrict results to the given criteria. The
   * following fields are supported.
   *
   *   * `interval.start_time`
   *   * `interval.end_time`
   *
   * For example:
   *
   *     ```
   *     interval.start_time > "2022-03-11T00:00:00-08:00" AND
   *         interval.end_time < "2022-03-12T00:00:00-08:00"
   *     ```
   */
  filter: string;
  /**
   * Optional. The maximum number of results to return for a single query. The
   * server may further constrain the maximum number of results returned in a
   * single page. The value should be in the range [1, 1000]. If the value given
   * is outside this range, the server will decide the number of results to be
   * returned.
   */
  pageSize: number;
  /**
   * Optional. The `next_page_token` from a previous call to
   * `ListSnoozesRequest` to get the next page of results.
   */
  pageToken: string;
}

/**
 * The results of a successful `ListSnoozes` call, containing the matching
 * `Snooze`s.
 */
export interface ListSnoozesResponse {
  /** `Snooze`s matching this list call. */
  snoozes: Snooze[];
  /**
   * Page token for repeated calls to `ListSnoozes`, to fetch additional pages
   * of results. If this is empty or missing, there are no more pages.
   */
  nextPageToken: string;
}

/**
 * The message definition for retrieving a `Snooze`. Users must specify the
 * field, `name`, which identifies the `Snooze`.
 */
export interface GetSnoozeRequest {
  /**
   * Required. The ID of the `Snooze` to retrieve. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]
   */
  name: string;
}

/**
 * The message definition for updating a `Snooze`. The field, `snooze.name`
 * identifies the `Snooze` to be updated. The remainder of `snooze` gives the
 * content the `Snooze` in question will be assigned.
 *
 * What fields can be updated depends on the start time and end time of the
 * `Snooze`.
 *
 *   * end time is in the past: These `Snooze`s are considered
 *     read-only and cannot be updated.
 *   * start time is in the past and end time is in the future: `display_name`
 *     and `interval.end_time` can be updated.
 *   * start time is in the future: `display_name`, `interval.start_time` and
 *     `interval.end_time` can be updated.
 */
export interface UpdateSnoozeRequest {
  /** Required. The `Snooze` to update. Must have the name field present. */
  snooze:
    | Snooze
    | undefined;
  /**
   * Required. The fields to update.
   *
   * For each field listed in `update_mask`:
   *
   *   * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
   *     value for that field, the value of the field in the existing `Snooze`
   *     will be set to the value of the field in the supplied `Snooze`.
   *   * If the field does not have a value in the supplied `Snooze`, the field
   *     in the existing `Snooze` is set to its default value.
   *
   * Fields not listed retain their existing value.
   *
   * The following are the field names that are accepted in `update_mask`:
   *
   *   * `display_name`
   *   * `interval.start_time`
   *   * `interval.end_time`
   *
   * That said, the start time and end time of the `Snooze` determines which
   * fields can legally be updated. Before attempting an update, users should
   * consult the documentation for `UpdateSnoozeRequest`, which talks about
   * which fields can be updated.
   */
  updateMask: string[] | undefined;
}

function createBaseCreateSnoozeRequest(): CreateSnoozeRequest {
  return { parent: "", snooze: undefined };
}

export const CreateSnoozeRequest: MessageFns<CreateSnoozeRequest> = {
  encode(message: CreateSnoozeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.snooze !== undefined) {
      Snooze.encode(message.snooze, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSnoozeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSnoozeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snooze = Snooze.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSnoozeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      snooze: isSet(object.snooze) ? Snooze.fromJSON(object.snooze) : undefined,
    };
  },

  toJSON(message: CreateSnoozeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.snooze !== undefined) {
      obj.snooze = Snooze.toJSON(message.snooze);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSnoozeRequest>): CreateSnoozeRequest {
    return CreateSnoozeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSnoozeRequest>): CreateSnoozeRequest {
    const message = createBaseCreateSnoozeRequest();
    message.parent = object.parent ?? "";
    message.snooze = (object.snooze !== undefined && object.snooze !== null)
      ? Snooze.fromPartial(object.snooze)
      : undefined;
    return message;
  },
};

function createBaseListSnoozesRequest(): ListSnoozesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListSnoozesRequest: MessageFns<ListSnoozesRequest> = {
  encode(message: ListSnoozesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnoozesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnoozesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnoozesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSnoozesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnoozesRequest>): ListSnoozesRequest {
    return ListSnoozesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnoozesRequest>): ListSnoozesRequest {
    const message = createBaseListSnoozesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSnoozesResponse(): ListSnoozesResponse {
  return { snoozes: [], nextPageToken: "" };
}

export const ListSnoozesResponse: MessageFns<ListSnoozesResponse> = {
  encode(message: ListSnoozesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.snoozes) {
      Snooze.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnoozesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnoozesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snoozes.push(Snooze.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnoozesResponse {
    return {
      snoozes: globalThis.Array.isArray(object?.snoozes) ? object.snoozes.map((e: any) => Snooze.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSnoozesResponse): unknown {
    const obj: any = {};
    if (message.snoozes?.length) {
      obj.snoozes = message.snoozes.map((e) => Snooze.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnoozesResponse>): ListSnoozesResponse {
    return ListSnoozesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnoozesResponse>): ListSnoozesResponse {
    const message = createBaseListSnoozesResponse();
    message.snoozes = object.snoozes?.map((e) => Snooze.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSnoozeRequest(): GetSnoozeRequest {
  return { name: "" };
}

export const GetSnoozeRequest: MessageFns<GetSnoozeRequest> = {
  encode(message: GetSnoozeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSnoozeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSnoozeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSnoozeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSnoozeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSnoozeRequest>): GetSnoozeRequest {
    return GetSnoozeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSnoozeRequest>): GetSnoozeRequest {
    const message = createBaseGetSnoozeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSnoozeRequest(): UpdateSnoozeRequest {
  return { snooze: undefined, updateMask: undefined };
}

export const UpdateSnoozeRequest: MessageFns<UpdateSnoozeRequest> = {
  encode(message: UpdateSnoozeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snooze !== undefined) {
      Snooze.encode(message.snooze, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSnoozeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSnoozeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snooze = Snooze.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSnoozeRequest {
    return {
      snooze: isSet(object.snooze) ? Snooze.fromJSON(object.snooze) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSnoozeRequest): unknown {
    const obj: any = {};
    if (message.snooze !== undefined) {
      obj.snooze = Snooze.toJSON(message.snooze);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSnoozeRequest>): UpdateSnoozeRequest {
    return UpdateSnoozeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSnoozeRequest>): UpdateSnoozeRequest {
    const message = createBaseUpdateSnoozeRequest();
    message.snooze = (object.snooze !== undefined && object.snooze !== null)
      ? Snooze.fromPartial(object.snooze)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * The SnoozeService API is used to temporarily prevent an alert policy from
 * generating alerts. A Snooze is a description of the criteria under which one
 * or more alert policies should not fire alerts for the specified duration.
 */
export type SnoozeServiceDefinition = typeof SnoozeServiceDefinition;
export const SnoozeServiceDefinition = {
  name: "SnoozeService",
  fullName: "google.monitoring.v3.SnoozeService",
  methods: {
    /**
     * Creates a `Snooze` that will prevent alerts, which match the provided
     * criteria, from being opened. The `Snooze` applies for a specific time
     * interval.
     */
    createSnooze: {
      name: "CreateSnooze",
      requestType: CreateSnoozeRequest,
      requestStream: false,
      responseType: Snooze,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 115, 110, 111, 111, 122, 101])],
          578365826: [
            Buffer.from([
              41,
              58,
              6,
              115,
              110,
              111,
              111,
              122,
              101,
              34,
              31,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              110,
              111,
              111,
              122,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the `Snooze`s associated with a project. Can optionally pass in
     * `filter`, which specifies predicates to match `Snooze`s.
     */
    listSnoozes: {
      name: "ListSnoozes",
      requestType: ListSnoozesRequest,
      requestStream: false,
      responseType: ListSnoozesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              110,
              111,
              111,
              122,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a `Snooze` by `name`. */
    getSnooze: {
      name: "GetSnooze",
      requestType: GetSnoozeRequest,
      requestStream: false,
      responseType: Snooze,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              110,
              111,
              111,
              122,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a `Snooze`, identified by its `name`, with the parameters in the
     * given `Snooze` object.
     */
    updateSnooze: {
      name: "UpdateSnooze",
      requestType: UpdateSnoozeRequest,
      requestStream: false,
      responseType: Snooze,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 115, 110, 111, 111, 122, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              48,
              58,
              6,
              115,
              110,
              111,
              111,
              122,
              101,
              50,
              38,
              47,
              118,
              51,
              47,
              123,
              115,
              110,
              111,
              111,
              122,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              110,
              111,
              111,
              122,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SnoozeServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a `Snooze` that will prevent alerts, which match the provided
   * criteria, from being opened. The `Snooze` applies for a specific time
   * interval.
   */
  createSnooze(request: CreateSnoozeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Snooze>>;
  /**
   * Lists the `Snooze`s associated with a project. Can optionally pass in
   * `filter`, which specifies predicates to match `Snooze`s.
   */
  listSnoozes(
    request: ListSnoozesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSnoozesResponse>>;
  /** Retrieves a `Snooze` by `name`. */
  getSnooze(request: GetSnoozeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Snooze>>;
  /**
   * Updates a `Snooze`, identified by its `name`, with the parameters in the
   * given `Snooze` object.
   */
  updateSnooze(request: UpdateSnoozeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Snooze>>;
}

export interface SnoozeServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a `Snooze` that will prevent alerts, which match the provided
   * criteria, from being opened. The `Snooze` applies for a specific time
   * interval.
   */
  createSnooze(request: DeepPartial<CreateSnoozeRequest>, options?: CallOptions & CallOptionsExt): Promise<Snooze>;
  /**
   * Lists the `Snooze`s associated with a project. Can optionally pass in
   * `filter`, which specifies predicates to match `Snooze`s.
   */
  listSnoozes(
    request: DeepPartial<ListSnoozesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSnoozesResponse>;
  /** Retrieves a `Snooze` by `name`. */
  getSnooze(request: DeepPartial<GetSnoozeRequest>, options?: CallOptions & CallOptionsExt): Promise<Snooze>;
  /**
   * Updates a `Snooze`, identified by its `name`, with the parameters in the
   * given `Snooze` object.
   */
  updateSnooze(request: DeepPartial<UpdateSnoozeRequest>, options?: CallOptions & CallOptionsExt): Promise<Snooze>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
