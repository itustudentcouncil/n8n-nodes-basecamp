// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/service_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../protobuf/empty.js";
import { FieldMask } from "../../protobuf/field_mask.js";
import {
  Service,
  ServiceLevelObjective,
  ServiceLevelObjective_View,
  serviceLevelObjective_ViewFromJSON,
  serviceLevelObjective_ViewToJSON,
} from "./service.js";

export const protobufPackage = "google.monitoring.v3";

/** The `CreateService` request. */
export interface CreateServiceRequest {
  /**
   * Required. Resource
   * [name](https://cloud.google.com/monitoring/api/v3#project_name) of the
   * parent Metrics Scope. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /**
   * Optional. The Service id to use for this Service. If omitted, an id will be
   * generated instead. Must match the pattern `[a-z0-9\-]+`
   */
  serviceId: string;
  /** Required. The `Service` to create. */
  service: Service | undefined;
}

/** The `GetService` request. */
export interface GetServiceRequest {
  /**
   * Required. Resource name of the `Service`. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
   */
  name: string;
}

/** The `ListServices` request. */
export interface ListServicesRequest {
  /**
   * Required. Resource name of the parent containing the listed services,
   * either a [project](https://cloud.google.com/monitoring/api/v3#project_name)
   * or a Monitoring Metrics Scope. The formats are:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *     workspaces/[HOST_PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /**
   * A filter specifying what `Service`s to return. The filter supports
   * filtering on a particular service-identifier type or one of its attributes.
   *
   * To filter on a particular service-identifier type, the `identifier_case`
   * refers to which option in the `identifier` field is populated. For example,
   * the filter `identifier_case = "CUSTOM"` would match all services with a
   * value for the `custom` field. Valid options include "CUSTOM", "APP_ENGINE",
   * "MESH_ISTIO", and the other options listed at
   * https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services#Service
   *
   * To filter on an attribute of a service-identifier type, apply the filter
   * name by using the snake case of the service-identifier type and the
   * attribute of that service-identifier type, and join the two with a period.
   * For example, to filter by the `meshUid` field of the `MeshIstio`
   * service-identifier type, you must filter on `mesh_istio.mesh_uid =
   * "123"` to match all services with mesh UID "123". Service-identifier types
   * and their attributes are described at
   * https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services#Service
   */
  filter: string;
  /**
   * A non-negative number that is the maximum number of results to return.
   * When 0, use default page size.
   */
  pageSize: number;
  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   */
  pageToken: string;
}

/** The `ListServices` response. */
export interface ListServicesResponse {
  /** The `Service`s matching the specified filter. */
  services: Service[];
  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `page_token` in the next call to this method.
   */
  nextPageToken: string;
}

/** The `UpdateService` request. */
export interface UpdateServiceRequest {
  /**
   * Required. The `Service` to draw updates from.
   * The given `name` specifies the resource to update.
   */
  service:
    | Service
    | undefined;
  /** A set of field paths defining which fields to use for the update. */
  updateMask: string[] | undefined;
}

/** The `DeleteService` request. */
export interface DeleteServiceRequest {
  /**
   * Required. Resource name of the `Service` to delete. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
   */
  name: string;
}

/** The `CreateServiceLevelObjective` request. */
export interface CreateServiceLevelObjectiveRequest {
  /**
   * Required. Resource name of the parent `Service`. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
   */
  parent: string;
  /**
   * Optional. The ServiceLevelObjective id to use for this
   * ServiceLevelObjective. If omitted, an id will be generated instead. Must
   * match the pattern `^[a-zA-Z0-9-_:.]+$`
   */
  serviceLevelObjectiveId: string;
  /**
   * Required. The `ServiceLevelObjective` to create.
   * The provided `name` will be respected if no `ServiceLevelObjective` exists
   * with this name.
   */
  serviceLevelObjective: ServiceLevelObjective | undefined;
}

/** The `GetServiceLevelObjective` request. */
export interface GetServiceLevelObjectiveRequest {
  /**
   * Required. Resource name of the `ServiceLevelObjective` to get. The format
   * is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
   */
  name: string;
  /**
   * View of the `ServiceLevelObjective` to return. If `DEFAULT`, return the
   * `ServiceLevelObjective` as originally defined. If `EXPLICIT` and the
   * `ServiceLevelObjective` is defined in terms of a `BasicSli`, replace the
   * `BasicSli` with a `RequestBasedSli` spelling out how the SLI is computed.
   */
  view: ServiceLevelObjective_View;
}

/** The `ListServiceLevelObjectives` request. */
export interface ListServiceLevelObjectivesRequest {
  /**
   * Required. Resource name of the parent containing the listed SLOs, either a
   * project or a Monitoring Metrics Scope. The formats are:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
   *     workspaces/[HOST_PROJECT_ID_OR_NUMBER]/services/-
   */
  parent: string;
  /** A filter specifying what `ServiceLevelObjective`s to return. */
  filter: string;
  /**
   * A non-negative number that is the maximum number of results to return.
   * When 0, use default page size.
   */
  pageSize: number;
  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   */
  pageToken: string;
  /**
   * View of the `ServiceLevelObjective`s to return. If `DEFAULT`, return each
   * `ServiceLevelObjective` as originally defined. If `EXPLICIT` and the
   * `ServiceLevelObjective` is defined in terms of a `BasicSli`, replace the
   * `BasicSli` with a `RequestBasedSli` spelling out how the SLI is computed.
   */
  view: ServiceLevelObjective_View;
}

/** The `ListServiceLevelObjectives` response. */
export interface ListServiceLevelObjectivesResponse {
  /** The `ServiceLevelObjective`s matching the specified filter. */
  serviceLevelObjectives: ServiceLevelObjective[];
  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `page_token` in the next call to this method.
   */
  nextPageToken: string;
}

/** The `UpdateServiceLevelObjective` request. */
export interface UpdateServiceLevelObjectiveRequest {
  /**
   * Required. The `ServiceLevelObjective` to draw updates from.
   * The given `name` specifies the resource to update.
   */
  serviceLevelObjective:
    | ServiceLevelObjective
    | undefined;
  /** A set of field paths defining which fields to use for the update. */
  updateMask: string[] | undefined;
}

/** The `DeleteServiceLevelObjective` request. */
export interface DeleteServiceLevelObjectiveRequest {
  /**
   * Required. Resource name of the `ServiceLevelObjective` to delete. The
   * format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
   */
  name: string;
}

function createBaseCreateServiceRequest(): CreateServiceRequest {
  return { parent: "", serviceId: "", service: undefined };
}

export const CreateServiceRequest: MessageFns<CreateServiceRequest> = {
  encode(message: CreateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serviceId !== "") {
      writer.uint32(26).string(message.serviceId);
    }
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
    };
  },

  toJSON(message: CreateServiceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    return CreateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    const message = createBaseCreateServiceRequest();
    message.parent = object.parent ?? "";
    message.serviceId = object.serviceId ?? "";
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseGetServiceRequest(): GetServiceRequest {
  return { name: "" };
}

export const GetServiceRequest: MessageFns<GetServiceRequest> = {
  encode(message: GetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRequest>): GetServiceRequest {
    return GetServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRequest>): GetServiceRequest {
    const message = createBaseGetServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListServicesRequest(): ListServicesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListServicesRequest: MessageFns<ListServicesRequest> = {
  encode(message: ListServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesRequest>): ListServicesRequest {
    return ListServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesRequest>): ListServicesRequest {
    const message = createBaseListServicesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListServicesResponse(): ListServicesResponse {
  return { services: [], nextPageToken: "" };
}

export const ListServicesResponse: MessageFns<ListServicesResponse> = {
  encode(message: ListServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesResponse {
    return {
      services: globalThis.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesResponse>): ListServicesResponse {
    return ListServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesResponse>): ListServicesResponse {
    const message = createBaseListServicesResponse();
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateServiceRequest(): UpdateServiceRequest {
  return { service: undefined, updateMask: undefined };
}

export const UpdateServiceRequest: MessageFns<UpdateServiceRequest> = {
  encode(message: UpdateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServiceRequest {
    return {
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateServiceRequest): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    return UpdateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    const message = createBaseUpdateServiceRequest();
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteServiceRequest(): DeleteServiceRequest {
  return { name: "" };
}

export const DeleteServiceRequest: MessageFns<DeleteServiceRequest> = {
  encode(message: DeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    return DeleteServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    const message = createBaseDeleteServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateServiceLevelObjectiveRequest(): CreateServiceLevelObjectiveRequest {
  return { parent: "", serviceLevelObjectiveId: "", serviceLevelObjective: undefined };
}

export const CreateServiceLevelObjectiveRequest: MessageFns<CreateServiceLevelObjectiveRequest> = {
  encode(message: CreateServiceLevelObjectiveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.serviceLevelObjectiveId !== "") {
      writer.uint32(26).string(message.serviceLevelObjectiveId);
    }
    if (message.serviceLevelObjective !== undefined) {
      ServiceLevelObjective.encode(message.serviceLevelObjective, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceLevelObjectiveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceLevelObjectiveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceLevelObjectiveId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceLevelObjective = ServiceLevelObjective.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceLevelObjectiveRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      serviceLevelObjectiveId: isSet(object.serviceLevelObjectiveId)
        ? globalThis.String(object.serviceLevelObjectiveId)
        : "",
      serviceLevelObjective: isSet(object.serviceLevelObjective)
        ? ServiceLevelObjective.fromJSON(object.serviceLevelObjective)
        : undefined,
    };
  },

  toJSON(message: CreateServiceLevelObjectiveRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.serviceLevelObjectiveId !== "") {
      obj.serviceLevelObjectiveId = message.serviceLevelObjectiveId;
    }
    if (message.serviceLevelObjective !== undefined) {
      obj.serviceLevelObjective = ServiceLevelObjective.toJSON(message.serviceLevelObjective);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceLevelObjectiveRequest>): CreateServiceLevelObjectiveRequest {
    return CreateServiceLevelObjectiveRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceLevelObjectiveRequest>): CreateServiceLevelObjectiveRequest {
    const message = createBaseCreateServiceLevelObjectiveRequest();
    message.parent = object.parent ?? "";
    message.serviceLevelObjectiveId = object.serviceLevelObjectiveId ?? "";
    message.serviceLevelObjective =
      (object.serviceLevelObjective !== undefined && object.serviceLevelObjective !== null)
        ? ServiceLevelObjective.fromPartial(object.serviceLevelObjective)
        : undefined;
    return message;
  },
};

function createBaseGetServiceLevelObjectiveRequest(): GetServiceLevelObjectiveRequest {
  return { name: "", view: 0 };
}

export const GetServiceLevelObjectiveRequest: MessageFns<GetServiceLevelObjectiveRequest> = {
  encode(message: GetServiceLevelObjectiveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceLevelObjectiveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceLevelObjectiveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceLevelObjectiveRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? serviceLevelObjective_ViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetServiceLevelObjectiveRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = serviceLevelObjective_ViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceLevelObjectiveRequest>): GetServiceLevelObjectiveRequest {
    return GetServiceLevelObjectiveRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceLevelObjectiveRequest>): GetServiceLevelObjectiveRequest {
    const message = createBaseGetServiceLevelObjectiveRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListServiceLevelObjectivesRequest(): ListServiceLevelObjectivesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", view: 0 };
}

export const ListServiceLevelObjectivesRequest: MessageFns<ListServiceLevelObjectivesRequest> = {
  encode(message: ListServiceLevelObjectivesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(40).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceLevelObjectivesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceLevelObjectivesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceLevelObjectivesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? serviceLevelObjective_ViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListServiceLevelObjectivesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = serviceLevelObjective_ViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceLevelObjectivesRequest>): ListServiceLevelObjectivesRequest {
    return ListServiceLevelObjectivesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceLevelObjectivesRequest>): ListServiceLevelObjectivesRequest {
    const message = createBaseListServiceLevelObjectivesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListServiceLevelObjectivesResponse(): ListServiceLevelObjectivesResponse {
  return { serviceLevelObjectives: [], nextPageToken: "" };
}

export const ListServiceLevelObjectivesResponse: MessageFns<ListServiceLevelObjectivesResponse> = {
  encode(message: ListServiceLevelObjectivesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.serviceLevelObjectives) {
      ServiceLevelObjective.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceLevelObjectivesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceLevelObjectivesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceLevelObjectives.push(ServiceLevelObjective.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceLevelObjectivesResponse {
    return {
      serviceLevelObjectives: globalThis.Array.isArray(object?.serviceLevelObjectives)
        ? object.serviceLevelObjectives.map((e: any) => ServiceLevelObjective.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServiceLevelObjectivesResponse): unknown {
    const obj: any = {};
    if (message.serviceLevelObjectives?.length) {
      obj.serviceLevelObjectives = message.serviceLevelObjectives.map((e) => ServiceLevelObjective.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceLevelObjectivesResponse>): ListServiceLevelObjectivesResponse {
    return ListServiceLevelObjectivesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceLevelObjectivesResponse>): ListServiceLevelObjectivesResponse {
    const message = createBaseListServiceLevelObjectivesResponse();
    message.serviceLevelObjectives = object.serviceLevelObjectives?.map((e) => ServiceLevelObjective.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateServiceLevelObjectiveRequest(): UpdateServiceLevelObjectiveRequest {
  return { serviceLevelObjective: undefined, updateMask: undefined };
}

export const UpdateServiceLevelObjectiveRequest: MessageFns<UpdateServiceLevelObjectiveRequest> = {
  encode(message: UpdateServiceLevelObjectiveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceLevelObjective !== undefined) {
      ServiceLevelObjective.encode(message.serviceLevelObjective, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServiceLevelObjectiveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServiceLevelObjectiveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceLevelObjective = ServiceLevelObjective.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServiceLevelObjectiveRequest {
    return {
      serviceLevelObjective: isSet(object.serviceLevelObjective)
        ? ServiceLevelObjective.fromJSON(object.serviceLevelObjective)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateServiceLevelObjectiveRequest): unknown {
    const obj: any = {};
    if (message.serviceLevelObjective !== undefined) {
      obj.serviceLevelObjective = ServiceLevelObjective.toJSON(message.serviceLevelObjective);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServiceLevelObjectiveRequest>): UpdateServiceLevelObjectiveRequest {
    return UpdateServiceLevelObjectiveRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServiceLevelObjectiveRequest>): UpdateServiceLevelObjectiveRequest {
    const message = createBaseUpdateServiceLevelObjectiveRequest();
    message.serviceLevelObjective =
      (object.serviceLevelObjective !== undefined && object.serviceLevelObjective !== null)
        ? ServiceLevelObjective.fromPartial(object.serviceLevelObjective)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteServiceLevelObjectiveRequest(): DeleteServiceLevelObjectiveRequest {
  return { name: "" };
}

export const DeleteServiceLevelObjectiveRequest: MessageFns<DeleteServiceLevelObjectiveRequest> = {
  encode(message: DeleteServiceLevelObjectiveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceLevelObjectiveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceLevelObjectiveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceLevelObjectiveRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteServiceLevelObjectiveRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceLevelObjectiveRequest>): DeleteServiceLevelObjectiveRequest {
    return DeleteServiceLevelObjectiveRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceLevelObjectiveRequest>): DeleteServiceLevelObjectiveRequest {
    const message = createBaseDeleteServiceLevelObjectiveRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * The Cloud Monitoring Service-Oriented Monitoring API has endpoints for
 * managing and querying aspects of a Metrics Scope's services. These include
 * the `Service`'s monitored resources, its Service-Level Objectives, and a
 * taxonomy of categorized Health Metrics.
 */
export type ServiceMonitoringServiceDefinition = typeof ServiceMonitoringServiceDefinition;
export const ServiceMonitoringServiceDefinition = {
  name: "ServiceMonitoringService",
  fullName: "google.monitoring.v3.ServiceMonitoringService",
  methods: {
    /** Create a `Service`. */
    createService: {
      name: "CreateService",
      requestType: CreateServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 115, 101, 114, 118, 105, 99, 101])],
          578365826: [
            Buffer.from([
              36,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              25,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Get the named `Service`. */
    getService: {
      name: "GetService",
      requestType: GetServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List `Service`s for this Metrics Scope. */
    listServices: {
      name: "ListServices",
      requestType: ListServicesRequest,
      requestStream: false,
      responseType: ListServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Update this `Service`. */
    updateService: {
      name: "UpdateService",
      requestType: UpdateServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 115, 101, 114, 118, 105, 99, 101])],
          578365826: [
            Buffer.from([
              44,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              33,
              47,
              118,
              51,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Soft delete this `Service`. */
    deleteService: {
      name: "DeleteService",
      requestType: DeleteServiceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              27,
              42,
              25,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a `ServiceLevelObjective` for the given `Service`. */
    createServiceLevelObjective: {
      name: "CreateServiceLevelObjective",
      requestType: CreateServiceLevelObjectiveRequest,
      requestStream: false,
      responseType: ServiceLevelObjective,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              108,
              101,
              118,
              101,
              108,
              95,
              111,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              23,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              108,
              101,
              118,
              101,
              108,
              95,
              111,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              34,
              50,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              76,
              101,
              118,
              101,
              108,
              79,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Get a `ServiceLevelObjective` by name. */
    getServiceLevelObjective: {
      name: "GetServiceLevelObjective",
      requestType: GetServiceLevelObjectiveRequest,
      requestStream: false,
      responseType: ServiceLevelObjective,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              76,
              101,
              118,
              101,
              108,
              79,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List the `ServiceLevelObjective`s for the given `Service`. */
    listServiceLevelObjectives: {
      name: "ListServiceLevelObjectives",
      requestType: ListServiceLevelObjectivesRequest,
      requestStream: false,
      responseType: ListServiceLevelObjectivesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              76,
              101,
              118,
              101,
              108,
              79,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Update the given `ServiceLevelObjective`. */
    updateServiceLevelObjective: {
      name: "UpdateServiceLevelObjective",
      requestType: UpdateServiceLevelObjectiveRequest,
      requestStream: false,
      responseType: ServiceLevelObjective,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              108,
              101,
              118,
              101,
              108,
              95,
              111,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              23,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              108,
              101,
              118,
              101,
              108,
              95,
              111,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              50,
              74,
              47,
              118,
              51,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              108,
              101,
              118,
              101,
              108,
              95,
              111,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              76,
              101,
              118,
              101,
              108,
              79,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete the given `ServiceLevelObjective`. */
    deleteServiceLevelObjective: {
      name: "DeleteServiceLevelObjective",
      requestType: DeleteServiceLevelObjectiveRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              76,
              101,
              118,
              101,
              108,
              79,
              98,
              106,
              101,
              99,
              116,
              105,
              118,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServiceMonitoringServiceImplementation<CallContextExt = {}> {
  /** Create a `Service`. */
  createService(request: CreateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** Get the named `Service`. */
  getService(request: GetServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** List `Service`s for this Metrics Scope. */
  listServices(
    request: ListServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicesResponse>>;
  /** Update this `Service`. */
  updateService(request: UpdateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** Soft delete this `Service`. */
  deleteService(request: DeleteServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Create a `ServiceLevelObjective` for the given `Service`. */
  createServiceLevelObjective(
    request: CreateServiceLevelObjectiveRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServiceLevelObjective>>;
  /** Get a `ServiceLevelObjective` by name. */
  getServiceLevelObjective(
    request: GetServiceLevelObjectiveRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServiceLevelObjective>>;
  /** List the `ServiceLevelObjective`s for the given `Service`. */
  listServiceLevelObjectives(
    request: ListServiceLevelObjectivesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServiceLevelObjectivesResponse>>;
  /** Update the given `ServiceLevelObjective`. */
  updateServiceLevelObjective(
    request: UpdateServiceLevelObjectiveRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServiceLevelObjective>>;
  /** Delete the given `ServiceLevelObjective`. */
  deleteServiceLevelObjective(
    request: DeleteServiceLevelObjectiveRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface ServiceMonitoringServiceClient<CallOptionsExt = {}> {
  /** Create a `Service`. */
  createService(request: DeepPartial<CreateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** Get the named `Service`. */
  getService(request: DeepPartial<GetServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** List `Service`s for this Metrics Scope. */
  listServices(
    request: DeepPartial<ListServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicesResponse>;
  /** Update this `Service`. */
  updateService(request: DeepPartial<UpdateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** Soft delete this `Service`. */
  deleteService(request: DeepPartial<DeleteServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Create a `ServiceLevelObjective` for the given `Service`. */
  createServiceLevelObjective(
    request: DeepPartial<CreateServiceLevelObjectiveRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServiceLevelObjective>;
  /** Get a `ServiceLevelObjective` by name. */
  getServiceLevelObjective(
    request: DeepPartial<GetServiceLevelObjectiveRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServiceLevelObjective>;
  /** List the `ServiceLevelObjective`s for the given `Service`. */
  listServiceLevelObjectives(
    request: DeepPartial<ListServiceLevelObjectivesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServiceLevelObjectivesResponse>;
  /** Update the given `ServiceLevelObjective`. */
  updateServiceLevelObjective(
    request: DeepPartial<UpdateServiceLevelObjectiveRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServiceLevelObjective>;
  /** Delete the given `ServiceLevelObjective`. */
  deleteServiceLevelObjective(
    request: DeepPartial<DeleteServiceLevelObjectiveRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
