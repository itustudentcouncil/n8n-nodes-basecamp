// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/dropped_labels.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.monitoring.v3";

/**
 * A set of (label, value) pairs that were removed from a Distribution
 * time series during aggregation and then added as an attachment to a
 * Distribution.Exemplar.
 *
 * The full label set for the exemplars is constructed by using the dropped
 * pairs in combination with the label values that remain on the aggregated
 * Distribution time series. The constructed full label set can be used to
 * identify the specific entity, such as the instance or job, which might be
 * contributing to a long-tail. However, with dropped labels, the storage
 * requirements are reduced because only the aggregated distribution values for
 * a large group of time series are stored.
 *
 * Note that there are no guarantees on ordering of the labels from
 * exemplar-to-exemplar and from distribution-to-distribution in the same
 * stream, and there may be duplicates.  It is up to clients to resolve any
 * ambiguities.
 */
export interface DroppedLabels {
  /** Map from label to its value, for all labels dropped in any aggregation. */
  label: { [key: string]: string };
}

export interface DroppedLabels_LabelEntry {
  key: string;
  value: string;
}

function createBaseDroppedLabels(): DroppedLabels {
  return { label: {} };
}

export const DroppedLabels: MessageFns<DroppedLabels> = {
  encode(message: DroppedLabels, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.label).forEach(([key, value]) => {
      DroppedLabels_LabelEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DroppedLabels {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDroppedLabels();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = DroppedLabels_LabelEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.label[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DroppedLabels {
    return {
      label: isObject(object.label)
        ? Object.entries(object.label).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DroppedLabels): unknown {
    const obj: any = {};
    if (message.label) {
      const entries = Object.entries(message.label);
      if (entries.length > 0) {
        obj.label = {};
        entries.forEach(([k, v]) => {
          obj.label[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<DroppedLabels>): DroppedLabels {
    return DroppedLabels.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DroppedLabels>): DroppedLabels {
    const message = createBaseDroppedLabels();
    message.label = Object.entries(object.label ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseDroppedLabels_LabelEntry(): DroppedLabels_LabelEntry {
  return { key: "", value: "" };
}

export const DroppedLabels_LabelEntry: MessageFns<DroppedLabels_LabelEntry> = {
  encode(message: DroppedLabels_LabelEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DroppedLabels_LabelEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDroppedLabels_LabelEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DroppedLabels_LabelEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DroppedLabels_LabelEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DroppedLabels_LabelEntry>): DroppedLabels_LabelEntry {
    return DroppedLabels_LabelEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DroppedLabels_LabelEntry>): DroppedLabels_LabelEntry {
    const message = createBaseDroppedLabels_LabelEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
