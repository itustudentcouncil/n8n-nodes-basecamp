// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/css/v1/css_products.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { CustomAttribute } from "../../type/types.js";
import { Attributes, CssProductStatus } from "./css_product_common.js";

export const protobufPackage = "google.shopping.css.v1";

/** The request message for the `GetCssProduct` method. */
export interface GetCssProductRequest {
  /** Required. The name of the CSS product to retrieve. */
  name: string;
}

/** The processed CSS Product(a.k.a Aggregate Offer internally). */
export interface CssProduct {
  /**
   * The name of the CSS Product.
   * Format:
   * `"accounts/{account}/cssProducts/{css_product}"`
   */
  name: string;
  /** Output only. Your unique raw identifier for the product. */
  rawProvidedId: string;
  /**
   * Output only. The two-letter [ISO
   * 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the
   * product.
   */
  contentLanguage: string;
  /** Output only. The feed label for the product. */
  feedLabel: string;
  /** Output only. A list of product attributes. */
  attributes:
    | Attributes
    | undefined;
  /**
   * Output only. A list of custom (CSS-provided) attributes. It can also be
   * used to submit any attribute of the feed specification in its generic form
   * (for example,
   * `{ "name": "size type", "value": "regular" }`).
   * This is useful for submitting attributes not explicitly exposed by the
   * API, such as additional attributes used for Buy on Google.
   */
  customAttributes: CustomAttribute[];
  /**
   * Output only. The status of a product, data validation issues, that is,
   * information about a product computed asynchronously.
   */
  cssProductStatus: CssProductStatus | undefined;
}

/** Request message for the ListCssProducts method. */
export interface ListCssProductsRequest {
  /**
   * Required. The account/domain to list processed CSS Products for.
   * Format: accounts/{account}
   */
  parent: string;
  /**
   * The maximum number of CSS Products to return. The service may return
   * fewer than this value.
   * The maximum value is 1000; values above 1000 will be coerced to 1000. If
   * unspecified, the maximum number of CSS products will be returned.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCssProducts` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCssProducts`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListCssProducts method. */
export interface ListCssProductsResponse {
  /**
   * The processed CSS products from the specified account. These are your
   * processed CSS products after applying rules and supplemental feeds.
   */
  cssProducts: CssProduct[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseGetCssProductRequest(): GetCssProductRequest {
  return { name: "" };
}

export const GetCssProductRequest: MessageFns<GetCssProductRequest> = {
  encode(message: GetCssProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCssProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCssProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCssProductRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCssProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCssProductRequest>): GetCssProductRequest {
    return GetCssProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCssProductRequest>): GetCssProductRequest {
    const message = createBaseGetCssProductRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCssProduct(): CssProduct {
  return {
    name: "",
    rawProvidedId: "",
    contentLanguage: "",
    feedLabel: "",
    attributes: undefined,
    customAttributes: [],
    cssProductStatus: undefined,
  };
}

export const CssProduct: MessageFns<CssProduct> = {
  encode(message: CssProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.rawProvidedId !== "") {
      writer.uint32(18).string(message.rawProvidedId);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(26).string(message.contentLanguage);
    }
    if (message.feedLabel !== "") {
      writer.uint32(34).string(message.feedLabel);
    }
    if (message.attributes !== undefined) {
      Attributes.encode(message.attributes, writer.uint32(42).fork()).join();
    }
    for (const v of message.customAttributes) {
      CustomAttribute.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.cssProductStatus !== undefined) {
      CssProductStatus.encode(message.cssProductStatus, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CssProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCssProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rawProvidedId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.attributes = Attributes.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.customAttributes.push(CustomAttribute.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cssProductStatus = CssProductStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CssProduct {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rawProvidedId: isSet(object.rawProvidedId) ? globalThis.String(object.rawProvidedId) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      attributes: isSet(object.attributes) ? Attributes.fromJSON(object.attributes) : undefined,
      customAttributes: globalThis.Array.isArray(object?.customAttributes)
        ? object.customAttributes.map((e: any) => CustomAttribute.fromJSON(e))
        : [],
      cssProductStatus: isSet(object.cssProductStatus) ? CssProductStatus.fromJSON(object.cssProductStatus) : undefined,
    };
  },

  toJSON(message: CssProduct): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rawProvidedId !== "") {
      obj.rawProvidedId = message.rawProvidedId;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.attributes !== undefined) {
      obj.attributes = Attributes.toJSON(message.attributes);
    }
    if (message.customAttributes?.length) {
      obj.customAttributes = message.customAttributes.map((e) => CustomAttribute.toJSON(e));
    }
    if (message.cssProductStatus !== undefined) {
      obj.cssProductStatus = CssProductStatus.toJSON(message.cssProductStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<CssProduct>): CssProduct {
    return CssProduct.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CssProduct>): CssProduct {
    const message = createBaseCssProduct();
    message.name = object.name ?? "";
    message.rawProvidedId = object.rawProvidedId ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    message.feedLabel = object.feedLabel ?? "";
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? Attributes.fromPartial(object.attributes)
      : undefined;
    message.customAttributes = object.customAttributes?.map((e) => CustomAttribute.fromPartial(e)) || [];
    message.cssProductStatus = (object.cssProductStatus !== undefined && object.cssProductStatus !== null)
      ? CssProductStatus.fromPartial(object.cssProductStatus)
      : undefined;
    return message;
  },
};

function createBaseListCssProductsRequest(): ListCssProductsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCssProductsRequest: MessageFns<ListCssProductsRequest> = {
  encode(message: ListCssProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCssProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCssProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCssProductsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCssProductsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCssProductsRequest>): ListCssProductsRequest {
    return ListCssProductsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCssProductsRequest>): ListCssProductsRequest {
    const message = createBaseListCssProductsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCssProductsResponse(): ListCssProductsResponse {
  return { cssProducts: [], nextPageToken: "" };
}

export const ListCssProductsResponse: MessageFns<ListCssProductsResponse> = {
  encode(message: ListCssProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cssProducts) {
      CssProduct.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCssProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCssProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cssProducts.push(CssProduct.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCssProductsResponse {
    return {
      cssProducts: globalThis.Array.isArray(object?.cssProducts)
        ? object.cssProducts.map((e: any) => CssProduct.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCssProductsResponse): unknown {
    const obj: any = {};
    if (message.cssProducts?.length) {
      obj.cssProducts = message.cssProducts.map((e) => CssProduct.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCssProductsResponse>): ListCssProductsResponse {
    return ListCssProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCssProductsResponse>): ListCssProductsResponse {
    const message = createBaseListCssProductsResponse();
    message.cssProducts = object.cssProducts?.map((e) => CssProduct.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service for doing get and list on Css Products(a.k.a Aggregate Offers
 * internally).
 */
export type CssProductsServiceDefinition = typeof CssProductsServiceDefinition;
export const CssProductsServiceDefinition = {
  name: "CssProductsService",
  fullName: "google.shopping.css.v1.CssProductsService",
  methods: {
    /**
     * Retrieves the processed CSS Product from your CSS Center account. After
     * inserting, updating, or deleting a product input, it may take several
     * minutes before the updated final product can be retrieved.
     */
    getCssProduct: {
      name: "GetCssProduct",
      requestType: GetCssProductRequest,
      requestStream: false,
      responseType: CssProduct,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              115,
              115,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the processed CSS Products in your CSS Center account. The response
     * might contain fewer items than specified by pageSize. Rely on pageToken to
     * determine if there are more items to be requested.
     *
     * After inserting, updating, or deleting a CSS product input, it may
     * take several minutes before the updated processed CSS product can be
     * retrieved.
     */
    listCssProducts: {
      name: "ListCssProducts",
      requestType: ListCssProductsRequest,
      requestStream: false,
      responseType: ListCssProductsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              115,
              115,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CssProductsServiceImplementation<CallContextExt = {}> {
  /**
   * Retrieves the processed CSS Product from your CSS Center account. After
   * inserting, updating, or deleting a product input, it may take several
   * minutes before the updated final product can be retrieved.
   */
  getCssProduct(request: GetCssProductRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CssProduct>>;
  /**
   * Lists the processed CSS Products in your CSS Center account. The response
   * might contain fewer items than specified by pageSize. Rely on pageToken to
   * determine if there are more items to be requested.
   *
   * After inserting, updating, or deleting a CSS product input, it may
   * take several minutes before the updated processed CSS product can be
   * retrieved.
   */
  listCssProducts(
    request: ListCssProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCssProductsResponse>>;
}

export interface CssProductsServiceClient<CallOptionsExt = {}> {
  /**
   * Retrieves the processed CSS Product from your CSS Center account. After
   * inserting, updating, or deleting a product input, it may take several
   * minutes before the updated final product can be retrieved.
   */
  getCssProduct(
    request: DeepPartial<GetCssProductRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CssProduct>;
  /**
   * Lists the processed CSS Products in your CSS Center account. The response
   * might contain fewer items than specified by pageSize. Rely on pageToken to
   * determine if there are more items to be requested.
   *
   * After inserting, updating, or deleting a CSS product input, it may
   * take several minutes before the updated processed CSS product can be
   * retrieved.
   */
  listCssProducts(
    request: DeepPartial<ListCssProductsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCssProductsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
