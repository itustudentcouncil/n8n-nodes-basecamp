// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/css/v1/accounts_labels.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";

export const protobufPackage = "google.shopping.css.v1";

/** Label assigned by CSS domain or CSS group to one of its sub-accounts. */
export interface AccountLabel {
  /**
   * The resource name of the label.
   * Format: accounts/{account}/labels/{label}
   */
  name: string;
  /** Output only. The ID of the label. */
  labelId: Long;
  /** Output only. The ID of account this label belongs to. */
  accountId: Long;
  /** The display name of this label. */
  displayName?:
    | string
    | undefined;
  /** The description of this label. */
  description?:
    | string
    | undefined;
  /** Output only. The type of this label. */
  labelType: AccountLabel_LabelType;
}

/** The label type. */
export enum AccountLabel_LabelType {
  /** LABEL_TYPE_UNSPECIFIED - Unknown label type. */
  LABEL_TYPE_UNSPECIFIED = 0,
  /** MANUAL - Indicates that the label was created manually. */
  MANUAL = 1,
  /** AUTOMATIC - Indicates that the label was created automatically by CSS Center. */
  AUTOMATIC = 2,
  UNRECOGNIZED = -1,
}

export function accountLabel_LabelTypeFromJSON(object: any): AccountLabel_LabelType {
  switch (object) {
    case 0:
    case "LABEL_TYPE_UNSPECIFIED":
      return AccountLabel_LabelType.LABEL_TYPE_UNSPECIFIED;
    case 1:
    case "MANUAL":
      return AccountLabel_LabelType.MANUAL;
    case 2:
    case "AUTOMATIC":
      return AccountLabel_LabelType.AUTOMATIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountLabel_LabelType.UNRECOGNIZED;
  }
}

export function accountLabel_LabelTypeToJSON(object: AccountLabel_LabelType): string {
  switch (object) {
    case AccountLabel_LabelType.LABEL_TYPE_UNSPECIFIED:
      return "LABEL_TYPE_UNSPECIFIED";
    case AccountLabel_LabelType.MANUAL:
      return "MANUAL";
    case AccountLabel_LabelType.AUTOMATIC:
      return "AUTOMATIC";
    case AccountLabel_LabelType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for the `ListAccountLabels` method. */
export interface ListAccountLabelsRequest {
  /**
   * Required. The parent account.
   * Format: accounts/{account}
   */
  parent: string;
  /**
   * The maximum number of labels to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 labels will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAccountLabels` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAccountLabels` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the `ListAccountLabels` method. */
export interface ListAccountLabelsResponse {
  /** The labels from the specified account. */
  accountLabels: AccountLabel[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for the 'CreateAccountLanel' method. */
export interface CreateAccountLabelRequest {
  /**
   * Required. The parent account.
   * Format: accounts/{account}
   */
  parent: string;
  /** Required. The label to create. */
  accountLabel: AccountLabel | undefined;
}

/** Request message for the `UpdateAccountLabel` method. */
export interface UpdateAccountLabelRequest {
  /** Required. The updated label. All fields must be provided. */
  accountLabel: AccountLabel | undefined;
}

/** Request message for the 'DeleteAccountLabel' method. */
export interface DeleteAccountLabelRequest {
  /**
   * Required. The name of the label to delete.
   * Format:  accounts/{account}/labels/{label}
   */
  name: string;
}

function createBaseAccountLabel(): AccountLabel {
  return {
    name: "",
    labelId: Long.ZERO,
    accountId: Long.ZERO,
    displayName: undefined,
    description: undefined,
    labelType: 0,
  };
}

export const AccountLabel: MessageFns<AccountLabel> = {
  encode(message: AccountLabel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.labelId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.labelId.toString());
    }
    if (!message.accountId.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.accountId.toString());
    }
    if (message.displayName !== undefined) {
      writer.uint32(34).string(message.displayName);
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    if (message.labelType !== 0) {
      writer.uint32(48).int32(message.labelType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountLabel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.labelId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.accountId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.labelType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountLabel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      labelId: isSet(object.labelId) ? Long.fromValue(object.labelId) : Long.ZERO,
      accountId: isSet(object.accountId) ? Long.fromValue(object.accountId) : Long.ZERO,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      labelType: isSet(object.labelType) ? accountLabel_LabelTypeFromJSON(object.labelType) : 0,
    };
  },

  toJSON(message: AccountLabel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.labelId.equals(Long.ZERO)) {
      obj.labelId = (message.labelId || Long.ZERO).toString();
    }
    if (!message.accountId.equals(Long.ZERO)) {
      obj.accountId = (message.accountId || Long.ZERO).toString();
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.labelType !== 0) {
      obj.labelType = accountLabel_LabelTypeToJSON(message.labelType);
    }
    return obj;
  },

  create(base?: DeepPartial<AccountLabel>): AccountLabel {
    return AccountLabel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountLabel>): AccountLabel {
    const message = createBaseAccountLabel();
    message.name = object.name ?? "";
    message.labelId = (object.labelId !== undefined && object.labelId !== null)
      ? Long.fromValue(object.labelId)
      : Long.ZERO;
    message.accountId = (object.accountId !== undefined && object.accountId !== null)
      ? Long.fromValue(object.accountId)
      : Long.ZERO;
    message.displayName = object.displayName ?? undefined;
    message.description = object.description ?? undefined;
    message.labelType = object.labelType ?? 0;
    return message;
  },
};

function createBaseListAccountLabelsRequest(): ListAccountLabelsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAccountLabelsRequest: MessageFns<ListAccountLabelsRequest> = {
  encode(message: ListAccountLabelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountLabelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountLabelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountLabelsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAccountLabelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountLabelsRequest>): ListAccountLabelsRequest {
    return ListAccountLabelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountLabelsRequest>): ListAccountLabelsRequest {
    const message = createBaseListAccountLabelsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAccountLabelsResponse(): ListAccountLabelsResponse {
  return { accountLabels: [], nextPageToken: "" };
}

export const ListAccountLabelsResponse: MessageFns<ListAccountLabelsResponse> = {
  encode(message: ListAccountLabelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accountLabels) {
      AccountLabel.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountLabelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountLabelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountLabels.push(AccountLabel.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountLabelsResponse {
    return {
      accountLabels: globalThis.Array.isArray(object?.accountLabels)
        ? object.accountLabels.map((e: any) => AccountLabel.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountLabelsResponse): unknown {
    const obj: any = {};
    if (message.accountLabels?.length) {
      obj.accountLabels = message.accountLabels.map((e) => AccountLabel.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountLabelsResponse>): ListAccountLabelsResponse {
    return ListAccountLabelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountLabelsResponse>): ListAccountLabelsResponse {
    const message = createBaseListAccountLabelsResponse();
    message.accountLabels = object.accountLabels?.map((e) => AccountLabel.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateAccountLabelRequest(): CreateAccountLabelRequest {
  return { parent: "", accountLabel: undefined };
}

export const CreateAccountLabelRequest: MessageFns<CreateAccountLabelRequest> = {
  encode(message: CreateAccountLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.accountLabel !== undefined) {
      AccountLabel.encode(message.accountLabel, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccountLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountLabel = AccountLabel.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountLabelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      accountLabel: isSet(object.accountLabel) ? AccountLabel.fromJSON(object.accountLabel) : undefined,
    };
  },

  toJSON(message: CreateAccountLabelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.accountLabel !== undefined) {
      obj.accountLabel = AccountLabel.toJSON(message.accountLabel);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccountLabelRequest>): CreateAccountLabelRequest {
    return CreateAccountLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccountLabelRequest>): CreateAccountLabelRequest {
    const message = createBaseCreateAccountLabelRequest();
    message.parent = object.parent ?? "";
    message.accountLabel = (object.accountLabel !== undefined && object.accountLabel !== null)
      ? AccountLabel.fromPartial(object.accountLabel)
      : undefined;
    return message;
  },
};

function createBaseUpdateAccountLabelRequest(): UpdateAccountLabelRequest {
  return { accountLabel: undefined };
}

export const UpdateAccountLabelRequest: MessageFns<UpdateAccountLabelRequest> = {
  encode(message: UpdateAccountLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountLabel !== undefined) {
      AccountLabel.encode(message.accountLabel, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccountLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountLabel = AccountLabel.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountLabelRequest {
    return { accountLabel: isSet(object.accountLabel) ? AccountLabel.fromJSON(object.accountLabel) : undefined };
  },

  toJSON(message: UpdateAccountLabelRequest): unknown {
    const obj: any = {};
    if (message.accountLabel !== undefined) {
      obj.accountLabel = AccountLabel.toJSON(message.accountLabel);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccountLabelRequest>): UpdateAccountLabelRequest {
    return UpdateAccountLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccountLabelRequest>): UpdateAccountLabelRequest {
    const message = createBaseUpdateAccountLabelRequest();
    message.accountLabel = (object.accountLabel !== undefined && object.accountLabel !== null)
      ? AccountLabel.fromPartial(object.accountLabel)
      : undefined;
    return message;
  },
};

function createBaseDeleteAccountLabelRequest(): DeleteAccountLabelRequest {
  return { name: "" };
}

export const DeleteAccountLabelRequest: MessageFns<DeleteAccountLabelRequest> = {
  encode(message: DeleteAccountLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccountLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountLabelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAccountLabelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAccountLabelRequest>): DeleteAccountLabelRequest {
    return DeleteAccountLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAccountLabelRequest>): DeleteAccountLabelRequest {
    const message = createBaseDeleteAccountLabelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Manages Merchant Center and CSS accounts labels. */
export type AccountLabelsServiceDefinition = typeof AccountLabelsServiceDefinition;
export const AccountLabelsServiceDefinition = {
  name: "AccountLabelsService",
  fullName: "google.shopping.css.v1.AccountLabelsService",
  methods: {
    /** Lists the labels assigned to an account. */
    listAccountLabels: {
      name: "ListAccountLabels",
      requestType: ListAccountLabelsRequest,
      requestStream: false,
      responseType: ListAccountLabelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              97,
              98,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new label, not assigned to any account. */
    createAccountLabel: {
      name: "CreateAccountLabel",
      requestType: CreateAccountLabelRequest,
      requestStream: false,
      responseType: AccountLabel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
          578365826: [
            Buffer.from([
              47,
              58,
              13,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              108,
              97,
              98,
              101,
              108,
              34,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              97,
              98,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a label. */
    updateAccountLabel: {
      name: "UpdateAccountLabel",
      requestType: UpdateAccountLabelRequest,
      requestStream: false,
      responseType: AccountLabel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 97, 99, 99, 111, 117, 110, 116, 95, 108, 97, 98, 101, 108])],
          578365826: [
            Buffer.from([
              61,
              58,
              13,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              108,
              97,
              98,
              101,
              108,
              50,
              44,
              47,
              118,
              49,
              47,
              123,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              108,
              97,
              98,
              101,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              97,
              98,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a label and removes it from all accounts to which it was assigned. */
    deleteAccountLabel: {
      name: "DeleteAccountLabel",
      requestType: DeleteAccountLabelRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              32,
              42,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              97,
              98,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AccountLabelsServiceImplementation<CallContextExt = {}> {
  /** Lists the labels assigned to an account. */
  listAccountLabels(
    request: ListAccountLabelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountLabelsResponse>>;
  /** Creates a new label, not assigned to any account. */
  createAccountLabel(
    request: CreateAccountLabelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccountLabel>>;
  /** Updates a label. */
  updateAccountLabel(
    request: UpdateAccountLabelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccountLabel>>;
  /** Deletes a label and removes it from all accounts to which it was assigned. */
  deleteAccountLabel(
    request: DeleteAccountLabelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface AccountLabelsServiceClient<CallOptionsExt = {}> {
  /** Lists the labels assigned to an account. */
  listAccountLabels(
    request: DeepPartial<ListAccountLabelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountLabelsResponse>;
  /** Creates a new label, not assigned to any account. */
  createAccountLabel(
    request: DeepPartial<CreateAccountLabelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccountLabel>;
  /** Updates a label. */
  updateAccountLabel(
    request: DeepPartial<UpdateAccountLabelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccountLabel>;
  /** Deletes a label and removes it from all accounts to which it was assigned. */
  deleteAccountLabel(
    request: DeepPartial<DeleteAccountLabelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
