// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/inventories/v1beta/regionalinventory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { Interval } from "../../../../type/interval.js";
import { CustomAttribute, Price } from "../../../type/types.js";

export const protobufPackage = "google.shopping.merchant.inventories.v1beta";

/**
 * Regional inventory information for the product. Represents specific
 * information like price and availability for a given product in a specific
 * [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region].
 * For a list of all accepted attribute values, see the [regional product
 * inventory data
 * specification](https://support.google.com/merchants/answer/9698880).
 */
export interface RegionalInventory {
  /**
   * Output only. The name of the `RegionalInventory` resource.
   * Format:
   * `{regional_inventory.name=accounts/{account}/products/{product}/regionalInventories/{region}`
   */
  name: string;
  /**
   * Output only. The account that owns the product. This field will be ignored
   * if set by the client.
   */
  account: Long;
  /**
   * Required. Immutable. ID of the region for this
   * `RegionalInventory` resource. See the [Regional availability and
   * pricing](https://support.google.com/merchants/answer/9698880) for more
   * details.
   */
  region: string;
  /** Price of the product in this region. */
  price:
    | Price
    | undefined;
  /**
   * Sale price of the product in this region. Mandatory if
   * [`salePriceEffectiveDate`][google.shopping.merchant.inventories.v1beta.RegionalInventory.sale_price_effective_date]
   * is defined.
   */
  salePrice:
    | Price
    | undefined;
  /**
   * The `TimePeriod` of the
   * sale price in this region.
   */
  salePriceEffectiveDate:
    | Interval
    | undefined;
  /**
   * Availability of the product in this region.
   * For accepted attribute values, see the [regional product inventory data
   * specification](https://support.google.com/merchants/answer/3061342)
   */
  availability?:
    | string
    | undefined;
  /**
   * A list of custom (merchant-provided) attributes. You can also use
   * `CustomAttribute` to submit any attribute of the data specification in its
   * generic form.
   */
  customAttributes: CustomAttribute[];
}

/** Request message for the `ListRegionalInventories` method. */
export interface ListRegionalInventoriesRequest {
  /**
   * Required. The `name` of the parent product to list `RegionalInventory`
   * resources for. Format: `accounts/{account}/products/{product}`
   */
  parent: string;
  /**
   * The maximum number of `RegionalInventory` resources for the given product
   * to return. The service returns fewer than this value if the number of
   * inventories for the given product is less that than the `pageSize`. The
   * default value is 25000. The maximum value is 100000; If a value higher than
   * the maximum is specified, then the `pageSize` will default to the maximum.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListRegionalInventories` call.
   * Provide the page token to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListRegionalInventories`
   * must match the call that provided the page token. The token returned as
   * [nextPageToken][google.shopping.merchant.inventories.v1beta.ListRegionalInventoriesResponse.next_page_token]
   * in the response to the previous request.
   */
  pageToken: string;
}

/** Response message for the `ListRegionalInventories` method. */
export interface ListRegionalInventoriesResponse {
  /**
   * The `RegionalInventory` resources for the given product from the specified
   * account.
   */
  regionalInventories: RegionalInventory[];
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for the `InsertRegionalInventory` method. */
export interface InsertRegionalInventoryRequest {
  /**
   * Required. The account and product where this inventory will be inserted.
   * Format: `accounts/{account}/products/{product}`
   */
  parent: string;
  /**
   * Required. Regional inventory information to add to the product. If the
   * product already has a `RegionalInventory` resource for the same `region`,
   * full replacement of the `RegionalInventory` resource is performed.
   */
  regionalInventory: RegionalInventory | undefined;
}

/** Request message for the `DeleteRegionalInventory` method. */
export interface DeleteRegionalInventoryRequest {
  /**
   * Required. The name of the `RegionalInventory` resource to delete.
   * Format:
   * `accounts/{account}/products/{product}/regionalInventories/{region}`
   */
  name: string;
}

function createBaseRegionalInventory(): RegionalInventory {
  return {
    name: "",
    account: Long.ZERO,
    region: "",
    price: undefined,
    salePrice: undefined,
    salePriceEffectiveDate: undefined,
    availability: undefined,
    customAttributes: [],
  };
}

export const RegionalInventory: MessageFns<RegionalInventory> = {
  encode(message: RegionalInventory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.account.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.account.toString());
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(34).fork()).join();
    }
    if (message.salePrice !== undefined) {
      Price.encode(message.salePrice, writer.uint32(42).fork()).join();
    }
    if (message.salePriceEffectiveDate !== undefined) {
      Interval.encode(message.salePriceEffectiveDate, writer.uint32(50).fork()).join();
    }
    if (message.availability !== undefined) {
      writer.uint32(58).string(message.availability);
    }
    for (const v of message.customAttributes) {
      CustomAttribute.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegionalInventory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegionalInventory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.account = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.salePrice = Price.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.salePriceEffectiveDate = Interval.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.availability = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.customAttributes.push(CustomAttribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegionalInventory {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      account: isSet(object.account) ? Long.fromValue(object.account) : Long.ZERO,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      price: isSet(object.price) ? Price.fromJSON(object.price) : undefined,
      salePrice: isSet(object.salePrice) ? Price.fromJSON(object.salePrice) : undefined,
      salePriceEffectiveDate: isSet(object.salePriceEffectiveDate)
        ? Interval.fromJSON(object.salePriceEffectiveDate)
        : undefined,
      availability: isSet(object.availability) ? globalThis.String(object.availability) : undefined,
      customAttributes: globalThis.Array.isArray(object?.customAttributes)
        ? object.customAttributes.map((e: any) => CustomAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RegionalInventory): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.account.equals(Long.ZERO)) {
      obj.account = (message.account || Long.ZERO).toString();
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    if (message.salePrice !== undefined) {
      obj.salePrice = Price.toJSON(message.salePrice);
    }
    if (message.salePriceEffectiveDate !== undefined) {
      obj.salePriceEffectiveDate = Interval.toJSON(message.salePriceEffectiveDate);
    }
    if (message.availability !== undefined) {
      obj.availability = message.availability;
    }
    if (message.customAttributes?.length) {
      obj.customAttributes = message.customAttributes.map((e) => CustomAttribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RegionalInventory>): RegionalInventory {
    return RegionalInventory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegionalInventory>): RegionalInventory {
    const message = createBaseRegionalInventory();
    message.name = object.name ?? "";
    message.account = (object.account !== undefined && object.account !== null)
      ? Long.fromValue(object.account)
      : Long.ZERO;
    message.region = object.region ?? "";
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    message.salePrice = (object.salePrice !== undefined && object.salePrice !== null)
      ? Price.fromPartial(object.salePrice)
      : undefined;
    message.salePriceEffectiveDate =
      (object.salePriceEffectiveDate !== undefined && object.salePriceEffectiveDate !== null)
        ? Interval.fromPartial(object.salePriceEffectiveDate)
        : undefined;
    message.availability = object.availability ?? undefined;
    message.customAttributes = object.customAttributes?.map((e) => CustomAttribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListRegionalInventoriesRequest(): ListRegionalInventoriesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRegionalInventoriesRequest: MessageFns<ListRegionalInventoriesRequest> = {
  encode(message: ListRegionalInventoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRegionalInventoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRegionalInventoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRegionalInventoriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRegionalInventoriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRegionalInventoriesRequest>): ListRegionalInventoriesRequest {
    return ListRegionalInventoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRegionalInventoriesRequest>): ListRegionalInventoriesRequest {
    const message = createBaseListRegionalInventoriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRegionalInventoriesResponse(): ListRegionalInventoriesResponse {
  return { regionalInventories: [], nextPageToken: "" };
}

export const ListRegionalInventoriesResponse: MessageFns<ListRegionalInventoriesResponse> = {
  encode(message: ListRegionalInventoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.regionalInventories) {
      RegionalInventory.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRegionalInventoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRegionalInventoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.regionalInventories.push(RegionalInventory.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRegionalInventoriesResponse {
    return {
      regionalInventories: globalThis.Array.isArray(object?.regionalInventories)
        ? object.regionalInventories.map((e: any) => RegionalInventory.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRegionalInventoriesResponse): unknown {
    const obj: any = {};
    if (message.regionalInventories?.length) {
      obj.regionalInventories = message.regionalInventories.map((e) => RegionalInventory.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRegionalInventoriesResponse>): ListRegionalInventoriesResponse {
    return ListRegionalInventoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRegionalInventoriesResponse>): ListRegionalInventoriesResponse {
    const message = createBaseListRegionalInventoriesResponse();
    message.regionalInventories = object.regionalInventories?.map((e) => RegionalInventory.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseInsertRegionalInventoryRequest(): InsertRegionalInventoryRequest {
  return { parent: "", regionalInventory: undefined };
}

export const InsertRegionalInventoryRequest: MessageFns<InsertRegionalInventoryRequest> = {
  encode(message: InsertRegionalInventoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.regionalInventory !== undefined) {
      RegionalInventory.encode(message.regionalInventory, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertRegionalInventoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertRegionalInventoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regionalInventory = RegionalInventory.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertRegionalInventoryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      regionalInventory: isSet(object.regionalInventory)
        ? RegionalInventory.fromJSON(object.regionalInventory)
        : undefined,
    };
  },

  toJSON(message: InsertRegionalInventoryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.regionalInventory !== undefined) {
      obj.regionalInventory = RegionalInventory.toJSON(message.regionalInventory);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertRegionalInventoryRequest>): InsertRegionalInventoryRequest {
    return InsertRegionalInventoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertRegionalInventoryRequest>): InsertRegionalInventoryRequest {
    const message = createBaseInsertRegionalInventoryRequest();
    message.parent = object.parent ?? "";
    message.regionalInventory = (object.regionalInventory !== undefined && object.regionalInventory !== null)
      ? RegionalInventory.fromPartial(object.regionalInventory)
      : undefined;
    return message;
  },
};

function createBaseDeleteRegionalInventoryRequest(): DeleteRegionalInventoryRequest {
  return { name: "" };
}

export const DeleteRegionalInventoryRequest: MessageFns<DeleteRegionalInventoryRequest> = {
  encode(message: DeleteRegionalInventoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRegionalInventoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRegionalInventoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRegionalInventoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRegionalInventoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRegionalInventoryRequest>): DeleteRegionalInventoryRequest {
    return DeleteRegionalInventoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRegionalInventoryRequest>): DeleteRegionalInventoryRequest {
    const message = createBaseDeleteRegionalInventoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service to manage regional inventory for products. There is also separate
 * `regions` resource and API to manage regions definitions.
 */
export type RegionalInventoryServiceDefinition = typeof RegionalInventoryServiceDefinition;
export const RegionalInventoryServiceDefinition = {
  name: "RegionalInventoryService",
  fullName: "google.shopping.merchant.inventories.v1beta.RegionalInventoryService",
  methods: {
    /**
     * Lists the `RegionalInventory` resources for the given product in your
     * merchant account. The response might contain fewer items than specified by
     * `pageSize`.  If `pageToken` was returned in previous request, it can be
     * used to obtain additional results.
     *
     * `RegionalInventory` resources are listed per product for a given account.
     */
    listRegionalInventories: {
      name: "ListRegionalInventories",
      requestType: ListRegionalInventoriesRequest,
      requestStream: false,
      responseType: ListRegionalInventoriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              105,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Inserts a `RegionalInventory` to a given product in your
     * merchant account.
     *
     * Replaces the full `RegionalInventory` resource if an entry with the same
     * [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region]
     * already exists for the product.
     *
     * It might take up to 30 minutes for the new or updated `RegionalInventory`
     * resource to appear in products.
     */
    insertRegionalInventory: {
      name: "InsertRegionalInventory",
      requestType: InsertRegionalInventoryRequest,
      requestStream: false,
      responseType: RegionalInventory,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              99,
              58,
              18,
              114,
              101,
              103,
              105,
              111,
              110,
              97,
              108,
              95,
              105,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              121,
              34,
              77,
              47,
              105,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              58,
              105,
              110,
              115,
              101,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified `RegionalInventory` resource from the given product
     * in your merchant account.  It might take up to an hour for the
     * `RegionalInventory` to be deleted from the specific product.
     * Once you have received a successful delete response, wait for that
     * period before attempting a delete again.
     */
    deleteRegionalInventory: {
      name: "DeleteRegionalInventory",
      requestType: DeleteRegionalInventoryRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              42,
              70,
              47,
              105,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              97,
              108,
              73,
              110,
              118,
              101,
              110,
              116,
              111,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RegionalInventoryServiceImplementation<CallContextExt = {}> {
  /**
   * Lists the `RegionalInventory` resources for the given product in your
   * merchant account. The response might contain fewer items than specified by
   * `pageSize`.  If `pageToken` was returned in previous request, it can be
   * used to obtain additional results.
   *
   * `RegionalInventory` resources are listed per product for a given account.
   */
  listRegionalInventories(
    request: ListRegionalInventoriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRegionalInventoriesResponse>>;
  /**
   * Inserts a `RegionalInventory` to a given product in your
   * merchant account.
   *
   * Replaces the full `RegionalInventory` resource if an entry with the same
   * [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region]
   * already exists for the product.
   *
   * It might take up to 30 minutes for the new or updated `RegionalInventory`
   * resource to appear in products.
   */
  insertRegionalInventory(
    request: InsertRegionalInventoryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegionalInventory>>;
  /**
   * Deletes the specified `RegionalInventory` resource from the given product
   * in your merchant account.  It might take up to an hour for the
   * `RegionalInventory` to be deleted from the specific product.
   * Once you have received a successful delete response, wait for that
   * period before attempting a delete again.
   */
  deleteRegionalInventory(
    request: DeleteRegionalInventoryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface RegionalInventoryServiceClient<CallOptionsExt = {}> {
  /**
   * Lists the `RegionalInventory` resources for the given product in your
   * merchant account. The response might contain fewer items than specified by
   * `pageSize`.  If `pageToken` was returned in previous request, it can be
   * used to obtain additional results.
   *
   * `RegionalInventory` resources are listed per product for a given account.
   */
  listRegionalInventories(
    request: DeepPartial<ListRegionalInventoriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRegionalInventoriesResponse>;
  /**
   * Inserts a `RegionalInventory` to a given product in your
   * merchant account.
   *
   * Replaces the full `RegionalInventory` resource if an entry with the same
   * [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region]
   * already exists for the product.
   *
   * It might take up to 30 minutes for the new or updated `RegionalInventory`
   * resource to appear in products.
   */
  insertRegionalInventory(
    request: DeepPartial<InsertRegionalInventoryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegionalInventory>;
  /**
   * Deletes the specified `RegionalInventory` resource from the given product
   * in your merchant account.  It might take up to an hour for the
   * `RegionalInventory` to be deleted from the specific product.
   * Once you have received a successful delete response, wait for that
   * period before attempting a delete again.
   */
  deleteRegionalInventory(
    request: DeepPartial<DeleteRegionalInventoryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
