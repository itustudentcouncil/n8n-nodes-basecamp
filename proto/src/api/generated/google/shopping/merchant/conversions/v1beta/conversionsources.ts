// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/conversions/v1beta/conversionsources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.shopping.merchant.conversions.v1beta";

/**
 * Represents a conversion source owned by a Merchant account. A merchant
 * account can have up to 200 conversion sources.
 */
export interface ConversionSource {
  /** Immutable. Conversion Source of type "Link to Google Analytics Property". */
  googleAnalyticsLink?:
    | GoogleAnalyticsLink
    | undefined;
  /** Conversion Source of type "Merchant Center Tag Destination". */
  merchantCenterDestination?:
    | MerchantCenterDestination
    | undefined;
  /**
   * Output only. Identifier. Generated by the Content API upon creation of a
   * new `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the
   * colon represent the type of conversio source. Content after the colon
   * represents the ID of the conversion source within that type. The ID of two
   * different conversion sources might be the same across different types. The
   * following type prefixes are supported:
   * - galk: For GoogleAnalyticsLink sources.
   * - mcdn: For MerchantCenterDestination sources.
   */
  name: string;
  /**
   * Output only. Current state of this conversion source. Can't be edited
   * through the API.
   */
  state: ConversionSource_State;
  /**
   * Output only. The time when an archived conversion source becomes
   * permanently deleted and is no longer available to undelete.
   */
  expireTime:
    | Date
    | undefined;
  /** Output only. Controller of the conversion source. */
  controller: ConversionSource_Controller;
}

/** Represents state of the conversion source. */
export enum ConversionSource_State {
  /** STATE_UNSPECIFIED - Conversion source has unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - Conversion source is fully functional. */
  ACTIVE = 1,
  /**
   * ARCHIVED - Conversion source has been archived in the last 30 days and not
   * currently functional. Can be restored using the undelete method.
   */
  ARCHIVED = 2,
  /** PENDING - Conversion source creation has started but not fully finished yet. */
  PENDING = 3,
  UNRECOGNIZED = -1,
}

export function conversionSource_StateFromJSON(object: any): ConversionSource_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ConversionSource_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return ConversionSource_State.ACTIVE;
    case 2:
    case "ARCHIVED":
      return ConversionSource_State.ARCHIVED;
    case 3:
    case "PENDING":
      return ConversionSource_State.PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionSource_State.UNRECOGNIZED;
  }
}

export function conversionSource_StateToJSON(object: ConversionSource_State): string {
  switch (object) {
    case ConversionSource_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ConversionSource_State.ACTIVE:
      return "ACTIVE";
    case ConversionSource_State.ARCHIVED:
      return "ARCHIVED";
    case ConversionSource_State.PENDING:
      return "PENDING";
    case ConversionSource_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Entity controlling the conversion source. */
export enum ConversionSource_Controller {
  /** CONTROLLER_UNSPECIFIED - Default value. This value is unused. */
  CONTROLLER_UNSPECIFIED = 0,
  /** MERCHANT - Controlled by the Merchant who owns the Conversion Source. */
  MERCHANT = 1,
  /** YOUTUBE_AFFILIATES - Controlled by the YT Affiliates program. */
  YOUTUBE_AFFILIATES = 2,
  UNRECOGNIZED = -1,
}

export function conversionSource_ControllerFromJSON(object: any): ConversionSource_Controller {
  switch (object) {
    case 0:
    case "CONTROLLER_UNSPECIFIED":
      return ConversionSource_Controller.CONTROLLER_UNSPECIFIED;
    case 1:
    case "MERCHANT":
      return ConversionSource_Controller.MERCHANT;
    case 2:
    case "YOUTUBE_AFFILIATES":
      return ConversionSource_Controller.YOUTUBE_AFFILIATES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionSource_Controller.UNRECOGNIZED;
  }
}

export function conversionSource_ControllerToJSON(object: ConversionSource_Controller): string {
  switch (object) {
    case ConversionSource_Controller.CONTROLLER_UNSPECIFIED:
      return "CONTROLLER_UNSPECIFIED";
    case ConversionSource_Controller.MERCHANT:
      return "MERCHANT";
    case ConversionSource_Controller.YOUTUBE_AFFILIATES:
      return "YOUTUBE_AFFILIATES";
    case ConversionSource_Controller.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents attribution settings for conversion sources receiving
 * pre-attribution data.
 */
export interface AttributionSettings {
  /**
   * Required. Lookback windows (in days) used for attribution in this source.
   * Supported values are 7, 30, 40.
   */
  attributionLookbackWindowDays: number;
  /** Required. Attribution model. */
  attributionModel: AttributionSettings_AttributionModel;
  /**
   * Immutable. Unordered list. List of different conversion types a conversion
   * event can be classified as. A standard "purchase" type will be
   * automatically created if this list is empty at creation time.
   */
  conversionType: AttributionSettings_ConversionType[];
}

/**
 * The attribution model used for this source. We support the same set of
 * models offered by Google Analytics 4, as described in:
 * https://support.google.com/analytics/answer/10596866.
 */
export enum AttributionSettings_AttributionModel {
  /** ATTRIBUTION_MODEL_UNSPECIFIED - Unspecified model. */
  ATTRIBUTION_MODEL_UNSPECIFIED = 0,
  /** CROSS_CHANNEL_LAST_CLICK - Cross-channel Last Click model. */
  CROSS_CHANNEL_LAST_CLICK = 1,
  /** ADS_PREFERRED_LAST_CLICK - Ads-preferred Last Click model. */
  ADS_PREFERRED_LAST_CLICK = 2,
  /** CROSS_CHANNEL_DATA_DRIVEN - Cross-channel Data Driven model. */
  CROSS_CHANNEL_DATA_DRIVEN = 5,
  /** CROSS_CHANNEL_FIRST_CLICK - Cross-channel First Click model. */
  CROSS_CHANNEL_FIRST_CLICK = 6,
  /** CROSS_CHANNEL_LINEAR - Cross-channel Linear model. */
  CROSS_CHANNEL_LINEAR = 7,
  /** CROSS_CHANNEL_POSITION_BASED - Cross-channel Position Based model. */
  CROSS_CHANNEL_POSITION_BASED = 8,
  /** CROSS_CHANNEL_TIME_DECAY - Cross-channel Time Decay model. */
  CROSS_CHANNEL_TIME_DECAY = 9,
  UNRECOGNIZED = -1,
}

export function attributionSettings_AttributionModelFromJSON(object: any): AttributionSettings_AttributionModel {
  switch (object) {
    case 0:
    case "ATTRIBUTION_MODEL_UNSPECIFIED":
      return AttributionSettings_AttributionModel.ATTRIBUTION_MODEL_UNSPECIFIED;
    case 1:
    case "CROSS_CHANNEL_LAST_CLICK":
      return AttributionSettings_AttributionModel.CROSS_CHANNEL_LAST_CLICK;
    case 2:
    case "ADS_PREFERRED_LAST_CLICK":
      return AttributionSettings_AttributionModel.ADS_PREFERRED_LAST_CLICK;
    case 5:
    case "CROSS_CHANNEL_DATA_DRIVEN":
      return AttributionSettings_AttributionModel.CROSS_CHANNEL_DATA_DRIVEN;
    case 6:
    case "CROSS_CHANNEL_FIRST_CLICK":
      return AttributionSettings_AttributionModel.CROSS_CHANNEL_FIRST_CLICK;
    case 7:
    case "CROSS_CHANNEL_LINEAR":
      return AttributionSettings_AttributionModel.CROSS_CHANNEL_LINEAR;
    case 8:
    case "CROSS_CHANNEL_POSITION_BASED":
      return AttributionSettings_AttributionModel.CROSS_CHANNEL_POSITION_BASED;
    case 9:
    case "CROSS_CHANNEL_TIME_DECAY":
      return AttributionSettings_AttributionModel.CROSS_CHANNEL_TIME_DECAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributionSettings_AttributionModel.UNRECOGNIZED;
  }
}

export function attributionSettings_AttributionModelToJSON(object: AttributionSettings_AttributionModel): string {
  switch (object) {
    case AttributionSettings_AttributionModel.ATTRIBUTION_MODEL_UNSPECIFIED:
      return "ATTRIBUTION_MODEL_UNSPECIFIED";
    case AttributionSettings_AttributionModel.CROSS_CHANNEL_LAST_CLICK:
      return "CROSS_CHANNEL_LAST_CLICK";
    case AttributionSettings_AttributionModel.ADS_PREFERRED_LAST_CLICK:
      return "ADS_PREFERRED_LAST_CLICK";
    case AttributionSettings_AttributionModel.CROSS_CHANNEL_DATA_DRIVEN:
      return "CROSS_CHANNEL_DATA_DRIVEN";
    case AttributionSettings_AttributionModel.CROSS_CHANNEL_FIRST_CLICK:
      return "CROSS_CHANNEL_FIRST_CLICK";
    case AttributionSettings_AttributionModel.CROSS_CHANNEL_LINEAR:
      return "CROSS_CHANNEL_LINEAR";
    case AttributionSettings_AttributionModel.CROSS_CHANNEL_POSITION_BASED:
      return "CROSS_CHANNEL_POSITION_BASED";
    case AttributionSettings_AttributionModel.CROSS_CHANNEL_TIME_DECAY:
      return "CROSS_CHANNEL_TIME_DECAY";
    case AttributionSettings_AttributionModel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message representing a types of conversion events */
export interface AttributionSettings_ConversionType {
  /** Output only. Conversion event name, as it'll be reported by the client. */
  name: string;
  /**
   * Output only. Option indicating if the type should be included in Merchant
   * Center reporting.
   */
  report: boolean;
}

/**
 * "Google Analytics Link" sources can be used to get conversion data from an
 * existing Google Analytics property into the linked Merchant Center account.
 */
export interface GoogleAnalyticsLink {
  /**
   * Required. Immutable. ID of the Google Analytics property the merchant is
   * linked to.
   */
  propertyId: Long;
  /** Output only. Attribution settings for the linked Google Analytics property. */
  attributionSettings:
    | AttributionSettings
    | undefined;
  /**
   * Output only. Name of the Google Analytics property the merchant is linked
   * to.
   */
  property: string;
}

/**
 * "Merchant Center Destination" sources can be used to send conversion events
 * from an online store using a Google tag directly to a Merchant Center account
 * where the source is created.
 */
export interface MerchantCenterDestination {
  /** Output only. Merchant Center Destination ID. */
  destination: string;
  /**
   * Required. Attribution settings being used for the Merchant Center
   * Destination.
   */
  attributionSettings:
    | AttributionSettings
    | undefined;
  /**
   * Required. Merchant-specified display name for the destination. This is the
   * name that identifies the conversion source within the Merchant Center UI.
   * Limited to 64 characters.
   */
  displayName: string;
  /**
   * Required. Three-letter currency code (ISO 4217). The currency code defines
   * in which currency the conversions sent to this destination will be reported
   * in Merchant Center.
   */
  currencyCode: string;
}

/** Request message for the CreateConversionSource method. */
export interface CreateConversionSourceRequest {
  /**
   * Required. The merchant account that will own the new conversion source.
   * Format: accounts/{account}
   */
  parent: string;
  /**
   * Required. The conversion source description. A new ID will be automatically
   * assigned to it upon creation.
   */
  conversionSource: ConversionSource | undefined;
}

/** Request message for the UpdateConversionSource method. */
export interface UpdateConversionSourceRequest {
  /**
   * Required. The new version of the conversion source data.
   * Format: accounts/{account}/conversionSources/{conversion_source}
   */
  conversionSource:
    | ConversionSource
    | undefined;
  /** Required. List of fields being updated. */
  updateMask: string[] | undefined;
}

/** Request message for the DeleteConversionSource method. */
export interface DeleteConversionSourceRequest {
  /**
   * Required. The name of the conversion source to be deleted.
   * Format: accounts/{account}/conversionSources/{conversion_source}
   */
  name: string;
}

/** Request message for the UndeleteConversionSource method. */
export interface UndeleteConversionSourceRequest {
  /**
   * Required. The name of the conversion source to be undeleted.
   * Format: accounts/{account}/conversionSources/{conversion_source}
   */
  name: string;
}

/** Request message for the GetConversionSource method. */
export interface GetConversionSourceRequest {
  /**
   * Required. The name of the conversion source to be fetched.
   * Format: accounts/{account}/conversionsources/{conversion_source}
   */
  name: string;
}

/** Request message for the ListConversionSources method. */
export interface ListConversionSourcesRequest {
  /**
   * Required. The merchant account who owns the collection of conversion
   * sources. Format: accounts/{account}
   */
  parent: string;
  /**
   * Optional. The maximum number of conversion sources to return in a page.
   * If no `page_size` is specified, `100` is used as the default value. The
   * maximum value is `200`. Values above `200` will be coerced to `200`.
   * Regardless of pagination, at most `200` conversion sources are returned
   * in total.
   */
  pageSize: number;
  /** Optional. Page token. */
  pageToken: string;
  /** Optional. Show deleted (archived) option. */
  showDeleted: boolean;
}

/** Response message for the ListConversionSources method. */
export interface ListConversionSourcesResponse {
  /** List of conversion sources. */
  conversionSources: ConversionSource[];
  /** Token to be used to fetch the next results page. */
  nextPageToken: string;
}

function createBaseConversionSource(): ConversionSource {
  return {
    googleAnalyticsLink: undefined,
    merchantCenterDestination: undefined,
    name: "",
    state: 0,
    expireTime: undefined,
    controller: 0,
  };
}

export const ConversionSource: MessageFns<ConversionSource> = {
  encode(message: ConversionSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.googleAnalyticsLink !== undefined) {
      GoogleAnalyticsLink.encode(message.googleAnalyticsLink, writer.uint32(26).fork()).join();
    }
    if (message.merchantCenterDestination !== undefined) {
      MerchantCenterDestination.encode(message.merchantCenterDestination, writer.uint32(34).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(50).fork()).join();
    }
    if (message.controller !== 0) {
      writer.uint32(56).int32(message.controller);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.googleAnalyticsLink = GoogleAnalyticsLink.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.merchantCenterDestination = MerchantCenterDestination.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.controller = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionSource {
    return {
      googleAnalyticsLink: isSet(object.googleAnalyticsLink)
        ? GoogleAnalyticsLink.fromJSON(object.googleAnalyticsLink)
        : undefined,
      merchantCenterDestination: isSet(object.merchantCenterDestination)
        ? MerchantCenterDestination.fromJSON(object.merchantCenterDestination)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? conversionSource_StateFromJSON(object.state) : 0,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      controller: isSet(object.controller) ? conversionSource_ControllerFromJSON(object.controller) : 0,
    };
  },

  toJSON(message: ConversionSource): unknown {
    const obj: any = {};
    if (message.googleAnalyticsLink !== undefined) {
      obj.googleAnalyticsLink = GoogleAnalyticsLink.toJSON(message.googleAnalyticsLink);
    }
    if (message.merchantCenterDestination !== undefined) {
      obj.merchantCenterDestination = MerchantCenterDestination.toJSON(message.merchantCenterDestination);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = conversionSource_StateToJSON(message.state);
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.controller !== 0) {
      obj.controller = conversionSource_ControllerToJSON(message.controller);
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionSource>): ConversionSource {
    return ConversionSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionSource>): ConversionSource {
    const message = createBaseConversionSource();
    message.googleAnalyticsLink = (object.googleAnalyticsLink !== undefined && object.googleAnalyticsLink !== null)
      ? GoogleAnalyticsLink.fromPartial(object.googleAnalyticsLink)
      : undefined;
    message.merchantCenterDestination =
      (object.merchantCenterDestination !== undefined && object.merchantCenterDestination !== null)
        ? MerchantCenterDestination.fromPartial(object.merchantCenterDestination)
        : undefined;
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.expireTime = object.expireTime ?? undefined;
    message.controller = object.controller ?? 0;
    return message;
  },
};

function createBaseAttributionSettings(): AttributionSettings {
  return { attributionLookbackWindowDays: 0, attributionModel: 0, conversionType: [] };
}

export const AttributionSettings: MessageFns<AttributionSettings> = {
  encode(message: AttributionSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributionLookbackWindowDays !== 0) {
      writer.uint32(8).int32(message.attributionLookbackWindowDays);
    }
    if (message.attributionModel !== 0) {
      writer.uint32(16).int32(message.attributionModel);
    }
    for (const v of message.conversionType) {
      AttributionSettings_ConversionType.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.attributionLookbackWindowDays = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.attributionModel = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversionType.push(AttributionSettings_ConversionType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributionSettings {
    return {
      attributionLookbackWindowDays: isSet(object.attributionLookbackWindowDays)
        ? globalThis.Number(object.attributionLookbackWindowDays)
        : 0,
      attributionModel: isSet(object.attributionModel)
        ? attributionSettings_AttributionModelFromJSON(object.attributionModel)
        : 0,
      conversionType: globalThis.Array.isArray(object?.conversionType)
        ? object.conversionType.map((e: any) => AttributionSettings_ConversionType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AttributionSettings): unknown {
    const obj: any = {};
    if (message.attributionLookbackWindowDays !== 0) {
      obj.attributionLookbackWindowDays = Math.round(message.attributionLookbackWindowDays);
    }
    if (message.attributionModel !== 0) {
      obj.attributionModel = attributionSettings_AttributionModelToJSON(message.attributionModel);
    }
    if (message.conversionType?.length) {
      obj.conversionType = message.conversionType.map((e) => AttributionSettings_ConversionType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AttributionSettings>): AttributionSettings {
    return AttributionSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributionSettings>): AttributionSettings {
    const message = createBaseAttributionSettings();
    message.attributionLookbackWindowDays = object.attributionLookbackWindowDays ?? 0;
    message.attributionModel = object.attributionModel ?? 0;
    message.conversionType = object.conversionType?.map((e) => AttributionSettings_ConversionType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttributionSettings_ConversionType(): AttributionSettings_ConversionType {
  return { name: "", report: false };
}

export const AttributionSettings_ConversionType: MessageFns<AttributionSettings_ConversionType> = {
  encode(message: AttributionSettings_ConversionType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.report !== false) {
      writer.uint32(16).bool(message.report);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributionSettings_ConversionType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributionSettings_ConversionType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.report = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributionSettings_ConversionType {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      report: isSet(object.report) ? globalThis.Boolean(object.report) : false,
    };
  },

  toJSON(message: AttributionSettings_ConversionType): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.report !== false) {
      obj.report = message.report;
    }
    return obj;
  },

  create(base?: DeepPartial<AttributionSettings_ConversionType>): AttributionSettings_ConversionType {
    return AttributionSettings_ConversionType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributionSettings_ConversionType>): AttributionSettings_ConversionType {
    const message = createBaseAttributionSettings_ConversionType();
    message.name = object.name ?? "";
    message.report = object.report ?? false;
    return message;
  },
};

function createBaseGoogleAnalyticsLink(): GoogleAnalyticsLink {
  return { propertyId: Long.ZERO, attributionSettings: undefined, property: "" };
}

export const GoogleAnalyticsLink: MessageFns<GoogleAnalyticsLink> = {
  encode(message: GoogleAnalyticsLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.propertyId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.propertyId.toString());
    }
    if (message.attributionSettings !== undefined) {
      AttributionSettings.encode(message.attributionSettings, writer.uint32(18).fork()).join();
    }
    if (message.property !== "") {
      writer.uint32(26).string(message.property);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoogleAnalyticsLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoogleAnalyticsLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.propertyId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributionSettings = AttributionSettings.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.property = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoogleAnalyticsLink {
    return {
      propertyId: isSet(object.propertyId) ? Long.fromValue(object.propertyId) : Long.ZERO,
      attributionSettings: isSet(object.attributionSettings)
        ? AttributionSettings.fromJSON(object.attributionSettings)
        : undefined,
      property: isSet(object.property) ? globalThis.String(object.property) : "",
    };
  },

  toJSON(message: GoogleAnalyticsLink): unknown {
    const obj: any = {};
    if (!message.propertyId.equals(Long.ZERO)) {
      obj.propertyId = (message.propertyId || Long.ZERO).toString();
    }
    if (message.attributionSettings !== undefined) {
      obj.attributionSettings = AttributionSettings.toJSON(message.attributionSettings);
    }
    if (message.property !== "") {
      obj.property = message.property;
    }
    return obj;
  },

  create(base?: DeepPartial<GoogleAnalyticsLink>): GoogleAnalyticsLink {
    return GoogleAnalyticsLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GoogleAnalyticsLink>): GoogleAnalyticsLink {
    const message = createBaseGoogleAnalyticsLink();
    message.propertyId = (object.propertyId !== undefined && object.propertyId !== null)
      ? Long.fromValue(object.propertyId)
      : Long.ZERO;
    message.attributionSettings = (object.attributionSettings !== undefined && object.attributionSettings !== null)
      ? AttributionSettings.fromPartial(object.attributionSettings)
      : undefined;
    message.property = object.property ?? "";
    return message;
  },
};

function createBaseMerchantCenterDestination(): MerchantCenterDestination {
  return { destination: "", attributionSettings: undefined, displayName: "", currencyCode: "" };
}

export const MerchantCenterDestination: MessageFns<MerchantCenterDestination> = {
  encode(message: MerchantCenterDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== "") {
      writer.uint32(10).string(message.destination);
    }
    if (message.attributionSettings !== undefined) {
      AttributionSettings.encode(message.attributionSettings, writer.uint32(18).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.currencyCode !== "") {
      writer.uint32(34).string(message.currencyCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MerchantCenterDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerchantCenterDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributionSettings = AttributionSettings.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MerchantCenterDestination {
    return {
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      attributionSettings: isSet(object.attributionSettings)
        ? AttributionSettings.fromJSON(object.attributionSettings)
        : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
    };
  },

  toJSON(message: MerchantCenterDestination): unknown {
    const obj: any = {};
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.attributionSettings !== undefined) {
      obj.attributionSettings = AttributionSettings.toJSON(message.attributionSettings);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    return obj;
  },

  create(base?: DeepPartial<MerchantCenterDestination>): MerchantCenterDestination {
    return MerchantCenterDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MerchantCenterDestination>): MerchantCenterDestination {
    const message = createBaseMerchantCenterDestination();
    message.destination = object.destination ?? "";
    message.attributionSettings = (object.attributionSettings !== undefined && object.attributionSettings !== null)
      ? AttributionSettings.fromPartial(object.attributionSettings)
      : undefined;
    message.displayName = object.displayName ?? "";
    message.currencyCode = object.currencyCode ?? "";
    return message;
  },
};

function createBaseCreateConversionSourceRequest(): CreateConversionSourceRequest {
  return { parent: "", conversionSource: undefined };
}

export const CreateConversionSourceRequest: MessageFns<CreateConversionSourceRequest> = {
  encode(message: CreateConversionSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversionSource !== undefined) {
      ConversionSource.encode(message.conversionSource, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversionSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversionSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversionSource = ConversionSource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversionSourceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversionSource: isSet(object.conversionSource) ? ConversionSource.fromJSON(object.conversionSource) : undefined,
    };
  },

  toJSON(message: CreateConversionSourceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversionSource !== undefined) {
      obj.conversionSource = ConversionSource.toJSON(message.conversionSource);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversionSourceRequest>): CreateConversionSourceRequest {
    return CreateConversionSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversionSourceRequest>): CreateConversionSourceRequest {
    const message = createBaseCreateConversionSourceRequest();
    message.parent = object.parent ?? "";
    message.conversionSource = (object.conversionSource !== undefined && object.conversionSource !== null)
      ? ConversionSource.fromPartial(object.conversionSource)
      : undefined;
    return message;
  },
};

function createBaseUpdateConversionSourceRequest(): UpdateConversionSourceRequest {
  return { conversionSource: undefined, updateMask: undefined };
}

export const UpdateConversionSourceRequest: MessageFns<UpdateConversionSourceRequest> = {
  encode(message: UpdateConversionSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionSource !== undefined) {
      ConversionSource.encode(message.conversionSource, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversionSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversionSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionSource = ConversionSource.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversionSourceRequest {
    return {
      conversionSource: isSet(object.conversionSource) ? ConversionSource.fromJSON(object.conversionSource) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateConversionSourceRequest): unknown {
    const obj: any = {};
    if (message.conversionSource !== undefined) {
      obj.conversionSource = ConversionSource.toJSON(message.conversionSource);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversionSourceRequest>): UpdateConversionSourceRequest {
    return UpdateConversionSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversionSourceRequest>): UpdateConversionSourceRequest {
    const message = createBaseUpdateConversionSourceRequest();
    message.conversionSource = (object.conversionSource !== undefined && object.conversionSource !== null)
      ? ConversionSource.fromPartial(object.conversionSource)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteConversionSourceRequest(): DeleteConversionSourceRequest {
  return { name: "" };
}

export const DeleteConversionSourceRequest: MessageFns<DeleteConversionSourceRequest> = {
  encode(message: DeleteConversionSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversionSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversionSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversionSourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConversionSourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversionSourceRequest>): DeleteConversionSourceRequest {
    return DeleteConversionSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversionSourceRequest>): DeleteConversionSourceRequest {
    const message = createBaseDeleteConversionSourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeleteConversionSourceRequest(): UndeleteConversionSourceRequest {
  return { name: "" };
}

export const UndeleteConversionSourceRequest: MessageFns<UndeleteConversionSourceRequest> = {
  encode(message: UndeleteConversionSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteConversionSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteConversionSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteConversionSourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeleteConversionSourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteConversionSourceRequest>): UndeleteConversionSourceRequest {
    return UndeleteConversionSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteConversionSourceRequest>): UndeleteConversionSourceRequest {
    const message = createBaseUndeleteConversionSourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetConversionSourceRequest(): GetConversionSourceRequest {
  return { name: "" };
}

export const GetConversionSourceRequest: MessageFns<GetConversionSourceRequest> = {
  encode(message: GetConversionSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversionSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversionSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversionSourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConversionSourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversionSourceRequest>): GetConversionSourceRequest {
    return GetConversionSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversionSourceRequest>): GetConversionSourceRequest {
    const message = createBaseGetConversionSourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListConversionSourcesRequest(): ListConversionSourcesRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListConversionSourcesRequest: MessageFns<ListConversionSourcesRequest> = {
  encode(message: ListConversionSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionSourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListConversionSourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionSourcesRequest>): ListConversionSourcesRequest {
    return ListConversionSourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionSourcesRequest>): ListConversionSourcesRequest {
    const message = createBaseListConversionSourcesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListConversionSourcesResponse(): ListConversionSourcesResponse {
  return { conversionSources: [], nextPageToken: "" };
}

export const ListConversionSourcesResponse: MessageFns<ListConversionSourcesResponse> = {
  encode(message: ListConversionSourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionSources) {
      ConversionSource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionSourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionSourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionSources.push(ConversionSource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionSourcesResponse {
    return {
      conversionSources: globalThis.Array.isArray(object?.conversionSources)
        ? object.conversionSources.map((e: any) => ConversionSource.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConversionSourcesResponse): unknown {
    const obj: any = {};
    if (message.conversionSources?.length) {
      obj.conversionSources = message.conversionSources.map((e) => ConversionSource.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionSourcesResponse>): ListConversionSourcesResponse {
    return ListConversionSourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionSourcesResponse>): ListConversionSourcesResponse {
    const message = createBaseListConversionSourcesResponse();
    message.conversionSources = object.conversionSources?.map((e) => ConversionSource.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service for managing conversion sources for a merchant account. */
export type ConversionSourcesServiceDefinition = typeof ConversionSourcesServiceDefinition;
export const ConversionSourcesServiceDefinition = {
  name: "ConversionSourcesService",
  fullName: "google.shopping.merchant.conversions.v1beta.ConversionSourcesService",
  methods: {
    /** Creates a new conversion source. */
    createConversionSource: {
      name: "CreateConversionSource",
      requestType: CreateConversionSourceRequest,
      requestStream: false,
      responseType: ConversionSource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              17,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              57,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates information of an existing conversion source. Available only for
     * Merchant Center Destination conversion sources.
     */
    updateConversionSource: {
      name: "UpdateConversionSource",
      requestType: UpdateConversionSourceRequest,
      requestStream: false,
      responseType: ConversionSource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              17,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              50,
              75,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Archives an existing conversion source. If the conversion source is a
     * Merchant Center Destination, it will be recoverable for 30 days. If the
     * conversion source is a Google Analytics Link, it will be deleted
     * immediately and can be restored by creating a new one.
     */
    deleteConversionSource: {
      name: "DeleteConversionSource",
      requestType: DeleteConversionSourceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Re-enables an archived conversion source. Only Available for Merchant
     * Center Destination conversion sources.
     */
    undeleteConversionSource: {
      name: "UndeleteConversionSource",
      requestType: UndeleteConversionSourceRequest,
      requestStream: false,
      responseType: ConversionSource,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Fetches a conversion source. */
    getConversionSource: {
      name: "GetConversionSource",
      requestType: GetConversionSourceRequest,
      requestStream: false,
      responseType: ConversionSource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves the list of conversion sources the caller has access to. */
    listConversionSources: {
      name: "ListConversionSources",
      requestType: ListConversionSourcesRequest,
      requestStream: false,
      responseType: ListConversionSourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConversionSourcesServiceImplementation<CallContextExt = {}> {
  /** Creates a new conversion source. */
  createConversionSource(
    request: CreateConversionSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionSource>>;
  /**
   * Updates information of an existing conversion source. Available only for
   * Merchant Center Destination conversion sources.
   */
  updateConversionSource(
    request: UpdateConversionSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionSource>>;
  /**
   * Archives an existing conversion source. If the conversion source is a
   * Merchant Center Destination, it will be recoverable for 30 days. If the
   * conversion source is a Google Analytics Link, it will be deleted
   * immediately and can be restored by creating a new one.
   */
  deleteConversionSource(
    request: DeleteConversionSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Re-enables an archived conversion source. Only Available for Merchant
   * Center Destination conversion sources.
   */
  undeleteConversionSource(
    request: UndeleteConversionSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionSource>>;
  /** Fetches a conversion source. */
  getConversionSource(
    request: GetConversionSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionSource>>;
  /** Retrieves the list of conversion sources the caller has access to. */
  listConversionSources(
    request: ListConversionSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversionSourcesResponse>>;
}

export interface ConversionSourcesServiceClient<CallOptionsExt = {}> {
  /** Creates a new conversion source. */
  createConversionSource(
    request: DeepPartial<CreateConversionSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionSource>;
  /**
   * Updates information of an existing conversion source. Available only for
   * Merchant Center Destination conversion sources.
   */
  updateConversionSource(
    request: DeepPartial<UpdateConversionSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionSource>;
  /**
   * Archives an existing conversion source. If the conversion source is a
   * Merchant Center Destination, it will be recoverable for 30 days. If the
   * conversion source is a Google Analytics Link, it will be deleted
   * immediately and can be restored by creating a new one.
   */
  deleteConversionSource(
    request: DeepPartial<DeleteConversionSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Re-enables an archived conversion source. Only Available for Merchant
   * Center Destination conversion sources.
   */
  undeleteConversionSource(
    request: DeepPartial<UndeleteConversionSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionSource>;
  /** Fetches a conversion source. */
  getConversionSource(
    request: DeepPartial<GetConversionSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionSource>;
  /** Retrieves the list of conversion sources the caller has access to. */
  listConversionSources(
    request: DeepPartial<ListConversionSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversionSourcesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
