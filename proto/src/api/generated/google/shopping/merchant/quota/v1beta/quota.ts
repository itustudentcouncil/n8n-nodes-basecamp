// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/quota/v1beta/quota.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.shopping.merchant.quota.v1beta";

/**
 * The group information for methods in the Merchant API. The quota is shared
 * between all methods in the group. Even if none of the methods within the
 * group have usage the information for the group is returned.
 */
export interface QuotaGroup {
  /**
   * Identifier. The resource name of the quota group.
   * Format: accounts/{account}/quotas/{group}
   * Note: There is no guarantee on the format of {group}
   */
  name: string;
  /**
   * Output only. The current quota usage, meaning the number of calls already
   * made on a given day to the methods in the group. The daily quota limits
   * reset at at 12:00 PM midday UTC.
   */
  quotaUsage: Long;
  /** Output only. The maximum number of calls allowed per day for the group. */
  quotaLimit: Long;
  /** Output only. The maximum number of calls allowed per minute for the group. */
  quotaMinuteLimit: Long;
  /** Output only. List of all methods group quota applies to. */
  methodDetails: MethodDetails[];
}

/** The method details per method in the Merchant API. */
export interface MethodDetails {
  /** Output only. The name of the method for example `products.list`. */
  method: string;
  /** Output only. The API version that the method belongs to. */
  version: string;
  /** Output only. The sub-API that the method belongs to. */
  subapi: string;
  /**
   * Output only. The path for the method such as
   * `products/v1/productInputs.insert`
   */
  path: string;
}

/** Request message for the ListQuotaGroups method. */
export interface ListQuotaGroupsRequest {
  /**
   * Required. The merchant account who owns the collection of method quotas
   * Format: accounts/{account}
   */
  parent: string;
  /**
   * Optional. The maximum number of quotas to return in the response, used
   * for paging. Defaults to 500; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Token (if provided) to retrieve the subsequent page. All other
   * parameters must match the original call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListMethodGroups method. */
export interface ListQuotaGroupsResponse {
  /**
   * The methods, current quota usage and limits per each group. The quota is
   * shared between all methods in the group. The groups are sorted in
   * descending order based on
   * [quotaUsage][google.shopping.merchant.quota.v1main.QuotaGroup.quota_usage].
   */
  quotaGroups: QuotaGroup[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseQuotaGroup(): QuotaGroup {
  return { name: "", quotaUsage: Long.ZERO, quotaLimit: Long.ZERO, quotaMinuteLimit: Long.ZERO, methodDetails: [] };
}

export const QuotaGroup: MessageFns<QuotaGroup> = {
  encode(message: QuotaGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.quotaUsage.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.quotaUsage.toString());
    }
    if (!message.quotaLimit.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.quotaLimit.toString());
    }
    if (!message.quotaMinuteLimit.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.quotaMinuteLimit.toString());
    }
    for (const v of message.methodDetails) {
      MethodDetails.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuotaGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuotaGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.quotaUsage = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.quotaLimit = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.quotaMinuteLimit = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.methodDetails.push(MethodDetails.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuotaGroup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      quotaUsage: isSet(object.quotaUsage) ? Long.fromValue(object.quotaUsage) : Long.ZERO,
      quotaLimit: isSet(object.quotaLimit) ? Long.fromValue(object.quotaLimit) : Long.ZERO,
      quotaMinuteLimit: isSet(object.quotaMinuteLimit) ? Long.fromValue(object.quotaMinuteLimit) : Long.ZERO,
      methodDetails: globalThis.Array.isArray(object?.methodDetails)
        ? object.methodDetails.map((e: any) => MethodDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QuotaGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.quotaUsage.equals(Long.ZERO)) {
      obj.quotaUsage = (message.quotaUsage || Long.ZERO).toString();
    }
    if (!message.quotaLimit.equals(Long.ZERO)) {
      obj.quotaLimit = (message.quotaLimit || Long.ZERO).toString();
    }
    if (!message.quotaMinuteLimit.equals(Long.ZERO)) {
      obj.quotaMinuteLimit = (message.quotaMinuteLimit || Long.ZERO).toString();
    }
    if (message.methodDetails?.length) {
      obj.methodDetails = message.methodDetails.map((e) => MethodDetails.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QuotaGroup>): QuotaGroup {
    return QuotaGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuotaGroup>): QuotaGroup {
    const message = createBaseQuotaGroup();
    message.name = object.name ?? "";
    message.quotaUsage = (object.quotaUsage !== undefined && object.quotaUsage !== null)
      ? Long.fromValue(object.quotaUsage)
      : Long.ZERO;
    message.quotaLimit = (object.quotaLimit !== undefined && object.quotaLimit !== null)
      ? Long.fromValue(object.quotaLimit)
      : Long.ZERO;
    message.quotaMinuteLimit = (object.quotaMinuteLimit !== undefined && object.quotaMinuteLimit !== null)
      ? Long.fromValue(object.quotaMinuteLimit)
      : Long.ZERO;
    message.methodDetails = object.methodDetails?.map((e) => MethodDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMethodDetails(): MethodDetails {
  return { method: "", version: "", subapi: "", path: "" };
}

export const MethodDetails: MessageFns<MethodDetails> = {
  encode(message: MethodDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.subapi !== "") {
      writer.uint32(26).string(message.subapi);
    }
    if (message.path !== "") {
      writer.uint32(34).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subapi = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodDetails {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      subapi: isSet(object.subapi) ? globalThis.String(object.subapi) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: MethodDetails): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.subapi !== "") {
      obj.subapi = message.subapi;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<MethodDetails>): MethodDetails {
    return MethodDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MethodDetails>): MethodDetails {
    const message = createBaseMethodDetails();
    message.method = object.method ?? "";
    message.version = object.version ?? "";
    message.subapi = object.subapi ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseListQuotaGroupsRequest(): ListQuotaGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListQuotaGroupsRequest: MessageFns<ListQuotaGroupsRequest> = {
  encode(message: ListQuotaGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuotaGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuotaGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuotaGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListQuotaGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuotaGroupsRequest>): ListQuotaGroupsRequest {
    return ListQuotaGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuotaGroupsRequest>): ListQuotaGroupsRequest {
    const message = createBaseListQuotaGroupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListQuotaGroupsResponse(): ListQuotaGroupsResponse {
  return { quotaGroups: [], nextPageToken: "" };
}

export const ListQuotaGroupsResponse: MessageFns<ListQuotaGroupsResponse> = {
  encode(message: ListQuotaGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.quotaGroups) {
      QuotaGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuotaGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuotaGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.quotaGroups.push(QuotaGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuotaGroupsResponse {
    return {
      quotaGroups: globalThis.Array.isArray(object?.quotaGroups)
        ? object.quotaGroups.map((e: any) => QuotaGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListQuotaGroupsResponse): unknown {
    const obj: any = {};
    if (message.quotaGroups?.length) {
      obj.quotaGroups = message.quotaGroups.map((e) => QuotaGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuotaGroupsResponse>): ListQuotaGroupsResponse {
    return ListQuotaGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuotaGroupsResponse>): ListQuotaGroupsResponse {
    const message = createBaseListQuotaGroupsResponse();
    message.quotaGroups = object.quotaGroups?.map((e) => QuotaGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service to get method call quota information per Merchant API method. */
export type QuotaServiceDefinition = typeof QuotaServiceDefinition;
export const QuotaServiceDefinition = {
  name: "QuotaService",
  fullName: "google.shopping.merchant.quota.v1beta.QuotaService",
  methods: {
    /**
     * Lists the daily call quota and usage per group for your Merchant
     * Center account.
     */
    listQuotaGroups: {
      name: "ListQuotaGroups",
      requestType: ListQuotaGroupsRequest,
      requestStream: false,
      responseType: ListQuotaGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              113,
              117,
              111,
              116,
              97,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface QuotaServiceImplementation<CallContextExt = {}> {
  /**
   * Lists the daily call quota and usage per group for your Merchant
   * Center account.
   */
  listQuotaGroups(
    request: ListQuotaGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListQuotaGroupsResponse>>;
}

export interface QuotaServiceClient<CallOptionsExt = {}> {
  /**
   * Lists the daily call quota and usage per group for your Merchant
   * Center account.
   */
  listQuotaGroups(
    request: DeepPartial<ListQuotaGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListQuotaGroupsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
