// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/datasources/v1beta/fileuploads.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.shopping.merchant.datasources.v1beta";

/**
 * The file upload of a specific data source, that is, the result of the
 * retrieval of the data source at a certain timestamp computed asynchronously
 * when the data source processing is finished. Only applicable to file data
 * sources.
 */
export interface FileUpload {
  /**
   * Identifier. The name of the data source file upload.
   * Format:
   * `{datasource.name=accounts/{account}/dataSources/{datasource}/fileUploads/{fileupload}}`
   */
  name: string;
  /** Output only. The data source id. */
  dataSourceId: Long;
  /** Output only. The processing state of the data source. */
  processingState: FileUpload_ProcessingState;
  /** Output only. The list of issues occurring in the data source. */
  issues: FileUpload_Issue[];
  /** Output only. The number of items in the data source that were processed. */
  itemsTotal: Long;
  /** Output only. The number of items in the data source that were created. */
  itemsCreated: Long;
  /** Output only. The number of items in the data source that were updated. */
  itemsUpdated: Long;
  /** Output only. The date at which the file of the data source was uploaded. */
  uploadTime: Date | undefined;
}

/** The processing state of the data source. */
export enum FileUpload_ProcessingState {
  /** PROCESSING_STATE_UNSPECIFIED - Processing state unspecified. */
  PROCESSING_STATE_UNSPECIFIED = 0,
  /** FAILED - The data source could not be processed or all the items had errors. */
  FAILED = 1,
  /** IN_PROGRESS - The data source is being processed. */
  IN_PROGRESS = 2,
  /**
   * SUCCEEDED - The data source was processed successfully, though some items might have
   * had errors.
   */
  SUCCEEDED = 3,
  UNRECOGNIZED = -1,
}

export function fileUpload_ProcessingStateFromJSON(object: any): FileUpload_ProcessingState {
  switch (object) {
    case 0:
    case "PROCESSING_STATE_UNSPECIFIED":
      return FileUpload_ProcessingState.PROCESSING_STATE_UNSPECIFIED;
    case 1:
    case "FAILED":
      return FileUpload_ProcessingState.FAILED;
    case 2:
    case "IN_PROGRESS":
      return FileUpload_ProcessingState.IN_PROGRESS;
    case 3:
    case "SUCCEEDED":
      return FileUpload_ProcessingState.SUCCEEDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileUpload_ProcessingState.UNRECOGNIZED;
  }
}

export function fileUpload_ProcessingStateToJSON(object: FileUpload_ProcessingState): string {
  switch (object) {
    case FileUpload_ProcessingState.PROCESSING_STATE_UNSPECIFIED:
      return "PROCESSING_STATE_UNSPECIFIED";
    case FileUpload_ProcessingState.FAILED:
      return "FAILED";
    case FileUpload_ProcessingState.IN_PROGRESS:
      return "IN_PROGRESS";
    case FileUpload_ProcessingState.SUCCEEDED:
      return "SUCCEEDED";
    case FileUpload_ProcessingState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** An error occurring in the data source, like "invalid price". */
export interface FileUpload_Issue {
  /** Output only. The title of the issue, for example, "Item too big". */
  title: string;
  /**
   * Output only. The error description, for example, "Your data source
   * contains items which have too many attributes, or are too big. These
   * items will be dropped".
   */
  description: string;
  /**
   * Output only. The code of the error, for example,
   * "validation/invalid_value". Returns
   * "?" if the code is unknown.
   */
  code: string;
  /** Output only. The number of occurrences of the error in the file upload. */
  count: Long;
  /** Output only. The severity of the issue. */
  severity: FileUpload_Issue_Severity;
  /**
   * Output only. Link to the documentation explaining the issue in more
   * details, if available.
   */
  documentationUri: string;
}

/** The severity of the issue. */
export enum FileUpload_Issue_Severity {
  /** SEVERITY_UNSPECIFIED - Severity unspecified. */
  SEVERITY_UNSPECIFIED = 0,
  /** WARNING - The issue is the warning. */
  WARNING = 1,
  /** ERROR - The issue is an error. */
  ERROR = 2,
  UNRECOGNIZED = -1,
}

export function fileUpload_Issue_SeverityFromJSON(object: any): FileUpload_Issue_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return FileUpload_Issue_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "WARNING":
      return FileUpload_Issue_Severity.WARNING;
    case 2:
    case "ERROR":
      return FileUpload_Issue_Severity.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileUpload_Issue_Severity.UNRECOGNIZED;
  }
}

export function fileUpload_Issue_SeverityToJSON(object: FileUpload_Issue_Severity): string {
  switch (object) {
    case FileUpload_Issue_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case FileUpload_Issue_Severity.WARNING:
      return "WARNING";
    case FileUpload_Issue_Severity.ERROR:
      return "ERROR";
    case FileUpload_Issue_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for the GetFileUploadRequest method. */
export interface GetFileUploadRequest {
  /**
   * Required. The name of the data source file upload to retrieve.
   * Format:
   * `accounts/{account}/dataSources/{datasource}/fileUploads/latest`
   */
  name: string;
}

function createBaseFileUpload(): FileUpload {
  return {
    name: "",
    dataSourceId: Long.ZERO,
    processingState: 0,
    issues: [],
    itemsTotal: Long.ZERO,
    itemsCreated: Long.ZERO,
    itemsUpdated: Long.ZERO,
    uploadTime: undefined,
  };
}

export const FileUpload: MessageFns<FileUpload> = {
  encode(message: FileUpload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.dataSourceId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.dataSourceId.toString());
    }
    if (message.processingState !== 0) {
      writer.uint32(24).int32(message.processingState);
    }
    for (const v of message.issues) {
      FileUpload_Issue.encode(v!, writer.uint32(34).fork()).join();
    }
    if (!message.itemsTotal.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.itemsTotal.toString());
    }
    if (!message.itemsCreated.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.itemsCreated.toString());
    }
    if (!message.itemsUpdated.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.itemsUpdated.toString());
    }
    if (message.uploadTime !== undefined) {
      Timestamp.encode(toTimestamp(message.uploadTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileUpload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataSourceId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.processingState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issues.push(FileUpload_Issue.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.itemsTotal = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.itemsCreated = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.itemsUpdated = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.uploadTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileUpload {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataSourceId: isSet(object.dataSourceId) ? Long.fromValue(object.dataSourceId) : Long.ZERO,
      processingState: isSet(object.processingState) ? fileUpload_ProcessingStateFromJSON(object.processingState) : 0,
      issues: globalThis.Array.isArray(object?.issues)
        ? object.issues.map((e: any) => FileUpload_Issue.fromJSON(e))
        : [],
      itemsTotal: isSet(object.itemsTotal) ? Long.fromValue(object.itemsTotal) : Long.ZERO,
      itemsCreated: isSet(object.itemsCreated) ? Long.fromValue(object.itemsCreated) : Long.ZERO,
      itemsUpdated: isSet(object.itemsUpdated) ? Long.fromValue(object.itemsUpdated) : Long.ZERO,
      uploadTime: isSet(object.uploadTime) ? fromJsonTimestamp(object.uploadTime) : undefined,
    };
  },

  toJSON(message: FileUpload): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.dataSourceId.equals(Long.ZERO)) {
      obj.dataSourceId = (message.dataSourceId || Long.ZERO).toString();
    }
    if (message.processingState !== 0) {
      obj.processingState = fileUpload_ProcessingStateToJSON(message.processingState);
    }
    if (message.issues?.length) {
      obj.issues = message.issues.map((e) => FileUpload_Issue.toJSON(e));
    }
    if (!message.itemsTotal.equals(Long.ZERO)) {
      obj.itemsTotal = (message.itemsTotal || Long.ZERO).toString();
    }
    if (!message.itemsCreated.equals(Long.ZERO)) {
      obj.itemsCreated = (message.itemsCreated || Long.ZERO).toString();
    }
    if (!message.itemsUpdated.equals(Long.ZERO)) {
      obj.itemsUpdated = (message.itemsUpdated || Long.ZERO).toString();
    }
    if (message.uploadTime !== undefined) {
      obj.uploadTime = message.uploadTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FileUpload>): FileUpload {
    return FileUpload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileUpload>): FileUpload {
    const message = createBaseFileUpload();
    message.name = object.name ?? "";
    message.dataSourceId = (object.dataSourceId !== undefined && object.dataSourceId !== null)
      ? Long.fromValue(object.dataSourceId)
      : Long.ZERO;
    message.processingState = object.processingState ?? 0;
    message.issues = object.issues?.map((e) => FileUpload_Issue.fromPartial(e)) || [];
    message.itemsTotal = (object.itemsTotal !== undefined && object.itemsTotal !== null)
      ? Long.fromValue(object.itemsTotal)
      : Long.ZERO;
    message.itemsCreated = (object.itemsCreated !== undefined && object.itemsCreated !== null)
      ? Long.fromValue(object.itemsCreated)
      : Long.ZERO;
    message.itemsUpdated = (object.itemsUpdated !== undefined && object.itemsUpdated !== null)
      ? Long.fromValue(object.itemsUpdated)
      : Long.ZERO;
    message.uploadTime = object.uploadTime ?? undefined;
    return message;
  },
};

function createBaseFileUpload_Issue(): FileUpload_Issue {
  return { title: "", description: "", code: "", count: Long.ZERO, severity: 0, documentationUri: "" };
}

export const FileUpload_Issue: MessageFns<FileUpload_Issue> = {
  encode(message: FileUpload_Issue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.count.toString());
    }
    if (message.severity !== 0) {
      writer.uint32(40).int32(message.severity);
    }
    if (message.documentationUri !== "") {
      writer.uint32(50).string(message.documentationUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileUpload_Issue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileUpload_Issue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.documentationUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileUpload_Issue {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
      severity: isSet(object.severity) ? fileUpload_Issue_SeverityFromJSON(object.severity) : 0,
      documentationUri: isSet(object.documentationUri) ? globalThis.String(object.documentationUri) : "",
    };
  },

  toJSON(message: FileUpload_Issue): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    if (message.severity !== 0) {
      obj.severity = fileUpload_Issue_SeverityToJSON(message.severity);
    }
    if (message.documentationUri !== "") {
      obj.documentationUri = message.documentationUri;
    }
    return obj;
  },

  create(base?: DeepPartial<FileUpload_Issue>): FileUpload_Issue {
    return FileUpload_Issue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileUpload_Issue>): FileUpload_Issue {
    const message = createBaseFileUpload_Issue();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.code = object.code ?? "";
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    message.severity = object.severity ?? 0;
    message.documentationUri = object.documentationUri ?? "";
    return message;
  },
};

function createBaseGetFileUploadRequest(): GetFileUploadRequest {
  return { name: "" };
}

export const GetFileUploadRequest: MessageFns<GetFileUploadRequest> = {
  encode(message: GetFileUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFileUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileUploadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFileUploadRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFileUploadRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFileUploadRequest>): GetFileUploadRequest {
    return GetFileUploadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFileUploadRequest>): GetFileUploadRequest {
    const message = createBaseGetFileUploadRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service to manage data source file uploads. */
export type FileUploadsServiceDefinition = typeof FileUploadsServiceDefinition;
export const FileUploadsServiceDefinition = {
  name: "FileUploadsService",
  fullName: "google.shopping.merchant.datasources.v1beta.FileUploadsService",
  methods: {
    /**
     * Gets the latest data source file upload. Only the `latest` alias is
     * accepted for a file upload.
     */
    getFileUpload: {
      name: "GetFileUpload",
      requestType: GetFileUploadRequest,
      requestStream: false,
      responseType: FileUpload,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              100,
              97,
              116,
              97,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              108,
              101,
              85,
              112,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FileUploadsServiceImplementation<CallContextExt = {}> {
  /**
   * Gets the latest data source file upload. Only the `latest` alias is
   * accepted for a file upload.
   */
  getFileUpload(request: GetFileUploadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<FileUpload>>;
}

export interface FileUploadsServiceClient<CallOptionsExt = {}> {
  /**
   * Gets the latest data source file upload. Only the `latest` alias is
   * accepted for a file upload.
   */
  getFileUpload(
    request: DeepPartial<GetFileUploadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FileUpload>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
