// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/notifications/v1beta/notificationsapi.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import {
  ReportingContext_ReportingContextEnum,
  reportingContext_ReportingContextEnumFromJSON,
  reportingContext_ReportingContextEnumToJSON,
} from "../../../type/types.js";

export const protobufPackage = "google.shopping.merchant.notifications.v1beta";

/**
 * Enum to specify the resource that is being changed to notify the merchant
 * about.
 */
export enum Resource {
  /** RESOURCE_UNSPECIFIED - Unspecified resource */
  RESOURCE_UNSPECIFIED = 0,
  /** PRODUCT - Resource type : product */
  PRODUCT = 1,
  UNRECOGNIZED = -1,
}

export function resourceFromJSON(object: any): Resource {
  switch (object) {
    case 0:
    case "RESOURCE_UNSPECIFIED":
      return Resource.RESOURCE_UNSPECIFIED;
    case 1:
    case "PRODUCT":
      return Resource.PRODUCT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Resource.UNRECOGNIZED;
  }
}

export function resourceToJSON(object: Resource): string {
  switch (object) {
    case Resource.RESOURCE_UNSPECIFIED:
      return "RESOURCE_UNSPECIFIED";
    case Resource.PRODUCT:
      return "PRODUCT";
    case Resource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Enum to specify the attribute in the resource that is being changed to
 * notify the merchant about.
 */
export enum Attribute {
  /** ATTRIBUTE_UNSPECIFIED - Unspecified attribute */
  ATTRIBUTE_UNSPECIFIED = 0,
  /** STATUS - Status of the changed entity */
  STATUS = 1,
  UNRECOGNIZED = -1,
}

export function attributeFromJSON(object: any): Attribute {
  switch (object) {
    case 0:
    case "ATTRIBUTE_UNSPECIFIED":
      return Attribute.ATTRIBUTE_UNSPECIFIED;
    case 1:
    case "STATUS":
      return Attribute.STATUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Attribute.UNRECOGNIZED;
  }
}

export function attributeToJSON(object: Attribute): string {
  switch (object) {
    case Attribute.ATTRIBUTE_UNSPECIFIED:
      return "ATTRIBUTE_UNSPECIFIED";
    case Attribute.STATUS:
      return "STATUS";
    case Attribute.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for the GetNotificationSubscription method. */
export interface GetNotificationSubscriptionRequest {
  /** Required. The `name` of the notification subscription. */
  name: string;
}

/** Request message for the CreateNotificationSubscription method. */
export interface CreateNotificationSubscriptionRequest {
  /**
   * Required. The merchant account that owns the new notification subscription.
   * Format: `accounts/{account}`
   */
  parent: string;
  /** Required. The notification subscription to create. */
  notificationSubscription: NotificationSubscription | undefined;
}

/** Request message for the UpdateNotificationSubscription method. */
export interface UpdateNotificationSubscriptionRequest {
  /**
   * Required. The new version of the notification subscription that should be
   * updated.
   */
  notificationSubscription:
    | NotificationSubscription
    | undefined;
  /** List of fields being updated. */
  updateMask: string[] | undefined;
}

/** Request message for the DeleteNotificationSubscription method. */
export interface DeleteNotificationSubscriptionRequest {
  /** Required. The name of the notification subscription to be deleted. */
  name: string;
}

/** Request message for the ListNotificationSubscription method. */
export interface ListNotificationSubscriptionsRequest {
  /**
   * Required. The merchant account who owns the notification subscriptions.
   * Format: `accounts/{account}`
   */
  parent: string;
  /**
   * The maximum number of notification subscriptions to return in a page.
   * The default value for `page_size` is 100. The
   * maximum value is `200`. Values above `200` will be coerced to `200`.
   */
  pageSize: number;
  /**
   * Token (if provided) to retrieve the subsequent page. All other parameters
   * must match the original call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListNotificationSubscription method. */
export interface ListNotificationSubscriptionsResponse {
  /** The list of notification subscriptions requested by the merchant. */
  notificationSubscriptions: NotificationSubscription[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Represents a notification subscription owned by a Merchant account. */
export interface NotificationSubscription {
  /**
   * If this value is true, the requesting account is notified of the
   * specified event for all managed accounts (can be subaccounts or other
   * linked accounts) including newly added accounts on a daily basis.
   */
  allManagedAccounts?:
    | boolean
    | undefined;
  /**
   * The `name` of the account you want to receive notifications for.
   * Format: `accounts/{account}`
   */
  targetAccount?:
    | string
    | undefined;
  /**
   * Output only. The `name` of the notification configuration. Generated by the
   * Content API upon creation of a new `NotificationSubscription`. The
   * `account` represents the merchant ID of the merchant that owns the
   * configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   */
  name: string;
  /** The event that the merchant wants to be notified about. */
  registeredEvent: NotificationSubscription_NotificationEventType;
  /** URL to be used to push the notification to the merchant. */
  callBackUri: string;
}

/**
 * Represents the event type that the merchant is interested in receiving
 * notifications for.
 */
export enum NotificationSubscription_NotificationEventType {
  /** NOTIFICATION_EVENT_TYPE_UNSPECIFIED - Notifications event type is unspecified. */
  NOTIFICATION_EVENT_TYPE_UNSPECIFIED = 0,
  /**
   * PRODUCT_STATUS_CHANGE - Notification of product status changes, for example when product becomes
   * disapproved.
   */
  PRODUCT_STATUS_CHANGE = 1,
  UNRECOGNIZED = -1,
}

export function notificationSubscription_NotificationEventTypeFromJSON(
  object: any,
): NotificationSubscription_NotificationEventType {
  switch (object) {
    case 0:
    case "NOTIFICATION_EVENT_TYPE_UNSPECIFIED":
      return NotificationSubscription_NotificationEventType.NOTIFICATION_EVENT_TYPE_UNSPECIFIED;
    case 1:
    case "PRODUCT_STATUS_CHANGE":
      return NotificationSubscription_NotificationEventType.PRODUCT_STATUS_CHANGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotificationSubscription_NotificationEventType.UNRECOGNIZED;
  }
}

export function notificationSubscription_NotificationEventTypeToJSON(
  object: NotificationSubscription_NotificationEventType,
): string {
  switch (object) {
    case NotificationSubscription_NotificationEventType.NOTIFICATION_EVENT_TYPE_UNSPECIFIED:
      return "NOTIFICATION_EVENT_TYPE_UNSPECIFIED";
    case NotificationSubscription_NotificationEventType.PRODUCT_STATUS_CHANGE:
      return "PRODUCT_STATUS_CHANGE";
    case NotificationSubscription_NotificationEventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The change that happened to the product including old value, new value,
 * country code as the region code and reporting context.
 */
export interface ProductChange {
  /** The old value of the changed resource or attribute. */
  oldValue?:
    | string
    | undefined;
  /** The new value of the changed resource or attribute. */
  newValue?:
    | string
    | undefined;
  /** Countries that have the change (if applicable) */
  regionCode?:
    | string
    | undefined;
  /** Reporting contexts that have the change (if applicable) */
  reportingContext?: ReportingContext_ReportingContextEnum | undefined;
}

/**
 * The message that the merchant will receive to notify about product status
 * change event
 */
export interface ProductStatusChangeMessage {
  /**
   * The target account that owns the entity that changed.
   * Format : `accounts/{merchant_id}`
   */
  account?:
    | string
    | undefined;
  /**
   * The account that manages the merchant's account. can be the same as
   * merchant id if it is standalone account. Format :
   * `accounts/{service_provider_id}`
   */
  managingAccount?:
    | string
    | undefined;
  /** The resource that changed, in this case it will always be `Product`. */
  resourceType?:
    | Resource
    | undefined;
  /**
   * The attribute in the resource that changed, in this case it will be always
   * `Status`.
   */
  attribute?:
    | Attribute
    | undefined;
  /** A message to describe the change that happened to the product */
  changes: ProductChange[];
  /** The product id. */
  resourceId?:
    | string
    | undefined;
  /**
   * The product name.
   * Format: `{product.name=accounts/{account}/products/{product}}`
   */
  resource?: string | undefined;
}

function createBaseGetNotificationSubscriptionRequest(): GetNotificationSubscriptionRequest {
  return { name: "" };
}

export const GetNotificationSubscriptionRequest: MessageFns<GetNotificationSubscriptionRequest> = {
  encode(message: GetNotificationSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationSubscriptionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNotificationSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotificationSubscriptionRequest>): GetNotificationSubscriptionRequest {
    return GetNotificationSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotificationSubscriptionRequest>): GetNotificationSubscriptionRequest {
    const message = createBaseGetNotificationSubscriptionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateNotificationSubscriptionRequest(): CreateNotificationSubscriptionRequest {
  return { parent: "", notificationSubscription: undefined };
}

export const CreateNotificationSubscriptionRequest: MessageFns<CreateNotificationSubscriptionRequest> = {
  encode(message: CreateNotificationSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.notificationSubscription !== undefined) {
      NotificationSubscription.encode(message.notificationSubscription, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotificationSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotificationSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notificationSubscription = NotificationSubscription.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNotificationSubscriptionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      notificationSubscription: isSet(object.notificationSubscription)
        ? NotificationSubscription.fromJSON(object.notificationSubscription)
        : undefined,
    };
  },

  toJSON(message: CreateNotificationSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.notificationSubscription !== undefined) {
      obj.notificationSubscription = NotificationSubscription.toJSON(message.notificationSubscription);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNotificationSubscriptionRequest>): CreateNotificationSubscriptionRequest {
    return CreateNotificationSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNotificationSubscriptionRequest>): CreateNotificationSubscriptionRequest {
    const message = createBaseCreateNotificationSubscriptionRequest();
    message.parent = object.parent ?? "";
    message.notificationSubscription =
      (object.notificationSubscription !== undefined && object.notificationSubscription !== null)
        ? NotificationSubscription.fromPartial(object.notificationSubscription)
        : undefined;
    return message;
  },
};

function createBaseUpdateNotificationSubscriptionRequest(): UpdateNotificationSubscriptionRequest {
  return { notificationSubscription: undefined, updateMask: undefined };
}

export const UpdateNotificationSubscriptionRequest: MessageFns<UpdateNotificationSubscriptionRequest> = {
  encode(message: UpdateNotificationSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationSubscription !== undefined) {
      NotificationSubscription.encode(message.notificationSubscription, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNotificationSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotificationSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notificationSubscription = NotificationSubscription.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotificationSubscriptionRequest {
    return {
      notificationSubscription: isSet(object.notificationSubscription)
        ? NotificationSubscription.fromJSON(object.notificationSubscription)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateNotificationSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.notificationSubscription !== undefined) {
      obj.notificationSubscription = NotificationSubscription.toJSON(message.notificationSubscription);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNotificationSubscriptionRequest>): UpdateNotificationSubscriptionRequest {
    return UpdateNotificationSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNotificationSubscriptionRequest>): UpdateNotificationSubscriptionRequest {
    const message = createBaseUpdateNotificationSubscriptionRequest();
    message.notificationSubscription =
      (object.notificationSubscription !== undefined && object.notificationSubscription !== null)
        ? NotificationSubscription.fromPartial(object.notificationSubscription)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteNotificationSubscriptionRequest(): DeleteNotificationSubscriptionRequest {
  return { name: "" };
}

export const DeleteNotificationSubscriptionRequest: MessageFns<DeleteNotificationSubscriptionRequest> = {
  encode(message: DeleteNotificationSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotificationSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotificationSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNotificationSubscriptionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNotificationSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNotificationSubscriptionRequest>): DeleteNotificationSubscriptionRequest {
    return DeleteNotificationSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNotificationSubscriptionRequest>): DeleteNotificationSubscriptionRequest {
    const message = createBaseDeleteNotificationSubscriptionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListNotificationSubscriptionsRequest(): ListNotificationSubscriptionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListNotificationSubscriptionsRequest: MessageFns<ListNotificationSubscriptionsRequest> = {
  encode(message: ListNotificationSubscriptionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationSubscriptionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationSubscriptionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationSubscriptionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListNotificationSubscriptionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotificationSubscriptionsRequest>): ListNotificationSubscriptionsRequest {
    return ListNotificationSubscriptionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotificationSubscriptionsRequest>): ListNotificationSubscriptionsRequest {
    const message = createBaseListNotificationSubscriptionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListNotificationSubscriptionsResponse(): ListNotificationSubscriptionsResponse {
  return { notificationSubscriptions: [], nextPageToken: "" };
}

export const ListNotificationSubscriptionsResponse: MessageFns<ListNotificationSubscriptionsResponse> = {
  encode(message: ListNotificationSubscriptionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notificationSubscriptions) {
      NotificationSubscription.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationSubscriptionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationSubscriptionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notificationSubscriptions.push(NotificationSubscription.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationSubscriptionsResponse {
    return {
      notificationSubscriptions: globalThis.Array.isArray(object?.notificationSubscriptions)
        ? object.notificationSubscriptions.map((e: any) => NotificationSubscription.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNotificationSubscriptionsResponse): unknown {
    const obj: any = {};
    if (message.notificationSubscriptions?.length) {
      obj.notificationSubscriptions = message.notificationSubscriptions.map((e) => NotificationSubscription.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotificationSubscriptionsResponse>): ListNotificationSubscriptionsResponse {
    return ListNotificationSubscriptionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotificationSubscriptionsResponse>): ListNotificationSubscriptionsResponse {
    const message = createBaseListNotificationSubscriptionsResponse();
    message.notificationSubscriptions =
      object.notificationSubscriptions?.map((e) => NotificationSubscription.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseNotificationSubscription(): NotificationSubscription {
  return { allManagedAccounts: undefined, targetAccount: undefined, name: "", registeredEvent: 0, callBackUri: "" };
}

export const NotificationSubscription: MessageFns<NotificationSubscription> = {
  encode(message: NotificationSubscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allManagedAccounts !== undefined) {
      writer.uint32(24).bool(message.allManagedAccounts);
    }
    if (message.targetAccount !== undefined) {
      writer.uint32(34).string(message.targetAccount);
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.registeredEvent !== 0) {
      writer.uint32(16).int32(message.registeredEvent);
    }
    if (message.callBackUri !== "") {
      writer.uint32(42).string(message.callBackUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationSubscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allManagedAccounts = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.targetAccount = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.registeredEvent = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.callBackUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationSubscription {
    return {
      allManagedAccounts: isSet(object.allManagedAccounts) ? globalThis.Boolean(object.allManagedAccounts) : undefined,
      targetAccount: isSet(object.targetAccount) ? globalThis.String(object.targetAccount) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      registeredEvent: isSet(object.registeredEvent)
        ? notificationSubscription_NotificationEventTypeFromJSON(object.registeredEvent)
        : 0,
      callBackUri: isSet(object.callBackUri) ? globalThis.String(object.callBackUri) : "",
    };
  },

  toJSON(message: NotificationSubscription): unknown {
    const obj: any = {};
    if (message.allManagedAccounts !== undefined) {
      obj.allManagedAccounts = message.allManagedAccounts;
    }
    if (message.targetAccount !== undefined) {
      obj.targetAccount = message.targetAccount;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.registeredEvent !== 0) {
      obj.registeredEvent = notificationSubscription_NotificationEventTypeToJSON(message.registeredEvent);
    }
    if (message.callBackUri !== "") {
      obj.callBackUri = message.callBackUri;
    }
    return obj;
  },

  create(base?: DeepPartial<NotificationSubscription>): NotificationSubscription {
    return NotificationSubscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationSubscription>): NotificationSubscription {
    const message = createBaseNotificationSubscription();
    message.allManagedAccounts = object.allManagedAccounts ?? undefined;
    message.targetAccount = object.targetAccount ?? undefined;
    message.name = object.name ?? "";
    message.registeredEvent = object.registeredEvent ?? 0;
    message.callBackUri = object.callBackUri ?? "";
    return message;
  },
};

function createBaseProductChange(): ProductChange {
  return { oldValue: undefined, newValue: undefined, regionCode: undefined, reportingContext: undefined };
}

export const ProductChange: MessageFns<ProductChange> = {
  encode(message: ProductChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldValue !== undefined) {
      writer.uint32(10).string(message.oldValue);
    }
    if (message.newValue !== undefined) {
      writer.uint32(18).string(message.newValue);
    }
    if (message.regionCode !== undefined) {
      writer.uint32(26).string(message.regionCode);
    }
    if (message.reportingContext !== undefined) {
      writer.uint32(32).int32(message.reportingContext);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.oldValue = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newValue = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reportingContext = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductChange {
    return {
      oldValue: isSet(object.oldValue) ? globalThis.String(object.oldValue) : undefined,
      newValue: isSet(object.newValue) ? globalThis.String(object.newValue) : undefined,
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : undefined,
      reportingContext: isSet(object.reportingContext)
        ? reportingContext_ReportingContextEnumFromJSON(object.reportingContext)
        : undefined,
    };
  },

  toJSON(message: ProductChange): unknown {
    const obj: any = {};
    if (message.oldValue !== undefined) {
      obj.oldValue = message.oldValue;
    }
    if (message.newValue !== undefined) {
      obj.newValue = message.newValue;
    }
    if (message.regionCode !== undefined) {
      obj.regionCode = message.regionCode;
    }
    if (message.reportingContext !== undefined) {
      obj.reportingContext = reportingContext_ReportingContextEnumToJSON(message.reportingContext);
    }
    return obj;
  },

  create(base?: DeepPartial<ProductChange>): ProductChange {
    return ProductChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductChange>): ProductChange {
    const message = createBaseProductChange();
    message.oldValue = object.oldValue ?? undefined;
    message.newValue = object.newValue ?? undefined;
    message.regionCode = object.regionCode ?? undefined;
    message.reportingContext = object.reportingContext ?? undefined;
    return message;
  },
};

function createBaseProductStatusChangeMessage(): ProductStatusChangeMessage {
  return {
    account: undefined,
    managingAccount: undefined,
    resourceType: undefined,
    attribute: undefined,
    changes: [],
    resourceId: undefined,
    resource: undefined,
  };
}

export const ProductStatusChangeMessage: MessageFns<ProductStatusChangeMessage> = {
  encode(message: ProductStatusChangeMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      writer.uint32(10).string(message.account);
    }
    if (message.managingAccount !== undefined) {
      writer.uint32(18).string(message.managingAccount);
    }
    if (message.resourceType !== undefined) {
      writer.uint32(24).int32(message.resourceType);
    }
    if (message.attribute !== undefined) {
      writer.uint32(32).int32(message.attribute);
    }
    for (const v of message.changes) {
      ProductChange.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.resourceId !== undefined) {
      writer.uint32(50).string(message.resourceId);
    }
    if (message.resource !== undefined) {
      writer.uint32(58).string(message.resource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductStatusChangeMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductStatusChangeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.managingAccount = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.resourceType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.attribute = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.changes.push(ProductChange.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.resource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductStatusChangeMessage {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : undefined,
      managingAccount: isSet(object.managingAccount) ? globalThis.String(object.managingAccount) : undefined,
      resourceType: isSet(object.resourceType) ? resourceFromJSON(object.resourceType) : undefined,
      attribute: isSet(object.attribute) ? attributeFromJSON(object.attribute) : undefined,
      changes: globalThis.Array.isArray(object?.changes)
        ? object.changes.map((e: any) => ProductChange.fromJSON(e))
        : [],
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : undefined,
      resource: isSet(object.resource) ? globalThis.String(object.resource) : undefined,
    };
  },

  toJSON(message: ProductStatusChangeMessage): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = message.account;
    }
    if (message.managingAccount !== undefined) {
      obj.managingAccount = message.managingAccount;
    }
    if (message.resourceType !== undefined) {
      obj.resourceType = resourceToJSON(message.resourceType);
    }
    if (message.attribute !== undefined) {
      obj.attribute = attributeToJSON(message.attribute);
    }
    if (message.changes?.length) {
      obj.changes = message.changes.map((e) => ProductChange.toJSON(e));
    }
    if (message.resourceId !== undefined) {
      obj.resourceId = message.resourceId;
    }
    if (message.resource !== undefined) {
      obj.resource = message.resource;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductStatusChangeMessage>): ProductStatusChangeMessage {
    return ProductStatusChangeMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductStatusChangeMessage>): ProductStatusChangeMessage {
    const message = createBaseProductStatusChangeMessage();
    message.account = object.account ?? undefined;
    message.managingAccount = object.managingAccount ?? undefined;
    message.resourceType = object.resourceType ?? undefined;
    message.attribute = object.attribute ?? undefined;
    message.changes = object.changes?.map((e) => ProductChange.fromPartial(e)) || [];
    message.resourceId = object.resourceId ?? undefined;
    message.resource = object.resource ?? undefined;
    return message;
  },
};

/** Service to manage notification subscriptions for merchants */
export type NotificationsApiServiceDefinition = typeof NotificationsApiServiceDefinition;
export const NotificationsApiServiceDefinition = {
  name: "NotificationsApiService",
  fullName: "google.shopping.merchant.notifications.v1beta.NotificationsApiService",
  methods: {
    /** Gets notification subscriptions for an account. */
    getNotificationSubscription: {
      name: "GetNotificationSubscription",
      requestType: GetNotificationSubscriptionRequest,
      requestStream: false,
      responseType: NotificationSubscription,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a notification subscription for a merchant. We will allow the
     * following types of notification subscriptions to exist together (per
     * merchant as a subscriber per event type):
     * 1. Subscription for all managed accounts + subscription for self
     * 2. Multiple "partial" subscriptions for managed accounts + subscription
     * for self
     *
     * we will not allow (per merchant as a subscriber per event type):
     * 1. multiple self subscriptions.
     * 2. multiple "all managed accounts" subscriptions.
     * 3. all and partial subscriptions at the same time.
     * 4. multiple partial subscriptions for the same target account
     */
    createNotificationSubscription: {
      name: "CreateNotificationSubscription",
      requestType: CreateNotificationSubscriptionRequest,
      requestStream: false,
      responseType: NotificationSubscription,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              25,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              67,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing notification subscription for a merchant. */
    updateNotificationSubscription: {
      name: "UpdateNotificationSubscription",
      requestType: UpdateNotificationSubscriptionRequest,
      requestStream: false,
      responseType: NotificationSubscription,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              37,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              122,
              58,
              25,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              50,
              93,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a notification subscription for a merchant. */
    deleteNotificationSubscription: {
      name: "DeleteNotificationSubscription",
      requestType: DeleteNotificationSubscriptionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              42,
              67,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets all the notification subscriptions for a merchant. */
    listNotificationSubscriptions: {
      name: "ListNotificationSubscriptions",
      requestType: ListNotificationSubscriptionsRequest,
      requestStream: false,
      responseType: ListNotificationSubscriptionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface NotificationsApiServiceImplementation<CallContextExt = {}> {
  /** Gets notification subscriptions for an account. */
  getNotificationSubscription(
    request: GetNotificationSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotificationSubscription>>;
  /**
   * Creates a notification subscription for a merchant. We will allow the
   * following types of notification subscriptions to exist together (per
   * merchant as a subscriber per event type):
   * 1. Subscription for all managed accounts + subscription for self
   * 2. Multiple "partial" subscriptions for managed accounts + subscription
   * for self
   *
   * we will not allow (per merchant as a subscriber per event type):
   * 1. multiple self subscriptions.
   * 2. multiple "all managed accounts" subscriptions.
   * 3. all and partial subscriptions at the same time.
   * 4. multiple partial subscriptions for the same target account
   */
  createNotificationSubscription(
    request: CreateNotificationSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotificationSubscription>>;
  /** Updates an existing notification subscription for a merchant. */
  updateNotificationSubscription(
    request: UpdateNotificationSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotificationSubscription>>;
  /** Deletes a notification subscription for a merchant. */
  deleteNotificationSubscription(
    request: DeleteNotificationSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets all the notification subscriptions for a merchant. */
  listNotificationSubscriptions(
    request: ListNotificationSubscriptionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNotificationSubscriptionsResponse>>;
}

export interface NotificationsApiServiceClient<CallOptionsExt = {}> {
  /** Gets notification subscriptions for an account. */
  getNotificationSubscription(
    request: DeepPartial<GetNotificationSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotificationSubscription>;
  /**
   * Creates a notification subscription for a merchant. We will allow the
   * following types of notification subscriptions to exist together (per
   * merchant as a subscriber per event type):
   * 1. Subscription for all managed accounts + subscription for self
   * 2. Multiple "partial" subscriptions for managed accounts + subscription
   * for self
   *
   * we will not allow (per merchant as a subscriber per event type):
   * 1. multiple self subscriptions.
   * 2. multiple "all managed accounts" subscriptions.
   * 3. all and partial subscriptions at the same time.
   * 4. multiple partial subscriptions for the same target account
   */
  createNotificationSubscription(
    request: DeepPartial<CreateNotificationSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotificationSubscription>;
  /** Updates an existing notification subscription for a merchant. */
  updateNotificationSubscription(
    request: DeepPartial<UpdateNotificationSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotificationSubscription>;
  /** Deletes a notification subscription for a merchant. */
  deleteNotificationSubscription(
    request: DeepPartial<DeleteNotificationSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets all the notification subscriptions for a merchant. */
  listNotificationSubscriptions(
    request: DeepPartial<ListNotificationSubscriptionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNotificationSubscriptionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
