// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/programs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/**
 * Defines participation in a given program for the specified account.
 *
 * Programs provide a mechanism for adding functionality to merchant accounts. A
 * typical example of this is the [Free product
 * listings](https://support.google.com/merchants/topic/9240261?ref_topic=7257954,7259405,&sjid=796648681813264022-EU)
 * program, which enables products from a merchant's store to be shown across
 * Google for free.
 */
export interface Program {
  /**
   * Identifier. The resource name of the program.
   * Format: `accounts/{account}/programs/{program}`
   */
  name: string;
  /** Output only. The URL of a Merchant Center help page describing the program. */
  documentationUri: string;
  /** Output only. The participation state of the account in the program. */
  state: Program_State;
  /**
   * Output only. The regions in which the account is actively participating in
   * the program. Active regions are defined as those where all program
   * requirements affecting the regions have been met.
   *
   * Region codes are defined by [CLDR](https://cldr.unicode.org/). This is
   * either a country where the program applies specifically to that country or
   * `001` when the program applies globally.
   */
  activeRegionCodes: string[];
  /**
   * Output only. The requirements that the account has not yet satisfied that
   * are affecting participation in the program.
   */
  unmetRequirements: Program_Requirement[];
}

/** Possible program participation states for the account. */
export enum Program_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** NOT_ELIGIBLE - The account is not eligible to participate in the program. */
  NOT_ELIGIBLE = 1,
  /** ELIGIBLE - The account is eligible to participate in the program. */
  ELIGIBLE = 2,
  /** ENABLED - The program is enabled for the account. */
  ENABLED = 3,
  UNRECOGNIZED = -1,
}

export function program_StateFromJSON(object: any): Program_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Program_State.STATE_UNSPECIFIED;
    case 1:
    case "NOT_ELIGIBLE":
      return Program_State.NOT_ELIGIBLE;
    case 2:
    case "ELIGIBLE":
      return Program_State.ELIGIBLE;
    case 3:
    case "ENABLED":
      return Program_State.ENABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Program_State.UNRECOGNIZED;
  }
}

export function program_StateToJSON(object: Program_State): string {
  switch (object) {
    case Program_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Program_State.NOT_ELIGIBLE:
      return "NOT_ELIGIBLE";
    case Program_State.ELIGIBLE:
      return "ELIGIBLE";
    case Program_State.ENABLED:
      return "ENABLED";
    case Program_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines a requirement specified for participation in the program. */
export interface Program_Requirement {
  /** Output only. Name of the requirement. */
  title: string;
  /** Output only. The URL of a help page describing the requirement. */
  documentationUri: string;
  /**
   * Output only. The regions that are currently affected by this requirement
   * not being met.
   *
   * Region codes are defined by [CLDR](https://cldr.unicode.org/). This is
   * either a country where the program applies specifically to that country
   * or `001` when the program applies globally.
   */
  affectedRegionCodes: string[];
}

/** Request message for the GetProgram method. */
export interface GetProgramRequest {
  /**
   * Required. The name of the program to retrieve.
   * Format: `accounts/{account}/programs/{program}`
   */
  name: string;
}

/** Request message for the ListPrograms method. */
export interface ListProgramsRequest {
  /**
   * Required. The name of the account for which to retrieve all programs.
   * Format: `accounts/{account}`
   */
  parent: string;
  /**
   * Optional. The maximum number of programs to return in a single response. If
   * unspecified (or 0), a default size of 1000 is used. The maximum value is
   * 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A continuation token, received from a previous `ListPrograms`
   * call. Provide this to retrieve the next page.
   */
  pageToken: string;
}

/** Response message for the ListPrograms method. */
export interface ListProgramsResponse {
  /** The programs for the given account. */
  programs: Program[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page. If this
   * field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for the EnableProgram method. */
export interface EnableProgramRequest {
  /**
   * Required. The name of the program for which to enable participation for the
   * given account. Format: `accounts/{account}/programs/{program}`
   */
  name: string;
}

/** Request message for the DisableProgram method. */
export interface DisableProgramRequest {
  /**
   * Required. The name of the program for which to disable participation for
   * the given account. Format: `accounts/{account}/programs/{program}`
   */
  name: string;
}

function createBaseProgram(): Program {
  return { name: "", documentationUri: "", state: 0, activeRegionCodes: [], unmetRequirements: [] };
}

export const Program: MessageFns<Program> = {
  encode(message: Program, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.documentationUri !== "") {
      writer.uint32(18).string(message.documentationUri);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    for (const v of message.activeRegionCodes) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.unmetRequirements) {
      Program_Requirement.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Program {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProgram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentationUri = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.activeRegionCodes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.unmetRequirements.push(Program_Requirement.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Program {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      documentationUri: isSet(object.documentationUri) ? globalThis.String(object.documentationUri) : "",
      state: isSet(object.state) ? program_StateFromJSON(object.state) : 0,
      activeRegionCodes: globalThis.Array.isArray(object?.activeRegionCodes)
        ? object.activeRegionCodes.map((e: any) => globalThis.String(e))
        : [],
      unmetRequirements: globalThis.Array.isArray(object?.unmetRequirements)
        ? object.unmetRequirements.map((e: any) => Program_Requirement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Program): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.documentationUri !== "") {
      obj.documentationUri = message.documentationUri;
    }
    if (message.state !== 0) {
      obj.state = program_StateToJSON(message.state);
    }
    if (message.activeRegionCodes?.length) {
      obj.activeRegionCodes = message.activeRegionCodes;
    }
    if (message.unmetRequirements?.length) {
      obj.unmetRequirements = message.unmetRequirements.map((e) => Program_Requirement.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Program>): Program {
    return Program.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Program>): Program {
    const message = createBaseProgram();
    message.name = object.name ?? "";
    message.documentationUri = object.documentationUri ?? "";
    message.state = object.state ?? 0;
    message.activeRegionCodes = object.activeRegionCodes?.map((e) => e) || [];
    message.unmetRequirements = object.unmetRequirements?.map((e) => Program_Requirement.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProgram_Requirement(): Program_Requirement {
  return { title: "", documentationUri: "", affectedRegionCodes: [] };
}

export const Program_Requirement: MessageFns<Program_Requirement> = {
  encode(message: Program_Requirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.documentationUri !== "") {
      writer.uint32(18).string(message.documentationUri);
    }
    for (const v of message.affectedRegionCodes) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Program_Requirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProgram_Requirement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentationUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.affectedRegionCodes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Program_Requirement {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      documentationUri: isSet(object.documentationUri) ? globalThis.String(object.documentationUri) : "",
      affectedRegionCodes: globalThis.Array.isArray(object?.affectedRegionCodes)
        ? object.affectedRegionCodes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Program_Requirement): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.documentationUri !== "") {
      obj.documentationUri = message.documentationUri;
    }
    if (message.affectedRegionCodes?.length) {
      obj.affectedRegionCodes = message.affectedRegionCodes;
    }
    return obj;
  },

  create(base?: DeepPartial<Program_Requirement>): Program_Requirement {
    return Program_Requirement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Program_Requirement>): Program_Requirement {
    const message = createBaseProgram_Requirement();
    message.title = object.title ?? "";
    message.documentationUri = object.documentationUri ?? "";
    message.affectedRegionCodes = object.affectedRegionCodes?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetProgramRequest(): GetProgramRequest {
  return { name: "" };
}

export const GetProgramRequest: MessageFns<GetProgramRequest> = {
  encode(message: GetProgramRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProgramRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProgramRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProgramRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProgramRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProgramRequest>): GetProgramRequest {
    return GetProgramRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProgramRequest>): GetProgramRequest {
    const message = createBaseGetProgramRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListProgramsRequest(): ListProgramsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListProgramsRequest: MessageFns<ListProgramsRequest> = {
  encode(message: ListProgramsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProgramsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProgramsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProgramsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProgramsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProgramsRequest>): ListProgramsRequest {
    return ListProgramsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProgramsRequest>): ListProgramsRequest {
    const message = createBaseListProgramsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProgramsResponse(): ListProgramsResponse {
  return { programs: [], nextPageToken: "" };
}

export const ListProgramsResponse: MessageFns<ListProgramsResponse> = {
  encode(message: ListProgramsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.programs) {
      Program.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProgramsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProgramsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programs.push(Program.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProgramsResponse {
    return {
      programs: globalThis.Array.isArray(object?.programs) ? object.programs.map((e: any) => Program.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProgramsResponse): unknown {
    const obj: any = {};
    if (message.programs?.length) {
      obj.programs = message.programs.map((e) => Program.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProgramsResponse>): ListProgramsResponse {
    return ListProgramsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProgramsResponse>): ListProgramsResponse {
    const message = createBaseListProgramsResponse();
    message.programs = object.programs?.map((e) => Program.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseEnableProgramRequest(): EnableProgramRequest {
  return { name: "" };
}

export const EnableProgramRequest: MessageFns<EnableProgramRequest> = {
  encode(message: EnableProgramRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableProgramRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableProgramRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableProgramRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: EnableProgramRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableProgramRequest>): EnableProgramRequest {
    return EnableProgramRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableProgramRequest>): EnableProgramRequest {
    const message = createBaseEnableProgramRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDisableProgramRequest(): DisableProgramRequest {
  return { name: "" };
}

export const DisableProgramRequest: MessageFns<DisableProgramRequest> = {
  encode(message: DisableProgramRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableProgramRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableProgramRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableProgramRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DisableProgramRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableProgramRequest>): DisableProgramRequest {
    return DisableProgramRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableProgramRequest>): DisableProgramRequest {
    const message = createBaseDisableProgramRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service for program management.
 *
 * Programs provide a mechanism for adding functionality to merchant accounts. A
 * typical example of this is the [Free product
 * listings](https://support.google.com/merchants/topic/9240261?ref_topic=7257954,7259405,&sjid=796648681813264022-EU)
 * program, which enables products from a merchant's store to be shown across
 * Google for free.
 *
 * This service exposes methods to retrieve a merchant's
 * participation in all available programs, in addition to methods for
 * explicitly enabling or disabling participation in each program.
 */
export type ProgramsServiceDefinition = typeof ProgramsServiceDefinition;
export const ProgramsServiceDefinition = {
  name: "ProgramsService",
  fullName: "google.shopping.merchant.accounts.v1beta.ProgramsService",
  methods: {
    /** Retrieves the specified program for the account. */
    getProgram: {
      name: "GetProgram",
      requestType: GetProgramRequest,
      requestStream: false,
      responseType: Program,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              103,
              114,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves all programs for the account. */
    listPrograms: {
      name: "ListPrograms",
      requestType: ListProgramsRequest,
      requestStream: false,
      responseType: ListProgramsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              103,
              114,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Enable participation in the specified program for the account. Executing
     * this method requires admin access.
     */
    enableProgram: {
      name: "EnableProgram",
      requestType: EnableProgramRequest,
      requestStream: false,
      responseType: Program,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              103,
              114,
              97,
              109,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Disable participation in the specified program for the account. Executing
     * this method requires admin access.
     */
    disableProgram: {
      name: "DisableProgram",
      requestType: DisableProgramRequest,
      requestStream: false,
      responseType: Program,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              103,
              114,
              97,
              109,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProgramsServiceImplementation<CallContextExt = {}> {
  /** Retrieves the specified program for the account. */
  getProgram(request: GetProgramRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Program>>;
  /** Retrieves all programs for the account. */
  listPrograms(
    request: ListProgramsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProgramsResponse>>;
  /**
   * Enable participation in the specified program for the account. Executing
   * this method requires admin access.
   */
  enableProgram(request: EnableProgramRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Program>>;
  /**
   * Disable participation in the specified program for the account. Executing
   * this method requires admin access.
   */
  disableProgram(request: DisableProgramRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Program>>;
}

export interface ProgramsServiceClient<CallOptionsExt = {}> {
  /** Retrieves the specified program for the account. */
  getProgram(request: DeepPartial<GetProgramRequest>, options?: CallOptions & CallOptionsExt): Promise<Program>;
  /** Retrieves all programs for the account. */
  listPrograms(
    request: DeepPartial<ListProgramsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProgramsResponse>;
  /**
   * Enable participation in the specified program for the account. Executing
   * this method requires admin access.
   */
  enableProgram(request: DeepPartial<EnableProgramRequest>, options?: CallOptions & CallOptionsExt): Promise<Program>;
  /**
   * Disable participation in the specified program for the account. Executing
   * this method requires admin access.
   */
  disableProgram(request: DeepPartial<DisableProgramRequest>, options?: CallOptions & CallOptionsExt): Promise<Program>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
