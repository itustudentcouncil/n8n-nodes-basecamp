// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/homepage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/** A store's homepage. */
export interface Homepage {
  /**
   * Identifier. The resource name of the store's homepage.
   * Format: `accounts/{account}/homepage`
   */
  name: string;
  /** Required. The URI (typically a URL) of the store's homepage. */
  uri?:
    | string
    | undefined;
  /**
   * Output only. Whether the homepage is claimed. See
   * https://support.google.com/merchants/answer/176793.
   */
  claimed: boolean;
}

/** Request message for the `GetHomepage` method. */
export interface GetHomepageRequest {
  /**
   * Required. The name of the homepage to retrieve.
   * Format: `accounts/{account}/homepage`
   */
  name: string;
}

/** Request message for the `UpdateHomepage` method. */
export interface UpdateHomepageRequest {
  /** Required. The new version of the homepage. */
  homepage:
    | Homepage
    | undefined;
  /** Required. List of fields being updated. */
  updateMask: string[] | undefined;
}

/** Request message for the `ClaimHomepage` method. */
export interface ClaimHomepageRequest {
  /**
   * Required. The name of the homepage to claim.
   * Format: `accounts/{account}/homepage`
   */
  name: string;
}

/** Request message for the `UnclaimHomepage` method. */
export interface UnclaimHomepageRequest {
  /**
   * Required. The name of the homepage to unclaim.
   * Format: `accounts/{account}/homepage`
   */
  name: string;
}

function createBaseHomepage(): Homepage {
  return { name: "", uri: undefined, claimed: false };
}

export const Homepage: MessageFns<Homepage> = {
  encode(message: Homepage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uri !== undefined) {
      writer.uint32(18).string(message.uri);
    }
    if (message.claimed !== false) {
      writer.uint32(24).bool(message.claimed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Homepage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHomepage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.claimed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Homepage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      claimed: isSet(object.claimed) ? globalThis.Boolean(object.claimed) : false,
    };
  },

  toJSON(message: Homepage): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.claimed !== false) {
      obj.claimed = message.claimed;
    }
    return obj;
  },

  create(base?: DeepPartial<Homepage>): Homepage {
    return Homepage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Homepage>): Homepage {
    const message = createBaseHomepage();
    message.name = object.name ?? "";
    message.uri = object.uri ?? undefined;
    message.claimed = object.claimed ?? false;
    return message;
  },
};

function createBaseGetHomepageRequest(): GetHomepageRequest {
  return { name: "" };
}

export const GetHomepageRequest: MessageFns<GetHomepageRequest> = {
  encode(message: GetHomepageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHomepageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHomepageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHomepageRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHomepageRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHomepageRequest>): GetHomepageRequest {
    return GetHomepageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHomepageRequest>): GetHomepageRequest {
    const message = createBaseGetHomepageRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateHomepageRequest(): UpdateHomepageRequest {
  return { homepage: undefined, updateMask: undefined };
}

export const UpdateHomepageRequest: MessageFns<UpdateHomepageRequest> = {
  encode(message: UpdateHomepageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.homepage !== undefined) {
      Homepage.encode(message.homepage, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHomepageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHomepageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.homepage = Homepage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHomepageRequest {
    return {
      homepage: isSet(object.homepage) ? Homepage.fromJSON(object.homepage) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateHomepageRequest): unknown {
    const obj: any = {};
    if (message.homepage !== undefined) {
      obj.homepage = Homepage.toJSON(message.homepage);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateHomepageRequest>): UpdateHomepageRequest {
    return UpdateHomepageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHomepageRequest>): UpdateHomepageRequest {
    const message = createBaseUpdateHomepageRequest();
    message.homepage = (object.homepage !== undefined && object.homepage !== null)
      ? Homepage.fromPartial(object.homepage)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseClaimHomepageRequest(): ClaimHomepageRequest {
  return { name: "" };
}

export const ClaimHomepageRequest: MessageFns<ClaimHomepageRequest> = {
  encode(message: ClaimHomepageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimHomepageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimHomepageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimHomepageRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ClaimHomepageRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ClaimHomepageRequest>): ClaimHomepageRequest {
    return ClaimHomepageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClaimHomepageRequest>): ClaimHomepageRequest {
    const message = createBaseClaimHomepageRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUnclaimHomepageRequest(): UnclaimHomepageRequest {
  return { name: "" };
}

export const UnclaimHomepageRequest: MessageFns<UnclaimHomepageRequest> = {
  encode(message: UnclaimHomepageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnclaimHomepageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnclaimHomepageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnclaimHomepageRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UnclaimHomepageRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UnclaimHomepageRequest>): UnclaimHomepageRequest {
    return UnclaimHomepageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnclaimHomepageRequest>): UnclaimHomepageRequest {
    const message = createBaseUnclaimHomepageRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service to support an API for a store's homepage. */
export type HomepageServiceDefinition = typeof HomepageServiceDefinition;
export const HomepageServiceDefinition = {
  name: "HomepageService",
  fullName: "google.shopping.merchant.accounts.v1beta.HomepageService",
  methods: {
    /** Retrieves a store's homepage. */
    getHomepage: {
      name: "GetHomepage",
      requestType: GetHomepageRequest,
      requestStream: false,
      responseType: Homepage,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a store's homepage. Executing this method requires admin access. */
    updateHomepage: {
      name: "UpdateHomepage",
      requestType: UpdateHomepageRequest,
      requestStream: false,
      responseType: Homepage,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              8,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              50,
              52,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Claims a store's homepage. Executing this method requires admin access.
     *
     * If the homepage is already claimed, this will recheck the
     * verification (unless the merchant is exempted from claiming, which also
     * exempts from verification) and return a successful response. If ownership
     * can no longer be verified, it will return an error, but it won't clear the
     * claim. In case of failure, a canonical error message will be returned:
     *    * PERMISSION_DENIED: user doesn't have the necessary permissions on this
     *    MC account;
     *    * FAILED_PRECONDITION:
     *      - The account is not a Merchant Center account;
     *      - MC account doesn't have a homepage;
     *      - claiming failed (in this case the error message will contain more
     *      details).
     */
    claimHomepage: {
      name: "ClaimHomepage",
      requestType: ClaimHomepageRequest,
      requestStream: false,
      responseType: Homepage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              125,
              58,
              99,
              108,
              97,
              105,
              109,
            ]),
          ],
        },
      },
    },
    /** Unclaims a store's homepage. Executing this method requires admin access. */
    unclaimHomepage: {
      name: "UnclaimHomepage",
      requestType: UnclaimHomepageRequest,
      requestStream: false,
      responseType: Homepage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              104,
              111,
              109,
              101,
              112,
              97,
              103,
              101,
              125,
              58,
              117,
              110,
              99,
              108,
              97,
              105,
              109,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface HomepageServiceImplementation<CallContextExt = {}> {
  /** Retrieves a store's homepage. */
  getHomepage(request: GetHomepageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Homepage>>;
  /** Updates a store's homepage. Executing this method requires admin access. */
  updateHomepage(request: UpdateHomepageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Homepage>>;
  /**
   * Claims a store's homepage. Executing this method requires admin access.
   *
   * If the homepage is already claimed, this will recheck the
   * verification (unless the merchant is exempted from claiming, which also
   * exempts from verification) and return a successful response. If ownership
   * can no longer be verified, it will return an error, but it won't clear the
   * claim. In case of failure, a canonical error message will be returned:
   *    * PERMISSION_DENIED: user doesn't have the necessary permissions on this
   *    MC account;
   *    * FAILED_PRECONDITION:
   *      - The account is not a Merchant Center account;
   *      - MC account doesn't have a homepage;
   *      - claiming failed (in this case the error message will contain more
   *      details).
   */
  claimHomepage(request: ClaimHomepageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Homepage>>;
  /** Unclaims a store's homepage. Executing this method requires admin access. */
  unclaimHomepage(
    request: UnclaimHomepageRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Homepage>>;
}

export interface HomepageServiceClient<CallOptionsExt = {}> {
  /** Retrieves a store's homepage. */
  getHomepage(request: DeepPartial<GetHomepageRequest>, options?: CallOptions & CallOptionsExt): Promise<Homepage>;
  /** Updates a store's homepage. Executing this method requires admin access. */
  updateHomepage(
    request: DeepPartial<UpdateHomepageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Homepage>;
  /**
   * Claims a store's homepage. Executing this method requires admin access.
   *
   * If the homepage is already claimed, this will recheck the
   * verification (unless the merchant is exempted from claiming, which also
   * exempts from verification) and return a successful response. If ownership
   * can no longer be verified, it will return an error, but it won't clear the
   * claim. In case of failure, a canonical error message will be returned:
   *    * PERMISSION_DENIED: user doesn't have the necessary permissions on this
   *    MC account;
   *    * FAILED_PRECONDITION:
   *      - The account is not a Merchant Center account;
   *      - MC account doesn't have a homepage;
   *      - claiming failed (in this case the error message will contain more
   *      details).
   */
  claimHomepage(request: DeepPartial<ClaimHomepageRequest>, options?: CallOptions & CallOptionsExt): Promise<Homepage>;
  /** Unclaims a store's homepage. Executing this method requires admin access. */
  unclaimHomepage(
    request: DeepPartial<UnclaimHomepageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Homepage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
