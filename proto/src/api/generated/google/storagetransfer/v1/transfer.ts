// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/storagetransfer/v1/transfer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../longrunning/operations.js";
import { Empty } from "../../protobuf/empty.js";
import { FieldMask } from "../../protobuf/field_mask.js";
import { AgentPool, GoogleServiceAccount, TransferJob } from "./transfer_types.js";

export const protobufPackage = "google.storagetransfer.v1";

/** Request passed to GetGoogleServiceAccount. */
export interface GetGoogleServiceAccountRequest {
  /**
   * Required. The ID of the Google Cloud project that the Google service
   * account is associated with.
   */
  projectId: string;
}

/** Request passed to CreateTransferJob. */
export interface CreateTransferJobRequest {
  /** Required. The job to create. */
  transferJob: TransferJob | undefined;
}

/** Request passed to UpdateTransferJob. */
export interface UpdateTransferJobRequest {
  /** Required. The name of job to update. */
  jobName: string;
  /**
   * Required. The ID of the Google Cloud project that owns the
   * job.
   */
  projectId: string;
  /**
   * Required. The job to update. `transferJob` is expected to specify one or
   * more of five fields:
   * [description][google.storagetransfer.v1.TransferJob.description],
   * [transfer_spec][google.storagetransfer.v1.TransferJob.transfer_spec],
   * [notification_config][google.storagetransfer.v1.TransferJob.notification_config],
   * [logging_config][google.storagetransfer.v1.TransferJob.logging_config], and
   * [status][google.storagetransfer.v1.TransferJob.status].  An
   * `UpdateTransferJobRequest` that specifies other fields are rejected with
   * the error [INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]. Updating a
   * job status to
   * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED] requires
   * `storagetransfer.jobs.delete` permission.
   */
  transferJob:
    | TransferJob
    | undefined;
  /**
   * The field mask of the fields in `transferJob` that are to be updated in
   * this request.  Fields in `transferJob` that can be updated are:
   * [description][google.storagetransfer.v1.TransferJob.description],
   * [transfer_spec][google.storagetransfer.v1.TransferJob.transfer_spec],
   * [notification_config][google.storagetransfer.v1.TransferJob.notification_config],
   * [logging_config][google.storagetransfer.v1.TransferJob.logging_config], and
   * [status][google.storagetransfer.v1.TransferJob.status].  To update the
   * `transfer_spec` of the job, a complete transfer specification must be
   * provided. An incomplete specification missing any required fields is
   * rejected with the error
   * [INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT].
   */
  updateTransferJobFieldMask: string[] | undefined;
}

/** Request passed to GetTransferJob. */
export interface GetTransferJobRequest {
  /** Required. The job to get. */
  jobName: string;
  /**
   * Required. The ID of the Google Cloud project that owns the
   * job.
   */
  projectId: string;
}

/** Request passed to DeleteTransferJob. */
export interface DeleteTransferJobRequest {
  /** Required. The job to delete. */
  jobName: string;
  /**
   * Required. The ID of the Google Cloud project that owns the
   * job.
   */
  projectId: string;
}

/**
 * `projectId`, `jobNames`, and `jobStatuses` are query parameters that can
 * be specified when listing transfer jobs.
 */
export interface ListTransferJobsRequest {
  /**
   * Required. A list of query parameters specified as JSON text in the form of:
   * `{"projectId":"my_project_id",
   *  "jobNames":["jobid1","jobid2",...],
   *  "jobStatuses":["status1","status2",...]}`
   *
   * Since `jobNames` and `jobStatuses` support multiple values, their values
   * must be specified with array notation. `projectId` is required.
   * `jobNames` and `jobStatuses` are optional.  The valid values for
   * `jobStatuses` are case-insensitive:
   * [ENABLED][google.storagetransfer.v1.TransferJob.Status.ENABLED],
   * [DISABLED][google.storagetransfer.v1.TransferJob.Status.DISABLED], and
   * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED].
   */
  filter: string;
  /** The list page size. The max allowed value is 256. */
  pageSize: number;
  /** The list page token. */
  pageToken: string;
}

/** Response from ListTransferJobs. */
export interface ListTransferJobsResponse {
  /** A list of transfer jobs. */
  transferJobs: TransferJob[];
  /** The list next page token. */
  nextPageToken: string;
}

/** Request passed to PauseTransferOperation. */
export interface PauseTransferOperationRequest {
  /** Required. The name of the transfer operation. */
  name: string;
}

/** Request passed to ResumeTransferOperation. */
export interface ResumeTransferOperationRequest {
  /** Required. The name of the transfer operation. */
  name: string;
}

/** Request passed to RunTransferJob. */
export interface RunTransferJobRequest {
  /** Required. The name of the transfer job. */
  jobName: string;
  /**
   * Required. The ID of the Google Cloud project that owns the transfer
   * job.
   */
  projectId: string;
}

/** Specifies the request passed to CreateAgentPool. */
export interface CreateAgentPoolRequest {
  /**
   * Required. The ID of the Google Cloud project that owns the
   * agent pool.
   */
  projectId: string;
  /** Required. The agent pool to create. */
  agentPool:
    | AgentPool
    | undefined;
  /**
   * Required. The ID of the agent pool to create.
   *
   * The `agent_pool_id` must meet the following requirements:
   *
   * *   Length of 128 characters or less.
   * *   Not start with the string `goog`.
   * *   Start with a lowercase ASCII character, followed by:
   *     *   Zero or more: lowercase Latin alphabet characters, numerals,
   *         hyphens (`-`), periods (`.`), underscores (`_`), or tildes (`~`).
   *     *   One or more numerals or lowercase ASCII characters.
   *
   * As expressed by the regular expression:
   * `^(?!goog)[a-z]([a-z0-9-._~]*[a-z0-9])?$`.
   */
  agentPoolId: string;
}

/** Specifies the request passed to UpdateAgentPool. */
export interface UpdateAgentPoolRequest {
  /**
   * Required. The agent pool to update. `agent_pool` is expected to specify
   * following fields:
   *
   * *  [name][google.storagetransfer.v1.AgentPool.name]
   *
   * *  [display_name][google.storagetransfer.v1.AgentPool.display_name]
   *
   * *  [bandwidth_limit][google.storagetransfer.v1.AgentPool.bandwidth_limit]
   * An `UpdateAgentPoolRequest` with any other fields is rejected
   * with the error [INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT].
   */
  agentPool:
    | AgentPool
    | undefined;
  /**
   * The [field mask]
   * (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)
   * of the fields in `agentPool` to update in this request.
   * The following `agentPool` fields can be updated:
   *
   * *  [display_name][google.storagetransfer.v1.AgentPool.display_name]
   *
   * *  [bandwidth_limit][google.storagetransfer.v1.AgentPool.bandwidth_limit]
   */
  updateMask: string[] | undefined;
}

/** Specifies the request passed to GetAgentPool. */
export interface GetAgentPoolRequest {
  /** Required. The name of the agent pool to get. */
  name: string;
}

/** Specifies the request passed to DeleteAgentPool. */
export interface DeleteAgentPoolRequest {
  /** Required. The name of the agent pool to delete. */
  name: string;
}

/** The request passed to ListAgentPools. */
export interface ListAgentPoolsRequest {
  /** Required. The ID of the Google Cloud project that owns the job. */
  projectId: string;
  /**
   * An optional list of query parameters specified as JSON text in the
   * form of:
   *
   * `{"agentPoolNames":["agentpool1","agentpool2",...]}`
   *
   * Since `agentPoolNames` support multiple values, its values must be
   * specified with array notation. When the filter is either empty or not
   * provided, the list returns all agent pools for the project.
   */
  filter: string;
  /** The list page size. The max allowed value is `256`. */
  pageSize: number;
  /** The list page token. */
  pageToken: string;
}

/** Response from ListAgentPools. */
export interface ListAgentPoolsResponse {
  /** A list of agent pools. */
  agentPools: AgentPool[];
  /** The list next page token. */
  nextPageToken: string;
}

function createBaseGetGoogleServiceAccountRequest(): GetGoogleServiceAccountRequest {
  return { projectId: "" };
}

export const GetGoogleServiceAccountRequest: MessageFns<GetGoogleServiceAccountRequest> = {
  encode(message: GetGoogleServiceAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGoogleServiceAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGoogleServiceAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGoogleServiceAccountRequest {
    return { projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "" };
  },

  toJSON(message: GetGoogleServiceAccountRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGoogleServiceAccountRequest>): GetGoogleServiceAccountRequest {
    return GetGoogleServiceAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGoogleServiceAccountRequest>): GetGoogleServiceAccountRequest {
    const message = createBaseGetGoogleServiceAccountRequest();
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseCreateTransferJobRequest(): CreateTransferJobRequest {
  return { transferJob: undefined };
}

export const CreateTransferJobRequest: MessageFns<CreateTransferJobRequest> = {
  encode(message: CreateTransferJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transferJob !== undefined) {
      TransferJob.encode(message.transferJob, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTransferJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTransferJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transferJob = TransferJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTransferJobRequest {
    return { transferJob: isSet(object.transferJob) ? TransferJob.fromJSON(object.transferJob) : undefined };
  },

  toJSON(message: CreateTransferJobRequest): unknown {
    const obj: any = {};
    if (message.transferJob !== undefined) {
      obj.transferJob = TransferJob.toJSON(message.transferJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTransferJobRequest>): CreateTransferJobRequest {
    return CreateTransferJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTransferJobRequest>): CreateTransferJobRequest {
    const message = createBaseCreateTransferJobRequest();
    message.transferJob = (object.transferJob !== undefined && object.transferJob !== null)
      ? TransferJob.fromPartial(object.transferJob)
      : undefined;
    return message;
  },
};

function createBaseUpdateTransferJobRequest(): UpdateTransferJobRequest {
  return { jobName: "", projectId: "", transferJob: undefined, updateTransferJobFieldMask: undefined };
}

export const UpdateTransferJobRequest: MessageFns<UpdateTransferJobRequest> = {
  encode(message: UpdateTransferJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.transferJob !== undefined) {
      TransferJob.encode(message.transferJob, writer.uint32(26).fork()).join();
    }
    if (message.updateTransferJobFieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateTransferJobFieldMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTransferJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTransferJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.transferJob = TransferJob.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTransferJobFieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTransferJobRequest {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      transferJob: isSet(object.transferJob) ? TransferJob.fromJSON(object.transferJob) : undefined,
      updateTransferJobFieldMask: isSet(object.updateTransferJobFieldMask)
        ? FieldMask.unwrap(FieldMask.fromJSON(object.updateTransferJobFieldMask))
        : undefined,
    };
  },

  toJSON(message: UpdateTransferJobRequest): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.transferJob !== undefined) {
      obj.transferJob = TransferJob.toJSON(message.transferJob);
    }
    if (message.updateTransferJobFieldMask !== undefined) {
      obj.updateTransferJobFieldMask = FieldMask.toJSON(FieldMask.wrap(message.updateTransferJobFieldMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTransferJobRequest>): UpdateTransferJobRequest {
    return UpdateTransferJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTransferJobRequest>): UpdateTransferJobRequest {
    const message = createBaseUpdateTransferJobRequest();
    message.jobName = object.jobName ?? "";
    message.projectId = object.projectId ?? "";
    message.transferJob = (object.transferJob !== undefined && object.transferJob !== null)
      ? TransferJob.fromPartial(object.transferJob)
      : undefined;
    message.updateTransferJobFieldMask = object.updateTransferJobFieldMask ?? undefined;
    return message;
  },
};

function createBaseGetTransferJobRequest(): GetTransferJobRequest {
  return { jobName: "", projectId: "" };
}

export const GetTransferJobRequest: MessageFns<GetTransferJobRequest> = {
  encode(message: GetTransferJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransferJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransferJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransferJobRequest {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: GetTransferJobRequest): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTransferJobRequest>): GetTransferJobRequest {
    return GetTransferJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTransferJobRequest>): GetTransferJobRequest {
    const message = createBaseGetTransferJobRequest();
    message.jobName = object.jobName ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseDeleteTransferJobRequest(): DeleteTransferJobRequest {
  return { jobName: "", projectId: "" };
}

export const DeleteTransferJobRequest: MessageFns<DeleteTransferJobRequest> = {
  encode(message: DeleteTransferJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTransferJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTransferJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTransferJobRequest {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: DeleteTransferJobRequest): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTransferJobRequest>): DeleteTransferJobRequest {
    return DeleteTransferJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTransferJobRequest>): DeleteTransferJobRequest {
    const message = createBaseDeleteTransferJobRequest();
    message.jobName = object.jobName ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseListTransferJobsRequest(): ListTransferJobsRequest {
  return { filter: "", pageSize: 0, pageToken: "" };
}

export const ListTransferJobsRequest: MessageFns<ListTransferJobsRequest> = {
  encode(message: ListTransferJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferJobsRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTransferJobsRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferJobsRequest>): ListTransferJobsRequest {
    return ListTransferJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferJobsRequest>): ListTransferJobsRequest {
    const message = createBaseListTransferJobsRequest();
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTransferJobsResponse(): ListTransferJobsResponse {
  return { transferJobs: [], nextPageToken: "" };
}

export const ListTransferJobsResponse: MessageFns<ListTransferJobsResponse> = {
  encode(message: ListTransferJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transferJobs) {
      TransferJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transferJobs.push(TransferJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferJobsResponse {
    return {
      transferJobs: globalThis.Array.isArray(object?.transferJobs)
        ? object.transferJobs.map((e: any) => TransferJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTransferJobsResponse): unknown {
    const obj: any = {};
    if (message.transferJobs?.length) {
      obj.transferJobs = message.transferJobs.map((e) => TransferJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferJobsResponse>): ListTransferJobsResponse {
    return ListTransferJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferJobsResponse>): ListTransferJobsResponse {
    const message = createBaseListTransferJobsResponse();
    message.transferJobs = object.transferJobs?.map((e) => TransferJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBasePauseTransferOperationRequest(): PauseTransferOperationRequest {
  return { name: "" };
}

export const PauseTransferOperationRequest: MessageFns<PauseTransferOperationRequest> = {
  encode(message: PauseTransferOperationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseTransferOperationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseTransferOperationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PauseTransferOperationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PauseTransferOperationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PauseTransferOperationRequest>): PauseTransferOperationRequest {
    return PauseTransferOperationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PauseTransferOperationRequest>): PauseTransferOperationRequest {
    const message = createBasePauseTransferOperationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeTransferOperationRequest(): ResumeTransferOperationRequest {
  return { name: "" };
}

export const ResumeTransferOperationRequest: MessageFns<ResumeTransferOperationRequest> = {
  encode(message: ResumeTransferOperationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeTransferOperationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeTransferOperationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeTransferOperationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeTransferOperationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeTransferOperationRequest>): ResumeTransferOperationRequest {
    return ResumeTransferOperationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeTransferOperationRequest>): ResumeTransferOperationRequest {
    const message = createBaseResumeTransferOperationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRunTransferJobRequest(): RunTransferJobRequest {
  return { jobName: "", projectId: "" };
}

export const RunTransferJobRequest: MessageFns<RunTransferJobRequest> = {
  encode(message: RunTransferJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunTransferJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunTransferJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunTransferJobRequest {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: RunTransferJobRequest): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<RunTransferJobRequest>): RunTransferJobRequest {
    return RunTransferJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunTransferJobRequest>): RunTransferJobRequest {
    const message = createBaseRunTransferJobRequest();
    message.jobName = object.jobName ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseCreateAgentPoolRequest(): CreateAgentPoolRequest {
  return { projectId: "", agentPool: undefined, agentPoolId: "" };
}

export const CreateAgentPoolRequest: MessageFns<CreateAgentPoolRequest> = {
  encode(message: CreateAgentPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.agentPool !== undefined) {
      AgentPool.encode(message.agentPool, writer.uint32(18).fork()).join();
    }
    if (message.agentPoolId !== "") {
      writer.uint32(26).string(message.agentPoolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAgentPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAgentPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentPool = AgentPool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.agentPoolId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAgentPoolRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      agentPool: isSet(object.agentPool) ? AgentPool.fromJSON(object.agentPool) : undefined,
      agentPoolId: isSet(object.agentPoolId) ? globalThis.String(object.agentPoolId) : "",
    };
  },

  toJSON(message: CreateAgentPoolRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.agentPool !== undefined) {
      obj.agentPool = AgentPool.toJSON(message.agentPool);
    }
    if (message.agentPoolId !== "") {
      obj.agentPoolId = message.agentPoolId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAgentPoolRequest>): CreateAgentPoolRequest {
    return CreateAgentPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAgentPoolRequest>): CreateAgentPoolRequest {
    const message = createBaseCreateAgentPoolRequest();
    message.projectId = object.projectId ?? "";
    message.agentPool = (object.agentPool !== undefined && object.agentPool !== null)
      ? AgentPool.fromPartial(object.agentPool)
      : undefined;
    message.agentPoolId = object.agentPoolId ?? "";
    return message;
  },
};

function createBaseUpdateAgentPoolRequest(): UpdateAgentPoolRequest {
  return { agentPool: undefined, updateMask: undefined };
}

export const UpdateAgentPoolRequest: MessageFns<UpdateAgentPoolRequest> = {
  encode(message: UpdateAgentPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentPool !== undefined) {
      AgentPool.encode(message.agentPool, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAgentPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAgentPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentPool = AgentPool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAgentPoolRequest {
    return {
      agentPool: isSet(object.agentPool) ? AgentPool.fromJSON(object.agentPool) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAgentPoolRequest): unknown {
    const obj: any = {};
    if (message.agentPool !== undefined) {
      obj.agentPool = AgentPool.toJSON(message.agentPool);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAgentPoolRequest>): UpdateAgentPoolRequest {
    return UpdateAgentPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAgentPoolRequest>): UpdateAgentPoolRequest {
    const message = createBaseUpdateAgentPoolRequest();
    message.agentPool = (object.agentPool !== undefined && object.agentPool !== null)
      ? AgentPool.fromPartial(object.agentPool)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAgentPoolRequest(): GetAgentPoolRequest {
  return { name: "" };
}

export const GetAgentPoolRequest: MessageFns<GetAgentPoolRequest> = {
  encode(message: GetAgentPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAgentPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentPoolRequest>): GetAgentPoolRequest {
    return GetAgentPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentPoolRequest>): GetAgentPoolRequest {
    const message = createBaseGetAgentPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteAgentPoolRequest(): DeleteAgentPoolRequest {
  return { name: "" };
}

export const DeleteAgentPoolRequest: MessageFns<DeleteAgentPoolRequest> = {
  encode(message: DeleteAgentPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAgentPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAgentPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAgentPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAgentPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAgentPoolRequest>): DeleteAgentPoolRequest {
    return DeleteAgentPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAgentPoolRequest>): DeleteAgentPoolRequest {
    const message = createBaseDeleteAgentPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAgentPoolsRequest(): ListAgentPoolsRequest {
  return { projectId: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListAgentPoolsRequest: MessageFns<ListAgentPoolsRequest> = {
  encode(message: ListAgentPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentPoolsRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAgentPoolsRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentPoolsRequest>): ListAgentPoolsRequest {
    return ListAgentPoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentPoolsRequest>): ListAgentPoolsRequest {
    const message = createBaseListAgentPoolsRequest();
    message.projectId = object.projectId ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAgentPoolsResponse(): ListAgentPoolsResponse {
  return { agentPools: [], nextPageToken: "" };
}

export const ListAgentPoolsResponse: MessageFns<ListAgentPoolsResponse> = {
  encode(message: ListAgentPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agentPools) {
      AgentPool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentPools.push(AgentPool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentPoolsResponse {
    return {
      agentPools: globalThis.Array.isArray(object?.agentPools)
        ? object.agentPools.map((e: any) => AgentPool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAgentPoolsResponse): unknown {
    const obj: any = {};
    if (message.agentPools?.length) {
      obj.agentPools = message.agentPools.map((e) => AgentPool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentPoolsResponse>): ListAgentPoolsResponse {
    return ListAgentPoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentPoolsResponse>): ListAgentPoolsResponse {
    const message = createBaseListAgentPoolsResponse();
    message.agentPools = object.agentPools?.map((e) => AgentPool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Storage Transfer Service and its protos.
 * Transfers data between between Google Cloud Storage buckets or from a data
 * source external to Google to a Cloud Storage bucket.
 */
export type StorageTransferServiceDefinition = typeof StorageTransferServiceDefinition;
export const StorageTransferServiceDefinition = {
  name: "StorageTransferService",
  fullName: "google.storagetransfer.v1.StorageTransferService",
  methods: {
    /**
     * Returns the Google service account that is used by Storage Transfer
     * Service to access buckets in the project where transfers
     * run or in other projects. Each Google service account is associated
     * with one Google Cloud project. Users
     * should add this service account to the Google Cloud Storage bucket
     * ACLs to grant access to Storage Transfer Service. This service
     * account is created and owned by Storage Transfer Service and can
     * only be used by Storage Transfer Service.
     */
    getGoogleServiceAccount: {
      name: "GetGoogleServiceAccount",
      requestType: GetGoogleServiceAccountRequest,
      requestStream: false,
      responseType: GoogleServiceAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a transfer job that runs periodically. */
    createTransferJob: {
      name: "CreateTransferJob",
      requestType: CreateTransferJobRequest,
      requestStream: false,
      responseType: TransferJob,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              58,
              12,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              106,
              111,
              98,
              34,
              16,
              47,
              118,
              49,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a transfer job. Updating a job's transfer spec does not affect
     * transfer operations that are running already.
     *
     * **Note:** The job's [status][google.storagetransfer.v1.TransferJob.status]
     * field can be modified using this RPC (for example, to set a job's status to
     * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED],
     * [DISABLED][google.storagetransfer.v1.TransferJob.Status.DISABLED], or
     * [ENABLED][google.storagetransfer.v1.TransferJob.Status.ENABLED]).
     */
    updateTransferJob: {
      name: "UpdateTransferJob",
      requestType: UpdateTransferJobRequest,
      requestStream: false,
      responseType: TransferJob,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              50,
              30,
              47,
              118,
              49,
              47,
              123,
              106,
              111,
              98,
              95,
              110,
              97,
              109,
              101,
              61,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              74,
              111,
              98,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a transfer job. */
    getTransferJob: {
      name: "GetTransferJob",
      requestType: GetTransferJobRequest,
      requestStream: false,
      responseType: TransferJob,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              106,
              111,
              98,
              95,
              110,
              97,
              109,
              101,
              61,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              74,
              111,
              98,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists transfer jobs. */
    listTransferJobs: {
      name: "ListTransferJobs",
      requestType: ListTransferJobsRequest,
      requestStream: false,
      responseType: ListTransferJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([18, 18, 16, 47, 118, 49, 47, 116, 114, 97, 110, 115, 102, 101, 114, 74, 111, 98, 115]),
          ],
        },
      },
    },
    /** Pauses a transfer operation. */
    pauseTransferOperation: {
      name: "PauseTransferOperation",
      requestType: PauseTransferOperationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              42,
              125,
              58,
              112,
              97,
              117,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /** Resumes a transfer operation that is paused. */
    resumeTransferOperation: {
      name: "ResumeTransferOperation",
      requestType: ResumeTransferOperationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a new operation for the specified transfer job.
     * A `TransferJob` has a maximum of one active `TransferOperation`. If this
     * method is called while a `TransferOperation` is active, an error is
     * returned.
     */
    runTransferJob: {
      name: "RunTransferJob",
      requestType: RunTransferJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              84,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              118,
              49,
              47,
              123,
              106,
              111,
              98,
              95,
              110,
              97,
              109,
              101,
              61,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              74,
              111,
              98,
              115,
              47,
              42,
              42,
              125,
              58,
              114,
              117,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a transfer job. Deleting a transfer job sets its status to
     * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED].
     */
    deleteTransferJob: {
      name: "DeleteTransferJob",
      requestType: DeleteTransferJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              42,
              30,
              47,
              118,
              49,
              47,
              123,
              106,
              111,
              98,
              95,
              110,
              97,
              109,
              101,
              61,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              74,
              111,
              98,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an agent pool resource. */
    createAgentPool: {
      name: "CreateAgentPool",
      requestType: CreateAgentPoolRequest,
      requestStream: false,
      responseType: AgentPool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              112,
              111,
              111,
              108,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              112,
              111,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              52,
              58,
              10,
              97,
              103,
              101,
              110,
              116,
              95,
              112,
              111,
              111,
              108,
              34,
              38,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing agent pool resource. */
    updateAgentPool: {
      name: "UpdateAgentPool",
      requestType: UpdateAgentPoolRequest,
      requestStream: false,
      responseType: AgentPool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              97,
              103,
              101,
              110,
              116,
              95,
              112,
              111,
              111,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              10,
              97,
              103,
              101,
              110,
              116,
              95,
              112,
              111,
              111,
              108,
              50,
              45,
              47,
              118,
              49,
              47,
              123,
              97,
              103,
              101,
              110,
              116,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an agent pool. */
    getAgentPool: {
      name: "GetAgentPool",
      requestType: GetAgentPoolRequest,
      requestStream: false,
      responseType: AgentPool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists agent pools. */
    listAgentPools: {
      name: "ListAgentPools",
      requestType: ListAgentPoolsRequest,
      requestStream: false,
      responseType: ListAgentPoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 114, 111, 106, 101, 99, 116, 95, 105, 100])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an agent pool. */
    deleteAgentPool: {
      name: "DeleteAgentPool",
      requestType: DeleteAgentPoolRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              36,
              42,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface StorageTransferServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the Google service account that is used by Storage Transfer
   * Service to access buckets in the project where transfers
   * run or in other projects. Each Google service account is associated
   * with one Google Cloud project. Users
   * should add this service account to the Google Cloud Storage bucket
   * ACLs to grant access to Storage Transfer Service. This service
   * account is created and owned by Storage Transfer Service and can
   * only be used by Storage Transfer Service.
   */
  getGoogleServiceAccount(
    request: GetGoogleServiceAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleServiceAccount>>;
  /** Creates a transfer job that runs periodically. */
  createTransferJob(
    request: CreateTransferJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferJob>>;
  /**
   * Updates a transfer job. Updating a job's transfer spec does not affect
   * transfer operations that are running already.
   *
   * **Note:** The job's [status][google.storagetransfer.v1.TransferJob.status]
   * field can be modified using this RPC (for example, to set a job's status to
   * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED],
   * [DISABLED][google.storagetransfer.v1.TransferJob.Status.DISABLED], or
   * [ENABLED][google.storagetransfer.v1.TransferJob.Status.ENABLED]).
   */
  updateTransferJob(
    request: UpdateTransferJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferJob>>;
  /** Gets a transfer job. */
  getTransferJob(
    request: GetTransferJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferJob>>;
  /** Lists transfer jobs. */
  listTransferJobs(
    request: ListTransferJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTransferJobsResponse>>;
  /** Pauses a transfer operation. */
  pauseTransferOperation(
    request: PauseTransferOperationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Resumes a transfer operation that is paused. */
  resumeTransferOperation(
    request: ResumeTransferOperationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Starts a new operation for the specified transfer job.
   * A `TransferJob` has a maximum of one active `TransferOperation`. If this
   * method is called while a `TransferOperation` is active, an error is
   * returned.
   */
  runTransferJob(
    request: RunTransferJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a transfer job. Deleting a transfer job sets its status to
   * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED].
   */
  deleteTransferJob(
    request: DeleteTransferJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Creates an agent pool resource. */
  createAgentPool(
    request: CreateAgentPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AgentPool>>;
  /** Updates an existing agent pool resource. */
  updateAgentPool(
    request: UpdateAgentPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AgentPool>>;
  /** Gets an agent pool. */
  getAgentPool(request: GetAgentPoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AgentPool>>;
  /** Lists agent pools. */
  listAgentPools(
    request: ListAgentPoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAgentPoolsResponse>>;
  /** Deletes an agent pool. */
  deleteAgentPool(request: DeleteAgentPoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface StorageTransferServiceClient<CallOptionsExt = {}> {
  /**
   * Returns the Google service account that is used by Storage Transfer
   * Service to access buckets in the project where transfers
   * run or in other projects. Each Google service account is associated
   * with one Google Cloud project. Users
   * should add this service account to the Google Cloud Storage bucket
   * ACLs to grant access to Storage Transfer Service. This service
   * account is created and owned by Storage Transfer Service and can
   * only be used by Storage Transfer Service.
   */
  getGoogleServiceAccount(
    request: DeepPartial<GetGoogleServiceAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleServiceAccount>;
  /** Creates a transfer job that runs periodically. */
  createTransferJob(
    request: DeepPartial<CreateTransferJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferJob>;
  /**
   * Updates a transfer job. Updating a job's transfer spec does not affect
   * transfer operations that are running already.
   *
   * **Note:** The job's [status][google.storagetransfer.v1.TransferJob.status]
   * field can be modified using this RPC (for example, to set a job's status to
   * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED],
   * [DISABLED][google.storagetransfer.v1.TransferJob.Status.DISABLED], or
   * [ENABLED][google.storagetransfer.v1.TransferJob.Status.ENABLED]).
   */
  updateTransferJob(
    request: DeepPartial<UpdateTransferJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferJob>;
  /** Gets a transfer job. */
  getTransferJob(
    request: DeepPartial<GetTransferJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferJob>;
  /** Lists transfer jobs. */
  listTransferJobs(
    request: DeepPartial<ListTransferJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTransferJobsResponse>;
  /** Pauses a transfer operation. */
  pauseTransferOperation(
    request: DeepPartial<PauseTransferOperationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Resumes a transfer operation that is paused. */
  resumeTransferOperation(
    request: DeepPartial<ResumeTransferOperationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Starts a new operation for the specified transfer job.
   * A `TransferJob` has a maximum of one active `TransferOperation`. If this
   * method is called while a `TransferOperation` is active, an error is
   * returned.
   */
  runTransferJob(
    request: DeepPartial<RunTransferJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a transfer job. Deleting a transfer job sets its status to
   * [DELETED][google.storagetransfer.v1.TransferJob.Status.DELETED].
   */
  deleteTransferJob(
    request: DeepPartial<DeleteTransferJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Creates an agent pool resource. */
  createAgentPool(
    request: DeepPartial<CreateAgentPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AgentPool>;
  /** Updates an existing agent pool resource. */
  updateAgentPool(
    request: DeepPartial<UpdateAgentPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AgentPool>;
  /** Gets an agent pool. */
  getAgentPool(request: DeepPartial<GetAgentPoolRequest>, options?: CallOptions & CallOptionsExt): Promise<AgentPool>;
  /** Lists agent pools. */
  listAgentPools(
    request: DeepPartial<ListAgentPoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAgentPoolsResponse>;
  /** Deletes an agent pool. */
  deleteAgentPool(request: DeepPartial<DeleteAgentPoolRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
