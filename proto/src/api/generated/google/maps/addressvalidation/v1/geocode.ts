// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/addressvalidation/v1/geocode.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Viewport } from "../../../geo/type/viewport.js";
import { LatLng } from "../../../type/latlng.js";

export const protobufPackage = "google.maps.addressvalidation.v1";

/** Contains information about the place the input was geocoded to. */
export interface Geocode {
  /**
   * The geocoded location of the input.
   *
   * Using place IDs is preferred over using addresses,
   * latitude/longitude coordinates, or plus codes. Using coordinates when
   * routing or calculating driving directions will always result in the point
   * being snapped to the road nearest to those coordinates. This may not be a
   * road that will quickly or safely lead to the destination and may not be
   * near an access point to the property. Additionally, when a location is
   * reverse geocoded, there is no guarantee that the returned address will
   * match the original.
   */
  location:
    | LatLng
    | undefined;
  /** The plus code corresponding to the `location`. */
  plusCode:
    | PlusCode
    | undefined;
  /** The bounds of the geocoded place. */
  bounds:
    | Viewport
    | undefined;
  /**
   * The size of the geocoded place, in meters. This is another measure of the
   * coarseness of the geocoded location, but in physical size rather than in
   * semantic meaning.
   */
  featureSizeMeters: number;
  /**
   * The PlaceID of the place this input geocodes to.
   *
   * For more information about Place IDs see
   * [here](https://developers.google.com/maps/documentation/places/web-service/place-id).
   */
  placeId: string;
  /**
   * The type(s) of place that the input geocoded to. For example,
   * `['locality', 'political']`. The full list of types can be found
   * [here](https://developers.google.com/maps/documentation/geocoding/requests-geocoding#Types).
   */
  placeTypes: string[];
}

/**
 * Plus code (http://plus.codes) is a location reference with two formats:
 * global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle,
 * and compound code, replacing the prefix with a reference location.
 */
export interface PlusCode {
  /**
   * Place's global (full) code, such as "9FWM33GV+HQ", representing an
   * 1/8000 by 1/8000 degree area (~14 by 14 meters).
   */
  globalCode: string;
  /**
   * Place's compound code, such as "33GV+HQ, Ramberg, Norway", containing
   * the suffix of the global code and replacing the prefix with a formatted
   * name of a reference entity.
   */
  compoundCode: string;
}

function createBaseGeocode(): Geocode {
  return {
    location: undefined,
    plusCode: undefined,
    bounds: undefined,
    featureSizeMeters: 0,
    placeId: "",
    placeTypes: [],
  };
}

export const Geocode: MessageFns<Geocode> = {
  encode(message: Geocode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== undefined) {
      LatLng.encode(message.location, writer.uint32(10).fork()).join();
    }
    if (message.plusCode !== undefined) {
      PlusCode.encode(message.plusCode, writer.uint32(18).fork()).join();
    }
    if (message.bounds !== undefined) {
      Viewport.encode(message.bounds, writer.uint32(34).fork()).join();
    }
    if (message.featureSizeMeters !== 0) {
      writer.uint32(45).float(message.featureSizeMeters);
    }
    if (message.placeId !== "") {
      writer.uint32(50).string(message.placeId);
    }
    for (const v of message.placeTypes) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Geocode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeocode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = LatLng.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.plusCode = PlusCode.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bounds = Viewport.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.featureSizeMeters = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.placeId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.placeTypes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Geocode {
    return {
      location: isSet(object.location) ? LatLng.fromJSON(object.location) : undefined,
      plusCode: isSet(object.plusCode) ? PlusCode.fromJSON(object.plusCode) : undefined,
      bounds: isSet(object.bounds) ? Viewport.fromJSON(object.bounds) : undefined,
      featureSizeMeters: isSet(object.featureSizeMeters) ? globalThis.Number(object.featureSizeMeters) : 0,
      placeId: isSet(object.placeId) ? globalThis.String(object.placeId) : "",
      placeTypes: globalThis.Array.isArray(object?.placeTypes)
        ? object.placeTypes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Geocode): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = LatLng.toJSON(message.location);
    }
    if (message.plusCode !== undefined) {
      obj.plusCode = PlusCode.toJSON(message.plusCode);
    }
    if (message.bounds !== undefined) {
      obj.bounds = Viewport.toJSON(message.bounds);
    }
    if (message.featureSizeMeters !== 0) {
      obj.featureSizeMeters = message.featureSizeMeters;
    }
    if (message.placeId !== "") {
      obj.placeId = message.placeId;
    }
    if (message.placeTypes?.length) {
      obj.placeTypes = message.placeTypes;
    }
    return obj;
  },

  create(base?: DeepPartial<Geocode>): Geocode {
    return Geocode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Geocode>): Geocode {
    const message = createBaseGeocode();
    message.location = (object.location !== undefined && object.location !== null)
      ? LatLng.fromPartial(object.location)
      : undefined;
    message.plusCode = (object.plusCode !== undefined && object.plusCode !== null)
      ? PlusCode.fromPartial(object.plusCode)
      : undefined;
    message.bounds = (object.bounds !== undefined && object.bounds !== null)
      ? Viewport.fromPartial(object.bounds)
      : undefined;
    message.featureSizeMeters = object.featureSizeMeters ?? 0;
    message.placeId = object.placeId ?? "";
    message.placeTypes = object.placeTypes?.map((e) => e) || [];
    return message;
  },
};

function createBasePlusCode(): PlusCode {
  return { globalCode: "", compoundCode: "" };
}

export const PlusCode: MessageFns<PlusCode> = {
  encode(message: PlusCode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalCode !== "") {
      writer.uint32(10).string(message.globalCode);
    }
    if (message.compoundCode !== "") {
      writer.uint32(18).string(message.compoundCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlusCode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlusCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.globalCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.compoundCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlusCode {
    return {
      globalCode: isSet(object.globalCode) ? globalThis.String(object.globalCode) : "",
      compoundCode: isSet(object.compoundCode) ? globalThis.String(object.compoundCode) : "",
    };
  },

  toJSON(message: PlusCode): unknown {
    const obj: any = {};
    if (message.globalCode !== "") {
      obj.globalCode = message.globalCode;
    }
    if (message.compoundCode !== "") {
      obj.compoundCode = message.compoundCode;
    }
    return obj;
  },

  create(base?: DeepPartial<PlusCode>): PlusCode {
    return PlusCode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlusCode>): PlusCode {
    const message = createBasePlusCode();
    message.globalCode = object.globalCode ?? "";
    message.compoundCode = object.compoundCode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
