// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routing/v2/toll_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Money } from "../../../type/money.js";

export const protobufPackage = "google.maps.routing.v2";

/**
 * Encapsulates toll information on a [`Route`][google.maps.routing.v2.Route] or
 * on a [`RouteLeg`][google.maps.routing.v2.RouteLeg].
 */
export interface TollInfo {
  /**
   * The monetary amount of tolls for the corresponding
   * [`Route`][google.maps.routing.v2.Route] or
   * [`RouteLeg`][google.maps.routing.v2.RouteLeg]. This list contains a money
   * amount for each currency that is expected to be charged by the toll
   * stations. Typically this list will contain only one item for routes with
   * tolls in one currency. For international trips, this list may contain
   * multiple items to reflect tolls in different currencies.
   */
  estimatedPrice: Money[];
}

function createBaseTollInfo(): TollInfo {
  return { estimatedPrice: [] };
}

export const TollInfo: MessageFns<TollInfo> = {
  encode(message: TollInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.estimatedPrice) {
      Money.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TollInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTollInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.estimatedPrice.push(Money.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TollInfo {
    return {
      estimatedPrice: globalThis.Array.isArray(object?.estimatedPrice)
        ? object.estimatedPrice.map((e: any) => Money.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TollInfo): unknown {
    const obj: any = {};
    if (message.estimatedPrice?.length) {
      obj.estimatedPrice = message.estimatedPrice.map((e) => Money.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TollInfo>): TollInfo {
    return TollInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TollInfo>): TollInfo {
    const message = createBaseTollInfo();
    message.estimatedPrice = object.estimatedPrice?.map((e) => Money.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
