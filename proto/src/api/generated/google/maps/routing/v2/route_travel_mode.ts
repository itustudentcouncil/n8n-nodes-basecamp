// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routing/v2/route_travel_mode.proto

/* eslint-disable */

export const protobufPackage = "google.maps.routing.v2";

/**
 * A set of values used to specify the mode of travel.
 * NOTE: `WALK`, `BICYCLE`, and `TWO_WHEELER` routes are in beta and might
 * sometimes be missing clear sidewalks, pedestrian paths, or bicycling paths.
 * You must display this warning to the user for all walking, bicycling, and
 * two-wheel routes that you display in your app.
 */
export enum RouteTravelMode {
  /** TRAVEL_MODE_UNSPECIFIED - No travel mode specified. Defaults to `DRIVE`. */
  TRAVEL_MODE_UNSPECIFIED = 0,
  /** DRIVE - Travel by passenger car. */
  DRIVE = 1,
  /** BICYCLE - Travel by bicycle. */
  BICYCLE = 2,
  /** WALK - Travel by walking. */
  WALK = 3,
  /**
   * TWO_WHEELER - Two-wheeled, motorized vehicle. For example, motorcycle. Note that this
   * differs from the `BICYCLE` travel mode which covers human-powered mode.
   */
  TWO_WHEELER = 4,
  /** TRANSIT - Travel by public transit routes, where available. */
  TRANSIT = 7,
  UNRECOGNIZED = -1,
}

export function routeTravelModeFromJSON(object: any): RouteTravelMode {
  switch (object) {
    case 0:
    case "TRAVEL_MODE_UNSPECIFIED":
      return RouteTravelMode.TRAVEL_MODE_UNSPECIFIED;
    case 1:
    case "DRIVE":
      return RouteTravelMode.DRIVE;
    case 2:
    case "BICYCLE":
      return RouteTravelMode.BICYCLE;
    case 3:
    case "WALK":
      return RouteTravelMode.WALK;
    case 4:
    case "TWO_WHEELER":
      return RouteTravelMode.TWO_WHEELER;
    case 7:
    case "TRANSIT":
      return RouteTravelMode.TRANSIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RouteTravelMode.UNRECOGNIZED;
  }
}

export function routeTravelModeToJSON(object: RouteTravelMode): string {
  switch (object) {
    case RouteTravelMode.TRAVEL_MODE_UNSPECIFIED:
      return "TRAVEL_MODE_UNSPECIFIED";
    case RouteTravelMode.DRIVE:
      return "DRIVE";
    case RouteTravelMode.BICYCLE:
      return "BICYCLE";
    case RouteTravelMode.WALK:
      return "WALK";
    case RouteTravelMode.TWO_WHEELER:
      return "TWO_WHEELER";
    case RouteTravelMode.TRANSIT:
      return "TRANSIT";
    case RouteTravelMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
