// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/fleetengine/v1/header.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "maps.fleetengine.v1";

/** A RequestHeader contains fields common to all Fleet Engine RPC requests. */
export interface RequestHeader {
  /**
   * The BCP-47 language code, such as en-US or sr-Latn. For more information,
   * see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If none
   * is specified, the response may be in any language, with a preference for
   * English if such a name exists. Field value example: `en-US`.
   */
  languageCode: string;
  /**
   * Required. CLDR region code of the region where the request originates.
   * Field value example: `US`.
   */
  regionCode: string;
  /**
   * Version of the calling SDK, if applicable.
   * The version format is "major.minor.patch", example: `1.1.2`.
   */
  sdkVersion: string;
  /**
   * Version of the operating system on which the calling SDK is running.
   * Field value examples: `4.4.1`, `12.1`.
   */
  osVersion: string;
  /**
   * Model of the device on which the calling SDK is running.
   * Field value examples: `iPhone12,1`, `SM-G920F`.
   */
  deviceModel: string;
  /** The type of SDK sending the request. */
  sdkType: RequestHeader_SdkType;
  /**
   * Version of the MapSDK which the calling SDK depends on, if applicable.
   * The version format is "major.minor.patch", example: `5.2.1`.
   */
  mapsSdkVersion: string;
  /**
   * Version of the NavSDK which the calling SDK depends on, if applicable.
   * The version format is "major.minor.patch", example: `2.1.0`.
   */
  navSdkVersion: string;
  /** Platform of the calling SDK. */
  platform: RequestHeader_Platform;
  /**
   * Manufacturer of the Android device from the calling SDK, only applicable
   * for the Android SDKs.
   * Field value example: `Samsung`.
   */
  manufacturer: string;
  /**
   * Android API level of the calling SDK, only applicable for the Android SDKs.
   * Field value example: `23`.
   */
  androidApiLevel: number;
  /**
   * Optional ID that can be provided for logging purposes in order to identify
   * the request.
   */
  traceId: string;
}

/** Possible types of SDK. */
export enum RequestHeader_SdkType {
  /** SDK_TYPE_UNSPECIFIED - The default value. This value is used if the `sdk_type` is omitted. */
  SDK_TYPE_UNSPECIFIED = 0,
  /** CONSUMER - The calling SDK is Consumer. */
  CONSUMER = 1,
  /** DRIVER - The calling SDK is Driver. */
  DRIVER = 2,
  /** JAVASCRIPT - The calling SDK is JavaScript. */
  JAVASCRIPT = 3,
  UNRECOGNIZED = -1,
}

export function requestHeader_SdkTypeFromJSON(object: any): RequestHeader_SdkType {
  switch (object) {
    case 0:
    case "SDK_TYPE_UNSPECIFIED":
      return RequestHeader_SdkType.SDK_TYPE_UNSPECIFIED;
    case 1:
    case "CONSUMER":
      return RequestHeader_SdkType.CONSUMER;
    case 2:
    case "DRIVER":
      return RequestHeader_SdkType.DRIVER;
    case 3:
    case "JAVASCRIPT":
      return RequestHeader_SdkType.JAVASCRIPT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RequestHeader_SdkType.UNRECOGNIZED;
  }
}

export function requestHeader_SdkTypeToJSON(object: RequestHeader_SdkType): string {
  switch (object) {
    case RequestHeader_SdkType.SDK_TYPE_UNSPECIFIED:
      return "SDK_TYPE_UNSPECIFIED";
    case RequestHeader_SdkType.CONSUMER:
      return "CONSUMER";
    case RequestHeader_SdkType.DRIVER:
      return "DRIVER";
    case RequestHeader_SdkType.JAVASCRIPT:
      return "JAVASCRIPT";
    case RequestHeader_SdkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The platform of the calling SDK. */
export enum RequestHeader_Platform {
  /** PLATFORM_UNSPECIFIED - The default value. This value is used if the platform is omitted. */
  PLATFORM_UNSPECIFIED = 0,
  /** ANDROID - The request is coming from Android. */
  ANDROID = 1,
  /** IOS - The request is coming from iOS. */
  IOS = 2,
  /** WEB - The request is coming from the web. */
  WEB = 3,
  UNRECOGNIZED = -1,
}

export function requestHeader_PlatformFromJSON(object: any): RequestHeader_Platform {
  switch (object) {
    case 0:
    case "PLATFORM_UNSPECIFIED":
      return RequestHeader_Platform.PLATFORM_UNSPECIFIED;
    case 1:
    case "ANDROID":
      return RequestHeader_Platform.ANDROID;
    case 2:
    case "IOS":
      return RequestHeader_Platform.IOS;
    case 3:
    case "WEB":
      return RequestHeader_Platform.WEB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RequestHeader_Platform.UNRECOGNIZED;
  }
}

export function requestHeader_PlatformToJSON(object: RequestHeader_Platform): string {
  switch (object) {
    case RequestHeader_Platform.PLATFORM_UNSPECIFIED:
      return "PLATFORM_UNSPECIFIED";
    case RequestHeader_Platform.ANDROID:
      return "ANDROID";
    case RequestHeader_Platform.IOS:
      return "IOS";
    case RequestHeader_Platform.WEB:
      return "WEB";
    case RequestHeader_Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseRequestHeader(): RequestHeader {
  return {
    languageCode: "",
    regionCode: "",
    sdkVersion: "",
    osVersion: "",
    deviceModel: "",
    sdkType: 0,
    mapsSdkVersion: "",
    navSdkVersion: "",
    platform: 0,
    manufacturer: "",
    androidApiLevel: 0,
    traceId: "",
  };
}

export const RequestHeader: MessageFns<RequestHeader> = {
  encode(message: RequestHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languageCode !== "") {
      writer.uint32(10).string(message.languageCode);
    }
    if (message.regionCode !== "") {
      writer.uint32(18).string(message.regionCode);
    }
    if (message.sdkVersion !== "") {
      writer.uint32(26).string(message.sdkVersion);
    }
    if (message.osVersion !== "") {
      writer.uint32(34).string(message.osVersion);
    }
    if (message.deviceModel !== "") {
      writer.uint32(42).string(message.deviceModel);
    }
    if (message.sdkType !== 0) {
      writer.uint32(48).int32(message.sdkType);
    }
    if (message.mapsSdkVersion !== "") {
      writer.uint32(58).string(message.mapsSdkVersion);
    }
    if (message.navSdkVersion !== "") {
      writer.uint32(66).string(message.navSdkVersion);
    }
    if (message.platform !== 0) {
      writer.uint32(72).int32(message.platform);
    }
    if (message.manufacturer !== "") {
      writer.uint32(82).string(message.manufacturer);
    }
    if (message.androidApiLevel !== 0) {
      writer.uint32(88).int32(message.androidApiLevel);
    }
    if (message.traceId !== "") {
      writer.uint32(98).string(message.traceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sdkVersion = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.osVersion = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deviceModel = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.sdkType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.mapsSdkVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.navSdkVersion = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.manufacturer = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.androidApiLevel = reader.int32();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.traceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestHeader {
    return {
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      sdkVersion: isSet(object.sdkVersion) ? globalThis.String(object.sdkVersion) : "",
      osVersion: isSet(object.osVersion) ? globalThis.String(object.osVersion) : "",
      deviceModel: isSet(object.deviceModel) ? globalThis.String(object.deviceModel) : "",
      sdkType: isSet(object.sdkType) ? requestHeader_SdkTypeFromJSON(object.sdkType) : 0,
      mapsSdkVersion: isSet(object.mapsSdkVersion) ? globalThis.String(object.mapsSdkVersion) : "",
      navSdkVersion: isSet(object.navSdkVersion) ? globalThis.String(object.navSdkVersion) : "",
      platform: isSet(object.platform) ? requestHeader_PlatformFromJSON(object.platform) : 0,
      manufacturer: isSet(object.manufacturer) ? globalThis.String(object.manufacturer) : "",
      androidApiLevel: isSet(object.androidApiLevel) ? globalThis.Number(object.androidApiLevel) : 0,
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : "",
    };
  },

  toJSON(message: RequestHeader): unknown {
    const obj: any = {};
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.sdkVersion !== "") {
      obj.sdkVersion = message.sdkVersion;
    }
    if (message.osVersion !== "") {
      obj.osVersion = message.osVersion;
    }
    if (message.deviceModel !== "") {
      obj.deviceModel = message.deviceModel;
    }
    if (message.sdkType !== 0) {
      obj.sdkType = requestHeader_SdkTypeToJSON(message.sdkType);
    }
    if (message.mapsSdkVersion !== "") {
      obj.mapsSdkVersion = message.mapsSdkVersion;
    }
    if (message.navSdkVersion !== "") {
      obj.navSdkVersion = message.navSdkVersion;
    }
    if (message.platform !== 0) {
      obj.platform = requestHeader_PlatformToJSON(message.platform);
    }
    if (message.manufacturer !== "") {
      obj.manufacturer = message.manufacturer;
    }
    if (message.androidApiLevel !== 0) {
      obj.androidApiLevel = Math.round(message.androidApiLevel);
    }
    if (message.traceId !== "") {
      obj.traceId = message.traceId;
    }
    return obj;
  },

  create(base?: DeepPartial<RequestHeader>): RequestHeader {
    return RequestHeader.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestHeader>): RequestHeader {
    const message = createBaseRequestHeader();
    message.languageCode = object.languageCode ?? "";
    message.regionCode = object.regionCode ?? "";
    message.sdkVersion = object.sdkVersion ?? "";
    message.osVersion = object.osVersion ?? "";
    message.deviceModel = object.deviceModel ?? "";
    message.sdkType = object.sdkType ?? 0;
    message.mapsSdkVersion = object.mapsSdkVersion ?? "";
    message.navSdkVersion = object.navSdkVersion ?? "";
    message.platform = object.platform ?? 0;
    message.manufacturer = object.manufacturer ?? "";
    message.androidApiLevel = object.androidApiLevel ?? 0;
    message.traceId = object.traceId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
