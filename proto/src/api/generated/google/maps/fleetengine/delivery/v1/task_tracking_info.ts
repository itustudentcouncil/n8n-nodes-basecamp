// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/fleetengine/delivery/v1/task_tracking_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Int32Value } from "../../../../protobuf/wrappers.js";
import { LatLng } from "../../../../type/latlng.js";
import { DeliveryVehicleLocation, TaskAttribute, TimeWindow } from "./common.js";
import { LocationInfo } from "./delivery_vehicles.js";
import {
  Task_State,
  task_StateFromJSON,
  task_StateToJSON,
  Task_TaskOutcome,
  task_TaskOutcomeFromJSON,
  task_TaskOutcomeToJSON,
} from "./tasks.js";

export const protobufPackage = "maps.fleetengine.delivery.v1";

/**
 * The `TaskTrackingInfo` message. The message contains task tracking
 * information which will be used for display. If a tracking ID is associated
 * with multiple Tasks, Fleet Engine uses a heuristic to decide which Task's
 * TaskTrackingInfo to select.
 */
export interface TaskTrackingInfo {
  /**
   * Must be in the format `providers/{provider}/taskTrackingInfo/{tracking}`,
   * where `tracking` represents the tracking ID.
   */
  name: string;
  /**
   * Immutable. The tracking ID of a Task.
   * * Must be a valid Unicode string.
   * * Limited to a maximum length of 64 characters.
   * * Normalized according to [Unicode Normalization Form C]
   * (http://www.unicode.org/reports/tr15/).
   * * May not contain any of the following ASCII characters: '/', ':', '?',
   * ',', or '#'.
   */
  trackingId: string;
  /** The vehicle's last location. */
  vehicleLocation:
    | DeliveryVehicleLocation
    | undefined;
  /**
   * A list of points which when connected forms a polyline of the vehicle's
   * expected route to the location of this task.
   */
  routePolylinePoints: LatLng[];
  /**
   * Indicates the number of stops the vehicle remaining until the task stop is
   * reached, including the task stop. For example, if the vehicle's next stop
   * is the task stop, the value will be 1.
   */
  remainingStopCount:
    | number
    | undefined;
  /** The total remaining distance in meters to the `VehicleStop` of interest. */
  remainingDrivingDistanceMeters:
    | number
    | undefined;
  /**
   * The timestamp that indicates the estimated arrival time to the stop
   * location.
   */
  estimatedArrivalTime:
    | Date
    | undefined;
  /** The timestamp that indicates the estimated completion time of a Task. */
  estimatedTaskCompletionTime:
    | Date
    | undefined;
  /** The current execution state of the Task. */
  state: Task_State;
  /** The outcome of attempting to execute a Task. */
  taskOutcome: Task_TaskOutcome;
  /**
   * The timestamp that indicates when the Task's outcome was set by the
   * provider.
   */
  taskOutcomeTime:
    | Date
    | undefined;
  /** Immutable. The location where the Task will be completed. */
  plannedLocation:
    | LocationInfo
    | undefined;
  /** The time window during which the task should be completed. */
  targetTimeWindow:
    | TimeWindow
    | undefined;
  /** The custom attributes set on the task. */
  attributes: TaskAttribute[];
}

function createBaseTaskTrackingInfo(): TaskTrackingInfo {
  return {
    name: "",
    trackingId: "",
    vehicleLocation: undefined,
    routePolylinePoints: [],
    remainingStopCount: undefined,
    remainingDrivingDistanceMeters: undefined,
    estimatedArrivalTime: undefined,
    estimatedTaskCompletionTime: undefined,
    state: 0,
    taskOutcome: 0,
    taskOutcomeTime: undefined,
    plannedLocation: undefined,
    targetTimeWindow: undefined,
    attributes: [],
  };
}

export const TaskTrackingInfo: MessageFns<TaskTrackingInfo> = {
  encode(message: TaskTrackingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.trackingId !== "") {
      writer.uint32(18).string(message.trackingId);
    }
    if (message.vehicleLocation !== undefined) {
      DeliveryVehicleLocation.encode(message.vehicleLocation, writer.uint32(26).fork()).join();
    }
    for (const v of message.routePolylinePoints) {
      LatLng.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.remainingStopCount !== undefined) {
      Int32Value.encode({ value: message.remainingStopCount! }, writer.uint32(42).fork()).join();
    }
    if (message.remainingDrivingDistanceMeters !== undefined) {
      Int32Value.encode({ value: message.remainingDrivingDistanceMeters! }, writer.uint32(50).fork()).join();
    }
    if (message.estimatedArrivalTime !== undefined) {
      Timestamp.encode(toTimestamp(message.estimatedArrivalTime), writer.uint32(58).fork()).join();
    }
    if (message.estimatedTaskCompletionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.estimatedTaskCompletionTime), writer.uint32(66).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    if (message.taskOutcome !== 0) {
      writer.uint32(72).int32(message.taskOutcome);
    }
    if (message.taskOutcomeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.taskOutcomeTime), writer.uint32(98).fork()).join();
    }
    if (message.plannedLocation !== undefined) {
      LocationInfo.encode(message.plannedLocation, writer.uint32(82).fork()).join();
    }
    if (message.targetTimeWindow !== undefined) {
      TimeWindow.encode(message.targetTimeWindow, writer.uint32(106).fork()).join();
    }
    for (const v of message.attributes) {
      TaskAttribute.encode(v!, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskTrackingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskTrackingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vehicleLocation = DeliveryVehicleLocation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.routePolylinePoints.push(LatLng.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.remainingStopCount = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.remainingDrivingDistanceMeters = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.estimatedArrivalTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.estimatedTaskCompletionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.taskOutcome = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.taskOutcomeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.plannedLocation = LocationInfo.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.targetTimeWindow = TimeWindow.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.attributes.push(TaskAttribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskTrackingInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      trackingId: isSet(object.trackingId) ? globalThis.String(object.trackingId) : "",
      vehicleLocation: isSet(object.vehicleLocation)
        ? DeliveryVehicleLocation.fromJSON(object.vehicleLocation)
        : undefined,
      routePolylinePoints: globalThis.Array.isArray(object?.routePolylinePoints)
        ? object.routePolylinePoints.map((e: any) => LatLng.fromJSON(e))
        : [],
      remainingStopCount: isSet(object.remainingStopCount) ? Number(object.remainingStopCount) : undefined,
      remainingDrivingDistanceMeters: isSet(object.remainingDrivingDistanceMeters)
        ? Number(object.remainingDrivingDistanceMeters)
        : undefined,
      estimatedArrivalTime: isSet(object.estimatedArrivalTime)
        ? fromJsonTimestamp(object.estimatedArrivalTime)
        : undefined,
      estimatedTaskCompletionTime: isSet(object.estimatedTaskCompletionTime)
        ? fromJsonTimestamp(object.estimatedTaskCompletionTime)
        : undefined,
      state: isSet(object.state) ? task_StateFromJSON(object.state) : 0,
      taskOutcome: isSet(object.taskOutcome) ? task_TaskOutcomeFromJSON(object.taskOutcome) : 0,
      taskOutcomeTime: isSet(object.taskOutcomeTime) ? fromJsonTimestamp(object.taskOutcomeTime) : undefined,
      plannedLocation: isSet(object.plannedLocation) ? LocationInfo.fromJSON(object.plannedLocation) : undefined,
      targetTimeWindow: isSet(object.targetTimeWindow) ? TimeWindow.fromJSON(object.targetTimeWindow) : undefined,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => TaskAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TaskTrackingInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.trackingId !== "") {
      obj.trackingId = message.trackingId;
    }
    if (message.vehicleLocation !== undefined) {
      obj.vehicleLocation = DeliveryVehicleLocation.toJSON(message.vehicleLocation);
    }
    if (message.routePolylinePoints?.length) {
      obj.routePolylinePoints = message.routePolylinePoints.map((e) => LatLng.toJSON(e));
    }
    if (message.remainingStopCount !== undefined) {
      obj.remainingStopCount = message.remainingStopCount;
    }
    if (message.remainingDrivingDistanceMeters !== undefined) {
      obj.remainingDrivingDistanceMeters = message.remainingDrivingDistanceMeters;
    }
    if (message.estimatedArrivalTime !== undefined) {
      obj.estimatedArrivalTime = message.estimatedArrivalTime.toISOString();
    }
    if (message.estimatedTaskCompletionTime !== undefined) {
      obj.estimatedTaskCompletionTime = message.estimatedTaskCompletionTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = task_StateToJSON(message.state);
    }
    if (message.taskOutcome !== 0) {
      obj.taskOutcome = task_TaskOutcomeToJSON(message.taskOutcome);
    }
    if (message.taskOutcomeTime !== undefined) {
      obj.taskOutcomeTime = message.taskOutcomeTime.toISOString();
    }
    if (message.plannedLocation !== undefined) {
      obj.plannedLocation = LocationInfo.toJSON(message.plannedLocation);
    }
    if (message.targetTimeWindow !== undefined) {
      obj.targetTimeWindow = TimeWindow.toJSON(message.targetTimeWindow);
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => TaskAttribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TaskTrackingInfo>): TaskTrackingInfo {
    return TaskTrackingInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskTrackingInfo>): TaskTrackingInfo {
    const message = createBaseTaskTrackingInfo();
    message.name = object.name ?? "";
    message.trackingId = object.trackingId ?? "";
    message.vehicleLocation = (object.vehicleLocation !== undefined && object.vehicleLocation !== null)
      ? DeliveryVehicleLocation.fromPartial(object.vehicleLocation)
      : undefined;
    message.routePolylinePoints = object.routePolylinePoints?.map((e) => LatLng.fromPartial(e)) || [];
    message.remainingStopCount = object.remainingStopCount ?? undefined;
    message.remainingDrivingDistanceMeters = object.remainingDrivingDistanceMeters ?? undefined;
    message.estimatedArrivalTime = object.estimatedArrivalTime ?? undefined;
    message.estimatedTaskCompletionTime = object.estimatedTaskCompletionTime ?? undefined;
    message.state = object.state ?? 0;
    message.taskOutcome = object.taskOutcome ?? 0;
    message.taskOutcomeTime = object.taskOutcomeTime ?? undefined;
    message.plannedLocation = (object.plannedLocation !== undefined && object.plannedLocation !== null)
      ? LocationInfo.fromPartial(object.plannedLocation)
      : undefined;
    message.targetTimeWindow = (object.targetTimeWindow !== undefined && object.targetTimeWindow !== null)
      ? TimeWindow.fromPartial(object.targetTimeWindow)
      : undefined;
    message.attributes = object.attributes?.map((e) => TaskAttribute.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
