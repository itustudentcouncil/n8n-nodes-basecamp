// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/regionlookup/v1alpha/region_identifier.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.regionlookup.v1alpha";

/**
 * Region Identifier.
 *
 * Identifies a region to look up.
 *
 * One of place or unit_code must be specified. If none is specified,
 * an INVALID_ARGUMENT error is returned. region_code must also be specified
 * except when place_type is "country".
 *
 * place and unit_code specify a location to match a Place ID to. For
 * example if place is "California" and region_code "US" the API
 * returns the following matched_place_id results when the following
 * place_types are specified:
 *
 * place_type:                   matched_place_id results:
 * administrative_area_level_1   Place ID for The State of California
 * (All other supported types)   No Match
 *
 * If unit_code is "6" (FIPs code for California) and region_code is "US
 * the API returns the following matched_place_id results when the
 * following place_types are specified:
 *
 * place type:                   matched_place_id results:
 * administrative_area_level_1   Place ID for The State of California
 * (All other supported types)   No Match
 *
 * or if unit_code is "US" the API returns the following results when
 * the following place_types are specified:
 *
 * place type:                   matched_place_id results:
 * country                       Place ID for the United States
 * (All other supported types)   No Match
 *
 * If no match is found, matched_place_id is not set.
 *
 * Candidate Place IDs are returned when a lookup finds a region with a
 * different place_type then the one requested. For example if place is
 * "California" and place_type is "country" the Place ID for The State of
 * California is returned as a candidate in the candidate_place_ids field.
 *
 * Next available tag: 10
 */
export interface RegionIdentifier {
  /**
   * The name of the region to match to a Place ID.
   *
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   *
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   *
   * If place_type is "postal_code", a valid place can be "94109".
   *
   * If place_type is "country", a valid place can be "United States".
   * etc.
   *
   * region_code is required when place is specified except when
   * place_type is "country".
   */
  place?:
    | string
    | undefined;
  /**
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   *
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   *
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   *
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   *
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   *
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   */
  unitCode?:
    | string
    | undefined;
  /** Required. Place type to match. */
  placeType: RegionIdentifier_PlaceType;
  /**
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   */
  languageCode: string;
  /**
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is optional if place_type is "country".
   */
  regionCode: string;
}

/** Possible place types to match to. */
export enum RegionIdentifier_PlaceType {
  /** PLACE_TYPE_UNSPECIFIED - Default value. This value is unused. */
  PLACE_TYPE_UNSPECIFIED = 0,
  /** POSTAL_CODE - Postal code. */
  POSTAL_CODE = 1,
  /** ADMINISTRATIVE_AREA_LEVEL_1 - Administrative area level 1 (State in the US). */
  ADMINISTRATIVE_AREA_LEVEL_1 = 2,
  /** ADMINISTRATIVE_AREA_LEVEL_2 - Administrative area level 2 (County in the US). */
  ADMINISTRATIVE_AREA_LEVEL_2 = 3,
  /** LOCALITY - Locality (City). */
  LOCALITY = 4,
  /** NEIGHBORHOOD - Neighborhood. */
  NEIGHBORHOOD = 5,
  /** COUNTRY - Country. */
  COUNTRY = 6,
  /** SUBLOCALITY - Sublocality. */
  SUBLOCALITY = 7,
  /** ADMINISTRATIVE_AREA_LEVEL_3 - Administrative area level 3. */
  ADMINISTRATIVE_AREA_LEVEL_3 = 8,
  /** ADMINISTRATIVE_AREA_LEVEL_4 - Administrative area level 4. */
  ADMINISTRATIVE_AREA_LEVEL_4 = 9,
  /** SCHOOL_DISTRICT - School district. */
  SCHOOL_DISTRICT = 10,
  UNRECOGNIZED = -1,
}

export function regionIdentifier_PlaceTypeFromJSON(object: any): RegionIdentifier_PlaceType {
  switch (object) {
    case 0:
    case "PLACE_TYPE_UNSPECIFIED":
      return RegionIdentifier_PlaceType.PLACE_TYPE_UNSPECIFIED;
    case 1:
    case "POSTAL_CODE":
      return RegionIdentifier_PlaceType.POSTAL_CODE;
    case 2:
    case "ADMINISTRATIVE_AREA_LEVEL_1":
      return RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_1;
    case 3:
    case "ADMINISTRATIVE_AREA_LEVEL_2":
      return RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_2;
    case 4:
    case "LOCALITY":
      return RegionIdentifier_PlaceType.LOCALITY;
    case 5:
    case "NEIGHBORHOOD":
      return RegionIdentifier_PlaceType.NEIGHBORHOOD;
    case 6:
    case "COUNTRY":
      return RegionIdentifier_PlaceType.COUNTRY;
    case 7:
    case "SUBLOCALITY":
      return RegionIdentifier_PlaceType.SUBLOCALITY;
    case 8:
    case "ADMINISTRATIVE_AREA_LEVEL_3":
      return RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_3;
    case 9:
    case "ADMINISTRATIVE_AREA_LEVEL_4":
      return RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_4;
    case 10:
    case "SCHOOL_DISTRICT":
      return RegionIdentifier_PlaceType.SCHOOL_DISTRICT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RegionIdentifier_PlaceType.UNRECOGNIZED;
  }
}

export function regionIdentifier_PlaceTypeToJSON(object: RegionIdentifier_PlaceType): string {
  switch (object) {
    case RegionIdentifier_PlaceType.PLACE_TYPE_UNSPECIFIED:
      return "PLACE_TYPE_UNSPECIFIED";
    case RegionIdentifier_PlaceType.POSTAL_CODE:
      return "POSTAL_CODE";
    case RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_1:
      return "ADMINISTRATIVE_AREA_LEVEL_1";
    case RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_2:
      return "ADMINISTRATIVE_AREA_LEVEL_2";
    case RegionIdentifier_PlaceType.LOCALITY:
      return "LOCALITY";
    case RegionIdentifier_PlaceType.NEIGHBORHOOD:
      return "NEIGHBORHOOD";
    case RegionIdentifier_PlaceType.COUNTRY:
      return "COUNTRY";
    case RegionIdentifier_PlaceType.SUBLOCALITY:
      return "SUBLOCALITY";
    case RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_3:
      return "ADMINISTRATIVE_AREA_LEVEL_3";
    case RegionIdentifier_PlaceType.ADMINISTRATIVE_AREA_LEVEL_4:
      return "ADMINISTRATIVE_AREA_LEVEL_4";
    case RegionIdentifier_PlaceType.SCHOOL_DISTRICT:
      return "SCHOOL_DISTRICT";
    case RegionIdentifier_PlaceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseRegionIdentifier(): RegionIdentifier {
  return { place: undefined, unitCode: undefined, placeType: 0, languageCode: "", regionCode: "" };
}

export const RegionIdentifier: MessageFns<RegionIdentifier> = {
  encode(message: RegionIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.place !== undefined) {
      writer.uint32(34).string(message.place);
    }
    if (message.unitCode !== undefined) {
      writer.uint32(42).string(message.unitCode);
    }
    if (message.placeType !== 0) {
      writer.uint32(48).int32(message.placeType);
    }
    if (message.languageCode !== "") {
      writer.uint32(58).string(message.languageCode);
    }
    if (message.regionCode !== "") {
      writer.uint32(66).string(message.regionCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegionIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegionIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.place = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.unitCode = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.placeType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.regionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegionIdentifier {
    return {
      place: isSet(object.place) ? globalThis.String(object.place) : undefined,
      unitCode: isSet(object.unitCode) ? globalThis.String(object.unitCode) : undefined,
      placeType: isSet(object.placeType) ? regionIdentifier_PlaceTypeFromJSON(object.placeType) : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
    };
  },

  toJSON(message: RegionIdentifier): unknown {
    const obj: any = {};
    if (message.place !== undefined) {
      obj.place = message.place;
    }
    if (message.unitCode !== undefined) {
      obj.unitCode = message.unitCode;
    }
    if (message.placeType !== 0) {
      obj.placeType = regionIdentifier_PlaceTypeToJSON(message.placeType);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    return obj;
  },

  create(base?: DeepPartial<RegionIdentifier>): RegionIdentifier {
    return RegionIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegionIdentifier>): RegionIdentifier {
    const message = createBaseRegionIdentifier();
    message.place = object.place ?? undefined;
    message.unitCode = object.unitCode ?? undefined;
    message.placeType = object.placeType ?? 0;
    message.languageCode = object.languageCode ?? "";
    message.regionCode = object.regionCode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
