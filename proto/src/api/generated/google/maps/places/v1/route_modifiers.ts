// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/route_modifiers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.places.v1";

/**
 * Encapsulates a set of optional conditions to satisfy when calculating the
 * routes.
 */
export interface RouteModifiers {
  /**
   * Optional. When set to true, avoids toll roads where reasonable, giving
   * preference to routes not containing toll roads. Applies only to the `DRIVE`
   * and `TWO_WHEELER` [`TravelMode`][google.maps.places.v1.TravelMode].
   */
  avoidTolls: boolean;
  /**
   * Optional. When set to true, avoids highways where reasonable, giving
   * preference to routes not containing highways. Applies only to the `DRIVE`
   * and `TWO_WHEELER` [`TravelMode`][google.maps.places.v1.TravelMode].
   */
  avoidHighways: boolean;
  /**
   * Optional. When set to true, avoids ferries where reasonable, giving
   * preference to routes not containing ferries. Applies only to the `DRIVE`
   * and `TWO_WHEELER` [`TravelMode`][google.maps.places.v1.TravelMode].
   */
  avoidFerries: boolean;
  /**
   * Optional. When set to true, avoids navigating indoors where reasonable,
   * giving preference to routes not containing indoor navigation. Applies only
   * to the `WALK` [`TravelMode`][google.maps.places.v1.TravelMode].
   */
  avoidIndoor: boolean;
}

function createBaseRouteModifiers(): RouteModifiers {
  return { avoidTolls: false, avoidHighways: false, avoidFerries: false, avoidIndoor: false };
}

export const RouteModifiers: MessageFns<RouteModifiers> = {
  encode(message: RouteModifiers, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.avoidTolls !== false) {
      writer.uint32(8).bool(message.avoidTolls);
    }
    if (message.avoidHighways !== false) {
      writer.uint32(16).bool(message.avoidHighways);
    }
    if (message.avoidFerries !== false) {
      writer.uint32(24).bool(message.avoidFerries);
    }
    if (message.avoidIndoor !== false) {
      writer.uint32(32).bool(message.avoidIndoor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteModifiers {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteModifiers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.avoidTolls = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.avoidHighways = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.avoidFerries = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.avoidIndoor = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteModifiers {
    return {
      avoidTolls: isSet(object.avoidTolls) ? globalThis.Boolean(object.avoidTolls) : false,
      avoidHighways: isSet(object.avoidHighways) ? globalThis.Boolean(object.avoidHighways) : false,
      avoidFerries: isSet(object.avoidFerries) ? globalThis.Boolean(object.avoidFerries) : false,
      avoidIndoor: isSet(object.avoidIndoor) ? globalThis.Boolean(object.avoidIndoor) : false,
    };
  },

  toJSON(message: RouteModifiers): unknown {
    const obj: any = {};
    if (message.avoidTolls !== false) {
      obj.avoidTolls = message.avoidTolls;
    }
    if (message.avoidHighways !== false) {
      obj.avoidHighways = message.avoidHighways;
    }
    if (message.avoidFerries !== false) {
      obj.avoidFerries = message.avoidFerries;
    }
    if (message.avoidIndoor !== false) {
      obj.avoidIndoor = message.avoidIndoor;
    }
    return obj;
  },

  create(base?: DeepPartial<RouteModifiers>): RouteModifiers {
    return RouteModifiers.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteModifiers>): RouteModifiers {
    const message = createBaseRouteModifiers();
    message.avoidTolls = object.avoidTolls ?? false;
    message.avoidHighways = object.avoidHighways ?? false;
    message.avoidFerries = object.avoidFerries ?? false;
    message.avoidIndoor = object.avoidIndoor ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
