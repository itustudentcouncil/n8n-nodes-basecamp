// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/mobilitybilling/logs/v1/mobility_billing_cloud_logging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.mobilitybilling.logs.v1";

/** Details on ReportBillableEvent request. */
export interface ReportBillableEventLog {
  /**
   * The id of the billable event.
   * Subject to the following restrictions:
   *
   * 1. IDs must be valid Unicode strings.
   * 2. IDs are limited to a maximum length of 64 characters.
   * 3. IDs must be normalized according to Unicode Normalization Form C
   * (http://www.unicode.org/reports/tr15/ ).
   * 4. IDs must not contain any of the following ASCII characters: '/', ':',
   * '?', ',', or '#'.
   */
  billableEventId: string;
  /**
   * Two-letter region code of the country or region where the event takes
   * place. A list of valid region codes can be found here:
   * https://developers.google.com/maps/coverage
   */
  regionCode: string;
  /**
   * The identifiers that are directly related to the event being reported.
   * The customer defines the meaning of these IDs.
   */
  relatedIds: string[];
}

function createBaseReportBillableEventLog(): ReportBillableEventLog {
  return { billableEventId: "", regionCode: "", relatedIds: [] };
}

export const ReportBillableEventLog: MessageFns<ReportBillableEventLog> = {
  encode(message: ReportBillableEventLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.billableEventId !== "") {
      writer.uint32(10).string(message.billableEventId);
    }
    if (message.regionCode !== "") {
      writer.uint32(18).string(message.regionCode);
    }
    for (const v of message.relatedIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportBillableEventLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportBillableEventLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.billableEventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.relatedIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportBillableEventLog {
    return {
      billableEventId: isSet(object.billableEventId) ? globalThis.String(object.billableEventId) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      relatedIds: globalThis.Array.isArray(object?.relatedIds)
        ? object.relatedIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ReportBillableEventLog): unknown {
    const obj: any = {};
    if (message.billableEventId !== "") {
      obj.billableEventId = message.billableEventId;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.relatedIds?.length) {
      obj.relatedIds = message.relatedIds;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportBillableEventLog>): ReportBillableEventLog {
    return ReportBillableEventLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportBillableEventLog>): ReportBillableEventLog {
    const message = createBaseReportBillableEventLog();
    message.billableEventId = object.billableEventId ?? "";
    message.regionCode = object.regionCode ?? "";
    message.relatedIds = object.relatedIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
