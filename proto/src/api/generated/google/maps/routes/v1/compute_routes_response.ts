// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/compute_routes_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FallbackInfo } from "./fallback_info.js";
import { Route } from "./route.js";

export const protobufPackage = "google.maps.routes.v1";

/** ComputeRoutes the response message. */
export interface ComputeRoutesResponse {
  /**
   * Contains an array of computed routes (up to three) when you specify
   * compute_alternatives_routes, and contains just one route when you don't.
   * When this array contains multiple entries, the first one is the most
   * recommended route. If the array is empty, then it means no route could be
   * found.
   */
  routes: Route[];
  /**
   * In some cases when the server is not able to compute the route results with
   * all of the input preferences, it may fallback to using a different way of
   * computation. When fallback mode is used, this field contains detailed info
   * about the fallback response. Otherwise this field is unset.
   */
  fallbackInfo: FallbackInfo | undefined;
}

function createBaseComputeRoutesResponse(): ComputeRoutesResponse {
  return { routes: [], fallbackInfo: undefined };
}

export const ComputeRoutesResponse: MessageFns<ComputeRoutesResponse> = {
  encode(message: ComputeRoutesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routes) {
      Route.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.fallbackInfo !== undefined) {
      FallbackInfo.encode(message.fallbackInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeRoutesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routes.push(Route.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fallbackInfo = FallbackInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeRoutesResponse {
    return {
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : [],
      fallbackInfo: isSet(object.fallbackInfo) ? FallbackInfo.fromJSON(object.fallbackInfo) : undefined,
    };
  },

  toJSON(message: ComputeRoutesResponse): unknown {
    const obj: any = {};
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    if (message.fallbackInfo !== undefined) {
      obj.fallbackInfo = FallbackInfo.toJSON(message.fallbackInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeRoutesResponse>): ComputeRoutesResponse {
    return ComputeRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeRoutesResponse>): ComputeRoutesResponse {
    const message = createBaseComputeRoutesResponse();
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || [];
    message.fallbackInfo = (object.fallbackInfo !== undefined && object.fallbackInfo !== null)
      ? FallbackInfo.fromPartial(object.fallbackInfo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
