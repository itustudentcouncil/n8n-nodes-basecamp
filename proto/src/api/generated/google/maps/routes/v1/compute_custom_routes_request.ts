// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/compute_custom_routes_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  RouteModifiers,
  RouteTravelMode,
  routeTravelModeFromJSON,
  routeTravelModeToJSON,
  RoutingPreference,
  routingPreferenceFromJSON,
  routingPreferenceToJSON,
  Units,
  unitsFromJSON,
  unitsToJSON,
} from "./compute_routes_request.js";
import {
  PolylineEncoding,
  polylineEncodingFromJSON,
  polylineEncodingToJSON,
  PolylineQuality,
  polylineQualityFromJSON,
  polylineQualityToJSON,
} from "./polyline.js";
import { Waypoint } from "./waypoint.js";

export const protobufPackage = "google.maps.routes.v1";

/** ComputeCustomRoutes request message. */
export interface ComputeCustomRoutesRequest {
  /** Required. Origin waypoint. */
  origin:
    | Waypoint
    | undefined;
  /** Required. Destination waypoint. */
  destination:
    | Waypoint
    | undefined;
  /**
   * Optional. A set of waypoints along the route (excluding terminal points),
   * for either stopping at or passing by. Up to 25 intermediate waypoints are
   * supported.
   */
  intermediates: Waypoint[];
  /**
   * Optional. Specifies the mode of transportation. Only `DRIVE` and
   * 'TWO_WHEELER' are supported.
   */
  travelMode: RouteTravelMode;
  /**
   * Optional. Specifies how to compute the route. The server attempts to use
   * the selected routing preference to compute the route. If the routing
   * preference results in an error or an extra long latency, then an error is
   * returned. You can specify this option only when the `travel_mode` is
   * `DRIVE` or `TWO_WHEELER`, otherwise the request fails.
   */
  routingPreference: RoutingPreference;
  /** Optional. Specifies your preference for the quality of the polyline. */
  polylineQuality: PolylineQuality;
  /** Optional. Specifies the preferred encoding for the polyline. */
  polylineEncoding: PolylineEncoding;
  /**
   * Optional. The departure time. If you don't set this value, then this value
   * defaults to the time that you made the request. If you set this value to a
   * time that has already occurred, then the request fails.
   */
  departureTime:
    | Date
    | undefined;
  /**
   * Optional. A set of conditions to satisfy that affect the way routes are
   * calculated.
   */
  routeModifiers:
    | RouteModifiers
    | undefined;
  /** Required. A route objective to optimize for. */
  routeObjective:
    | RouteObjective
    | undefined;
  /**
   * Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see [Unicode Locale
   * Identifier](http://www.unicode.org/reports/tr35/#Unicode_locale_identifier).
   * See [Language
   * Support](https://developers.google.com/maps/faq#languagesupport) for the
   * list of supported languages. When you don't provide this value, the display
   * language is inferred from the location of the route request.
   */
  languageCode: string;
  /**
   * Optional. Specifies the units of measure for the display fields. This
   * includes the `instruction` field in `NavigationInstruction`. The units of
   * measure used for the route, leg, step distance, and duration are not
   * affected by this value. If you don't provide this value, then the display
   * units are inferred from the location of the request.
   */
  units: Units;
}

/** Encapsulates an objective to optimize for by `ComputeCustomRoutes`. */
export interface RouteObjective {
  /** The RateCard objective. */
  rateCard?:
    | RouteObjective_RateCard
    | undefined;
  /**
   * Optional. Specifies the custom data layer being used to affect generated
   * routes. Customers can turn off the custom layer by not setting this field.
   */
  customLayer: RouteObjective_CustomLayer | undefined;
}

/** Encapsulates a `RateCard` route objective. */
export interface RouteObjective_RateCard {
  /** Optional. Cost per minute. */
  costPerMinute:
    | RouteObjective_RateCard_MonetaryCost
    | undefined;
  /** Optional. Cost per kilometer. */
  costPerKm:
    | RouteObjective_RateCard_MonetaryCost
    | undefined;
  /** Optional. Whether to include toll cost in the overall cost. */
  includeTolls: boolean;
}

/** Encapsulates the cost used in the rate card. */
export interface RouteObjective_RateCard_MonetaryCost {
  /** Required. The cost value in local currency inferred from the request. */
  value: number;
}

/** Customized data layer that customers use to influence the generated route. */
export interface RouteObjective_CustomLayer {
  /** Required. A dataset that the customer has uploaded in advance. */
  datasetInfo: RouteObjective_CustomLayer_DatasetInfo | undefined;
}

/**
 * Information about a dataset that customers have uploaded in advance. The
 * dataset information is used to influence routing.
 */
export interface RouteObjective_CustomLayer_DatasetInfo {
  /**
   * Optional. Deprecated: use display_name instead.
   * ID of a customer uploaded dataset which is used to influence the route.
   * If the dataset does not exist or is not yet ready, the request fails.
   *
   * @deprecated
   */
  datasetId: string;
  /**
   * Optional. Display name of the customer uploaded dataset which is used
   * to influence the route. If the dataset does not exist or is not yet
   * ready, the request fails.
   */
  displayName: string;
}

function createBaseComputeCustomRoutesRequest(): ComputeCustomRoutesRequest {
  return {
    origin: undefined,
    destination: undefined,
    intermediates: [],
    travelMode: 0,
    routingPreference: 0,
    polylineQuality: 0,
    polylineEncoding: 0,
    departureTime: undefined,
    routeModifiers: undefined,
    routeObjective: undefined,
    languageCode: "",
    units: 0,
  };
}

export const ComputeCustomRoutesRequest: MessageFns<ComputeCustomRoutesRequest> = {
  encode(message: ComputeCustomRoutesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.origin !== undefined) {
      Waypoint.encode(message.origin, writer.uint32(10).fork()).join();
    }
    if (message.destination !== undefined) {
      Waypoint.encode(message.destination, writer.uint32(18).fork()).join();
    }
    for (const v of message.intermediates) {
      Waypoint.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.travelMode !== 0) {
      writer.uint32(32).int32(message.travelMode);
    }
    if (message.routingPreference !== 0) {
      writer.uint32(40).int32(message.routingPreference);
    }
    if (message.polylineQuality !== 0) {
      writer.uint32(48).int32(message.polylineQuality);
    }
    if (message.polylineEncoding !== 0) {
      writer.uint32(104).int32(message.polylineEncoding);
    }
    if (message.departureTime !== undefined) {
      Timestamp.encode(toTimestamp(message.departureTime), writer.uint32(58).fork()).join();
    }
    if (message.routeModifiers !== undefined) {
      RouteModifiers.encode(message.routeModifiers, writer.uint32(90).fork()).join();
    }
    if (message.routeObjective !== undefined) {
      RouteObjective.encode(message.routeObjective, writer.uint32(98).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(74).string(message.languageCode);
    }
    if (message.units !== 0) {
      writer.uint32(80).int32(message.units);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeCustomRoutesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeCustomRoutesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.origin = Waypoint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destination = Waypoint.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.intermediates.push(Waypoint.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.travelMode = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.routingPreference = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.polylineQuality = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.polylineEncoding = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.departureTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.routeModifiers = RouteModifiers.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.routeObjective = RouteObjective.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.units = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeCustomRoutesRequest {
    return {
      origin: isSet(object.origin) ? Waypoint.fromJSON(object.origin) : undefined,
      destination: isSet(object.destination) ? Waypoint.fromJSON(object.destination) : undefined,
      intermediates: globalThis.Array.isArray(object?.intermediates)
        ? object.intermediates.map((e: any) => Waypoint.fromJSON(e))
        : [],
      travelMode: isSet(object.travelMode) ? routeTravelModeFromJSON(object.travelMode) : 0,
      routingPreference: isSet(object.routingPreference) ? routingPreferenceFromJSON(object.routingPreference) : 0,
      polylineQuality: isSet(object.polylineQuality) ? polylineQualityFromJSON(object.polylineQuality) : 0,
      polylineEncoding: isSet(object.polylineEncoding) ? polylineEncodingFromJSON(object.polylineEncoding) : 0,
      departureTime: isSet(object.departureTime) ? fromJsonTimestamp(object.departureTime) : undefined,
      routeModifiers: isSet(object.routeModifiers) ? RouteModifiers.fromJSON(object.routeModifiers) : undefined,
      routeObjective: isSet(object.routeObjective) ? RouteObjective.fromJSON(object.routeObjective) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      units: isSet(object.units) ? unitsFromJSON(object.units) : 0,
    };
  },

  toJSON(message: ComputeCustomRoutesRequest): unknown {
    const obj: any = {};
    if (message.origin !== undefined) {
      obj.origin = Waypoint.toJSON(message.origin);
    }
    if (message.destination !== undefined) {
      obj.destination = Waypoint.toJSON(message.destination);
    }
    if (message.intermediates?.length) {
      obj.intermediates = message.intermediates.map((e) => Waypoint.toJSON(e));
    }
    if (message.travelMode !== 0) {
      obj.travelMode = routeTravelModeToJSON(message.travelMode);
    }
    if (message.routingPreference !== 0) {
      obj.routingPreference = routingPreferenceToJSON(message.routingPreference);
    }
    if (message.polylineQuality !== 0) {
      obj.polylineQuality = polylineQualityToJSON(message.polylineQuality);
    }
    if (message.polylineEncoding !== 0) {
      obj.polylineEncoding = polylineEncodingToJSON(message.polylineEncoding);
    }
    if (message.departureTime !== undefined) {
      obj.departureTime = message.departureTime.toISOString();
    }
    if (message.routeModifiers !== undefined) {
      obj.routeModifiers = RouteModifiers.toJSON(message.routeModifiers);
    }
    if (message.routeObjective !== undefined) {
      obj.routeObjective = RouteObjective.toJSON(message.routeObjective);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.units !== 0) {
      obj.units = unitsToJSON(message.units);
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeCustomRoutesRequest>): ComputeCustomRoutesRequest {
    return ComputeCustomRoutesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeCustomRoutesRequest>): ComputeCustomRoutesRequest {
    const message = createBaseComputeCustomRoutesRequest();
    message.origin = (object.origin !== undefined && object.origin !== null)
      ? Waypoint.fromPartial(object.origin)
      : undefined;
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? Waypoint.fromPartial(object.destination)
      : undefined;
    message.intermediates = object.intermediates?.map((e) => Waypoint.fromPartial(e)) || [];
    message.travelMode = object.travelMode ?? 0;
    message.routingPreference = object.routingPreference ?? 0;
    message.polylineQuality = object.polylineQuality ?? 0;
    message.polylineEncoding = object.polylineEncoding ?? 0;
    message.departureTime = object.departureTime ?? undefined;
    message.routeModifiers = (object.routeModifiers !== undefined && object.routeModifiers !== null)
      ? RouteModifiers.fromPartial(object.routeModifiers)
      : undefined;
    message.routeObjective = (object.routeObjective !== undefined && object.routeObjective !== null)
      ? RouteObjective.fromPartial(object.routeObjective)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.units = object.units ?? 0;
    return message;
  },
};

function createBaseRouteObjective(): RouteObjective {
  return { rateCard: undefined, customLayer: undefined };
}

export const RouteObjective: MessageFns<RouteObjective> = {
  encode(message: RouteObjective, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rateCard !== undefined) {
      RouteObjective_RateCard.encode(message.rateCard, writer.uint32(10).fork()).join();
    }
    if (message.customLayer !== undefined) {
      RouteObjective_CustomLayer.encode(message.customLayer, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteObjective {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteObjective();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rateCard = RouteObjective_RateCard.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customLayer = RouteObjective_CustomLayer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteObjective {
    return {
      rateCard: isSet(object.rateCard) ? RouteObjective_RateCard.fromJSON(object.rateCard) : undefined,
      customLayer: isSet(object.customLayer) ? RouteObjective_CustomLayer.fromJSON(object.customLayer) : undefined,
    };
  },

  toJSON(message: RouteObjective): unknown {
    const obj: any = {};
    if (message.rateCard !== undefined) {
      obj.rateCard = RouteObjective_RateCard.toJSON(message.rateCard);
    }
    if (message.customLayer !== undefined) {
      obj.customLayer = RouteObjective_CustomLayer.toJSON(message.customLayer);
    }
    return obj;
  },

  create(base?: DeepPartial<RouteObjective>): RouteObjective {
    return RouteObjective.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteObjective>): RouteObjective {
    const message = createBaseRouteObjective();
    message.rateCard = (object.rateCard !== undefined && object.rateCard !== null)
      ? RouteObjective_RateCard.fromPartial(object.rateCard)
      : undefined;
    message.customLayer = (object.customLayer !== undefined && object.customLayer !== null)
      ? RouteObjective_CustomLayer.fromPartial(object.customLayer)
      : undefined;
    return message;
  },
};

function createBaseRouteObjective_RateCard(): RouteObjective_RateCard {
  return { costPerMinute: undefined, costPerKm: undefined, includeTolls: false };
}

export const RouteObjective_RateCard: MessageFns<RouteObjective_RateCard> = {
  encode(message: RouteObjective_RateCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.costPerMinute !== undefined) {
      RouteObjective_RateCard_MonetaryCost.encode(message.costPerMinute, writer.uint32(18).fork()).join();
    }
    if (message.costPerKm !== undefined) {
      RouteObjective_RateCard_MonetaryCost.encode(message.costPerKm, writer.uint32(26).fork()).join();
    }
    if (message.includeTolls !== false) {
      writer.uint32(32).bool(message.includeTolls);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteObjective_RateCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteObjective_RateCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.costPerMinute = RouteObjective_RateCard_MonetaryCost.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.costPerKm = RouteObjective_RateCard_MonetaryCost.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeTolls = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteObjective_RateCard {
    return {
      costPerMinute: isSet(object.costPerMinute)
        ? RouteObjective_RateCard_MonetaryCost.fromJSON(object.costPerMinute)
        : undefined,
      costPerKm: isSet(object.costPerKm) ? RouteObjective_RateCard_MonetaryCost.fromJSON(object.costPerKm) : undefined,
      includeTolls: isSet(object.includeTolls) ? globalThis.Boolean(object.includeTolls) : false,
    };
  },

  toJSON(message: RouteObjective_RateCard): unknown {
    const obj: any = {};
    if (message.costPerMinute !== undefined) {
      obj.costPerMinute = RouteObjective_RateCard_MonetaryCost.toJSON(message.costPerMinute);
    }
    if (message.costPerKm !== undefined) {
      obj.costPerKm = RouteObjective_RateCard_MonetaryCost.toJSON(message.costPerKm);
    }
    if (message.includeTolls !== false) {
      obj.includeTolls = message.includeTolls;
    }
    return obj;
  },

  create(base?: DeepPartial<RouteObjective_RateCard>): RouteObjective_RateCard {
    return RouteObjective_RateCard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteObjective_RateCard>): RouteObjective_RateCard {
    const message = createBaseRouteObjective_RateCard();
    message.costPerMinute = (object.costPerMinute !== undefined && object.costPerMinute !== null)
      ? RouteObjective_RateCard_MonetaryCost.fromPartial(object.costPerMinute)
      : undefined;
    message.costPerKm = (object.costPerKm !== undefined && object.costPerKm !== null)
      ? RouteObjective_RateCard_MonetaryCost.fromPartial(object.costPerKm)
      : undefined;
    message.includeTolls = object.includeTolls ?? false;
    return message;
  },
};

function createBaseRouteObjective_RateCard_MonetaryCost(): RouteObjective_RateCard_MonetaryCost {
  return { value: 0 };
}

export const RouteObjective_RateCard_MonetaryCost: MessageFns<RouteObjective_RateCard_MonetaryCost> = {
  encode(message: RouteObjective_RateCard_MonetaryCost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteObjective_RateCard_MonetaryCost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteObjective_RateCard_MonetaryCost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteObjective_RateCard_MonetaryCost {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: RouteObjective_RateCard_MonetaryCost): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RouteObjective_RateCard_MonetaryCost>): RouteObjective_RateCard_MonetaryCost {
    return RouteObjective_RateCard_MonetaryCost.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteObjective_RateCard_MonetaryCost>): RouteObjective_RateCard_MonetaryCost {
    const message = createBaseRouteObjective_RateCard_MonetaryCost();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseRouteObjective_CustomLayer(): RouteObjective_CustomLayer {
  return { datasetInfo: undefined };
}

export const RouteObjective_CustomLayer: MessageFns<RouteObjective_CustomLayer> = {
  encode(message: RouteObjective_CustomLayer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetInfo !== undefined) {
      RouteObjective_CustomLayer_DatasetInfo.encode(message.datasetInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteObjective_CustomLayer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteObjective_CustomLayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetInfo = RouteObjective_CustomLayer_DatasetInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteObjective_CustomLayer {
    return {
      datasetInfo: isSet(object.datasetInfo)
        ? RouteObjective_CustomLayer_DatasetInfo.fromJSON(object.datasetInfo)
        : undefined,
    };
  },

  toJSON(message: RouteObjective_CustomLayer): unknown {
    const obj: any = {};
    if (message.datasetInfo !== undefined) {
      obj.datasetInfo = RouteObjective_CustomLayer_DatasetInfo.toJSON(message.datasetInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<RouteObjective_CustomLayer>): RouteObjective_CustomLayer {
    return RouteObjective_CustomLayer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteObjective_CustomLayer>): RouteObjective_CustomLayer {
    const message = createBaseRouteObjective_CustomLayer();
    message.datasetInfo = (object.datasetInfo !== undefined && object.datasetInfo !== null)
      ? RouteObjective_CustomLayer_DatasetInfo.fromPartial(object.datasetInfo)
      : undefined;
    return message;
  },
};

function createBaseRouteObjective_CustomLayer_DatasetInfo(): RouteObjective_CustomLayer_DatasetInfo {
  return { datasetId: "", displayName: "" };
}

export const RouteObjective_CustomLayer_DatasetInfo: MessageFns<RouteObjective_CustomLayer_DatasetInfo> = {
  encode(message: RouteObjective_CustomLayer_DatasetInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetId !== "") {
      writer.uint32(10).string(message.datasetId);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteObjective_CustomLayer_DatasetInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteObjective_CustomLayer_DatasetInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteObjective_CustomLayer_DatasetInfo {
    return {
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: RouteObjective_CustomLayer_DatasetInfo): unknown {
    const obj: any = {};
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<RouteObjective_CustomLayer_DatasetInfo>): RouteObjective_CustomLayer_DatasetInfo {
    return RouteObjective_CustomLayer_DatasetInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteObjective_CustomLayer_DatasetInfo>): RouteObjective_CustomLayer_DatasetInfo {
    const message = createBaseRouteObjective_CustomLayer_DatasetInfo();
    message.datasetId = object.datasetId ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
