// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/compute_routes_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  PolylineEncoding,
  polylineEncodingFromJSON,
  polylineEncodingToJSON,
  PolylineQuality,
  polylineQualityFromJSON,
  polylineQualityToJSON,
} from "./polyline.js";
import { TollPass, tollPassFromJSON, tollPassToJSON } from "./toll_passes.js";
import {
  VehicleEmissionType,
  vehicleEmissionTypeFromJSON,
  vehicleEmissionTypeToJSON,
} from "./vehicle_emission_type.js";
import { Waypoint } from "./waypoint.js";

export const protobufPackage = "google.maps.routes.v1";

/** A set of values used to specify the mode of travel. */
export enum RouteTravelMode {
  /** TRAVEL_MODE_UNSPECIFIED - No travel mode specified. Defaults to `DRIVE`. */
  TRAVEL_MODE_UNSPECIFIED = 0,
  /** DRIVE - Travel by passenger car. */
  DRIVE = 1,
  /** BICYCLE - Travel by bicycle. */
  BICYCLE = 2,
  /** WALK - Travel by walking. */
  WALK = 3,
  /**
   * TWO_WHEELER - Two-wheeled, motorized vehicle. For example, motorcycle. Note that this
   * differs from the `BICYCLE` travel mode which covers human-powered mode.
   */
  TWO_WHEELER = 4,
  /**
   * TAXI - Travel by licensed taxi, which may allow the vehicle to travel on
   * designated taxi lanes in some areas.
   */
  TAXI = 5,
  UNRECOGNIZED = -1,
}

export function routeTravelModeFromJSON(object: any): RouteTravelMode {
  switch (object) {
    case 0:
    case "TRAVEL_MODE_UNSPECIFIED":
      return RouteTravelMode.TRAVEL_MODE_UNSPECIFIED;
    case 1:
    case "DRIVE":
      return RouteTravelMode.DRIVE;
    case 2:
    case "BICYCLE":
      return RouteTravelMode.BICYCLE;
    case 3:
    case "WALK":
      return RouteTravelMode.WALK;
    case 4:
    case "TWO_WHEELER":
      return RouteTravelMode.TWO_WHEELER;
    case 5:
    case "TAXI":
      return RouteTravelMode.TAXI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RouteTravelMode.UNRECOGNIZED;
  }
}

export function routeTravelModeToJSON(object: RouteTravelMode): string {
  switch (object) {
    case RouteTravelMode.TRAVEL_MODE_UNSPECIFIED:
      return "TRAVEL_MODE_UNSPECIFIED";
    case RouteTravelMode.DRIVE:
      return "DRIVE";
    case RouteTravelMode.BICYCLE:
      return "BICYCLE";
    case RouteTravelMode.WALK:
      return "WALK";
    case RouteTravelMode.TWO_WHEELER:
      return "TWO_WHEELER";
    case RouteTravelMode.TAXI:
      return "TAXI";
    case RouteTravelMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A set of values that specify factors to take into consideration when
 * calculating the route.
 */
export enum RoutingPreference {
  /** ROUTING_PREFERENCE_UNSPECIFIED - No routing preference specified. Default to `TRAFFIC_AWARE`. */
  ROUTING_PREFERENCE_UNSPECIFIED = 0,
  /**
   * TRAFFIC_UNAWARE - Computes routes without taking traffic conditions into consideration.
   * Suitable when traffic conditions don't matter. Using this value produces
   * the lowest latency.
   */
  TRAFFIC_UNAWARE = 1,
  /**
   * TRAFFIC_AWARE - Calculates routes taking traffic conditions into consideration. In contrast
   * to `TRAFFIC_AWARE_OPTIMAL`, some optimizations are applied to significantly
   * reduce latency.
   */
  TRAFFIC_AWARE = 2,
  /**
   * TRAFFIC_AWARE_OPTIMAL - Calculates the routes taking traffic conditions into consideration,
   * without applying most performance optimizations. Using this value produces
   * the highest latency.
   */
  TRAFFIC_AWARE_OPTIMAL = 3,
  UNRECOGNIZED = -1,
}

export function routingPreferenceFromJSON(object: any): RoutingPreference {
  switch (object) {
    case 0:
    case "ROUTING_PREFERENCE_UNSPECIFIED":
      return RoutingPreference.ROUTING_PREFERENCE_UNSPECIFIED;
    case 1:
    case "TRAFFIC_UNAWARE":
      return RoutingPreference.TRAFFIC_UNAWARE;
    case 2:
    case "TRAFFIC_AWARE":
      return RoutingPreference.TRAFFIC_AWARE;
    case 3:
    case "TRAFFIC_AWARE_OPTIMAL":
      return RoutingPreference.TRAFFIC_AWARE_OPTIMAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RoutingPreference.UNRECOGNIZED;
  }
}

export function routingPreferenceToJSON(object: RoutingPreference): string {
  switch (object) {
    case RoutingPreference.ROUTING_PREFERENCE_UNSPECIFIED:
      return "ROUTING_PREFERENCE_UNSPECIFIED";
    case RoutingPreference.TRAFFIC_UNAWARE:
      return "TRAFFIC_UNAWARE";
    case RoutingPreference.TRAFFIC_AWARE:
      return "TRAFFIC_AWARE";
    case RoutingPreference.TRAFFIC_AWARE_OPTIMAL:
      return "TRAFFIC_AWARE_OPTIMAL";
    case RoutingPreference.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A set of values that specify the unit of measure used in the display. */
export enum Units {
  /**
   * UNITS_UNSPECIFIED - Units of measure not specified. Defaults to the unit of measure inferred
   * from the request.
   */
  UNITS_UNSPECIFIED = 0,
  /** METRIC - Metric units of measure. */
  METRIC = 1,
  /** IMPERIAL - Imperial (English) units of measure. */
  IMPERIAL = 2,
  UNRECOGNIZED = -1,
}

export function unitsFromJSON(object: any): Units {
  switch (object) {
    case 0:
    case "UNITS_UNSPECIFIED":
      return Units.UNITS_UNSPECIFIED;
    case 1:
    case "METRIC":
      return Units.METRIC;
    case 2:
    case "IMPERIAL":
      return Units.IMPERIAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Units.UNRECOGNIZED;
  }
}

export function unitsToJSON(object: Units): string {
  switch (object) {
    case Units.UNITS_UNSPECIFIED:
      return "UNITS_UNSPECIFIED";
    case Units.METRIC:
      return "METRIC";
    case Units.IMPERIAL:
      return "IMPERIAL";
    case Units.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ComputeRoutes request message. */
export interface ComputeRoutesRequest {
  /** Required. Origin waypoint. */
  origin:
    | Waypoint
    | undefined;
  /** Required. Destination waypoint. */
  destination:
    | Waypoint
    | undefined;
  /**
   * Optional. A set of waypoints along the route (excluding terminal points),
   * for either stopping at or passing by. Up to 25 intermediate waypoints are
   * supported.
   */
  intermediates: Waypoint[];
  /** Optional. Specifies the mode of transportation. */
  travelMode: RouteTravelMode;
  /**
   * Optional. Specifies how to compute the route. The server
   * attempts to use the selected routing preference to compute the route. If
   *  the routing preference results in an error or an extra long latency, then
   * an error is returned. In the future, we might implement a fallback
   * mechanism to use a different option when the preferred option does not give
   * a valid result. You can specify this option only when the `travel_mode` is
   * `DRIVE` or `TWO_WHEELER`, otherwise the request fails.
   */
  routingPreference: RoutingPreference;
  /** Optional. Specifies your preference for the quality of the polyline. */
  polylineQuality: PolylineQuality;
  /** Optional. Specifies the preferred encoding for the polyline. */
  polylineEncoding: PolylineEncoding;
  /**
   * Optional. The departure time. If you don't set this value, then this value
   * defaults to the time that you made the request. If you set this value to a
   * time that has already occurred, then the request fails.
   */
  departureTime:
    | Date
    | undefined;
  /** Specifies whether to calculate alternate routes in addition to the route. */
  computeAlternativeRoutes: boolean;
  /**
   * Optional. A set of conditions to satisfy that affect the way routes are
   * calculated.
   */
  routeModifiers:
    | RouteModifiers
    | undefined;
  /**
   * Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. See
   * [Language Support](https://developers.google.com/maps/faq#languagesupport)
   * for the list of supported languages. When you don't provide this value, the
   * display language is inferred from the location of the route request.
   */
  languageCode: string;
  /**
   * Optional. Specifies the units of measure for the display fields. This
   * includes the `instruction` field in `NavigationInstruction`. The units of
   * measure used for the route, leg, step distance, and duration are not
   * affected by this value. If you don't provide this value, then the display
   * units are inferred from the location of the request.
   */
  units: Units;
  /**
   * If optimizeWaypointOrder is set to true, an attempt is made to re-order the
   * specified intermediate waypoints to minimize the overall cost of the route.
   * If any of the intermediate waypoints is via waypoint the request fails. Use
   * ComputeRoutesResponse.Routes.optimized_intermediate_waypoint_index to find
   * the new ordering. If routes.optimized_intermediate_waypoint_index is not
   * requested in the `X-Goog-FieldMask` header, the request fails. If
   * optimizeWaypointOrder is set to false,
   * ComputeRoutesResponse.optimized_intermediate_waypoint_index is empty.
   */
  optimizeWaypointOrder: boolean;
}

/**
 * Encapsulates a set of optional conditions to satisfy when calculating the
 * routes.
 */
export interface RouteModifiers {
  /**
   * Specifies whether to avoid toll roads where reasonable. Preference will be
   * given to routes not containing toll roads. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   */
  avoidTolls: boolean;
  /**
   * Specifies whether to avoid highways where reasonable. Preference will be
   * given to routes not containing highways. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   */
  avoidHighways: boolean;
  /**
   * Specifies whether to avoid ferries where reasonable. Preference will be
   * given to routes not containing travel by ferries.
   * Applies only to the `DRIVE` and`TWO_WHEELER` travel modes.
   */
  avoidFerries: boolean;
  /**
   * Specifies whether to avoid navigating indoors where reasonable. Preference
   * will be given to routes not containing indoor navigation.
   * Applies only to the `WALK` travel mode.
   */
  avoidIndoor: boolean;
  /** Specifies the vehicle information. */
  vehicleInfo:
    | VehicleInfo
    | undefined;
  /**
   * Encapsulates information about toll passes.
   * If toll passes are provided, the API tries to return the pass price. If
   * toll passes are not provided, the API treats the toll pass as unknown and
   * tries to return the cash price.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   */
  tollPasses: TollPass[];
}

/**
 * Encapsulates the vehicle information, such as the license plate last
 * character.
 */
export interface VehicleInfo {
  /** Specifies the license plate last character. Could be a digit or a letter. */
  licensePlateLastCharacter: string;
  /**
   * Describes the vehicle's emission type.
   * Applies only to the DRIVE travel mode.
   */
  emissionType: VehicleEmissionType;
}

function createBaseComputeRoutesRequest(): ComputeRoutesRequest {
  return {
    origin: undefined,
    destination: undefined,
    intermediates: [],
    travelMode: 0,
    routingPreference: 0,
    polylineQuality: 0,
    polylineEncoding: 0,
    departureTime: undefined,
    computeAlternativeRoutes: false,
    routeModifiers: undefined,
    languageCode: "",
    units: 0,
    optimizeWaypointOrder: false,
  };
}

export const ComputeRoutesRequest: MessageFns<ComputeRoutesRequest> = {
  encode(message: ComputeRoutesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.origin !== undefined) {
      Waypoint.encode(message.origin, writer.uint32(10).fork()).join();
    }
    if (message.destination !== undefined) {
      Waypoint.encode(message.destination, writer.uint32(18).fork()).join();
    }
    for (const v of message.intermediates) {
      Waypoint.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.travelMode !== 0) {
      writer.uint32(32).int32(message.travelMode);
    }
    if (message.routingPreference !== 0) {
      writer.uint32(40).int32(message.routingPreference);
    }
    if (message.polylineQuality !== 0) {
      writer.uint32(48).int32(message.polylineQuality);
    }
    if (message.polylineEncoding !== 0) {
      writer.uint32(96).int32(message.polylineEncoding);
    }
    if (message.departureTime !== undefined) {
      Timestamp.encode(toTimestamp(message.departureTime), writer.uint32(58).fork()).join();
    }
    if (message.computeAlternativeRoutes !== false) {
      writer.uint32(64).bool(message.computeAlternativeRoutes);
    }
    if (message.routeModifiers !== undefined) {
      RouteModifiers.encode(message.routeModifiers, writer.uint32(74).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(82).string(message.languageCode);
    }
    if (message.units !== 0) {
      writer.uint32(88).int32(message.units);
    }
    if (message.optimizeWaypointOrder !== false) {
      writer.uint32(104).bool(message.optimizeWaypointOrder);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeRoutesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeRoutesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.origin = Waypoint.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destination = Waypoint.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.intermediates.push(Waypoint.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.travelMode = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.routingPreference = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.polylineQuality = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.polylineEncoding = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.departureTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.computeAlternativeRoutes = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.routeModifiers = RouteModifiers.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.units = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.optimizeWaypointOrder = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeRoutesRequest {
    return {
      origin: isSet(object.origin) ? Waypoint.fromJSON(object.origin) : undefined,
      destination: isSet(object.destination) ? Waypoint.fromJSON(object.destination) : undefined,
      intermediates: globalThis.Array.isArray(object?.intermediates)
        ? object.intermediates.map((e: any) => Waypoint.fromJSON(e))
        : [],
      travelMode: isSet(object.travelMode) ? routeTravelModeFromJSON(object.travelMode) : 0,
      routingPreference: isSet(object.routingPreference) ? routingPreferenceFromJSON(object.routingPreference) : 0,
      polylineQuality: isSet(object.polylineQuality) ? polylineQualityFromJSON(object.polylineQuality) : 0,
      polylineEncoding: isSet(object.polylineEncoding) ? polylineEncodingFromJSON(object.polylineEncoding) : 0,
      departureTime: isSet(object.departureTime) ? fromJsonTimestamp(object.departureTime) : undefined,
      computeAlternativeRoutes: isSet(object.computeAlternativeRoutes)
        ? globalThis.Boolean(object.computeAlternativeRoutes)
        : false,
      routeModifiers: isSet(object.routeModifiers) ? RouteModifiers.fromJSON(object.routeModifiers) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      units: isSet(object.units) ? unitsFromJSON(object.units) : 0,
      optimizeWaypointOrder: isSet(object.optimizeWaypointOrder)
        ? globalThis.Boolean(object.optimizeWaypointOrder)
        : false,
    };
  },

  toJSON(message: ComputeRoutesRequest): unknown {
    const obj: any = {};
    if (message.origin !== undefined) {
      obj.origin = Waypoint.toJSON(message.origin);
    }
    if (message.destination !== undefined) {
      obj.destination = Waypoint.toJSON(message.destination);
    }
    if (message.intermediates?.length) {
      obj.intermediates = message.intermediates.map((e) => Waypoint.toJSON(e));
    }
    if (message.travelMode !== 0) {
      obj.travelMode = routeTravelModeToJSON(message.travelMode);
    }
    if (message.routingPreference !== 0) {
      obj.routingPreference = routingPreferenceToJSON(message.routingPreference);
    }
    if (message.polylineQuality !== 0) {
      obj.polylineQuality = polylineQualityToJSON(message.polylineQuality);
    }
    if (message.polylineEncoding !== 0) {
      obj.polylineEncoding = polylineEncodingToJSON(message.polylineEncoding);
    }
    if (message.departureTime !== undefined) {
      obj.departureTime = message.departureTime.toISOString();
    }
    if (message.computeAlternativeRoutes !== false) {
      obj.computeAlternativeRoutes = message.computeAlternativeRoutes;
    }
    if (message.routeModifiers !== undefined) {
      obj.routeModifiers = RouteModifiers.toJSON(message.routeModifiers);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.units !== 0) {
      obj.units = unitsToJSON(message.units);
    }
    if (message.optimizeWaypointOrder !== false) {
      obj.optimizeWaypointOrder = message.optimizeWaypointOrder;
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeRoutesRequest>): ComputeRoutesRequest {
    return ComputeRoutesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeRoutesRequest>): ComputeRoutesRequest {
    const message = createBaseComputeRoutesRequest();
    message.origin = (object.origin !== undefined && object.origin !== null)
      ? Waypoint.fromPartial(object.origin)
      : undefined;
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? Waypoint.fromPartial(object.destination)
      : undefined;
    message.intermediates = object.intermediates?.map((e) => Waypoint.fromPartial(e)) || [];
    message.travelMode = object.travelMode ?? 0;
    message.routingPreference = object.routingPreference ?? 0;
    message.polylineQuality = object.polylineQuality ?? 0;
    message.polylineEncoding = object.polylineEncoding ?? 0;
    message.departureTime = object.departureTime ?? undefined;
    message.computeAlternativeRoutes = object.computeAlternativeRoutes ?? false;
    message.routeModifiers = (object.routeModifiers !== undefined && object.routeModifiers !== null)
      ? RouteModifiers.fromPartial(object.routeModifiers)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    message.units = object.units ?? 0;
    message.optimizeWaypointOrder = object.optimizeWaypointOrder ?? false;
    return message;
  },
};

function createBaseRouteModifiers(): RouteModifiers {
  return {
    avoidTolls: false,
    avoidHighways: false,
    avoidFerries: false,
    avoidIndoor: false,
    vehicleInfo: undefined,
    tollPasses: [],
  };
}

export const RouteModifiers: MessageFns<RouteModifiers> = {
  encode(message: RouteModifiers, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.avoidTolls !== false) {
      writer.uint32(8).bool(message.avoidTolls);
    }
    if (message.avoidHighways !== false) {
      writer.uint32(16).bool(message.avoidHighways);
    }
    if (message.avoidFerries !== false) {
      writer.uint32(24).bool(message.avoidFerries);
    }
    if (message.avoidIndoor !== false) {
      writer.uint32(32).bool(message.avoidIndoor);
    }
    if (message.vehicleInfo !== undefined) {
      VehicleInfo.encode(message.vehicleInfo, writer.uint32(42).fork()).join();
    }
    writer.uint32(50).fork();
    for (const v of message.tollPasses) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteModifiers {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteModifiers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.avoidTolls = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.avoidHighways = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.avoidFerries = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.avoidIndoor = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.vehicleInfo = VehicleInfo.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag === 48) {
            message.tollPasses.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.tollPasses.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteModifiers {
    return {
      avoidTolls: isSet(object.avoidTolls) ? globalThis.Boolean(object.avoidTolls) : false,
      avoidHighways: isSet(object.avoidHighways) ? globalThis.Boolean(object.avoidHighways) : false,
      avoidFerries: isSet(object.avoidFerries) ? globalThis.Boolean(object.avoidFerries) : false,
      avoidIndoor: isSet(object.avoidIndoor) ? globalThis.Boolean(object.avoidIndoor) : false,
      vehicleInfo: isSet(object.vehicleInfo) ? VehicleInfo.fromJSON(object.vehicleInfo) : undefined,
      tollPasses: globalThis.Array.isArray(object?.tollPasses)
        ? object.tollPasses.map((e: any) => tollPassFromJSON(e))
        : [],
    };
  },

  toJSON(message: RouteModifiers): unknown {
    const obj: any = {};
    if (message.avoidTolls !== false) {
      obj.avoidTolls = message.avoidTolls;
    }
    if (message.avoidHighways !== false) {
      obj.avoidHighways = message.avoidHighways;
    }
    if (message.avoidFerries !== false) {
      obj.avoidFerries = message.avoidFerries;
    }
    if (message.avoidIndoor !== false) {
      obj.avoidIndoor = message.avoidIndoor;
    }
    if (message.vehicleInfo !== undefined) {
      obj.vehicleInfo = VehicleInfo.toJSON(message.vehicleInfo);
    }
    if (message.tollPasses?.length) {
      obj.tollPasses = message.tollPasses.map((e) => tollPassToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RouteModifiers>): RouteModifiers {
    return RouteModifiers.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteModifiers>): RouteModifiers {
    const message = createBaseRouteModifiers();
    message.avoidTolls = object.avoidTolls ?? false;
    message.avoidHighways = object.avoidHighways ?? false;
    message.avoidFerries = object.avoidFerries ?? false;
    message.avoidIndoor = object.avoidIndoor ?? false;
    message.vehicleInfo = (object.vehicleInfo !== undefined && object.vehicleInfo !== null)
      ? VehicleInfo.fromPartial(object.vehicleInfo)
      : undefined;
    message.tollPasses = object.tollPasses?.map((e) => e) || [];
    return message;
  },
};

function createBaseVehicleInfo(): VehicleInfo {
  return { licensePlateLastCharacter: "", emissionType: 0 };
}

export const VehicleInfo: MessageFns<VehicleInfo> = {
  encode(message: VehicleInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.licensePlateLastCharacter !== "") {
      writer.uint32(10).string(message.licensePlateLastCharacter);
    }
    if (message.emissionType !== 0) {
      writer.uint32(16).int32(message.emissionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.licensePlateLastCharacter = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.emissionType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleInfo {
    return {
      licensePlateLastCharacter: isSet(object.licensePlateLastCharacter)
        ? globalThis.String(object.licensePlateLastCharacter)
        : "",
      emissionType: isSet(object.emissionType) ? vehicleEmissionTypeFromJSON(object.emissionType) : 0,
    };
  },

  toJSON(message: VehicleInfo): unknown {
    const obj: any = {};
    if (message.licensePlateLastCharacter !== "") {
      obj.licensePlateLastCharacter = message.licensePlateLastCharacter;
    }
    if (message.emissionType !== 0) {
      obj.emissionType = vehicleEmissionTypeToJSON(message.emissionType);
    }
    return obj;
  },

  create(base?: DeepPartial<VehicleInfo>): VehicleInfo {
    return VehicleInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VehicleInfo>): VehicleInfo {
    const message = createBaseVehicleInfo();
    message.licensePlateLastCharacter = object.licensePlateLastCharacter ?? "";
    message.emissionType = object.emissionType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
