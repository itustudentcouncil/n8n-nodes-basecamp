// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/fallback_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.routes.v1";

/** Reasons for using fallback response. */
export enum FallbackReason {
  /** FALLBACK_REASON_UNSPECIFIED - No fallback reason specified. */
  FALLBACK_REASON_UNSPECIFIED = 0,
  /**
   * SERVER_ERROR - A server error happened while calculating routes with your preferred
   * routing mode, but we were able to return a result calculated by an
   * alternative mode.
   */
  SERVER_ERROR = 1,
  /**
   * LATENCY_EXCEEDED - We were not able to finish the calculation with your preferred routing mode
   * on time, but we were able to return a result calculated by an alternative
   * mode.
   */
  LATENCY_EXCEEDED = 2,
  UNRECOGNIZED = -1,
}

export function fallbackReasonFromJSON(object: any): FallbackReason {
  switch (object) {
    case 0:
    case "FALLBACK_REASON_UNSPECIFIED":
      return FallbackReason.FALLBACK_REASON_UNSPECIFIED;
    case 1:
    case "SERVER_ERROR":
      return FallbackReason.SERVER_ERROR;
    case 2:
    case "LATENCY_EXCEEDED":
      return FallbackReason.LATENCY_EXCEEDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FallbackReason.UNRECOGNIZED;
  }
}

export function fallbackReasonToJSON(object: FallbackReason): string {
  switch (object) {
    case FallbackReason.FALLBACK_REASON_UNSPECIFIED:
      return "FALLBACK_REASON_UNSPECIFIED";
    case FallbackReason.SERVER_ERROR:
      return "SERVER_ERROR";
    case FallbackReason.LATENCY_EXCEEDED:
      return "LATENCY_EXCEEDED";
    case FallbackReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Actual routing mode used for returned fallback response. */
export enum FallbackRoutingMode {
  /** FALLBACK_ROUTING_MODE_UNSPECIFIED - Not used. */
  FALLBACK_ROUTING_MODE_UNSPECIFIED = 0,
  /**
   * FALLBACK_TRAFFIC_UNAWARE - Indicates the "TRAFFIC_UNAWARE" routing mode was used to compute the
   * response.
   */
  FALLBACK_TRAFFIC_UNAWARE = 1,
  /**
   * FALLBACK_TRAFFIC_AWARE - Indicates the "TRAFFIC_AWARE" routing mode was used to compute the
   * response.
   */
  FALLBACK_TRAFFIC_AWARE = 2,
  UNRECOGNIZED = -1,
}

export function fallbackRoutingModeFromJSON(object: any): FallbackRoutingMode {
  switch (object) {
    case 0:
    case "FALLBACK_ROUTING_MODE_UNSPECIFIED":
      return FallbackRoutingMode.FALLBACK_ROUTING_MODE_UNSPECIFIED;
    case 1:
    case "FALLBACK_TRAFFIC_UNAWARE":
      return FallbackRoutingMode.FALLBACK_TRAFFIC_UNAWARE;
    case 2:
    case "FALLBACK_TRAFFIC_AWARE":
      return FallbackRoutingMode.FALLBACK_TRAFFIC_AWARE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FallbackRoutingMode.UNRECOGNIZED;
  }
}

export function fallbackRoutingModeToJSON(object: FallbackRoutingMode): string {
  switch (object) {
    case FallbackRoutingMode.FALLBACK_ROUTING_MODE_UNSPECIFIED:
      return "FALLBACK_ROUTING_MODE_UNSPECIFIED";
    case FallbackRoutingMode.FALLBACK_TRAFFIC_UNAWARE:
      return "FALLBACK_TRAFFIC_UNAWARE";
    case FallbackRoutingMode.FALLBACK_TRAFFIC_AWARE:
      return "FALLBACK_TRAFFIC_AWARE";
    case FallbackRoutingMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Information related to how and why a fallback result was used. If this field
 * is set, then it means the server used a different routing mode from your
 * preferred mode as fallback.
 */
export interface FallbackInfo {
  /**
   * Routing mode used for the response. If fallback was triggered, the mode
   * may be different from routing preference set in the original client
   * request.
   */
  routingMode: FallbackRoutingMode;
  /**
   * The reason why fallback response was used instead of the original response.
   * This field is only populated when the fallback mode is triggered and the
   * fallback response is returned.
   */
  reason: FallbackReason;
}

function createBaseFallbackInfo(): FallbackInfo {
  return { routingMode: 0, reason: 0 };
}

export const FallbackInfo: MessageFns<FallbackInfo> = {
  encode(message: FallbackInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routingMode !== 0) {
      writer.uint32(8).int32(message.routingMode);
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FallbackInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFallbackInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.routingMode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FallbackInfo {
    return {
      routingMode: isSet(object.routingMode) ? fallbackRoutingModeFromJSON(object.routingMode) : 0,
      reason: isSet(object.reason) ? fallbackReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: FallbackInfo): unknown {
    const obj: any = {};
    if (message.routingMode !== 0) {
      obj.routingMode = fallbackRoutingModeToJSON(message.routingMode);
    }
    if (message.reason !== 0) {
      obj.reason = fallbackReasonToJSON(message.reason);
    }
    return obj;
  },

  create(base?: DeepPartial<FallbackInfo>): FallbackInfo {
    return FallbackInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FallbackInfo>): FallbackInfo {
    const message = createBaseFallbackInfo();
    message.routingMode = object.routingMode ?? 0;
    message.reason = object.reason ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
