// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/spanner/admin/database/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Status } from "../../../../rpc/status.js";

export const protobufPackage = "google.spanner.admin.database.v1";

/** Indicates the dialect type of a database. */
export enum DatabaseDialect {
  /**
   * DATABASE_DIALECT_UNSPECIFIED - Default value. This value will create a database with the
   * GOOGLE_STANDARD_SQL dialect.
   */
  DATABASE_DIALECT_UNSPECIFIED = 0,
  /** GOOGLE_STANDARD_SQL - GoogleSQL supported SQL. */
  GOOGLE_STANDARD_SQL = 1,
  /** POSTGRESQL - PostgreSQL supported SQL. */
  POSTGRESQL = 2,
  UNRECOGNIZED = -1,
}

export function databaseDialectFromJSON(object: any): DatabaseDialect {
  switch (object) {
    case 0:
    case "DATABASE_DIALECT_UNSPECIFIED":
      return DatabaseDialect.DATABASE_DIALECT_UNSPECIFIED;
    case 1:
    case "GOOGLE_STANDARD_SQL":
      return DatabaseDialect.GOOGLE_STANDARD_SQL;
    case 2:
    case "POSTGRESQL":
      return DatabaseDialect.POSTGRESQL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseDialect.UNRECOGNIZED;
  }
}

export function databaseDialectToJSON(object: DatabaseDialect): string {
  switch (object) {
    case DatabaseDialect.DATABASE_DIALECT_UNSPECIFIED:
      return "DATABASE_DIALECT_UNSPECIFIED";
    case DatabaseDialect.GOOGLE_STANDARD_SQL:
      return "GOOGLE_STANDARD_SQL";
    case DatabaseDialect.POSTGRESQL:
      return "POSTGRESQL";
    case DatabaseDialect.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Encapsulates progress related information for a Cloud Spanner long
 * running operation.
 */
export interface OperationProgress {
  /**
   * Percent completion of the operation.
   * Values are between 0 and 100 inclusive.
   */
  progressPercent: number;
  /** Time the request was received. */
  startTime:
    | Date
    | undefined;
  /**
   * If set, the time at which this operation failed or was completed
   * successfully.
   */
  endTime: Date | undefined;
}

/** Encryption configuration for a Cloud Spanner database. */
export interface EncryptionConfig {
  /**
   * The Cloud KMS key to be used for encrypting and decrypting
   * the database. Values are of the form
   * `projects/<project>/locations/<location>/keyRings/<key_ring>/cryptoKeys/<kms_key_name>`.
   */
  kmsKeyName: string;
  /**
   * Specifies the KMS configuration for the one or more keys used to encrypt
   * the database. Values are of the form
   * `projects/<project>/locations/<location>/keyRings/<key_ring>/cryptoKeys/<kms_key_name>`.
   *
   * The keys referenced by kms_key_names must fully cover all
   * regions of the database instance configuration. Some examples:
   * * For single region database instance configs, specify a single regional
   * location KMS key.
   * * For multi-regional database instance configs of type GOOGLE_MANAGED,
   * either specify a multi-regional location KMS key or multiple regional
   * location KMS keys that cover all regions in the instance config.
   * * For a database instance config of type USER_MANAGED, please specify only
   * regional location KMS keys to cover each region in the instance config.
   * Multi-regional location KMS keys are not supported for USER_MANAGED
   * instance configs.
   */
  kmsKeyNames: string[];
}

/** Encryption information for a Cloud Spanner database or backup. */
export interface EncryptionInfo {
  /** Output only. The type of encryption. */
  encryptionType: EncryptionInfo_Type;
  /**
   * Output only. If present, the status of a recent encrypt/decrypt call on
   * underlying data for this database or backup. Regardless of status, data is
   * always encrypted at rest.
   */
  encryptionStatus:
    | Status
    | undefined;
  /**
   * Output only. A Cloud KMS key version that is being used to protect the
   * database or backup.
   */
  kmsKeyVersion: string;
}

/** Possible encryption types. */
export enum EncryptionInfo_Type {
  /** TYPE_UNSPECIFIED - Encryption type was not specified, though data at rest remains encrypted. */
  TYPE_UNSPECIFIED = 0,
  /**
   * GOOGLE_DEFAULT_ENCRYPTION - The data is encrypted at rest with a key that is
   * fully managed by Google. No key version or status will be populated.
   * This is the default state.
   */
  GOOGLE_DEFAULT_ENCRYPTION = 1,
  /**
   * CUSTOMER_MANAGED_ENCRYPTION - The data is encrypted at rest with a key that is
   * managed by the customer. The active version of the key. `kms_key_version`
   * will be populated, and `encryption_status` may be populated.
   */
  CUSTOMER_MANAGED_ENCRYPTION = 2,
  UNRECOGNIZED = -1,
}

export function encryptionInfo_TypeFromJSON(object: any): EncryptionInfo_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return EncryptionInfo_Type.TYPE_UNSPECIFIED;
    case 1:
    case "GOOGLE_DEFAULT_ENCRYPTION":
      return EncryptionInfo_Type.GOOGLE_DEFAULT_ENCRYPTION;
    case 2:
    case "CUSTOMER_MANAGED_ENCRYPTION":
      return EncryptionInfo_Type.CUSTOMER_MANAGED_ENCRYPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncryptionInfo_Type.UNRECOGNIZED;
  }
}

export function encryptionInfo_TypeToJSON(object: EncryptionInfo_Type): string {
  switch (object) {
    case EncryptionInfo_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case EncryptionInfo_Type.GOOGLE_DEFAULT_ENCRYPTION:
      return "GOOGLE_DEFAULT_ENCRYPTION";
    case EncryptionInfo_Type.CUSTOMER_MANAGED_ENCRYPTION:
      return "CUSTOMER_MANAGED_ENCRYPTION";
    case EncryptionInfo_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseOperationProgress(): OperationProgress {
  return { progressPercent: 0, startTime: undefined, endTime: undefined };
}

export const OperationProgress: MessageFns<OperationProgress> = {
  encode(message: OperationProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progressPercent !== 0) {
      writer.uint32(8).int32(message.progressPercent);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.progressPercent = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationProgress {
    return {
      progressPercent: isSet(object.progressPercent) ? globalThis.Number(object.progressPercent) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: OperationProgress): unknown {
    const obj: any = {};
    if (message.progressPercent !== 0) {
      obj.progressPercent = Math.round(message.progressPercent);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OperationProgress>): OperationProgress {
    return OperationProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationProgress>): OperationProgress {
    const message = createBaseOperationProgress();
    message.progressPercent = object.progressPercent ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseEncryptionConfig(): EncryptionConfig {
  return { kmsKeyName: "", kmsKeyNames: [] };
}

export const EncryptionConfig: MessageFns<EncryptionConfig> = {
  encode(message: EncryptionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kmsKeyName !== "") {
      writer.uint32(18).string(message.kmsKeyName);
    }
    for (const v of message.kmsKeyNames) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kmsKeyNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionConfig {
    return {
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      kmsKeyNames: globalThis.Array.isArray(object?.kmsKeyNames)
        ? object.kmsKeyNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: EncryptionConfig): unknown {
    const obj: any = {};
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.kmsKeyNames?.length) {
      obj.kmsKeyNames = message.kmsKeyNames;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptionConfig>): EncryptionConfig {
    return EncryptionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptionConfig>): EncryptionConfig {
    const message = createBaseEncryptionConfig();
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.kmsKeyNames = object.kmsKeyNames?.map((e) => e) || [];
    return message;
  },
};

function createBaseEncryptionInfo(): EncryptionInfo {
  return { encryptionType: 0, encryptionStatus: undefined, kmsKeyVersion: "" };
}

export const EncryptionInfo: MessageFns<EncryptionInfo> = {
  encode(message: EncryptionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptionType !== 0) {
      writer.uint32(24).int32(message.encryptionType);
    }
    if (message.encryptionStatus !== undefined) {
      Status.encode(message.encryptionStatus, writer.uint32(34).fork()).join();
    }
    if (message.kmsKeyVersion !== "") {
      writer.uint32(18).string(message.kmsKeyVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.encryptionType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.encryptionStatus = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsKeyVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionInfo {
    return {
      encryptionType: isSet(object.encryptionType) ? encryptionInfo_TypeFromJSON(object.encryptionType) : 0,
      encryptionStatus: isSet(object.encryptionStatus) ? Status.fromJSON(object.encryptionStatus) : undefined,
      kmsKeyVersion: isSet(object.kmsKeyVersion) ? globalThis.String(object.kmsKeyVersion) : "",
    };
  },

  toJSON(message: EncryptionInfo): unknown {
    const obj: any = {};
    if (message.encryptionType !== 0) {
      obj.encryptionType = encryptionInfo_TypeToJSON(message.encryptionType);
    }
    if (message.encryptionStatus !== undefined) {
      obj.encryptionStatus = Status.toJSON(message.encryptionStatus);
    }
    if (message.kmsKeyVersion !== "") {
      obj.kmsKeyVersion = message.kmsKeyVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptionInfo>): EncryptionInfo {
    return EncryptionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptionInfo>): EncryptionInfo {
    const message = createBaseEncryptionInfo();
    message.encryptionType = object.encryptionType ?? 0;
    message.encryptionStatus = (object.encryptionStatus !== undefined && object.encryptionStatus !== null)
      ? Status.fromPartial(object.encryptionStatus)
      : undefined;
    message.kmsKeyVersion = object.kmsKeyVersion ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
