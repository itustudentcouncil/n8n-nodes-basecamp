// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/spanner/v1/commit_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.spanner.v1";

/** The response for [Commit][google.spanner.v1.Spanner.Commit]. */
export interface CommitResponse {
  /** The Cloud Spanner timestamp at which the transaction committed. */
  commitTimestamp:
    | Date
    | undefined;
  /**
   * The statistics about this Commit. Not returned by default.
   * For more information, see
   * [CommitRequest.return_commit_stats][google.spanner.v1.CommitRequest.return_commit_stats].
   */
  commitStats: CommitResponse_CommitStats | undefined;
}

/** Additional statistics about a commit. */
export interface CommitResponse_CommitStats {
  /**
   * The total number of mutations for the transaction. Knowing the
   * `mutation_count` value can help you maximize the number of mutations
   * in a transaction and minimize the number of API round trips. You can
   * also monitor this value to prevent transactions from exceeding the system
   * [limit](https://cloud.google.com/spanner/quotas#limits_for_creating_reading_updating_and_deleting_data).
   * If the number of mutations exceeds the limit, the server returns
   * [INVALID_ARGUMENT](https://cloud.google.com/spanner/docs/reference/rest/v1/Code#ENUM_VALUES.INVALID_ARGUMENT).
   */
  mutationCount: Long;
}

function createBaseCommitResponse(): CommitResponse {
  return { commitTimestamp: undefined, commitStats: undefined };
}

export const CommitResponse: MessageFns<CommitResponse> = {
  encode(message: CommitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commitTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.commitTimestamp), writer.uint32(10).fork()).join();
    }
    if (message.commitStats !== undefined) {
      CommitResponse_CommitStats.encode(message.commitStats, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commitTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commitStats = CommitResponse_CommitStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitResponse {
    return {
      commitTimestamp: isSet(object.commitTimestamp) ? fromJsonTimestamp(object.commitTimestamp) : undefined,
      commitStats: isSet(object.commitStats) ? CommitResponse_CommitStats.fromJSON(object.commitStats) : undefined,
    };
  },

  toJSON(message: CommitResponse): unknown {
    const obj: any = {};
    if (message.commitTimestamp !== undefined) {
      obj.commitTimestamp = message.commitTimestamp.toISOString();
    }
    if (message.commitStats !== undefined) {
      obj.commitStats = CommitResponse_CommitStats.toJSON(message.commitStats);
    }
    return obj;
  },

  create(base?: DeepPartial<CommitResponse>): CommitResponse {
    return CommitResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitResponse>): CommitResponse {
    const message = createBaseCommitResponse();
    message.commitTimestamp = object.commitTimestamp ?? undefined;
    message.commitStats = (object.commitStats !== undefined && object.commitStats !== null)
      ? CommitResponse_CommitStats.fromPartial(object.commitStats)
      : undefined;
    return message;
  },
};

function createBaseCommitResponse_CommitStats(): CommitResponse_CommitStats {
  return { mutationCount: Long.ZERO };
}

export const CommitResponse_CommitStats: MessageFns<CommitResponse_CommitStats> = {
  encode(message: CommitResponse_CommitStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.mutationCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.mutationCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitResponse_CommitStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitResponse_CommitStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mutationCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitResponse_CommitStats {
    return { mutationCount: isSet(object.mutationCount) ? Long.fromValue(object.mutationCount) : Long.ZERO };
  },

  toJSON(message: CommitResponse_CommitStats): unknown {
    const obj: any = {};
    if (!message.mutationCount.equals(Long.ZERO)) {
      obj.mutationCount = (message.mutationCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CommitResponse_CommitStats>): CommitResponse_CommitStats {
    return CommitResponse_CommitStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitResponse_CommitStats>): CommitResponse_CommitStats {
    const message = createBaseCommitResponse_CommitStats();
    message.mutationCount = (object.mutationCount !== undefined && object.mutationCount !== null)
      ? Long.fromValue(object.mutationCount)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
