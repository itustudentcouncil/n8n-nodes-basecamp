// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/spanner/v1/type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.spanner.v1";

/**
 * `TypeCode` is used as part of [Type][google.spanner.v1.Type] to
 * indicate the type of a Cloud Spanner value.
 *
 * Each legal value of a type can be encoded to or decoded from a JSON
 * value, using the encodings described below. All Cloud Spanner values can
 * be `null`, regardless of type; `null`s are always encoded as a JSON
 * `null`.
 */
export enum TypeCode {
  /** TYPE_CODE_UNSPECIFIED - Not specified. */
  TYPE_CODE_UNSPECIFIED = 0,
  /** BOOL - Encoded as JSON `true` or `false`. */
  BOOL = 1,
  /** INT64 - Encoded as `string`, in decimal format. */
  INT64 = 2,
  /**
   * FLOAT64 - Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
   * `"-Infinity"`.
   */
  FLOAT64 = 3,
  /**
   * FLOAT32 - Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
   * `"-Infinity"`.
   */
  FLOAT32 = 15,
  /**
   * TIMESTAMP - Encoded as `string` in RFC 3339 timestamp format. The time zone
   * must be present, and must be `"Z"`.
   *
   * If the schema has the column option
   * `allow_commit_timestamp=true`, the placeholder string
   * `"spanner.commit_timestamp()"` can be used to instruct the system
   * to insert the commit timestamp associated with the transaction
   * commit.
   */
  TIMESTAMP = 4,
  /** DATE - Encoded as `string` in RFC 3339 date format. */
  DATE = 5,
  /** STRING - Encoded as `string`. */
  STRING = 6,
  /**
   * BYTES - Encoded as a base64-encoded `string`, as described in RFC 4648,
   * section 4.
   */
  BYTES = 7,
  /**
   * ARRAY - Encoded as `list`, where the list elements are represented
   * according to
   * [array_element_type][google.spanner.v1.Type.array_element_type].
   */
  ARRAY = 8,
  /**
   * STRUCT - Encoded as `list`, where list element `i` is represented according
   * to [struct_type.fields[i]][google.spanner.v1.StructType.fields].
   */
  STRUCT = 9,
  /**
   * NUMERIC - Encoded as `string`, in decimal format or scientific notation format.
   * <br>Decimal format:
   * <br>`[+-]Digits[.[Digits]]` or
   * <br>`[+-][Digits].Digits`
   *
   * Scientific notation:
   * <br>`[+-]Digits[.[Digits]][ExponentIndicator[+-]Digits]` or
   * <br>`[+-][Digits].Digits[ExponentIndicator[+-]Digits]`
   * <br>(ExponentIndicator is `"e"` or `"E"`)
   */
  NUMERIC = 10,
  /**
   * JSON - Encoded as a JSON-formatted `string` as described in RFC 7159. The
   * following rules are applied when parsing JSON input:
   *
   * - Whitespace characters are not preserved.
   * - If a JSON object has duplicate keys, only the first key is preserved.
   * - Members of a JSON object are not guaranteed to have their order
   *   preserved.
   * - JSON array elements will have their order preserved.
   */
  JSON = 11,
  /**
   * PROTO - Encoded as a base64-encoded `string`, as described in RFC 4648,
   * section 4.
   */
  PROTO = 13,
  /** ENUM - Encoded as `string`, in decimal format. */
  ENUM = 14,
  UNRECOGNIZED = -1,
}

export function typeCodeFromJSON(object: any): TypeCode {
  switch (object) {
    case 0:
    case "TYPE_CODE_UNSPECIFIED":
      return TypeCode.TYPE_CODE_UNSPECIFIED;
    case 1:
    case "BOOL":
      return TypeCode.BOOL;
    case 2:
    case "INT64":
      return TypeCode.INT64;
    case 3:
    case "FLOAT64":
      return TypeCode.FLOAT64;
    case 15:
    case "FLOAT32":
      return TypeCode.FLOAT32;
    case 4:
    case "TIMESTAMP":
      return TypeCode.TIMESTAMP;
    case 5:
    case "DATE":
      return TypeCode.DATE;
    case 6:
    case "STRING":
      return TypeCode.STRING;
    case 7:
    case "BYTES":
      return TypeCode.BYTES;
    case 8:
    case "ARRAY":
      return TypeCode.ARRAY;
    case 9:
    case "STRUCT":
      return TypeCode.STRUCT;
    case 10:
    case "NUMERIC":
      return TypeCode.NUMERIC;
    case 11:
    case "JSON":
      return TypeCode.JSON;
    case 13:
    case "PROTO":
      return TypeCode.PROTO;
    case 14:
    case "ENUM":
      return TypeCode.ENUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TypeCode.UNRECOGNIZED;
  }
}

export function typeCodeToJSON(object: TypeCode): string {
  switch (object) {
    case TypeCode.TYPE_CODE_UNSPECIFIED:
      return "TYPE_CODE_UNSPECIFIED";
    case TypeCode.BOOL:
      return "BOOL";
    case TypeCode.INT64:
      return "INT64";
    case TypeCode.FLOAT64:
      return "FLOAT64";
    case TypeCode.FLOAT32:
      return "FLOAT32";
    case TypeCode.TIMESTAMP:
      return "TIMESTAMP";
    case TypeCode.DATE:
      return "DATE";
    case TypeCode.STRING:
      return "STRING";
    case TypeCode.BYTES:
      return "BYTES";
    case TypeCode.ARRAY:
      return "ARRAY";
    case TypeCode.STRUCT:
      return "STRUCT";
    case TypeCode.NUMERIC:
      return "NUMERIC";
    case TypeCode.JSON:
      return "JSON";
    case TypeCode.PROTO:
      return "PROTO";
    case TypeCode.ENUM:
      return "ENUM";
    case TypeCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * `TypeAnnotationCode` is used as a part of [Type][google.spanner.v1.Type] to
 * disambiguate SQL types that should be used for a given Cloud Spanner value.
 * Disambiguation is needed because the same Cloud Spanner type can be mapped to
 * different SQL types depending on SQL dialect. TypeAnnotationCode doesn't
 * affect the way value is serialized.
 */
export enum TypeAnnotationCode {
  /** TYPE_ANNOTATION_CODE_UNSPECIFIED - Not specified. */
  TYPE_ANNOTATION_CODE_UNSPECIFIED = 0,
  /**
   * PG_NUMERIC - PostgreSQL compatible NUMERIC type. This annotation needs to be applied to
   * [Type][google.spanner.v1.Type] instances having [NUMERIC][google.spanner.v1.TypeCode.NUMERIC]
   * type code to specify that values of this type should be treated as
   * PostgreSQL NUMERIC values. Currently this annotation is always needed for
   * [NUMERIC][google.spanner.v1.TypeCode.NUMERIC] when a client interacts with PostgreSQL-enabled
   * Spanner databases.
   */
  PG_NUMERIC = 2,
  /**
   * PG_JSONB - PostgreSQL compatible JSONB type. This annotation needs to be applied to
   * [Type][google.spanner.v1.Type] instances having [JSON][google.spanner.v1.TypeCode.JSON]
   * type code to specify that values of this type should be treated as
   * PostgreSQL JSONB values. Currently this annotation is always needed for
   * [JSON][google.spanner.v1.TypeCode.JSON] when a client interacts with PostgreSQL-enabled
   * Spanner databases.
   */
  PG_JSONB = 3,
  /**
   * PG_OID - PostgreSQL compatible OID type. This annotation can be used by a client
   * interacting with PostgreSQL-enabled Spanner database to specify that a
   * value should be treated using the semantics of the OID type.
   */
  PG_OID = 4,
  UNRECOGNIZED = -1,
}

export function typeAnnotationCodeFromJSON(object: any): TypeAnnotationCode {
  switch (object) {
    case 0:
    case "TYPE_ANNOTATION_CODE_UNSPECIFIED":
      return TypeAnnotationCode.TYPE_ANNOTATION_CODE_UNSPECIFIED;
    case 2:
    case "PG_NUMERIC":
      return TypeAnnotationCode.PG_NUMERIC;
    case 3:
    case "PG_JSONB":
      return TypeAnnotationCode.PG_JSONB;
    case 4:
    case "PG_OID":
      return TypeAnnotationCode.PG_OID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TypeAnnotationCode.UNRECOGNIZED;
  }
}

export function typeAnnotationCodeToJSON(object: TypeAnnotationCode): string {
  switch (object) {
    case TypeAnnotationCode.TYPE_ANNOTATION_CODE_UNSPECIFIED:
      return "TYPE_ANNOTATION_CODE_UNSPECIFIED";
    case TypeAnnotationCode.PG_NUMERIC:
      return "PG_NUMERIC";
    case TypeAnnotationCode.PG_JSONB:
      return "PG_JSONB";
    case TypeAnnotationCode.PG_OID:
      return "PG_OID";
    case TypeAnnotationCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * `Type` indicates the type of a Cloud Spanner value, as might be stored in a
 * table cell or returned from an SQL query.
 */
export interface Type {
  /** Required. The [TypeCode][google.spanner.v1.TypeCode] for this type. */
  code: TypeCode;
  /**
   * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
   * is the type of the array elements.
   */
  arrayElementType:
    | Type
    | undefined;
  /**
   * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
   * provides type information for the struct's fields.
   */
  structType:
    | StructType
    | undefined;
  /**
   * The [TypeAnnotationCode][google.spanner.v1.TypeAnnotationCode] that disambiguates SQL type that Spanner will
   * use to represent values of this type during query processing. This is
   * necessary for some type codes because a single [TypeCode][google.spanner.v1.TypeCode] can be mapped
   * to different SQL types depending on the SQL dialect. [type_annotation][google.spanner.v1.Type.type_annotation]
   * typically is not needed to process the content of a value (it doesn't
   * affect serialization) and clients can ignore it on the read path.
   */
  typeAnnotation: TypeAnnotationCode;
  /**
   * If [code][google.spanner.v1.Type.code] ==
   * [PROTO][google.spanner.v1.TypeCode.PROTO] or
   * [code][google.spanner.v1.Type.code] ==
   * [ENUM][google.spanner.v1.TypeCode.ENUM], then `proto_type_fqn` is the fully
   * qualified name of the proto type representing the proto/enum definition.
   */
  protoTypeFqn: string;
}

/** `StructType` defines the fields of a [STRUCT][google.spanner.v1.TypeCode.STRUCT] type. */
export interface StructType {
  /**
   * The list of fields that make up this struct. Order is
   * significant, because values of this struct type are represented as
   * lists, where the order of field values matches the order of
   * fields in the [StructType][google.spanner.v1.StructType]. In turn, the order of fields
   * matches the order of columns in a read request, or the order of
   * fields in the `SELECT` clause of a query.
   */
  fields: StructType_Field[];
}

/** Message representing a single field of a struct. */
export interface StructType_Field {
  /**
   * The name of the field. For reads, this is the column name. For
   * SQL queries, it is the column alias (e.g., `"Word"` in the
   * query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
   * `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
   * columns might have an empty name (e.g., `"SELECT
   * UPPER(ColName)"`). Note that a query result can contain
   * multiple fields with the same name.
   */
  name: string;
  /** The type of the field. */
  type: Type | undefined;
}

function createBaseType(): Type {
  return { code: 0, arrayElementType: undefined, structType: undefined, typeAnnotation: 0, protoTypeFqn: "" };
}

export const Type: MessageFns<Type> = {
  encode(message: Type, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.arrayElementType !== undefined) {
      Type.encode(message.arrayElementType, writer.uint32(18).fork()).join();
    }
    if (message.structType !== undefined) {
      StructType.encode(message.structType, writer.uint32(26).fork()).join();
    }
    if (message.typeAnnotation !== 0) {
      writer.uint32(32).int32(message.typeAnnotation);
    }
    if (message.protoTypeFqn !== "") {
      writer.uint32(42).string(message.protoTypeFqn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.arrayElementType = Type.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.structType = StructType.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.typeAnnotation = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.protoTypeFqn = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type {
    return {
      code: isSet(object.code) ? typeCodeFromJSON(object.code) : 0,
      arrayElementType: isSet(object.arrayElementType) ? Type.fromJSON(object.arrayElementType) : undefined,
      structType: isSet(object.structType) ? StructType.fromJSON(object.structType) : undefined,
      typeAnnotation: isSet(object.typeAnnotation) ? typeAnnotationCodeFromJSON(object.typeAnnotation) : 0,
      protoTypeFqn: isSet(object.protoTypeFqn) ? globalThis.String(object.protoTypeFqn) : "",
    };
  },

  toJSON(message: Type): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = typeCodeToJSON(message.code);
    }
    if (message.arrayElementType !== undefined) {
      obj.arrayElementType = Type.toJSON(message.arrayElementType);
    }
    if (message.structType !== undefined) {
      obj.structType = StructType.toJSON(message.structType);
    }
    if (message.typeAnnotation !== 0) {
      obj.typeAnnotation = typeAnnotationCodeToJSON(message.typeAnnotation);
    }
    if (message.protoTypeFqn !== "") {
      obj.protoTypeFqn = message.protoTypeFqn;
    }
    return obj;
  },

  create(base?: DeepPartial<Type>): Type {
    return Type.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Type>): Type {
    const message = createBaseType();
    message.code = object.code ?? 0;
    message.arrayElementType = (object.arrayElementType !== undefined && object.arrayElementType !== null)
      ? Type.fromPartial(object.arrayElementType)
      : undefined;
    message.structType = (object.structType !== undefined && object.structType !== null)
      ? StructType.fromPartial(object.structType)
      : undefined;
    message.typeAnnotation = object.typeAnnotation ?? 0;
    message.protoTypeFqn = object.protoTypeFqn ?? "";
    return message;
  },
};

function createBaseStructType(): StructType {
  return { fields: [] };
}

export const StructType: MessageFns<StructType> = {
  encode(message: StructType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fields) {
      StructType_Field.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fields.push(StructType_Field.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructType {
    return {
      fields: globalThis.Array.isArray(object?.fields)
        ? object.fields.map((e: any) => StructType_Field.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StructType): unknown {
    const obj: any = {};
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => StructType_Field.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StructType>): StructType {
    return StructType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StructType>): StructType {
    const message = createBaseStructType();
    message.fields = object.fields?.map((e) => StructType_Field.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStructType_Field(): StructType_Field {
  return { name: "", type: undefined };
}

export const StructType_Field: MessageFns<StructType_Field> = {
  encode(message: StructType_Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== undefined) {
      Type.encode(message.type, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructType_Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructType_Field();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = Type.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructType_Field {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? Type.fromJSON(object.type) : undefined,
    };
  },

  toJSON(message: StructType_Field): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== undefined) {
      obj.type = Type.toJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<StructType_Field>): StructType_Field {
    return StructType_Field.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StructType_Field>): StructType_Field {
    const message = createBaseStructType_Field();
    message.name = object.name ?? "";
    message.type = (object.type !== undefined && object.type !== null) ? Type.fromPartial(object.type) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
