// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/v1/bloom_filter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.firestore.v1";

/**
 * A sequence of bits, encoded in a byte array.
 *
 * Each byte in the `bitmap` byte array stores 8 bits of the sequence. The only
 * exception is the last byte, which may store 8 _or fewer_ bits. The `padding`
 * defines the number of bits of the last byte to be ignored as "padding". The
 * values of these "padding" bits are unspecified and must be ignored.
 *
 * To retrieve the first bit, bit 0, calculate: `(bitmap[0] & 0x01) != 0`.
 * To retrieve the second bit, bit 1, calculate: `(bitmap[0] & 0x02) != 0`.
 * To retrieve the third bit, bit 2, calculate: `(bitmap[0] & 0x04) != 0`.
 * To retrieve the fourth bit, bit 3, calculate: `(bitmap[0] & 0x08) != 0`.
 * To retrieve bit n, calculate: `(bitmap[n / 8] & (0x01 << (n % 8))) != 0`.
 *
 * The "size" of a `BitSequence` (the number of bits it contains) is calculated
 * by this formula: `(bitmap.length * 8) - padding`.
 */
export interface BitSequence {
  /**
   * The bytes that encode the bit sequence.
   * May have a length of zero.
   */
  bitmap: Buffer;
  /**
   * The number of bits of the last byte in `bitmap` to ignore as "padding".
   * If the length of `bitmap` is zero, then this value must be `0`.
   * Otherwise, this value must be between 0 and 7, inclusive.
   */
  padding: number;
}

/**
 * A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter).
 *
 * The bloom filter hashes the entries with MD5 and treats the resulting 128-bit
 * hash as 2 distinct 64-bit hash values, interpreted as unsigned integers
 * using 2's complement encoding.
 *
 * These two hash values, named `h1` and `h2`, are then used to compute the
 * `hash_count` hash values using the formula, starting at `i=0`:
 *
 *     h(i) = h1 + (i * h2)
 *
 * These resulting values are then taken modulo the number of bits in the bloom
 * filter to get the bits of the bloom filter to test for the given entry.
 */
export interface BloomFilter {
  /** The bloom filter data. */
  bits:
    | BitSequence
    | undefined;
  /** The number of hashes used by the algorithm. */
  hashCount: number;
}

function createBaseBitSequence(): BitSequence {
  return { bitmap: Buffer.alloc(0), padding: 0 };
}

export const BitSequence: MessageFns<BitSequence> = {
  encode(message: BitSequence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bitmap.length !== 0) {
      writer.uint32(10).bytes(message.bitmap);
    }
    if (message.padding !== 0) {
      writer.uint32(16).int32(message.padding);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BitSequence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBitSequence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bitmap = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.padding = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BitSequence {
    return {
      bitmap: isSet(object.bitmap) ? Buffer.from(bytesFromBase64(object.bitmap)) : Buffer.alloc(0),
      padding: isSet(object.padding) ? globalThis.Number(object.padding) : 0,
    };
  },

  toJSON(message: BitSequence): unknown {
    const obj: any = {};
    if (message.bitmap.length !== 0) {
      obj.bitmap = base64FromBytes(message.bitmap);
    }
    if (message.padding !== 0) {
      obj.padding = Math.round(message.padding);
    }
    return obj;
  },

  create(base?: DeepPartial<BitSequence>): BitSequence {
    return BitSequence.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BitSequence>): BitSequence {
    const message = createBaseBitSequence();
    message.bitmap = object.bitmap ?? Buffer.alloc(0);
    message.padding = object.padding ?? 0;
    return message;
  },
};

function createBaseBloomFilter(): BloomFilter {
  return { bits: undefined, hashCount: 0 };
}

export const BloomFilter: MessageFns<BloomFilter> = {
  encode(message: BloomFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bits !== undefined) {
      BitSequence.encode(message.bits, writer.uint32(10).fork()).join();
    }
    if (message.hashCount !== 0) {
      writer.uint32(16).int32(message.hashCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BloomFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBloomFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bits = BitSequence.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hashCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BloomFilter {
    return {
      bits: isSet(object.bits) ? BitSequence.fromJSON(object.bits) : undefined,
      hashCount: isSet(object.hashCount) ? globalThis.Number(object.hashCount) : 0,
    };
  },

  toJSON(message: BloomFilter): unknown {
    const obj: any = {};
    if (message.bits !== undefined) {
      obj.bits = BitSequence.toJSON(message.bits);
    }
    if (message.hashCount !== 0) {
      obj.hashCount = Math.round(message.hashCount);
    }
    return obj;
  },

  create(base?: DeepPartial<BloomFilter>): BloomFilter {
    return BloomFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BloomFilter>): BloomFilter {
    const message = createBaseBloomFilter();
    message.bits = (object.bits !== undefined && object.bits !== null)
      ? BitSequence.fromPartial(object.bits)
      : undefined;
    message.hashCount = object.hashCount ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
