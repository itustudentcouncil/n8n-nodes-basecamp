// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/v1/query_profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../protobuf/duration.js";
import { Struct } from "../../protobuf/struct.js";

export const protobufPackage = "google.firestore.v1";

/** Explain options for the query. */
export interface ExplainOptions {
  /**
   * Optional. Whether to execute this query.
   *
   * When false (the default), the query will be planned, returning only
   * metrics from the planning stages.
   *
   * When true, the query will be planned and executed, returning the full
   * query results along with both planning and execution stage metrics.
   */
  analyze: boolean;
}

/** Explain metrics for the query. */
export interface ExplainMetrics {
  /** Planning phase information for the query. */
  planSummary:
    | PlanSummary
    | undefined;
  /**
   * Aggregated stats from the execution of the query. Only present when
   * [ExplainOptions.analyze][google.firestore.v1.ExplainOptions.analyze] is set
   * to true.
   */
  executionStats: ExecutionStats | undefined;
}

/** Planning phase information for the query. */
export interface PlanSummary {
  /**
   * The indexes selected for the query. For example:
   *  [
   *    {"query_scope": "Collection", "properties": "(foo ASC, __name__ ASC)"},
   *    {"query_scope": "Collection", "properties": "(bar ASC, __name__ ASC)"}
   *  ]
   */
  indexesUsed: { [key: string]: any }[];
}

/** Execution statistics for the query. */
export interface ExecutionStats {
  /**
   * Total number of results returned, including documents, projections,
   * aggregation results, keys.
   */
  resultsReturned: Long;
  /** Total time to execute the query in the backend. */
  executionDuration:
    | Duration
    | undefined;
  /** Total billable read operations. */
  readOperations: Long;
  /**
   * Debugging statistics from the execution of the query. Note that the
   * debugging stats are subject to change as Firestore evolves. It could
   * include:
   *  {
   *    "indexes_entries_scanned": "1000",
   *    "documents_scanned": "20",
   *    "billing_details" : {
   *       "documents_billable": "20",
   *       "index_entries_billable": "1000",
   *       "min_query_cost": "0"
   *    }
   *  }
   */
  debugStats: { [key: string]: any } | undefined;
}

function createBaseExplainOptions(): ExplainOptions {
  return { analyze: false };
}

export const ExplainOptions: MessageFns<ExplainOptions> = {
  encode(message: ExplainOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.analyze !== false) {
      writer.uint32(8).bool(message.analyze);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplainOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplainOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.analyze = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplainOptions {
    return { analyze: isSet(object.analyze) ? globalThis.Boolean(object.analyze) : false };
  },

  toJSON(message: ExplainOptions): unknown {
    const obj: any = {};
    if (message.analyze !== false) {
      obj.analyze = message.analyze;
    }
    return obj;
  },

  create(base?: DeepPartial<ExplainOptions>): ExplainOptions {
    return ExplainOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExplainOptions>): ExplainOptions {
    const message = createBaseExplainOptions();
    message.analyze = object.analyze ?? false;
    return message;
  },
};

function createBaseExplainMetrics(): ExplainMetrics {
  return { planSummary: undefined, executionStats: undefined };
}

export const ExplainMetrics: MessageFns<ExplainMetrics> = {
  encode(message: ExplainMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.planSummary !== undefined) {
      PlanSummary.encode(message.planSummary, writer.uint32(10).fork()).join();
    }
    if (message.executionStats !== undefined) {
      ExecutionStats.encode(message.executionStats, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplainMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplainMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.planSummary = PlanSummary.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.executionStats = ExecutionStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplainMetrics {
    return {
      planSummary: isSet(object.planSummary) ? PlanSummary.fromJSON(object.planSummary) : undefined,
      executionStats: isSet(object.executionStats) ? ExecutionStats.fromJSON(object.executionStats) : undefined,
    };
  },

  toJSON(message: ExplainMetrics): unknown {
    const obj: any = {};
    if (message.planSummary !== undefined) {
      obj.planSummary = PlanSummary.toJSON(message.planSummary);
    }
    if (message.executionStats !== undefined) {
      obj.executionStats = ExecutionStats.toJSON(message.executionStats);
    }
    return obj;
  },

  create(base?: DeepPartial<ExplainMetrics>): ExplainMetrics {
    return ExplainMetrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExplainMetrics>): ExplainMetrics {
    const message = createBaseExplainMetrics();
    message.planSummary = (object.planSummary !== undefined && object.planSummary !== null)
      ? PlanSummary.fromPartial(object.planSummary)
      : undefined;
    message.executionStats = (object.executionStats !== undefined && object.executionStats !== null)
      ? ExecutionStats.fromPartial(object.executionStats)
      : undefined;
    return message;
  },
};

function createBasePlanSummary(): PlanSummary {
  return { indexesUsed: [] };
}

export const PlanSummary: MessageFns<PlanSummary> = {
  encode(message: PlanSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.indexesUsed) {
      Struct.encode(Struct.wrap(v!), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexesUsed.push(Struct.unwrap(Struct.decode(reader, reader.uint32())));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlanSummary {
    return { indexesUsed: globalThis.Array.isArray(object?.indexesUsed) ? [...object.indexesUsed] : [] };
  },

  toJSON(message: PlanSummary): unknown {
    const obj: any = {};
    if (message.indexesUsed?.length) {
      obj.indexesUsed = message.indexesUsed;
    }
    return obj;
  },

  create(base?: DeepPartial<PlanSummary>): PlanSummary {
    return PlanSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlanSummary>): PlanSummary {
    const message = createBasePlanSummary();
    message.indexesUsed = object.indexesUsed?.map((e) => e) || [];
    return message;
  },
};

function createBaseExecutionStats(): ExecutionStats {
  return { resultsReturned: Long.ZERO, executionDuration: undefined, readOperations: Long.ZERO, debugStats: undefined };
}

export const ExecutionStats: MessageFns<ExecutionStats> = {
  encode(message: ExecutionStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.resultsReturned.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.resultsReturned.toString());
    }
    if (message.executionDuration !== undefined) {
      Duration.encode(message.executionDuration, writer.uint32(26).fork()).join();
    }
    if (!message.readOperations.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.readOperations.toString());
    }
    if (message.debugStats !== undefined) {
      Struct.encode(Struct.wrap(message.debugStats), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.resultsReturned = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.executionDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.readOperations = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.debugStats = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionStats {
    return {
      resultsReturned: isSet(object.resultsReturned) ? Long.fromValue(object.resultsReturned) : Long.ZERO,
      executionDuration: isSet(object.executionDuration) ? Duration.fromJSON(object.executionDuration) : undefined,
      readOperations: isSet(object.readOperations) ? Long.fromValue(object.readOperations) : Long.ZERO,
      debugStats: isObject(object.debugStats) ? object.debugStats : undefined,
    };
  },

  toJSON(message: ExecutionStats): unknown {
    const obj: any = {};
    if (!message.resultsReturned.equals(Long.ZERO)) {
      obj.resultsReturned = (message.resultsReturned || Long.ZERO).toString();
    }
    if (message.executionDuration !== undefined) {
      obj.executionDuration = Duration.toJSON(message.executionDuration);
    }
    if (!message.readOperations.equals(Long.ZERO)) {
      obj.readOperations = (message.readOperations || Long.ZERO).toString();
    }
    if (message.debugStats !== undefined) {
      obj.debugStats = message.debugStats;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionStats>): ExecutionStats {
    return ExecutionStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionStats>): ExecutionStats {
    const message = createBaseExecutionStats();
    message.resultsReturned = (object.resultsReturned !== undefined && object.resultsReturned !== null)
      ? Long.fromValue(object.resultsReturned)
      : Long.ZERO;
    message.executionDuration = (object.executionDuration !== undefined && object.executionDuration !== null)
      ? Duration.fromPartial(object.executionDuration)
      : undefined;
    message.readOperations = (object.readOperations !== undefined && object.readOperations !== null)
      ? Long.fromValue(object.readOperations)
      : Long.ZERO;
    message.debugStats = object.debugStats ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
