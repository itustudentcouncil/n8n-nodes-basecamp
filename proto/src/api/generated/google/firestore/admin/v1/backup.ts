// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/admin/v1/backup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.firestore.admin.v1";

/**
 * A Backup of a Cloud Firestore Database.
 *
 * The backup contains all documents and index configurations for the given
 * database at a specific point in time.
 */
export interface Backup {
  /**
   * Output only. The unique resource name of the Backup.
   *
   * Format is `projects/{project}/locations/{location}/backups/{backup}`.
   */
  name: string;
  /**
   * Output only. Name of the Firestore database that the backup is from.
   *
   * Format is `projects/{project}/databases/{database}`.
   */
  database: string;
  /**
   * Output only. The system-generated UUID4 for the Firestore database that the
   * backup is from.
   */
  databaseUid: string;
  /**
   * Output only. The backup contains an externally consistent copy of the
   * database at this time.
   */
  snapshotTime:
    | Date
    | undefined;
  /** Output only. The timestamp at which this backup expires. */
  expireTime:
    | Date
    | undefined;
  /**
   * Output only. Statistics about the backup.
   *
   * This data only becomes available after the backup is fully materialized to
   * secondary storage. This field will be empty till then.
   */
  stats:
    | Backup_Stats
    | undefined;
  /** Output only. The current state of the backup. */
  state: Backup_State;
}

/** Indicate the current state of the backup. */
export enum Backup_State {
  /** STATE_UNSPECIFIED - The state is unspecified. */
  STATE_UNSPECIFIED = 0,
  /**
   * CREATING - The pending backup is still being created. Operations on the
   * backup will be rejected in this state.
   */
  CREATING = 1,
  /** READY - The backup is complete and ready to use. */
  READY = 2,
  /** NOT_AVAILABLE - The backup is not available at this moment. */
  NOT_AVAILABLE = 3,
  UNRECOGNIZED = -1,
}

export function backup_StateFromJSON(object: any): Backup_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Backup_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Backup_State.CREATING;
    case 2:
    case "READY":
      return Backup_State.READY;
    case 3:
    case "NOT_AVAILABLE":
      return Backup_State.NOT_AVAILABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Backup_State.UNRECOGNIZED;
  }
}

export function backup_StateToJSON(object: Backup_State): string {
  switch (object) {
    case Backup_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Backup_State.CREATING:
      return "CREATING";
    case Backup_State.READY:
      return "READY";
    case Backup_State.NOT_AVAILABLE:
      return "NOT_AVAILABLE";
    case Backup_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Backup specific statistics. */
export interface Backup_Stats {
  /**
   * Output only. Summation of the size of all documents and index entries in
   * the backup, measured in bytes.
   */
  sizeBytes: Long;
  /** Output only. The total number of documents contained in the backup. */
  documentCount: Long;
  /** Output only. The total number of index entries contained in the backup. */
  indexCount: Long;
}

function createBaseBackup(): Backup {
  return {
    name: "",
    database: "",
    databaseUid: "",
    snapshotTime: undefined,
    expireTime: undefined,
    stats: undefined,
    state: 0,
  };
}

export const Backup: MessageFns<Backup> = {
  encode(message: Backup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.database !== "") {
      writer.uint32(18).string(message.database);
    }
    if (message.databaseUid !== "") {
      writer.uint32(58).string(message.databaseUid);
    }
    if (message.snapshotTime !== undefined) {
      Timestamp.encode(toTimestamp(message.snapshotTime), writer.uint32(26).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(34).fork()).join();
    }
    if (message.stats !== undefined) {
      Backup_Stats.encode(message.stats, writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Backup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.database = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.databaseUid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.snapshotTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.stats = Backup_Stats.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Backup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      databaseUid: isSet(object.databaseUid) ? globalThis.String(object.databaseUid) : "",
      snapshotTime: isSet(object.snapshotTime) ? fromJsonTimestamp(object.snapshotTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      stats: isSet(object.stats) ? Backup_Stats.fromJSON(object.stats) : undefined,
      state: isSet(object.state) ? backup_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Backup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.databaseUid !== "") {
      obj.databaseUid = message.databaseUid;
    }
    if (message.snapshotTime !== undefined) {
      obj.snapshotTime = message.snapshotTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.stats !== undefined) {
      obj.stats = Backup_Stats.toJSON(message.stats);
    }
    if (message.state !== 0) {
      obj.state = backup_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Backup>): Backup {
    return Backup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Backup>): Backup {
    const message = createBaseBackup();
    message.name = object.name ?? "";
    message.database = object.database ?? "";
    message.databaseUid = object.databaseUid ?? "";
    message.snapshotTime = object.snapshotTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? Backup_Stats.fromPartial(object.stats)
      : undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseBackup_Stats(): Backup_Stats {
  return { sizeBytes: Long.ZERO, documentCount: Long.ZERO, indexCount: Long.ZERO };
}

export const Backup_Stats: MessageFns<Backup_Stats> = {
  encode(message: Backup_Stats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.sizeBytes.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.sizeBytes.toString());
    }
    if (!message.documentCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.documentCount.toString());
    }
    if (!message.indexCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.indexCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Backup_Stats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackup_Stats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.documentCount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.indexCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Backup_Stats {
    return {
      sizeBytes: isSet(object.sizeBytes) ? Long.fromValue(object.sizeBytes) : Long.ZERO,
      documentCount: isSet(object.documentCount) ? Long.fromValue(object.documentCount) : Long.ZERO,
      indexCount: isSet(object.indexCount) ? Long.fromValue(object.indexCount) : Long.ZERO,
    };
  },

  toJSON(message: Backup_Stats): unknown {
    const obj: any = {};
    if (!message.sizeBytes.equals(Long.ZERO)) {
      obj.sizeBytes = (message.sizeBytes || Long.ZERO).toString();
    }
    if (!message.documentCount.equals(Long.ZERO)) {
      obj.documentCount = (message.documentCount || Long.ZERO).toString();
    }
    if (!message.indexCount.equals(Long.ZERO)) {
      obj.indexCount = (message.indexCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Backup_Stats>): Backup_Stats {
    return Backup_Stats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Backup_Stats>): Backup_Stats {
    const message = createBaseBackup_Stats();
    message.sizeBytes = (object.sizeBytes !== undefined && object.sizeBytes !== null)
      ? Long.fromValue(object.sizeBytes)
      : Long.ZERO;
    message.documentCount = (object.documentCount !== undefined && object.documentCount !== null)
      ? Long.fromValue(object.documentCount)
      : Long.ZERO;
    message.indexCount = (object.indexCount !== undefined && object.indexCount !== null)
      ? Long.fromValue(object.indexCount)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
