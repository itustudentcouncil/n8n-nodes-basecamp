// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/bundle/bundle.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../protobuf/timestamp.js";
import { Document } from "../v1/document.js";
import { StructuredQuery } from "../v1/query.js";

export const protobufPackage = "google.firestore.bundle";

/** Encodes a query saved in the bundle. */
export interface BundledQuery {
  /** The parent resource name. */
  parent: string;
  /** A structured query. */
  structuredQuery?: StructuredQuery | undefined;
  limitType: BundledQuery_LimitType;
}

/**
 * If the query is a limit query, should the limit be applied to the beginning or
 * the end of results.
 */
export enum BundledQuery_LimitType {
  FIRST = 0,
  LAST = 1,
  UNRECOGNIZED = -1,
}

export function bundledQuery_LimitTypeFromJSON(object: any): BundledQuery_LimitType {
  switch (object) {
    case 0:
    case "FIRST":
      return BundledQuery_LimitType.FIRST;
    case 1:
    case "LAST":
      return BundledQuery_LimitType.LAST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BundledQuery_LimitType.UNRECOGNIZED;
  }
}

export function bundledQuery_LimitTypeToJSON(object: BundledQuery_LimitType): string {
  switch (object) {
    case BundledQuery_LimitType.FIRST:
      return "FIRST";
    case BundledQuery_LimitType.LAST:
      return "LAST";
    case BundledQuery_LimitType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A Query associated with a name, created as part of the bundle file, and can be read
 * by client SDKs once the bundle containing them is loaded.
 */
export interface NamedQuery {
  /**
   * Name of the query, such that client can use the name to load this query
   * from bundle, and resume from when the query results are materialized
   * into this bundle.
   */
  name: string;
  /** The query saved in the bundle. */
  bundledQuery:
    | BundledQuery
    | undefined;
  /**
   * The read time of the query, when it is used to build the bundle. This is useful to
   * resume the query from the bundle, once it is loaded by client SDKs.
   */
  readTime: Date | undefined;
}

/** Metadata describing a Firestore document saved in the bundle. */
export interface BundledDocumentMetadata {
  /** The document key of a bundled document. */
  name: string;
  /** The snapshot version of the document data bundled. */
  readTime:
    | Date
    | undefined;
  /** Whether the document exists. */
  exists: boolean;
  /** The names of the queries in this bundle that this document matches to. */
  queries: string[];
}

/** Metadata describing the bundle file/stream. */
export interface BundleMetadata {
  /** The ID of the bundle. */
  id: string;
  /** Time at which the documents snapshot is taken for this bundle. */
  createTime:
    | Date
    | undefined;
  /** The schema version of the bundle. */
  version: number;
  /** The number of documents in the bundle. */
  totalDocuments: number;
  /** The size of the bundle in bytes, excluding this `BundleMetadata`. */
  totalBytes: Long;
}

/**
 * A Firestore bundle is a length-prefixed stream of JSON representations of
 * `BundleElement`.
 * Only one `BundleMetadata` is expected, and it should be the first element.
 * The named queries follow after `metadata`. Every `document_metadata` is
 * immediately followed by a `document`.
 */
export interface BundleElement {
  metadata?: BundleMetadata | undefined;
  namedQuery?: NamedQuery | undefined;
  documentMetadata?: BundledDocumentMetadata | undefined;
  document?: Document | undefined;
}

function createBaseBundledQuery(): BundledQuery {
  return { parent: "", structuredQuery: undefined, limitType: 0 };
}

export const BundledQuery: MessageFns<BundledQuery> = {
  encode(message: BundledQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.structuredQuery !== undefined) {
      StructuredQuery.encode(message.structuredQuery, writer.uint32(18).fork()).join();
    }
    if (message.limitType !== 0) {
      writer.uint32(24).int32(message.limitType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundledQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundledQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.structuredQuery = StructuredQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.limitType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundledQuery {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      structuredQuery: isSet(object.structuredQuery) ? StructuredQuery.fromJSON(object.structuredQuery) : undefined,
      limitType: isSet(object.limitType) ? bundledQuery_LimitTypeFromJSON(object.limitType) : 0,
    };
  },

  toJSON(message: BundledQuery): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.structuredQuery !== undefined) {
      obj.structuredQuery = StructuredQuery.toJSON(message.structuredQuery);
    }
    if (message.limitType !== 0) {
      obj.limitType = bundledQuery_LimitTypeToJSON(message.limitType);
    }
    return obj;
  },

  create(base?: DeepPartial<BundledQuery>): BundledQuery {
    return BundledQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundledQuery>): BundledQuery {
    const message = createBaseBundledQuery();
    message.parent = object.parent ?? "";
    message.structuredQuery = (object.structuredQuery !== undefined && object.structuredQuery !== null)
      ? StructuredQuery.fromPartial(object.structuredQuery)
      : undefined;
    message.limitType = object.limitType ?? 0;
    return message;
  },
};

function createBaseNamedQuery(): NamedQuery {
  return { name: "", bundledQuery: undefined, readTime: undefined };
}

export const NamedQuery: MessageFns<NamedQuery> = {
  encode(message: NamedQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.bundledQuery !== undefined) {
      BundledQuery.encode(message.bundledQuery, writer.uint32(18).fork()).join();
    }
    if (message.readTime !== undefined) {
      Timestamp.encode(toTimestamp(message.readTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NamedQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNamedQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bundledQuery = BundledQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.readTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NamedQuery {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bundledQuery: isSet(object.bundledQuery) ? BundledQuery.fromJSON(object.bundledQuery) : undefined,
      readTime: isSet(object.readTime) ? fromJsonTimestamp(object.readTime) : undefined,
    };
  },

  toJSON(message: NamedQuery): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bundledQuery !== undefined) {
      obj.bundledQuery = BundledQuery.toJSON(message.bundledQuery);
    }
    if (message.readTime !== undefined) {
      obj.readTime = message.readTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<NamedQuery>): NamedQuery {
    return NamedQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NamedQuery>): NamedQuery {
    const message = createBaseNamedQuery();
    message.name = object.name ?? "";
    message.bundledQuery = (object.bundledQuery !== undefined && object.bundledQuery !== null)
      ? BundledQuery.fromPartial(object.bundledQuery)
      : undefined;
    message.readTime = object.readTime ?? undefined;
    return message;
  },
};

function createBaseBundledDocumentMetadata(): BundledDocumentMetadata {
  return { name: "", readTime: undefined, exists: false, queries: [] };
}

export const BundledDocumentMetadata: MessageFns<BundledDocumentMetadata> = {
  encode(message: BundledDocumentMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readTime !== undefined) {
      Timestamp.encode(toTimestamp(message.readTime), writer.uint32(18).fork()).join();
    }
    if (message.exists !== false) {
      writer.uint32(24).bool(message.exists);
    }
    for (const v of message.queries) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundledDocumentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundledDocumentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.exists = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queries.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundledDocumentMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readTime: isSet(object.readTime) ? fromJsonTimestamp(object.readTime) : undefined,
      exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false,
      queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BundledDocumentMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readTime !== undefined) {
      obj.readTime = message.readTime.toISOString();
    }
    if (message.exists !== false) {
      obj.exists = message.exists;
    }
    if (message.queries?.length) {
      obj.queries = message.queries;
    }
    return obj;
  },

  create(base?: DeepPartial<BundledDocumentMetadata>): BundledDocumentMetadata {
    return BundledDocumentMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundledDocumentMetadata>): BundledDocumentMetadata {
    const message = createBaseBundledDocumentMetadata();
    message.name = object.name ?? "";
    message.readTime = object.readTime ?? undefined;
    message.exists = object.exists ?? false;
    message.queries = object.queries?.map((e) => e) || [];
    return message;
  },
};

function createBaseBundleMetadata(): BundleMetadata {
  return { id: "", createTime: undefined, version: 0, totalDocuments: 0, totalBytes: Long.UZERO };
}

export const BundleMetadata: MessageFns<BundleMetadata> = {
  encode(message: BundleMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.version !== 0) {
      writer.uint32(24).uint32(message.version);
    }
    if (message.totalDocuments !== 0) {
      writer.uint32(32).uint32(message.totalDocuments);
    }
    if (!message.totalBytes.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.totalBytes.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.version = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalDocuments = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.totalBytes = Long.fromString(reader.uint64().toString(), true);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      totalDocuments: isSet(object.totalDocuments) ? globalThis.Number(object.totalDocuments) : 0,
      totalBytes: isSet(object.totalBytes) ? Long.fromValue(object.totalBytes) : Long.UZERO,
    };
  },

  toJSON(message: BundleMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.totalDocuments !== 0) {
      obj.totalDocuments = Math.round(message.totalDocuments);
    }
    if (!message.totalBytes.equals(Long.UZERO)) {
      obj.totalBytes = (message.totalBytes || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<BundleMetadata>): BundleMetadata {
    return BundleMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleMetadata>): BundleMetadata {
    const message = createBaseBundleMetadata();
    message.id = object.id ?? "";
    message.createTime = object.createTime ?? undefined;
    message.version = object.version ?? 0;
    message.totalDocuments = object.totalDocuments ?? 0;
    message.totalBytes = (object.totalBytes !== undefined && object.totalBytes !== null)
      ? Long.fromValue(object.totalBytes)
      : Long.UZERO;
    return message;
  },
};

function createBaseBundleElement(): BundleElement {
  return { metadata: undefined, namedQuery: undefined, documentMetadata: undefined, document: undefined };
}

export const BundleElement: MessageFns<BundleElement> = {
  encode(message: BundleElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      BundleMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.namedQuery !== undefined) {
      NamedQuery.encode(message.namedQuery, writer.uint32(18).fork()).join();
    }
    if (message.documentMetadata !== undefined) {
      BundledDocumentMetadata.encode(message.documentMetadata, writer.uint32(26).fork()).join();
    }
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BundleElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = BundleMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.namedQuery = NamedQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.documentMetadata = BundledDocumentMetadata.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleElement {
    return {
      metadata: isSet(object.metadata) ? BundleMetadata.fromJSON(object.metadata) : undefined,
      namedQuery: isSet(object.namedQuery) ? NamedQuery.fromJSON(object.namedQuery) : undefined,
      documentMetadata: isSet(object.documentMetadata)
        ? BundledDocumentMetadata.fromJSON(object.documentMetadata)
        : undefined,
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
    };
  },

  toJSON(message: BundleElement): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = BundleMetadata.toJSON(message.metadata);
    }
    if (message.namedQuery !== undefined) {
      obj.namedQuery = NamedQuery.toJSON(message.namedQuery);
    }
    if (message.documentMetadata !== undefined) {
      obj.documentMetadata = BundledDocumentMetadata.toJSON(message.documentMetadata);
    }
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    return obj;
  },

  create(base?: DeepPartial<BundleElement>): BundleElement {
    return BundleElement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BundleElement>): BundleElement {
    const message = createBaseBundleElement();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? BundleMetadata.fromPartial(object.metadata)
      : undefined;
    message.namedQuery = (object.namedQuery !== undefined && object.namedQuery !== null)
      ? NamedQuery.fromPartial(object.namedQuery)
      : undefined;
    message.documentMetadata = (object.documentMetadata !== undefined && object.documentMetadata !== null)
      ? BundledDocumentMetadata.fromPartial(object.documentMetadata)
      : undefined;
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
