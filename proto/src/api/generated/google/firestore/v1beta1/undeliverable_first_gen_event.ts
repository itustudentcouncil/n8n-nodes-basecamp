// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/v1beta1/undeliverable_first_gen_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.firestore.v1beta1";

/**
 * A message signifying an event that cannot be delivered to Cloud Functions
 * from Firestore using [Cloud Firestore triggers 1st
 * gen](https://cloud.google.com/functions/docs/calling/cloud-firestore)
 */
export interface UndeliverableFirstGenEvent {
  /** Error message for events being undeliverable. */
  message: string;
  /** Reason for events being undeliverable. */
  reason: UndeliverableFirstGenEvent_Reason;
  /**
   * The resource name of the changed document, in the format of
   * `projects/{projectId}/databases/{databaseId}/documents/{document_path}`.
   */
  documentName: string;
  /** The type of the document change. */
  documentChangeType: UndeliverableFirstGenEvent_DocumentChangeType;
  /** The names of the functions that were supposed to be triggered. */
  functionName: string[];
  /** The commit time of triggered write operation. */
  triggeredTime: Date | undefined;
}

/** Reason for events being undeliverable. */
export enum UndeliverableFirstGenEvent_Reason {
  /** REASON_UNSPECIFIED - Unspecified. */
  REASON_UNSPECIFIED = 0,
  /** EXCEEDING_SIZE_LIMIT - Exceeding maximum event size limit */
  EXCEEDING_SIZE_LIMIT = 1,
  UNRECOGNIZED = -1,
}

export function undeliverableFirstGenEvent_ReasonFromJSON(object: any): UndeliverableFirstGenEvent_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return UndeliverableFirstGenEvent_Reason.REASON_UNSPECIFIED;
    case 1:
    case "EXCEEDING_SIZE_LIMIT":
      return UndeliverableFirstGenEvent_Reason.EXCEEDING_SIZE_LIMIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UndeliverableFirstGenEvent_Reason.UNRECOGNIZED;
  }
}

export function undeliverableFirstGenEvent_ReasonToJSON(object: UndeliverableFirstGenEvent_Reason): string {
  switch (object) {
    case UndeliverableFirstGenEvent_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case UndeliverableFirstGenEvent_Reason.EXCEEDING_SIZE_LIMIT:
      return "EXCEEDING_SIZE_LIMIT";
    case UndeliverableFirstGenEvent_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Document change type. */
export enum UndeliverableFirstGenEvent_DocumentChangeType {
  /** DOCUMENT_CHANGE_TYPE_UNSPECIFIED - Unspecified. */
  DOCUMENT_CHANGE_TYPE_UNSPECIFIED = 0,
  /** CREATE - Represent creation operation. */
  CREATE = 1,
  /** DELETE - Represent delete operation. */
  DELETE = 2,
  /** UPDATE - Represent update operation. */
  UPDATE = 3,
  UNRECOGNIZED = -1,
}

export function undeliverableFirstGenEvent_DocumentChangeTypeFromJSON(
  object: any,
): UndeliverableFirstGenEvent_DocumentChangeType {
  switch (object) {
    case 0:
    case "DOCUMENT_CHANGE_TYPE_UNSPECIFIED":
      return UndeliverableFirstGenEvent_DocumentChangeType.DOCUMENT_CHANGE_TYPE_UNSPECIFIED;
    case 1:
    case "CREATE":
      return UndeliverableFirstGenEvent_DocumentChangeType.CREATE;
    case 2:
    case "DELETE":
      return UndeliverableFirstGenEvent_DocumentChangeType.DELETE;
    case 3:
    case "UPDATE":
      return UndeliverableFirstGenEvent_DocumentChangeType.UPDATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UndeliverableFirstGenEvent_DocumentChangeType.UNRECOGNIZED;
  }
}

export function undeliverableFirstGenEvent_DocumentChangeTypeToJSON(
  object: UndeliverableFirstGenEvent_DocumentChangeType,
): string {
  switch (object) {
    case UndeliverableFirstGenEvent_DocumentChangeType.DOCUMENT_CHANGE_TYPE_UNSPECIFIED:
      return "DOCUMENT_CHANGE_TYPE_UNSPECIFIED";
    case UndeliverableFirstGenEvent_DocumentChangeType.CREATE:
      return "CREATE";
    case UndeliverableFirstGenEvent_DocumentChangeType.DELETE:
      return "DELETE";
    case UndeliverableFirstGenEvent_DocumentChangeType.UPDATE:
      return "UPDATE";
    case UndeliverableFirstGenEvent_DocumentChangeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseUndeliverableFirstGenEvent(): UndeliverableFirstGenEvent {
  return {
    message: "",
    reason: 0,
    documentName: "",
    documentChangeType: 0,
    functionName: [],
    triggeredTime: undefined,
  };
}

export const UndeliverableFirstGenEvent: MessageFns<UndeliverableFirstGenEvent> = {
  encode(message: UndeliverableFirstGenEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.documentName !== "") {
      writer.uint32(26).string(message.documentName);
    }
    if (message.documentChangeType !== 0) {
      writer.uint32(32).int32(message.documentChangeType);
    }
    for (const v of message.functionName) {
      writer.uint32(42).string(v!);
    }
    if (message.triggeredTime !== undefined) {
      Timestamp.encode(toTimestamp(message.triggeredTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeliverableFirstGenEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeliverableFirstGenEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.documentName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.documentChangeType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.functionName.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.triggeredTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeliverableFirstGenEvent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      reason: isSet(object.reason) ? undeliverableFirstGenEvent_ReasonFromJSON(object.reason) : 0,
      documentName: isSet(object.documentName) ? globalThis.String(object.documentName) : "",
      documentChangeType: isSet(object.documentChangeType)
        ? undeliverableFirstGenEvent_DocumentChangeTypeFromJSON(object.documentChangeType)
        : 0,
      functionName: globalThis.Array.isArray(object?.functionName)
        ? object.functionName.map((e: any) => globalThis.String(e))
        : [],
      triggeredTime: isSet(object.triggeredTime) ? fromJsonTimestamp(object.triggeredTime) : undefined,
    };
  },

  toJSON(message: UndeliverableFirstGenEvent): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.reason !== 0) {
      obj.reason = undeliverableFirstGenEvent_ReasonToJSON(message.reason);
    }
    if (message.documentName !== "") {
      obj.documentName = message.documentName;
    }
    if (message.documentChangeType !== 0) {
      obj.documentChangeType = undeliverableFirstGenEvent_DocumentChangeTypeToJSON(message.documentChangeType);
    }
    if (message.functionName?.length) {
      obj.functionName = message.functionName;
    }
    if (message.triggeredTime !== undefined) {
      obj.triggeredTime = message.triggeredTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UndeliverableFirstGenEvent>): UndeliverableFirstGenEvent {
    return UndeliverableFirstGenEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeliverableFirstGenEvent>): UndeliverableFirstGenEvent {
    const message = createBaseUndeliverableFirstGenEvent();
    message.message = object.message ?? "";
    message.reason = object.reason ?? 0;
    message.documentName = object.documentName ?? "";
    message.documentChangeType = object.documentChangeType ?? 0;
    message.functionName = object.functionName?.map((e) => e) || [];
    message.triggeredTime = object.triggeredTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
