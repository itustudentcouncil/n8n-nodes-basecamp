// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/activity/v2/query_drive_activity_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.drive.activity.v2";

/** The request message for querying Drive activity. */
export interface QueryDriveActivityRequest {
  /**
   * Return activities for this Drive item. The format is
   * `items/ITEM_ID`.
   */
  itemName?:
    | string
    | undefined;
  /**
   * Return activities for this Drive folder, plus all children and
   * descendants. The format is `items/ITEM_ID`.
   */
  ancestorName?:
    | string
    | undefined;
  /**
   * Details on how to consolidate related actions that make up the activity. If
   * not set, then related actions aren't consolidated.
   */
  consolidationStrategy:
    | ConsolidationStrategy
    | undefined;
  /**
   * The minimum number of activities desired in the response; the server
   * attempts to return at least this quantity. The server may also return fewer
   * activities if it has a partial response ready before the request times out.
   * If not set, a default value is used.
   */
  pageSize: number;
  /**
   * The token identifies which page of results to return. Set this to the
   * next_page_token value returned from a previous query to obtain the
   * following page of results. If not set, the first page of results is
   * returned.
   */
  pageToken: string;
  /**
   * The filtering for items returned from this query request. The format of the
   * filter string is a sequence of expressions, joined by an optional "AND",
   * where each expression is of the form "field operator value".
   *
   * Supported fields:
   *
   *   - `time`: Uses numerical operators on date values either in
   *     terms of milliseconds since Jan 1, 1970 or in <a
   *     href="https://www.rfc-editor.org/rfc/rfc3339" target="_blank">RFC
   *     3339</a> format. Examples:
   *       - `time > 1452409200000 AND time <= 1492812924310`
   *       - `time >= "2016-01-10T01:02:03-05:00"`
   *
   *   - `detail.action_detail_case`: Uses the "has" operator (:) and
   *     either a singular value or a list of allowed action types enclosed in
   *     parentheses, separated by a space. To exclude a result from the
   *     response, prepend a hyphen (`-`) to the beginning of the filter string.
   *     Examples:
   *       - `detail.action_detail_case:RENAME`
   *       - `detail.action_detail_case:(CREATE RESTORE)`
   *       - `-detail.action_detail_case:MOVE`
   */
  filter: string;
}

/**
 * How the individual activities are consolidated. If a set of activities is
 * related they can be consolidated into one combined activity, such as one
 * actor performing the same action on multiple targets, or multiple actors
 * performing the same action on a single target. The strategy defines the rules
 * for which activities are related.
 */
export interface ConsolidationStrategy {
  /** The individual activities are not consolidated. */
  none?:
    | ConsolidationStrategy_NoConsolidation
    | undefined;
  /** The individual activities are consolidated using the legacy strategy. */
  legacy?: ConsolidationStrategy_Legacy | undefined;
}

/** A strategy that does no consolidation of individual activities. */
export interface ConsolidationStrategy_NoConsolidation {
}

/**
 * A strategy that consolidates activities using the grouping rules from the
 * legacy V1 Activity API. Similar actions occurring within a window of time
 * can be grouped across multiple targets (such as moving a set of files at
 * once) or multiple actors (such as several users editing the same item).
 * Grouping rules for this strategy are specific to each type of action.
 */
export interface ConsolidationStrategy_Legacy {
}

function createBaseQueryDriveActivityRequest(): QueryDriveActivityRequest {
  return {
    itemName: undefined,
    ancestorName: undefined,
    consolidationStrategy: undefined,
    pageSize: 0,
    pageToken: "",
    filter: "",
  };
}

export const QueryDriveActivityRequest: MessageFns<QueryDriveActivityRequest> = {
  encode(message: QueryDriveActivityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.itemName !== undefined) {
      writer.uint32(10).string(message.itemName);
    }
    if (message.ancestorName !== undefined) {
      writer.uint32(18).string(message.ancestorName);
    }
    if (message.consolidationStrategy !== undefined) {
      ConsolidationStrategy.encode(message.consolidationStrategy, writer.uint32(42).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(48).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(58).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(66).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDriveActivityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDriveActivityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.itemName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ancestorName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.consolidationStrategy = ConsolidationStrategy.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDriveActivityRequest {
    return {
      itemName: isSet(object.itemName) ? globalThis.String(object.itemName) : undefined,
      ancestorName: isSet(object.ancestorName) ? globalThis.String(object.ancestorName) : undefined,
      consolidationStrategy: isSet(object.consolidationStrategy)
        ? ConsolidationStrategy.fromJSON(object.consolidationStrategy)
        : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: QueryDriveActivityRequest): unknown {
    const obj: any = {};
    if (message.itemName !== undefined) {
      obj.itemName = message.itemName;
    }
    if (message.ancestorName !== undefined) {
      obj.ancestorName = message.ancestorName;
    }
    if (message.consolidationStrategy !== undefined) {
      obj.consolidationStrategy = ConsolidationStrategy.toJSON(message.consolidationStrategy);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDriveActivityRequest>): QueryDriveActivityRequest {
    return QueryDriveActivityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDriveActivityRequest>): QueryDriveActivityRequest {
    const message = createBaseQueryDriveActivityRequest();
    message.itemName = object.itemName ?? undefined;
    message.ancestorName = object.ancestorName ?? undefined;
    message.consolidationStrategy =
      (object.consolidationStrategy !== undefined && object.consolidationStrategy !== null)
        ? ConsolidationStrategy.fromPartial(object.consolidationStrategy)
        : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseConsolidationStrategy(): ConsolidationStrategy {
  return { none: undefined, legacy: undefined };
}

export const ConsolidationStrategy: MessageFns<ConsolidationStrategy> = {
  encode(message: ConsolidationStrategy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.none !== undefined) {
      ConsolidationStrategy_NoConsolidation.encode(message.none, writer.uint32(10).fork()).join();
    }
    if (message.legacy !== undefined) {
      ConsolidationStrategy_Legacy.encode(message.legacy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsolidationStrategy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsolidationStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.none = ConsolidationStrategy_NoConsolidation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.legacy = ConsolidationStrategy_Legacy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsolidationStrategy {
    return {
      none: isSet(object.none) ? ConsolidationStrategy_NoConsolidation.fromJSON(object.none) : undefined,
      legacy: isSet(object.legacy) ? ConsolidationStrategy_Legacy.fromJSON(object.legacy) : undefined,
    };
  },

  toJSON(message: ConsolidationStrategy): unknown {
    const obj: any = {};
    if (message.none !== undefined) {
      obj.none = ConsolidationStrategy_NoConsolidation.toJSON(message.none);
    }
    if (message.legacy !== undefined) {
      obj.legacy = ConsolidationStrategy_Legacy.toJSON(message.legacy);
    }
    return obj;
  },

  create(base?: DeepPartial<ConsolidationStrategy>): ConsolidationStrategy {
    return ConsolidationStrategy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConsolidationStrategy>): ConsolidationStrategy {
    const message = createBaseConsolidationStrategy();
    message.none = (object.none !== undefined && object.none !== null)
      ? ConsolidationStrategy_NoConsolidation.fromPartial(object.none)
      : undefined;
    message.legacy = (object.legacy !== undefined && object.legacy !== null)
      ? ConsolidationStrategy_Legacy.fromPartial(object.legacy)
      : undefined;
    return message;
  },
};

function createBaseConsolidationStrategy_NoConsolidation(): ConsolidationStrategy_NoConsolidation {
  return {};
}

export const ConsolidationStrategy_NoConsolidation: MessageFns<ConsolidationStrategy_NoConsolidation> = {
  encode(_: ConsolidationStrategy_NoConsolidation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsolidationStrategy_NoConsolidation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsolidationStrategy_NoConsolidation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConsolidationStrategy_NoConsolidation {
    return {};
  },

  toJSON(_: ConsolidationStrategy_NoConsolidation): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ConsolidationStrategy_NoConsolidation>): ConsolidationStrategy_NoConsolidation {
    return ConsolidationStrategy_NoConsolidation.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ConsolidationStrategy_NoConsolidation>): ConsolidationStrategy_NoConsolidation {
    const message = createBaseConsolidationStrategy_NoConsolidation();
    return message;
  },
};

function createBaseConsolidationStrategy_Legacy(): ConsolidationStrategy_Legacy {
  return {};
}

export const ConsolidationStrategy_Legacy: MessageFns<ConsolidationStrategy_Legacy> = {
  encode(_: ConsolidationStrategy_Legacy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsolidationStrategy_Legacy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsolidationStrategy_Legacy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConsolidationStrategy_Legacy {
    return {};
  },

  toJSON(_: ConsolidationStrategy_Legacy): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ConsolidationStrategy_Legacy>): ConsolidationStrategy_Legacy {
    return ConsolidationStrategy_Legacy.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ConsolidationStrategy_Legacy>): ConsolidationStrategy_Legacy {
    const message = createBaseConsolidationStrategy_Legacy();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
