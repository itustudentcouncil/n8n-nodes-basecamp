// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/activity/v2/query_drive_activity_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Action, ActionDetail } from "./action.js";
import { Actor } from "./actor.js";
import { TimeRange } from "./common.js";
import { Target } from "./target.js";

export const protobufPackage = "google.apps.drive.activity.v2";

/** Response message for querying Drive activity. */
export interface QueryDriveActivityResponse {
  /** List of activity requested. */
  activities: DriveActivity[];
  /**
   * Token to retrieve the next page of results, or
   * empty if there are no more results in the list.
   */
  nextPageToken: string;
}

/**
 * A single Drive activity comprising one or more Actions by one or more
 * Actors on one or more Targets. Some Action groupings occur spontaneously,
 * such as moving an item into a shared folder triggering a permission change.
 * Other groupings of related Actions, such as multiple Actors editing one item
 * or moving multiple files into a new folder, are controlled by the selection
 * of a ConsolidationStrategy in the QueryDriveActivityRequest.
 */
export interface DriveActivity {
  /**
   * Key information about the primary action for this activity. This is either
   * representative, or the most important, of all actions in the activity,
   * according to the ConsolidationStrategy in the request.
   */
  primaryActionDetail:
    | ActionDetail
    | undefined;
  /** All actor(s) responsible for the activity. */
  actors: Actor[];
  /** Details on all actions in this activity. */
  actions: Action[];
  /**
   * All Google Drive objects this activity is about (e.g. file, folder, drive).
   * This represents the state of the target immediately after the actions
   * occurred.
   */
  targets: Target[];
  /** The activity occurred at this specific time. */
  timestamp?:
    | Date
    | undefined;
  /** The activity occurred over this time range. */
  timeRange?: TimeRange | undefined;
}

function createBaseQueryDriveActivityResponse(): QueryDriveActivityResponse {
  return { activities: [], nextPageToken: "" };
}

export const QueryDriveActivityResponse: MessageFns<QueryDriveActivityResponse> = {
  encode(message: QueryDriveActivityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.activities) {
      DriveActivity.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDriveActivityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDriveActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.activities.push(DriveActivity.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDriveActivityResponse {
    return {
      activities: globalThis.Array.isArray(object?.activities)
        ? object.activities.map((e: any) => DriveActivity.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: QueryDriveActivityResponse): unknown {
    const obj: any = {};
    if (message.activities?.length) {
      obj.activities = message.activities.map((e) => DriveActivity.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDriveActivityResponse>): QueryDriveActivityResponse {
    return QueryDriveActivityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDriveActivityResponse>): QueryDriveActivityResponse {
    const message = createBaseQueryDriveActivityResponse();
    message.activities = object.activities?.map((e) => DriveActivity.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDriveActivity(): DriveActivity {
  return {
    primaryActionDetail: undefined,
    actors: [],
    actions: [],
    targets: [],
    timestamp: undefined,
    timeRange: undefined,
  };
}

export const DriveActivity: MessageFns<DriveActivity> = {
  encode(message: DriveActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primaryActionDetail !== undefined) {
      ActionDetail.encode(message.primaryActionDetail, writer.uint32(18).fork()).join();
    }
    for (const v of message.actors) {
      Actor.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.actions) {
      Action.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.targets) {
      Target.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).join();
    }
    if (message.timeRange !== undefined) {
      TimeRange.encode(message.timeRange, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DriveActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDriveActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.primaryActionDetail = ActionDetail.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actors.push(Actor.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actions.push(Action.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.targets.push(Target.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.timeRange = TimeRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DriveActivity {
    return {
      primaryActionDetail: isSet(object.primaryActionDetail)
        ? ActionDetail.fromJSON(object.primaryActionDetail)
        : undefined,
      actors: globalThis.Array.isArray(object?.actors) ? object.actors.map((e: any) => Actor.fromJSON(e)) : [],
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Action.fromJSON(e)) : [],
      targets: globalThis.Array.isArray(object?.targets) ? object.targets.map((e: any) => Target.fromJSON(e)) : [],
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      timeRange: isSet(object.timeRange) ? TimeRange.fromJSON(object.timeRange) : undefined,
    };
  },

  toJSON(message: DriveActivity): unknown {
    const obj: any = {};
    if (message.primaryActionDetail !== undefined) {
      obj.primaryActionDetail = ActionDetail.toJSON(message.primaryActionDetail);
    }
    if (message.actors?.length) {
      obj.actors = message.actors.map((e) => Actor.toJSON(e));
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Action.toJSON(e));
    }
    if (message.targets?.length) {
      obj.targets = message.targets.map((e) => Target.toJSON(e));
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.timeRange !== undefined) {
      obj.timeRange = TimeRange.toJSON(message.timeRange);
    }
    return obj;
  },

  create(base?: DeepPartial<DriveActivity>): DriveActivity {
    return DriveActivity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DriveActivity>): DriveActivity {
    const message = createBaseDriveActivity();
    message.primaryActionDetail = (object.primaryActionDetail !== undefined && object.primaryActionDetail !== null)
      ? ActionDetail.fromPartial(object.primaryActionDetail)
      : undefined;
    message.actors = object.actors?.map((e) => Actor.fromPartial(e)) || [];
    message.actions = object.actions?.map((e) => Action.fromPartial(e)) || [];
    message.targets = object.targets?.map((e) => Target.fromPartial(e)) || [];
    message.timestamp = object.timestamp ?? undefined;
    message.timeRange = (object.timeRange !== undefined && object.timeRange !== null)
      ? TimeRange.fromPartial(object.timeRange)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
