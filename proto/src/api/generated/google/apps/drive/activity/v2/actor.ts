// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/activity/v2/actor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.drive.activity.v2";

/** The actor of a Drive activity. */
export interface Actor {
  /** An end user. */
  user?:
    | User
    | undefined;
  /** An anonymous user. */
  anonymous?:
    | AnonymousUser
    | undefined;
  /** An account acting on behalf of another. */
  impersonation?:
    | Impersonation
    | undefined;
  /** A non-user actor (i.e. system triggered). */
  system?:
    | SystemEvent
    | undefined;
  /** An administrator. */
  administrator?: Administrator | undefined;
}

/** Information about an end user. */
export interface User {
  /** A known user. */
  knownUser?:
    | User_KnownUser
    | undefined;
  /** A user whose account has since been deleted. */
  deletedUser?:
    | User_DeletedUser
    | undefined;
  /** A user about whom nothing is currently known. */
  unknownUser?: User_UnknownUser | undefined;
}

/** A known user. */
export interface User_KnownUser {
  /**
   * The identifier for this user that can be used with the People API to get
   * more information. The format is `people/ACCOUNT_ID`. See
   * https://developers.google.com/people/.
   */
  personName: string;
  /** True if this is the user making the request. */
  isCurrentUser: boolean;
}

/** A user whose account has since been deleted. */
export interface User_DeletedUser {
}

/** A user about whom nothing is currently known. */
export interface User_UnknownUser {
}

/**
 * Empty message representing an anonymous user or indicating the authenticated
 * user should be anonymized.
 */
export interface AnonymousUser {
}

/**
 * Information about an impersonation, where an admin acts on behalf of an end
 * user. Information about the acting admin is not currently available.
 */
export interface Impersonation {
  /** The impersonated user. */
  impersonatedUser: User | undefined;
}

/** Event triggered by system operations instead of end users. */
export interface SystemEvent {
  /** The type of the system event that may triggered activity. */
  type: SystemEvent_Type;
}

/** The types of system events that may trigger activity. */
export enum SystemEvent_Type {
  /** TYPE_UNSPECIFIED - The event type is unspecified. */
  TYPE_UNSPECIFIED = 0,
  /** USER_DELETION - The event is a consequence of a user account being deleted. */
  USER_DELETION = 1,
  /** TRASH_AUTO_PURGE - The event is due to the system automatically purging trash. */
  TRASH_AUTO_PURGE = 2,
  UNRECOGNIZED = -1,
}

export function systemEvent_TypeFromJSON(object: any): SystemEvent_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SystemEvent_Type.TYPE_UNSPECIFIED;
    case 1:
    case "USER_DELETION":
      return SystemEvent_Type.USER_DELETION;
    case 2:
    case "TRASH_AUTO_PURGE":
      return SystemEvent_Type.TRASH_AUTO_PURGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SystemEvent_Type.UNRECOGNIZED;
  }
}

export function systemEvent_TypeToJSON(object: SystemEvent_Type): string {
  switch (object) {
    case SystemEvent_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SystemEvent_Type.USER_DELETION:
      return "USER_DELETION";
    case SystemEvent_Type.TRASH_AUTO_PURGE:
      return "TRASH_AUTO_PURGE";
    case SystemEvent_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Empty message representing an administrator. */
export interface Administrator {
}

function createBaseActor(): Actor {
  return {
    user: undefined,
    anonymous: undefined,
    impersonation: undefined,
    system: undefined,
    administrator: undefined,
  };
}

export const Actor: MessageFns<Actor> = {
  encode(message: Actor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.anonymous !== undefined) {
      AnonymousUser.encode(message.anonymous, writer.uint32(18).fork()).join();
    }
    if (message.impersonation !== undefined) {
      Impersonation.encode(message.impersonation, writer.uint32(26).fork()).join();
    }
    if (message.system !== undefined) {
      SystemEvent.encode(message.system, writer.uint32(34).fork()).join();
    }
    if (message.administrator !== undefined) {
      Administrator.encode(message.administrator, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.anonymous = AnonymousUser.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.impersonation = Impersonation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.system = SystemEvent.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.administrator = Administrator.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actor {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      anonymous: isSet(object.anonymous) ? AnonymousUser.fromJSON(object.anonymous) : undefined,
      impersonation: isSet(object.impersonation) ? Impersonation.fromJSON(object.impersonation) : undefined,
      system: isSet(object.system) ? SystemEvent.fromJSON(object.system) : undefined,
      administrator: isSet(object.administrator) ? Administrator.fromJSON(object.administrator) : undefined,
    };
  },

  toJSON(message: Actor): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.anonymous !== undefined) {
      obj.anonymous = AnonymousUser.toJSON(message.anonymous);
    }
    if (message.impersonation !== undefined) {
      obj.impersonation = Impersonation.toJSON(message.impersonation);
    }
    if (message.system !== undefined) {
      obj.system = SystemEvent.toJSON(message.system);
    }
    if (message.administrator !== undefined) {
      obj.administrator = Administrator.toJSON(message.administrator);
    }
    return obj;
  },

  create(base?: DeepPartial<Actor>): Actor {
    return Actor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actor>): Actor {
    const message = createBaseActor();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.anonymous = (object.anonymous !== undefined && object.anonymous !== null)
      ? AnonymousUser.fromPartial(object.anonymous)
      : undefined;
    message.impersonation = (object.impersonation !== undefined && object.impersonation !== null)
      ? Impersonation.fromPartial(object.impersonation)
      : undefined;
    message.system = (object.system !== undefined && object.system !== null)
      ? SystemEvent.fromPartial(object.system)
      : undefined;
    message.administrator = (object.administrator !== undefined && object.administrator !== null)
      ? Administrator.fromPartial(object.administrator)
      : undefined;
    return message;
  },
};

function createBaseUser(): User {
  return { knownUser: undefined, deletedUser: undefined, unknownUser: undefined };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.knownUser !== undefined) {
      User_KnownUser.encode(message.knownUser, writer.uint32(18).fork()).join();
    }
    if (message.deletedUser !== undefined) {
      User_DeletedUser.encode(message.deletedUser, writer.uint32(26).fork()).join();
    }
    if (message.unknownUser !== undefined) {
      User_UnknownUser.encode(message.unknownUser, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.knownUser = User_KnownUser.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deletedUser = User_DeletedUser.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.unknownUser = User_UnknownUser.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      knownUser: isSet(object.knownUser) ? User_KnownUser.fromJSON(object.knownUser) : undefined,
      deletedUser: isSet(object.deletedUser) ? User_DeletedUser.fromJSON(object.deletedUser) : undefined,
      unknownUser: isSet(object.unknownUser) ? User_UnknownUser.fromJSON(object.unknownUser) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.knownUser !== undefined) {
      obj.knownUser = User_KnownUser.toJSON(message.knownUser);
    }
    if (message.deletedUser !== undefined) {
      obj.deletedUser = User_DeletedUser.toJSON(message.deletedUser);
    }
    if (message.unknownUser !== undefined) {
      obj.unknownUser = User_UnknownUser.toJSON(message.unknownUser);
    }
    return obj;
  },

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = createBaseUser();
    message.knownUser = (object.knownUser !== undefined && object.knownUser !== null)
      ? User_KnownUser.fromPartial(object.knownUser)
      : undefined;
    message.deletedUser = (object.deletedUser !== undefined && object.deletedUser !== null)
      ? User_DeletedUser.fromPartial(object.deletedUser)
      : undefined;
    message.unknownUser = (object.unknownUser !== undefined && object.unknownUser !== null)
      ? User_UnknownUser.fromPartial(object.unknownUser)
      : undefined;
    return message;
  },
};

function createBaseUser_KnownUser(): User_KnownUser {
  return { personName: "", isCurrentUser: false };
}

export const User_KnownUser: MessageFns<User_KnownUser> = {
  encode(message: User_KnownUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.personName !== "") {
      writer.uint32(10).string(message.personName);
    }
    if (message.isCurrentUser !== false) {
      writer.uint32(16).bool(message.isCurrentUser);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_KnownUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_KnownUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.personName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isCurrentUser = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User_KnownUser {
    return {
      personName: isSet(object.personName) ? globalThis.String(object.personName) : "",
      isCurrentUser: isSet(object.isCurrentUser) ? globalThis.Boolean(object.isCurrentUser) : false,
    };
  },

  toJSON(message: User_KnownUser): unknown {
    const obj: any = {};
    if (message.personName !== "") {
      obj.personName = message.personName;
    }
    if (message.isCurrentUser !== false) {
      obj.isCurrentUser = message.isCurrentUser;
    }
    return obj;
  },

  create(base?: DeepPartial<User_KnownUser>): User_KnownUser {
    return User_KnownUser.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User_KnownUser>): User_KnownUser {
    const message = createBaseUser_KnownUser();
    message.personName = object.personName ?? "";
    message.isCurrentUser = object.isCurrentUser ?? false;
    return message;
  },
};

function createBaseUser_DeletedUser(): User_DeletedUser {
  return {};
}

export const User_DeletedUser: MessageFns<User_DeletedUser> = {
  encode(_: User_DeletedUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_DeletedUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_DeletedUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): User_DeletedUser {
    return {};
  },

  toJSON(_: User_DeletedUser): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<User_DeletedUser>): User_DeletedUser {
    return User_DeletedUser.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<User_DeletedUser>): User_DeletedUser {
    const message = createBaseUser_DeletedUser();
    return message;
  },
};

function createBaseUser_UnknownUser(): User_UnknownUser {
  return {};
}

export const User_UnknownUser: MessageFns<User_UnknownUser> = {
  encode(_: User_UnknownUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User_UnknownUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser_UnknownUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): User_UnknownUser {
    return {};
  },

  toJSON(_: User_UnknownUser): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<User_UnknownUser>): User_UnknownUser {
    return User_UnknownUser.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<User_UnknownUser>): User_UnknownUser {
    const message = createBaseUser_UnknownUser();
    return message;
  },
};

function createBaseAnonymousUser(): AnonymousUser {
  return {};
}

export const AnonymousUser: MessageFns<AnonymousUser> = {
  encode(_: AnonymousUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnonymousUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnonymousUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AnonymousUser {
    return {};
  },

  toJSON(_: AnonymousUser): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AnonymousUser>): AnonymousUser {
    return AnonymousUser.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AnonymousUser>): AnonymousUser {
    const message = createBaseAnonymousUser();
    return message;
  },
};

function createBaseImpersonation(): Impersonation {
  return { impersonatedUser: undefined };
}

export const Impersonation: MessageFns<Impersonation> = {
  encode(message: Impersonation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.impersonatedUser !== undefined) {
      User.encode(message.impersonatedUser, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Impersonation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImpersonation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.impersonatedUser = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Impersonation {
    return { impersonatedUser: isSet(object.impersonatedUser) ? User.fromJSON(object.impersonatedUser) : undefined };
  },

  toJSON(message: Impersonation): unknown {
    const obj: any = {};
    if (message.impersonatedUser !== undefined) {
      obj.impersonatedUser = User.toJSON(message.impersonatedUser);
    }
    return obj;
  },

  create(base?: DeepPartial<Impersonation>): Impersonation {
    return Impersonation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Impersonation>): Impersonation {
    const message = createBaseImpersonation();
    message.impersonatedUser = (object.impersonatedUser !== undefined && object.impersonatedUser !== null)
      ? User.fromPartial(object.impersonatedUser)
      : undefined;
    return message;
  },
};

function createBaseSystemEvent(): SystemEvent {
  return { type: 0 };
}

export const SystemEvent: MessageFns<SystemEvent> = {
  encode(message: SystemEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemEvent {
    return { type: isSet(object.type) ? systemEvent_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: SystemEvent): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = systemEvent_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<SystemEvent>): SystemEvent {
    return SystemEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SystemEvent>): SystemEvent {
    const message = createBaseSystemEvent();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAdministrator(): Administrator {
  return {};
}

export const Administrator: MessageFns<Administrator> = {
  encode(_: Administrator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Administrator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdministrator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Administrator {
    return {};
  },

  toJSON(_: Administrator): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Administrator>): Administrator {
    return Administrator.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Administrator>): Administrator {
    const message = createBaseAdministrator();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
