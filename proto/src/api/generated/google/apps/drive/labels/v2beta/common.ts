// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2beta/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Color } from "../../../../type/color.js";

export const protobufPackage = "google.apps.drive.labels.v2beta";

/**
 * The lifecycle state of an object, such as label, field, or choice. The
 * lifecycle enforces the following transitions:
 *
 * * `UNPUBLISHED_DRAFT` (starting state)
 * * `UNPUBLISHED_DRAFT` -> `PUBLISHED`
 * * `UNPUBLISHED_DRAFT` -> (Deleted)
 * * `PUBLISHED` -> `DISABLED`
 * * `DISABLED` -> `PUBLISHED`
 * * `DISABLED` -> (Deleted)
 *
 * The published and disabled states have some distinct characteristics:
 *
 * * Published—Some kinds of changes might be made to an object in this state,
 *   in which case `has_unpublished_changes` will be true. Also, some kinds of
 *   changes are not permitted. Generally, any change that would invalidate or
 *   cause new restrictions on existing metadata related to the label are
 *   rejected.
 * * Disabled—When disabled, the configured `DisabledPolicy` takes effect.
 */
export interface Lifecycle {
  /** Output only. The state of the object associated with this lifecycle. */
  state: Lifecycle_State;
  /**
   * Output only. Whether the object associated with this lifecycle has
   * unpublished changes.
   */
  hasUnpublishedChanges: boolean;
  /**
   * The policy that governs how to show a disabled label, field, or selection
   * choice.
   */
  disabledPolicy: Lifecycle_DisabledPolicy | undefined;
}

/** The state of the object associated with this lifecycle. */
export enum Lifecycle_State {
  /** STATE_UNSPECIFIED - Unknown State. */
  STATE_UNSPECIFIED = 0,
  /**
   * UNPUBLISHED_DRAFT - The initial state of an object. Once published, the object can never
   * return to this state. Once an object is published, certain kinds of
   * changes are no longer permitted.
   */
  UNPUBLISHED_DRAFT = 1,
  /**
   * PUBLISHED - The object has been published. The object might have unpublished draft
   * changes as indicated by `has_unpublished_changes`.
   */
  PUBLISHED = 2,
  /**
   * DISABLED - The object has been published and has since been disabled. The object
   * might have unpublished draft changes as indicated by
   * `has_unpublished_changes`.
   */
  DISABLED = 3,
  /** DELETED - The object has been deleted. */
  DELETED = 4,
  UNRECOGNIZED = -1,
}

export function lifecycle_StateFromJSON(object: any): Lifecycle_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Lifecycle_State.STATE_UNSPECIFIED;
    case 1:
    case "UNPUBLISHED_DRAFT":
      return Lifecycle_State.UNPUBLISHED_DRAFT;
    case 2:
    case "PUBLISHED":
      return Lifecycle_State.PUBLISHED;
    case 3:
    case "DISABLED":
      return Lifecycle_State.DISABLED;
    case 4:
    case "DELETED":
      return Lifecycle_State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lifecycle_State.UNRECOGNIZED;
  }
}

export function lifecycle_StateToJSON(object: Lifecycle_State): string {
  switch (object) {
    case Lifecycle_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Lifecycle_State.UNPUBLISHED_DRAFT:
      return "UNPUBLISHED_DRAFT";
    case Lifecycle_State.PUBLISHED:
      return "PUBLISHED";
    case Lifecycle_State.DISABLED:
      return "DISABLED";
    case Lifecycle_State.DELETED:
      return "DELETED";
    case Lifecycle_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The policy that governs how to treat a disabled label, field, or selection
 * choice in different contexts.
 */
export interface Lifecycle_DisabledPolicy {
  /**
   * Whether to hide this disabled object in the search menu for Drive items.
   *
   * * When `false`, the object is generally shown in the UI as disabled but
   * it appears in the search results when searching for Drive items.
   * * When `true`, the object is generally hidden in the UI when
   *   searching for Drive items.
   */
  hideInSearch: boolean;
  /**
   * Whether to show this disabled object in the apply menu on Drive items.
   *
   * * When `true`, the object is generally shown in the UI as disabled
   *   and is unselectable.
   * * When `false`, the object is generally hidden in the UI.
   */
  showInApply: boolean;
}

/** Information about a user. */
export interface UserInfo {
  /**
   * The identifier for this user that can be used with the People API to get
   * more information.
   * For example, people/12345678.
   */
  person: string;
}

/** Badge status of the label. */
export interface BadgeConfig {
  /**
   * The color of the badge. When not specified, no badge is rendered.
   * The background, foreground, and solo (light and dark mode) colors set here
   * are changed in the Drive UI into the closest recommended supported color.
   */
  color:
    | Color
    | undefined;
  /**
   * Override the default global priority of this badge.
   * When set to 0, the default priority heuristic is used.
   */
  priorityOverride: Long;
}

/**
 * The color derived from BadgeConfig and changed to the closest recommended
 * supported color.
 */
export interface BadgeColors {
  /** Output only. Badge background that pairs with the foreground. */
  backgroundColor:
    | Color
    | undefined;
  /** Output only. Badge foreground that pairs with the background. */
  foregroundColor:
    | Color
    | undefined;
  /** Output only. Color that can be used for text without a background. */
  soloColor: Color | undefined;
}

/**
 * Contains information about whether a label component should be considered
 * locked.
 */
export interface LockStatus {
  /**
   * Output only. Indicates whether this label component is the (direct) target
   * of a LabelLock.  A label component can be implicitly locked even if it's
   * not the direct target of a LabelLock, in which case this field is set to
   * false.
   */
  locked: boolean;
}

function createBaseLifecycle(): Lifecycle {
  return { state: 0, hasUnpublishedChanges: false, disabledPolicy: undefined };
}

export const Lifecycle: MessageFns<Lifecycle> = {
  encode(message: Lifecycle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.hasUnpublishedChanges !== false) {
      writer.uint32(16).bool(message.hasUnpublishedChanges);
    }
    if (message.disabledPolicy !== undefined) {
      Lifecycle_DisabledPolicy.encode(message.disabledPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lifecycle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLifecycle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUnpublishedChanges = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.disabledPolicy = Lifecycle_DisabledPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lifecycle {
    return {
      state: isSet(object.state) ? lifecycle_StateFromJSON(object.state) : 0,
      hasUnpublishedChanges: isSet(object.hasUnpublishedChanges)
        ? globalThis.Boolean(object.hasUnpublishedChanges)
        : false,
      disabledPolicy: isSet(object.disabledPolicy)
        ? Lifecycle_DisabledPolicy.fromJSON(object.disabledPolicy)
        : undefined,
    };
  },

  toJSON(message: Lifecycle): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = lifecycle_StateToJSON(message.state);
    }
    if (message.hasUnpublishedChanges !== false) {
      obj.hasUnpublishedChanges = message.hasUnpublishedChanges;
    }
    if (message.disabledPolicy !== undefined) {
      obj.disabledPolicy = Lifecycle_DisabledPolicy.toJSON(message.disabledPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<Lifecycle>): Lifecycle {
    return Lifecycle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Lifecycle>): Lifecycle {
    const message = createBaseLifecycle();
    message.state = object.state ?? 0;
    message.hasUnpublishedChanges = object.hasUnpublishedChanges ?? false;
    message.disabledPolicy = (object.disabledPolicy !== undefined && object.disabledPolicy !== null)
      ? Lifecycle_DisabledPolicy.fromPartial(object.disabledPolicy)
      : undefined;
    return message;
  },
};

function createBaseLifecycle_DisabledPolicy(): Lifecycle_DisabledPolicy {
  return { hideInSearch: false, showInApply: false };
}

export const Lifecycle_DisabledPolicy: MessageFns<Lifecycle_DisabledPolicy> = {
  encode(message: Lifecycle_DisabledPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hideInSearch !== false) {
      writer.uint32(8).bool(message.hideInSearch);
    }
    if (message.showInApply !== false) {
      writer.uint32(16).bool(message.showInApply);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lifecycle_DisabledPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLifecycle_DisabledPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.hideInSearch = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showInApply = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lifecycle_DisabledPolicy {
    return {
      hideInSearch: isSet(object.hideInSearch) ? globalThis.Boolean(object.hideInSearch) : false,
      showInApply: isSet(object.showInApply) ? globalThis.Boolean(object.showInApply) : false,
    };
  },

  toJSON(message: Lifecycle_DisabledPolicy): unknown {
    const obj: any = {};
    if (message.hideInSearch !== false) {
      obj.hideInSearch = message.hideInSearch;
    }
    if (message.showInApply !== false) {
      obj.showInApply = message.showInApply;
    }
    return obj;
  },

  create(base?: DeepPartial<Lifecycle_DisabledPolicy>): Lifecycle_DisabledPolicy {
    return Lifecycle_DisabledPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Lifecycle_DisabledPolicy>): Lifecycle_DisabledPolicy {
    const message = createBaseLifecycle_DisabledPolicy();
    message.hideInSearch = object.hideInSearch ?? false;
    message.showInApply = object.showInApply ?? false;
    return message;
  },
};

function createBaseUserInfo(): UserInfo {
  return { person: "" };
}

export const UserInfo: MessageFns<UserInfo> = {
  encode(message: UserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.person !== "") {
      writer.uint32(10).string(message.person);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.person = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInfo {
    return { person: isSet(object.person) ? globalThis.String(object.person) : "" };
  },

  toJSON(message: UserInfo): unknown {
    const obj: any = {};
    if (message.person !== "") {
      obj.person = message.person;
    }
    return obj;
  },

  create(base?: DeepPartial<UserInfo>): UserInfo {
    return UserInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserInfo>): UserInfo {
    const message = createBaseUserInfo();
    message.person = object.person ?? "";
    return message;
  },
};

function createBaseBadgeConfig(): BadgeConfig {
  return { color: undefined, priorityOverride: Long.ZERO };
}

export const BadgeConfig: MessageFns<BadgeConfig> = {
  encode(message: BadgeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== undefined) {
      Color.encode(message.color, writer.uint32(10).fork()).join();
    }
    if (!message.priorityOverride.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.priorityOverride.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.color = Color.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.priorityOverride = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeConfig {
    return {
      color: isSet(object.color) ? Color.fromJSON(object.color) : undefined,
      priorityOverride: isSet(object.priorityOverride) ? Long.fromValue(object.priorityOverride) : Long.ZERO,
    };
  },

  toJSON(message: BadgeConfig): unknown {
    const obj: any = {};
    if (message.color !== undefined) {
      obj.color = Color.toJSON(message.color);
    }
    if (!message.priorityOverride.equals(Long.ZERO)) {
      obj.priorityOverride = (message.priorityOverride || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<BadgeConfig>): BadgeConfig {
    return BadgeConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BadgeConfig>): BadgeConfig {
    const message = createBaseBadgeConfig();
    message.color = (object.color !== undefined && object.color !== null) ? Color.fromPartial(object.color) : undefined;
    message.priorityOverride = (object.priorityOverride !== undefined && object.priorityOverride !== null)
      ? Long.fromValue(object.priorityOverride)
      : Long.ZERO;
    return message;
  },
};

function createBaseBadgeColors(): BadgeColors {
  return { backgroundColor: undefined, foregroundColor: undefined, soloColor: undefined };
}

export const BadgeColors: MessageFns<BadgeColors> = {
  encode(message: BadgeColors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backgroundColor !== undefined) {
      Color.encode(message.backgroundColor, writer.uint32(10).fork()).join();
    }
    if (message.foregroundColor !== undefined) {
      Color.encode(message.foregroundColor, writer.uint32(18).fork()).join();
    }
    if (message.soloColor !== undefined) {
      Color.encode(message.soloColor, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BadgeColors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadgeColors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backgroundColor = Color.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.foregroundColor = Color.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.soloColor = Color.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadgeColors {
    return {
      backgroundColor: isSet(object.backgroundColor) ? Color.fromJSON(object.backgroundColor) : undefined,
      foregroundColor: isSet(object.foregroundColor) ? Color.fromJSON(object.foregroundColor) : undefined,
      soloColor: isSet(object.soloColor) ? Color.fromJSON(object.soloColor) : undefined,
    };
  },

  toJSON(message: BadgeColors): unknown {
    const obj: any = {};
    if (message.backgroundColor !== undefined) {
      obj.backgroundColor = Color.toJSON(message.backgroundColor);
    }
    if (message.foregroundColor !== undefined) {
      obj.foregroundColor = Color.toJSON(message.foregroundColor);
    }
    if (message.soloColor !== undefined) {
      obj.soloColor = Color.toJSON(message.soloColor);
    }
    return obj;
  },

  create(base?: DeepPartial<BadgeColors>): BadgeColors {
    return BadgeColors.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BadgeColors>): BadgeColors {
    const message = createBaseBadgeColors();
    message.backgroundColor = (object.backgroundColor !== undefined && object.backgroundColor !== null)
      ? Color.fromPartial(object.backgroundColor)
      : undefined;
    message.foregroundColor = (object.foregroundColor !== undefined && object.foregroundColor !== null)
      ? Color.fromPartial(object.foregroundColor)
      : undefined;
    message.soloColor = (object.soloColor !== undefined && object.soloColor !== null)
      ? Color.fromPartial(object.soloColor)
      : undefined;
    return message;
  },
};

function createBaseLockStatus(): LockStatus {
  return { locked: false };
}

export const LockStatus: MessageFns<LockStatus> = {
  encode(message: LockStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locked !== false) {
      writer.uint32(8).bool(message.locked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LockStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.locked = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockStatus {
    return { locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false };
  },

  toJSON(message: LockStatus): unknown {
    const obj: any = {};
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    return obj;
  },

  create(base?: DeepPartial<LockStatus>): LockStatus {
    return LockStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LockStatus>): LockStatus {
    const message = createBaseLockStatus();
    message.locked = object.locked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
