// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2beta/label_permission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.drive.labels.v2beta";

/**
 * The permission that applies to a principal (user, group, audience) on a
 * label.
 */
export interface LabelPermission {
  /** Person resource name. */
  person?:
    | string
    | undefined;
  /** Group resource name. */
  group?:
    | string
    | undefined;
  /**
   * Audience to grant a role to. The magic value of `audiences/default` may
   * be used to apply the role to the default audience in the context of the
   * organization that owns the Label.
   */
  audience?:
    | string
    | undefined;
  /** Resource name of this permission. */
  name: string;
  /**
   * Specifies the email address for a user or group pricinpal. Not populated
   * for audience principals. User and Group permissions may only be inserted
   * using email address. On update requests, if email address is specified,
   * no principal should be specified.
   */
  email: string;
  /** The role the principal should have. */
  role: LabelPermission_LabelRole;
}

/** Roles are concentric with subsequent role. */
export enum LabelPermission_LabelRole {
  /** LABEL_ROLE_UNSPECIFIED - Unknown role. */
  LABEL_ROLE_UNSPECIFIED = 0,
  /**
   * READER - A reader can read the label and associated metadata applied to Drive
   * items.
   */
  READER = 1,
  /**
   * APPLIER - An applier can write associated metadata on Drive items in which they
   * also have write access to. Implies `READER`.
   */
  APPLIER = 2,
  /**
   * ORGANIZER - An organizer can pin this label in shared drives they manage
   * and add new appliers to the label.
   */
  ORGANIZER = 3,
  /**
   * EDITOR - Editors can make any update including deleting the label which
   * also deletes the associated Drive item metadata. Implies `APPLIER`.
   */
  EDITOR = 4,
  UNRECOGNIZED = -1,
}

export function labelPermission_LabelRoleFromJSON(object: any): LabelPermission_LabelRole {
  switch (object) {
    case 0:
    case "LABEL_ROLE_UNSPECIFIED":
      return LabelPermission_LabelRole.LABEL_ROLE_UNSPECIFIED;
    case 1:
    case "READER":
      return LabelPermission_LabelRole.READER;
    case 2:
    case "APPLIER":
      return LabelPermission_LabelRole.APPLIER;
    case 3:
    case "ORGANIZER":
      return LabelPermission_LabelRole.ORGANIZER;
    case 4:
    case "EDITOR":
      return LabelPermission_LabelRole.EDITOR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelPermission_LabelRole.UNRECOGNIZED;
  }
}

export function labelPermission_LabelRoleToJSON(object: LabelPermission_LabelRole): string {
  switch (object) {
    case LabelPermission_LabelRole.LABEL_ROLE_UNSPECIFIED:
      return "LABEL_ROLE_UNSPECIFIED";
    case LabelPermission_LabelRole.READER:
      return "READER";
    case LabelPermission_LabelRole.APPLIER:
      return "APPLIER";
    case LabelPermission_LabelRole.ORGANIZER:
      return "ORGANIZER";
    case LabelPermission_LabelRole.EDITOR:
      return "EDITOR";
    case LabelPermission_LabelRole.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseLabelPermission(): LabelPermission {
  return { person: undefined, group: undefined, audience: undefined, name: "", email: "", role: 0 };
}

export const LabelPermission: MessageFns<LabelPermission> = {
  encode(message: LabelPermission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.person !== undefined) {
      writer.uint32(26).string(message.person);
    }
    if (message.group !== undefined) {
      writer.uint32(34).string(message.group);
    }
    if (message.audience !== undefined) {
      writer.uint32(42).string(message.audience);
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== 0) {
      writer.uint32(48).int32(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelPermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.person = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.group = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.audience = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelPermission {
    return {
      person: isSet(object.person) ? globalThis.String(object.person) : undefined,
      group: isSet(object.group) ? globalThis.String(object.group) : undefined,
      audience: isSet(object.audience) ? globalThis.String(object.audience) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? labelPermission_LabelRoleFromJSON(object.role) : 0,
    };
  },

  toJSON(message: LabelPermission): unknown {
    const obj: any = {};
    if (message.person !== undefined) {
      obj.person = message.person;
    }
    if (message.group !== undefined) {
      obj.group = message.group;
    }
    if (message.audience !== undefined) {
      obj.audience = message.audience;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== 0) {
      obj.role = labelPermission_LabelRoleToJSON(message.role);
    }
    return obj;
  },

  create(base?: DeepPartial<LabelPermission>): LabelPermission {
    return LabelPermission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelPermission>): LabelPermission {
    const message = createBaseLabelPermission();
    message.person = object.person ?? undefined;
    message.group = object.group ?? undefined;
    message.audience = object.audience ?? undefined;
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
