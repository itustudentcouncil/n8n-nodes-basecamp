// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/script/type/addon_widget_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.script.type";

/** The widget subset used by an add-on. */
export interface AddOnWidgetSet {
  /** The list of widgets used in an add-on. */
  usedWidgets: AddOnWidgetSet_WidgetType[];
}

/** The Widget type. DEFAULT is the basic widget set. */
export enum AddOnWidgetSet_WidgetType {
  /** WIDGET_TYPE_UNSPECIFIED - The default widget set. */
  WIDGET_TYPE_UNSPECIFIED = 0,
  /** DATE_PICKER - The date picker. */
  DATE_PICKER = 1,
  /** STYLED_BUTTONS - Styled buttons include filled buttons and disabled buttons. */
  STYLED_BUTTONS = 2,
  /** PERSISTENT_FORMS - Persistent forms allow persisting form values during actions. */
  PERSISTENT_FORMS = 3,
  /** FIXED_FOOTER - Fixed footer in card. */
  FIXED_FOOTER = 4,
  /** UPDATE_SUBJECT_AND_RECIPIENTS - Update the subject and recipients of a draft. */
  UPDATE_SUBJECT_AND_RECIPIENTS = 5,
  /** GRID_WIDGET - The grid widget. */
  GRID_WIDGET = 6,
  /** ADDON_COMPOSE_UI_ACTION - A Gmail add-on action that applies to the addon compose UI. */
  ADDON_COMPOSE_UI_ACTION = 7,
  UNRECOGNIZED = -1,
}

export function addOnWidgetSet_WidgetTypeFromJSON(object: any): AddOnWidgetSet_WidgetType {
  switch (object) {
    case 0:
    case "WIDGET_TYPE_UNSPECIFIED":
      return AddOnWidgetSet_WidgetType.WIDGET_TYPE_UNSPECIFIED;
    case 1:
    case "DATE_PICKER":
      return AddOnWidgetSet_WidgetType.DATE_PICKER;
    case 2:
    case "STYLED_BUTTONS":
      return AddOnWidgetSet_WidgetType.STYLED_BUTTONS;
    case 3:
    case "PERSISTENT_FORMS":
      return AddOnWidgetSet_WidgetType.PERSISTENT_FORMS;
    case 4:
    case "FIXED_FOOTER":
      return AddOnWidgetSet_WidgetType.FIXED_FOOTER;
    case 5:
    case "UPDATE_SUBJECT_AND_RECIPIENTS":
      return AddOnWidgetSet_WidgetType.UPDATE_SUBJECT_AND_RECIPIENTS;
    case 6:
    case "GRID_WIDGET":
      return AddOnWidgetSet_WidgetType.GRID_WIDGET;
    case 7:
    case "ADDON_COMPOSE_UI_ACTION":
      return AddOnWidgetSet_WidgetType.ADDON_COMPOSE_UI_ACTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AddOnWidgetSet_WidgetType.UNRECOGNIZED;
  }
}

export function addOnWidgetSet_WidgetTypeToJSON(object: AddOnWidgetSet_WidgetType): string {
  switch (object) {
    case AddOnWidgetSet_WidgetType.WIDGET_TYPE_UNSPECIFIED:
      return "WIDGET_TYPE_UNSPECIFIED";
    case AddOnWidgetSet_WidgetType.DATE_PICKER:
      return "DATE_PICKER";
    case AddOnWidgetSet_WidgetType.STYLED_BUTTONS:
      return "STYLED_BUTTONS";
    case AddOnWidgetSet_WidgetType.PERSISTENT_FORMS:
      return "PERSISTENT_FORMS";
    case AddOnWidgetSet_WidgetType.FIXED_FOOTER:
      return "FIXED_FOOTER";
    case AddOnWidgetSet_WidgetType.UPDATE_SUBJECT_AND_RECIPIENTS:
      return "UPDATE_SUBJECT_AND_RECIPIENTS";
    case AddOnWidgetSet_WidgetType.GRID_WIDGET:
      return "GRID_WIDGET";
    case AddOnWidgetSet_WidgetType.ADDON_COMPOSE_UI_ACTION:
      return "ADDON_COMPOSE_UI_ACTION";
    case AddOnWidgetSet_WidgetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAddOnWidgetSet(): AddOnWidgetSet {
  return { usedWidgets: [] };
}

export const AddOnWidgetSet: MessageFns<AddOnWidgetSet> = {
  encode(message: AddOnWidgetSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.usedWidgets) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOnWidgetSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOnWidgetSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.usedWidgets.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.usedWidgets.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOnWidgetSet {
    return {
      usedWidgets: globalThis.Array.isArray(object?.usedWidgets)
        ? object.usedWidgets.map((e: any) => addOnWidgetSet_WidgetTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: AddOnWidgetSet): unknown {
    const obj: any = {};
    if (message.usedWidgets?.length) {
      obj.usedWidgets = message.usedWidgets.map((e) => addOnWidgetSet_WidgetTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AddOnWidgetSet>): AddOnWidgetSet {
    return AddOnWidgetSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOnWidgetSet>): AddOnWidgetSet {
    const message = createBaseAddOnWidgetSet();
    message.usedWidgets = object.usedWidgets?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
