// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/events/subscriptions/v1/subscriptions_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Subscription } from "./subscription_resource.js";

export const protobufPackage = "google.apps.events.subscriptions.v1";

/**
 * The request message for
 * [SubscriptionsService.CreateSubscription][google.apps.events.subscriptions.v1.SubscriptionsService.CreateSubscription].
 */
export interface CreateSubscriptionRequest {
  /** Required. The subscription resource to create. */
  subscription:
    | Subscription
    | undefined;
  /**
   * Optional. If set to `true`, validates and previews the request, but doesn't
   * create the subscription.
   */
  validateOnly: boolean;
}

/**
 * The request message for
 * [SubscriptionsService.DeleteSubscription][google.apps.events.subscriptions.v1.SubscriptionsService.DeleteSubscription].
 */
export interface DeleteSubscriptionRequest {
  /**
   * Required. Resource name of the subscription to delete.
   *
   * Format: `subscriptions/{subscription}`
   */
  name: string;
  /**
   * Optional. If set to `true`, validates and previews the request, but doesn't
   * delete the subscription.
   */
  validateOnly: boolean;
  /**
   * Optional. If set to `true` and the subscription isn't found, the request
   * succeeds but doesn't delete the subscription.
   */
  allowMissing: boolean;
  /**
   * Optional. Etag of the subscription.
   *
   * If present, it must match with the server's etag. Otherwise, request
   * fails with the status `ABORTED`.
   */
  etag: string;
}

/**
 * The request message for
 * [SubscriptionsService.GetSubscription][google.apps.events.subscriptions.v1.SubscriptionsService.GetSubscription].
 */
export interface GetSubscriptionRequest {
  /**
   * Required. Resource name of the subscription.
   *
   * Format: `subscriptions/{subscription}`
   */
  name: string;
}

/**
 * The request message for
 * [SubscriptionsService.UpdateSubscription][google.apps.events.subscriptions.v1.SubscriptionsService.UpdateSubscription].
 */
export interface UpdateSubscriptionRequest {
  /**
   * Required. The subscription to update.
   *
   * The subscription's `name` field is used to identify the subscription to
   * update.
   */
  subscription:
    | Subscription
    | undefined;
  /**
   * Optional. Required. The field to update.
   *
   * You can update one of the following fields in a subscription:
   *
   * * [`expire_time`][google.apps.events.subscriptions.v1.Subscription.expire_time]: The timestamp when the
   *   subscription expires.
   * * [`ttl`][google.apps.events.subscriptions.v1.Subscription.ttl]: The
   * time-to-live (TTL) or duration of the
   *   subscription.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. If set to `true`, validates and previews the request, but doesn't
   * update the subscription.
   */
  validateOnly: boolean;
}

/**
 * The request message for
 * [SubscriptionsService.ReactivateSubscription][google.apps.events.subscriptions.v1.SubscriptionsService.ReactivateSubscription].
 */
export interface ReactivateSubscriptionRequest {
  /**
   * Required. Resource name of the subscription.
   *
   * Format: `subscriptions/{subscription}`
   */
  name: string;
}

/**
 * The request message for
 * [SubscriptionsService.ListSubscriptions][google.apps.events.subscriptions.v1.SubscriptionsService.ListSubscriptions].
 */
export interface ListSubscriptionsRequest {
  /**
   * Optional. The maximum number of subscriptions to return. The service might
   * return fewer than this value.
   *
   * If unspecified or set to `0`, up to 50 subscriptions are returned.
   *
   * The maximum value is 100. If you specify a value more than 100, the system
   * only returns 100 subscriptions.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous list subscriptions call.
   * Provide this parameter to retrieve the subsequent page.
   *
   * When paginating, the filter value should match the call that provided the
   * page token. Passing a different value might lead to unexpected results.
   */
  pageToken: string;
  /**
   * Required. A query filter.
   *
   * You can filter subscriptions by event type (`event_types`)
   * and target resource (`target_resource`).
   *
   * You must specify at least one event type in your query. To filter for
   * multiple event types, use the `OR` operator.
   *
   * To filter by both event type and target resource, use the `AND` operator
   * and specify the full resource name, such as
   * `//chat.googleapis.com/spaces/{space}`.
   *
   * For example, the following queries are valid:
   *
   * ```
   * event_types:"google.workspace.chat.membership.v1.updated" OR
   *   event_types:"google.workspace.chat.message.v1.created"
   *
   * event_types:"google.workspace.chat.message.v1.created" AND
   *   target_resource="//chat.googleapis.com/spaces/{space}"
   *
   * ( event_types:"google.workspace.chat.membership.v1.updated" OR
   *   event_types:"google.workspace.chat.message.v1.created" ) AND
   *   target_resource="//chat.googleapis.com/spaces/{space}"
   * ```
   *
   * The server rejects invalid queries with an `INVALID_ARGUMENT`
   * error.
   */
  filter: string;
}

/**
 * The response message for
 * [SubscriptionsService.ListSubscriptions][google.apps.events.subscriptions.v1.SubscriptionsService.ListSubscriptions].
 */
export interface ListSubscriptionsResponse {
  /** List of subscriptions. */
  subscriptions: Subscription[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Metadata for UpdateSubscription LRO. */
export interface UpdateSubscriptionMetadata {
}

/** Metadata for CreateSubscription LRO. */
export interface CreateSubscriptionMetadata {
}

/** Metadata for DeleteSubscription LRO. */
export interface DeleteSubscriptionMetadata {
}

/** Metadata for ReactivateSubscription LRO. */
export interface ReactivateSubscriptionMetadata {
}

function createBaseCreateSubscriptionRequest(): CreateSubscriptionRequest {
  return { subscription: undefined, validateOnly: false };
}

export const CreateSubscriptionRequest: MessageFns<CreateSubscriptionRequest> = {
  encode(message: CreateSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subscription !== undefined) {
      Subscription.encode(message.subscription, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subscription = Subscription.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSubscriptionRequest {
    return {
      subscription: isSet(object.subscription) ? Subscription.fromJSON(object.subscription) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.subscription !== undefined) {
      obj.subscription = Subscription.toJSON(message.subscription);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSubscriptionRequest>): CreateSubscriptionRequest {
    return CreateSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSubscriptionRequest>): CreateSubscriptionRequest {
    const message = createBaseCreateSubscriptionRequest();
    message.subscription = (object.subscription !== undefined && object.subscription !== null)
      ? Subscription.fromPartial(object.subscription)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteSubscriptionRequest(): DeleteSubscriptionRequest {
  return { name: "", validateOnly: false, allowMissing: false, etag: "" };
}

export const DeleteSubscriptionRequest: MessageFns<DeleteSubscriptionRequest> = {
  encode(message: DeleteSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSubscriptionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSubscriptionRequest>): DeleteSubscriptionRequest {
    return DeleteSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSubscriptionRequest>): DeleteSubscriptionRequest {
    const message = createBaseDeleteSubscriptionRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseGetSubscriptionRequest(): GetSubscriptionRequest {
  return { name: "" };
}

export const GetSubscriptionRequest: MessageFns<GetSubscriptionRequest> = {
  encode(message: GetSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSubscriptionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSubscriptionRequest>): GetSubscriptionRequest {
    return GetSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSubscriptionRequest>): GetSubscriptionRequest {
    const message = createBaseGetSubscriptionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSubscriptionRequest(): UpdateSubscriptionRequest {
  return { subscription: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateSubscriptionRequest: MessageFns<UpdateSubscriptionRequest> = {
  encode(message: UpdateSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subscription !== undefined) {
      Subscription.encode(message.subscription, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subscription = Subscription.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSubscriptionRequest {
    return {
      subscription: isSet(object.subscription) ? Subscription.fromJSON(object.subscription) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.subscription !== undefined) {
      obj.subscription = Subscription.toJSON(message.subscription);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest {
    return UpdateSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest {
    const message = createBaseUpdateSubscriptionRequest();
    message.subscription = (object.subscription !== undefined && object.subscription !== null)
      ? Subscription.fromPartial(object.subscription)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseReactivateSubscriptionRequest(): ReactivateSubscriptionRequest {
  return { name: "" };
}

export const ReactivateSubscriptionRequest: MessageFns<ReactivateSubscriptionRequest> = {
  encode(message: ReactivateSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReactivateSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateSubscriptionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ReactivateSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ReactivateSubscriptionRequest>): ReactivateSubscriptionRequest {
    return ReactivateSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateSubscriptionRequest>): ReactivateSubscriptionRequest {
    const message = createBaseReactivateSubscriptionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSubscriptionsRequest(): ListSubscriptionsRequest {
  return { pageSize: 0, pageToken: "", filter: "" };
}

export const ListSubscriptionsRequest: MessageFns<ListSubscriptionsRequest> = {
  encode(message: ListSubscriptionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSubscriptionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSubscriptionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSubscriptionsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSubscriptionsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSubscriptionsRequest>): ListSubscriptionsRequest {
    return ListSubscriptionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSubscriptionsRequest>): ListSubscriptionsRequest {
    const message = createBaseListSubscriptionsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSubscriptionsResponse(): ListSubscriptionsResponse {
  return { subscriptions: [], nextPageToken: "" };
}

export const ListSubscriptionsResponse: MessageFns<ListSubscriptionsResponse> = {
  encode(message: ListSubscriptionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.subscriptions) {
      Subscription.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSubscriptionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSubscriptionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subscriptions.push(Subscription.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSubscriptionsResponse {
    return {
      subscriptions: globalThis.Array.isArray(object?.subscriptions)
        ? object.subscriptions.map((e: any) => Subscription.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSubscriptionsResponse): unknown {
    const obj: any = {};
    if (message.subscriptions?.length) {
      obj.subscriptions = message.subscriptions.map((e) => Subscription.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSubscriptionsResponse>): ListSubscriptionsResponse {
    return ListSubscriptionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSubscriptionsResponse>): ListSubscriptionsResponse {
    const message = createBaseListSubscriptionsResponse();
    message.subscriptions = object.subscriptions?.map((e) => Subscription.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateSubscriptionMetadata(): UpdateSubscriptionMetadata {
  return {};
}

export const UpdateSubscriptionMetadata: MessageFns<UpdateSubscriptionMetadata> = {
  encode(_: UpdateSubscriptionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSubscriptionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateSubscriptionMetadata {
    return {};
  },

  toJSON(_: UpdateSubscriptionMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateSubscriptionMetadata>): UpdateSubscriptionMetadata {
    return UpdateSubscriptionMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateSubscriptionMetadata>): UpdateSubscriptionMetadata {
    const message = createBaseUpdateSubscriptionMetadata();
    return message;
  },
};

function createBaseCreateSubscriptionMetadata(): CreateSubscriptionMetadata {
  return {};
}

export const CreateSubscriptionMetadata: MessageFns<CreateSubscriptionMetadata> = {
  encode(_: CreateSubscriptionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSubscriptionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSubscriptionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateSubscriptionMetadata {
    return {};
  },

  toJSON(_: CreateSubscriptionMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateSubscriptionMetadata>): CreateSubscriptionMetadata {
    return CreateSubscriptionMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateSubscriptionMetadata>): CreateSubscriptionMetadata {
    const message = createBaseCreateSubscriptionMetadata();
    return message;
  },
};

function createBaseDeleteSubscriptionMetadata(): DeleteSubscriptionMetadata {
  return {};
}

export const DeleteSubscriptionMetadata: MessageFns<DeleteSubscriptionMetadata> = {
  encode(_: DeleteSubscriptionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSubscriptionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSubscriptionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteSubscriptionMetadata {
    return {};
  },

  toJSON(_: DeleteSubscriptionMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteSubscriptionMetadata>): DeleteSubscriptionMetadata {
    return DeleteSubscriptionMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteSubscriptionMetadata>): DeleteSubscriptionMetadata {
    const message = createBaseDeleteSubscriptionMetadata();
    return message;
  },
};

function createBaseReactivateSubscriptionMetadata(): ReactivateSubscriptionMetadata {
  return {};
}

export const ReactivateSubscriptionMetadata: MessageFns<ReactivateSubscriptionMetadata> = {
  encode(_: ReactivateSubscriptionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReactivateSubscriptionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateSubscriptionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReactivateSubscriptionMetadata {
    return {};
  },

  toJSON(_: ReactivateSubscriptionMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReactivateSubscriptionMetadata>): ReactivateSubscriptionMetadata {
    return ReactivateSubscriptionMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReactivateSubscriptionMetadata>): ReactivateSubscriptionMetadata {
    const message = createBaseReactivateSubscriptionMetadata();
    return message;
  },
};

/** A service that manages subscriptions to Google Workspace events. */
export type SubscriptionsServiceDefinition = typeof SubscriptionsServiceDefinition;
export const SubscriptionsServiceDefinition = {
  name: "SubscriptionsService",
  fullName: "google.apps.events.subscriptions.v1.SubscriptionsService",
  methods: {
    /**
     * Creates a Google Workspace subscription. To learn how to use this
     * method, see [Create a Google Workspace
     * subscription](https://developers.google.com/workspace/events/guides/create-subscription).
     */
    createSubscription: {
      name: "CreateSubscription",
      requestType: CreateSubscriptionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              12,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              18,
              26,
              67,
              114,
              101,
              97,
              116,
              101,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 115, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              33,
              58,
              12,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              17,
              47,
              118,
              49,
              47,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a Google Workspace subscription.
     * To learn how to use this method, see [Delete a Google Workspace
     * subscription](https://developers.google.com/workspace/events/guides/delete-subscription).
     */
    deleteSubscription: {
      name: "DeleteSubscription",
      requestType: DeleteSubscriptionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              26,
              68,
              101,
              108,
              101,
              116,
              101,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              28,
              42,
              26,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets details about a Google Workspace subscription. To learn how to use
     * this method, see [Get details about a Google Workspace
     * subscription](https://developers.google.com/workspace/events/guides/get-subscription).
     */
    getSubscription: {
      name: "GetSubscription",
      requestType: GetSubscriptionRequest,
      requestStream: false,
      responseType: Subscription,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              28,
              18,
              26,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists Google Workspace subscriptions. To learn how to use this method, see
     * [List Google Workspace
     * subscriptions](https://developers.google.com/workspace/events/guides/list-subscriptions).
     */
    listSubscriptions: {
      name: "ListSubscriptions",
      requestType: ListSubscriptionsRequest,
      requestStream: false,
      responseType: ListSubscriptionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([19, 18, 17, 47, 118, 49, 47, 115, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115]),
          ],
        },
      },
    },
    /**
     * Updates or renews a Google Workspace subscription. To learn how to use this
     * method, see [Update or renew a Google Workspace
     * subscription](https://developers.google.com/workspace/events/guides/update-subscription).
     */
    updateSubscription: {
      name: "UpdateSubscription",
      requestType: UpdateSubscriptionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              12,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              18,
              26,
              85,
              112,
              100,
              97,
              116,
              101,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              12,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              50,
              39,
              47,
              118,
              49,
              47,
              123,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Reactivates a suspended Google Workspace subscription.
     *
     * This method resets your subscription's `State` field to `ACTIVE`. Before
     * you use this method, you must fix the error that suspended the
     * subscription. To learn how to use this method, see [Reactivate a Google
     * Workspace
     * subscription](https://developers.google.com/workspace/events/guides/reactivate-subscription).
     */
    reactivateSubscription: {
      name: "ReactivateSubscription",
      requestType: ReactivateSubscriptionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              12,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              18,
              30,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              83,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SubscriptionsServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a Google Workspace subscription. To learn how to use this
   * method, see [Create a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/create-subscription).
   */
  createSubscription(
    request: CreateSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a Google Workspace subscription.
   * To learn how to use this method, see [Delete a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/delete-subscription).
   */
  deleteSubscription(
    request: DeleteSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets details about a Google Workspace subscription. To learn how to use
   * this method, see [Get details about a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/get-subscription).
   */
  getSubscription(
    request: GetSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Subscription>>;
  /**
   * Lists Google Workspace subscriptions. To learn how to use this method, see
   * [List Google Workspace
   * subscriptions](https://developers.google.com/workspace/events/guides/list-subscriptions).
   */
  listSubscriptions(
    request: ListSubscriptionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSubscriptionsResponse>>;
  /**
   * Updates or renews a Google Workspace subscription. To learn how to use this
   * method, see [Update or renew a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/update-subscription).
   */
  updateSubscription(
    request: UpdateSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Reactivates a suspended Google Workspace subscription.
   *
   * This method resets your subscription's `State` field to `ACTIVE`. Before
   * you use this method, you must fix the error that suspended the
   * subscription. To learn how to use this method, see [Reactivate a Google
   * Workspace
   * subscription](https://developers.google.com/workspace/events/guides/reactivate-subscription).
   */
  reactivateSubscription(
    request: ReactivateSubscriptionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface SubscriptionsServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a Google Workspace subscription. To learn how to use this
   * method, see [Create a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/create-subscription).
   */
  createSubscription(
    request: DeepPartial<CreateSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a Google Workspace subscription.
   * To learn how to use this method, see [Delete a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/delete-subscription).
   */
  deleteSubscription(
    request: DeepPartial<DeleteSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets details about a Google Workspace subscription. To learn how to use
   * this method, see [Get details about a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/get-subscription).
   */
  getSubscription(
    request: DeepPartial<GetSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Subscription>;
  /**
   * Lists Google Workspace subscriptions. To learn how to use this method, see
   * [List Google Workspace
   * subscriptions](https://developers.google.com/workspace/events/guides/list-subscriptions).
   */
  listSubscriptions(
    request: DeepPartial<ListSubscriptionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSubscriptionsResponse>;
  /**
   * Updates or renews a Google Workspace subscription. To learn how to use this
   * method, see [Update or renew a Google Workspace
   * subscription](https://developers.google.com/workspace/events/guides/update-subscription).
   */
  updateSubscription(
    request: DeepPartial<UpdateSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Reactivates a suspended Google Workspace subscription.
   *
   * This method resets your subscription's `State` field to `ACTIVE`. Before
   * you use this method, you must fix the error that suspended the
   * subscription. To learn how to use this method, see [Reactivate a Google
   * Workspace
   * subscription](https://developers.google.com/workspace/events/guides/reactivate-subscription).
   */
  reactivateSubscription(
    request: DeepPartial<ReactivateSubscriptionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
