// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ai/generativelanguage/v1beta/cached_content.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Content, Tool, ToolConfig } from "./content.js";

export const protobufPackage = "google.ai.generativelanguage.v1beta";

/**
 * Content that has been preprocessed and can be used in subsequent request
 * to GenerativeService.
 *
 * Cached content can be only used with model it was created for.
 */
export interface CachedContent {
  /**
   * Timestamp in UTC of when this resource is considered expired.
   * This is *always* provided on output, regardless of what was sent
   * on input.
   */
  expireTime?:
    | Date
    | undefined;
  /** Input only. New TTL for this resource, input only. */
  ttl?:
    | Duration
    | undefined;
  /**
   * Optional. Identifier. The resource name referring to the cached content.
   * Format: `cachedContents/{id}`
   */
  name?:
    | string
    | undefined;
  /**
   * Optional. Immutable. The user-generated meaningful display name of the
   * cached content. Maximum 128 Unicode characters.
   */
  displayName?:
    | string
    | undefined;
  /**
   * Required. Immutable. The name of the `Model` to use for cached content
   * Format: `models/{model}`
   */
  model?:
    | string
    | undefined;
  /**
   * Optional. Input only. Immutable. Developer set system instruction.
   * Currently text only.
   */
  systemInstruction?:
    | Content
    | undefined;
  /** Optional. Input only. Immutable. The content to cache. */
  contents: Content[];
  /**
   * Optional. Input only. Immutable. A list of `Tools` the model may use to
   * generate the next response
   */
  tools: Tool[];
  /**
   * Optional. Input only. Immutable. Tool config. This config is shared for all
   * tools.
   */
  toolConfig?:
    | ToolConfig
    | undefined;
  /** Output only. Creation time of the cache entry. */
  createTime:
    | Date
    | undefined;
  /** Output only. When the cache entry was last updated in UTC time. */
  updateTime:
    | Date
    | undefined;
  /** Output only. Metadata on the usage of the cached content. */
  usageMetadata: CachedContent_UsageMetadata | undefined;
}

/** Metadata on the usage of the cached content. */
export interface CachedContent_UsageMetadata {
  /** Total number of tokens that the cached content consumes. */
  totalTokenCount: number;
}

function createBaseCachedContent(): CachedContent {
  return {
    expireTime: undefined,
    ttl: undefined,
    name: undefined,
    displayName: undefined,
    model: undefined,
    systemInstruction: undefined,
    contents: [],
    tools: [],
    toolConfig: undefined,
    createTime: undefined,
    updateTime: undefined,
    usageMetadata: undefined,
  };
}

export const CachedContent: MessageFns<CachedContent> = {
  encode(message: CachedContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(74).fork()).join();
    }
    if (message.ttl !== undefined) {
      Duration.encode(message.ttl, writer.uint32(82).fork()).join();
    }
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== undefined) {
      writer.uint32(90).string(message.displayName);
    }
    if (message.model !== undefined) {
      writer.uint32(18).string(message.model);
    }
    if (message.systemInstruction !== undefined) {
      Content.encode(message.systemInstruction, writer.uint32(26).fork()).join();
    }
    for (const v of message.contents) {
      Content.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.tools) {
      Tool.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.toolConfig !== undefined) {
      ToolConfig.encode(message.toolConfig, writer.uint32(50).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.usageMetadata !== undefined) {
      CachedContent_UsageMetadata.encode(message.usageMetadata, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.ttl = Duration.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.systemInstruction = Content.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.contents.push(Content.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tools.push(Tool.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.toolConfig = ToolConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.usageMetadata = CachedContent_UsageMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedContent {
    return {
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      ttl: isSet(object.ttl) ? Duration.fromJSON(object.ttl) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      model: isSet(object.model) ? globalThis.String(object.model) : undefined,
      systemInstruction: isSet(object.systemInstruction) ? Content.fromJSON(object.systemInstruction) : undefined,
      contents: globalThis.Array.isArray(object?.contents) ? object.contents.map((e: any) => Content.fromJSON(e)) : [],
      tools: globalThis.Array.isArray(object?.tools) ? object.tools.map((e: any) => Tool.fromJSON(e)) : [],
      toolConfig: isSet(object.toolConfig) ? ToolConfig.fromJSON(object.toolConfig) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      usageMetadata: isSet(object.usageMetadata)
        ? CachedContent_UsageMetadata.fromJSON(object.usageMetadata)
        : undefined,
    };
  },

  toJSON(message: CachedContent): unknown {
    const obj: any = {};
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.ttl !== undefined) {
      obj.ttl = Duration.toJSON(message.ttl);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.model !== undefined) {
      obj.model = message.model;
    }
    if (message.systemInstruction !== undefined) {
      obj.systemInstruction = Content.toJSON(message.systemInstruction);
    }
    if (message.contents?.length) {
      obj.contents = message.contents.map((e) => Content.toJSON(e));
    }
    if (message.tools?.length) {
      obj.tools = message.tools.map((e) => Tool.toJSON(e));
    }
    if (message.toolConfig !== undefined) {
      obj.toolConfig = ToolConfig.toJSON(message.toolConfig);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.usageMetadata !== undefined) {
      obj.usageMetadata = CachedContent_UsageMetadata.toJSON(message.usageMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CachedContent>): CachedContent {
    return CachedContent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CachedContent>): CachedContent {
    const message = createBaseCachedContent();
    message.expireTime = object.expireTime ?? undefined;
    message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Duration.fromPartial(object.ttl) : undefined;
    message.name = object.name ?? undefined;
    message.displayName = object.displayName ?? undefined;
    message.model = object.model ?? undefined;
    message.systemInstruction = (object.systemInstruction !== undefined && object.systemInstruction !== null)
      ? Content.fromPartial(object.systemInstruction)
      : undefined;
    message.contents = object.contents?.map((e) => Content.fromPartial(e)) || [];
    message.tools = object.tools?.map((e) => Tool.fromPartial(e)) || [];
    message.toolConfig = (object.toolConfig !== undefined && object.toolConfig !== null)
      ? ToolConfig.fromPartial(object.toolConfig)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.usageMetadata = (object.usageMetadata !== undefined && object.usageMetadata !== null)
      ? CachedContent_UsageMetadata.fromPartial(object.usageMetadata)
      : undefined;
    return message;
  },
};

function createBaseCachedContent_UsageMetadata(): CachedContent_UsageMetadata {
  return { totalTokenCount: 0 };
}

export const CachedContent_UsageMetadata: MessageFns<CachedContent_UsageMetadata> = {
  encode(message: CachedContent_UsageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalTokenCount !== 0) {
      writer.uint32(8).int32(message.totalTokenCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CachedContent_UsageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCachedContent_UsageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalTokenCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CachedContent_UsageMetadata {
    return { totalTokenCount: isSet(object.totalTokenCount) ? globalThis.Number(object.totalTokenCount) : 0 };
  },

  toJSON(message: CachedContent_UsageMetadata): unknown {
    const obj: any = {};
    if (message.totalTokenCount !== 0) {
      obj.totalTokenCount = Math.round(message.totalTokenCount);
    }
    return obj;
  },

  create(base?: DeepPartial<CachedContent_UsageMetadata>): CachedContent_UsageMetadata {
    return CachedContent_UsageMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CachedContent_UsageMetadata>): CachedContent_UsageMetadata {
    const message = createBaseCachedContent_UsageMetadata();
    message.totalTokenCount = object.totalTokenCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
