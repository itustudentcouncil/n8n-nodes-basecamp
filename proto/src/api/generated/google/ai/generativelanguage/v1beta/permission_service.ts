// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ai/generativelanguage/v1beta/permission_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Permission } from "./permission.js";

export const protobufPackage = "google.ai.generativelanguage.v1beta";

/** Request to create a `Permission`. */
export interface CreatePermissionRequest {
  /**
   * Required. The parent resource of the `Permission`.
   * Formats:
   *    `tunedModels/{tuned_model}`
   *    `corpora/{corpus}`
   */
  parent: string;
  /** Required. The permission to create. */
  permission: Permission | undefined;
}

/** Request for getting information about a specific `Permission`. */
export interface GetPermissionRequest {
  /**
   * Required. The resource name of the permission.
   *
   * Formats:
   *    `tunedModels/{tuned_model}/permissions/{permission}`
   *    `corpora/{corpus}/permissions/{permission}`
   */
  name: string;
}

/** Request for listing permissions. */
export interface ListPermissionsRequest {
  /**
   * Required. The parent resource of the permissions.
   * Formats:
   *    `tunedModels/{tuned_model}`
   *    `corpora/{corpus}`
   */
  parent: string;
  /**
   * Optional. The maximum number of `Permission`s to return (per page).
   * The service may return fewer permissions.
   *
   * If unspecified, at most 10 permissions will be returned.
   * This method returns at most 1000 permissions per page, even if you pass
   * larger page_size.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListPermissions` call.
   *
   * Provide the `page_token` returned by one request as an argument to the
   * next request to retrieve the next page.
   *
   * When paginating, all other parameters provided to `ListPermissions`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * Response from `ListPermissions` containing a paginated list of
 * permissions.
 */
export interface ListPermissionsResponse {
  /** Returned permissions. */
  permissions: Permission[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   *
   * If this field is omitted, there are no more pages.
   */
  nextPageToken: string;
}

/** Request to update the `Permission`. */
export interface UpdatePermissionRequest {
  /**
   * Required. The permission to update.
   *
   * The permission's `name` field is used to identify the permission to update.
   */
  permission:
    | Permission
    | undefined;
  /**
   * Required. The list of fields to update. Accepted ones:
   *  - role (`Permission.role` field)
   */
  updateMask: string[] | undefined;
}

/** Request to delete the `Permission`. */
export interface DeletePermissionRequest {
  /**
   * Required. The resource name of the permission.
   * Formats:
   *    `tunedModels/{tuned_model}/permissions/{permission}`
   *    `corpora/{corpus}/permissions/{permission}`
   */
  name: string;
}

/** Request to transfer the ownership of the tuned model. */
export interface TransferOwnershipRequest {
  /**
   * Required. The resource name of the tuned model to transfer ownership.
   *
   * Format: `tunedModels/my-model-id`
   */
  name: string;
  /**
   * Required. The email address of the user to whom the tuned model is being
   * transferred to.
   */
  emailAddress: string;
}

/** Response from `TransferOwnership`. */
export interface TransferOwnershipResponse {
}

function createBaseCreatePermissionRequest(): CreatePermissionRequest {
  return { parent: "", permission: undefined };
}

export const CreatePermissionRequest: MessageFns<CreatePermissionRequest> = {
  encode(message: CreatePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePermissionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined,
    };
  },

  toJSON(message: CreatePermissionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePermissionRequest>): CreatePermissionRequest {
    return CreatePermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePermissionRequest>): CreatePermissionRequest {
    const message = createBaseCreatePermissionRequest();
    message.parent = object.parent ?? "";
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    return message;
  },
};

function createBaseGetPermissionRequest(): GetPermissionRequest {
  return { name: "" };
}

export const GetPermissionRequest: MessageFns<GetPermissionRequest> = {
  encode(message: GetPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPermissionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPermissionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPermissionRequest>): GetPermissionRequest {
    return GetPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPermissionRequest>): GetPermissionRequest {
    const message = createBaseGetPermissionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPermissionsRequest(): ListPermissionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPermissionsRequest: MessageFns<ListPermissionsRequest> = {
  encode(message: ListPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPermissionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPermissionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPermissionsRequest>): ListPermissionsRequest {
    return ListPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPermissionsRequest>): ListPermissionsRequest {
    const message = createBaseListPermissionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPermissionsResponse(): ListPermissionsResponse {
  return { permissions: [], nextPageToken: "" };
}

export const ListPermissionsResponse: MessageFns<ListPermissionsResponse> = {
  encode(message: ListPermissionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPermissionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPermissionsResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPermissionsResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPermissionsResponse>): ListPermissionsResponse {
    return ListPermissionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPermissionsResponse>): ListPermissionsResponse {
    const message = createBaseListPermissionsResponse();
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdatePermissionRequest(): UpdatePermissionRequest {
  return { permission: undefined, updateMask: undefined };
}

export const UpdatePermissionRequest: MessageFns<UpdatePermissionRequest> = {
  encode(message: UpdatePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePermissionRequest {
    return {
      permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePermissionRequest): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePermissionRequest>): UpdatePermissionRequest {
    return UpdatePermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePermissionRequest>): UpdatePermissionRequest {
    const message = createBaseUpdatePermissionRequest();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeletePermissionRequest(): DeletePermissionRequest {
  return { name: "" };
}

export const DeletePermissionRequest: MessageFns<DeletePermissionRequest> = {
  encode(message: DeletePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePermissionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePermissionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePermissionRequest>): DeletePermissionRequest {
    return DeletePermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePermissionRequest>): DeletePermissionRequest {
    const message = createBaseDeletePermissionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTransferOwnershipRequest(): TransferOwnershipRequest {
  return { name: "", emailAddress: "" };
}

export const TransferOwnershipRequest: MessageFns<TransferOwnershipRequest> = {
  encode(message: TransferOwnershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.emailAddress !== "") {
      writer.uint32(18).string(message.emailAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferOwnershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferOwnershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferOwnershipRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : "",
    };
  },

  toJSON(message: TransferOwnershipRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.emailAddress !== "") {
      obj.emailAddress = message.emailAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<TransferOwnershipRequest>): TransferOwnershipRequest {
    return TransferOwnershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransferOwnershipRequest>): TransferOwnershipRequest {
    const message = createBaseTransferOwnershipRequest();
    message.name = object.name ?? "";
    message.emailAddress = object.emailAddress ?? "";
    return message;
  },
};

function createBaseTransferOwnershipResponse(): TransferOwnershipResponse {
  return {};
}

export const TransferOwnershipResponse: MessageFns<TransferOwnershipResponse> = {
  encode(_: TransferOwnershipResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferOwnershipResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferOwnershipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TransferOwnershipResponse {
    return {};
  },

  toJSON(_: TransferOwnershipResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TransferOwnershipResponse>): TransferOwnershipResponse {
    return TransferOwnershipResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TransferOwnershipResponse>): TransferOwnershipResponse {
    const message = createBaseTransferOwnershipResponse();
    return message;
  },
};

/** Provides methods for managing permissions to PaLM API resources. */
export type PermissionServiceDefinition = typeof PermissionServiceDefinition;
export const PermissionServiceDefinition = {
  name: "PermissionService",
  fullName: "google.ai.generativelanguage.v1beta.PermissionService",
  methods: {
    /** Create a permission to a specific resource. */
    createPermission: {
      name: "CreatePermission",
      requestType: CreatePermissionRequest,
      requestStream: false,
      responseType: Permission,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              110,
              58,
              10,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              90,
              52,
              58,
              10,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              34,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              99,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              42,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              116,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about a specific Permission. */
    getPermission: {
      name: "GetPermission",
      requestType: GetPermissionRequest,
      requestStream: false,
      responseType: Permission,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              86,
              90,
              40,
              18,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              99,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              42,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists permissions for the specific resource. */
    listPermissions: {
      name: "ListPermissions",
      requestType: ListPermissionsRequest,
      requestStream: false,
      responseType: ListPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              86,
              90,
              40,
              18,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              99,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              18,
              42,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              116,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the permission. */
    updatePermission: {
      name: "UpdatePermission",
      requestType: UpdatePermissionRequest,
      requestStream: false,
      responseType: Permission,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              132,
              1,
              58,
              10,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              90,
              63,
              58,
              10,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              50,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              99,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              50,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              116,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the permission. */
    deletePermission: {
      name: "DeletePermission",
      requestType: DeletePermissionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              86,
              90,
              40,
              42,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              99,
              111,
              114,
              112,
              111,
              114,
              97,
              47,
              42,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              42,
              42,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Transfers ownership of the tuned model.
     * This is the only way to change ownership of the tuned model.
     * The current owner will be downgraded to writer role.
     */
    transferOwnership: {
      name: "TransferOwnership",
      requestType: TransferOwnershipRequest,
      requestStream: false,
      responseType: TransferOwnershipResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              51,
              58,
              1,
              42,
              34,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              116,
              117,
              110,
              101,
              100,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              79,
              119,
              110,
              101,
              114,
              115,
              104,
              105,
              112,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PermissionServiceImplementation<CallContextExt = {}> {
  /** Create a permission to a specific resource. */
  createPermission(
    request: CreatePermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Permission>>;
  /** Gets information about a specific Permission. */
  getPermission(request: GetPermissionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Permission>>;
  /** Lists permissions for the specific resource. */
  listPermissions(
    request: ListPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPermissionsResponse>>;
  /** Updates the permission. */
  updatePermission(
    request: UpdatePermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Permission>>;
  /** Deletes the permission. */
  deletePermission(
    request: DeletePermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Transfers ownership of the tuned model.
   * This is the only way to change ownership of the tuned model.
   * The current owner will be downgraded to writer role.
   */
  transferOwnership(
    request: TransferOwnershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferOwnershipResponse>>;
}

export interface PermissionServiceClient<CallOptionsExt = {}> {
  /** Create a permission to a specific resource. */
  createPermission(
    request: DeepPartial<CreatePermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Permission>;
  /** Gets information about a specific Permission. */
  getPermission(
    request: DeepPartial<GetPermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Permission>;
  /** Lists permissions for the specific resource. */
  listPermissions(
    request: DeepPartial<ListPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPermissionsResponse>;
  /** Updates the permission. */
  updatePermission(
    request: DeepPartial<UpdatePermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Permission>;
  /** Deletes the permission. */
  deletePermission(
    request: DeepPartial<DeletePermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Transfers ownership of the tuned model.
   * This is the only way to change ownership of the tuned model.
   * The current owner will be downgraded to writer role.
   */
  transferOwnership(
    request: DeepPartial<TransferOwnershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferOwnershipResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
