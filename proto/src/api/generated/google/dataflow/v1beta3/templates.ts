// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/dataflow/v1beta3/templates.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Status } from "../../rpc/status.js";
import {
  AutoscalingAlgorithm,
  autoscalingAlgorithmFromJSON,
  autoscalingAlgorithmToJSON,
  FlexResourceSchedulingGoal,
  flexResourceSchedulingGoalFromJSON,
  flexResourceSchedulingGoalToJSON,
  WorkerIPAddressConfiguration,
  workerIPAddressConfigurationFromJSON,
  workerIPAddressConfigurationToJSON,
} from "./environment.js";
import { Job } from "./jobs.js";

export const protobufPackage = "google.dataflow.v1beta3";

/** ParameterType specifies what kind of input we need for this parameter. */
export enum ParameterType {
  /** DEFAULT - Default input type. */
  DEFAULT = 0,
  /** TEXT - The parameter specifies generic text input. */
  TEXT = 1,
  /** GCS_READ_BUCKET - The parameter specifies a Cloud Storage Bucket to read from. */
  GCS_READ_BUCKET = 2,
  /** GCS_WRITE_BUCKET - The parameter specifies a Cloud Storage Bucket to write to. */
  GCS_WRITE_BUCKET = 3,
  /** GCS_READ_FILE - The parameter specifies a Cloud Storage file path to read from. */
  GCS_READ_FILE = 4,
  /** GCS_WRITE_FILE - The parameter specifies a Cloud Storage file path to write to. */
  GCS_WRITE_FILE = 5,
  /** GCS_READ_FOLDER - The parameter specifies a Cloud Storage folder path to read from. */
  GCS_READ_FOLDER = 6,
  /** GCS_WRITE_FOLDER - The parameter specifies a Cloud Storage folder to write to. */
  GCS_WRITE_FOLDER = 7,
  /** PUBSUB_TOPIC - The parameter specifies a Pub/Sub Topic. */
  PUBSUB_TOPIC = 8,
  /** PUBSUB_SUBSCRIPTION - The parameter specifies a Pub/Sub Subscription. */
  PUBSUB_SUBSCRIPTION = 9,
  UNRECOGNIZED = -1,
}

export function parameterTypeFromJSON(object: any): ParameterType {
  switch (object) {
    case 0:
    case "DEFAULT":
      return ParameterType.DEFAULT;
    case 1:
    case "TEXT":
      return ParameterType.TEXT;
    case 2:
    case "GCS_READ_BUCKET":
      return ParameterType.GCS_READ_BUCKET;
    case 3:
    case "GCS_WRITE_BUCKET":
      return ParameterType.GCS_WRITE_BUCKET;
    case 4:
    case "GCS_READ_FILE":
      return ParameterType.GCS_READ_FILE;
    case 5:
    case "GCS_WRITE_FILE":
      return ParameterType.GCS_WRITE_FILE;
    case 6:
    case "GCS_READ_FOLDER":
      return ParameterType.GCS_READ_FOLDER;
    case 7:
    case "GCS_WRITE_FOLDER":
      return ParameterType.GCS_WRITE_FOLDER;
    case 8:
    case "PUBSUB_TOPIC":
      return ParameterType.PUBSUB_TOPIC;
    case 9:
    case "PUBSUB_SUBSCRIPTION":
      return ParameterType.PUBSUB_SUBSCRIPTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParameterType.UNRECOGNIZED;
  }
}

export function parameterTypeToJSON(object: ParameterType): string {
  switch (object) {
    case ParameterType.DEFAULT:
      return "DEFAULT";
    case ParameterType.TEXT:
      return "TEXT";
    case ParameterType.GCS_READ_BUCKET:
      return "GCS_READ_BUCKET";
    case ParameterType.GCS_WRITE_BUCKET:
      return "GCS_WRITE_BUCKET";
    case ParameterType.GCS_READ_FILE:
      return "GCS_READ_FILE";
    case ParameterType.GCS_WRITE_FILE:
      return "GCS_WRITE_FILE";
    case ParameterType.GCS_READ_FOLDER:
      return "GCS_READ_FOLDER";
    case ParameterType.GCS_WRITE_FOLDER:
      return "GCS_WRITE_FOLDER";
    case ParameterType.PUBSUB_TOPIC:
      return "PUBSUB_TOPIC";
    case ParameterType.PUBSUB_SUBSCRIPTION:
      return "PUBSUB_SUBSCRIPTION";
    case ParameterType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response to the request to launch a job from Flex Template. */
export interface LaunchFlexTemplateResponse {
  /**
   * The job that was launched, if the request was not a dry run and
   * the job was successfully launched.
   */
  job: Job | undefined;
}

/** Container Spec. */
export interface ContainerSpec {
  /** Name of the docker container image. E.g., gcr.io/project/some-image */
  image: string;
  /** Metadata describing a template including description and validation rules. */
  metadata:
    | TemplateMetadata
    | undefined;
  /** Required. SDK info of the Flex Template. */
  sdkInfo:
    | SDKInfo
    | undefined;
  /** Default runtime environment for the job. */
  defaultEnvironment: FlexTemplateRuntimeEnvironment | undefined;
}

/** Launch FlexTemplate Parameter. */
export interface LaunchFlexTemplateParameter {
  /**
   * Required. The job name to use for the created job. For update job request,
   * job name should be same as the existing running job.
   */
  jobName: string;
  /** Spec about the container image to launch. */
  containerSpec?:
    | ContainerSpec
    | undefined;
  /**
   * Cloud Storage path to a file with json serialized ContainerSpec as
   * content.
   */
  containerSpecGcsPath?:
    | string
    | undefined;
  /**
   * The parameters for FlexTemplate.
   * Ex. {"num_workers":"5"}
   */
  parameters: { [key: string]: string };
  /**
   * Launch options for this flex template job. This is a common set of options
   * across languages and templates. This should not be used to pass job
   * parameters.
   */
  launchOptions: { [key: string]: string };
  /** The runtime environment for the FlexTemplate job */
  environment:
    | FlexTemplateRuntimeEnvironment
    | undefined;
  /**
   * Set this to true if you are sending a request to update a running
   * streaming job. When set, the job name should be the same as the
   * running job.
   */
  update: boolean;
  /**
   * Use this to pass transform_name_mappings for streaming update jobs.
   * Ex:{"oldTransformName":"newTransformName",...}'
   */
  transformNameMappings: { [key: string]: string };
}

export interface LaunchFlexTemplateParameter_ParametersEntry {
  key: string;
  value: string;
}

export interface LaunchFlexTemplateParameter_LaunchOptionsEntry {
  key: string;
  value: string;
}

export interface LaunchFlexTemplateParameter_TransformNameMappingsEntry {
  key: string;
  value: string;
}

/** The environment values to be set at runtime for flex template. */
export interface FlexTemplateRuntimeEnvironment {
  /** The initial number of Google Compute Engine instances for the job. */
  numWorkers: number;
  /**
   * The maximum number of Google Compute Engine instances to be made
   * available to your pipeline during execution, from 1 to 1000.
   */
  maxWorkers: number;
  /**
   * The Compute Engine [availability
   * zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones)
   * for launching worker instances to run your pipeline.
   * In the future, worker_zone will take precedence.
   */
  zone: string;
  /** The email address of the service account to run the job as. */
  serviceAccountEmail: string;
  /**
   * The Cloud Storage path to use for temporary files.
   * Must be a valid Cloud Storage URL, beginning with `gs://`.
   */
  tempLocation: string;
  /**
   * The machine type to use for the job. Defaults to the value from the
   * template if not specified.
   */
  machineType: string;
  /** Additional experiment flags for the job. */
  additionalExperiments: string[];
  /**
   * Network to which VMs will be assigned.  If empty or unspecified,
   * the service will use the network "default".
   */
  network: string;
  /**
   * Subnetwork to which VMs will be assigned, if desired. You can specify a
   * subnetwork using either a complete URL or an abbreviated path. Expected to
   * be of the form
   * "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK"
   * or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in
   * a Shared VPC network, you must use the complete URL.
   */
  subnetwork: string;
  /**
   * Additional user labels to be specified for the job.
   * Keys and values must follow the restrictions specified in the [labeling
   * restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
   * page.
   * An object containing a list of "key": value pairs.
   * Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
   */
  additionalUserLabels: { [key: string]: string };
  /**
   * Name for the Cloud KMS key for the job.
   * Key format is:
   * projects/<project>/locations/<location>/keyRings/<keyring>/cryptoKeys/<key>
   */
  kmsKeyName: string;
  /** Configuration for VM IPs. */
  ipConfiguration: WorkerIPAddressConfiguration;
  /**
   * The Compute Engine region
   * (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
   * which worker processing should occur, e.g. "us-west1". Mutually exclusive
   * with worker_zone. If neither worker_region nor worker_zone is specified,
   * default to the control plane's region.
   */
  workerRegion: string;
  /**
   * The Compute Engine zone
   * (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
   * which worker processing should occur, e.g. "us-west1-a". Mutually exclusive
   * with worker_region. If neither worker_region nor worker_zone is specified,
   * a zone in the control plane's region is chosen based on available capacity.
   * If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
   */
  workerZone: string;
  /** Whether to enable Streaming Engine for the job. */
  enableStreamingEngine: boolean;
  /**
   * Set FlexRS goal for the job.
   * https://cloud.google.com/dataflow/docs/guides/flexrs
   */
  flexrsGoal: FlexResourceSchedulingGoal;
  /**
   * The Cloud Storage path for staging local files.
   * Must be a valid Cloud Storage URL, beginning with `gs://`.
   */
  stagingLocation: string;
  /**
   * Docker registry location of container image to use for the 'worker harness.
   * Default is the container for the version of the SDK. Note this field is
   * only valid for portable pipelines.
   */
  sdkContainerImage: string;
  /** Worker disk size, in gigabytes. */
  diskSizeGb: number;
  /** The algorithm to use for autoscaling */
  autoscalingAlgorithm: AutoscalingAlgorithm;
  /**
   * If true, save a heap dump before killing a thread or process which is GC
   * thrashing or out of memory. The location of the heap file will either be
   * echoed back to the user, or the user will be given the opportunity to
   * download the heap file.
   */
  dumpHeapOnOom: boolean;
  /**
   * Cloud Storage bucket (directory) to upload heap dumps to the given
   * location. Enabling this implies that heap dumps should be generated on OOM
   * (dump_heap_on_oom is set to true).
   */
  saveHeapDumpsToGcsPath: string;
  /**
   * The machine type to use for launching the job. The default is
   * n1-standard-1.
   */
  launcherMachineType: string;
}

export interface FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry {
  key: string;
  value: string;
}

/** A request to launch a Cloud Dataflow job from a FlexTemplate. */
export interface LaunchFlexTemplateRequest {
  /** Required. The ID of the Cloud Platform project that the job belongs to. */
  projectId: string;
  /** Required. Parameter to launch a job form Flex Template. */
  launchParameter:
    | LaunchFlexTemplateParameter
    | undefined;
  /**
   * Required. The [regional endpoint]
   * (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
   * which to direct the request. E.g., us-central1, us-west1.
   */
  location: string;
  /**
   * If true, the request is validated but not actually executed.
   * Defaults to false.
   */
  validateOnly: boolean;
}

/** The environment values to set at runtime. */
export interface RuntimeEnvironment {
  /** The initial number of Google Compute Engine instnaces for the job. */
  numWorkers: number;
  /**
   * The maximum number of Google Compute Engine instances to be made
   * available to your pipeline during execution, from 1 to 1000.
   */
  maxWorkers: number;
  /**
   * The Compute Engine [availability
   * zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones)
   * for launching worker instances to run your pipeline.
   * In the future, worker_zone will take precedence.
   */
  zone: string;
  /** The email address of the service account to run the job as. */
  serviceAccountEmail: string;
  /**
   * The Cloud Storage path to use for temporary files.
   * Must be a valid Cloud Storage URL, beginning with `gs://`.
   */
  tempLocation: string;
  /**
   * Whether to bypass the safety checks for the job's temporary directory.
   * Use with caution.
   */
  bypassTempDirValidation: boolean;
  /**
   * The machine type to use for the job. Defaults to the value from the
   * template if not specified.
   */
  machineType: string;
  /**
   * Additional experiment flags for the job, specified with the
   * `--experiments` option.
   */
  additionalExperiments: string[];
  /**
   * Network to which VMs will be assigned.  If empty or unspecified,
   * the service will use the network "default".
   */
  network: string;
  /**
   * Subnetwork to which VMs will be assigned, if desired. You can specify a
   * subnetwork using either a complete URL or an abbreviated path. Expected to
   * be of the form
   * "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK"
   * or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in
   * a Shared VPC network, you must use the complete URL.
   */
  subnetwork: string;
  /**
   * Additional user labels to be specified for the job.
   * Keys and values should follow the restrictions specified in the [labeling
   * restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
   * page.
   * An object containing a list of "key": value pairs.
   * Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
   */
  additionalUserLabels: { [key: string]: string };
  /**
   * Name for the Cloud KMS key for the job.
   * Key format is:
   * projects/<project>/locations/<location>/keyRings/<keyring>/cryptoKeys/<key>
   */
  kmsKeyName: string;
  /** Configuration for VM IPs. */
  ipConfiguration: WorkerIPAddressConfiguration;
  /**
   * The Compute Engine region
   * (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
   * which worker processing should occur, e.g. "us-west1". Mutually exclusive
   * with worker_zone. If neither worker_region nor worker_zone is specified,
   * default to the control plane's region.
   */
  workerRegion: string;
  /**
   * The Compute Engine zone
   * (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in
   * which worker processing should occur, e.g. "us-west1-a". Mutually exclusive
   * with worker_region. If neither worker_region nor worker_zone is specified,
   * a zone in the control plane's region is chosen based on available capacity.
   * If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
   */
  workerZone: string;
  /** Whether to enable Streaming Engine for the job. */
  enableStreamingEngine: boolean;
}

export interface RuntimeEnvironment_AdditionalUserLabelsEntry {
  key: string;
  value: string;
}

/** Metadata for a specific parameter. */
export interface ParameterMetadata {
  /** Required. The name of the parameter. */
  name: string;
  /** Required. The label to display for the parameter. */
  label: string;
  /** Required. The help text to display for the parameter. */
  helpText: string;
  /** Optional. Whether the parameter is optional. Defaults to false. */
  isOptional: boolean;
  /** Optional. Regexes that the parameter must match. */
  regexes: string[];
  /**
   * Optional. The type of the parameter.
   * Used for selecting input picker.
   */
  paramType: ParameterType;
  /** Optional. Additional metadata for describing this parameter. */
  customMetadata: { [key: string]: string };
}

export interface ParameterMetadata_CustomMetadataEntry {
  key: string;
  value: string;
}

/** Metadata describing a template. */
export interface TemplateMetadata {
  /** Required. The name of the template. */
  name: string;
  /** Optional. A description of the template. */
  description: string;
  /** The parameters for the template. */
  parameters: ParameterMetadata[];
}

/** SDK Information. */
export interface SDKInfo {
  /** Required. The SDK Language. */
  language: SDKInfo_Language;
  /** Optional. The SDK version. */
  version: string;
}

/** SDK Language. */
export enum SDKInfo_Language {
  /** UNKNOWN - UNKNOWN Language. */
  UNKNOWN = 0,
  /** JAVA - Java. */
  JAVA = 1,
  /** PYTHON - Python. */
  PYTHON = 2,
  UNRECOGNIZED = -1,
}

export function sDKInfo_LanguageFromJSON(object: any): SDKInfo_Language {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SDKInfo_Language.UNKNOWN;
    case 1:
    case "JAVA":
      return SDKInfo_Language.JAVA;
    case 2:
    case "PYTHON":
      return SDKInfo_Language.PYTHON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SDKInfo_Language.UNRECOGNIZED;
  }
}

export function sDKInfo_LanguageToJSON(object: SDKInfo_Language): string {
  switch (object) {
    case SDKInfo_Language.UNKNOWN:
      return "UNKNOWN";
    case SDKInfo_Language.JAVA:
      return "JAVA";
    case SDKInfo_Language.PYTHON:
      return "PYTHON";
    case SDKInfo_Language.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** RuntimeMetadata describing a runtime environment. */
export interface RuntimeMetadata {
  /** SDK Info for the template. */
  sdkInfo:
    | SDKInfo
    | undefined;
  /** The parameters for the template. */
  parameters: ParameterMetadata[];
}

/** A request to create a Cloud Dataflow job from a template. */
export interface CreateJobFromTemplateRequest {
  /** Required. The ID of the Cloud Platform project that the job belongs to. */
  projectId: string;
  /** Required. The job name to use for the created job. */
  jobName: string;
  /**
   * Required. A Cloud Storage path to the template from which to
   * create the job.
   * Must be a valid Cloud Storage URL, beginning with `gs://`.
   */
  gcsPath?:
    | string
    | undefined;
  /** The runtime parameters to pass to the job. */
  parameters: { [key: string]: string };
  /** The runtime environment for the job. */
  environment:
    | RuntimeEnvironment
    | undefined;
  /**
   * The [regional endpoint]
   * (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
   * which to direct the request.
   */
  location: string;
}

export interface CreateJobFromTemplateRequest_ParametersEntry {
  key: string;
  value: string;
}

/** A request to retrieve a Cloud Dataflow job template. */
export interface GetTemplateRequest {
  /** Required. The ID of the Cloud Platform project that the job belongs to. */
  projectId: string;
  /**
   * Required. A Cloud Storage path to the template from which to
   * create the job.
   * Must be valid Cloud Storage URL, beginning with 'gs://'.
   */
  gcsPath?:
    | string
    | undefined;
  /** The view to retrieve. Defaults to METADATA_ONLY. */
  view: GetTemplateRequest_TemplateView;
  /**
   * The [regional endpoint]
   * (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
   * which to direct the request.
   */
  location: string;
}

/** The various views of a template that may be retrieved. */
export enum GetTemplateRequest_TemplateView {
  /**
   * METADATA_ONLY - Template view that retrieves only the metadata associated with the
   * template.
   */
  METADATA_ONLY = 0,
  UNRECOGNIZED = -1,
}

export function getTemplateRequest_TemplateViewFromJSON(object: any): GetTemplateRequest_TemplateView {
  switch (object) {
    case 0:
    case "METADATA_ONLY":
      return GetTemplateRequest_TemplateView.METADATA_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetTemplateRequest_TemplateView.UNRECOGNIZED;
  }
}

export function getTemplateRequest_TemplateViewToJSON(object: GetTemplateRequest_TemplateView): string {
  switch (object) {
    case GetTemplateRequest_TemplateView.METADATA_ONLY:
      return "METADATA_ONLY";
    case GetTemplateRequest_TemplateView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The response to a GetTemplate request. */
export interface GetTemplateResponse {
  /**
   * The status of the get template request. Any problems with the
   * request will be indicated in the error_details.
   */
  status:
    | Status
    | undefined;
  /**
   * The template metadata describing the template name, available
   * parameters, etc.
   */
  metadata:
    | TemplateMetadata
    | undefined;
  /** Template Type. */
  templateType: GetTemplateResponse_TemplateType;
  /** Describes the runtime metadata with SDKInfo and available parameters. */
  runtimeMetadata: RuntimeMetadata | undefined;
}

/** Template Type. */
export enum GetTemplateResponse_TemplateType {
  /** UNKNOWN - Unknown Template Type. */
  UNKNOWN = 0,
  /** LEGACY - Legacy Template. */
  LEGACY = 1,
  /** FLEX - Flex Template. */
  FLEX = 2,
  UNRECOGNIZED = -1,
}

export function getTemplateResponse_TemplateTypeFromJSON(object: any): GetTemplateResponse_TemplateType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return GetTemplateResponse_TemplateType.UNKNOWN;
    case 1:
    case "LEGACY":
      return GetTemplateResponse_TemplateType.LEGACY;
    case 2:
    case "FLEX":
      return GetTemplateResponse_TemplateType.FLEX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetTemplateResponse_TemplateType.UNRECOGNIZED;
  }
}

export function getTemplateResponse_TemplateTypeToJSON(object: GetTemplateResponse_TemplateType): string {
  switch (object) {
    case GetTemplateResponse_TemplateType.UNKNOWN:
      return "UNKNOWN";
    case GetTemplateResponse_TemplateType.LEGACY:
      return "LEGACY";
    case GetTemplateResponse_TemplateType.FLEX:
      return "FLEX";
    case GetTemplateResponse_TemplateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Parameters to provide to the template being launched. */
export interface LaunchTemplateParameters {
  /** Required. The job name to use for the created job. */
  jobName: string;
  /** The runtime parameters to pass to the job. */
  parameters: { [key: string]: string };
  /** The runtime environment for the job. */
  environment:
    | RuntimeEnvironment
    | undefined;
  /**
   * If set, replace the existing pipeline with the name specified by jobName
   * with this pipeline, preserving state.
   */
  update: boolean;
  /**
   * Only applicable when updating a pipeline. Map of transform name prefixes of
   * the job to be replaced to the corresponding name prefixes of the new job.
   */
  transformNameMapping: { [key: string]: string };
}

export interface LaunchTemplateParameters_ParametersEntry {
  key: string;
  value: string;
}

export interface LaunchTemplateParameters_TransformNameMappingEntry {
  key: string;
  value: string;
}

/** A request to launch a template. */
export interface LaunchTemplateRequest {
  /** Required. The ID of the Cloud Platform project that the job belongs to. */
  projectId: string;
  /**
   * If true, the request is validated but not actually executed.
   * Defaults to false.
   */
  validateOnly: boolean;
  /**
   * A Cloud Storage path to the template from which to create
   * the job.
   * Must be valid Cloud Storage URL, beginning with 'gs://'.
   */
  gcsPath?:
    | string
    | undefined;
  /** Params for launching a dynamic template. */
  dynamicTemplate?:
    | DynamicTemplateLaunchParams
    | undefined;
  /**
   * The parameters of the template to launch. This should be part of the
   * body of the POST request.
   */
  launchParameters:
    | LaunchTemplateParameters
    | undefined;
  /**
   * The [regional endpoint]
   * (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to
   * which to direct the request.
   */
  location: string;
}

/** Response to the request to launch a template. */
export interface LaunchTemplateResponse {
  /**
   * The job that was launched, if the request was not a dry run and
   * the job was successfully launched.
   */
  job: Job | undefined;
}

/**
 * Used in the error_details field of a google.rpc.Status message, this
 * indicates problems with the template parameter.
 */
export interface InvalidTemplateParameters {
  /** Describes all parameter violations in a template request. */
  parameterViolations: InvalidTemplateParameters_ParameterViolation[];
}

/** A specific template-parameter violation. */
export interface InvalidTemplateParameters_ParameterViolation {
  /** The parameter that failed to validate. */
  parameter: string;
  /** A description of why the parameter failed to validate. */
  description: string;
}

/** Params which should be passed when launching a dynamic template. */
export interface DynamicTemplateLaunchParams {
  /**
   * Path to dynamic template spec file on Cloud Storage.
   * The file must be a Json serialized DynamicTemplateFieSpec object.
   */
  gcsPath: string;
  /**
   * Cloud Storage path for staging dependencies.
   * Must be a valid Cloud Storage URL, beginning with `gs://`.
   */
  stagingLocation: string;
}

function createBaseLaunchFlexTemplateResponse(): LaunchFlexTemplateResponse {
  return { job: undefined };
}

export const LaunchFlexTemplateResponse: MessageFns<LaunchFlexTemplateResponse> = {
  encode(message: LaunchFlexTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchFlexTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchFlexTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchFlexTemplateResponse {
    return { job: isSet(object.job) ? Job.fromJSON(object.job) : undefined };
  },

  toJSON(message: LaunchFlexTemplateResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchFlexTemplateResponse>): LaunchFlexTemplateResponse {
    return LaunchFlexTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchFlexTemplateResponse>): LaunchFlexTemplateResponse {
    const message = createBaseLaunchFlexTemplateResponse();
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseContainerSpec(): ContainerSpec {
  return { image: "", metadata: undefined, sdkInfo: undefined, defaultEnvironment: undefined };
}

export const ContainerSpec: MessageFns<ContainerSpec> = {
  encode(message: ContainerSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.image !== "") {
      writer.uint32(10).string(message.image);
    }
    if (message.metadata !== undefined) {
      TemplateMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.sdkInfo !== undefined) {
      SDKInfo.encode(message.sdkInfo, writer.uint32(26).fork()).join();
    }
    if (message.defaultEnvironment !== undefined) {
      FlexTemplateRuntimeEnvironment.encode(message.defaultEnvironment, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContainerSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContainerSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.image = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = TemplateMetadata.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sdkInfo = SDKInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.defaultEnvironment = FlexTemplateRuntimeEnvironment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContainerSpec {
    return {
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      metadata: isSet(object.metadata) ? TemplateMetadata.fromJSON(object.metadata) : undefined,
      sdkInfo: isSet(object.sdkInfo) ? SDKInfo.fromJSON(object.sdkInfo) : undefined,
      defaultEnvironment: isSet(object.defaultEnvironment)
        ? FlexTemplateRuntimeEnvironment.fromJSON(object.defaultEnvironment)
        : undefined,
    };
  },

  toJSON(message: ContainerSpec): unknown {
    const obj: any = {};
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.metadata !== undefined) {
      obj.metadata = TemplateMetadata.toJSON(message.metadata);
    }
    if (message.sdkInfo !== undefined) {
      obj.sdkInfo = SDKInfo.toJSON(message.sdkInfo);
    }
    if (message.defaultEnvironment !== undefined) {
      obj.defaultEnvironment = FlexTemplateRuntimeEnvironment.toJSON(message.defaultEnvironment);
    }
    return obj;
  },

  create(base?: DeepPartial<ContainerSpec>): ContainerSpec {
    return ContainerSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContainerSpec>): ContainerSpec {
    const message = createBaseContainerSpec();
    message.image = object.image ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? TemplateMetadata.fromPartial(object.metadata)
      : undefined;
    message.sdkInfo = (object.sdkInfo !== undefined && object.sdkInfo !== null)
      ? SDKInfo.fromPartial(object.sdkInfo)
      : undefined;
    message.defaultEnvironment = (object.defaultEnvironment !== undefined && object.defaultEnvironment !== null)
      ? FlexTemplateRuntimeEnvironment.fromPartial(object.defaultEnvironment)
      : undefined;
    return message;
  },
};

function createBaseLaunchFlexTemplateParameter(): LaunchFlexTemplateParameter {
  return {
    jobName: "",
    containerSpec: undefined,
    containerSpecGcsPath: undefined,
    parameters: {},
    launchOptions: {},
    environment: undefined,
    update: false,
    transformNameMappings: {},
  };
}

export const LaunchFlexTemplateParameter: MessageFns<LaunchFlexTemplateParameter> = {
  encode(message: LaunchFlexTemplateParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    if (message.containerSpec !== undefined) {
      ContainerSpec.encode(message.containerSpec, writer.uint32(34).fork()).join();
    }
    if (message.containerSpecGcsPath !== undefined) {
      writer.uint32(42).string(message.containerSpecGcsPath);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      LaunchFlexTemplateParameter_ParametersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    Object.entries(message.launchOptions).forEach(([key, value]) => {
      LaunchFlexTemplateParameter_LaunchOptionsEntry.encode({ key: key as any, value }, writer.uint32(50).fork())
        .join();
    });
    if (message.environment !== undefined) {
      FlexTemplateRuntimeEnvironment.encode(message.environment, writer.uint32(58).fork()).join();
    }
    if (message.update !== false) {
      writer.uint32(64).bool(message.update);
    }
    Object.entries(message.transformNameMappings).forEach(([key, value]) => {
      LaunchFlexTemplateParameter_TransformNameMappingsEntry.encode(
        { key: key as any, value },
        writer.uint32(74).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchFlexTemplateParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchFlexTemplateParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.containerSpec = ContainerSpec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.containerSpecGcsPath = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = LaunchFlexTemplateParameter_ParametersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.parameters[entry2.key] = entry2.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = LaunchFlexTemplateParameter_LaunchOptionsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.launchOptions[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.environment = FlexTemplateRuntimeEnvironment.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.update = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = LaunchFlexTemplateParameter_TransformNameMappingsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.transformNameMappings[entry9.key] = entry9.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchFlexTemplateParameter {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      containerSpec: isSet(object.containerSpec) ? ContainerSpec.fromJSON(object.containerSpec) : undefined,
      containerSpecGcsPath: isSet(object.containerSpecGcsPath)
        ? globalThis.String(object.containerSpecGcsPath)
        : undefined,
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      launchOptions: isObject(object.launchOptions)
        ? Object.entries(object.launchOptions).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environment: isSet(object.environment) ? FlexTemplateRuntimeEnvironment.fromJSON(object.environment) : undefined,
      update: isSet(object.update) ? globalThis.Boolean(object.update) : false,
      transformNameMappings: isObject(object.transformNameMappings)
        ? Object.entries(object.transformNameMappings).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LaunchFlexTemplateParameter): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.containerSpec !== undefined) {
      obj.containerSpec = ContainerSpec.toJSON(message.containerSpec);
    }
    if (message.containerSpecGcsPath !== undefined) {
      obj.containerSpecGcsPath = message.containerSpecGcsPath;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.launchOptions) {
      const entries = Object.entries(message.launchOptions);
      if (entries.length > 0) {
        obj.launchOptions = {};
        entries.forEach(([k, v]) => {
          obj.launchOptions[k] = v;
        });
      }
    }
    if (message.environment !== undefined) {
      obj.environment = FlexTemplateRuntimeEnvironment.toJSON(message.environment);
    }
    if (message.update !== false) {
      obj.update = message.update;
    }
    if (message.transformNameMappings) {
      const entries = Object.entries(message.transformNameMappings);
      if (entries.length > 0) {
        obj.transformNameMappings = {};
        entries.forEach(([k, v]) => {
          obj.transformNameMappings[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchFlexTemplateParameter>): LaunchFlexTemplateParameter {
    return LaunchFlexTemplateParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchFlexTemplateParameter>): LaunchFlexTemplateParameter {
    const message = createBaseLaunchFlexTemplateParameter();
    message.jobName = object.jobName ?? "";
    message.containerSpec = (object.containerSpec !== undefined && object.containerSpec !== null)
      ? ContainerSpec.fromPartial(object.containerSpec)
      : undefined;
    message.containerSpecGcsPath = object.containerSpecGcsPath ?? undefined;
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.launchOptions = Object.entries(object.launchOptions ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? FlexTemplateRuntimeEnvironment.fromPartial(object.environment)
      : undefined;
    message.update = object.update ?? false;
    message.transformNameMappings = Object.entries(object.transformNameMappings ?? {}).reduce<
      { [key: string]: string }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseLaunchFlexTemplateParameter_ParametersEntry(): LaunchFlexTemplateParameter_ParametersEntry {
  return { key: "", value: "" };
}

export const LaunchFlexTemplateParameter_ParametersEntry: MessageFns<LaunchFlexTemplateParameter_ParametersEntry> = {
  encode(
    message: LaunchFlexTemplateParameter_ParametersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchFlexTemplateParameter_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchFlexTemplateParameter_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchFlexTemplateParameter_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LaunchFlexTemplateParameter_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchFlexTemplateParameter_ParametersEntry>): LaunchFlexTemplateParameter_ParametersEntry {
    return LaunchFlexTemplateParameter_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<LaunchFlexTemplateParameter_ParametersEntry>,
  ): LaunchFlexTemplateParameter_ParametersEntry {
    const message = createBaseLaunchFlexTemplateParameter_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLaunchFlexTemplateParameter_LaunchOptionsEntry(): LaunchFlexTemplateParameter_LaunchOptionsEntry {
  return { key: "", value: "" };
}

export const LaunchFlexTemplateParameter_LaunchOptionsEntry: MessageFns<
  LaunchFlexTemplateParameter_LaunchOptionsEntry
> = {
  encode(
    message: LaunchFlexTemplateParameter_LaunchOptionsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchFlexTemplateParameter_LaunchOptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchFlexTemplateParameter_LaunchOptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchFlexTemplateParameter_LaunchOptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LaunchFlexTemplateParameter_LaunchOptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<LaunchFlexTemplateParameter_LaunchOptionsEntry>,
  ): LaunchFlexTemplateParameter_LaunchOptionsEntry {
    return LaunchFlexTemplateParameter_LaunchOptionsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<LaunchFlexTemplateParameter_LaunchOptionsEntry>,
  ): LaunchFlexTemplateParameter_LaunchOptionsEntry {
    const message = createBaseLaunchFlexTemplateParameter_LaunchOptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLaunchFlexTemplateParameter_TransformNameMappingsEntry(): LaunchFlexTemplateParameter_TransformNameMappingsEntry {
  return { key: "", value: "" };
}

export const LaunchFlexTemplateParameter_TransformNameMappingsEntry: MessageFns<
  LaunchFlexTemplateParameter_TransformNameMappingsEntry
> = {
  encode(
    message: LaunchFlexTemplateParameter_TransformNameMappingsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchFlexTemplateParameter_TransformNameMappingsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchFlexTemplateParameter_TransformNameMappingsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchFlexTemplateParameter_TransformNameMappingsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LaunchFlexTemplateParameter_TransformNameMappingsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<LaunchFlexTemplateParameter_TransformNameMappingsEntry>,
  ): LaunchFlexTemplateParameter_TransformNameMappingsEntry {
    return LaunchFlexTemplateParameter_TransformNameMappingsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<LaunchFlexTemplateParameter_TransformNameMappingsEntry>,
  ): LaunchFlexTemplateParameter_TransformNameMappingsEntry {
    const message = createBaseLaunchFlexTemplateParameter_TransformNameMappingsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFlexTemplateRuntimeEnvironment(): FlexTemplateRuntimeEnvironment {
  return {
    numWorkers: 0,
    maxWorkers: 0,
    zone: "",
    serviceAccountEmail: "",
    tempLocation: "",
    machineType: "",
    additionalExperiments: [],
    network: "",
    subnetwork: "",
    additionalUserLabels: {},
    kmsKeyName: "",
    ipConfiguration: 0,
    workerRegion: "",
    workerZone: "",
    enableStreamingEngine: false,
    flexrsGoal: 0,
    stagingLocation: "",
    sdkContainerImage: "",
    diskSizeGb: 0,
    autoscalingAlgorithm: 0,
    dumpHeapOnOom: false,
    saveHeapDumpsToGcsPath: "",
    launcherMachineType: "",
  };
}

export const FlexTemplateRuntimeEnvironment: MessageFns<FlexTemplateRuntimeEnvironment> = {
  encode(message: FlexTemplateRuntimeEnvironment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numWorkers !== 0) {
      writer.uint32(8).int32(message.numWorkers);
    }
    if (message.maxWorkers !== 0) {
      writer.uint32(16).int32(message.maxWorkers);
    }
    if (message.zone !== "") {
      writer.uint32(26).string(message.zone);
    }
    if (message.serviceAccountEmail !== "") {
      writer.uint32(34).string(message.serviceAccountEmail);
    }
    if (message.tempLocation !== "") {
      writer.uint32(42).string(message.tempLocation);
    }
    if (message.machineType !== "") {
      writer.uint32(50).string(message.machineType);
    }
    for (const v of message.additionalExperiments) {
      writer.uint32(58).string(v!);
    }
    if (message.network !== "") {
      writer.uint32(66).string(message.network);
    }
    if (message.subnetwork !== "") {
      writer.uint32(74).string(message.subnetwork);
    }
    Object.entries(message.additionalUserLabels).forEach(([key, value]) => {
      FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry.encode(
        { key: key as any, value },
        writer.uint32(82).fork(),
      ).join();
    });
    if (message.kmsKeyName !== "") {
      writer.uint32(90).string(message.kmsKeyName);
    }
    if (message.ipConfiguration !== 0) {
      writer.uint32(96).int32(message.ipConfiguration);
    }
    if (message.workerRegion !== "") {
      writer.uint32(106).string(message.workerRegion);
    }
    if (message.workerZone !== "") {
      writer.uint32(114).string(message.workerZone);
    }
    if (message.enableStreamingEngine !== false) {
      writer.uint32(120).bool(message.enableStreamingEngine);
    }
    if (message.flexrsGoal !== 0) {
      writer.uint32(128).int32(message.flexrsGoal);
    }
    if (message.stagingLocation !== "") {
      writer.uint32(138).string(message.stagingLocation);
    }
    if (message.sdkContainerImage !== "") {
      writer.uint32(146).string(message.sdkContainerImage);
    }
    if (message.diskSizeGb !== 0) {
      writer.uint32(160).int32(message.diskSizeGb);
    }
    if (message.autoscalingAlgorithm !== 0) {
      writer.uint32(168).int32(message.autoscalingAlgorithm);
    }
    if (message.dumpHeapOnOom !== false) {
      writer.uint32(176).bool(message.dumpHeapOnOom);
    }
    if (message.saveHeapDumpsToGcsPath !== "") {
      writer.uint32(186).string(message.saveHeapDumpsToGcsPath);
    }
    if (message.launcherMachineType !== "") {
      writer.uint32(194).string(message.launcherMachineType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlexTemplateRuntimeEnvironment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlexTemplateRuntimeEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.numWorkers = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxWorkers = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.zone = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceAccountEmail = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tempLocation = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.machineType = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.additionalExperiments.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.network = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.subnetwork = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.additionalUserLabels[entry10.key] = entry10.value;
          }
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.ipConfiguration = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.workerRegion = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.workerZone = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.enableStreamingEngine = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.flexrsGoal = reader.int32() as any;
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.stagingLocation = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.sdkContainerImage = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.diskSizeGb = reader.int32();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.autoscalingAlgorithm = reader.int32() as any;
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.dumpHeapOnOom = reader.bool();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.saveHeapDumpsToGcsPath = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.launcherMachineType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlexTemplateRuntimeEnvironment {
    return {
      numWorkers: isSet(object.numWorkers) ? globalThis.Number(object.numWorkers) : 0,
      maxWorkers: isSet(object.maxWorkers) ? globalThis.Number(object.maxWorkers) : 0,
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      serviceAccountEmail: isSet(object.serviceAccountEmail) ? globalThis.String(object.serviceAccountEmail) : "",
      tempLocation: isSet(object.tempLocation) ? globalThis.String(object.tempLocation) : "",
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
      additionalExperiments: globalThis.Array.isArray(object?.additionalExperiments)
        ? object.additionalExperiments.map((e: any) => globalThis.String(e))
        : [],
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      subnetwork: isSet(object.subnetwork) ? globalThis.String(object.subnetwork) : "",
      additionalUserLabels: isObject(object.additionalUserLabels)
        ? Object.entries(object.additionalUserLabels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      ipConfiguration: isSet(object.ipConfiguration) ? workerIPAddressConfigurationFromJSON(object.ipConfiguration) : 0,
      workerRegion: isSet(object.workerRegion) ? globalThis.String(object.workerRegion) : "",
      workerZone: isSet(object.workerZone) ? globalThis.String(object.workerZone) : "",
      enableStreamingEngine: isSet(object.enableStreamingEngine)
        ? globalThis.Boolean(object.enableStreamingEngine)
        : false,
      flexrsGoal: isSet(object.flexrsGoal) ? flexResourceSchedulingGoalFromJSON(object.flexrsGoal) : 0,
      stagingLocation: isSet(object.stagingLocation) ? globalThis.String(object.stagingLocation) : "",
      sdkContainerImage: isSet(object.sdkContainerImage) ? globalThis.String(object.sdkContainerImage) : "",
      diskSizeGb: isSet(object.diskSizeGb) ? globalThis.Number(object.diskSizeGb) : 0,
      autoscalingAlgorithm: isSet(object.autoscalingAlgorithm)
        ? autoscalingAlgorithmFromJSON(object.autoscalingAlgorithm)
        : 0,
      dumpHeapOnOom: isSet(object.dumpHeapOnOom) ? globalThis.Boolean(object.dumpHeapOnOom) : false,
      saveHeapDumpsToGcsPath: isSet(object.saveHeapDumpsToGcsPath)
        ? globalThis.String(object.saveHeapDumpsToGcsPath)
        : "",
      launcherMachineType: isSet(object.launcherMachineType) ? globalThis.String(object.launcherMachineType) : "",
    };
  },

  toJSON(message: FlexTemplateRuntimeEnvironment): unknown {
    const obj: any = {};
    if (message.numWorkers !== 0) {
      obj.numWorkers = Math.round(message.numWorkers);
    }
    if (message.maxWorkers !== 0) {
      obj.maxWorkers = Math.round(message.maxWorkers);
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.serviceAccountEmail !== "") {
      obj.serviceAccountEmail = message.serviceAccountEmail;
    }
    if (message.tempLocation !== "") {
      obj.tempLocation = message.tempLocation;
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    if (message.additionalExperiments?.length) {
      obj.additionalExperiments = message.additionalExperiments;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.subnetwork !== "") {
      obj.subnetwork = message.subnetwork;
    }
    if (message.additionalUserLabels) {
      const entries = Object.entries(message.additionalUserLabels);
      if (entries.length > 0) {
        obj.additionalUserLabels = {};
        entries.forEach(([k, v]) => {
          obj.additionalUserLabels[k] = v;
        });
      }
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.ipConfiguration !== 0) {
      obj.ipConfiguration = workerIPAddressConfigurationToJSON(message.ipConfiguration);
    }
    if (message.workerRegion !== "") {
      obj.workerRegion = message.workerRegion;
    }
    if (message.workerZone !== "") {
      obj.workerZone = message.workerZone;
    }
    if (message.enableStreamingEngine !== false) {
      obj.enableStreamingEngine = message.enableStreamingEngine;
    }
    if (message.flexrsGoal !== 0) {
      obj.flexrsGoal = flexResourceSchedulingGoalToJSON(message.flexrsGoal);
    }
    if (message.stagingLocation !== "") {
      obj.stagingLocation = message.stagingLocation;
    }
    if (message.sdkContainerImage !== "") {
      obj.sdkContainerImage = message.sdkContainerImage;
    }
    if (message.diskSizeGb !== 0) {
      obj.diskSizeGb = Math.round(message.diskSizeGb);
    }
    if (message.autoscalingAlgorithm !== 0) {
      obj.autoscalingAlgorithm = autoscalingAlgorithmToJSON(message.autoscalingAlgorithm);
    }
    if (message.dumpHeapOnOom !== false) {
      obj.dumpHeapOnOom = message.dumpHeapOnOom;
    }
    if (message.saveHeapDumpsToGcsPath !== "") {
      obj.saveHeapDumpsToGcsPath = message.saveHeapDumpsToGcsPath;
    }
    if (message.launcherMachineType !== "") {
      obj.launcherMachineType = message.launcherMachineType;
    }
    return obj;
  },

  create(base?: DeepPartial<FlexTemplateRuntimeEnvironment>): FlexTemplateRuntimeEnvironment {
    return FlexTemplateRuntimeEnvironment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FlexTemplateRuntimeEnvironment>): FlexTemplateRuntimeEnvironment {
    const message = createBaseFlexTemplateRuntimeEnvironment();
    message.numWorkers = object.numWorkers ?? 0;
    message.maxWorkers = object.maxWorkers ?? 0;
    message.zone = object.zone ?? "";
    message.serviceAccountEmail = object.serviceAccountEmail ?? "";
    message.tempLocation = object.tempLocation ?? "";
    message.machineType = object.machineType ?? "";
    message.additionalExperiments = object.additionalExperiments?.map((e) => e) || [];
    message.network = object.network ?? "";
    message.subnetwork = object.subnetwork ?? "";
    message.additionalUserLabels = Object.entries(object.additionalUserLabels ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.ipConfiguration = object.ipConfiguration ?? 0;
    message.workerRegion = object.workerRegion ?? "";
    message.workerZone = object.workerZone ?? "";
    message.enableStreamingEngine = object.enableStreamingEngine ?? false;
    message.flexrsGoal = object.flexrsGoal ?? 0;
    message.stagingLocation = object.stagingLocation ?? "";
    message.sdkContainerImage = object.sdkContainerImage ?? "";
    message.diskSizeGb = object.diskSizeGb ?? 0;
    message.autoscalingAlgorithm = object.autoscalingAlgorithm ?? 0;
    message.dumpHeapOnOom = object.dumpHeapOnOom ?? false;
    message.saveHeapDumpsToGcsPath = object.saveHeapDumpsToGcsPath ?? "";
    message.launcherMachineType = object.launcherMachineType ?? "";
    return message;
  },
};

function createBaseFlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry(): FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry {
  return { key: "", value: "" };
}

export const FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry: MessageFns<
  FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry
> = {
  encode(
    message: FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry>,
  ): FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry {
    return FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry>,
  ): FlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry {
    const message = createBaseFlexTemplateRuntimeEnvironment_AdditionalUserLabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLaunchFlexTemplateRequest(): LaunchFlexTemplateRequest {
  return { projectId: "", launchParameter: undefined, location: "", validateOnly: false };
}

export const LaunchFlexTemplateRequest: MessageFns<LaunchFlexTemplateRequest> = {
  encode(message: LaunchFlexTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.launchParameter !== undefined) {
      LaunchFlexTemplateParameter.encode(message.launchParameter, writer.uint32(18).fork()).join();
    }
    if (message.location !== "") {
      writer.uint32(26).string(message.location);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchFlexTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchFlexTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.launchParameter = LaunchFlexTemplateParameter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.location = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchFlexTemplateRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      launchParameter: isSet(object.launchParameter)
        ? LaunchFlexTemplateParameter.fromJSON(object.launchParameter)
        : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: LaunchFlexTemplateRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.launchParameter !== undefined) {
      obj.launchParameter = LaunchFlexTemplateParameter.toJSON(message.launchParameter);
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchFlexTemplateRequest>): LaunchFlexTemplateRequest {
    return LaunchFlexTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchFlexTemplateRequest>): LaunchFlexTemplateRequest {
    const message = createBaseLaunchFlexTemplateRequest();
    message.projectId = object.projectId ?? "";
    message.launchParameter = (object.launchParameter !== undefined && object.launchParameter !== null)
      ? LaunchFlexTemplateParameter.fromPartial(object.launchParameter)
      : undefined;
    message.location = object.location ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseRuntimeEnvironment(): RuntimeEnvironment {
  return {
    numWorkers: 0,
    maxWorkers: 0,
    zone: "",
    serviceAccountEmail: "",
    tempLocation: "",
    bypassTempDirValidation: false,
    machineType: "",
    additionalExperiments: [],
    network: "",
    subnetwork: "",
    additionalUserLabels: {},
    kmsKeyName: "",
    ipConfiguration: 0,
    workerRegion: "",
    workerZone: "",
    enableStreamingEngine: false,
  };
}

export const RuntimeEnvironment: MessageFns<RuntimeEnvironment> = {
  encode(message: RuntimeEnvironment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numWorkers !== 0) {
      writer.uint32(88).int32(message.numWorkers);
    }
    if (message.maxWorkers !== 0) {
      writer.uint32(8).int32(message.maxWorkers);
    }
    if (message.zone !== "") {
      writer.uint32(18).string(message.zone);
    }
    if (message.serviceAccountEmail !== "") {
      writer.uint32(26).string(message.serviceAccountEmail);
    }
    if (message.tempLocation !== "") {
      writer.uint32(34).string(message.tempLocation);
    }
    if (message.bypassTempDirValidation !== false) {
      writer.uint32(40).bool(message.bypassTempDirValidation);
    }
    if (message.machineType !== "") {
      writer.uint32(50).string(message.machineType);
    }
    for (const v of message.additionalExperiments) {
      writer.uint32(58).string(v!);
    }
    if (message.network !== "") {
      writer.uint32(66).string(message.network);
    }
    if (message.subnetwork !== "") {
      writer.uint32(74).string(message.subnetwork);
    }
    Object.entries(message.additionalUserLabels).forEach(([key, value]) => {
      RuntimeEnvironment_AdditionalUserLabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.kmsKeyName !== "") {
      writer.uint32(98).string(message.kmsKeyName);
    }
    if (message.ipConfiguration !== 0) {
      writer.uint32(112).int32(message.ipConfiguration);
    }
    if (message.workerRegion !== "") {
      writer.uint32(122).string(message.workerRegion);
    }
    if (message.workerZone !== "") {
      writer.uint32(130).string(message.workerZone);
    }
    if (message.enableStreamingEngine !== false) {
      writer.uint32(136).bool(message.enableStreamingEngine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeEnvironment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11:
          if (tag !== 88) {
            break;
          }

          message.numWorkers = reader.int32();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxWorkers = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zone = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceAccountEmail = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tempLocation = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.bypassTempDirValidation = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.machineType = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.additionalExperiments.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.network = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.subnetwork = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = RuntimeEnvironment_AdditionalUserLabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.additionalUserLabels[entry10.key] = entry10.value;
          }
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.ipConfiguration = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.workerRegion = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.workerZone = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.enableStreamingEngine = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeEnvironment {
    return {
      numWorkers: isSet(object.numWorkers) ? globalThis.Number(object.numWorkers) : 0,
      maxWorkers: isSet(object.maxWorkers) ? globalThis.Number(object.maxWorkers) : 0,
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      serviceAccountEmail: isSet(object.serviceAccountEmail) ? globalThis.String(object.serviceAccountEmail) : "",
      tempLocation: isSet(object.tempLocation) ? globalThis.String(object.tempLocation) : "",
      bypassTempDirValidation: isSet(object.bypassTempDirValidation)
        ? globalThis.Boolean(object.bypassTempDirValidation)
        : false,
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
      additionalExperiments: globalThis.Array.isArray(object?.additionalExperiments)
        ? object.additionalExperiments.map((e: any) => globalThis.String(e))
        : [],
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      subnetwork: isSet(object.subnetwork) ? globalThis.String(object.subnetwork) : "",
      additionalUserLabels: isObject(object.additionalUserLabels)
        ? Object.entries(object.additionalUserLabels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      ipConfiguration: isSet(object.ipConfiguration) ? workerIPAddressConfigurationFromJSON(object.ipConfiguration) : 0,
      workerRegion: isSet(object.workerRegion) ? globalThis.String(object.workerRegion) : "",
      workerZone: isSet(object.workerZone) ? globalThis.String(object.workerZone) : "",
      enableStreamingEngine: isSet(object.enableStreamingEngine)
        ? globalThis.Boolean(object.enableStreamingEngine)
        : false,
    };
  },

  toJSON(message: RuntimeEnvironment): unknown {
    const obj: any = {};
    if (message.numWorkers !== 0) {
      obj.numWorkers = Math.round(message.numWorkers);
    }
    if (message.maxWorkers !== 0) {
      obj.maxWorkers = Math.round(message.maxWorkers);
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.serviceAccountEmail !== "") {
      obj.serviceAccountEmail = message.serviceAccountEmail;
    }
    if (message.tempLocation !== "") {
      obj.tempLocation = message.tempLocation;
    }
    if (message.bypassTempDirValidation !== false) {
      obj.bypassTempDirValidation = message.bypassTempDirValidation;
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    if (message.additionalExperiments?.length) {
      obj.additionalExperiments = message.additionalExperiments;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.subnetwork !== "") {
      obj.subnetwork = message.subnetwork;
    }
    if (message.additionalUserLabels) {
      const entries = Object.entries(message.additionalUserLabels);
      if (entries.length > 0) {
        obj.additionalUserLabels = {};
        entries.forEach(([k, v]) => {
          obj.additionalUserLabels[k] = v;
        });
      }
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.ipConfiguration !== 0) {
      obj.ipConfiguration = workerIPAddressConfigurationToJSON(message.ipConfiguration);
    }
    if (message.workerRegion !== "") {
      obj.workerRegion = message.workerRegion;
    }
    if (message.workerZone !== "") {
      obj.workerZone = message.workerZone;
    }
    if (message.enableStreamingEngine !== false) {
      obj.enableStreamingEngine = message.enableStreamingEngine;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeEnvironment>): RuntimeEnvironment {
    return RuntimeEnvironment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeEnvironment>): RuntimeEnvironment {
    const message = createBaseRuntimeEnvironment();
    message.numWorkers = object.numWorkers ?? 0;
    message.maxWorkers = object.maxWorkers ?? 0;
    message.zone = object.zone ?? "";
    message.serviceAccountEmail = object.serviceAccountEmail ?? "";
    message.tempLocation = object.tempLocation ?? "";
    message.bypassTempDirValidation = object.bypassTempDirValidation ?? false;
    message.machineType = object.machineType ?? "";
    message.additionalExperiments = object.additionalExperiments?.map((e) => e) || [];
    message.network = object.network ?? "";
    message.subnetwork = object.subnetwork ?? "";
    message.additionalUserLabels = Object.entries(object.additionalUserLabels ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.ipConfiguration = object.ipConfiguration ?? 0;
    message.workerRegion = object.workerRegion ?? "";
    message.workerZone = object.workerZone ?? "";
    message.enableStreamingEngine = object.enableStreamingEngine ?? false;
    return message;
  },
};

function createBaseRuntimeEnvironment_AdditionalUserLabelsEntry(): RuntimeEnvironment_AdditionalUserLabelsEntry {
  return { key: "", value: "" };
}

export const RuntimeEnvironment_AdditionalUserLabelsEntry: MessageFns<RuntimeEnvironment_AdditionalUserLabelsEntry> = {
  encode(
    message: RuntimeEnvironment_AdditionalUserLabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeEnvironment_AdditionalUserLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeEnvironment_AdditionalUserLabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeEnvironment_AdditionalUserLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RuntimeEnvironment_AdditionalUserLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RuntimeEnvironment_AdditionalUserLabelsEntry>,
  ): RuntimeEnvironment_AdditionalUserLabelsEntry {
    return RuntimeEnvironment_AdditionalUserLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RuntimeEnvironment_AdditionalUserLabelsEntry>,
  ): RuntimeEnvironment_AdditionalUserLabelsEntry {
    const message = createBaseRuntimeEnvironment_AdditionalUserLabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseParameterMetadata(): ParameterMetadata {
  return { name: "", label: "", helpText: "", isOptional: false, regexes: [], paramType: 0, customMetadata: {} };
}

export const ParameterMetadata: MessageFns<ParameterMetadata> = {
  encode(message: ParameterMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.helpText !== "") {
      writer.uint32(26).string(message.helpText);
    }
    if (message.isOptional !== false) {
      writer.uint32(32).bool(message.isOptional);
    }
    for (const v of message.regexes) {
      writer.uint32(42).string(v!);
    }
    if (message.paramType !== 0) {
      writer.uint32(48).int32(message.paramType);
    }
    Object.entries(message.customMetadata).forEach(([key, value]) => {
      ParameterMetadata_CustomMetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParameterMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameterMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpText = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isOptional = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.regexes.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.paramType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = ParameterMetadata_CustomMetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.customMetadata[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParameterMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      helpText: isSet(object.helpText) ? globalThis.String(object.helpText) : "",
      isOptional: isSet(object.isOptional) ? globalThis.Boolean(object.isOptional) : false,
      regexes: globalThis.Array.isArray(object?.regexes) ? object.regexes.map((e: any) => globalThis.String(e)) : [],
      paramType: isSet(object.paramType) ? parameterTypeFromJSON(object.paramType) : 0,
      customMetadata: isObject(object.customMetadata)
        ? Object.entries(object.customMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ParameterMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.helpText !== "") {
      obj.helpText = message.helpText;
    }
    if (message.isOptional !== false) {
      obj.isOptional = message.isOptional;
    }
    if (message.regexes?.length) {
      obj.regexes = message.regexes;
    }
    if (message.paramType !== 0) {
      obj.paramType = parameterTypeToJSON(message.paramType);
    }
    if (message.customMetadata) {
      const entries = Object.entries(message.customMetadata);
      if (entries.length > 0) {
        obj.customMetadata = {};
        entries.forEach(([k, v]) => {
          obj.customMetadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ParameterMetadata>): ParameterMetadata {
    return ParameterMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParameterMetadata>): ParameterMetadata {
    const message = createBaseParameterMetadata();
    message.name = object.name ?? "";
    message.label = object.label ?? "";
    message.helpText = object.helpText ?? "";
    message.isOptional = object.isOptional ?? false;
    message.regexes = object.regexes?.map((e) => e) || [];
    message.paramType = object.paramType ?? 0;
    message.customMetadata = Object.entries(object.customMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseParameterMetadata_CustomMetadataEntry(): ParameterMetadata_CustomMetadataEntry {
  return { key: "", value: "" };
}

export const ParameterMetadata_CustomMetadataEntry: MessageFns<ParameterMetadata_CustomMetadataEntry> = {
  encode(message: ParameterMetadata_CustomMetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParameterMetadata_CustomMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameterMetadata_CustomMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParameterMetadata_CustomMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ParameterMetadata_CustomMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ParameterMetadata_CustomMetadataEntry>): ParameterMetadata_CustomMetadataEntry {
    return ParameterMetadata_CustomMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParameterMetadata_CustomMetadataEntry>): ParameterMetadata_CustomMetadataEntry {
    const message = createBaseParameterMetadata_CustomMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTemplateMetadata(): TemplateMetadata {
  return { name: "", description: "", parameters: [] };
}

export const TemplateMetadata: MessageFns<TemplateMetadata> = {
  encode(message: TemplateMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.parameters) {
      ParameterMetadata.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameters.push(ParameterMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => ParameterMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TemplateMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => ParameterMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TemplateMetadata>): TemplateMetadata {
    return TemplateMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TemplateMetadata>): TemplateMetadata {
    const message = createBaseTemplateMetadata();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.parameters = object.parameters?.map((e) => ParameterMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSDKInfo(): SDKInfo {
  return { language: 0, version: "" };
}

export const SDKInfo: MessageFns<SDKInfo> = {
  encode(message: SDKInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== 0) {
      writer.uint32(8).int32(message.language);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SDKInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSDKInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.language = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SDKInfo {
    return {
      language: isSet(object.language) ? sDKInfo_LanguageFromJSON(object.language) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: SDKInfo): unknown {
    const obj: any = {};
    if (message.language !== 0) {
      obj.language = sDKInfo_LanguageToJSON(message.language);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<SDKInfo>): SDKInfo {
    return SDKInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SDKInfo>): SDKInfo {
    const message = createBaseSDKInfo();
    message.language = object.language ?? 0;
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseRuntimeMetadata(): RuntimeMetadata {
  return { sdkInfo: undefined, parameters: [] };
}

export const RuntimeMetadata: MessageFns<RuntimeMetadata> = {
  encode(message: RuntimeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sdkInfo !== undefined) {
      SDKInfo.encode(message.sdkInfo, writer.uint32(10).fork()).join();
    }
    for (const v of message.parameters) {
      ParameterMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sdkInfo = SDKInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parameters.push(ParameterMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeMetadata {
    return {
      sdkInfo: isSet(object.sdkInfo) ? SDKInfo.fromJSON(object.sdkInfo) : undefined,
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => ParameterMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RuntimeMetadata): unknown {
    const obj: any = {};
    if (message.sdkInfo !== undefined) {
      obj.sdkInfo = SDKInfo.toJSON(message.sdkInfo);
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => ParameterMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeMetadata>): RuntimeMetadata {
    return RuntimeMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeMetadata>): RuntimeMetadata {
    const message = createBaseRuntimeMetadata();
    message.sdkInfo = (object.sdkInfo !== undefined && object.sdkInfo !== null)
      ? SDKInfo.fromPartial(object.sdkInfo)
      : undefined;
    message.parameters = object.parameters?.map((e) => ParameterMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateJobFromTemplateRequest(): CreateJobFromTemplateRequest {
  return { projectId: "", jobName: "", gcsPath: undefined, parameters: {}, environment: undefined, location: "" };
}

export const CreateJobFromTemplateRequest: MessageFns<CreateJobFromTemplateRequest> = {
  encode(message: CreateJobFromTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.jobName !== "") {
      writer.uint32(34).string(message.jobName);
    }
    if (message.gcsPath !== undefined) {
      writer.uint32(18).string(message.gcsPath);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      CreateJobFromTemplateRequest_ParametersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.environment !== undefined) {
      RuntimeEnvironment.encode(message.environment, writer.uint32(42).fork()).join();
    }
    if (message.location !== "") {
      writer.uint32(50).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobFromTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobFromTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = CreateJobFromTemplateRequest_ParametersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.parameters[entry3.key] = entry3.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.environment = RuntimeEnvironment.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobFromTemplateRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : undefined,
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environment: isSet(object.environment) ? RuntimeEnvironment.fromJSON(object.environment) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: CreateJobFromTemplateRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.gcsPath !== undefined) {
      obj.gcsPath = message.gcsPath;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.environment !== undefined) {
      obj.environment = RuntimeEnvironment.toJSON(message.environment);
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateJobFromTemplateRequest>): CreateJobFromTemplateRequest {
    return CreateJobFromTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateJobFromTemplateRequest>): CreateJobFromTemplateRequest {
    const message = createBaseCreateJobFromTemplateRequest();
    message.projectId = object.projectId ?? "";
    message.jobName = object.jobName ?? "";
    message.gcsPath = object.gcsPath ?? undefined;
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? RuntimeEnvironment.fromPartial(object.environment)
      : undefined;
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseCreateJobFromTemplateRequest_ParametersEntry(): CreateJobFromTemplateRequest_ParametersEntry {
  return { key: "", value: "" };
}

export const CreateJobFromTemplateRequest_ParametersEntry: MessageFns<CreateJobFromTemplateRequest_ParametersEntry> = {
  encode(
    message: CreateJobFromTemplateRequest_ParametersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobFromTemplateRequest_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobFromTemplateRequest_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobFromTemplateRequest_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateJobFromTemplateRequest_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CreateJobFromTemplateRequest_ParametersEntry>,
  ): CreateJobFromTemplateRequest_ParametersEntry {
    return CreateJobFromTemplateRequest_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateJobFromTemplateRequest_ParametersEntry>,
  ): CreateJobFromTemplateRequest_ParametersEntry {
    const message = createBaseCreateJobFromTemplateRequest_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetTemplateRequest(): GetTemplateRequest {
  return { projectId: "", gcsPath: undefined, view: 0, location: "" };
}

export const GetTemplateRequest: MessageFns<GetTemplateRequest> = {
  encode(message: GetTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.gcsPath !== undefined) {
      writer.uint32(18).string(message.gcsPath);
    }
    if (message.view !== 0) {
      writer.uint32(24).int32(message.view);
    }
    if (message.location !== "") {
      writer.uint32(34).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTemplateRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : undefined,
      view: isSet(object.view) ? getTemplateRequest_TemplateViewFromJSON(object.view) : 0,
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: GetTemplateRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.gcsPath !== undefined) {
      obj.gcsPath = message.gcsPath;
    }
    if (message.view !== 0) {
      obj.view = getTemplateRequest_TemplateViewToJSON(message.view);
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTemplateRequest>): GetTemplateRequest {
    return GetTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTemplateRequest>): GetTemplateRequest {
    const message = createBaseGetTemplateRequest();
    message.projectId = object.projectId ?? "";
    message.gcsPath = object.gcsPath ?? undefined;
    message.view = object.view ?? 0;
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseGetTemplateResponse(): GetTemplateResponse {
  return { status: undefined, metadata: undefined, templateType: 0, runtimeMetadata: undefined };
}

export const GetTemplateResponse: MessageFns<GetTemplateResponse> = {
  encode(message: GetTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      TemplateMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.templateType !== 0) {
      writer.uint32(24).int32(message.templateType);
    }
    if (message.runtimeMetadata !== undefined) {
      RuntimeMetadata.encode(message.runtimeMetadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = TemplateMetadata.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.templateType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.runtimeMetadata = RuntimeMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTemplateResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      metadata: isSet(object.metadata) ? TemplateMetadata.fromJSON(object.metadata) : undefined,
      templateType: isSet(object.templateType) ? getTemplateResponse_TemplateTypeFromJSON(object.templateType) : 0,
      runtimeMetadata: isSet(object.runtimeMetadata) ? RuntimeMetadata.fromJSON(object.runtimeMetadata) : undefined,
    };
  },

  toJSON(message: GetTemplateResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.metadata !== undefined) {
      obj.metadata = TemplateMetadata.toJSON(message.metadata);
    }
    if (message.templateType !== 0) {
      obj.templateType = getTemplateResponse_TemplateTypeToJSON(message.templateType);
    }
    if (message.runtimeMetadata !== undefined) {
      obj.runtimeMetadata = RuntimeMetadata.toJSON(message.runtimeMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTemplateResponse>): GetTemplateResponse {
    return GetTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTemplateResponse>): GetTemplateResponse {
    const message = createBaseGetTemplateResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? TemplateMetadata.fromPartial(object.metadata)
      : undefined;
    message.templateType = object.templateType ?? 0;
    message.runtimeMetadata = (object.runtimeMetadata !== undefined && object.runtimeMetadata !== null)
      ? RuntimeMetadata.fromPartial(object.runtimeMetadata)
      : undefined;
    return message;
  },
};

function createBaseLaunchTemplateParameters(): LaunchTemplateParameters {
  return { jobName: "", parameters: {}, environment: undefined, update: false, transformNameMapping: {} };
}

export const LaunchTemplateParameters: MessageFns<LaunchTemplateParameters> = {
  encode(message: LaunchTemplateParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobName !== "") {
      writer.uint32(10).string(message.jobName);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      LaunchTemplateParameters_ParametersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.environment !== undefined) {
      RuntimeEnvironment.encode(message.environment, writer.uint32(26).fork()).join();
    }
    if (message.update !== false) {
      writer.uint32(32).bool(message.update);
    }
    Object.entries(message.transformNameMapping).forEach(([key, value]) => {
      LaunchTemplateParameters_TransformNameMappingEntry.encode({ key: key as any, value }, writer.uint32(42).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchTemplateParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchTemplateParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = LaunchTemplateParameters_ParametersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.parameters[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.environment = RuntimeEnvironment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.update = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = LaunchTemplateParameters_TransformNameMappingEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.transformNameMapping[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchTemplateParameters {
    return {
      jobName: isSet(object.jobName) ? globalThis.String(object.jobName) : "",
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      environment: isSet(object.environment) ? RuntimeEnvironment.fromJSON(object.environment) : undefined,
      update: isSet(object.update) ? globalThis.Boolean(object.update) : false,
      transformNameMapping: isObject(object.transformNameMapping)
        ? Object.entries(object.transformNameMapping).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LaunchTemplateParameters): unknown {
    const obj: any = {};
    if (message.jobName !== "") {
      obj.jobName = message.jobName;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    if (message.environment !== undefined) {
      obj.environment = RuntimeEnvironment.toJSON(message.environment);
    }
    if (message.update !== false) {
      obj.update = message.update;
    }
    if (message.transformNameMapping) {
      const entries = Object.entries(message.transformNameMapping);
      if (entries.length > 0) {
        obj.transformNameMapping = {};
        entries.forEach(([k, v]) => {
          obj.transformNameMapping[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchTemplateParameters>): LaunchTemplateParameters {
    return LaunchTemplateParameters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchTemplateParameters>): LaunchTemplateParameters {
    const message = createBaseLaunchTemplateParameters();
    message.jobName = object.jobName ?? "";
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? RuntimeEnvironment.fromPartial(object.environment)
      : undefined;
    message.update = object.update ?? false;
    message.transformNameMapping = Object.entries(object.transformNameMapping ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseLaunchTemplateParameters_ParametersEntry(): LaunchTemplateParameters_ParametersEntry {
  return { key: "", value: "" };
}

export const LaunchTemplateParameters_ParametersEntry: MessageFns<LaunchTemplateParameters_ParametersEntry> = {
  encode(message: LaunchTemplateParameters_ParametersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchTemplateParameters_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchTemplateParameters_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchTemplateParameters_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LaunchTemplateParameters_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchTemplateParameters_ParametersEntry>): LaunchTemplateParameters_ParametersEntry {
    return LaunchTemplateParameters_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchTemplateParameters_ParametersEntry>): LaunchTemplateParameters_ParametersEntry {
    const message = createBaseLaunchTemplateParameters_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLaunchTemplateParameters_TransformNameMappingEntry(): LaunchTemplateParameters_TransformNameMappingEntry {
  return { key: "", value: "" };
}

export const LaunchTemplateParameters_TransformNameMappingEntry: MessageFns<
  LaunchTemplateParameters_TransformNameMappingEntry
> = {
  encode(
    message: LaunchTemplateParameters_TransformNameMappingEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchTemplateParameters_TransformNameMappingEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchTemplateParameters_TransformNameMappingEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchTemplateParameters_TransformNameMappingEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LaunchTemplateParameters_TransformNameMappingEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<LaunchTemplateParameters_TransformNameMappingEntry>,
  ): LaunchTemplateParameters_TransformNameMappingEntry {
    return LaunchTemplateParameters_TransformNameMappingEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<LaunchTemplateParameters_TransformNameMappingEntry>,
  ): LaunchTemplateParameters_TransformNameMappingEntry {
    const message = createBaseLaunchTemplateParameters_TransformNameMappingEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseLaunchTemplateRequest(): LaunchTemplateRequest {
  return {
    projectId: "",
    validateOnly: false,
    gcsPath: undefined,
    dynamicTemplate: undefined,
    launchParameters: undefined,
    location: "",
  };
}

export const LaunchTemplateRequest: MessageFns<LaunchTemplateRequest> = {
  encode(message: LaunchTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.gcsPath !== undefined) {
      writer.uint32(26).string(message.gcsPath);
    }
    if (message.dynamicTemplate !== undefined) {
      DynamicTemplateLaunchParams.encode(message.dynamicTemplate, writer.uint32(50).fork()).join();
    }
    if (message.launchParameters !== undefined) {
      LaunchTemplateParameters.encode(message.launchParameters, writer.uint32(34).fork()).join();
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dynamicTemplate = DynamicTemplateLaunchParams.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.launchParameters = LaunchTemplateParameters.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchTemplateRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : undefined,
      dynamicTemplate: isSet(object.dynamicTemplate)
        ? DynamicTemplateLaunchParams.fromJSON(object.dynamicTemplate)
        : undefined,
      launchParameters: isSet(object.launchParameters)
        ? LaunchTemplateParameters.fromJSON(object.launchParameters)
        : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: LaunchTemplateRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.gcsPath !== undefined) {
      obj.gcsPath = message.gcsPath;
    }
    if (message.dynamicTemplate !== undefined) {
      obj.dynamicTemplate = DynamicTemplateLaunchParams.toJSON(message.dynamicTemplate);
    }
    if (message.launchParameters !== undefined) {
      obj.launchParameters = LaunchTemplateParameters.toJSON(message.launchParameters);
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchTemplateRequest>): LaunchTemplateRequest {
    return LaunchTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchTemplateRequest>): LaunchTemplateRequest {
    const message = createBaseLaunchTemplateRequest();
    message.projectId = object.projectId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.gcsPath = object.gcsPath ?? undefined;
    message.dynamicTemplate = (object.dynamicTemplate !== undefined && object.dynamicTemplate !== null)
      ? DynamicTemplateLaunchParams.fromPartial(object.dynamicTemplate)
      : undefined;
    message.launchParameters = (object.launchParameters !== undefined && object.launchParameters !== null)
      ? LaunchTemplateParameters.fromPartial(object.launchParameters)
      : undefined;
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseLaunchTemplateResponse(): LaunchTemplateResponse {
  return { job: undefined };
}

export const LaunchTemplateResponse: MessageFns<LaunchTemplateResponse> = {
  encode(message: LaunchTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchTemplateResponse {
    return { job: isSet(object.job) ? Job.fromJSON(object.job) : undefined };
  },

  toJSON(message: LaunchTemplateResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<LaunchTemplateResponse>): LaunchTemplateResponse {
    return LaunchTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LaunchTemplateResponse>): LaunchTemplateResponse {
    const message = createBaseLaunchTemplateResponse();
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseInvalidTemplateParameters(): InvalidTemplateParameters {
  return { parameterViolations: [] };
}

export const InvalidTemplateParameters: MessageFns<InvalidTemplateParameters> = {
  encode(message: InvalidTemplateParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.parameterViolations) {
      InvalidTemplateParameters_ParameterViolation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidTemplateParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidTemplateParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parameterViolations.push(
            InvalidTemplateParameters_ParameterViolation.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidTemplateParameters {
    return {
      parameterViolations: globalThis.Array.isArray(object?.parameterViolations)
        ? object.parameterViolations.map((e: any) => InvalidTemplateParameters_ParameterViolation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InvalidTemplateParameters): unknown {
    const obj: any = {};
    if (message.parameterViolations?.length) {
      obj.parameterViolations = message.parameterViolations.map((e) =>
        InvalidTemplateParameters_ParameterViolation.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<InvalidTemplateParameters>): InvalidTemplateParameters {
    return InvalidTemplateParameters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InvalidTemplateParameters>): InvalidTemplateParameters {
    const message = createBaseInvalidTemplateParameters();
    message.parameterViolations =
      object.parameterViolations?.map((e) => InvalidTemplateParameters_ParameterViolation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInvalidTemplateParameters_ParameterViolation(): InvalidTemplateParameters_ParameterViolation {
  return { parameter: "", description: "" };
}

export const InvalidTemplateParameters_ParameterViolation: MessageFns<InvalidTemplateParameters_ParameterViolation> = {
  encode(
    message: InvalidTemplateParameters_ParameterViolation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parameter !== "") {
      writer.uint32(10).string(message.parameter);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidTemplateParameters_ParameterViolation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidTemplateParameters_ParameterViolation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parameter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidTemplateParameters_ParameterViolation {
    return {
      parameter: isSet(object.parameter) ? globalThis.String(object.parameter) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: InvalidTemplateParameters_ParameterViolation): unknown {
    const obj: any = {};
    if (message.parameter !== "") {
      obj.parameter = message.parameter;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(
    base?: DeepPartial<InvalidTemplateParameters_ParameterViolation>,
  ): InvalidTemplateParameters_ParameterViolation {
    return InvalidTemplateParameters_ParameterViolation.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<InvalidTemplateParameters_ParameterViolation>,
  ): InvalidTemplateParameters_ParameterViolation {
    const message = createBaseInvalidTemplateParameters_ParameterViolation();
    message.parameter = object.parameter ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseDynamicTemplateLaunchParams(): DynamicTemplateLaunchParams {
  return { gcsPath: "", stagingLocation: "" };
}

export const DynamicTemplateLaunchParams: MessageFns<DynamicTemplateLaunchParams> = {
  encode(message: DynamicTemplateLaunchParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsPath !== "") {
      writer.uint32(10).string(message.gcsPath);
    }
    if (message.stagingLocation !== "") {
      writer.uint32(18).string(message.stagingLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicTemplateLaunchParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicTemplateLaunchParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stagingLocation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicTemplateLaunchParams {
    return {
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : "",
      stagingLocation: isSet(object.stagingLocation) ? globalThis.String(object.stagingLocation) : "",
    };
  },

  toJSON(message: DynamicTemplateLaunchParams): unknown {
    const obj: any = {};
    if (message.gcsPath !== "") {
      obj.gcsPath = message.gcsPath;
    }
    if (message.stagingLocation !== "") {
      obj.stagingLocation = message.stagingLocation;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicTemplateLaunchParams>): DynamicTemplateLaunchParams {
    return DynamicTemplateLaunchParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicTemplateLaunchParams>): DynamicTemplateLaunchParams {
    const message = createBaseDynamicTemplateLaunchParams();
    message.gcsPath = object.gcsPath ?? "";
    message.stagingLocation = object.stagingLocation ?? "";
    return message;
  },
};

/** Provides a method to create Cloud Dataflow jobs from templates. */
export type TemplatesServiceDefinition = typeof TemplatesServiceDefinition;
export const TemplatesServiceDefinition = {
  name: "TemplatesService",
  fullName: "google.dataflow.v1beta3.TemplatesService",
  methods: {
    /** Creates a Cloud Dataflow job from a template. */
    createJobFromTemplate: {
      name: "CreateJobFromTemplate",
      requestType: CreateJobFromTemplateRequest,
      requestStream: false,
      responseType: Job,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              107,
              58,
              1,
              42,
              90,
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              34,
              58,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Launch a template. */
    launchTemplate: {
      name: "LaunchTemplate",
      requestType: LaunchTemplateRequest,
      requestStream: false,
      responseType: LaunchTemplateResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              153,
              1,
              58,
              17,
              108,
              97,
              117,
              110,
              99,
              104,
              95,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              90,
              65,
              58,
              17,
              108,
              97,
              117,
              110,
              99,
              104,
              95,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              34,
              44,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              58,
              108,
              97,
              117,
              110,
              99,
              104,
              34,
              65,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              58,
              108,
              97,
              117,
              110,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Get the template associated with a template. */
    getTemplate: {
      name: "GetTemplate",
      requestType: GetTemplateRequest,
      requestStream: false,
      responseType: GetTemplateResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              109,
              90,
              43,
              18,
              41,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              58,
              103,
              101,
              116,
              18,
              62,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              58,
              103,
              101,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TemplatesServiceImplementation<CallContextExt = {}> {
  /** Creates a Cloud Dataflow job from a template. */
  createJobFromTemplate(
    request: CreateJobFromTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Job>>;
  /** Launch a template. */
  launchTemplate(
    request: LaunchTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LaunchTemplateResponse>>;
  /** Get the template associated with a template. */
  getTemplate(
    request: GetTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetTemplateResponse>>;
}

export interface TemplatesServiceClient<CallOptionsExt = {}> {
  /** Creates a Cloud Dataflow job from a template. */
  createJobFromTemplate(
    request: DeepPartial<CreateJobFromTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Job>;
  /** Launch a template. */
  launchTemplate(
    request: DeepPartial<LaunchTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LaunchTemplateResponse>;
  /** Get the template associated with a template. */
  getTemplate(
    request: DeepPartial<GetTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetTemplateResponse>;
}

/** Provides a service for Flex templates. This feature is not ready yet. */
export type FlexTemplatesServiceDefinition = typeof FlexTemplatesServiceDefinition;
export const FlexTemplatesServiceDefinition = {
  name: "FlexTemplatesService",
  fullName: "google.dataflow.v1beta3.FlexTemplatesService",
  methods: {
    /** Launch a job with a FlexTemplate. */
    launchFlexTemplate: {
      name: "LaunchFlexTemplate",
      requestType: LaunchFlexTemplateRequest,
      requestStream: false,
      responseType: LaunchFlexTemplateResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              102,
              108,
              101,
              120,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              58,
              108,
              97,
              117,
              110,
              99,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FlexTemplatesServiceImplementation<CallContextExt = {}> {
  /** Launch a job with a FlexTemplate. */
  launchFlexTemplate(
    request: LaunchFlexTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LaunchFlexTemplateResponse>>;
}

export interface FlexTemplatesServiceClient<CallOptionsExt = {}> {
  /** Launch a job with a FlexTemplate. */
  launchFlexTemplate(
    request: DeepPartial<LaunchFlexTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LaunchFlexTemplateResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
