// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: grafeas/v1/intoto_statement.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct, Value } from "../../google/protobuf/struct.js";
import { Timestamp } from "../../google/protobuf/timestamp.js";
import { InTotoProvenance } from "./intoto_provenance.js";
import { SlsaProvenance } from "./slsa_provenance.js";
import { SlsaProvenanceZeroTwo } from "./slsa_provenance_zero_two.js";

export const protobufPackage = "grafeas.v1";

/**
 * Spec defined at
 * https://github.com/in-toto/attestation/tree/main/spec#statement The
 * serialized InTotoStatement will be stored as Envelope.payload.
 * Envelope.payloadType is always "application/vnd.in-toto+json".
 */
export interface InTotoStatement {
  /** Always `https://in-toto.io/Statement/v0.1`. */
  type: string;
  subject: Subject[];
  /** `https://slsa.dev/provenance/v0.1` for SlsaProvenance. */
  predicateType: string;
  provenance?: InTotoProvenance | undefined;
  slsaProvenance?: SlsaProvenance | undefined;
  slsaProvenanceZeroTwo?: SlsaProvenanceZeroTwo | undefined;
}

export interface Subject {
  name: string;
  /**
   * `"<ALGORITHM>": "<HEX_VALUE>"`
   * Algorithms can be e.g. sha256, sha512
   * See
   * https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
   */
  digest: { [key: string]: string };
}

export interface Subject_DigestEntry {
  key: string;
  value: string;
}

export interface InTotoSlsaProvenanceV1 {
  /**
   * InToto spec defined at
   * https://github.com/in-toto/attestation/tree/main/spec#statement
   */
  type: string;
  subject: Subject[];
  predicateType: string;
  predicate: InTotoSlsaProvenanceV1_SlsaProvenanceV1 | undefined;
}

/**
 * Keep in sync with schema at
 * https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto
 * Builder renamed to ProvenanceBuilder because of Java conflicts.
 */
export interface InTotoSlsaProvenanceV1_SlsaProvenanceV1 {
  buildDefinition: InTotoSlsaProvenanceV1_BuildDefinition | undefined;
  runDetails: InTotoSlsaProvenanceV1_RunDetails | undefined;
}

export interface InTotoSlsaProvenanceV1_BuildDefinition {
  buildType: string;
  externalParameters: { [key: string]: any } | undefined;
  internalParameters: { [key: string]: any } | undefined;
  resolvedDependencies: InTotoSlsaProvenanceV1_ResourceDescriptor[];
}

export interface InTotoSlsaProvenanceV1_ResourceDescriptor {
  name: string;
  uri: string;
  digest: { [key: string]: string };
  content: Buffer;
  downloadLocation: string;
  mediaType: string;
  annotations: { [key: string]: any | undefined };
}

export interface InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry {
  key: string;
  value: string;
}

export interface InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry {
  key: string;
  value: any | undefined;
}

export interface InTotoSlsaProvenanceV1_RunDetails {
  builder: InTotoSlsaProvenanceV1_ProvenanceBuilder | undefined;
  metadata: InTotoSlsaProvenanceV1_BuildMetadata | undefined;
  byproducts: InTotoSlsaProvenanceV1_ResourceDescriptor[];
}

export interface InTotoSlsaProvenanceV1_ProvenanceBuilder {
  id: string;
  version: { [key: string]: string };
  builderDependencies: InTotoSlsaProvenanceV1_ResourceDescriptor[];
}

export interface InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry {
  key: string;
  value: string;
}

export interface InTotoSlsaProvenanceV1_BuildMetadata {
  invocationId: string;
  startedOn: Date | undefined;
  finishedOn: Date | undefined;
}

function createBaseInTotoStatement(): InTotoStatement {
  return {
    type: "",
    subject: [],
    predicateType: "",
    provenance: undefined,
    slsaProvenance: undefined,
    slsaProvenanceZeroTwo: undefined,
  };
}

export const InTotoStatement: MessageFns<InTotoStatement> = {
  encode(message: InTotoStatement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.subject) {
      Subject.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.predicateType !== "") {
      writer.uint32(26).string(message.predicateType);
    }
    if (message.provenance !== undefined) {
      InTotoProvenance.encode(message.provenance, writer.uint32(34).fork()).join();
    }
    if (message.slsaProvenance !== undefined) {
      SlsaProvenance.encode(message.slsaProvenance, writer.uint32(42).fork()).join();
    }
    if (message.slsaProvenanceZeroTwo !== undefined) {
      SlsaProvenanceZeroTwo.encode(message.slsaProvenanceZeroTwo, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoStatement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoStatement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subject.push(Subject.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.predicateType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.provenance = InTotoProvenance.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.slsaProvenance = SlsaProvenance.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.slsaProvenanceZeroTwo = SlsaProvenanceZeroTwo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoStatement {
    return {
      type: isSet(object._type) ? globalThis.String(object._type) : "",
      subject: globalThis.Array.isArray(object?.subject) ? object.subject.map((e: any) => Subject.fromJSON(e)) : [],
      predicateType: isSet(object.predicateType) ? globalThis.String(object.predicateType) : "",
      provenance: isSet(object.provenance) ? InTotoProvenance.fromJSON(object.provenance) : undefined,
      slsaProvenance: isSet(object.slsaProvenance) ? SlsaProvenance.fromJSON(object.slsaProvenance) : undefined,
      slsaProvenanceZeroTwo: isSet(object.slsaProvenanceZeroTwo)
        ? SlsaProvenanceZeroTwo.fromJSON(object.slsaProvenanceZeroTwo)
        : undefined,
    };
  },

  toJSON(message: InTotoStatement): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj._type = message.type;
    }
    if (message.subject?.length) {
      obj.subject = message.subject.map((e) => Subject.toJSON(e));
    }
    if (message.predicateType !== "") {
      obj.predicateType = message.predicateType;
    }
    if (message.provenance !== undefined) {
      obj.provenance = InTotoProvenance.toJSON(message.provenance);
    }
    if (message.slsaProvenance !== undefined) {
      obj.slsaProvenance = SlsaProvenance.toJSON(message.slsaProvenance);
    }
    if (message.slsaProvenanceZeroTwo !== undefined) {
      obj.slsaProvenanceZeroTwo = SlsaProvenanceZeroTwo.toJSON(message.slsaProvenanceZeroTwo);
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoStatement>): InTotoStatement {
    return InTotoStatement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoStatement>): InTotoStatement {
    const message = createBaseInTotoStatement();
    message.type = object.type ?? "";
    message.subject = object.subject?.map((e) => Subject.fromPartial(e)) || [];
    message.predicateType = object.predicateType ?? "";
    message.provenance = (object.provenance !== undefined && object.provenance !== null)
      ? InTotoProvenance.fromPartial(object.provenance)
      : undefined;
    message.slsaProvenance = (object.slsaProvenance !== undefined && object.slsaProvenance !== null)
      ? SlsaProvenance.fromPartial(object.slsaProvenance)
      : undefined;
    message.slsaProvenanceZeroTwo =
      (object.slsaProvenanceZeroTwo !== undefined && object.slsaProvenanceZeroTwo !== null)
        ? SlsaProvenanceZeroTwo.fromPartial(object.slsaProvenanceZeroTwo)
        : undefined;
    return message;
  },
};

function createBaseSubject(): Subject {
  return { name: "", digest: {} };
}

export const Subject: MessageFns<Subject> = {
  encode(message: Subject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.digest).forEach(([key, value]) => {
      Subject_DigestEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Subject_DigestEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.digest[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subject {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      digest: isObject(object.digest)
        ? Object.entries(object.digest).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Subject): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.digest) {
      const entries = Object.entries(message.digest);
      if (entries.length > 0) {
        obj.digest = {};
        entries.forEach(([k, v]) => {
          obj.digest[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Subject>): Subject {
    return Subject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Subject>): Subject {
    const message = createBaseSubject();
    message.name = object.name ?? "";
    message.digest = Object.entries(object.digest ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSubject_DigestEntry(): Subject_DigestEntry {
  return { key: "", value: "" };
}

export const Subject_DigestEntry: MessageFns<Subject_DigestEntry> = {
  encode(message: Subject_DigestEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subject_DigestEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubject_DigestEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subject_DigestEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Subject_DigestEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Subject_DigestEntry>): Subject_DigestEntry {
    return Subject_DigestEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Subject_DigestEntry>): Subject_DigestEntry {
    const message = createBaseSubject_DigestEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1(): InTotoSlsaProvenanceV1 {
  return { type: "", subject: [], predicateType: "", predicate: undefined };
}

export const InTotoSlsaProvenanceV1: MessageFns<InTotoSlsaProvenanceV1> = {
  encode(message: InTotoSlsaProvenanceV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.subject) {
      Subject.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.predicateType !== "") {
      writer.uint32(26).string(message.predicateType);
    }
    if (message.predicate !== undefined) {
      InTotoSlsaProvenanceV1_SlsaProvenanceV1.encode(message.predicate, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subject.push(Subject.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.predicateType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.predicate = InTotoSlsaProvenanceV1_SlsaProvenanceV1.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1 {
    return {
      type: isSet(object._type) ? globalThis.String(object._type) : "",
      subject: globalThis.Array.isArray(object?.subject) ? object.subject.map((e: any) => Subject.fromJSON(e)) : [],
      predicateType: isSet(object.predicateType) ? globalThis.String(object.predicateType) : "",
      predicate: isSet(object.predicate)
        ? InTotoSlsaProvenanceV1_SlsaProvenanceV1.fromJSON(object.predicate)
        : undefined,
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj._type = message.type;
    }
    if (message.subject?.length) {
      obj.subject = message.subject.map((e) => Subject.toJSON(e));
    }
    if (message.predicateType !== "") {
      obj.predicateType = message.predicateType;
    }
    if (message.predicate !== undefined) {
      obj.predicate = InTotoSlsaProvenanceV1_SlsaProvenanceV1.toJSON(message.predicate);
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1>): InTotoSlsaProvenanceV1 {
    return InTotoSlsaProvenanceV1.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoSlsaProvenanceV1>): InTotoSlsaProvenanceV1 {
    const message = createBaseInTotoSlsaProvenanceV1();
    message.type = object.type ?? "";
    message.subject = object.subject?.map((e) => Subject.fromPartial(e)) || [];
    message.predicateType = object.predicateType ?? "";
    message.predicate = (object.predicate !== undefined && object.predicate !== null)
      ? InTotoSlsaProvenanceV1_SlsaProvenanceV1.fromPartial(object.predicate)
      : undefined;
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_SlsaProvenanceV1(): InTotoSlsaProvenanceV1_SlsaProvenanceV1 {
  return { buildDefinition: undefined, runDetails: undefined };
}

export const InTotoSlsaProvenanceV1_SlsaProvenanceV1: MessageFns<InTotoSlsaProvenanceV1_SlsaProvenanceV1> = {
  encode(message: InTotoSlsaProvenanceV1_SlsaProvenanceV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buildDefinition !== undefined) {
      InTotoSlsaProvenanceV1_BuildDefinition.encode(message.buildDefinition, writer.uint32(10).fork()).join();
    }
    if (message.runDetails !== undefined) {
      InTotoSlsaProvenanceV1_RunDetails.encode(message.runDetails, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_SlsaProvenanceV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_SlsaProvenanceV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.buildDefinition = InTotoSlsaProvenanceV1_BuildDefinition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runDetails = InTotoSlsaProvenanceV1_RunDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_SlsaProvenanceV1 {
    return {
      buildDefinition: isSet(object.buildDefinition)
        ? InTotoSlsaProvenanceV1_BuildDefinition.fromJSON(object.buildDefinition)
        : undefined,
      runDetails: isSet(object.runDetails) ? InTotoSlsaProvenanceV1_RunDetails.fromJSON(object.runDetails) : undefined,
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_SlsaProvenanceV1): unknown {
    const obj: any = {};
    if (message.buildDefinition !== undefined) {
      obj.buildDefinition = InTotoSlsaProvenanceV1_BuildDefinition.toJSON(message.buildDefinition);
    }
    if (message.runDetails !== undefined) {
      obj.runDetails = InTotoSlsaProvenanceV1_RunDetails.toJSON(message.runDetails);
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1_SlsaProvenanceV1>): InTotoSlsaProvenanceV1_SlsaProvenanceV1 {
    return InTotoSlsaProvenanceV1_SlsaProvenanceV1.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoSlsaProvenanceV1_SlsaProvenanceV1>): InTotoSlsaProvenanceV1_SlsaProvenanceV1 {
    const message = createBaseInTotoSlsaProvenanceV1_SlsaProvenanceV1();
    message.buildDefinition = (object.buildDefinition !== undefined && object.buildDefinition !== null)
      ? InTotoSlsaProvenanceV1_BuildDefinition.fromPartial(object.buildDefinition)
      : undefined;
    message.runDetails = (object.runDetails !== undefined && object.runDetails !== null)
      ? InTotoSlsaProvenanceV1_RunDetails.fromPartial(object.runDetails)
      : undefined;
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_BuildDefinition(): InTotoSlsaProvenanceV1_BuildDefinition {
  return { buildType: "", externalParameters: undefined, internalParameters: undefined, resolvedDependencies: [] };
}

export const InTotoSlsaProvenanceV1_BuildDefinition: MessageFns<InTotoSlsaProvenanceV1_BuildDefinition> = {
  encode(message: InTotoSlsaProvenanceV1_BuildDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buildType !== "") {
      writer.uint32(10).string(message.buildType);
    }
    if (message.externalParameters !== undefined) {
      Struct.encode(Struct.wrap(message.externalParameters), writer.uint32(18).fork()).join();
    }
    if (message.internalParameters !== undefined) {
      Struct.encode(Struct.wrap(message.internalParameters), writer.uint32(26).fork()).join();
    }
    for (const v of message.resolvedDependencies) {
      InTotoSlsaProvenanceV1_ResourceDescriptor.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_BuildDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_BuildDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.buildType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.internalParameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resolvedDependencies.push(InTotoSlsaProvenanceV1_ResourceDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_BuildDefinition {
    return {
      buildType: isSet(object.buildType) ? globalThis.String(object.buildType) : "",
      externalParameters: isObject(object.externalParameters) ? object.externalParameters : undefined,
      internalParameters: isObject(object.internalParameters) ? object.internalParameters : undefined,
      resolvedDependencies: globalThis.Array.isArray(object?.resolvedDependencies)
        ? object.resolvedDependencies.map((e: any) => InTotoSlsaProvenanceV1_ResourceDescriptor.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_BuildDefinition): unknown {
    const obj: any = {};
    if (message.buildType !== "") {
      obj.buildType = message.buildType;
    }
    if (message.externalParameters !== undefined) {
      obj.externalParameters = message.externalParameters;
    }
    if (message.internalParameters !== undefined) {
      obj.internalParameters = message.internalParameters;
    }
    if (message.resolvedDependencies?.length) {
      obj.resolvedDependencies = message.resolvedDependencies.map((e) =>
        InTotoSlsaProvenanceV1_ResourceDescriptor.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1_BuildDefinition>): InTotoSlsaProvenanceV1_BuildDefinition {
    return InTotoSlsaProvenanceV1_BuildDefinition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoSlsaProvenanceV1_BuildDefinition>): InTotoSlsaProvenanceV1_BuildDefinition {
    const message = createBaseInTotoSlsaProvenanceV1_BuildDefinition();
    message.buildType = object.buildType ?? "";
    message.externalParameters = object.externalParameters ?? undefined;
    message.internalParameters = object.internalParameters ?? undefined;
    message.resolvedDependencies =
      object.resolvedDependencies?.map((e) => InTotoSlsaProvenanceV1_ResourceDescriptor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_ResourceDescriptor(): InTotoSlsaProvenanceV1_ResourceDescriptor {
  return {
    name: "",
    uri: "",
    digest: {},
    content: Buffer.alloc(0),
    downloadLocation: "",
    mediaType: "",
    annotations: {},
  };
}

export const InTotoSlsaProvenanceV1_ResourceDescriptor: MessageFns<InTotoSlsaProvenanceV1_ResourceDescriptor> = {
  encode(message: InTotoSlsaProvenanceV1_ResourceDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    Object.entries(message.digest).forEach(([key, value]) => {
      InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry.encode({ key: key as any, value }, writer.uint32(26).fork())
        .join();
    });
    if (message.content.length !== 0) {
      writer.uint32(34).bytes(message.content);
    }
    if (message.downloadLocation !== "") {
      writer.uint32(42).string(message.downloadLocation);
    }
    if (message.mediaType !== "") {
      writer.uint32(50).string(message.mediaType);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      if (value !== undefined) {
        InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry.encode(
          { key: key as any, value },
          writer.uint32(58).fork(),
        ).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_ResourceDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_ResourceDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.digest[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.content = Buffer.from(reader.bytes());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.downloadLocation = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.mediaType = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.annotations[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_ResourceDescriptor {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      digest: isObject(object.digest)
        ? Object.entries(object.digest).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      content: isSet(object.content) ? Buffer.from(bytesFromBase64(object.content)) : Buffer.alloc(0),
      downloadLocation: isSet(object.downloadLocation) ? globalThis.String(object.downloadLocation) : "",
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_ResourceDescriptor): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.digest) {
      const entries = Object.entries(message.digest);
      if (entries.length > 0) {
        obj.digest = {};
        entries.forEach(([k, v]) => {
          obj.digest[k] = v;
        });
      }
    }
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    if (message.downloadLocation !== "") {
      obj.downloadLocation = message.downloadLocation;
    }
    if (message.mediaType !== "") {
      obj.mediaType = message.mediaType;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1_ResourceDescriptor>): InTotoSlsaProvenanceV1_ResourceDescriptor {
    return InTotoSlsaProvenanceV1_ResourceDescriptor.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<InTotoSlsaProvenanceV1_ResourceDescriptor>,
  ): InTotoSlsaProvenanceV1_ResourceDescriptor {
    const message = createBaseInTotoSlsaProvenanceV1_ResourceDescriptor();
    message.name = object.name ?? "";
    message.uri = object.uri ?? "";
    message.digest = Object.entries(object.digest ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.content = object.content ?? Buffer.alloc(0);
    message.downloadLocation = object.downloadLocation ?? "";
    message.mediaType = object.mediaType ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry(): InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry {
  return { key: "", value: "" };
}

export const InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry: MessageFns<
  InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry
> = {
  encode(
    message: InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry>,
  ): InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry {
    return InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry>,
  ): InTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry {
    const message = createBaseInTotoSlsaProvenanceV1_ResourceDescriptor_DigestEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry(): InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry {
  return { key: "", value: undefined };
}

export const InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry: MessageFns<
  InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry
> = {
  encode(
    message: InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry>,
  ): InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry {
    return InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry>,
  ): InTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry {
    const message = createBaseInTotoSlsaProvenanceV1_ResourceDescriptor_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_RunDetails(): InTotoSlsaProvenanceV1_RunDetails {
  return { builder: undefined, metadata: undefined, byproducts: [] };
}

export const InTotoSlsaProvenanceV1_RunDetails: MessageFns<InTotoSlsaProvenanceV1_RunDetails> = {
  encode(message: InTotoSlsaProvenanceV1_RunDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.builder !== undefined) {
      InTotoSlsaProvenanceV1_ProvenanceBuilder.encode(message.builder, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      InTotoSlsaProvenanceV1_BuildMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    for (const v of message.byproducts) {
      InTotoSlsaProvenanceV1_ResourceDescriptor.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_RunDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_RunDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.builder = InTotoSlsaProvenanceV1_ProvenanceBuilder.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = InTotoSlsaProvenanceV1_BuildMetadata.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.byproducts.push(InTotoSlsaProvenanceV1_ResourceDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_RunDetails {
    return {
      builder: isSet(object.builder) ? InTotoSlsaProvenanceV1_ProvenanceBuilder.fromJSON(object.builder) : undefined,
      metadata: isSet(object.metadata) ? InTotoSlsaProvenanceV1_BuildMetadata.fromJSON(object.metadata) : undefined,
      byproducts: globalThis.Array.isArray(object?.byproducts)
        ? object.byproducts.map((e: any) => InTotoSlsaProvenanceV1_ResourceDescriptor.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_RunDetails): unknown {
    const obj: any = {};
    if (message.builder !== undefined) {
      obj.builder = InTotoSlsaProvenanceV1_ProvenanceBuilder.toJSON(message.builder);
    }
    if (message.metadata !== undefined) {
      obj.metadata = InTotoSlsaProvenanceV1_BuildMetadata.toJSON(message.metadata);
    }
    if (message.byproducts?.length) {
      obj.byproducts = message.byproducts.map((e) => InTotoSlsaProvenanceV1_ResourceDescriptor.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1_RunDetails>): InTotoSlsaProvenanceV1_RunDetails {
    return InTotoSlsaProvenanceV1_RunDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoSlsaProvenanceV1_RunDetails>): InTotoSlsaProvenanceV1_RunDetails {
    const message = createBaseInTotoSlsaProvenanceV1_RunDetails();
    message.builder = (object.builder !== undefined && object.builder !== null)
      ? InTotoSlsaProvenanceV1_ProvenanceBuilder.fromPartial(object.builder)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? InTotoSlsaProvenanceV1_BuildMetadata.fromPartial(object.metadata)
      : undefined;
    message.byproducts = object.byproducts?.map((e) => InTotoSlsaProvenanceV1_ResourceDescriptor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_ProvenanceBuilder(): InTotoSlsaProvenanceV1_ProvenanceBuilder {
  return { id: "", version: {}, builderDependencies: [] };
}

export const InTotoSlsaProvenanceV1_ProvenanceBuilder: MessageFns<InTotoSlsaProvenanceV1_ProvenanceBuilder> = {
  encode(message: InTotoSlsaProvenanceV1_ProvenanceBuilder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    Object.entries(message.version).forEach(([key, value]) => {
      InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    for (const v of message.builderDependencies) {
      InTotoSlsaProvenanceV1_ResourceDescriptor.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_ProvenanceBuilder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_ProvenanceBuilder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.version[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.builderDependencies.push(InTotoSlsaProvenanceV1_ResourceDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_ProvenanceBuilder {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      version: isObject(object.version)
        ? Object.entries(object.version).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      builderDependencies: globalThis.Array.isArray(object?.builderDependencies)
        ? object.builderDependencies.map((e: any) => InTotoSlsaProvenanceV1_ResourceDescriptor.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_ProvenanceBuilder): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.version) {
      const entries = Object.entries(message.version);
      if (entries.length > 0) {
        obj.version = {};
        entries.forEach(([k, v]) => {
          obj.version[k] = v;
        });
      }
    }
    if (message.builderDependencies?.length) {
      obj.builderDependencies = message.builderDependencies.map((e) =>
        InTotoSlsaProvenanceV1_ResourceDescriptor.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1_ProvenanceBuilder>): InTotoSlsaProvenanceV1_ProvenanceBuilder {
    return InTotoSlsaProvenanceV1_ProvenanceBuilder.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoSlsaProvenanceV1_ProvenanceBuilder>): InTotoSlsaProvenanceV1_ProvenanceBuilder {
    const message = createBaseInTotoSlsaProvenanceV1_ProvenanceBuilder();
    message.id = object.id ?? "";
    message.version = Object.entries(object.version ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.builderDependencies =
      object.builderDependencies?.map((e) => InTotoSlsaProvenanceV1_ResourceDescriptor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry(): InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry {
  return { key: "", value: "" };
}

export const InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry: MessageFns<
  InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry
> = {
  encode(
    message: InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry>,
  ): InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry {
    return InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry>,
  ): InTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry {
    const message = createBaseInTotoSlsaProvenanceV1_ProvenanceBuilder_VersionEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInTotoSlsaProvenanceV1_BuildMetadata(): InTotoSlsaProvenanceV1_BuildMetadata {
  return { invocationId: "", startedOn: undefined, finishedOn: undefined };
}

export const InTotoSlsaProvenanceV1_BuildMetadata: MessageFns<InTotoSlsaProvenanceV1_BuildMetadata> = {
  encode(message: InTotoSlsaProvenanceV1_BuildMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invocationId !== "") {
      writer.uint32(10).string(message.invocationId);
    }
    if (message.startedOn !== undefined) {
      Timestamp.encode(toTimestamp(message.startedOn), writer.uint32(18).fork()).join();
    }
    if (message.finishedOn !== undefined) {
      Timestamp.encode(toTimestamp(message.finishedOn), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTotoSlsaProvenanceV1_BuildMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTotoSlsaProvenanceV1_BuildMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startedOn = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.finishedOn = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTotoSlsaProvenanceV1_BuildMetadata {
    return {
      invocationId: isSet(object.invocationId) ? globalThis.String(object.invocationId) : "",
      startedOn: isSet(object.startedOn) ? fromJsonTimestamp(object.startedOn) : undefined,
      finishedOn: isSet(object.finishedOn) ? fromJsonTimestamp(object.finishedOn) : undefined,
    };
  },

  toJSON(message: InTotoSlsaProvenanceV1_BuildMetadata): unknown {
    const obj: any = {};
    if (message.invocationId !== "") {
      obj.invocationId = message.invocationId;
    }
    if (message.startedOn !== undefined) {
      obj.startedOn = message.startedOn.toISOString();
    }
    if (message.finishedOn !== undefined) {
      obj.finishedOn = message.finishedOn.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<InTotoSlsaProvenanceV1_BuildMetadata>): InTotoSlsaProvenanceV1_BuildMetadata {
    return InTotoSlsaProvenanceV1_BuildMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTotoSlsaProvenanceV1_BuildMetadata>): InTotoSlsaProvenanceV1_BuildMetadata {
    const message = createBaseInTotoSlsaProvenanceV1_BuildMetadata();
    message.invocationId = object.invocationId ?? "";
    message.startedOn = object.startedOn ?? undefined;
    message.finishedOn = object.finishedOn ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
