// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/webkey/v3alpha/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "zitadel.resources.webkey.v3alpha";

export interface WebKeyRSAConfig {
  /** bit size of the RSA key */
  bits: WebKeyRSAConfig_RSABits;
  /** signing algrithm used */
  hasher: WebKeyRSAConfig_RSAHasher;
}

export enum WebKeyRSAConfig_RSABits {
  RSA_BITS_UNSPECIFIED = 0,
  RSA_BITS_2048 = 1,
  RSA_BITS_3072 = 2,
  RSA_BITS_4096 = 3,
  UNRECOGNIZED = -1,
}

export function webKeyRSAConfig_RSABitsFromJSON(object: any): WebKeyRSAConfig_RSABits {
  switch (object) {
    case 0:
    case "RSA_BITS_UNSPECIFIED":
      return WebKeyRSAConfig_RSABits.RSA_BITS_UNSPECIFIED;
    case 1:
    case "RSA_BITS_2048":
      return WebKeyRSAConfig_RSABits.RSA_BITS_2048;
    case 2:
    case "RSA_BITS_3072":
      return WebKeyRSAConfig_RSABits.RSA_BITS_3072;
    case 3:
    case "RSA_BITS_4096":
      return WebKeyRSAConfig_RSABits.RSA_BITS_4096;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebKeyRSAConfig_RSABits.UNRECOGNIZED;
  }
}

export function webKeyRSAConfig_RSABitsToJSON(object: WebKeyRSAConfig_RSABits): string {
  switch (object) {
    case WebKeyRSAConfig_RSABits.RSA_BITS_UNSPECIFIED:
      return "RSA_BITS_UNSPECIFIED";
    case WebKeyRSAConfig_RSABits.RSA_BITS_2048:
      return "RSA_BITS_2048";
    case WebKeyRSAConfig_RSABits.RSA_BITS_3072:
      return "RSA_BITS_3072";
    case WebKeyRSAConfig_RSABits.RSA_BITS_4096:
      return "RSA_BITS_4096";
    case WebKeyRSAConfig_RSABits.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebKeyRSAConfig_RSAHasher {
  RSA_HASHER_UNSPECIFIED = 0,
  RSA_HASHER_SHA256 = 1,
  RSA_HASHER_SHA384 = 2,
  RSA_HASHER_SHA512 = 3,
  UNRECOGNIZED = -1,
}

export function webKeyRSAConfig_RSAHasherFromJSON(object: any): WebKeyRSAConfig_RSAHasher {
  switch (object) {
    case 0:
    case "RSA_HASHER_UNSPECIFIED":
      return WebKeyRSAConfig_RSAHasher.RSA_HASHER_UNSPECIFIED;
    case 1:
    case "RSA_HASHER_SHA256":
      return WebKeyRSAConfig_RSAHasher.RSA_HASHER_SHA256;
    case 2:
    case "RSA_HASHER_SHA384":
      return WebKeyRSAConfig_RSAHasher.RSA_HASHER_SHA384;
    case 3:
    case "RSA_HASHER_SHA512":
      return WebKeyRSAConfig_RSAHasher.RSA_HASHER_SHA512;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebKeyRSAConfig_RSAHasher.UNRECOGNIZED;
  }
}

export function webKeyRSAConfig_RSAHasherToJSON(object: WebKeyRSAConfig_RSAHasher): string {
  switch (object) {
    case WebKeyRSAConfig_RSAHasher.RSA_HASHER_UNSPECIFIED:
      return "RSA_HASHER_UNSPECIFIED";
    case WebKeyRSAConfig_RSAHasher.RSA_HASHER_SHA256:
      return "RSA_HASHER_SHA256";
    case WebKeyRSAConfig_RSAHasher.RSA_HASHER_SHA384:
      return "RSA_HASHER_SHA384";
    case WebKeyRSAConfig_RSAHasher.RSA_HASHER_SHA512:
      return "RSA_HASHER_SHA512";
    case WebKeyRSAConfig_RSAHasher.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebKeyECDSAConfig {
  curve: WebKeyECDSAConfig_ECDSACurve;
}

export enum WebKeyECDSAConfig_ECDSACurve {
  ECDSA_CURVE_UNSPECIFIED = 0,
  ECDSA_CURVE_P256 = 1,
  ECDSA_CURVE_P384 = 2,
  ECDSA_CURVE_P512 = 3,
  UNRECOGNIZED = -1,
}

export function webKeyECDSAConfig_ECDSACurveFromJSON(object: any): WebKeyECDSAConfig_ECDSACurve {
  switch (object) {
    case 0:
    case "ECDSA_CURVE_UNSPECIFIED":
      return WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_UNSPECIFIED;
    case 1:
    case "ECDSA_CURVE_P256":
      return WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_P256;
    case 2:
    case "ECDSA_CURVE_P384":
      return WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_P384;
    case 3:
    case "ECDSA_CURVE_P512":
      return WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_P512;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebKeyECDSAConfig_ECDSACurve.UNRECOGNIZED;
  }
}

export function webKeyECDSAConfig_ECDSACurveToJSON(object: WebKeyECDSAConfig_ECDSACurve): string {
  switch (object) {
    case WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_UNSPECIFIED:
      return "ECDSA_CURVE_UNSPECIFIED";
    case WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_P256:
      return "ECDSA_CURVE_P256";
    case WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_P384:
      return "ECDSA_CURVE_P384";
    case WebKeyECDSAConfig_ECDSACurve.ECDSA_CURVE_P512:
      return "ECDSA_CURVE_P512";
    case WebKeyECDSAConfig_ECDSACurve.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebKeyED25519Config {
}

function createBaseWebKeyRSAConfig(): WebKeyRSAConfig {
  return { bits: 0, hasher: 0 };
}

export const WebKeyRSAConfig: MessageFns<WebKeyRSAConfig> = {
  encode(message: WebKeyRSAConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bits !== 0) {
      writer.uint32(8).int32(message.bits);
    }
    if (message.hasher !== 0) {
      writer.uint32(16).int32(message.hasher);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebKeyRSAConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebKeyRSAConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.bits = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasher = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebKeyRSAConfig {
    return {
      bits: isSet(object.bits) ? webKeyRSAConfig_RSABitsFromJSON(object.bits) : 0,
      hasher: isSet(object.hasher) ? webKeyRSAConfig_RSAHasherFromJSON(object.hasher) : 0,
    };
  },

  toJSON(message: WebKeyRSAConfig): unknown {
    const obj: any = {};
    if (message.bits !== 0) {
      obj.bits = webKeyRSAConfig_RSABitsToJSON(message.bits);
    }
    if (message.hasher !== 0) {
      obj.hasher = webKeyRSAConfig_RSAHasherToJSON(message.hasher);
    }
    return obj;
  },

  create(base?: DeepPartial<WebKeyRSAConfig>): WebKeyRSAConfig {
    return WebKeyRSAConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebKeyRSAConfig>): WebKeyRSAConfig {
    const message = createBaseWebKeyRSAConfig();
    message.bits = object.bits ?? 0;
    message.hasher = object.hasher ?? 0;
    return message;
  },
};

function createBaseWebKeyECDSAConfig(): WebKeyECDSAConfig {
  return { curve: 0 };
}

export const WebKeyECDSAConfig: MessageFns<WebKeyECDSAConfig> = {
  encode(message: WebKeyECDSAConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.curve !== 0) {
      writer.uint32(8).int32(message.curve);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebKeyECDSAConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebKeyECDSAConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.curve = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebKeyECDSAConfig {
    return { curve: isSet(object.curve) ? webKeyECDSAConfig_ECDSACurveFromJSON(object.curve) : 0 };
  },

  toJSON(message: WebKeyECDSAConfig): unknown {
    const obj: any = {};
    if (message.curve !== 0) {
      obj.curve = webKeyECDSAConfig_ECDSACurveToJSON(message.curve);
    }
    return obj;
  },

  create(base?: DeepPartial<WebKeyECDSAConfig>): WebKeyECDSAConfig {
    return WebKeyECDSAConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebKeyECDSAConfig>): WebKeyECDSAConfig {
    const message = createBaseWebKeyECDSAConfig();
    message.curve = object.curve ?? 0;
    return message;
  },
};

function createBaseWebKeyED25519Config(): WebKeyED25519Config {
  return {};
}

export const WebKeyED25519Config: MessageFns<WebKeyED25519Config> = {
  encode(_: WebKeyED25519Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebKeyED25519Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebKeyED25519Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WebKeyED25519Config {
    return {};
  },

  toJSON(_: WebKeyED25519Config): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WebKeyED25519Config>): WebKeyED25519Config {
    return WebKeyED25519Config.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WebKeyED25519Config>): WebKeyED25519Config {
    const message = createBaseWebKeyED25519Config();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
