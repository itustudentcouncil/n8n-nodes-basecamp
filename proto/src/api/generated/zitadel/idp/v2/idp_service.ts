// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/idp/v2/idp_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { IDP } from "./idp.js";

export const protobufPackage = "zitadel.idp.v2";

export interface GetIDPByIDRequest {
  id: string;
}

export interface GetIDPByIDResponse {
  idp: IDP | undefined;
}

function createBaseGetIDPByIDRequest(): GetIDPByIDRequest {
  return { id: "" };
}

export const GetIDPByIDRequest: MessageFns<GetIDPByIDRequest> = {
  encode(message: GetIDPByIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIDPByIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIDPByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIDPByIDRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetIDPByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetIDPByIDRequest>): GetIDPByIDRequest {
    return GetIDPByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIDPByIDRequest>): GetIDPByIDRequest {
    const message = createBaseGetIDPByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetIDPByIDResponse(): GetIDPByIDResponse {
  return { idp: undefined };
}

export const GetIDPByIDResponse: MessageFns<GetIDPByIDResponse> = {
  encode(message: GetIDPByIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idp !== undefined) {
      IDP.encode(message.idp, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIDPByIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIDPByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = IDP.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIDPByIDResponse {
    return { idp: isSet(object.idp) ? IDP.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetIDPByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = IDP.toJSON(message.idp);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIDPByIDResponse>): GetIDPByIDResponse {
    return GetIDPByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIDPByIDResponse>): GetIDPByIDResponse {
    const message = createBaseGetIDPByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? IDP.fromPartial(object.idp) : undefined;
    return message;
  },
};

export type IdentityProviderServiceDefinition = typeof IdentityProviderServiceDefinition;
export const IdentityProviderServiceDefinition = {
  name: "IdentityProviderService",
  fullName: "zitadel.idp.v2.IdentityProviderService",
  methods: {
    /**
     * Get identity provider (IdP) by ID
     *
     * Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.
     */
    getIDPByID: {
      name: "GetIDPByID",
      requestType: GetIDPByIDRequest,
      requestStream: false,
      responseType: GetIDPByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([13, 74, 11, 10, 3, 50, 48, 48, 18, 4, 10, 2, 79, 75])],
          400010: [Buffer.from([17, 10, 15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [Buffer.from([15, 18, 13, 47, 118, 50, 47, 105, 100, 112, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
  },
} as const;

export interface IdentityProviderServiceImplementation<CallContextExt = {}> {
  /**
   * Get identity provider (IdP) by ID
   *
   * Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.
   */
  getIDPByID(
    request: GetIDPByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIDPByIDResponse>>;
}

export interface IdentityProviderServiceClient<CallOptionsExt = {}> {
  /**
   * Get identity provider (IdP) by ID
   *
   * Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.
   */
  getIDPByID(
    request: DeepPartial<GetIDPByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIDPByIDResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
