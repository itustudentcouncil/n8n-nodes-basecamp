// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../google/protobuf/duration.js";
import { Timestamp } from "../google/protobuf/timestamp.js";
import { AggregateType, Event, EventType } from "./event.js";
import {
  AzureADTenant,
  IDP,
  IDPFieldName,
  iDPFieldNameFromJSON,
  iDPFieldNameToJSON,
  IDPIDQuery,
  IDPLoginPolicyLink,
  IDPNameQuery,
  IDPStylingType,
  iDPStylingTypeFromJSON,
  iDPStylingTypeToJSON,
  IDPUserLink,
  LDAPAttributes,
  OIDCMappingField,
  oIDCMappingFieldFromJSON,
  oIDCMappingFieldToJSON,
  Options,
  Provider,
  SAMLBinding,
  sAMLBindingFromJSON,
  sAMLBindingToJSON,
  SAMLNameIDFormat,
  sAMLNameIDFormatFromJSON,
  sAMLNameIDFormatToJSON,
} from "./idp.js";
import {
  Domain,
  DomainFieldName,
  domainFieldNameFromJSON,
  domainFieldNameToJSON,
  DomainSearchQuery,
  InstanceDetail,
  TrustedDomain,
  TrustedDomainSearchQuery,
} from "./instance.js";
import {
  AddCustomLabelPolicyRequest,
  AddCustomLockoutPolicyRequest,
  AddCustomLoginPolicyRequest,
  AddCustomPasswordComplexityPolicyRequest,
  AddCustomPrivacyPolicyRequest,
  AddOrgMemberRequest,
  AddOrgRequest,
  AddProjectGrantMemberRequest,
  AddProjectMemberRequest,
  AddProjectRoleRequest,
  AddUserGrantRequest,
  SetCustomDomainClaimedMessageTextRequest,
  SetCustomInitMessageTextRequest,
  SetCustomInviteUserMessageTextRequest,
  SetCustomLoginTextsRequest as SetCustomLoginTextsRequest2,
  SetCustomPasswordlessRegistrationMessageTextRequest,
  SetCustomPasswordResetMessageTextRequest,
  SetCustomVerifyEmailMessageTextRequest,
  SetCustomVerifyEmailOTPMessageTextRequest,
  SetCustomVerifyPhoneMessageTextRequest,
  SetCustomVerifySMSOTPMessageTextRequest,
  SetTriggerActionsRequest,
  SetUserMetadataRequest,
} from "./management.js";
import { Member, SearchQuery } from "./member.js";
import {
  Milestone,
  MilestoneFieldName,
  milestoneFieldNameFromJSON,
  milestoneFieldNameToJSON,
  MilestoneQuery,
} from "./milestone/v1/milestone.js";
import { ListDetails, ListQuery, ObjectDetails } from "./object.js";
import { Domain as Domain3, Org, OrgFieldName, orgFieldNameFromJSON, orgFieldNameToJSON, OrgQuery } from "./org.js";
import {
  DomainPolicy,
  LabelPolicy,
  LockoutPolicy,
  LoginPolicy,
  MultiFactorType,
  multiFactorTypeFromJSON,
  multiFactorTypeToJSON,
  NotificationPolicy,
  OrgIAMPolicy,
  PasswordAgePolicy,
  PasswordComplexityPolicy,
  PasswordlessType,
  passwordlessTypeFromJSON,
  passwordlessTypeToJSON,
  PrivacyPolicy,
  SecondFactorType,
  secondFactorTypeFromJSON,
  secondFactorTypeToJSON,
  ThemeMode,
  themeModeFromJSON,
  themeModeToJSON,
} from "./policy.js";
import {
  DebugNotificationProvider,
  EmailProvider,
  OIDCSettings,
  SecretGenerator,
  SecretGeneratorQuery,
  SecretGeneratorType,
  secretGeneratorTypeFromJSON,
  secretGeneratorTypeToJSON,
  SecurityPolicy,
  SMSProvider,
  SMTPConfig,
} from "./settings.js";
import {
  EmailVerificationDoneScreenText,
  EmailVerificationScreenText,
  ExternalRegistrationUserOverviewScreenText,
  ExternalUserNotFoundScreenText,
  FooterText,
  InitializeUserDoneScreenText,
  InitializeUserScreenText,
  InitMFADoneScreenText,
  InitMFAOTPScreenText,
  InitMFAPromptScreenText,
  InitMFAU2FScreenText,
  InitPasswordDoneScreenText,
  InitPasswordScreenText,
  LinkingUserDoneScreenText,
  LinkingUserPromptScreenText,
  LoginCustomText,
  LoginScreenText,
  LogoutDoneScreenText,
  MessageCustomText,
  MFAProvidersText,
  PasswordChangeDoneScreenText,
  PasswordChangeScreenText,
  PasswordlessPromptScreenText,
  PasswordlessRegistrationDoneScreenText,
  PasswordlessRegistrationScreenText,
  PasswordlessScreenText,
  PasswordResetDoneScreenText,
  PasswordScreenText,
  RegistrationOptionScreenText,
  RegistrationOrgScreenText,
  RegistrationUserScreenText,
  SelectAccountScreenText,
  SuccessLoginScreenText,
  UsernameChangeDoneScreenText,
  UsernameChangeScreenText,
  VerifyMFAOTPScreenText,
  VerifyMFAU2FScreenText,
} from "./text.js";
import { Gender, genderFromJSON, genderToJSON } from "./user.js";
import {
  DataAction,
  DataAPIApplication,
  DataAppKey,
  DataHumanUser,
  DataJWTIDP,
  DataMachineKey,
  DataMachineUser,
  DataOIDCApplication,
  DataOIDCIDP,
  DataProject,
  DataProjectGrant,
  ImportDataOrg as ImportDataOrg1,
} from "./v1.js";

export const protobufPackage = "zitadel.admin.v1";

/** This is an empty request */
export interface HealthzRequest {
}

/** This is an empty response */
export interface HealthzResponse {
}

/** This is an empty request */
export interface GetSupportedLanguagesRequest {
}

export interface GetSupportedLanguagesResponse {
  languages: string[];
}

/** This is an empty request */
export interface GetAllowedLanguagesRequest {
}

export interface GetAllowedLanguagesResponse {
  languages: string[];
}

export interface SetDefaultLanguageRequest {
  language: string;
}

export interface SetDefaultLanguageResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetDefaultLanguageRequest {
}

export interface GetDefaultLanguageResponse {
  language: string;
}

export interface SetDefaultOrgRequest {
  orgId: string;
}

export interface SetDefaultOrgResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetDefaultOrgRequest {
}

export interface GetDefaultOrgResponse {
  org: Org | undefined;
}

/** This is an empty request */
export interface GetMyInstanceRequest {
}

export interface GetMyInstanceResponse {
  instance: InstanceDetail | undefined;
}

export interface ListInstanceDomainsRequest {
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: DomainFieldName;
  /** criteria the client is looking for */
  queries: DomainSearchQuery[];
}

export interface ListInstanceDomainsResponse {
  details: ListDetails | undefined;
  sortingColumn: DomainFieldName;
  result: Domain[];
}

export interface ListInstanceTrustedDomainsRequest {
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: DomainFieldName;
  /** criteria the client is looking for */
  queries: TrustedDomainSearchQuery[];
}

export interface ListInstanceTrustedDomainsResponse {
  details: ListDetails | undefined;
  sortingColumn: DomainFieldName;
  result: TrustedDomain[];
}

export interface AddInstanceTrustedDomainRequest {
  domain: string;
}

export interface AddInstanceTrustedDomainResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveInstanceTrustedDomainRequest {
  domain: string;
}

export interface RemoveInstanceTrustedDomainResponse {
  details: ObjectDetails | undefined;
}

export interface ListSecretGeneratorsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SecretGeneratorQuery[];
}

export interface ListSecretGeneratorsResponse {
  details: ListDetails | undefined;
  result: SecretGenerator[];
}

export interface GetSecretGeneratorRequest {
  generatorType: SecretGeneratorType;
}

export interface GetSecretGeneratorResponse {
  secretGenerator: SecretGenerator | undefined;
}

export interface UpdateSecretGeneratorRequest {
  generatorType: SecretGeneratorType;
  length: number;
  expiry: Duration | undefined;
  includeLowerLetters: boolean;
  includeUpperLetters: boolean;
  includeDigits: boolean;
  includeSymbols: boolean;
}

export interface UpdateSecretGeneratorResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetSMTPConfigRequest {
}

export interface GetSMTPConfigResponse {
  smtpConfig: SMTPConfig | undefined;
}

export interface GetSMTPConfigByIdRequest {
  id: string;
}

export interface GetSMTPConfigByIdResponse {
  smtpConfig: SMTPConfig | undefined;
}

export interface ListSMTPConfigsRequest {
  query: ListQuery | undefined;
}

export interface ListSMTPConfigsResponse {
  details: ListDetails | undefined;
  result: SMTPConfig[];
}

export interface AddSMTPConfigRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  password: string;
  replyToAddress: string;
  description: string;
}

export interface AddSMTPConfigResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateSMTPConfigRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  replyToAddress: string;
  password: string;
  description: string;
  id: string;
}

export interface UpdateSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSMTPConfigPasswordRequest {
  password: string;
  id: string;
}

export interface UpdateSMTPConfigPasswordResponse {
  details: ObjectDetails | undefined;
}

export interface ActivateSMTPConfigRequest {
  id: string;
}

export interface ActivateSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateSMTPConfigRequest {
  id: string;
}

export interface DeactivateSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSMTPConfigRequest {
  id: string;
}

export interface RemoveSMTPConfigResponse {
  details: ObjectDetails | undefined;
}

export interface TestSMTPConfigByIdRequest {
  id: string;
  receiverAddress: string;
}

/** This is an empty response */
export interface TestSMTPConfigByIdResponse {
}

export interface TestSMTPConfigRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  password: string;
  receiverAddress: string;
  id: string;
}

/** This is an empty response */
export interface TestSMTPConfigResponse {
}

/** This is an empty request */
export interface GetEmailProviderRequest {
}

export interface GetEmailProviderResponse {
  config: EmailProvider | undefined;
}

export interface GetEmailProviderByIdRequest {
  id: string;
}

export interface GetEmailProviderByIdResponse {
  config: EmailProvider | undefined;
}

export interface ListEmailProvidersRequest {
  query: ListQuery | undefined;
}

export interface ListEmailProvidersResponse {
  details: ListDetails | undefined;
  result: EmailProvider[];
}

export interface AddEmailProviderSMTPRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  password: string;
  replyToAddress: string;
  description: string;
}

export interface AddEmailProviderSMTPResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateEmailProviderSMTPRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  replyToAddress: string;
  password: string;
  description: string;
  id: string;
}

export interface UpdateEmailProviderSMTPResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateEmailProviderSMTPPasswordRequest {
  password: string;
  id: string;
}

export interface UpdateEmailProviderSMTPPasswordResponse {
  details: ObjectDetails | undefined;
}

export interface AddEmailProviderHTTPRequest {
  endpoint: string;
  description: string;
}

export interface AddEmailProviderHTTPResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateEmailProviderHTTPRequest {
  id: string;
  endpoint: string;
  description: string;
}

export interface UpdateEmailProviderHTTPResponse {
  details: ObjectDetails | undefined;
}

export interface ActivateEmailProviderRequest {
  id: string;
}

export interface ActivateEmailProviderResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateEmailProviderRequest {
  id: string;
}

export interface DeactivateEmailProviderResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveEmailProviderRequest {
  id: string;
}

export interface RemoveEmailProviderResponse {
  details: ObjectDetails | undefined;
}

export interface TestEmailProviderSMTPByIdRequest {
  id: string;
  receiverAddress: string;
}

/** This is an empty response */
export interface TestEmailProviderSMTPByIdResponse {
}

export interface TestEmailProviderSMTPRequest {
  senderAddress: string;
  senderName: string;
  tls: boolean;
  host: string;
  user: string;
  password: string;
  receiverAddress: string;
  id: string;
}

/** This is an empty response */
export interface TestEmailProviderSMTPResponse {
}

export interface ListSMSProvidersRequest {
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListSMSProvidersResponse {
  details: ListDetails | undefined;
  result: SMSProvider[];
}

export interface GetSMSProviderRequest {
  id: string;
}

export interface GetSMSProviderResponse {
  config: SMSProvider | undefined;
}

export interface AddSMSProviderTwilioRequest {
  sid: string;
  token: string;
  senderNumber: string;
  description: string;
  verifyServiceSid: string;
}

export interface AddSMSProviderTwilioResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateSMSProviderTwilioRequest {
  id: string;
  sid: string;
  senderNumber: string;
  description: string;
  verifyServiceSid: string;
}

export interface UpdateSMSProviderTwilioResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSMSProviderTwilioTokenRequest {
  id: string;
  token: string;
}

export interface UpdateSMSProviderTwilioTokenResponse {
  details: ObjectDetails | undefined;
}

export interface AddSMSProviderHTTPRequest {
  endpoint: string;
  description: string;
}

export interface AddSMSProviderHTTPResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateSMSProviderHTTPRequest {
  id: string;
  endpoint: string;
  description: string;
}

export interface UpdateSMSProviderHTTPResponse {
  details: ObjectDetails | undefined;
}

export interface ActivateSMSProviderRequest {
  id: string;
}

export interface ActivateSMSProviderResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateSMSProviderRequest {
  id: string;
}

export interface DeactivateSMSProviderResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSMSProviderRequest {
  id: string;
}

export interface RemoveSMSProviderResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetFileSystemNotificationProviderRequest {
}

export interface GetFileSystemNotificationProviderResponse {
  provider: DebugNotificationProvider | undefined;
}

/** This is an empty request */
export interface GetLogNotificationProviderRequest {
}

export interface GetLogNotificationProviderResponse {
  provider: DebugNotificationProvider | undefined;
}

/** This is an empty request */
export interface GetOIDCSettingsRequest {
}

export interface GetOIDCSettingsResponse {
  settings: OIDCSettings | undefined;
}

export interface AddOIDCSettingsRequest {
  accessTokenLifetime: Duration | undefined;
  idTokenLifetime: Duration | undefined;
  refreshTokenIdleExpiration: Duration | undefined;
  refreshTokenExpiration: Duration | undefined;
}

export interface AddOIDCSettingsResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOIDCSettingsRequest {
  accessTokenLifetime: Duration | undefined;
  idTokenLifetime: Duration | undefined;
  refreshTokenIdleExpiration: Duration | undefined;
  refreshTokenExpiration: Duration | undefined;
}

export interface UpdateOIDCSettingsResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetSecurityPolicyRequest {
}

export interface GetSecurityPolicyResponse {
  policy: SecurityPolicy | undefined;
}

export interface SetSecurityPolicyRequest {
  /** states if iframe embedding is enabled or disabled */
  enableIframeEmbedding: boolean;
  /** origins allowed loading ZITADEL in an iframe if enable_iframe_embedding is true */
  allowedOrigins: string[];
  /** allows users to impersonate other users. The impersonator needs the appropriate `*_IMPERSONATOR` roles assigned as well" */
  enableImpersonation: boolean;
}

export interface SetSecurityPolicyResponse {
  details: ObjectDetails | undefined;
}

/**
 * if name or domain is already in use, org is not unique
 * at least one argument has to be provided
 */
export interface IsOrgUniqueRequest {
  name: string;
  domain: string;
}

export interface IsOrgUniqueResponse {
  isUnique: boolean;
}

export interface GetOrgByIDRequest {
  id: string;
}

export interface GetOrgByIDResponse {
  org: Org | undefined;
}

export interface ListOrgsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: OrgFieldName;
  /** criteria the client is looking for */
  queries: OrgQuery[];
}

export interface ListOrgsResponse {
  details: ListDetails | undefined;
  sortingColumn: OrgFieldName;
  result: Org[];
}

export interface SetUpOrgRequest {
  org:
    | SetUpOrgRequest_Org
    | undefined;
  /** oneof field for the user managing the organization */
  human?:
    | SetUpOrgRequest_Human
    | undefined;
  /** specify Org Member Roles for the provided user (default is ORG_OWNER if roles are empty) */
  roles: string[];
}

export interface SetUpOrgRequest_Org {
  name: string;
  domain: string;
}

export interface SetUpOrgRequest_Human {
  userName: string;
  profile: SetUpOrgRequest_Human_Profile | undefined;
  email: SetUpOrgRequest_Human_Email | undefined;
  phone: SetUpOrgRequest_Human_Phone | undefined;
  password: string;
}

export interface SetUpOrgRequest_Human_Profile {
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface SetUpOrgRequest_Human_Email {
  email: string;
  isEmailVerified: boolean;
}

export interface SetUpOrgRequest_Human_Phone {
  /** has to be a global number */
  phone: string;
  isPhoneVerified: boolean;
}

export interface SetUpOrgResponse {
  details: ObjectDetails | undefined;
  orgId: string;
  userId: string;
}

export interface RemoveOrgRequest {
  orgId: string;
}

export interface RemoveOrgResponse {
  details: ObjectDetails | undefined;
}

export interface GetIDPByIDRequest {
  id: string;
}

export interface GetIDPByIDResponse {
  idp: IDP | undefined;
}

export interface ListIDPsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: IDPFieldName;
  /** criteria the client is looking for */
  queries: IDPQuery[];
}

export interface IDPQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
}

export interface ListIDPsResponse {
  details: ListDetails | undefined;
  sortingColumn: IDPFieldName;
  result: IDP[];
}

export interface AddOIDCIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  clientId: string;
  clientSecret: string;
  issuer: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
  autoRegister: boolean;
}

export interface AddOIDCIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface AddJWTIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
  autoRegister: boolean;
}

export interface AddJWTIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface UpdateIDPRequest {
  idpId: string;
  name: string;
  stylingType: IDPStylingType;
  autoRegister: boolean;
}

export interface UpdateIDPResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateIDPRequest {
  idpId: string;
}

export interface DeactivateIDPResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateIDPRequest {
  idpId: string;
}

export interface ReactivateIDPResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIDPRequest {
  idpId: string;
}

export interface RemoveIDPResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateIDPOIDCConfigRequest {
  idpId: string;
  issuer: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
}

export interface UpdateIDPOIDCConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateIDPJWTConfigRequest {
  idpId: string;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
}

export interface UpdateIDPJWTConfigResponse {
  details: ObjectDetails | undefined;
}

export interface ListProvidersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProviderQuery[];
}

export interface ProviderQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
}

export interface ListProvidersResponse {
  details: ListDetails | undefined;
  result: Provider[];
}

export interface GetProviderByIDRequest {
  id: string;
}

export interface GetProviderByIDResponse {
  idp: Provider | undefined;
}

export interface AddGenericOAuthProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface AddGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOAuthProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface UpdateGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGenericOIDCProviderRequest {
  name: string;
  issuer: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface AddGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOIDCProviderRequest {
  id: string;
  name: string;
  issuer: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface UpdateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface MigrateGenericOIDCProviderRequest {
  id: string;
  azure?: AddAzureADProviderRequest | undefined;
  google?: AddGoogleProviderRequest | undefined;
}

export interface MigrateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddJWTProviderRequest {
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface AddJWTProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateJWTProviderRequest {
  id: string;
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface UpdateJWTProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddAzureADProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddAzureADProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateAzureADProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateAzureADProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubProviderRequest {
  /** GitHub will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubEnterpriseServerProviderRequest {
  clientId: string;
  name: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubEnterpriseServerProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabProviderRequest {
  /** GitLab will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabSelfHostedProviderRequest {
  issuer: string;
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabSelfHostedProviderRequest {
  id: string;
  issuer: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGoogleProviderRequest {
  /** Google will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGoogleProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGoogleProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGoogleProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddLDAPProviderRequest {
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface AddLDAPProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateLDAPProviderRequest {
  id: string;
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface UpdateLDAPProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddAppleProviderRequest {
  /** Apple will be used as default, if no name is provided */
  name: string;
  clientId: string;
  teamId: string;
  keyId: string;
  privateKey: Buffer;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddAppleProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateAppleProviderRequest {
  id: string;
  name: string;
  clientId: string;
  teamId: string;
  keyId: string;
  privateKey: Buffer;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateAppleProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddSAMLProviderRequest {
  name: string;
  /** Metadata of the SAML identity provider. */
  metadataXml?:
    | Buffer
    | undefined;
  /** Url to the metadata of the SAML identity provider. */
  metadataUrl?:
    | string
    | undefined;
  /** Binding which defines the type of communication with the identity provider. */
  binding: SAMLBinding;
  /** Boolean which defines if the authentication requests are signed. */
  withSignedRequest: boolean;
  providerOptions:
    | Options
    | undefined;
  /** Optionally specify the `nameid-format` requested. */
  nameIdFormat?:
    | SAMLNameIDFormat
    | undefined;
  /**
   * Optionally specify the name of the attribute, which will be used to map the user
   * in case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
   */
  transientMappingAttributeName?: string | undefined;
}

export interface AddSAMLProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateSAMLProviderRequest {
  id: string;
  name: string;
  metadataXml?:
    | Buffer
    | undefined;
  /** Url to the metadata of the SAML identity provider */
  metadataUrl?:
    | string
    | undefined;
  /** Binding which defines the type of communication with the identity provider. */
  binding: SAMLBinding;
  /** Boolean which defines if the authentication requests are signed */
  withSignedRequest: boolean;
  providerOptions:
    | Options
    | undefined;
  /** Optionally specify the `nameid-format` requested. */
  nameIdFormat?:
    | SAMLNameIDFormat
    | undefined;
  /**
   * Optionally specify the name of the attribute, which will be used to map the user
   * in case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
   */
  transientMappingAttributeName?: string | undefined;
}

export interface UpdateSAMLProviderResponse {
  details: ObjectDetails | undefined;
}

export interface RegenerateSAMLProviderCertificateRequest {
  id: string;
}

export interface RegenerateSAMLProviderCertificateResponse {
  details: ObjectDetails | undefined;
}

export interface DeleteProviderRequest {
  id: string;
}

export interface DeleteProviderResponse {
  details: ObjectDetails | undefined;
}

export interface GetOrgIAMPolicyRequest {
}

export interface GetOrgIAMPolicyResponse {
  policy: OrgIAMPolicy | undefined;
}

export interface UpdateOrgIAMPolicyRequest {
  userLoginMustBeDomain: boolean;
}

export interface UpdateOrgIAMPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomOrgIAMPolicyRequest {
  orgId: string;
}

export interface GetCustomOrgIAMPolicyResponse {
  policy:
    | OrgIAMPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.OrgIAMPolicy */
  isDefault: boolean;
}

export interface AddCustomOrgIAMPolicyRequest {
  orgId: string;
  /** the username has to end with the domain of its organization (uniqueness is organization based) */
  userLoginMustBeDomain: boolean;
}

export interface AddCustomOrgIAMPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomOrgIAMPolicyRequest {
  orgId: string;
  userLoginMustBeDomain: boolean;
}

export interface UpdateCustomOrgIAMPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomOrgIAMPolicyToDefaultRequest {
  orgId: string;
}

export interface ResetCustomOrgIAMPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDomainPolicyRequest {
}

export interface GetDomainPolicyResponse {
  policy: DomainPolicy | undefined;
}

export interface UpdateDomainPolicyRequest {
  userLoginMustBeDomain: boolean;
  validateOrgDomains: boolean;
  smtpSenderAddressMatchesInstanceDomain: boolean;
}

export interface UpdateDomainPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomDomainPolicyRequest {
  orgId: string;
}

export interface GetCustomDomainPolicyResponse {
  policy:
    | DomainPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.DomainPolicy */
  isDefault: boolean;
}

export interface AddCustomDomainPolicyRequest {
  orgId: string;
  /** the username has to end with the domain of its organization (uniqueness is organization based) */
  userLoginMustBeDomain: boolean;
  validateOrgDomains: boolean;
  smtpSenderAddressMatchesInstanceDomain: boolean;
}

export interface AddCustomDomainPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomDomainPolicyRequest {
  orgId: string;
  userLoginMustBeDomain: boolean;
  validateOrgDomains: boolean;
  smtpSenderAddressMatchesInstanceDomain: boolean;
}

export interface UpdateCustomDomainPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomDomainPolicyToDefaultRequest {
  orgId: string;
}

export interface ResetCustomDomainPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLabelPolicyRequest {
}

export interface GetLabelPolicyResponse {
  policy: LabelPolicy | undefined;
}

/** This is an empty request */
export interface GetPreviewLabelPolicyRequest {
}

export interface GetPreviewLabelPolicyResponse {
  policy: LabelPolicy | undefined;
}

export interface UpdateLabelPolicyRequest {
  primaryColor: string;
  hideLoginNameSuffix: boolean;
  warnColor: string;
  backgroundColor: string;
  fontColor: string;
  primaryColorDark: string;
  backgroundColorDark: string;
  warnColorDark: string;
  fontColorDark: string;
  disableWatermark: boolean;
  themeMode: ThemeMode;
}

export interface UpdateLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ActivateLabelPolicyRequest {
}

export interface ActivateLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyLogoRequest {
}

export interface RemoveLabelPolicyLogoResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyLogoDarkRequest {
}

export interface RemoveLabelPolicyLogoDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyIconRequest {
}

export interface RemoveLabelPolicyIconResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyIconDarkRequest {
}

export interface RemoveLabelPolicyIconDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveLabelPolicyFontRequest {
}

export interface RemoveLabelPolicyFontResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLoginPolicyRequest {
}

export interface GetLoginPolicyResponse {
  policy: LoginPolicy | undefined;
}

export interface UpdateLoginPolicyRequest {
  allowUsernamePassword: boolean;
  allowRegister: boolean;
  allowExternalIdp: boolean;
  forceMfa: boolean;
  passwordlessType: PasswordlessType;
  hidePasswordReset: boolean;
  ignoreUnknownUsernames: boolean;
  defaultRedirectUri: string;
  passwordCheckLifetime: Duration | undefined;
  externalLoginCheckLifetime: Duration | undefined;
  mfaInitSkipLifetime: Duration | undefined;
  secondFactorCheckLifetime: Duration | undefined;
  multiFactorCheckLifetime:
    | Duration
    | undefined;
  /** If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success. */
  allowDomainDiscovery: boolean;
  disableLoginWithEmail: boolean;
  disableLoginWithPhone: boolean;
  forceMfaLocalOnly: boolean;
}

export interface UpdateLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicyIDPsRequest {
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListLoginPolicyIDPsResponse {
  details: ListDetails | undefined;
  result: IDPLoginPolicyLink[];
}

export interface AddIDPToLoginPolicyRequest {
  idpId: string;
}

export interface AddIDPToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIDPFromLoginPolicyRequest {
  idpId: string;
}

export interface RemoveIDPFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListLoginPolicySecondFactorsRequest {
}

export interface ListLoginPolicySecondFactorsResponse {
  details: ListDetails | undefined;
  result: SecondFactorType[];
}

export interface AddSecondFactorToLoginPolicyRequest {
  type: SecondFactorType;
}

export interface AddSecondFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSecondFactorFromLoginPolicyRequest {
  type: SecondFactorType;
}

export interface RemoveSecondFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListLoginPolicyMultiFactorsRequest {
}

export interface ListLoginPolicyMultiFactorsResponse {
  details: ListDetails | undefined;
  result: MultiFactorType[];
}

export interface AddMultiFactorToLoginPolicyRequest {
  type: MultiFactorType;
}

export interface AddMultiFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveMultiFactorFromLoginPolicyRequest {
  type: MultiFactorType;
}

export interface RemoveMultiFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetPasswordComplexityPolicyRequest {
}

export interface GetPasswordComplexityPolicyResponse {
  policy: PasswordComplexityPolicy | undefined;
}

export interface UpdatePasswordComplexityPolicyRequest {
  minLength: number;
  hasUppercase: boolean;
  hasLowercase: boolean;
  hasNumber: boolean;
  hasSymbol: boolean;
}

export interface UpdatePasswordComplexityPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPasswordAgePolicyRequest {
}

export interface GetPasswordAgePolicyResponse {
  policy: PasswordAgePolicy | undefined;
}

export interface UpdatePasswordAgePolicyRequest {
  /** Amount of days after which a password will expire. The user will be forced to change the password on the following authentication. */
  maxAgeDays: number;
  /** Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user. */
  expireWarnDays: number;
}

export interface UpdatePasswordAgePolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLockoutPolicyRequest {
}

export interface GetLockoutPolicyResponse {
  policy: LockoutPolicy | undefined;
}

export interface UpdateLockoutPolicyRequest {
  /** failed attempts until a user gets locked */
  maxPasswordAttempts: number;
  maxOtpAttempts: number;
}

export interface UpdateLockoutPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPrivacyPolicyRequest {
}

export interface GetPrivacyPolicyResponse {
  policy: PrivacyPolicy | undefined;
}

export interface UpdatePrivacyPolicyRequest {
  tosLink: string;
  privacyLink: string;
  helpLink: string;
  supportEmail: string;
  docsLink: string;
  customLink: string;
  customLinkText: string;
}

export interface UpdatePrivacyPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface AddNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface AddNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetNotificationPolicyRequest {
}

export interface GetNotificationPolicyResponse {
  policy: NotificationPolicy | undefined;
}

export interface UpdateNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface UpdateNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultInitMessageTextRequest {
  language: string;
}

export interface GetDefaultInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomInitMessageTextRequest {
  language: string;
}

export interface GetCustomInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultInitMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultInitMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomInitMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomInitMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultPasswordResetMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomPasswordResetMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultPasswordResetMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultPasswordResetMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordResetMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordResetMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultVerifyEmailMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultVerifyEmailMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultVerifyPhoneMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultVerifyPhoneMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifySMSOTPMessageTextRequest {
  language: string;
}

export interface GetCustomVerifySMSOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifySMSOTPMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifySMSOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultVerifySMSOTPMessageTextRequest {
  language: string;
  text: string;
}

export interface SetDefaultVerifySMSOTPMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifyEmailOTPMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyEmailOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifyEmailOTPMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyEmailOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultVerifyEmailOTPMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultVerifyEmailOTPMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetDefaultDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetCustomDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultDomainClaimedMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultDomainClaimedMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomDomainClaimedMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomDomainClaimedMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultPasswordChangeMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultPasswordChangeMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultInviteUserMessageTextRequest {
  language: string;
}

export interface GetDefaultInviteUserMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomInviteUserMessageTextRequest {
  language: string;
}

export interface GetCustomInviteUserMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultInviteUserMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultInviteUserMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomInviteUserMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomInviteUserMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetCustomPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetDefaultPasswordlessRegistrationMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetDefaultPasswordlessRegistrationMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultLoginTextsRequest {
  language: string;
}

export interface GetDefaultLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface GetCustomLoginTextsRequest {
  language: string;
}

export interface GetCustomLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface SetCustomLoginTextsRequest {
  language: string;
  selectAccountText: SelectAccountScreenText | undefined;
  loginText: LoginScreenText | undefined;
  passwordText: PasswordScreenText | undefined;
  usernameChangeText: UsernameChangeScreenText | undefined;
  usernameChangeDoneText: UsernameChangeDoneScreenText | undefined;
  initPasswordText: InitPasswordScreenText | undefined;
  initPasswordDoneText: InitPasswordDoneScreenText | undefined;
  emailVerificationText: EmailVerificationScreenText | undefined;
  emailVerificationDoneText: EmailVerificationDoneScreenText | undefined;
  initializeUserText: InitializeUserScreenText | undefined;
  initializeDoneText: InitializeUserDoneScreenText | undefined;
  initMfaPromptText: InitMFAPromptScreenText | undefined;
  initMfaOtpText: InitMFAOTPScreenText | undefined;
  initMfaU2fText: InitMFAU2FScreenText | undefined;
  initMfaDoneText: InitMFADoneScreenText | undefined;
  mfaProvidersText: MFAProvidersText | undefined;
  verifyMfaOtpText: VerifyMFAOTPScreenText | undefined;
  verifyMfaU2fText: VerifyMFAU2FScreenText | undefined;
  passwordlessText: PasswordlessScreenText | undefined;
  passwordChangeText: PasswordChangeScreenText | undefined;
  passwordChangeDoneText: PasswordChangeDoneScreenText | undefined;
  passwordResetDoneText: PasswordResetDoneScreenText | undefined;
  registrationOptionText: RegistrationOptionScreenText | undefined;
  registrationUserText: RegistrationUserScreenText | undefined;
  registrationOrgText: RegistrationOrgScreenText | undefined;
  linkingUserDoneText: LinkingUserDoneScreenText | undefined;
  externalUserNotFoundText: ExternalUserNotFoundScreenText | undefined;
  successLoginText: SuccessLoginScreenText | undefined;
  logoutText: LogoutDoneScreenText | undefined;
  footerText: FooterText | undefined;
  passwordlessPromptText: PasswordlessPromptScreenText | undefined;
  passwordlessRegistrationText: PasswordlessRegistrationScreenText | undefined;
  passwordlessRegistrationDoneText: PasswordlessRegistrationDoneScreenText | undefined;
  externalRegistrationUserOverviewText:
    | ExternalRegistrationUserOverviewScreenText
    | undefined;
  /**
   * Deprecated: the linking user prompt screen no longer exists
   *
   * @deprecated
   */
  linkingUserPromptText: LinkingUserPromptScreenText | undefined;
}

export interface SetCustomLoginTextsResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomLoginTextsToDefaultRequest {
  language: string;
}

export interface ResetCustomLoginTextsToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface AddIAMMemberRequest {
  userId: string;
  roles: string[];
}

export interface AddIAMMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateIAMMemberRequest {
  userId: string;
  roles: string[];
}

export interface UpdateIAMMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIAMMemberRequest {
  userId: string;
}

export interface RemoveIAMMemberResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListIAMMemberRolesRequest {
}

export interface ListIAMMemberRolesResponse {
  details: ListDetails | undefined;
  roles: string[];
}

export interface ListIAMMembersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery[];
}

export interface ListIAMMembersResponse {
  details: ListDetails | undefined;
  result: Member[];
}

/** This is an empty request */
export interface ListViewsRequest {
}

export interface ListViewsResponse {
  /** TODO: list details */
  result: View[];
}

/** This is an empty request */
export interface ListFailedEventsRequest {
}

export interface ListFailedEventsResponse {
  /** TODO: list details */
  result: FailedEvent[];
}

export interface RemoveFailedEventRequest {
  database: string;
  viewName: string;
  failedSequence: Long;
}

/** This is an empty response */
export interface RemoveFailedEventResponse {
}

export interface View {
  database: string;
  viewName: string;
  processedSequence: Long;
  /** The timestamp the event occurred */
  eventTimestamp: Date | undefined;
  lastSuccessfulSpoolerRun: Date | undefined;
}

export interface FailedEvent {
  database: string;
  viewName: string;
  failedSequence: Long;
  failureCount: Long;
  errorMessage: string;
  lastFailed: Date | undefined;
}

export interface ImportDataRequest {
  dataOrgs?: ImportDataOrg | undefined;
  dataOrgsv1?: ImportDataOrg1 | undefined;
  dataOrgsLocal?: ImportDataRequest_LocalInput | undefined;
  dataOrgsv1Local?: ImportDataRequest_LocalInput | undefined;
  dataOrgsS3?: ImportDataRequest_S3Input | undefined;
  dataOrgsv1S3?: ImportDataRequest_S3Input | undefined;
  dataOrgsGcs?: ImportDataRequest_GCSInput | undefined;
  dataOrgsv1Gcs?: ImportDataRequest_GCSInput | undefined;
  timeout: string;
}

export interface ImportDataRequest_LocalInput {
  path: string;
}

export interface ImportDataRequest_S3Input {
  path: string;
  endpoint: string;
  accessKeyId: string;
  secretAccessKey: string;
  ssl: boolean;
  bucket: string;
}

export interface ImportDataRequest_GCSInput {
  bucket: string;
  serviceaccountJson: string;
  path: string;
}

export interface ImportDataOrg {
  orgs: DataOrg[];
}

export interface DataOrg {
  orgId: string;
  org: AddOrgRequest | undefined;
  domainPolicy: AddCustomDomainPolicyRequest | undefined;
  labelPolicy: AddCustomLabelPolicyRequest | undefined;
  lockoutPolicy: AddCustomLockoutPolicyRequest | undefined;
  loginPolicy: AddCustomLoginPolicyRequest | undefined;
  passwordComplexityPolicy: AddCustomPasswordComplexityPolicyRequest | undefined;
  privacyPolicy: AddCustomPrivacyPolicyRequest | undefined;
  projects: DataProject[];
  projectRoles: AddProjectRoleRequest[];
  apiApps: DataAPIApplication[];
  oidcApps: DataOIDCApplication[];
  humanUsers: DataHumanUser[];
  machineUsers: DataMachineUser[];
  triggerActions: SetTriggerActionsRequest[];
  actions: DataAction[];
  projectGrants: DataProjectGrant[];
  userGrants: AddUserGrantRequest[];
  orgMembers: AddOrgMemberRequest[];
  projectMembers: AddProjectMemberRequest[];
  projectGrantMembers: AddProjectGrantMemberRequest[];
  userMetadata: SetUserMetadataRequest[];
  loginTexts: SetCustomLoginTextsRequest2[];
  initMessages: SetCustomInitMessageTextRequest[];
  passwordResetMessages: SetCustomPasswordResetMessageTextRequest[];
  verifyEmailMessages: SetCustomVerifyEmailMessageTextRequest[];
  verifyPhoneMessages: SetCustomVerifyPhoneMessageTextRequest[];
  domainClaimedMessages: SetCustomDomainClaimedMessageTextRequest[];
  passwordlessRegistrationMessages: SetCustomPasswordlessRegistrationMessageTextRequest[];
  oidcIdps: DataOIDCIDP[];
  jwtIdps: DataJWTIDP[];
  userLinks: IDPUserLink[];
  domains: Domain3[];
  appKeys: DataAppKey[];
  machineKeys: DataMachineKey[];
  verifySmsOtpMessages: SetCustomVerifySMSOTPMessageTextRequest[];
  verifyEmailOtpMessages: SetCustomVerifyEmailOTPMessageTextRequest[];
  inviteUserMessages: SetCustomInviteUserMessageTextRequest[];
}

export interface ImportDataResponse {
  errors: ImportDataError[];
  success: ImportDataSuccess | undefined;
}

export interface ImportDataError {
  type: string;
  id: string;
  message: string;
}

export interface ImportDataSuccess {
  orgs: ImportDataSuccessOrg[];
}

export interface ImportDataSuccessOrg {
  orgId: string;
  projectIds: string[];
  projectRoles: string[];
  oidcAppIds: string[];
  apiAppIds: string[];
  humanUserIds: string[];
  machineUserIds: string[];
  actionIds: string[];
  triggerActions: SetTriggerActionsRequest[];
  projectGrants: ImportDataSuccessProjectGrant[];
  userGrants: ImportDataSuccessUserGrant[];
  orgMembers: string[];
  projectMembers: ImportDataSuccessProjectMember[];
  projectGrantMembers: ImportDataSuccessProjectGrantMember[];
  oidcIpds: string[];
  jwtIdps: string[];
  idpLinks: string[];
  userLinks: ImportDataSuccessUserLinks[];
  userMetadata: ImportDataSuccessUserMetadata[];
  domains: string[];
  appKeys: string[];
  machineKeys: string[];
}

export interface ImportDataSuccessProjectGrant {
  grantId: string;
  projectId: string;
  orgId: string;
}

export interface ImportDataSuccessUserGrant {
  projectId: string;
  userId: string;
}

export interface ImportDataSuccessProjectMember {
  projectId: string;
  userId: string;
}

export interface ImportDataSuccessProjectGrantMember {
  projectId: string;
  grantId: string;
  userId: string;
}

export interface ImportDataSuccessUserLinks {
  userId: string;
  externalUserId: string;
  displayName: string;
  idpId: string;
}

export interface ImportDataSuccessUserMetadata {
  userId: string;
  key: string;
}

export interface ExportDataRequest {
  orgIds: string[];
  excludedOrgIds: string[];
  withPasswords: boolean;
  withOtp: boolean;
  responseOutput: boolean;
  localOutput: ExportDataRequest_LocalOutput | undefined;
  s3Output: ExportDataRequest_S3Output | undefined;
  gcsOutput: ExportDataRequest_GCSOutput | undefined;
  timeout: string;
}

export interface ExportDataRequest_LocalOutput {
  path: string;
}

export interface ExportDataRequest_S3Output {
  path: string;
  endpoint: string;
  accessKeyId: string;
  secretAccessKey: string;
  ssl: boolean;
  bucket: string;
}

export interface ExportDataRequest_GCSOutput {
  bucket: string;
  serviceaccountJson: string;
  path: string;
}

export interface ExportDataResponse {
  orgs: DataOrg[];
}

export interface ListEventsRequest {
  sequence: Long;
  limit: number;
  asc: boolean;
  editorUserId: string;
  eventTypes: string[];
  aggregateId: string;
  aggregateTypes: string[];
  resourceOwner: string;
  /** @deprecated */
  creationDate: Date | undefined;
  range?: ListEventsRequest_creationDateRange | undefined;
  from?: Date | undefined;
}

export interface ListEventsRequest_creationDateRange {
  since: Date | undefined;
  until: Date | undefined;
}

export interface ListEventsResponse {
  events: Event[];
}

export interface ListEventTypesRequest {
}

export interface ListEventTypesResponse {
  eventTypes: EventType[];
}

export interface ListAggregateTypesRequest {
}

export interface ListAggregateTypesResponse {
  aggregateTypes: AggregateType[];
}

export interface ActivateFeatureLoginDefaultOrgRequest {
}

export interface ActivateFeatureLoginDefaultOrgResponse {
  details: ObjectDetails | undefined;
}

export interface ListMilestonesRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: MilestoneFieldName;
  /** criteria the client is looking for */
  queries: MilestoneQuery[];
}

export interface ListMilestonesResponse {
  details: ListDetails | undefined;
  result: Milestone[];
}

export interface SetRestrictionsRequest {
  disallowPublicOrgRegistration?: boolean | undefined;
  allowedLanguages?: SelectLanguages | undefined;
}

/** We have to wrap the languages list into a message so we can serialize empty lists. */
export interface SelectLanguages {
  list: string[];
}

export interface SetRestrictionsResponse {
  details: ObjectDetails | undefined;
}

export interface GetRestrictionsRequest {
}

export interface GetRestrictionsResponse {
  details: ObjectDetails | undefined;
  disallowPublicOrgRegistration: boolean;
  allowedLanguages: string[];
}

function createBaseHealthzRequest(): HealthzRequest {
  return {};
}

export const HealthzRequest: MessageFns<HealthzRequest> = {
  encode(_: HealthzRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthzRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthzRequest {
    return {};
  },

  toJSON(_: HealthzRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<HealthzRequest>): HealthzRequest {
    return HealthzRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HealthzRequest>): HealthzRequest {
    const message = createBaseHealthzRequest();
    return message;
  },
};

function createBaseHealthzResponse(): HealthzResponse {
  return {};
}

export const HealthzResponse: MessageFns<HealthzResponse> = {
  encode(_: HealthzResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthzResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthzResponse {
    return {};
  },

  toJSON(_: HealthzResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<HealthzResponse>): HealthzResponse {
    return HealthzResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HealthzResponse>): HealthzResponse {
    const message = createBaseHealthzResponse();
    return message;
  },
};

function createBaseGetSupportedLanguagesRequest(): GetSupportedLanguagesRequest {
  return {};
}

export const GetSupportedLanguagesRequest: MessageFns<GetSupportedLanguagesRequest> = {
  encode(_: GetSupportedLanguagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSupportedLanguagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSupportedLanguagesRequest {
    return {};
  },

  toJSON(_: GetSupportedLanguagesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetSupportedLanguagesRequest>): GetSupportedLanguagesRequest {
    return GetSupportedLanguagesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetSupportedLanguagesRequest>): GetSupportedLanguagesRequest {
    const message = createBaseGetSupportedLanguagesRequest();
    return message;
  },
};

function createBaseGetSupportedLanguagesResponse(): GetSupportedLanguagesResponse {
  return { languages: [] };
}

export const GetSupportedLanguagesResponse: MessageFns<GetSupportedLanguagesResponse> = {
  encode(message: GetSupportedLanguagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSupportedLanguagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSupportedLanguagesResponse {
    return {
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetSupportedLanguagesResponse): unknown {
    const obj: any = {};
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSupportedLanguagesResponse>): GetSupportedLanguagesResponse {
    return GetSupportedLanguagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSupportedLanguagesResponse>): GetSupportedLanguagesResponse {
    const message = createBaseGetSupportedLanguagesResponse();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAllowedLanguagesRequest(): GetAllowedLanguagesRequest {
  return {};
}

export const GetAllowedLanguagesRequest: MessageFns<GetAllowedLanguagesRequest> = {
  encode(_: GetAllowedLanguagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllowedLanguagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllowedLanguagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAllowedLanguagesRequest {
    return {};
  },

  toJSON(_: GetAllowedLanguagesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetAllowedLanguagesRequest>): GetAllowedLanguagesRequest {
    return GetAllowedLanguagesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetAllowedLanguagesRequest>): GetAllowedLanguagesRequest {
    const message = createBaseGetAllowedLanguagesRequest();
    return message;
  },
};

function createBaseGetAllowedLanguagesResponse(): GetAllowedLanguagesResponse {
  return { languages: [] };
}

export const GetAllowedLanguagesResponse: MessageFns<GetAllowedLanguagesResponse> = {
  encode(message: GetAllowedLanguagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllowedLanguagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllowedLanguagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllowedLanguagesResponse {
    return {
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetAllowedLanguagesResponse): unknown {
    const obj: any = {};
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAllowedLanguagesResponse>): GetAllowedLanguagesResponse {
    return GetAllowedLanguagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAllowedLanguagesResponse>): GetAllowedLanguagesResponse {
    const message = createBaseGetAllowedLanguagesResponse();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetDefaultLanguageRequest(): SetDefaultLanguageRequest {
  return { language: "" };
}

export const SetDefaultLanguageRequest: MessageFns<SetDefaultLanguageRequest> = {
  encode(message: SetDefaultLanguageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultLanguageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultLanguageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultLanguageRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: SetDefaultLanguageRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultLanguageRequest>): SetDefaultLanguageRequest {
    return SetDefaultLanguageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultLanguageRequest>): SetDefaultLanguageRequest {
    const message = createBaseSetDefaultLanguageRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseSetDefaultLanguageResponse(): SetDefaultLanguageResponse {
  return { details: undefined };
}

export const SetDefaultLanguageResponse: MessageFns<SetDefaultLanguageResponse> = {
  encode(message: SetDefaultLanguageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultLanguageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultLanguageResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultLanguageResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultLanguageResponse>): SetDefaultLanguageResponse {
    return SetDefaultLanguageResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultLanguageResponse>): SetDefaultLanguageResponse {
    const message = createBaseSetDefaultLanguageResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultLanguageRequest(): GetDefaultLanguageRequest {
  return {};
}

export const GetDefaultLanguageRequest: MessageFns<GetDefaultLanguageRequest> = {
  encode(_: GetDefaultLanguageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultLanguageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLanguageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultLanguageRequest {
    return {};
  },

  toJSON(_: GetDefaultLanguageRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetDefaultLanguageRequest>): GetDefaultLanguageRequest {
    return GetDefaultLanguageRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultLanguageRequest>): GetDefaultLanguageRequest {
    const message = createBaseGetDefaultLanguageRequest();
    return message;
  },
};

function createBaseGetDefaultLanguageResponse(): GetDefaultLanguageResponse {
  return { language: "" };
}

export const GetDefaultLanguageResponse: MessageFns<GetDefaultLanguageResponse> = {
  encode(message: GetDefaultLanguageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultLanguageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLanguageResponse {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultLanguageResponse): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultLanguageResponse>): GetDefaultLanguageResponse {
    return GetDefaultLanguageResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLanguageResponse>): GetDefaultLanguageResponse {
    const message = createBaseGetDefaultLanguageResponse();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseSetDefaultOrgRequest(): SetDefaultOrgRequest {
  return { orgId: "" };
}

export const SetDefaultOrgRequest: MessageFns<SetDefaultOrgRequest> = {
  encode(message: SetDefaultOrgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultOrgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultOrgRequest {
    return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
  },

  toJSON(message: SetDefaultOrgRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultOrgRequest>): SetDefaultOrgRequest {
    return SetDefaultOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultOrgRequest>): SetDefaultOrgRequest {
    const message = createBaseSetDefaultOrgRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseSetDefaultOrgResponse(): SetDefaultOrgResponse {
  return { details: undefined };
}

export const SetDefaultOrgResponse: MessageFns<SetDefaultOrgResponse> = {
  encode(message: SetDefaultOrgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultOrgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultOrgResponse>): SetDefaultOrgResponse {
    return SetDefaultOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultOrgResponse>): SetDefaultOrgResponse {
    const message = createBaseSetDefaultOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultOrgRequest(): GetDefaultOrgRequest {
  return {};
}

export const GetDefaultOrgRequest: MessageFns<GetDefaultOrgRequest> = {
  encode(_: GetDefaultOrgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultOrgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDefaultOrgRequest {
    return {};
  },

  toJSON(_: GetDefaultOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetDefaultOrgRequest>): GetDefaultOrgRequest {
    return GetDefaultOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultOrgRequest>): GetDefaultOrgRequest {
    const message = createBaseGetDefaultOrgRequest();
    return message;
  },
};

function createBaseGetDefaultOrgResponse(): GetDefaultOrgResponse {
  return { org: undefined };
}

export const GetDefaultOrgResponse: MessageFns<GetDefaultOrgResponse> = {
  encode(message: GetDefaultOrgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultOrgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultOrgResponse {
    return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
  },

  toJSON(message: GetDefaultOrgResponse): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = Org.toJSON(message.org);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultOrgResponse>): GetDefaultOrgResponse {
    return GetDefaultOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultOrgResponse>): GetDefaultOrgResponse {
    const message = createBaseGetDefaultOrgResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseGetMyInstanceRequest(): GetMyInstanceRequest {
  return {};
}

export const GetMyInstanceRequest: MessageFns<GetMyInstanceRequest> = {
  encode(_: GetMyInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMyInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMyInstanceRequest {
    return {};
  },

  toJSON(_: GetMyInstanceRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetMyInstanceRequest>): GetMyInstanceRequest {
    return GetMyInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetMyInstanceRequest>): GetMyInstanceRequest {
    const message = createBaseGetMyInstanceRequest();
    return message;
  },
};

function createBaseGetMyInstanceResponse(): GetMyInstanceResponse {
  return { instance: undefined };
}

export const GetMyInstanceResponse: MessageFns<GetMyInstanceResponse> = {
  encode(message: GetMyInstanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== undefined) {
      InstanceDetail.encode(message.instance, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMyInstanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = InstanceDetail.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMyInstanceResponse {
    return { instance: isSet(object.instance) ? InstanceDetail.fromJSON(object.instance) : undefined };
  },

  toJSON(message: GetMyInstanceResponse): unknown {
    const obj: any = {};
    if (message.instance !== undefined) {
      obj.instance = InstanceDetail.toJSON(message.instance);
    }
    return obj;
  },

  create(base?: DeepPartial<GetMyInstanceResponse>): GetMyInstanceResponse {
    return GetMyInstanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMyInstanceResponse>): GetMyInstanceResponse {
    const message = createBaseGetMyInstanceResponse();
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? InstanceDetail.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseListInstanceDomainsRequest(): ListInstanceDomainsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListInstanceDomainsRequest: MessageFns<ListInstanceDomainsRequest> = {
  encode(message: ListInstanceDomainsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      DomainSearchQuery.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstanceDomainsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstanceDomainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(DomainSearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstanceDomainsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => DomainSearchQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListInstanceDomainsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => DomainSearchQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstanceDomainsRequest>): ListInstanceDomainsRequest {
    return ListInstanceDomainsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstanceDomainsRequest>): ListInstanceDomainsRequest {
    const message = createBaseListInstanceDomainsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => DomainSearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListInstanceDomainsResponse(): ListInstanceDomainsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListInstanceDomainsResponse: MessageFns<ListInstanceDomainsResponse> = {
  encode(message: ListInstanceDomainsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      Domain.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstanceDomainsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstanceDomainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(Domain.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstanceDomainsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => Domain.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListInstanceDomainsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Domain.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstanceDomainsResponse>): ListInstanceDomainsResponse {
    return ListInstanceDomainsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstanceDomainsResponse>): ListInstanceDomainsResponse {
    const message = createBaseListInstanceDomainsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => Domain.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListInstanceTrustedDomainsRequest(): ListInstanceTrustedDomainsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListInstanceTrustedDomainsRequest: MessageFns<ListInstanceTrustedDomainsRequest> = {
  encode(message: ListInstanceTrustedDomainsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      TrustedDomainSearchQuery.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstanceTrustedDomainsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstanceTrustedDomainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(TrustedDomainSearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstanceTrustedDomainsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => TrustedDomainSearchQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListInstanceTrustedDomainsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => TrustedDomainSearchQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstanceTrustedDomainsRequest>): ListInstanceTrustedDomainsRequest {
    return ListInstanceTrustedDomainsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstanceTrustedDomainsRequest>): ListInstanceTrustedDomainsRequest {
    const message = createBaseListInstanceTrustedDomainsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => TrustedDomainSearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListInstanceTrustedDomainsResponse(): ListInstanceTrustedDomainsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListInstanceTrustedDomainsResponse: MessageFns<ListInstanceTrustedDomainsResponse> = {
  encode(message: ListInstanceTrustedDomainsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      TrustedDomain.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstanceTrustedDomainsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstanceTrustedDomainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(TrustedDomain.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstanceTrustedDomainsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => TrustedDomain.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListInstanceTrustedDomainsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => TrustedDomain.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstanceTrustedDomainsResponse>): ListInstanceTrustedDomainsResponse {
    return ListInstanceTrustedDomainsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstanceTrustedDomainsResponse>): ListInstanceTrustedDomainsResponse {
    const message = createBaseListInstanceTrustedDomainsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => TrustedDomain.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddInstanceTrustedDomainRequest(): AddInstanceTrustedDomainRequest {
  return { domain: "" };
}

export const AddInstanceTrustedDomainRequest: MessageFns<AddInstanceTrustedDomainRequest> = {
  encode(message: AddInstanceTrustedDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInstanceTrustedDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInstanceTrustedDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInstanceTrustedDomainRequest {
    return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
  },

  toJSON(message: AddInstanceTrustedDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create(base?: DeepPartial<AddInstanceTrustedDomainRequest>): AddInstanceTrustedDomainRequest {
    return AddInstanceTrustedDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddInstanceTrustedDomainRequest>): AddInstanceTrustedDomainRequest {
    const message = createBaseAddInstanceTrustedDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseAddInstanceTrustedDomainResponse(): AddInstanceTrustedDomainResponse {
  return { details: undefined };
}

export const AddInstanceTrustedDomainResponse: MessageFns<AddInstanceTrustedDomainResponse> = {
  encode(message: AddInstanceTrustedDomainResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInstanceTrustedDomainResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInstanceTrustedDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInstanceTrustedDomainResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddInstanceTrustedDomainResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddInstanceTrustedDomainResponse>): AddInstanceTrustedDomainResponse {
    return AddInstanceTrustedDomainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddInstanceTrustedDomainResponse>): AddInstanceTrustedDomainResponse {
    const message = createBaseAddInstanceTrustedDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveInstanceTrustedDomainRequest(): RemoveInstanceTrustedDomainRequest {
  return { domain: "" };
}

export const RemoveInstanceTrustedDomainRequest: MessageFns<RemoveInstanceTrustedDomainRequest> = {
  encode(message: RemoveInstanceTrustedDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveInstanceTrustedDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveInstanceTrustedDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveInstanceTrustedDomainRequest {
    return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
  },

  toJSON(message: RemoveInstanceTrustedDomainRequest): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveInstanceTrustedDomainRequest>): RemoveInstanceTrustedDomainRequest {
    return RemoveInstanceTrustedDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveInstanceTrustedDomainRequest>): RemoveInstanceTrustedDomainRequest {
    const message = createBaseRemoveInstanceTrustedDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseRemoveInstanceTrustedDomainResponse(): RemoveInstanceTrustedDomainResponse {
  return { details: undefined };
}

export const RemoveInstanceTrustedDomainResponse: MessageFns<RemoveInstanceTrustedDomainResponse> = {
  encode(message: RemoveInstanceTrustedDomainResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveInstanceTrustedDomainResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveInstanceTrustedDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveInstanceTrustedDomainResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveInstanceTrustedDomainResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveInstanceTrustedDomainResponse>): RemoveInstanceTrustedDomainResponse {
    return RemoveInstanceTrustedDomainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveInstanceTrustedDomainResponse>): RemoveInstanceTrustedDomainResponse {
    const message = createBaseRemoveInstanceTrustedDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListSecretGeneratorsRequest(): ListSecretGeneratorsRequest {
  return { query: undefined, queries: [] };
}

export const ListSecretGeneratorsRequest: MessageFns<ListSecretGeneratorsRequest> = {
  encode(message: ListSecretGeneratorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    for (const v of message.queries) {
      SecretGeneratorQuery.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecretGeneratorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretGeneratorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(SecretGeneratorQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretGeneratorsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => SecretGeneratorQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSecretGeneratorsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SecretGeneratorQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecretGeneratorsRequest>): ListSecretGeneratorsRequest {
    return ListSecretGeneratorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecretGeneratorsRequest>): ListSecretGeneratorsRequest {
    const message = createBaseListSecretGeneratorsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SecretGeneratorQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListSecretGeneratorsResponse(): ListSecretGeneratorsResponse {
  return { details: undefined, result: [] };
}

export const ListSecretGeneratorsResponse: MessageFns<ListSecretGeneratorsResponse> = {
  encode(message: ListSecretGeneratorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      SecretGenerator.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecretGeneratorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecretGeneratorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(SecretGenerator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecretGeneratorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result)
        ? object.result.map((e: any) => SecretGenerator.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSecretGeneratorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => SecretGenerator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecretGeneratorsResponse>): ListSecretGeneratorsResponse {
    return ListSecretGeneratorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecretGeneratorsResponse>): ListSecretGeneratorsResponse {
    const message = createBaseListSecretGeneratorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => SecretGenerator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSecretGeneratorRequest(): GetSecretGeneratorRequest {
  return { generatorType: 0 };
}

export const GetSecretGeneratorRequest: MessageFns<GetSecretGeneratorRequest> = {
  encode(message: GetSecretGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generatorType !== 0) {
      writer.uint32(8).int32(message.generatorType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.generatorType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretGeneratorRequest {
    return { generatorType: isSet(object.generatorType) ? secretGeneratorTypeFromJSON(object.generatorType) : 0 };
  },

  toJSON(message: GetSecretGeneratorRequest): unknown {
    const obj: any = {};
    if (message.generatorType !== 0) {
      obj.generatorType = secretGeneratorTypeToJSON(message.generatorType);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecretGeneratorRequest>): GetSecretGeneratorRequest {
    return GetSecretGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecretGeneratorRequest>): GetSecretGeneratorRequest {
    const message = createBaseGetSecretGeneratorRequest();
    message.generatorType = object.generatorType ?? 0;
    return message;
  },
};

function createBaseGetSecretGeneratorResponse(): GetSecretGeneratorResponse {
  return { secretGenerator: undefined };
}

export const GetSecretGeneratorResponse: MessageFns<GetSecretGeneratorResponse> = {
  encode(message: GetSecretGeneratorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretGenerator !== undefined) {
      SecretGenerator.encode(message.secretGenerator, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretGeneratorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretGeneratorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.secretGenerator = SecretGenerator.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretGeneratorResponse {
    return {
      secretGenerator: isSet(object.secretGenerator) ? SecretGenerator.fromJSON(object.secretGenerator) : undefined,
    };
  },

  toJSON(message: GetSecretGeneratorResponse): unknown {
    const obj: any = {};
    if (message.secretGenerator !== undefined) {
      obj.secretGenerator = SecretGenerator.toJSON(message.secretGenerator);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecretGeneratorResponse>): GetSecretGeneratorResponse {
    return GetSecretGeneratorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecretGeneratorResponse>): GetSecretGeneratorResponse {
    const message = createBaseGetSecretGeneratorResponse();
    message.secretGenerator = (object.secretGenerator !== undefined && object.secretGenerator !== null)
      ? SecretGenerator.fromPartial(object.secretGenerator)
      : undefined;
    return message;
  },
};

function createBaseUpdateSecretGeneratorRequest(): UpdateSecretGeneratorRequest {
  return {
    generatorType: 0,
    length: 0,
    expiry: undefined,
    includeLowerLetters: false,
    includeUpperLetters: false,
    includeDigits: false,
    includeSymbols: false,
  };
}

export const UpdateSecretGeneratorRequest: MessageFns<UpdateSecretGeneratorRequest> = {
  encode(message: UpdateSecretGeneratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generatorType !== 0) {
      writer.uint32(8).int32(message.generatorType);
    }
    if (message.length !== 0) {
      writer.uint32(16).uint32(message.length);
    }
    if (message.expiry !== undefined) {
      Duration.encode(message.expiry, writer.uint32(26).fork()).join();
    }
    if (message.includeLowerLetters !== false) {
      writer.uint32(32).bool(message.includeLowerLetters);
    }
    if (message.includeUpperLetters !== false) {
      writer.uint32(40).bool(message.includeUpperLetters);
    }
    if (message.includeDigits !== false) {
      writer.uint32(48).bool(message.includeDigits);
    }
    if (message.includeSymbols !== false) {
      writer.uint32(56).bool(message.includeSymbols);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecretGeneratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecretGeneratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.generatorType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.length = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiry = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeLowerLetters = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeUpperLetters = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeDigits = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.includeSymbols = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecretGeneratorRequest {
    return {
      generatorType: isSet(object.generatorType) ? secretGeneratorTypeFromJSON(object.generatorType) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      expiry: isSet(object.expiry) ? Duration.fromJSON(object.expiry) : undefined,
      includeLowerLetters: isSet(object.includeLowerLetters) ? globalThis.Boolean(object.includeLowerLetters) : false,
      includeUpperLetters: isSet(object.includeUpperLetters) ? globalThis.Boolean(object.includeUpperLetters) : false,
      includeDigits: isSet(object.includeDigits) ? globalThis.Boolean(object.includeDigits) : false,
      includeSymbols: isSet(object.includeSymbols) ? globalThis.Boolean(object.includeSymbols) : false,
    };
  },

  toJSON(message: UpdateSecretGeneratorRequest): unknown {
    const obj: any = {};
    if (message.generatorType !== 0) {
      obj.generatorType = secretGeneratorTypeToJSON(message.generatorType);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.expiry !== undefined) {
      obj.expiry = Duration.toJSON(message.expiry);
    }
    if (message.includeLowerLetters !== false) {
      obj.includeLowerLetters = message.includeLowerLetters;
    }
    if (message.includeUpperLetters !== false) {
      obj.includeUpperLetters = message.includeUpperLetters;
    }
    if (message.includeDigits !== false) {
      obj.includeDigits = message.includeDigits;
    }
    if (message.includeSymbols !== false) {
      obj.includeSymbols = message.includeSymbols;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSecretGeneratorRequest>): UpdateSecretGeneratorRequest {
    return UpdateSecretGeneratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSecretGeneratorRequest>): UpdateSecretGeneratorRequest {
    const message = createBaseUpdateSecretGeneratorRequest();
    message.generatorType = object.generatorType ?? 0;
    message.length = object.length ?? 0;
    message.expiry = (object.expiry !== undefined && object.expiry !== null)
      ? Duration.fromPartial(object.expiry)
      : undefined;
    message.includeLowerLetters = object.includeLowerLetters ?? false;
    message.includeUpperLetters = object.includeUpperLetters ?? false;
    message.includeDigits = object.includeDigits ?? false;
    message.includeSymbols = object.includeSymbols ?? false;
    return message;
  },
};

function createBaseUpdateSecretGeneratorResponse(): UpdateSecretGeneratorResponse {
  return { details: undefined };
}

export const UpdateSecretGeneratorResponse: MessageFns<UpdateSecretGeneratorResponse> = {
  encode(message: UpdateSecretGeneratorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecretGeneratorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecretGeneratorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecretGeneratorResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSecretGeneratorResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSecretGeneratorResponse>): UpdateSecretGeneratorResponse {
    return UpdateSecretGeneratorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSecretGeneratorResponse>): UpdateSecretGeneratorResponse {
    const message = createBaseUpdateSecretGeneratorResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetSMTPConfigRequest(): GetSMTPConfigRequest {
  return {};
}

export const GetSMTPConfigRequest: MessageFns<GetSMTPConfigRequest> = {
  encode(_: GetSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSMTPConfigRequest {
    return {};
  },

  toJSON(_: GetSMTPConfigRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetSMTPConfigRequest>): GetSMTPConfigRequest {
    return GetSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetSMTPConfigRequest>): GetSMTPConfigRequest {
    const message = createBaseGetSMTPConfigRequest();
    return message;
  },
};

function createBaseGetSMTPConfigResponse(): GetSMTPConfigResponse {
  return { smtpConfig: undefined };
}

export const GetSMTPConfigResponse: MessageFns<GetSMTPConfigResponse> = {
  encode(message: GetSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.smtpConfig !== undefined) {
      SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.smtpConfig = SMTPConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMTPConfigResponse {
    return { smtpConfig: isSet(object.smtpConfig) ? SMTPConfig.fromJSON(object.smtpConfig) : undefined };
  },

  toJSON(message: GetSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.smtpConfig !== undefined) {
      obj.smtpConfig = SMTPConfig.toJSON(message.smtpConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSMTPConfigResponse>): GetSMTPConfigResponse {
    return GetSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSMTPConfigResponse>): GetSMTPConfigResponse {
    const message = createBaseGetSMTPConfigResponse();
    message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
      ? SMTPConfig.fromPartial(object.smtpConfig)
      : undefined;
    return message;
  },
};

function createBaseGetSMTPConfigByIdRequest(): GetSMTPConfigByIdRequest {
  return { id: "" };
}

export const GetSMTPConfigByIdRequest: MessageFns<GetSMTPConfigByIdRequest> = {
  encode(message: GetSMTPConfigByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSMTPConfigByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMTPConfigByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMTPConfigByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetSMTPConfigByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSMTPConfigByIdRequest>): GetSMTPConfigByIdRequest {
    return GetSMTPConfigByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSMTPConfigByIdRequest>): GetSMTPConfigByIdRequest {
    const message = createBaseGetSMTPConfigByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetSMTPConfigByIdResponse(): GetSMTPConfigByIdResponse {
  return { smtpConfig: undefined };
}

export const GetSMTPConfigByIdResponse: MessageFns<GetSMTPConfigByIdResponse> = {
  encode(message: GetSMTPConfigByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.smtpConfig !== undefined) {
      SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSMTPConfigByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMTPConfigByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.smtpConfig = SMTPConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMTPConfigByIdResponse {
    return { smtpConfig: isSet(object.smtpConfig) ? SMTPConfig.fromJSON(object.smtpConfig) : undefined };
  },

  toJSON(message: GetSMTPConfigByIdResponse): unknown {
    const obj: any = {};
    if (message.smtpConfig !== undefined) {
      obj.smtpConfig = SMTPConfig.toJSON(message.smtpConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSMTPConfigByIdResponse>): GetSMTPConfigByIdResponse {
    return GetSMTPConfigByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSMTPConfigByIdResponse>): GetSMTPConfigByIdResponse {
    const message = createBaseGetSMTPConfigByIdResponse();
    message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
      ? SMTPConfig.fromPartial(object.smtpConfig)
      : undefined;
    return message;
  },
};

function createBaseListSMTPConfigsRequest(): ListSMTPConfigsRequest {
  return { query: undefined };
}

export const ListSMTPConfigsRequest: MessageFns<ListSMTPConfigsRequest> = {
  encode(message: ListSMTPConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSMTPConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSMTPConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSMTPConfigsRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListSMTPConfigsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSMTPConfigsRequest>): ListSMTPConfigsRequest {
    return ListSMTPConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSMTPConfigsRequest>): ListSMTPConfigsRequest {
    const message = createBaseListSMTPConfigsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListSMTPConfigsResponse(): ListSMTPConfigsResponse {
  return { details: undefined, result: [] };
}

export const ListSMTPConfigsResponse: MessageFns<ListSMTPConfigsResponse> = {
  encode(message: ListSMTPConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      SMTPConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSMTPConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSMTPConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(SMTPConfig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSMTPConfigsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => SMTPConfig.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSMTPConfigsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => SMTPConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSMTPConfigsResponse>): ListSMTPConfigsResponse {
    return ListSMTPConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSMTPConfigsResponse>): ListSMTPConfigsResponse {
    const message = createBaseListSMTPConfigsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => SMTPConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSMTPConfigRequest(): AddSMTPConfigRequest {
  return {
    senderAddress: "",
    senderName: "",
    tls: false,
    host: "",
    user: "",
    password: "",
    replyToAddress: "",
    description: "",
  };
}

export const AddSMTPConfigRequest: MessageFns<AddSMTPConfigRequest> = {
  encode(message: AddSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls !== false) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.password !== "") {
      writer.uint32(50).string(message.password);
    }
    if (message.replyToAddress !== "") {
      writer.uint32(58).string(message.replyToAddress);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.password = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.replyToAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMTPConfigRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
      tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AddSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls !== false) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.replyToAddress !== "") {
      obj.replyToAddress = message.replyToAddress;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSMTPConfigRequest>): AddSMTPConfigRequest {
    return AddSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSMTPConfigRequest>): AddSMTPConfigRequest {
    const message = createBaseAddSMTPConfigRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.password = object.password ?? "";
    message.replyToAddress = object.replyToAddress ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseAddSMTPConfigResponse(): AddSMTPConfigResponse {
  return { details: undefined, id: "" };
}

export const AddSMTPConfigResponse: MessageFns<AddSMTPConfigResponse> = {
  encode(message: AddSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMTPConfigResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSMTPConfigResponse>): AddSMTPConfigResponse {
    return AddSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSMTPConfigResponse>): AddSMTPConfigResponse {
    const message = createBaseAddSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSMTPConfigRequest(): UpdateSMTPConfigRequest {
  return {
    senderAddress: "",
    senderName: "",
    tls: false,
    host: "",
    user: "",
    replyToAddress: "",
    password: "",
    description: "",
    id: "",
  };
}

export const UpdateSMTPConfigRequest: MessageFns<UpdateSMTPConfigRequest> = {
  encode(message: UpdateSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls !== false) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.replyToAddress !== "") {
      writer.uint32(50).string(message.replyToAddress);
    }
    if (message.password !== "") {
      writer.uint32(58).string(message.password);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (message.id !== "") {
      writer.uint32(74).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.replyToAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.password = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
      tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: UpdateSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls !== false) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.replyToAddress !== "") {
      obj.replyToAddress = message.replyToAddress;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMTPConfigRequest>): UpdateSMTPConfigRequest {
    return UpdateSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMTPConfigRequest>): UpdateSMTPConfigRequest {
    const message = createBaseUpdateSMTPConfigRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.replyToAddress = object.replyToAddress ?? "";
    message.password = object.password ?? "";
    message.description = object.description ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSMTPConfigResponse(): UpdateSMTPConfigResponse {
  return { details: undefined };
}

export const UpdateSMTPConfigResponse: MessageFns<UpdateSMTPConfigResponse> = {
  encode(message: UpdateSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMTPConfigResponse>): UpdateSMTPConfigResponse {
    return UpdateSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMTPConfigResponse>): UpdateSMTPConfigResponse {
    const message = createBaseUpdateSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSMTPConfigPasswordRequest(): UpdateSMTPConfigPasswordRequest {
  return { password: "", id: "" };
}

export const UpdateSMTPConfigPasswordRequest: MessageFns<UpdateSMTPConfigPasswordRequest> = {
  encode(message: UpdateSMTPConfigPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.password !== "") {
      writer.uint32(10).string(message.password);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMTPConfigPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.password = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigPasswordRequest {
    return {
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: UpdateSMTPConfigPasswordRequest): unknown {
    const obj: any = {};
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMTPConfigPasswordRequest>): UpdateSMTPConfigPasswordRequest {
    return UpdateSMTPConfigPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMTPConfigPasswordRequest>): UpdateSMTPConfigPasswordRequest {
    const message = createBaseUpdateSMTPConfigPasswordRequest();
    message.password = object.password ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSMTPConfigPasswordResponse(): UpdateSMTPConfigPasswordResponse {
  return { details: undefined };
}

export const UpdateSMTPConfigPasswordResponse: MessageFns<UpdateSMTPConfigPasswordResponse> = {
  encode(message: UpdateSMTPConfigPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMTPConfigPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMTPConfigPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMTPConfigPasswordResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMTPConfigPasswordResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMTPConfigPasswordResponse>): UpdateSMTPConfigPasswordResponse {
    return UpdateSMTPConfigPasswordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMTPConfigPasswordResponse>): UpdateSMTPConfigPasswordResponse {
    const message = createBaseUpdateSMTPConfigPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateSMTPConfigRequest(): ActivateSMTPConfigRequest {
  return { id: "" };
}

export const ActivateSMTPConfigRequest: MessageFns<ActivateSMTPConfigRequest> = {
  encode(message: ActivateSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateSMTPConfigRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ActivateSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateSMTPConfigRequest>): ActivateSMTPConfigRequest {
    return ActivateSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateSMTPConfigRequest>): ActivateSMTPConfigRequest {
    const message = createBaseActivateSMTPConfigRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActivateSMTPConfigResponse(): ActivateSMTPConfigResponse {
  return { details: undefined };
}

export const ActivateSMTPConfigResponse: MessageFns<ActivateSMTPConfigResponse> = {
  encode(message: ActivateSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateSMTPConfigResponse>): ActivateSMTPConfigResponse {
    return ActivateSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateSMTPConfigResponse>): ActivateSMTPConfigResponse {
    const message = createBaseActivateSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateSMTPConfigRequest(): DeactivateSMTPConfigRequest {
  return { id: "" };
}

export const DeactivateSMTPConfigRequest: MessageFns<DeactivateSMTPConfigRequest> = {
  encode(message: DeactivateSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateSMTPConfigRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeactivateSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateSMTPConfigRequest>): DeactivateSMTPConfigRequest {
    return DeactivateSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateSMTPConfigRequest>): DeactivateSMTPConfigRequest {
    const message = createBaseDeactivateSMTPConfigRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateSMTPConfigResponse(): DeactivateSMTPConfigResponse {
  return { details: undefined };
}

export const DeactivateSMTPConfigResponse: MessageFns<DeactivateSMTPConfigResponse> = {
  encode(message: DeactivateSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateSMTPConfigResponse>): DeactivateSMTPConfigResponse {
    return DeactivateSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateSMTPConfigResponse>): DeactivateSMTPConfigResponse {
    const message = createBaseDeactivateSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSMTPConfigRequest(): RemoveSMTPConfigRequest {
  return { id: "" };
}

export const RemoveSMTPConfigRequest: MessageFns<RemoveSMTPConfigRequest> = {
  encode(message: RemoveSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMTPConfigRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveSMTPConfigRequest>): RemoveSMTPConfigRequest {
    return RemoveSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSMTPConfigRequest>): RemoveSMTPConfigRequest {
    const message = createBaseRemoveSMTPConfigRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveSMTPConfigResponse(): RemoveSMTPConfigResponse {
  return { details: undefined };
}

export const RemoveSMTPConfigResponse: MessageFns<RemoveSMTPConfigResponse> = {
  encode(message: RemoveSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMTPConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSMTPConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveSMTPConfigResponse>): RemoveSMTPConfigResponse {
    return RemoveSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSMTPConfigResponse>): RemoveSMTPConfigResponse {
    const message = createBaseRemoveSMTPConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseTestSMTPConfigByIdRequest(): TestSMTPConfigByIdRequest {
  return { id: "", receiverAddress: "" };
}

export const TestSMTPConfigByIdRequest: MessageFns<TestSMTPConfigByIdRequest> = {
  encode(message: TestSMTPConfigByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.receiverAddress !== "") {
      writer.uint32(18).string(message.receiverAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestSMTPConfigByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestSMTPConfigByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiverAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestSMTPConfigByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
    };
  },

  toJSON(message: TestSMTPConfigByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.receiverAddress !== "") {
      obj.receiverAddress = message.receiverAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<TestSMTPConfigByIdRequest>): TestSMTPConfigByIdRequest {
    return TestSMTPConfigByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestSMTPConfigByIdRequest>): TestSMTPConfigByIdRequest {
    const message = createBaseTestSMTPConfigByIdRequest();
    message.id = object.id ?? "";
    message.receiverAddress = object.receiverAddress ?? "";
    return message;
  },
};

function createBaseTestSMTPConfigByIdResponse(): TestSMTPConfigByIdResponse {
  return {};
}

export const TestSMTPConfigByIdResponse: MessageFns<TestSMTPConfigByIdResponse> = {
  encode(_: TestSMTPConfigByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestSMTPConfigByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestSMTPConfigByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TestSMTPConfigByIdResponse {
    return {};
  },

  toJSON(_: TestSMTPConfigByIdResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TestSMTPConfigByIdResponse>): TestSMTPConfigByIdResponse {
    return TestSMTPConfigByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TestSMTPConfigByIdResponse>): TestSMTPConfigByIdResponse {
    const message = createBaseTestSMTPConfigByIdResponse();
    return message;
  },
};

function createBaseTestSMTPConfigRequest(): TestSMTPConfigRequest {
  return {
    senderAddress: "",
    senderName: "",
    tls: false,
    host: "",
    user: "",
    password: "",
    receiverAddress: "",
    id: "",
  };
}

export const TestSMTPConfigRequest: MessageFns<TestSMTPConfigRequest> = {
  encode(message: TestSMTPConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls !== false) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.password !== "") {
      writer.uint32(50).string(message.password);
    }
    if (message.receiverAddress !== "") {
      writer.uint32(58).string(message.receiverAddress);
    }
    if (message.id !== "") {
      writer.uint32(66).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestSMTPConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestSMTPConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.password = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.receiverAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestSMTPConfigRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
      tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: TestSMTPConfigRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls !== false) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.receiverAddress !== "") {
      obj.receiverAddress = message.receiverAddress;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<TestSMTPConfigRequest>): TestSMTPConfigRequest {
    return TestSMTPConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestSMTPConfigRequest>): TestSMTPConfigRequest {
    const message = createBaseTestSMTPConfigRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.password = object.password ?? "";
    message.receiverAddress = object.receiverAddress ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseTestSMTPConfigResponse(): TestSMTPConfigResponse {
  return {};
}

export const TestSMTPConfigResponse: MessageFns<TestSMTPConfigResponse> = {
  encode(_: TestSMTPConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestSMTPConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestSMTPConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TestSMTPConfigResponse {
    return {};
  },

  toJSON(_: TestSMTPConfigResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TestSMTPConfigResponse>): TestSMTPConfigResponse {
    return TestSMTPConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TestSMTPConfigResponse>): TestSMTPConfigResponse {
    const message = createBaseTestSMTPConfigResponse();
    return message;
  },
};

function createBaseGetEmailProviderRequest(): GetEmailProviderRequest {
  return {};
}

export const GetEmailProviderRequest: MessageFns<GetEmailProviderRequest> = {
  encode(_: GetEmailProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmailProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetEmailProviderRequest {
    return {};
  },

  toJSON(_: GetEmailProviderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetEmailProviderRequest>): GetEmailProviderRequest {
    return GetEmailProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetEmailProviderRequest>): GetEmailProviderRequest {
    const message = createBaseGetEmailProviderRequest();
    return message;
  },
};

function createBaseGetEmailProviderResponse(): GetEmailProviderResponse {
  return { config: undefined };
}

export const GetEmailProviderResponse: MessageFns<GetEmailProviderResponse> = {
  encode(message: GetEmailProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      EmailProvider.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmailProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = EmailProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmailProviderResponse {
    return { config: isSet(object.config) ? EmailProvider.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetEmailProviderResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = EmailProvider.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmailProviderResponse>): GetEmailProviderResponse {
    return GetEmailProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmailProviderResponse>): GetEmailProviderResponse {
    const message = createBaseGetEmailProviderResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? EmailProvider.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseGetEmailProviderByIdRequest(): GetEmailProviderByIdRequest {
  return { id: "" };
}

export const GetEmailProviderByIdRequest: MessageFns<GetEmailProviderByIdRequest> = {
  encode(message: GetEmailProviderByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmailProviderByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailProviderByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmailProviderByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetEmailProviderByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmailProviderByIdRequest>): GetEmailProviderByIdRequest {
    return GetEmailProviderByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmailProviderByIdRequest>): GetEmailProviderByIdRequest {
    const message = createBaseGetEmailProviderByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetEmailProviderByIdResponse(): GetEmailProviderByIdResponse {
  return { config: undefined };
}

export const GetEmailProviderByIdResponse: MessageFns<GetEmailProviderByIdResponse> = {
  encode(message: GetEmailProviderByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      EmailProvider.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmailProviderByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailProviderByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = EmailProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmailProviderByIdResponse {
    return { config: isSet(object.config) ? EmailProvider.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetEmailProviderByIdResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = EmailProvider.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<GetEmailProviderByIdResponse>): GetEmailProviderByIdResponse {
    return GetEmailProviderByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEmailProviderByIdResponse>): GetEmailProviderByIdResponse {
    const message = createBaseGetEmailProviderByIdResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? EmailProvider.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseListEmailProvidersRequest(): ListEmailProvidersRequest {
  return { query: undefined };
}

export const ListEmailProvidersRequest: MessageFns<ListEmailProvidersRequest> = {
  encode(message: ListEmailProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEmailProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEmailProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEmailProvidersRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListEmailProvidersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEmailProvidersRequest>): ListEmailProvidersRequest {
    return ListEmailProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEmailProvidersRequest>): ListEmailProvidersRequest {
    const message = createBaseListEmailProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListEmailProvidersResponse(): ListEmailProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListEmailProvidersResponse: MessageFns<ListEmailProvidersResponse> = {
  encode(message: ListEmailProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      EmailProvider.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEmailProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEmailProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(EmailProvider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEmailProvidersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => EmailProvider.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListEmailProvidersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => EmailProvider.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEmailProvidersResponse>): ListEmailProvidersResponse {
    return ListEmailProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEmailProvidersResponse>): ListEmailProvidersResponse {
    const message = createBaseListEmailProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => EmailProvider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddEmailProviderSMTPRequest(): AddEmailProviderSMTPRequest {
  return {
    senderAddress: "",
    senderName: "",
    tls: false,
    host: "",
    user: "",
    password: "",
    replyToAddress: "",
    description: "",
  };
}

export const AddEmailProviderSMTPRequest: MessageFns<AddEmailProviderSMTPRequest> = {
  encode(message: AddEmailProviderSMTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls !== false) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.password !== "") {
      writer.uint32(50).string(message.password);
    }
    if (message.replyToAddress !== "") {
      writer.uint32(58).string(message.replyToAddress);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddEmailProviderSMTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddEmailProviderSMTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.password = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.replyToAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddEmailProviderSMTPRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
      tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AddEmailProviderSMTPRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls !== false) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.replyToAddress !== "") {
      obj.replyToAddress = message.replyToAddress;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<AddEmailProviderSMTPRequest>): AddEmailProviderSMTPRequest {
    return AddEmailProviderSMTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddEmailProviderSMTPRequest>): AddEmailProviderSMTPRequest {
    const message = createBaseAddEmailProviderSMTPRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.password = object.password ?? "";
    message.replyToAddress = object.replyToAddress ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseAddEmailProviderSMTPResponse(): AddEmailProviderSMTPResponse {
  return { details: undefined, id: "" };
}

export const AddEmailProviderSMTPResponse: MessageFns<AddEmailProviderSMTPResponse> = {
  encode(message: AddEmailProviderSMTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddEmailProviderSMTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddEmailProviderSMTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddEmailProviderSMTPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddEmailProviderSMTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddEmailProviderSMTPResponse>): AddEmailProviderSMTPResponse {
    return AddEmailProviderSMTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddEmailProviderSMTPResponse>): AddEmailProviderSMTPResponse {
    const message = createBaseAddEmailProviderSMTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateEmailProviderSMTPRequest(): UpdateEmailProviderSMTPRequest {
  return {
    senderAddress: "",
    senderName: "",
    tls: false,
    host: "",
    user: "",
    replyToAddress: "",
    password: "",
    description: "",
    id: "",
  };
}

export const UpdateEmailProviderSMTPRequest: MessageFns<UpdateEmailProviderSMTPRequest> = {
  encode(message: UpdateEmailProviderSMTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls !== false) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.replyToAddress !== "") {
      writer.uint32(50).string(message.replyToAddress);
    }
    if (message.password !== "") {
      writer.uint32(58).string(message.password);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (message.id !== "") {
      writer.uint32(74).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailProviderSMTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailProviderSMTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.replyToAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.password = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailProviderSMTPRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
      tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: UpdateEmailProviderSMTPRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls !== false) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.replyToAddress !== "") {
      obj.replyToAddress = message.replyToAddress;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmailProviderSMTPRequest>): UpdateEmailProviderSMTPRequest {
    return UpdateEmailProviderSMTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmailProviderSMTPRequest>): UpdateEmailProviderSMTPRequest {
    const message = createBaseUpdateEmailProviderSMTPRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.replyToAddress = object.replyToAddress ?? "";
    message.password = object.password ?? "";
    message.description = object.description ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateEmailProviderSMTPResponse(): UpdateEmailProviderSMTPResponse {
  return { details: undefined };
}

export const UpdateEmailProviderSMTPResponse: MessageFns<UpdateEmailProviderSMTPResponse> = {
  encode(message: UpdateEmailProviderSMTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailProviderSMTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailProviderSMTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailProviderSMTPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateEmailProviderSMTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmailProviderSMTPResponse>): UpdateEmailProviderSMTPResponse {
    return UpdateEmailProviderSMTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmailProviderSMTPResponse>): UpdateEmailProviderSMTPResponse {
    const message = createBaseUpdateEmailProviderSMTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateEmailProviderSMTPPasswordRequest(): UpdateEmailProviderSMTPPasswordRequest {
  return { password: "", id: "" };
}

export const UpdateEmailProviderSMTPPasswordRequest: MessageFns<UpdateEmailProviderSMTPPasswordRequest> = {
  encode(message: UpdateEmailProviderSMTPPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.password !== "") {
      writer.uint32(10).string(message.password);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailProviderSMTPPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailProviderSMTPPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.password = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailProviderSMTPPasswordRequest {
    return {
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: UpdateEmailProviderSMTPPasswordRequest): unknown {
    const obj: any = {};
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmailProviderSMTPPasswordRequest>): UpdateEmailProviderSMTPPasswordRequest {
    return UpdateEmailProviderSMTPPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmailProviderSMTPPasswordRequest>): UpdateEmailProviderSMTPPasswordRequest {
    const message = createBaseUpdateEmailProviderSMTPPasswordRequest();
    message.password = object.password ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateEmailProviderSMTPPasswordResponse(): UpdateEmailProviderSMTPPasswordResponse {
  return { details: undefined };
}

export const UpdateEmailProviderSMTPPasswordResponse: MessageFns<UpdateEmailProviderSMTPPasswordResponse> = {
  encode(message: UpdateEmailProviderSMTPPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailProviderSMTPPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailProviderSMTPPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailProviderSMTPPasswordResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateEmailProviderSMTPPasswordResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmailProviderSMTPPasswordResponse>): UpdateEmailProviderSMTPPasswordResponse {
    return UpdateEmailProviderSMTPPasswordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmailProviderSMTPPasswordResponse>): UpdateEmailProviderSMTPPasswordResponse {
    const message = createBaseUpdateEmailProviderSMTPPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddEmailProviderHTTPRequest(): AddEmailProviderHTTPRequest {
  return { endpoint: "", description: "" };
}

export const AddEmailProviderHTTPRequest: MessageFns<AddEmailProviderHTTPRequest> = {
  encode(message: AddEmailProviderHTTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddEmailProviderHTTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddEmailProviderHTTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddEmailProviderHTTPRequest {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AddEmailProviderHTTPRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<AddEmailProviderHTTPRequest>): AddEmailProviderHTTPRequest {
    return AddEmailProviderHTTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddEmailProviderHTTPRequest>): AddEmailProviderHTTPRequest {
    const message = createBaseAddEmailProviderHTTPRequest();
    message.endpoint = object.endpoint ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseAddEmailProviderHTTPResponse(): AddEmailProviderHTTPResponse {
  return { details: undefined, id: "" };
}

export const AddEmailProviderHTTPResponse: MessageFns<AddEmailProviderHTTPResponse> = {
  encode(message: AddEmailProviderHTTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddEmailProviderHTTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddEmailProviderHTTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddEmailProviderHTTPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddEmailProviderHTTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddEmailProviderHTTPResponse>): AddEmailProviderHTTPResponse {
    return AddEmailProviderHTTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddEmailProviderHTTPResponse>): AddEmailProviderHTTPResponse {
    const message = createBaseAddEmailProviderHTTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateEmailProviderHTTPRequest(): UpdateEmailProviderHTTPRequest {
  return { id: "", endpoint: "", description: "" };
}

export const UpdateEmailProviderHTTPRequest: MessageFns<UpdateEmailProviderHTTPRequest> = {
  encode(message: UpdateEmailProviderHTTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailProviderHTTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailProviderHTTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailProviderHTTPRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UpdateEmailProviderHTTPRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmailProviderHTTPRequest>): UpdateEmailProviderHTTPRequest {
    return UpdateEmailProviderHTTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmailProviderHTTPRequest>): UpdateEmailProviderHTTPRequest {
    const message = createBaseUpdateEmailProviderHTTPRequest();
    message.id = object.id ?? "";
    message.endpoint = object.endpoint ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateEmailProviderHTTPResponse(): UpdateEmailProviderHTTPResponse {
  return { details: undefined };
}

export const UpdateEmailProviderHTTPResponse: MessageFns<UpdateEmailProviderHTTPResponse> = {
  encode(message: UpdateEmailProviderHTTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEmailProviderHTTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEmailProviderHTTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEmailProviderHTTPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateEmailProviderHTTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEmailProviderHTTPResponse>): UpdateEmailProviderHTTPResponse {
    return UpdateEmailProviderHTTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEmailProviderHTTPResponse>): UpdateEmailProviderHTTPResponse {
    const message = createBaseUpdateEmailProviderHTTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateEmailProviderRequest(): ActivateEmailProviderRequest {
  return { id: "" };
}

export const ActivateEmailProviderRequest: MessageFns<ActivateEmailProviderRequest> = {
  encode(message: ActivateEmailProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateEmailProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateEmailProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateEmailProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ActivateEmailProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateEmailProviderRequest>): ActivateEmailProviderRequest {
    return ActivateEmailProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateEmailProviderRequest>): ActivateEmailProviderRequest {
    const message = createBaseActivateEmailProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActivateEmailProviderResponse(): ActivateEmailProviderResponse {
  return { details: undefined };
}

export const ActivateEmailProviderResponse: MessageFns<ActivateEmailProviderResponse> = {
  encode(message: ActivateEmailProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateEmailProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateEmailProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateEmailProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateEmailProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateEmailProviderResponse>): ActivateEmailProviderResponse {
    return ActivateEmailProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateEmailProviderResponse>): ActivateEmailProviderResponse {
    const message = createBaseActivateEmailProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateEmailProviderRequest(): DeactivateEmailProviderRequest {
  return { id: "" };
}

export const DeactivateEmailProviderRequest: MessageFns<DeactivateEmailProviderRequest> = {
  encode(message: DeactivateEmailProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateEmailProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateEmailProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateEmailProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeactivateEmailProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateEmailProviderRequest>): DeactivateEmailProviderRequest {
    return DeactivateEmailProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateEmailProviderRequest>): DeactivateEmailProviderRequest {
    const message = createBaseDeactivateEmailProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateEmailProviderResponse(): DeactivateEmailProviderResponse {
  return { details: undefined };
}

export const DeactivateEmailProviderResponse: MessageFns<DeactivateEmailProviderResponse> = {
  encode(message: DeactivateEmailProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateEmailProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateEmailProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateEmailProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateEmailProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateEmailProviderResponse>): DeactivateEmailProviderResponse {
    return DeactivateEmailProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateEmailProviderResponse>): DeactivateEmailProviderResponse {
    const message = createBaseDeactivateEmailProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveEmailProviderRequest(): RemoveEmailProviderRequest {
  return { id: "" };
}

export const RemoveEmailProviderRequest: MessageFns<RemoveEmailProviderRequest> = {
  encode(message: RemoveEmailProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveEmailProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveEmailProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveEmailProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveEmailProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveEmailProviderRequest>): RemoveEmailProviderRequest {
    return RemoveEmailProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveEmailProviderRequest>): RemoveEmailProviderRequest {
    const message = createBaseRemoveEmailProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveEmailProviderResponse(): RemoveEmailProviderResponse {
  return { details: undefined };
}

export const RemoveEmailProviderResponse: MessageFns<RemoveEmailProviderResponse> = {
  encode(message: RemoveEmailProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveEmailProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveEmailProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveEmailProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveEmailProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveEmailProviderResponse>): RemoveEmailProviderResponse {
    return RemoveEmailProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveEmailProviderResponse>): RemoveEmailProviderResponse {
    const message = createBaseRemoveEmailProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseTestEmailProviderSMTPByIdRequest(): TestEmailProviderSMTPByIdRequest {
  return { id: "", receiverAddress: "" };
}

export const TestEmailProviderSMTPByIdRequest: MessageFns<TestEmailProviderSMTPByIdRequest> = {
  encode(message: TestEmailProviderSMTPByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.receiverAddress !== "") {
      writer.uint32(18).string(message.receiverAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestEmailProviderSMTPByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestEmailProviderSMTPByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.receiverAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestEmailProviderSMTPByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
    };
  },

  toJSON(message: TestEmailProviderSMTPByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.receiverAddress !== "") {
      obj.receiverAddress = message.receiverAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<TestEmailProviderSMTPByIdRequest>): TestEmailProviderSMTPByIdRequest {
    return TestEmailProviderSMTPByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestEmailProviderSMTPByIdRequest>): TestEmailProviderSMTPByIdRequest {
    const message = createBaseTestEmailProviderSMTPByIdRequest();
    message.id = object.id ?? "";
    message.receiverAddress = object.receiverAddress ?? "";
    return message;
  },
};

function createBaseTestEmailProviderSMTPByIdResponse(): TestEmailProviderSMTPByIdResponse {
  return {};
}

export const TestEmailProviderSMTPByIdResponse: MessageFns<TestEmailProviderSMTPByIdResponse> = {
  encode(_: TestEmailProviderSMTPByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestEmailProviderSMTPByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestEmailProviderSMTPByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TestEmailProviderSMTPByIdResponse {
    return {};
  },

  toJSON(_: TestEmailProviderSMTPByIdResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TestEmailProviderSMTPByIdResponse>): TestEmailProviderSMTPByIdResponse {
    return TestEmailProviderSMTPByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TestEmailProviderSMTPByIdResponse>): TestEmailProviderSMTPByIdResponse {
    const message = createBaseTestEmailProviderSMTPByIdResponse();
    return message;
  },
};

function createBaseTestEmailProviderSMTPRequest(): TestEmailProviderSMTPRequest {
  return {
    senderAddress: "",
    senderName: "",
    tls: false,
    host: "",
    user: "",
    password: "",
    receiverAddress: "",
    id: "",
  };
}

export const TestEmailProviderSMTPRequest: MessageFns<TestEmailProviderSMTPRequest> = {
  encode(message: TestEmailProviderSMTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderAddress !== "") {
      writer.uint32(10).string(message.senderAddress);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.tls !== false) {
      writer.uint32(24).bool(message.tls);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.user !== "") {
      writer.uint32(42).string(message.user);
    }
    if (message.password !== "") {
      writer.uint32(50).string(message.password);
    }
    if (message.receiverAddress !== "") {
      writer.uint32(58).string(message.receiverAddress);
    }
    if (message.id !== "") {
      writer.uint32(66).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestEmailProviderSMTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestEmailProviderSMTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.senderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.user = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.password = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.receiverAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestEmailProviderSMTPRequest {
    return {
      senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
      senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
      tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: TestEmailProviderSMTPRequest): unknown {
    const obj: any = {};
    if (message.senderAddress !== "") {
      obj.senderAddress = message.senderAddress;
    }
    if (message.senderName !== "") {
      obj.senderName = message.senderName;
    }
    if (message.tls !== false) {
      obj.tls = message.tls;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.receiverAddress !== "") {
      obj.receiverAddress = message.receiverAddress;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<TestEmailProviderSMTPRequest>): TestEmailProviderSMTPRequest {
    return TestEmailProviderSMTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestEmailProviderSMTPRequest>): TestEmailProviderSMTPRequest {
    const message = createBaseTestEmailProviderSMTPRequest();
    message.senderAddress = object.senderAddress ?? "";
    message.senderName = object.senderName ?? "";
    message.tls = object.tls ?? false;
    message.host = object.host ?? "";
    message.user = object.user ?? "";
    message.password = object.password ?? "";
    message.receiverAddress = object.receiverAddress ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseTestEmailProviderSMTPResponse(): TestEmailProviderSMTPResponse {
  return {};
}

export const TestEmailProviderSMTPResponse: MessageFns<TestEmailProviderSMTPResponse> = {
  encode(_: TestEmailProviderSMTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestEmailProviderSMTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestEmailProviderSMTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TestEmailProviderSMTPResponse {
    return {};
  },

  toJSON(_: TestEmailProviderSMTPResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TestEmailProviderSMTPResponse>): TestEmailProviderSMTPResponse {
    return TestEmailProviderSMTPResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TestEmailProviderSMTPResponse>): TestEmailProviderSMTPResponse {
    const message = createBaseTestEmailProviderSMTPResponse();
    return message;
  },
};

function createBaseListSMSProvidersRequest(): ListSMSProvidersRequest {
  return { query: undefined };
}

export const ListSMSProvidersRequest: MessageFns<ListSMSProvidersRequest> = {
  encode(message: ListSMSProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSMSProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSMSProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSMSProvidersRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListSMSProvidersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSMSProvidersRequest>): ListSMSProvidersRequest {
    return ListSMSProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSMSProvidersRequest>): ListSMSProvidersRequest {
    const message = createBaseListSMSProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListSMSProvidersResponse(): ListSMSProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListSMSProvidersResponse: MessageFns<ListSMSProvidersResponse> = {
  encode(message: ListSMSProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      SMSProvider.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSMSProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSMSProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(SMSProvider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSMSProvidersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => SMSProvider.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListSMSProvidersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => SMSProvider.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSMSProvidersResponse>): ListSMSProvidersResponse {
    return ListSMSProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSMSProvidersResponse>): ListSMSProvidersResponse {
    const message = createBaseListSMSProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => SMSProvider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSMSProviderRequest(): GetSMSProviderRequest {
  return { id: "" };
}

export const GetSMSProviderRequest: MessageFns<GetSMSProviderRequest> = {
  encode(message: GetSMSProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSMSProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMSProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSMSProviderRequest>): GetSMSProviderRequest {
    return GetSMSProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSMSProviderRequest>): GetSMSProviderRequest {
    const message = createBaseGetSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetSMSProviderResponse(): GetSMSProviderResponse {
  return { config: undefined };
}

export const GetSMSProviderResponse: MessageFns<GetSMSProviderResponse> = {
  encode(message: GetSMSProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      SMSProvider.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSMSProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = SMSProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSMSProviderResponse {
    return { config: isSet(object.config) ? SMSProvider.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = SMSProvider.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSMSProviderResponse>): GetSMSProviderResponse {
    return GetSMSProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSMSProviderResponse>): GetSMSProviderResponse {
    const message = createBaseGetSMSProviderResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? SMSProvider.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseAddSMSProviderTwilioRequest(): AddSMSProviderTwilioRequest {
  return { sid: "", token: "", senderNumber: "", description: "", verifyServiceSid: "" };
}

export const AddSMSProviderTwilioRequest: MessageFns<AddSMSProviderTwilioRequest> = {
  encode(message: AddSMSProviderTwilioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.senderNumber !== "") {
      writer.uint32(26).string(message.senderNumber);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.verifyServiceSid !== "") {
      writer.uint32(42).string(message.verifyServiceSid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSMSProviderTwilioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMSProviderTwilioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.senderNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.verifyServiceSid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMSProviderTwilioRequest {
    return {
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      senderNumber: isSet(object.senderNumber) ? globalThis.String(object.senderNumber) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      verifyServiceSid: isSet(object.verifyServiceSid) ? globalThis.String(object.verifyServiceSid) : "",
    };
  },

  toJSON(message: AddSMSProviderTwilioRequest): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.senderNumber !== "") {
      obj.senderNumber = message.senderNumber;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.verifyServiceSid !== "") {
      obj.verifyServiceSid = message.verifyServiceSid;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSMSProviderTwilioRequest>): AddSMSProviderTwilioRequest {
    return AddSMSProviderTwilioRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSMSProviderTwilioRequest>): AddSMSProviderTwilioRequest {
    const message = createBaseAddSMSProviderTwilioRequest();
    message.sid = object.sid ?? "";
    message.token = object.token ?? "";
    message.senderNumber = object.senderNumber ?? "";
    message.description = object.description ?? "";
    message.verifyServiceSid = object.verifyServiceSid ?? "";
    return message;
  },
};

function createBaseAddSMSProviderTwilioResponse(): AddSMSProviderTwilioResponse {
  return { details: undefined, id: "" };
}

export const AddSMSProviderTwilioResponse: MessageFns<AddSMSProviderTwilioResponse> = {
  encode(message: AddSMSProviderTwilioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSMSProviderTwilioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMSProviderTwilioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMSProviderTwilioResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddSMSProviderTwilioResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSMSProviderTwilioResponse>): AddSMSProviderTwilioResponse {
    return AddSMSProviderTwilioResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSMSProviderTwilioResponse>): AddSMSProviderTwilioResponse {
    const message = createBaseAddSMSProviderTwilioResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioRequest(): UpdateSMSProviderTwilioRequest {
  return { id: "", sid: "", senderNumber: "", description: "", verifyServiceSid: "" };
}

export const UpdateSMSProviderTwilioRequest: MessageFns<UpdateSMSProviderTwilioRequest> = {
  encode(message: UpdateSMSProviderTwilioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sid !== "") {
      writer.uint32(18).string(message.sid);
    }
    if (message.senderNumber !== "") {
      writer.uint32(26).string(message.senderNumber);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.verifyServiceSid !== "") {
      writer.uint32(42).string(message.verifyServiceSid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMSProviderTwilioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.senderNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.verifyServiceSid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      senderNumber: isSet(object.senderNumber) ? globalThis.String(object.senderNumber) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      verifyServiceSid: isSet(object.verifyServiceSid) ? globalThis.String(object.verifyServiceSid) : "",
    };
  },

  toJSON(message: UpdateSMSProviderTwilioRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.senderNumber !== "") {
      obj.senderNumber = message.senderNumber;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.verifyServiceSid !== "") {
      obj.verifyServiceSid = message.verifyServiceSid;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMSProviderTwilioRequest>): UpdateSMSProviderTwilioRequest {
    return UpdateSMSProviderTwilioRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMSProviderTwilioRequest>): UpdateSMSProviderTwilioRequest {
    const message = createBaseUpdateSMSProviderTwilioRequest();
    message.id = object.id ?? "";
    message.sid = object.sid ?? "";
    message.senderNumber = object.senderNumber ?? "";
    message.description = object.description ?? "";
    message.verifyServiceSid = object.verifyServiceSid ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioResponse(): UpdateSMSProviderTwilioResponse {
  return { details: undefined };
}

export const UpdateSMSProviderTwilioResponse: MessageFns<UpdateSMSProviderTwilioResponse> = {
  encode(message: UpdateSMSProviderTwilioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMSProviderTwilioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMSProviderTwilioResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMSProviderTwilioResponse>): UpdateSMSProviderTwilioResponse {
    return UpdateSMSProviderTwilioResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMSProviderTwilioResponse>): UpdateSMSProviderTwilioResponse {
    const message = createBaseUpdateSMSProviderTwilioResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioTokenRequest(): UpdateSMSProviderTwilioTokenRequest {
  return { id: "", token: "" };
}

export const UpdateSMSProviderTwilioTokenRequest: MessageFns<UpdateSMSProviderTwilioTokenRequest> = {
  encode(message: UpdateSMSProviderTwilioTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMSProviderTwilioTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioTokenRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: UpdateSMSProviderTwilioTokenRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMSProviderTwilioTokenRequest>): UpdateSMSProviderTwilioTokenRequest {
    return UpdateSMSProviderTwilioTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMSProviderTwilioTokenRequest>): UpdateSMSProviderTwilioTokenRequest {
    const message = createBaseUpdateSMSProviderTwilioTokenRequest();
    message.id = object.id ?? "";
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderTwilioTokenResponse(): UpdateSMSProviderTwilioTokenResponse {
  return { details: undefined };
}

export const UpdateSMSProviderTwilioTokenResponse: MessageFns<UpdateSMSProviderTwilioTokenResponse> = {
  encode(message: UpdateSMSProviderTwilioTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMSProviderTwilioTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderTwilioTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderTwilioTokenResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMSProviderTwilioTokenResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMSProviderTwilioTokenResponse>): UpdateSMSProviderTwilioTokenResponse {
    return UpdateSMSProviderTwilioTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMSProviderTwilioTokenResponse>): UpdateSMSProviderTwilioTokenResponse {
    const message = createBaseUpdateSMSProviderTwilioTokenResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddSMSProviderHTTPRequest(): AddSMSProviderHTTPRequest {
  return { endpoint: "", description: "" };
}

export const AddSMSProviderHTTPRequest: MessageFns<AddSMSProviderHTTPRequest> = {
  encode(message: AddSMSProviderHTTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSMSProviderHTTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMSProviderHTTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMSProviderHTTPRequest {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AddSMSProviderHTTPRequest): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSMSProviderHTTPRequest>): AddSMSProviderHTTPRequest {
    return AddSMSProviderHTTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSMSProviderHTTPRequest>): AddSMSProviderHTTPRequest {
    const message = createBaseAddSMSProviderHTTPRequest();
    message.endpoint = object.endpoint ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseAddSMSProviderHTTPResponse(): AddSMSProviderHTTPResponse {
  return { details: undefined, id: "" };
}

export const AddSMSProviderHTTPResponse: MessageFns<AddSMSProviderHTTPResponse> = {
  encode(message: AddSMSProviderHTTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSMSProviderHTTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSMSProviderHTTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSMSProviderHTTPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddSMSProviderHTTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSMSProviderHTTPResponse>): AddSMSProviderHTTPResponse {
    return AddSMSProviderHTTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSMSProviderHTTPResponse>): AddSMSProviderHTTPResponse {
    const message = createBaseAddSMSProviderHTTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderHTTPRequest(): UpdateSMSProviderHTTPRequest {
  return { id: "", endpoint: "", description: "" };
}

export const UpdateSMSProviderHTTPRequest: MessageFns<UpdateSMSProviderHTTPRequest> = {
  encode(message: UpdateSMSProviderHTTPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMSProviderHTTPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderHTTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderHTTPRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UpdateSMSProviderHTTPRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMSProviderHTTPRequest>): UpdateSMSProviderHTTPRequest {
    return UpdateSMSProviderHTTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMSProviderHTTPRequest>): UpdateSMSProviderHTTPRequest {
    const message = createBaseUpdateSMSProviderHTTPRequest();
    message.id = object.id ?? "";
    message.endpoint = object.endpoint ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateSMSProviderHTTPResponse(): UpdateSMSProviderHTTPResponse {
  return { details: undefined };
}

export const UpdateSMSProviderHTTPResponse: MessageFns<UpdateSMSProviderHTTPResponse> = {
  encode(message: UpdateSMSProviderHTTPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSMSProviderHTTPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSMSProviderHTTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSMSProviderHTTPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSMSProviderHTTPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSMSProviderHTTPResponse>): UpdateSMSProviderHTTPResponse {
    return UpdateSMSProviderHTTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSMSProviderHTTPResponse>): UpdateSMSProviderHTTPResponse {
    const message = createBaseUpdateSMSProviderHTTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateSMSProviderRequest(): ActivateSMSProviderRequest {
  return { id: "" };
}

export const ActivateSMSProviderRequest: MessageFns<ActivateSMSProviderRequest> = {
  encode(message: ActivateSMSProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateSMSProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateSMSProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ActivateSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateSMSProviderRequest>): ActivateSMSProviderRequest {
    return ActivateSMSProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateSMSProviderRequest>): ActivateSMSProviderRequest {
    const message = createBaseActivateSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseActivateSMSProviderResponse(): ActivateSMSProviderResponse {
  return { details: undefined };
}

export const ActivateSMSProviderResponse: MessageFns<ActivateSMSProviderResponse> = {
  encode(message: ActivateSMSProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateSMSProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateSMSProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateSMSProviderResponse>): ActivateSMSProviderResponse {
    return ActivateSMSProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateSMSProviderResponse>): ActivateSMSProviderResponse {
    const message = createBaseActivateSMSProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateSMSProviderRequest(): DeactivateSMSProviderRequest {
  return { id: "" };
}

export const DeactivateSMSProviderRequest: MessageFns<DeactivateSMSProviderRequest> = {
  encode(message: DeactivateSMSProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateSMSProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateSMSProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeactivateSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateSMSProviderRequest>): DeactivateSMSProviderRequest {
    return DeactivateSMSProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateSMSProviderRequest>): DeactivateSMSProviderRequest {
    const message = createBaseDeactivateSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateSMSProviderResponse(): DeactivateSMSProviderResponse {
  return { details: undefined };
}

export const DeactivateSMSProviderResponse: MessageFns<DeactivateSMSProviderResponse> = {
  encode(message: DeactivateSMSProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateSMSProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateSMSProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateSMSProviderResponse>): DeactivateSMSProviderResponse {
    return DeactivateSMSProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateSMSProviderResponse>): DeactivateSMSProviderResponse {
    const message = createBaseDeactivateSMSProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSMSProviderRequest(): RemoveSMSProviderRequest {
  return { id: "" };
}

export const RemoveSMSProviderRequest: MessageFns<RemoveSMSProviderRequest> = {
  encode(message: RemoveSMSProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSMSProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMSProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMSProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveSMSProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveSMSProviderRequest>): RemoveSMSProviderRequest {
    return RemoveSMSProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSMSProviderRequest>): RemoveSMSProviderRequest {
    const message = createBaseRemoveSMSProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveSMSProviderResponse(): RemoveSMSProviderResponse {
  return { details: undefined };
}

export const RemoveSMSProviderResponse: MessageFns<RemoveSMSProviderResponse> = {
  encode(message: RemoveSMSProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSMSProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSMSProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSMSProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSMSProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveSMSProviderResponse>): RemoveSMSProviderResponse {
    return RemoveSMSProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSMSProviderResponse>): RemoveSMSProviderResponse {
    const message = createBaseRemoveSMSProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetFileSystemNotificationProviderRequest(): GetFileSystemNotificationProviderRequest {
  return {};
}

export const GetFileSystemNotificationProviderRequest: MessageFns<GetFileSystemNotificationProviderRequest> = {
  encode(_: GetFileSystemNotificationProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFileSystemNotificationProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileSystemNotificationProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetFileSystemNotificationProviderRequest {
    return {};
  },

  toJSON(_: GetFileSystemNotificationProviderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetFileSystemNotificationProviderRequest>): GetFileSystemNotificationProviderRequest {
    return GetFileSystemNotificationProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetFileSystemNotificationProviderRequest>): GetFileSystemNotificationProviderRequest {
    const message = createBaseGetFileSystemNotificationProviderRequest();
    return message;
  },
};

function createBaseGetFileSystemNotificationProviderResponse(): GetFileSystemNotificationProviderResponse {
  return { provider: undefined };
}

export const GetFileSystemNotificationProviderResponse: MessageFns<GetFileSystemNotificationProviderResponse> = {
  encode(message: GetFileSystemNotificationProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== undefined) {
      DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFileSystemNotificationProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileSystemNotificationProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provider = DebugNotificationProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFileSystemNotificationProviderResponse {
    return { provider: isSet(object.provider) ? DebugNotificationProvider.fromJSON(object.provider) : undefined };
  },

  toJSON(message: GetFileSystemNotificationProviderResponse): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = DebugNotificationProvider.toJSON(message.provider);
    }
    return obj;
  },

  create(base?: DeepPartial<GetFileSystemNotificationProviderResponse>): GetFileSystemNotificationProviderResponse {
    return GetFileSystemNotificationProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetFileSystemNotificationProviderResponse>,
  ): GetFileSystemNotificationProviderResponse {
    const message = createBaseGetFileSystemNotificationProviderResponse();
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? DebugNotificationProvider.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseGetLogNotificationProviderRequest(): GetLogNotificationProviderRequest {
  return {};
}

export const GetLogNotificationProviderRequest: MessageFns<GetLogNotificationProviderRequest> = {
  encode(_: GetLogNotificationProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLogNotificationProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLogNotificationProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLogNotificationProviderRequest {
    return {};
  },

  toJSON(_: GetLogNotificationProviderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetLogNotificationProviderRequest>): GetLogNotificationProviderRequest {
    return GetLogNotificationProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLogNotificationProviderRequest>): GetLogNotificationProviderRequest {
    const message = createBaseGetLogNotificationProviderRequest();
    return message;
  },
};

function createBaseGetLogNotificationProviderResponse(): GetLogNotificationProviderResponse {
  return { provider: undefined };
}

export const GetLogNotificationProviderResponse: MessageFns<GetLogNotificationProviderResponse> = {
  encode(message: GetLogNotificationProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== undefined) {
      DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLogNotificationProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLogNotificationProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provider = DebugNotificationProvider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLogNotificationProviderResponse {
    return { provider: isSet(object.provider) ? DebugNotificationProvider.fromJSON(object.provider) : undefined };
  },

  toJSON(message: GetLogNotificationProviderResponse): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = DebugNotificationProvider.toJSON(message.provider);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLogNotificationProviderResponse>): GetLogNotificationProviderResponse {
    return GetLogNotificationProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLogNotificationProviderResponse>): GetLogNotificationProviderResponse {
    const message = createBaseGetLogNotificationProviderResponse();
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? DebugNotificationProvider.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseGetOIDCSettingsRequest(): GetOIDCSettingsRequest {
  return {};
}

export const GetOIDCSettingsRequest: MessageFns<GetOIDCSettingsRequest> = {
  encode(_: GetOIDCSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOIDCSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOIDCSettingsRequest {
    return {};
  },

  toJSON(_: GetOIDCSettingsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetOIDCSettingsRequest>): GetOIDCSettingsRequest {
    return GetOIDCSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetOIDCSettingsRequest>): GetOIDCSettingsRequest {
    const message = createBaseGetOIDCSettingsRequest();
    return message;
  },
};

function createBaseGetOIDCSettingsResponse(): GetOIDCSettingsResponse {
  return { settings: undefined };
}

export const GetOIDCSettingsResponse: MessageFns<GetOIDCSettingsResponse> = {
  encode(message: GetOIDCSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      OIDCSettings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOIDCSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings = OIDCSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOIDCSettingsResponse {
    return { settings: isSet(object.settings) ? OIDCSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: GetOIDCSettingsResponse): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = OIDCSettings.toJSON(message.settings);
    }
    return obj;
  },

  create(base?: DeepPartial<GetOIDCSettingsResponse>): GetOIDCSettingsResponse {
    return GetOIDCSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOIDCSettingsResponse>): GetOIDCSettingsResponse {
    const message = createBaseGetOIDCSettingsResponse();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? OIDCSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseAddOIDCSettingsRequest(): AddOIDCSettingsRequest {
  return {
    accessTokenLifetime: undefined,
    idTokenLifetime: undefined,
    refreshTokenIdleExpiration: undefined,
    refreshTokenExpiration: undefined,
  };
}

export const AddOIDCSettingsRequest: MessageFns<AddOIDCSettingsRequest> = {
  encode(message: AddOIDCSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessTokenLifetime !== undefined) {
      Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).join();
    }
    if (message.idTokenLifetime !== undefined) {
      Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).join();
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).join();
    }
    if (message.refreshTokenExpiration !== undefined) {
      Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOIDCSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.refreshTokenIdleExpiration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.refreshTokenExpiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCSettingsRequest {
    return {
      accessTokenLifetime: isSet(object.accessTokenLifetime)
        ? Duration.fromJSON(object.accessTokenLifetime)
        : undefined,
      idTokenLifetime: isSet(object.idTokenLifetime) ? Duration.fromJSON(object.idTokenLifetime) : undefined,
      refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
        ? Duration.fromJSON(object.refreshTokenIdleExpiration)
        : undefined,
      refreshTokenExpiration: isSet(object.refreshTokenExpiration)
        ? Duration.fromJSON(object.refreshTokenExpiration)
        : undefined,
    };
  },

  toJSON(message: AddOIDCSettingsRequest): unknown {
    const obj: any = {};
    if (message.accessTokenLifetime !== undefined) {
      obj.accessTokenLifetime = Duration.toJSON(message.accessTokenLifetime);
    }
    if (message.idTokenLifetime !== undefined) {
      obj.idTokenLifetime = Duration.toJSON(message.idTokenLifetime);
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      obj.refreshTokenIdleExpiration = Duration.toJSON(message.refreshTokenIdleExpiration);
    }
    if (message.refreshTokenExpiration !== undefined) {
      obj.refreshTokenExpiration = Duration.toJSON(message.refreshTokenExpiration);
    }
    return obj;
  },

  create(base?: DeepPartial<AddOIDCSettingsRequest>): AddOIDCSettingsRequest {
    return AddOIDCSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOIDCSettingsRequest>): AddOIDCSettingsRequest {
    const message = createBaseAddOIDCSettingsRequest();
    message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
      ? Duration.fromPartial(object.accessTokenLifetime)
      : undefined;
    message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
      ? Duration.fromPartial(object.idTokenLifetime)
      : undefined;
    message.refreshTokenIdleExpiration =
      (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenIdleExpiration)
        : undefined;
    message.refreshTokenExpiration =
      (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenExpiration)
        : undefined;
    return message;
  },
};

function createBaseAddOIDCSettingsResponse(): AddOIDCSettingsResponse {
  return { details: undefined };
}

export const AddOIDCSettingsResponse: MessageFns<AddOIDCSettingsResponse> = {
  encode(message: AddOIDCSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOIDCSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCSettingsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddOIDCSettingsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddOIDCSettingsResponse>): AddOIDCSettingsResponse {
    return AddOIDCSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOIDCSettingsResponse>): AddOIDCSettingsResponse {
    const message = createBaseAddOIDCSettingsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOIDCSettingsRequest(): UpdateOIDCSettingsRequest {
  return {
    accessTokenLifetime: undefined,
    idTokenLifetime: undefined,
    refreshTokenIdleExpiration: undefined,
    refreshTokenExpiration: undefined,
  };
}

export const UpdateOIDCSettingsRequest: MessageFns<UpdateOIDCSettingsRequest> = {
  encode(message: UpdateOIDCSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessTokenLifetime !== undefined) {
      Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).join();
    }
    if (message.idTokenLifetime !== undefined) {
      Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).join();
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).join();
    }
    if (message.refreshTokenExpiration !== undefined) {
      Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOIDCSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idTokenLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.refreshTokenIdleExpiration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.refreshTokenExpiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOIDCSettingsRequest {
    return {
      accessTokenLifetime: isSet(object.accessTokenLifetime)
        ? Duration.fromJSON(object.accessTokenLifetime)
        : undefined,
      idTokenLifetime: isSet(object.idTokenLifetime) ? Duration.fromJSON(object.idTokenLifetime) : undefined,
      refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
        ? Duration.fromJSON(object.refreshTokenIdleExpiration)
        : undefined,
      refreshTokenExpiration: isSet(object.refreshTokenExpiration)
        ? Duration.fromJSON(object.refreshTokenExpiration)
        : undefined,
    };
  },

  toJSON(message: UpdateOIDCSettingsRequest): unknown {
    const obj: any = {};
    if (message.accessTokenLifetime !== undefined) {
      obj.accessTokenLifetime = Duration.toJSON(message.accessTokenLifetime);
    }
    if (message.idTokenLifetime !== undefined) {
      obj.idTokenLifetime = Duration.toJSON(message.idTokenLifetime);
    }
    if (message.refreshTokenIdleExpiration !== undefined) {
      obj.refreshTokenIdleExpiration = Duration.toJSON(message.refreshTokenIdleExpiration);
    }
    if (message.refreshTokenExpiration !== undefined) {
      obj.refreshTokenExpiration = Duration.toJSON(message.refreshTokenExpiration);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateOIDCSettingsRequest>): UpdateOIDCSettingsRequest {
    return UpdateOIDCSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOIDCSettingsRequest>): UpdateOIDCSettingsRequest {
    const message = createBaseUpdateOIDCSettingsRequest();
    message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
      ? Duration.fromPartial(object.accessTokenLifetime)
      : undefined;
    message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
      ? Duration.fromPartial(object.idTokenLifetime)
      : undefined;
    message.refreshTokenIdleExpiration =
      (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenIdleExpiration)
        : undefined;
    message.refreshTokenExpiration =
      (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
        ? Duration.fromPartial(object.refreshTokenExpiration)
        : undefined;
    return message;
  },
};

function createBaseUpdateOIDCSettingsResponse(): UpdateOIDCSettingsResponse {
  return { details: undefined };
}

export const UpdateOIDCSettingsResponse: MessageFns<UpdateOIDCSettingsResponse> = {
  encode(message: UpdateOIDCSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOIDCSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOIDCSettingsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOIDCSettingsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateOIDCSettingsResponse>): UpdateOIDCSettingsResponse {
    return UpdateOIDCSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOIDCSettingsResponse>): UpdateOIDCSettingsResponse {
    const message = createBaseUpdateOIDCSettingsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetSecurityPolicyRequest(): GetSecurityPolicyRequest {
  return {};
}

export const GetSecurityPolicyRequest: MessageFns<GetSecurityPolicyRequest> = {
  encode(_: GetSecurityPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecurityPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecurityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSecurityPolicyRequest {
    return {};
  },

  toJSON(_: GetSecurityPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetSecurityPolicyRequest>): GetSecurityPolicyRequest {
    return GetSecurityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetSecurityPolicyRequest>): GetSecurityPolicyRequest {
    const message = createBaseGetSecurityPolicyRequest();
    return message;
  },
};

function createBaseGetSecurityPolicyResponse(): GetSecurityPolicyResponse {
  return { policy: undefined };
}

export const GetSecurityPolicyResponse: MessageFns<GetSecurityPolicyResponse> = {
  encode(message: GetSecurityPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      SecurityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecurityPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecurityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = SecurityPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecurityPolicyResponse {
    return { policy: isSet(object.policy) ? SecurityPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetSecurityPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = SecurityPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecurityPolicyResponse>): GetSecurityPolicyResponse {
    return GetSecurityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecurityPolicyResponse>): GetSecurityPolicyResponse {
    const message = createBaseGetSecurityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? SecurityPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseSetSecurityPolicyRequest(): SetSecurityPolicyRequest {
  return { enableIframeEmbedding: false, allowedOrigins: [], enableImpersonation: false };
}

export const SetSecurityPolicyRequest: MessageFns<SetSecurityPolicyRequest> = {
  encode(message: SetSecurityPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableIframeEmbedding !== false) {
      writer.uint32(8).bool(message.enableIframeEmbedding);
    }
    for (const v of message.allowedOrigins) {
      writer.uint32(18).string(v!);
    }
    if (message.enableImpersonation !== false) {
      writer.uint32(24).bool(message.enableImpersonation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSecurityPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSecurityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableIframeEmbedding = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.allowedOrigins.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableImpersonation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSecurityPolicyRequest {
    return {
      enableIframeEmbedding: isSet(object.enableIframeEmbedding)
        ? globalThis.Boolean(object.enableIframeEmbedding)
        : false,
      allowedOrigins: globalThis.Array.isArray(object?.allowedOrigins)
        ? object.allowedOrigins.map((e: any) => globalThis.String(e))
        : [],
      enableImpersonation: isSet(object.enableImpersonation) ? globalThis.Boolean(object.enableImpersonation) : false,
    };
  },

  toJSON(message: SetSecurityPolicyRequest): unknown {
    const obj: any = {};
    if (message.enableIframeEmbedding !== false) {
      obj.enableIframeEmbedding = message.enableIframeEmbedding;
    }
    if (message.allowedOrigins?.length) {
      obj.allowedOrigins = message.allowedOrigins;
    }
    if (message.enableImpersonation !== false) {
      obj.enableImpersonation = message.enableImpersonation;
    }
    return obj;
  },

  create(base?: DeepPartial<SetSecurityPolicyRequest>): SetSecurityPolicyRequest {
    return SetSecurityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetSecurityPolicyRequest>): SetSecurityPolicyRequest {
    const message = createBaseSetSecurityPolicyRequest();
    message.enableIframeEmbedding = object.enableIframeEmbedding ?? false;
    message.allowedOrigins = object.allowedOrigins?.map((e) => e) || [];
    message.enableImpersonation = object.enableImpersonation ?? false;
    return message;
  },
};

function createBaseSetSecurityPolicyResponse(): SetSecurityPolicyResponse {
  return { details: undefined };
}

export const SetSecurityPolicyResponse: MessageFns<SetSecurityPolicyResponse> = {
  encode(message: SetSecurityPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSecurityPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSecurityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSecurityPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetSecurityPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetSecurityPolicyResponse>): SetSecurityPolicyResponse {
    return SetSecurityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetSecurityPolicyResponse>): SetSecurityPolicyResponse {
    const message = createBaseSetSecurityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseIsOrgUniqueRequest(): IsOrgUniqueRequest {
  return { name: "", domain: "" };
}

export const IsOrgUniqueRequest: MessageFns<IsOrgUniqueRequest> = {
  encode(message: IsOrgUniqueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsOrgUniqueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsOrgUniqueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsOrgUniqueRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
    };
  },

  toJSON(message: IsOrgUniqueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create(base?: DeepPartial<IsOrgUniqueRequest>): IsOrgUniqueRequest {
    return IsOrgUniqueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsOrgUniqueRequest>): IsOrgUniqueRequest {
    const message = createBaseIsOrgUniqueRequest();
    message.name = object.name ?? "";
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseIsOrgUniqueResponse(): IsOrgUniqueResponse {
  return { isUnique: false };
}

export const IsOrgUniqueResponse: MessageFns<IsOrgUniqueResponse> = {
  encode(message: IsOrgUniqueResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isUnique !== false) {
      writer.uint32(8).bool(message.isUnique);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsOrgUniqueResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsOrgUniqueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isUnique = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsOrgUniqueResponse {
    return { isUnique: isSet(object.isUnique) ? globalThis.Boolean(object.isUnique) : false };
  },

  toJSON(message: IsOrgUniqueResponse): unknown {
    const obj: any = {};
    if (message.isUnique !== false) {
      obj.isUnique = message.isUnique;
    }
    return obj;
  },

  create(base?: DeepPartial<IsOrgUniqueResponse>): IsOrgUniqueResponse {
    return IsOrgUniqueResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsOrgUniqueResponse>): IsOrgUniqueResponse {
    const message = createBaseIsOrgUniqueResponse();
    message.isUnique = object.isUnique ?? false;
    return message;
  },
};

function createBaseGetOrgByIDRequest(): GetOrgByIDRequest {
  return { id: "" };
}

export const GetOrgByIDRequest: MessageFns<GetOrgByIDRequest> = {
  encode(message: GetOrgByIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrgByIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgByIDRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetOrgByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetOrgByIDRequest>): GetOrgByIDRequest {
    return GetOrgByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgByIDRequest>): GetOrgByIDRequest {
    const message = createBaseGetOrgByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetOrgByIDResponse(): GetOrgByIDResponse {
  return { org: undefined };
}

export const GetOrgByIDResponse: MessageFns<GetOrgByIDResponse> = {
  encode(message: GetOrgByIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrgByIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgByIDResponse {
    return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
  },

  toJSON(message: GetOrgByIDResponse): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = Org.toJSON(message.org);
    }
    return obj;
  },

  create(base?: DeepPartial<GetOrgByIDResponse>): GetOrgByIDResponse {
    return GetOrgByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgByIDResponse>): GetOrgByIDResponse {
    const message = createBaseGetOrgByIDResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseListOrgsRequest(): ListOrgsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListOrgsRequest: MessageFns<ListOrgsRequest> = {
  encode(message: ListOrgsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      OrgQuery.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrgsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(OrgQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
      queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e: any) => OrgQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => OrgQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrgsRequest>): ListOrgsRequest {
    return ListOrgsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgsRequest>): ListOrgsRequest {
    const message = createBaseListOrgsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => OrgQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgsResponse(): ListOrgsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListOrgsResponse: MessageFns<ListOrgsResponse> = {
  encode(message: ListOrgsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      Org.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrgsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(Org.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => Org.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrgsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Org.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrgsResponse>): ListOrgsResponse {
    return ListOrgsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgsResponse>): ListOrgsResponse {
    const message = createBaseListOrgsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => Org.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSetUpOrgRequest(): SetUpOrgRequest {
  return { org: undefined, human: undefined, roles: [] };
}

export const SetUpOrgRequest: MessageFns<SetUpOrgRequest> = {
  encode(message: SetUpOrgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.org !== undefined) {
      SetUpOrgRequest_Org.encode(message.org, writer.uint32(10).fork()).join();
    }
    if (message.human !== undefined) {
      SetUpOrgRequest_Human.encode(message.human, writer.uint32(18).fork()).join();
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = SetUpOrgRequest_Org.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.human = SetUpOrgRequest_Human.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest {
    return {
      org: isSet(object.org) ? SetUpOrgRequest_Org.fromJSON(object.org) : undefined,
      human: isSet(object.human) ? SetUpOrgRequest_Human.fromJSON(object.human) : undefined,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SetUpOrgRequest): unknown {
    const obj: any = {};
    if (message.org !== undefined) {
      obj.org = SetUpOrgRequest_Org.toJSON(message.org);
    }
    if (message.human !== undefined) {
      obj.human = SetUpOrgRequest_Human.toJSON(message.human);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgRequest>): SetUpOrgRequest {
    return SetUpOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgRequest>): SetUpOrgRequest {
    const message = createBaseSetUpOrgRequest();
    message.org = (object.org !== undefined && object.org !== null)
      ? SetUpOrgRequest_Org.fromPartial(object.org)
      : undefined;
    message.human = (object.human !== undefined && object.human !== null)
      ? SetUpOrgRequest_Human.fromPartial(object.human)
      : undefined;
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetUpOrgRequest_Org(): SetUpOrgRequest_Org {
  return { name: "", domain: "" };
}

export const SetUpOrgRequest_Org: MessageFns<SetUpOrgRequest_Org> = {
  encode(message: SetUpOrgRequest_Org, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgRequest_Org {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Org();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Org {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
    };
  },

  toJSON(message: SetUpOrgRequest_Org): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgRequest_Org>): SetUpOrgRequest_Org {
    return SetUpOrgRequest_Org.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgRequest_Org>): SetUpOrgRequest_Org {
    const message = createBaseSetUpOrgRequest_Org();
    message.name = object.name ?? "";
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseSetUpOrgRequest_Human(): SetUpOrgRequest_Human {
  return { userName: "", profile: undefined, email: undefined, phone: undefined, password: "" };
}

export const SetUpOrgRequest_Human: MessageFns<SetUpOrgRequest_Human> = {
  encode(message: SetUpOrgRequest_Human, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.profile !== undefined) {
      SetUpOrgRequest_Human_Profile.encode(message.profile, writer.uint32(18).fork()).join();
    }
    if (message.email !== undefined) {
      SetUpOrgRequest_Human_Email.encode(message.email, writer.uint32(26).fork()).join();
    }
    if (message.phone !== undefined) {
      SetUpOrgRequest_Human_Phone.encode(message.phone, writer.uint32(34).fork()).join();
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgRequest_Human {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = SetUpOrgRequest_Human_Profile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = SetUpOrgRequest_Human_Email.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.phone = SetUpOrgRequest_Human_Phone.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human {
    return {
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      profile: isSet(object.profile) ? SetUpOrgRequest_Human_Profile.fromJSON(object.profile) : undefined,
      email: isSet(object.email) ? SetUpOrgRequest_Human_Email.fromJSON(object.email) : undefined,
      phone: isSet(object.phone) ? SetUpOrgRequest_Human_Phone.fromJSON(object.phone) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SetUpOrgRequest_Human): unknown {
    const obj: any = {};
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.profile !== undefined) {
      obj.profile = SetUpOrgRequest_Human_Profile.toJSON(message.profile);
    }
    if (message.email !== undefined) {
      obj.email = SetUpOrgRequest_Human_Email.toJSON(message.email);
    }
    if (message.phone !== undefined) {
      obj.phone = SetUpOrgRequest_Human_Phone.toJSON(message.phone);
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgRequest_Human>): SetUpOrgRequest_Human {
    return SetUpOrgRequest_Human.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgRequest_Human>): SetUpOrgRequest_Human {
    const message = createBaseSetUpOrgRequest_Human();
    message.userName = object.userName ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? SetUpOrgRequest_Human_Profile.fromPartial(object.profile)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? SetUpOrgRequest_Human_Email.fromPartial(object.email)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? SetUpOrgRequest_Human_Phone.fromPartial(object.phone)
      : undefined;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSetUpOrgRequest_Human_Profile(): SetUpOrgRequest_Human_Profile {
  return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const SetUpOrgRequest_Human_Profile: MessageFns<SetUpOrgRequest_Human_Profile> = {
  encode(message: SetUpOrgRequest_Human_Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(42).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgRequest_Human_Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human_Profile {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : "",
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
    };
  },

  toJSON(message: SetUpOrgRequest_Human_Profile): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.nickName !== "") {
      obj.nickName = message.nickName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.preferredLanguage !== "") {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.gender !== 0) {
      obj.gender = genderToJSON(message.gender);
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgRequest_Human_Profile>): SetUpOrgRequest_Human_Profile {
    return SetUpOrgRequest_Human_Profile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgRequest_Human_Profile>): SetUpOrgRequest_Human_Profile {
    const message = createBaseSetUpOrgRequest_Human_Profile();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseSetUpOrgRequest_Human_Email(): SetUpOrgRequest_Human_Email {
  return { email: "", isEmailVerified: false };
}

export const SetUpOrgRequest_Human_Email: MessageFns<SetUpOrgRequest_Human_Email> = {
  encode(message: SetUpOrgRequest_Human_Email, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.isEmailVerified !== false) {
      writer.uint32(16).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgRequest_Human_Email {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human_Email();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human_Email {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      isEmailVerified: isSet(object.isEmailVerified) ? globalThis.Boolean(object.isEmailVerified) : false,
    };
  },

  toJSON(message: SetUpOrgRequest_Human_Email): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.isEmailVerified !== false) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgRequest_Human_Email>): SetUpOrgRequest_Human_Email {
    return SetUpOrgRequest_Human_Email.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgRequest_Human_Email>): SetUpOrgRequest_Human_Email {
    const message = createBaseSetUpOrgRequest_Human_Email();
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseSetUpOrgRequest_Human_Phone(): SetUpOrgRequest_Human_Phone {
  return { phone: "", isPhoneVerified: false };
}

export const SetUpOrgRequest_Human_Phone: MessageFns<SetUpOrgRequest_Human_Phone> = {
  encode(message: SetUpOrgRequest_Human_Phone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.isPhoneVerified !== false) {
      writer.uint32(16).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgRequest_Human_Phone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgRequest_Human_Phone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgRequest_Human_Phone {
    return {
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      isPhoneVerified: isSet(object.isPhoneVerified) ? globalThis.Boolean(object.isPhoneVerified) : false,
    };
  },

  toJSON(message: SetUpOrgRequest_Human_Phone): unknown {
    const obj: any = {};
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.isPhoneVerified !== false) {
      obj.isPhoneVerified = message.isPhoneVerified;
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgRequest_Human_Phone>): SetUpOrgRequest_Human_Phone {
    return SetUpOrgRequest_Human_Phone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgRequest_Human_Phone>): SetUpOrgRequest_Human_Phone {
    const message = createBaseSetUpOrgRequest_Human_Phone();
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseSetUpOrgResponse(): SetUpOrgResponse {
  return { details: undefined, orgId: "", userId: "" };
}

export const SetUpOrgResponse: MessageFns<SetUpOrgResponse> = {
  encode(message: SetUpOrgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.orgId !== "") {
      writer.uint32(18).string(message.orgId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpOrgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpOrgResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: SetUpOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpOrgResponse>): SetUpOrgResponse {
    return SetUpOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpOrgResponse>): SetUpOrgResponse {
    const message = createBaseSetUpOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.orgId = object.orgId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveOrgRequest(): RemoveOrgRequest {
  return { orgId: "" };
}

export const RemoveOrgRequest: MessageFns<RemoveOrgRequest> = {
  encode(message: RemoveOrgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveOrgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgRequest {
    return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
  },

  toJSON(message: RemoveOrgRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveOrgRequest>): RemoveOrgRequest {
    return RemoveOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgRequest>): RemoveOrgRequest {
    const message = createBaseRemoveOrgRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseRemoveOrgResponse(): RemoveOrgResponse {
  return { details: undefined };
}

export const RemoveOrgResponse: MessageFns<RemoveOrgResponse> = {
  encode(message: RemoveOrgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveOrgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveOrgResponse>): RemoveOrgResponse {
    return RemoveOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgResponse>): RemoveOrgResponse {
    const message = createBaseRemoveOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetIDPByIDRequest(): GetIDPByIDRequest {
  return { id: "" };
}

export const GetIDPByIDRequest: MessageFns<GetIDPByIDRequest> = {
  encode(message: GetIDPByIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIDPByIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIDPByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIDPByIDRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetIDPByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetIDPByIDRequest>): GetIDPByIDRequest {
    return GetIDPByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIDPByIDRequest>): GetIDPByIDRequest {
    const message = createBaseGetIDPByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetIDPByIDResponse(): GetIDPByIDResponse {
  return { idp: undefined };
}

export const GetIDPByIDResponse: MessageFns<GetIDPByIDResponse> = {
  encode(message: GetIDPByIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idp !== undefined) {
      IDP.encode(message.idp, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIDPByIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIDPByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = IDP.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIDPByIDResponse {
    return { idp: isSet(object.idp) ? IDP.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetIDPByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = IDP.toJSON(message.idp);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIDPByIDResponse>): GetIDPByIDResponse {
    return GetIDPByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIDPByIDResponse>): GetIDPByIDResponse {
    const message = createBaseGetIDPByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? IDP.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseListIDPsRequest(): ListIDPsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListIDPsRequest: MessageFns<ListIDPsRequest> = {
  encode(message: ListIDPsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      IDPQuery.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIDPsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(IDPQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIDPsRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
      queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e: any) => IDPQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIDPsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => IDPQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIDPsRequest>): ListIDPsRequest {
    return ListIDPsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIDPsRequest>): ListIDPsRequest {
    const message = createBaseListIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => IDPQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIDPQuery(): IDPQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined };
}

export const IDPQuery: MessageFns<IDPQuery> = {
  encode(message: IDPQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).join();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IDPQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIDPQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IDPQuery {
    return {
      idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
      idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
    };
  },

  toJSON(message: IDPQuery): unknown {
    const obj: any = {};
    if (message.idpIdQuery !== undefined) {
      obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
    }
    if (message.idpNameQuery !== undefined) {
      obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
    }
    return obj;
  },

  create(base?: DeepPartial<IDPQuery>): IDPQuery {
    return IDPQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IDPQuery>): IDPQuery {
    const message = createBaseIDPQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    return message;
  },
};

function createBaseListIDPsResponse(): ListIDPsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListIDPsResponse: MessageFns<ListIDPsResponse> = {
  encode(message: ListIDPsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      IDP.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIDPsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(IDP.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => IDP.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDP.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIDPsResponse>): ListIDPsResponse {
    return ListIDPsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIDPsResponse>): ListIDPsResponse {
    const message = createBaseListIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => IDP.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOIDCIDPRequest(): AddOIDCIDPRequest {
  return {
    name: "",
    stylingType: 0,
    clientId: "",
    clientSecret: "",
    issuer: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
    autoRegister: false,
  };
}

export const AddOIDCIDPRequest: MessageFns<AddOIDCIDPRequest> = {
  encode(message: AddOIDCIDPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.issuer !== "") {
      writer.uint32(42).string(message.issuer);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(56).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(64).int32(message.usernameMapping);
    }
    if (message.autoRegister !== false) {
      writer.uint32(72).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOIDCIDPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCIDPRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
      usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
      autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: AddOIDCIDPRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.displayNameMapping !== 0) {
      obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
    }
    if (message.autoRegister !== false) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create(base?: DeepPartial<AddOIDCIDPRequest>): AddOIDCIDPRequest {
    return AddOIDCIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOIDCIDPRequest>): AddOIDCIDPRequest {
    const message = createBaseAddOIDCIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.issuer = object.issuer ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddOIDCIDPResponse(): AddOIDCIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddOIDCIDPResponse: MessageFns<AddOIDCIDPResponse> = {
  encode(message: AddOIDCIDPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOIDCIDPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOIDCIDPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
    };
  },

  toJSON(message: AddOIDCIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<AddOIDCIDPResponse>): AddOIDCIDPResponse {
    return AddOIDCIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOIDCIDPResponse>): AddOIDCIDPResponse {
    const message = createBaseAddOIDCIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseAddJWTIDPRequest(): AddJWTIDPRequest {
  return {
    name: "",
    stylingType: 0,
    jwtEndpoint: "",
    issuer: "",
    keysEndpoint: "",
    headerName: "",
    autoRegister: false,
  };
}

export const AddJWTIDPRequest: MessageFns<AddJWTIDPRequest> = {
  encode(message: AddJWTIDPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.autoRegister !== false) {
      writer.uint32(56).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddJWTIDPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTIDPRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
      autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: AddJWTIDPRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.autoRegister !== false) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create(base?: DeepPartial<AddJWTIDPRequest>): AddJWTIDPRequest {
    return AddJWTIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddJWTIDPRequest>): AddJWTIDPRequest {
    const message = createBaseAddJWTIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddJWTIDPResponse(): AddJWTIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddJWTIDPResponse: MessageFns<AddJWTIDPResponse> = {
  encode(message: AddJWTIDPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddJWTIDPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTIDPResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
    };
  },

  toJSON(message: AddJWTIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<AddJWTIDPResponse>): AddJWTIDPResponse {
    return AddJWTIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddJWTIDPResponse>): AddJWTIDPResponse {
    const message = createBaseAddJWTIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseUpdateIDPRequest(): UpdateIDPRequest {
  return { idpId: "", name: "", stylingType: 0, autoRegister: false };
}

export const UpdateIDPRequest: MessageFns<UpdateIDPRequest> = {
  encode(message: UpdateIDPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(24).int32(message.stylingType);
    }
    if (message.autoRegister !== false) {
      writer.uint32(32).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIDPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPRequest {
    return {
      idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
      autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
    };
  },

  toJSON(message: UpdateIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stylingType !== 0) {
      obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
    }
    if (message.autoRegister !== false) {
      obj.autoRegister = message.autoRegister;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIDPRequest>): UpdateIDPRequest {
    return UpdateIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIDPRequest>): UpdateIDPRequest {
    const message = createBaseUpdateIDPRequest();
    message.idpId = object.idpId ?? "";
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseUpdateIDPResponse(): UpdateIDPResponse {
  return { details: undefined };
}

export const UpdateIDPResponse: MessageFns<UpdateIDPResponse> = {
  encode(message: UpdateIDPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIDPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIDPResponse>): UpdateIDPResponse {
    return UpdateIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIDPResponse>): UpdateIDPResponse {
    const message = createBaseUpdateIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateIDPRequest(): DeactivateIDPRequest {
  return { idpId: "" };
}

export const DeactivateIDPRequest: MessageFns<DeactivateIDPRequest> = {
  encode(message: DeactivateIDPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateIDPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateIDPRequest {
    return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
  },

  toJSON(message: DeactivateIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateIDPRequest>): DeactivateIDPRequest {
    return DeactivateIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateIDPRequest>): DeactivateIDPRequest {
    const message = createBaseDeactivateIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseDeactivateIDPResponse(): DeactivateIDPResponse {
  return { details: undefined };
}

export const DeactivateIDPResponse: MessageFns<DeactivateIDPResponse> = {
  encode(message: DeactivateIDPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeactivateIDPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeactivateIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeactivateIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<DeactivateIDPResponse>): DeactivateIDPResponse {
    return DeactivateIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateIDPResponse>): DeactivateIDPResponse {
    const message = createBaseDeactivateIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateIDPRequest(): ReactivateIDPRequest {
  return { idpId: "" };
}

export const ReactivateIDPRequest: MessageFns<ReactivateIDPRequest> = {
  encode(message: ReactivateIDPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReactivateIDPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateIDPRequest {
    return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
  },

  toJSON(message: ReactivateIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReactivateIDPRequest>): ReactivateIDPRequest {
    return ReactivateIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateIDPRequest>): ReactivateIDPRequest {
    const message = createBaseReactivateIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseReactivateIDPResponse(): ReactivateIDPResponse {
  return { details: undefined };
}

export const ReactivateIDPResponse: MessageFns<ReactivateIDPResponse> = {
  encode(message: ReactivateIDPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReactivateIDPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactivateIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ReactivateIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ReactivateIDPResponse>): ReactivateIDPResponse {
    return ReactivateIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateIDPResponse>): ReactivateIDPResponse {
    const message = createBaseReactivateIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIDPRequest(): RemoveIDPRequest {
  return { idpId: "" };
}

export const RemoveIDPRequest: MessageFns<RemoveIDPRequest> = {
  encode(message: RemoveIDPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIDPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPRequest {
    return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
  },

  toJSON(message: RemoveIDPRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIDPRequest>): RemoveIDPRequest {
    return RemoveIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIDPRequest>): RemoveIDPRequest {
    const message = createBaseRemoveIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveIDPResponse(): RemoveIDPResponse {
  return { details: undefined };
}

export const RemoveIDPResponse: MessageFns<RemoveIDPResponse> = {
  encode(message: RemoveIDPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIDPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIDPResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIDPResponse>): RemoveIDPResponse {
    return RemoveIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIDPResponse>): RemoveIDPResponse {
    const message = createBaseRemoveIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateIDPOIDCConfigRequest(): UpdateIDPOIDCConfigRequest {
  return {
    idpId: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
  };
}

export const UpdateIDPOIDCConfigRequest: MessageFns<UpdateIDPOIDCConfigRequest> = {
  encode(message: UpdateIDPOIDCConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(48).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(56).int32(message.usernameMapping);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIDPOIDCConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPOIDCConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPOIDCConfigRequest {
    return {
      idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
      usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
    };
  },

  toJSON(message: UpdateIDPOIDCConfigRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.displayNameMapping !== 0) {
      obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIDPOIDCConfigRequest>): UpdateIDPOIDCConfigRequest {
    return UpdateIDPOIDCConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIDPOIDCConfigRequest>): UpdateIDPOIDCConfigRequest {
    const message = createBaseUpdateIDPOIDCConfigRequest();
    message.idpId = object.idpId ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    return message;
  },
};

function createBaseUpdateIDPOIDCConfigResponse(): UpdateIDPOIDCConfigResponse {
  return { details: undefined };
}

export const UpdateIDPOIDCConfigResponse: MessageFns<UpdateIDPOIDCConfigResponse> = {
  encode(message: UpdateIDPOIDCConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIDPOIDCConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPOIDCConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPOIDCConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIDPOIDCConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIDPOIDCConfigResponse>): UpdateIDPOIDCConfigResponse {
    return UpdateIDPOIDCConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIDPOIDCConfigResponse>): UpdateIDPOIDCConfigResponse {
    const message = createBaseUpdateIDPOIDCConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateIDPJWTConfigRequest(): UpdateIDPJWTConfigRequest {
  return { idpId: "", jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}

export const UpdateIDPJWTConfigRequest: MessageFns<UpdateIDPJWTConfigRequest> = {
  encode(message: UpdateIDPJWTConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(18).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIDPJWTConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPJWTConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPJWTConfigRequest {
    return {
      idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
    };
  },

  toJSON(message: UpdateIDPJWTConfigRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIDPJWTConfigRequest>): UpdateIDPJWTConfigRequest {
    return UpdateIDPJWTConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIDPJWTConfigRequest>): UpdateIDPJWTConfigRequest {
    const message = createBaseUpdateIDPJWTConfigRequest();
    message.idpId = object.idpId ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    return message;
  },
};

function createBaseUpdateIDPJWTConfigResponse(): UpdateIDPJWTConfigResponse {
  return { details: undefined };
}

export const UpdateIDPJWTConfigResponse: MessageFns<UpdateIDPJWTConfigResponse> = {
  encode(message: UpdateIDPJWTConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIDPJWTConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIDPJWTConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIDPJWTConfigResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIDPJWTConfigResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIDPJWTConfigResponse>): UpdateIDPJWTConfigResponse {
    return UpdateIDPJWTConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIDPJWTConfigResponse>): UpdateIDPJWTConfigResponse {
    const message = createBaseUpdateIDPJWTConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProvidersRequest(): ListProvidersRequest {
  return { query: undefined, queries: [] };
}

export const ListProvidersRequest: MessageFns<ListProvidersRequest> = {
  encode(message: ListProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    for (const v of message.queries) {
      ProviderQuery.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProviderQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => ProviderQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListProvidersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => ProviderQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListProvidersRequest>): ListProvidersRequest {
    return ListProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProvidersRequest>): ListProvidersRequest {
    const message = createBaseListProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProviderQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProviderQuery(): ProviderQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined };
}

export const ProviderQuery: MessageFns<ProviderQuery> = {
  encode(message: ProviderQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).join();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProviderQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProviderQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProviderQuery {
    return {
      idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
      idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
    };
  },

  toJSON(message: ProviderQuery): unknown {
    const obj: any = {};
    if (message.idpIdQuery !== undefined) {
      obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
    }
    if (message.idpNameQuery !== undefined) {
      obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
    }
    return obj;
  },

  create(base?: DeepPartial<ProviderQuery>): ProviderQuery {
    return ProviderQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProviderQuery>): ProviderQuery {
    const message = createBaseProviderQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    return message;
  },
};

function createBaseListProvidersResponse(): ListProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListProvidersResponse: MessageFns<ListProvidersResponse> = {
  encode(message: ListProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      Provider.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Provider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProvidersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => Provider.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProvidersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Provider.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListProvidersResponse>): ListProvidersResponse {
    return ListProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProvidersResponse>): ListProvidersResponse {
    const message = createBaseListProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Provider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProviderByIDRequest(): GetProviderByIDRequest {
  return { id: "" };
}

export const GetProviderByIDRequest: MessageFns<GetProviderByIDRequest> = {
  encode(message: GetProviderByIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProviderByIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderByIDRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetProviderByIDRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProviderByIDRequest>): GetProviderByIDRequest {
    return GetProviderByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProviderByIDRequest>): GetProviderByIDRequest {
    const message = createBaseGetProviderByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProviderByIDResponse(): GetProviderByIDResponse {
  return { idp: undefined };
}

export const GetProviderByIDResponse: MessageFns<GetProviderByIDResponse> = {
  encode(message: GetProviderByIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idp !== undefined) {
      Provider.encode(message.idp, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProviderByIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = Provider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProviderByIDResponse {
    return { idp: isSet(object.idp) ? Provider.fromJSON(object.idp) : undefined };
  },

  toJSON(message: GetProviderByIDResponse): unknown {
    const obj: any = {};
    if (message.idp !== undefined) {
      obj.idp = Provider.toJSON(message.idp);
    }
    return obj;
  },

  create(base?: DeepPartial<GetProviderByIDResponse>): GetProviderByIDResponse {
    return GetProviderByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProviderByIDResponse>): GetProviderByIDResponse {
    const message = createBaseGetProviderByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? Provider.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderRequest(): AddGenericOAuthProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const AddGenericOAuthProviderRequest: MessageFns<AddGenericOAuthProviderRequest> = {
  encode(message: AddGenericOAuthProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(66).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGenericOAuthProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOAuthProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGenericOAuthProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGenericOAuthProviderRequest>): AddGenericOAuthProviderRequest {
    return AddGenericOAuthProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOAuthProviderRequest>): AddGenericOAuthProviderRequest {
    const message = createBaseAddGenericOAuthProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderResponse(): AddGenericOAuthProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOAuthProviderResponse: MessageFns<AddGenericOAuthProviderResponse> = {
  encode(message: AddGenericOAuthProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGenericOAuthProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOAuthProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGenericOAuthProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGenericOAuthProviderResponse>): AddGenericOAuthProviderResponse {
    return AddGenericOAuthProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOAuthProviderResponse>): AddGenericOAuthProviderResponse {
    const message = createBaseAddGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderRequest(): UpdateGenericOAuthProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const UpdateGenericOAuthProviderRequest: MessageFns<UpdateGenericOAuthProviderRequest> = {
  encode(message: UpdateGenericOAuthProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(74).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGenericOAuthProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOAuthProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGenericOAuthProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGenericOAuthProviderRequest>): UpdateGenericOAuthProviderRequest {
    return UpdateGenericOAuthProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOAuthProviderRequest>): UpdateGenericOAuthProviderRequest {
    const message = createBaseUpdateGenericOAuthProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderResponse(): UpdateGenericOAuthProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOAuthProviderResponse: MessageFns<UpdateGenericOAuthProviderResponse> = {
  encode(message: UpdateGenericOAuthProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGenericOAuthProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOAuthProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGenericOAuthProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGenericOAuthProviderResponse>): UpdateGenericOAuthProviderResponse {
    return UpdateGenericOAuthProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOAuthProviderResponse>): UpdateGenericOAuthProviderResponse {
    const message = createBaseUpdateGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOIDCProviderRequest(): AddGenericOIDCProviderRequest {
  return {
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const AddGenericOIDCProviderRequest: MessageFns<AddGenericOIDCProviderRequest> = {
  encode(message: AddGenericOIDCProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    if (message.isIdTokenMapping !== false) {
      writer.uint32(56).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGenericOIDCProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOIDCProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: AddGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.isIdTokenMapping !== false) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGenericOIDCProviderRequest>): AddGenericOIDCProviderRequest {
    return AddGenericOIDCProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOIDCProviderRequest>): AddGenericOIDCProviderRequest {
    const message = createBaseAddGenericOIDCProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseAddGenericOIDCProviderResponse(): AddGenericOIDCProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOIDCProviderResponse: MessageFns<AddGenericOIDCProviderResponse> = {
  encode(message: AddGenericOIDCProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGenericOIDCProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGenericOIDCProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGenericOIDCProviderResponse>): AddGenericOIDCProviderResponse {
    return AddGenericOIDCProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOIDCProviderResponse>): AddGenericOIDCProviderResponse {
    const message = createBaseAddGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderRequest(): UpdateGenericOIDCProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const UpdateGenericOIDCProviderRequest: MessageFns<UpdateGenericOIDCProviderRequest> = {
  encode(message: UpdateGenericOIDCProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
    }
    if (message.isIdTokenMapping !== false) {
      writer.uint32(64).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGenericOIDCProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOIDCProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: UpdateGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.isIdTokenMapping !== false) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGenericOIDCProviderRequest>): UpdateGenericOIDCProviderRequest {
    return UpdateGenericOIDCProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOIDCProviderRequest>): UpdateGenericOIDCProviderRequest {
    const message = createBaseUpdateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderResponse(): UpdateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOIDCProviderResponse: MessageFns<UpdateGenericOIDCProviderResponse> = {
  encode(message: UpdateGenericOIDCProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGenericOIDCProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGenericOIDCProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGenericOIDCProviderResponse>): UpdateGenericOIDCProviderResponse {
    return UpdateGenericOIDCProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOIDCProviderResponse>): UpdateGenericOIDCProviderResponse {
    const message = createBaseUpdateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderRequest(): MigrateGenericOIDCProviderRequest {
  return { id: "", azure: undefined, google: undefined };
}

export const MigrateGenericOIDCProviderRequest: MessageFns<MigrateGenericOIDCProviderRequest> = {
  encode(message: MigrateGenericOIDCProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.azure !== undefined) {
      AddAzureADProviderRequest.encode(message.azure, writer.uint32(18).fork()).join();
    }
    if (message.google !== undefined) {
      AddGoogleProviderRequest.encode(message.google, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateGenericOIDCProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azure = AddAzureADProviderRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.google = AddGoogleProviderRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateGenericOIDCProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      azure: isSet(object.azure) ? AddAzureADProviderRequest.fromJSON(object.azure) : undefined,
      google: isSet(object.google) ? AddGoogleProviderRequest.fromJSON(object.google) : undefined,
    };
  },

  toJSON(message: MigrateGenericOIDCProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.azure !== undefined) {
      obj.azure = AddAzureADProviderRequest.toJSON(message.azure);
    }
    if (message.google !== undefined) {
      obj.google = AddGoogleProviderRequest.toJSON(message.google);
    }
    return obj;
  },

  create(base?: DeepPartial<MigrateGenericOIDCProviderRequest>): MigrateGenericOIDCProviderRequest {
    return MigrateGenericOIDCProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateGenericOIDCProviderRequest>): MigrateGenericOIDCProviderRequest {
    const message = createBaseMigrateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.azure = (object.azure !== undefined && object.azure !== null)
      ? AddAzureADProviderRequest.fromPartial(object.azure)
      : undefined;
    message.google = (object.google !== undefined && object.google !== null)
      ? AddGoogleProviderRequest.fromPartial(object.google)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderResponse(): MigrateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const MigrateGenericOIDCProviderResponse: MessageFns<MigrateGenericOIDCProviderResponse> = {
  encode(message: MigrateGenericOIDCProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateGenericOIDCProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateGenericOIDCProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: MigrateGenericOIDCProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<MigrateGenericOIDCProviderResponse>): MigrateGenericOIDCProviderResponse {
    return MigrateGenericOIDCProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateGenericOIDCProviderResponse>): MigrateGenericOIDCProviderResponse {
    const message = createBaseMigrateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderRequest(): AddJWTProviderRequest {
  return { name: "", issuer: "", jwtEndpoint: "", keysEndpoint: "", headerName: "", providerOptions: undefined };
}

export const AddJWTProviderRequest: MessageFns<AddJWTProviderRequest> = {
  encode(message: AddJWTProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddJWTProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddJWTProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddJWTProviderRequest>): AddJWTProviderRequest {
    return AddJWTProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddJWTProviderRequest>): AddJWTProviderRequest {
    const message = createBaseAddJWTProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderResponse(): AddJWTProviderResponse {
  return { details: undefined, id: "" };
}

export const AddJWTProviderResponse: MessageFns<AddJWTProviderResponse> = {
  encode(message: AddJWTProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddJWTProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddJWTProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddJWTProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddJWTProviderResponse>): AddJWTProviderResponse {
    return AddJWTProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddJWTProviderResponse>): AddJWTProviderResponse {
    const message = createBaseAddJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateJWTProviderRequest(): UpdateJWTProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    jwtEndpoint: "",
    keysEndpoint: "",
    headerName: "",
    providerOptions: undefined,
  };
}

export const UpdateJWTProviderRequest: MessageFns<UpdateJWTProviderRequest> = {
  encode(message: UpdateJWTProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(34).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJWTProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJWTProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateJWTProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateJWTProviderRequest>): UpdateJWTProviderRequest {
    return UpdateJWTProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateJWTProviderRequest>): UpdateJWTProviderRequest {
    const message = createBaseUpdateJWTProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateJWTProviderResponse(): UpdateJWTProviderResponse {
  return { details: undefined };
}

export const UpdateJWTProviderResponse: MessageFns<UpdateJWTProviderResponse> = {
  encode(message: UpdateJWTProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJWTProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJWTProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateJWTProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateJWTProviderResponse>): UpdateJWTProviderResponse {
    return UpdateJWTProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateJWTProviderResponse>): UpdateJWTProviderResponse {
    const message = createBaseUpdateJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderRequest(): AddAzureADProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddAzureADProviderRequest: MessageFns<AddAzureADProviderRequest> = {
  encode(message: AddAzureADProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(34).fork()).join();
    }
    if (message.emailVerified !== false) {
      writer.uint32(40).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAzureADProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAzureADProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddAzureADProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified !== false) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddAzureADProviderRequest>): AddAzureADProviderRequest {
    return AddAzureADProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAzureADProviderRequest>): AddAzureADProviderRequest {
    const message = createBaseAddAzureADProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderResponse(): AddAzureADProviderResponse {
  return { details: undefined, id: "" };
}

export const AddAzureADProviderResponse: MessageFns<AddAzureADProviderResponse> = {
  encode(message: AddAzureADProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAzureADProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAzureADProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddAzureADProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddAzureADProviderResponse>): AddAzureADProviderResponse {
    return AddAzureADProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAzureADProviderResponse>): AddAzureADProviderResponse {
    const message = createBaseAddAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAzureADProviderRequest(): UpdateAzureADProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateAzureADProviderRequest: MessageFns<UpdateAzureADProviderRequest> = {
  encode(message: UpdateAzureADProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(42).fork()).join();
    }
    if (message.emailVerified !== false) {
      writer.uint32(48).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAzureADProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureADProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateAzureADProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified !== false) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAzureADProviderRequest>): UpdateAzureADProviderRequest {
    return UpdateAzureADProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAzureADProviderRequest>): UpdateAzureADProviderRequest {
    const message = createBaseUpdateAzureADProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateAzureADProviderResponse(): UpdateAzureADProviderResponse {
  return { details: undefined };
}

export const UpdateAzureADProviderResponse: MessageFns<UpdateAzureADProviderResponse> = {
  encode(message: UpdateAzureADProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAzureADProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAzureADProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateAzureADProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAzureADProviderResponse>): UpdateAzureADProviderResponse {
    return UpdateAzureADProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAzureADProviderResponse>): UpdateAzureADProviderResponse {
    const message = createBaseUpdateAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderRequest(): AddGitHubProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitHubProviderRequest: MessageFns<AddGitHubProviderRequest> = {
  encode(message: AddGitHubProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitHubProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitHubProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitHubProviderRequest>): AddGitHubProviderRequest {
    return AddGitHubProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitHubProviderRequest>): AddGitHubProviderRequest {
    const message = createBaseAddGitHubProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderResponse(): AddGitHubProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubProviderResponse: MessageFns<AddGitHubProviderResponse> = {
  encode(message: AddGitHubProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitHubProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGitHubProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitHubProviderResponse>): AddGitHubProviderResponse {
    return AddGitHubProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitHubProviderResponse>): AddGitHubProviderResponse {
    const message = createBaseAddGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubProviderRequest(): UpdateGitHubProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitHubProviderRequest: MessageFns<UpdateGitHubProviderRequest> = {
  encode(message: UpdateGitHubProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitHubProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitHubProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitHubProviderRequest>): UpdateGitHubProviderRequest {
    return UpdateGitHubProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitHubProviderRequest>): UpdateGitHubProviderRequest {
    const message = createBaseUpdateGitHubProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubProviderResponse(): UpdateGitHubProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubProviderResponse: MessageFns<UpdateGitHubProviderResponse> = {
  encode(message: UpdateGitHubProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitHubProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitHubProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitHubProviderResponse>): UpdateGitHubProviderResponse {
    return UpdateGitHubProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitHubProviderResponse>): UpdateGitHubProviderResponse {
    const message = createBaseUpdateGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderRequest(): AddGitHubEnterpriseServerProviderRequest {
  return {
    clientId: "",
    name: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddGitHubEnterpriseServerProviderRequest: MessageFns<AddGitHubEnterpriseServerProviderRequest> = {
  encode(message: AddGitHubEnterpriseServerProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubEnterpriseServerProviderRequest {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitHubEnterpriseServerProviderRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitHubEnterpriseServerProviderRequest>): AddGitHubEnterpriseServerProviderRequest {
    return AddGitHubEnterpriseServerProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitHubEnterpriseServerProviderRequest>): AddGitHubEnterpriseServerProviderRequest {
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    message.clientId = object.clientId ?? "";
    message.name = object.name ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderResponse(): AddGitHubEnterpriseServerProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubEnterpriseServerProviderResponse: MessageFns<AddGitHubEnterpriseServerProviderResponse> = {
  encode(message: AddGitHubEnterpriseServerProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitHubEnterpriseServerProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGitHubEnterpriseServerProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitHubEnterpriseServerProviderResponse>): AddGitHubEnterpriseServerProviderResponse {
    return AddGitHubEnterpriseServerProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AddGitHubEnterpriseServerProviderResponse>,
  ): AddGitHubEnterpriseServerProviderResponse {
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderRequest(): UpdateGitHubEnterpriseServerProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateGitHubEnterpriseServerProviderRequest: MessageFns<UpdateGitHubEnterpriseServerProviderRequest> = {
  encode(
    message: UpdateGitHubEnterpriseServerProviderRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubEnterpriseServerProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitHubEnterpriseServerProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>): UpdateGitHubEnterpriseServerProviderRequest {
    return UpdateGitHubEnterpriseServerProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
  ): UpdateGitHubEnterpriseServerProviderRequest {
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderResponse(): UpdateGitHubEnterpriseServerProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubEnterpriseServerProviderResponse: MessageFns<UpdateGitHubEnterpriseServerProviderResponse> = {
  encode(
    message: UpdateGitHubEnterpriseServerProviderResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitHubEnterpriseServerProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitHubEnterpriseServerProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    return UpdateGitHubEnterpriseServerProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderRequest(): AddGitLabProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabProviderRequest: MessageFns<AddGitLabProviderRequest> = {
  encode(message: AddGitLabProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitLabProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitLabProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitLabProviderRequest>): AddGitLabProviderRequest {
    return AddGitLabProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabProviderRequest>): AddGitLabProviderRequest {
    const message = createBaseAddGitLabProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderResponse(): AddGitLabProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabProviderResponse: MessageFns<AddGitLabProviderResponse> = {
  encode(message: AddGitLabProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitLabProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGitLabProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitLabProviderResponse>): AddGitLabProviderResponse {
    return AddGitLabProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabProviderResponse>): AddGitLabProviderResponse {
    const message = createBaseAddGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabProviderRequest(): UpdateGitLabProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabProviderRequest: MessageFns<UpdateGitLabProviderRequest> = {
  encode(message: UpdateGitLabProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitLabProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitLabProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitLabProviderRequest>): UpdateGitLabProviderRequest {
    return UpdateGitLabProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabProviderRequest>): UpdateGitLabProviderRequest {
    const message = createBaseUpdateGitLabProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabProviderResponse(): UpdateGitLabProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabProviderResponse: MessageFns<UpdateGitLabProviderResponse> = {
  encode(message: UpdateGitLabProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitLabProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitLabProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitLabProviderResponse>): UpdateGitLabProviderResponse {
    return UpdateGitLabProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabProviderResponse>): UpdateGitLabProviderResponse {
    const message = createBaseUpdateGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderRequest(): AddGitLabSelfHostedProviderRequest {
  return { issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabSelfHostedProviderRequest: MessageFns<AddGitLabSelfHostedProviderRequest> = {
  encode(message: AddGitLabSelfHostedProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitLabSelfHostedProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabSelfHostedProviderRequest {
    return {
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGitLabSelfHostedProviderRequest): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitLabSelfHostedProviderRequest>): AddGitLabSelfHostedProviderRequest {
    return AddGitLabSelfHostedProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabSelfHostedProviderRequest>): AddGitLabSelfHostedProviderRequest {
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderResponse(): AddGitLabSelfHostedProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabSelfHostedProviderResponse: MessageFns<AddGitLabSelfHostedProviderResponse> = {
  encode(message: AddGitLabSelfHostedProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGitLabSelfHostedProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGitLabSelfHostedProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGitLabSelfHostedProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGitLabSelfHostedProviderResponse>): AddGitLabSelfHostedProviderResponse {
    return AddGitLabSelfHostedProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabSelfHostedProviderResponse>): AddGitLabSelfHostedProviderResponse {
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderRequest(): UpdateGitLabSelfHostedProviderRequest {
  return { id: "", issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabSelfHostedProviderRequest: MessageFns<UpdateGitLabSelfHostedProviderRequest> = {
  encode(message: UpdateGitLabSelfHostedProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabSelfHostedProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGitLabSelfHostedProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitLabSelfHostedProviderRequest>): UpdateGitLabSelfHostedProviderRequest {
    return UpdateGitLabSelfHostedProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabSelfHostedProviderRequest>): UpdateGitLabSelfHostedProviderRequest {
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    message.id = object.id ?? "";
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderResponse(): UpdateGitLabSelfHostedProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabSelfHostedProviderResponse: MessageFns<UpdateGitLabSelfHostedProviderResponse> = {
  encode(message: UpdateGitLabSelfHostedProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGitLabSelfHostedProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGitLabSelfHostedProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGitLabSelfHostedProviderResponse>): UpdateGitLabSelfHostedProviderResponse {
    return UpdateGitLabSelfHostedProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabSelfHostedProviderResponse>): UpdateGitLabSelfHostedProviderResponse {
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderRequest(): AddGoogleProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGoogleProviderRequest: MessageFns<AddGoogleProviderRequest> = {
  encode(message: AddGoogleProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGoogleProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGoogleProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddGoogleProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGoogleProviderRequest>): AddGoogleProviderRequest {
    return AddGoogleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGoogleProviderRequest>): AddGoogleProviderRequest {
    const message = createBaseAddGoogleProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderResponse(): AddGoogleProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGoogleProviderResponse: MessageFns<AddGoogleProviderResponse> = {
  encode(message: AddGoogleProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGoogleProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGoogleProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddGoogleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddGoogleProviderResponse>): AddGoogleProviderResponse {
    return AddGoogleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGoogleProviderResponse>): AddGoogleProviderResponse {
    const message = createBaseAddGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGoogleProviderRequest(): UpdateGoogleProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGoogleProviderRequest: MessageFns<UpdateGoogleProviderRequest> = {
  encode(message: UpdateGoogleProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGoogleProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateGoogleProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGoogleProviderRequest>): UpdateGoogleProviderRequest {
    return UpdateGoogleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleProviderRequest>): UpdateGoogleProviderRequest {
    const message = createBaseUpdateGoogleProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGoogleProviderResponse(): UpdateGoogleProviderResponse {
  return { details: undefined };
}

export const UpdateGoogleProviderResponse: MessageFns<UpdateGoogleProviderResponse> = {
  encode(message: UpdateGoogleProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGoogleProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateGoogleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGoogleProviderResponse>): UpdateGoogleProviderResponse {
    return UpdateGoogleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleProviderResponse>): UpdateGoogleProviderResponse {
    const message = createBaseUpdateGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderRequest(): AddLDAPProviderRequest {
  return {
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const AddLDAPProviderRequest: MessageFns<AddLDAPProviderRequest> = {
  encode(message: AddLDAPProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(18).string(v!);
    }
    if (message.startTls !== false) {
      writer.uint32(24).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(34).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(42).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(50).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(58).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(74).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(82).fork()).join();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(90).fork()).join();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddLDAPProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLDAPProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e: any) => globalThis.String(e)) : [],
      startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
      bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : "",
      userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
      userObjectClasses: globalThis.Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => globalThis.String(e))
        : [],
      userFilters: globalThis.Array.isArray(object?.userFilters)
        ? object.userFilters.map((e: any) => globalThis.String(e))
        : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddLDAPProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls !== false) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.bindPassword !== "") {
      obj.bindPassword = message.bindPassword;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddLDAPProviderRequest>): AddLDAPProviderRequest {
    return AddLDAPProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddLDAPProviderRequest>): AddLDAPProviderRequest {
    const message = createBaseAddLDAPProviderRequest();
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderResponse(): AddLDAPProviderResponse {
  return { details: undefined, id: "" };
}

export const AddLDAPProviderResponse: MessageFns<AddLDAPProviderResponse> = {
  encode(message: AddLDAPProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddLDAPProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddLDAPProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddLDAPProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddLDAPProviderResponse>): AddLDAPProviderResponse {
    return AddLDAPProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddLDAPProviderResponse>): AddLDAPProviderResponse {
    const message = createBaseAddLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateLDAPProviderRequest(): UpdateLDAPProviderRequest {
  return {
    id: "",
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const UpdateLDAPProviderRequest: MessageFns<UpdateLDAPProviderRequest> = {
  encode(message: UpdateLDAPProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(26).string(v!);
    }
    if (message.startTls !== false) {
      writer.uint32(32).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(42).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(50).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(58).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(66).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(82).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(90).fork()).join();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(98).fork()).join();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLDAPProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLDAPProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e: any) => globalThis.String(e)) : [],
      startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
      bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : "",
      userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
      userObjectClasses: globalThis.Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => globalThis.String(e))
        : [],
      userFilters: globalThis.Array.isArray(object?.userFilters)
        ? object.userFilters.map((e: any) => globalThis.String(e))
        : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateLDAPProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls !== false) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.bindPassword !== "") {
      obj.bindPassword = message.bindPassword;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLDAPProviderRequest>): UpdateLDAPProviderRequest {
    return UpdateLDAPProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLDAPProviderRequest>): UpdateLDAPProviderRequest {
    const message = createBaseUpdateLDAPProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateLDAPProviderResponse(): UpdateLDAPProviderResponse {
  return { details: undefined };
}

export const UpdateLDAPProviderResponse: MessageFns<UpdateLDAPProviderResponse> = {
  encode(message: UpdateLDAPProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLDAPProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLDAPProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLDAPProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLDAPProviderResponse>): UpdateLDAPProviderResponse {
    return UpdateLDAPProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLDAPProviderResponse>): UpdateLDAPProviderResponse {
    const message = createBaseUpdateLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAppleProviderRequest(): AddAppleProviderRequest {
  return {
    name: "",
    clientId: "",
    teamId: "",
    keyId: "",
    privateKey: Buffer.alloc(0),
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddAppleProviderRequest: MessageFns<AddAppleProviderRequest> = {
  encode(message: AddAppleProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    if (message.keyId !== "") {
      writer.uint32(34).string(message.keyId);
    }
    if (message.privateKey.length !== 0) {
      writer.uint32(42).bytes(message.privateKey);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAppleProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.privateKey = Buffer.from(reader.bytes());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAppleProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      privateKey: isSet(object.privateKey) ? Buffer.from(bytesFromBase64(object.privateKey)) : Buffer.alloc(0),
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: AddAppleProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.privateKey.length !== 0) {
      obj.privateKey = base64FromBytes(message.privateKey);
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<AddAppleProviderRequest>): AddAppleProviderRequest {
    return AddAppleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAppleProviderRequest>): AddAppleProviderRequest {
    const message = createBaseAddAppleProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.keyId = object.keyId ?? "";
    message.privateKey = object.privateKey ?? Buffer.alloc(0);
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddAppleProviderResponse(): AddAppleProviderResponse {
  return { details: undefined, id: "" };
}

export const AddAppleProviderResponse: MessageFns<AddAppleProviderResponse> = {
  encode(message: AddAppleProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAppleProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAppleProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddAppleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddAppleProviderResponse>): AddAppleProviderResponse {
    return AddAppleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAppleProviderResponse>): AddAppleProviderResponse {
    const message = createBaseAddAppleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAppleProviderRequest(): UpdateAppleProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    teamId: "",
    keyId: "",
    privateKey: Buffer.alloc(0),
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateAppleProviderRequest: MessageFns<UpdateAppleProviderRequest> = {
  encode(message: UpdateAppleProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(34).string(message.teamId);
    }
    if (message.keyId !== "") {
      writer.uint32(42).string(message.keyId);
    }
    if (message.privateKey.length !== 0) {
      writer.uint32(50).bytes(message.privateKey);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAppleProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teamId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.privateKey = Buffer.from(reader.bytes());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppleProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      privateKey: isSet(object.privateKey) ? Buffer.from(bytesFromBase64(object.privateKey)) : Buffer.alloc(0),
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
    };
  },

  toJSON(message: UpdateAppleProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.privateKey.length !== 0) {
      obj.privateKey = base64FromBytes(message.privateKey);
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAppleProviderRequest>): UpdateAppleProviderRequest {
    return UpdateAppleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppleProviderRequest>): UpdateAppleProviderRequest {
    const message = createBaseUpdateAppleProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.keyId = object.keyId ?? "";
    message.privateKey = object.privateKey ?? Buffer.alloc(0);
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateAppleProviderResponse(): UpdateAppleProviderResponse {
  return { details: undefined };
}

export const UpdateAppleProviderResponse: MessageFns<UpdateAppleProviderResponse> = {
  encode(message: UpdateAppleProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAppleProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppleProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateAppleProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAppleProviderResponse>): UpdateAppleProviderResponse {
    return UpdateAppleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppleProviderResponse>): UpdateAppleProviderResponse {
    const message = createBaseUpdateAppleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddSAMLProviderRequest(): AddSAMLProviderRequest {
  return {
    name: "",
    metadataXml: undefined,
    metadataUrl: undefined,
    binding: 0,
    withSignedRequest: false,
    providerOptions: undefined,
    nameIdFormat: undefined,
    transientMappingAttributeName: undefined,
  };
}

export const AddSAMLProviderRequest: MessageFns<AddSAMLProviderRequest> = {
  encode(message: AddSAMLProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(18).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(26).string(message.metadataUrl);
    }
    if (message.binding !== 0) {
      writer.uint32(32).int32(message.binding);
    }
    if (message.withSignedRequest !== false) {
      writer.uint32(40).bool(message.withSignedRequest);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
    }
    if (message.nameIdFormat !== undefined) {
      writer.uint32(56).int32(message.nameIdFormat);
    }
    if (message.transientMappingAttributeName !== undefined) {
      writer.uint32(66).string(message.transientMappingAttributeName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSAMLProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadataXml = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.binding = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.withSignedRequest = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.nameIdFormat = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.transientMappingAttributeName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSAMLProviderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : undefined,
      metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : undefined,
      binding: isSet(object.binding) ? sAMLBindingFromJSON(object.binding) : 0,
      withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      nameIdFormat: isSet(object.nameIdFormat) ? sAMLNameIDFormatFromJSON(object.nameIdFormat) : undefined,
      transientMappingAttributeName: isSet(object.transientMappingAttributeName)
        ? globalThis.String(object.transientMappingAttributeName)
        : undefined,
    };
  },

  toJSON(message: AddSAMLProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.metadataXml !== undefined) {
      obj.metadataXml = base64FromBytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      obj.metadataUrl = message.metadataUrl;
    }
    if (message.binding !== 0) {
      obj.binding = sAMLBindingToJSON(message.binding);
    }
    if (message.withSignedRequest !== false) {
      obj.withSignedRequest = message.withSignedRequest;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.nameIdFormat !== undefined) {
      obj.nameIdFormat = sAMLNameIDFormatToJSON(message.nameIdFormat);
    }
    if (message.transientMappingAttributeName !== undefined) {
      obj.transientMappingAttributeName = message.transientMappingAttributeName;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSAMLProviderRequest>): AddSAMLProviderRequest {
    return AddSAMLProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSAMLProviderRequest>): AddSAMLProviderRequest {
    const message = createBaseAddSAMLProviderRequest();
    message.name = object.name ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    message.binding = object.binding ?? 0;
    message.withSignedRequest = object.withSignedRequest ?? false;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.nameIdFormat = object.nameIdFormat ?? undefined;
    message.transientMappingAttributeName = object.transientMappingAttributeName ?? undefined;
    return message;
  },
};

function createBaseAddSAMLProviderResponse(): AddSAMLProviderResponse {
  return { details: undefined, id: "" };
}

export const AddSAMLProviderResponse: MessageFns<AddSAMLProviderResponse> = {
  encode(message: AddSAMLProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSAMLProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSAMLProviderResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: AddSAMLProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddSAMLProviderResponse>): AddSAMLProviderResponse {
    return AddSAMLProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSAMLProviderResponse>): AddSAMLProviderResponse {
    const message = createBaseAddSAMLProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSAMLProviderRequest(): UpdateSAMLProviderRequest {
  return {
    id: "",
    name: "",
    metadataXml: undefined,
    metadataUrl: undefined,
    binding: 0,
    withSignedRequest: false,
    providerOptions: undefined,
    nameIdFormat: undefined,
    transientMappingAttributeName: undefined,
  };
}

export const UpdateSAMLProviderRequest: MessageFns<UpdateSAMLProviderRequest> = {
  encode(message: UpdateSAMLProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(26).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(34).string(message.metadataUrl);
    }
    if (message.binding !== 0) {
      writer.uint32(40).int32(message.binding);
    }
    if (message.withSignedRequest !== false) {
      writer.uint32(48).bool(message.withSignedRequest);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
    }
    if (message.nameIdFormat !== undefined) {
      writer.uint32(64).int32(message.nameIdFormat);
    }
    if (message.transientMappingAttributeName !== undefined) {
      writer.uint32(74).string(message.transientMappingAttributeName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSAMLProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataXml = Buffer.from(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.binding = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.withSignedRequest = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.nameIdFormat = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.transientMappingAttributeName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSAMLProviderRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : undefined,
      metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : undefined,
      binding: isSet(object.binding) ? sAMLBindingFromJSON(object.binding) : 0,
      withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
      providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
      nameIdFormat: isSet(object.nameIdFormat) ? sAMLNameIDFormatFromJSON(object.nameIdFormat) : undefined,
      transientMappingAttributeName: isSet(object.transientMappingAttributeName)
        ? globalThis.String(object.transientMappingAttributeName)
        : undefined,
    };
  },

  toJSON(message: UpdateSAMLProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.metadataXml !== undefined) {
      obj.metadataXml = base64FromBytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      obj.metadataUrl = message.metadataUrl;
    }
    if (message.binding !== 0) {
      obj.binding = sAMLBindingToJSON(message.binding);
    }
    if (message.withSignedRequest !== false) {
      obj.withSignedRequest = message.withSignedRequest;
    }
    if (message.providerOptions !== undefined) {
      obj.providerOptions = Options.toJSON(message.providerOptions);
    }
    if (message.nameIdFormat !== undefined) {
      obj.nameIdFormat = sAMLNameIDFormatToJSON(message.nameIdFormat);
    }
    if (message.transientMappingAttributeName !== undefined) {
      obj.transientMappingAttributeName = message.transientMappingAttributeName;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSAMLProviderRequest>): UpdateSAMLProviderRequest {
    return UpdateSAMLProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSAMLProviderRequest>): UpdateSAMLProviderRequest {
    const message = createBaseUpdateSAMLProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    message.binding = object.binding ?? 0;
    message.withSignedRequest = object.withSignedRequest ?? false;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.nameIdFormat = object.nameIdFormat ?? undefined;
    message.transientMappingAttributeName = object.transientMappingAttributeName ?? undefined;
    return message;
  },
};

function createBaseUpdateSAMLProviderResponse(): UpdateSAMLProviderResponse {
  return { details: undefined };
}

export const UpdateSAMLProviderResponse: MessageFns<UpdateSAMLProviderResponse> = {
  encode(message: UpdateSAMLProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSAMLProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSAMLProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateSAMLProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSAMLProviderResponse>): UpdateSAMLProviderResponse {
    return UpdateSAMLProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSAMLProviderResponse>): UpdateSAMLProviderResponse {
    const message = createBaseUpdateSAMLProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRegenerateSAMLProviderCertificateRequest(): RegenerateSAMLProviderCertificateRequest {
  return { id: "" };
}

export const RegenerateSAMLProviderCertificateRequest: MessageFns<RegenerateSAMLProviderCertificateRequest> = {
  encode(message: RegenerateSAMLProviderCertificateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegenerateSAMLProviderCertificateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateSAMLProviderCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegenerateSAMLProviderCertificateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RegenerateSAMLProviderCertificateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RegenerateSAMLProviderCertificateRequest>): RegenerateSAMLProviderCertificateRequest {
    return RegenerateSAMLProviderCertificateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegenerateSAMLProviderCertificateRequest>): RegenerateSAMLProviderCertificateRequest {
    const message = createBaseRegenerateSAMLProviderCertificateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRegenerateSAMLProviderCertificateResponse(): RegenerateSAMLProviderCertificateResponse {
  return { details: undefined };
}

export const RegenerateSAMLProviderCertificateResponse: MessageFns<RegenerateSAMLProviderCertificateResponse> = {
  encode(message: RegenerateSAMLProviderCertificateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegenerateSAMLProviderCertificateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateSAMLProviderCertificateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegenerateSAMLProviderCertificateResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RegenerateSAMLProviderCertificateResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RegenerateSAMLProviderCertificateResponse>): RegenerateSAMLProviderCertificateResponse {
    return RegenerateSAMLProviderCertificateResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RegenerateSAMLProviderCertificateResponse>,
  ): RegenerateSAMLProviderCertificateResponse {
    const message = createBaseRegenerateSAMLProviderCertificateResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeleteProviderRequest(): DeleteProviderRequest {
  return { id: "" };
}

export const DeleteProviderRequest: MessageFns<DeleteProviderRequest> = {
  encode(message: DeleteProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProviderRequest>): DeleteProviderRequest {
    return DeleteProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProviderRequest>): DeleteProviderRequest {
    const message = createBaseDeleteProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteProviderResponse(): DeleteProviderResponse {
  return { details: undefined };
}

export const DeleteProviderResponse: MessageFns<DeleteProviderResponse> = {
  encode(message: DeleteProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProviderResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: DeleteProviderResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProviderResponse>): DeleteProviderResponse {
    return DeleteProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProviderResponse>): DeleteProviderResponse {
    const message = createBaseDeleteProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetOrgIAMPolicyRequest(): GetOrgIAMPolicyRequest {
  return {};
}

export const GetOrgIAMPolicyRequest: MessageFns<GetOrgIAMPolicyRequest> = {
  encode(_: GetOrgIAMPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrgIAMPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOrgIAMPolicyRequest {
    return {};
  },

  toJSON(_: GetOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetOrgIAMPolicyRequest>): GetOrgIAMPolicyRequest {
    return GetOrgIAMPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetOrgIAMPolicyRequest>): GetOrgIAMPolicyRequest {
    const message = createBaseGetOrgIAMPolicyRequest();
    return message;
  },
};

function createBaseGetOrgIAMPolicyResponse(): GetOrgIAMPolicyResponse {
  return { policy: undefined };
}

export const GetOrgIAMPolicyResponse: MessageFns<GetOrgIAMPolicyResponse> = {
  encode(message: GetOrgIAMPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrgIAMPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrgIAMPolicyResponse {
    return { policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = OrgIAMPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetOrgIAMPolicyResponse>): GetOrgIAMPolicyResponse {
    return GetOrgIAMPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgIAMPolicyResponse>): GetOrgIAMPolicyResponse {
    const message = createBaseGetOrgIAMPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OrgIAMPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgIAMPolicyRequest(): UpdateOrgIAMPolicyRequest {
  return { userLoginMustBeDomain: false };
}

export const UpdateOrgIAMPolicyRequest: MessageFns<UpdateOrgIAMPolicyRequest> = {
  encode(message: UpdateOrgIAMPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userLoginMustBeDomain !== false) {
      writer.uint32(8).bool(message.userLoginMustBeDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrgIAMPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIAMPolicyRequest {
    return {
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
        ? globalThis.Boolean(object.userLoginMustBeDomain)
        : false,
    };
  },

  toJSON(message: UpdateOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.userLoginMustBeDomain !== false) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateOrgIAMPolicyRequest>): UpdateOrgIAMPolicyRequest {
    return UpdateOrgIAMPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIAMPolicyRequest>): UpdateOrgIAMPolicyRequest {
    const message = createBaseUpdateOrgIAMPolicyRequest();
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    return message;
  },
};

function createBaseUpdateOrgIAMPolicyResponse(): UpdateOrgIAMPolicyResponse {
  return { details: undefined };
}

export const UpdateOrgIAMPolicyResponse: MessageFns<UpdateOrgIAMPolicyResponse> = {
  encode(message: UpdateOrgIAMPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrgIAMPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrgIAMPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateOrgIAMPolicyResponse>): UpdateOrgIAMPolicyResponse {
    return UpdateOrgIAMPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIAMPolicyResponse>): UpdateOrgIAMPolicyResponse {
    const message = createBaseUpdateOrgIAMPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomOrgIAMPolicyRequest(): GetCustomOrgIAMPolicyRequest {
  return { orgId: "" };
}

export const GetCustomOrgIAMPolicyRequest: MessageFns<GetCustomOrgIAMPolicyRequest> = {
  encode(message: GetCustomOrgIAMPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomOrgIAMPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomOrgIAMPolicyRequest {
    return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
  },

  toJSON(message: GetCustomOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomOrgIAMPolicyRequest>): GetCustomOrgIAMPolicyRequest {
    return GetCustomOrgIAMPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomOrgIAMPolicyRequest>): GetCustomOrgIAMPolicyRequest {
    const message = createBaseGetCustomOrgIAMPolicyRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseGetCustomOrgIAMPolicyResponse(): GetCustomOrgIAMPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetCustomOrgIAMPolicyResponse: MessageFns<GetCustomOrgIAMPolicyResponse> = {
  encode(message: GetCustomOrgIAMPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.isDefault !== false) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomOrgIAMPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomOrgIAMPolicyResponse {
    return {
      policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetCustomOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = OrgIAMPolicy.toJSON(message.policy);
    }
    if (message.isDefault !== false) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomOrgIAMPolicyResponse>): GetCustomOrgIAMPolicyResponse {
    return GetCustomOrgIAMPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomOrgIAMPolicyResponse>): GetCustomOrgIAMPolicyResponse {
    const message = createBaseGetCustomOrgIAMPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OrgIAMPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseAddCustomOrgIAMPolicyRequest(): AddCustomOrgIAMPolicyRequest {
  return { orgId: "", userLoginMustBeDomain: false };
}

export const AddCustomOrgIAMPolicyRequest: MessageFns<AddCustomOrgIAMPolicyRequest> = {
  encode(message: AddCustomOrgIAMPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain !== false) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCustomOrgIAMPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomOrgIAMPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
        ? globalThis.Boolean(object.userLoginMustBeDomain)
        : false,
    };
  },

  toJSON(message: AddCustomOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain !== false) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<AddCustomOrgIAMPolicyRequest>): AddCustomOrgIAMPolicyRequest {
    return AddCustomOrgIAMPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomOrgIAMPolicyRequest>): AddCustomOrgIAMPolicyRequest {
    const message = createBaseAddCustomOrgIAMPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    return message;
  },
};

function createBaseAddCustomOrgIAMPolicyResponse(): AddCustomOrgIAMPolicyResponse {
  return { details: undefined };
}

export const AddCustomOrgIAMPolicyResponse: MessageFns<AddCustomOrgIAMPolicyResponse> = {
  encode(message: AddCustomOrgIAMPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCustomOrgIAMPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomOrgIAMPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddCustomOrgIAMPolicyResponse>): AddCustomOrgIAMPolicyResponse {
    return AddCustomOrgIAMPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomOrgIAMPolicyResponse>): AddCustomOrgIAMPolicyResponse {
    const message = createBaseAddCustomOrgIAMPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomOrgIAMPolicyRequest(): UpdateCustomOrgIAMPolicyRequest {
  return { orgId: "", userLoginMustBeDomain: false };
}

export const UpdateCustomOrgIAMPolicyRequest: MessageFns<UpdateCustomOrgIAMPolicyRequest> = {
  encode(message: UpdateCustomOrgIAMPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain !== false) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomOrgIAMPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomOrgIAMPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
        ? globalThis.Boolean(object.userLoginMustBeDomain)
        : false,
    };
  },

  toJSON(message: UpdateCustomOrgIAMPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain !== false) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomOrgIAMPolicyRequest>): UpdateCustomOrgIAMPolicyRequest {
    return UpdateCustomOrgIAMPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomOrgIAMPolicyRequest>): UpdateCustomOrgIAMPolicyRequest {
    const message = createBaseUpdateCustomOrgIAMPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    return message;
  },
};

function createBaseUpdateCustomOrgIAMPolicyResponse(): UpdateCustomOrgIAMPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomOrgIAMPolicyResponse: MessageFns<UpdateCustomOrgIAMPolicyResponse> = {
  encode(message: UpdateCustomOrgIAMPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomOrgIAMPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomOrgIAMPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomOrgIAMPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomOrgIAMPolicyResponse>): UpdateCustomOrgIAMPolicyResponse {
    return UpdateCustomOrgIAMPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomOrgIAMPolicyResponse>): UpdateCustomOrgIAMPolicyResponse {
    const message = createBaseUpdateCustomOrgIAMPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomOrgIAMPolicyToDefaultRequest(): ResetCustomOrgIAMPolicyToDefaultRequest {
  return { orgId: "" };
}

export const ResetCustomOrgIAMPolicyToDefaultRequest: MessageFns<ResetCustomOrgIAMPolicyToDefaultRequest> = {
  encode(message: ResetCustomOrgIAMPolicyToDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomOrgIAMPolicyToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomOrgIAMPolicyToDefaultRequest {
    return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
  },

  toJSON(message: ResetCustomOrgIAMPolicyToDefaultRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>): ResetCustomOrgIAMPolicyToDefaultRequest {
    return ResetCustomOrgIAMPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>): ResetCustomOrgIAMPolicyToDefaultRequest {
    const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseResetCustomOrgIAMPolicyToDefaultResponse(): ResetCustomOrgIAMPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomOrgIAMPolicyToDefaultResponse: MessageFns<ResetCustomOrgIAMPolicyToDefaultResponse> = {
  encode(message: ResetCustomOrgIAMPolicyToDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomOrgIAMPolicyToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomOrgIAMPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomOrgIAMPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomOrgIAMPolicyToDefaultResponse>): ResetCustomOrgIAMPolicyToDefaultResponse {
    return ResetCustomOrgIAMPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomOrgIAMPolicyToDefaultResponse>): ResetCustomOrgIAMPolicyToDefaultResponse {
    const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDomainPolicyRequest(): GetDomainPolicyRequest {
  return {};
}

export const GetDomainPolicyRequest: MessageFns<GetDomainPolicyRequest> = {
  encode(_: GetDomainPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDomainPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDomainPolicyRequest {
    return {};
  },

  toJSON(_: GetDomainPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetDomainPolicyRequest>): GetDomainPolicyRequest {
    return GetDomainPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDomainPolicyRequest>): GetDomainPolicyRequest {
    const message = createBaseGetDomainPolicyRequest();
    return message;
  },
};

function createBaseGetDomainPolicyResponse(): GetDomainPolicyResponse {
  return { policy: undefined };
}

export const GetDomainPolicyResponse: MessageFns<GetDomainPolicyResponse> = {
  encode(message: GetDomainPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      DomainPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDomainPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = DomainPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDomainPolicyResponse {
    return { policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = DomainPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDomainPolicyResponse>): GetDomainPolicyResponse {
    return GetDomainPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDomainPolicyResponse>): GetDomainPolicyResponse {
    const message = createBaseGetDomainPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? DomainPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateDomainPolicyRequest(): UpdateDomainPolicyRequest {
  return { userLoginMustBeDomain: false, validateOrgDomains: false, smtpSenderAddressMatchesInstanceDomain: false };
}

export const UpdateDomainPolicyRequest: MessageFns<UpdateDomainPolicyRequest> = {
  encode(message: UpdateDomainPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userLoginMustBeDomain !== false) {
      writer.uint32(8).bool(message.userLoginMustBeDomain);
    }
    if (message.validateOrgDomains !== false) {
      writer.uint32(16).bool(message.validateOrgDomains);
    }
    if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
      writer.uint32(24).bool(message.smtpSenderAddressMatchesInstanceDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDomainPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOrgDomains = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDomainPolicyRequest {
    return {
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
        ? globalThis.Boolean(object.userLoginMustBeDomain)
        : false,
      validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
      smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
        ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
        : false,
    };
  },

  toJSON(message: UpdateDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.userLoginMustBeDomain !== false) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    if (message.validateOrgDomains !== false) {
      obj.validateOrgDomains = message.validateOrgDomains;
    }
    if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
      obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDomainPolicyRequest>): UpdateDomainPolicyRequest {
    return UpdateDomainPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDomainPolicyRequest>): UpdateDomainPolicyRequest {
    const message = createBaseUpdateDomainPolicyRequest();
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    message.validateOrgDomains = object.validateOrgDomains ?? false;
    message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
    return message;
  },
};

function createBaseUpdateDomainPolicyResponse(): UpdateDomainPolicyResponse {
  return { details: undefined };
}

export const UpdateDomainPolicyResponse: MessageFns<UpdateDomainPolicyResponse> = {
  encode(message: UpdateDomainPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDomainPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDomainPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDomainPolicyResponse>): UpdateDomainPolicyResponse {
    return UpdateDomainPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDomainPolicyResponse>): UpdateDomainPolicyResponse {
    const message = createBaseUpdateDomainPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomDomainPolicyRequest(): GetCustomDomainPolicyRequest {
  return { orgId: "" };
}

export const GetCustomDomainPolicyRequest: MessageFns<GetCustomDomainPolicyRequest> = {
  encode(message: GetCustomDomainPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomDomainPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainPolicyRequest {
    return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
  },

  toJSON(message: GetCustomDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomDomainPolicyRequest>): GetCustomDomainPolicyRequest {
    return GetCustomDomainPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomDomainPolicyRequest>): GetCustomDomainPolicyRequest {
    const message = createBaseGetCustomDomainPolicyRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseGetCustomDomainPolicyResponse(): GetCustomDomainPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetCustomDomainPolicyResponse: MessageFns<GetCustomDomainPolicyResponse> = {
  encode(message: GetCustomDomainPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      DomainPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.isDefault !== false) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomDomainPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = DomainPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainPolicyResponse {
    return {
      policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined,
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
    };
  },

  toJSON(message: GetCustomDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = DomainPolicy.toJSON(message.policy);
    }
    if (message.isDefault !== false) {
      obj.isDefault = message.isDefault;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomDomainPolicyResponse>): GetCustomDomainPolicyResponse {
    return GetCustomDomainPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomDomainPolicyResponse>): GetCustomDomainPolicyResponse {
    const message = createBaseGetCustomDomainPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? DomainPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseAddCustomDomainPolicyRequest(): AddCustomDomainPolicyRequest {
  return {
    orgId: "",
    userLoginMustBeDomain: false,
    validateOrgDomains: false,
    smtpSenderAddressMatchesInstanceDomain: false,
  };
}

export const AddCustomDomainPolicyRequest: MessageFns<AddCustomDomainPolicyRequest> = {
  encode(message: AddCustomDomainPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain !== false) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    if (message.validateOrgDomains !== false) {
      writer.uint32(24).bool(message.validateOrgDomains);
    }
    if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
      writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCustomDomainPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOrgDomains = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomDomainPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
        ? globalThis.Boolean(object.userLoginMustBeDomain)
        : false,
      validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
      smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
        ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
        : false,
    };
  },

  toJSON(message: AddCustomDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain !== false) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    if (message.validateOrgDomains !== false) {
      obj.validateOrgDomains = message.validateOrgDomains;
    }
    if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
      obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<AddCustomDomainPolicyRequest>): AddCustomDomainPolicyRequest {
    return AddCustomDomainPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomDomainPolicyRequest>): AddCustomDomainPolicyRequest {
    const message = createBaseAddCustomDomainPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    message.validateOrgDomains = object.validateOrgDomains ?? false;
    message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
    return message;
  },
};

function createBaseAddCustomDomainPolicyResponse(): AddCustomDomainPolicyResponse {
  return { details: undefined };
}

export const AddCustomDomainPolicyResponse: MessageFns<AddCustomDomainPolicyResponse> = {
  encode(message: AddCustomDomainPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCustomDomainPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCustomDomainPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddCustomDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddCustomDomainPolicyResponse>): AddCustomDomainPolicyResponse {
    return AddCustomDomainPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomDomainPolicyResponse>): AddCustomDomainPolicyResponse {
    const message = createBaseAddCustomDomainPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomDomainPolicyRequest(): UpdateCustomDomainPolicyRequest {
  return {
    orgId: "",
    userLoginMustBeDomain: false,
    validateOrgDomains: false,
    smtpSenderAddressMatchesInstanceDomain: false,
  };
}

export const UpdateCustomDomainPolicyRequest: MessageFns<UpdateCustomDomainPolicyRequest> = {
  encode(message: UpdateCustomDomainPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.userLoginMustBeDomain !== false) {
      writer.uint32(16).bool(message.userLoginMustBeDomain);
    }
    if (message.validateOrgDomains !== false) {
      writer.uint32(24).bool(message.validateOrgDomains);
    }
    if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
      writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomDomainPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userLoginMustBeDomain = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOrgDomains = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomDomainPolicyRequest {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
        ? globalThis.Boolean(object.userLoginMustBeDomain)
        : false,
      validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
      smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
        ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
        : false,
    };
  },

  toJSON(message: UpdateCustomDomainPolicyRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.userLoginMustBeDomain !== false) {
      obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
    }
    if (message.validateOrgDomains !== false) {
      obj.validateOrgDomains = message.validateOrgDomains;
    }
    if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
      obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomDomainPolicyRequest>): UpdateCustomDomainPolicyRequest {
    return UpdateCustomDomainPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomDomainPolicyRequest>): UpdateCustomDomainPolicyRequest {
    const message = createBaseUpdateCustomDomainPolicyRequest();
    message.orgId = object.orgId ?? "";
    message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
    message.validateOrgDomains = object.validateOrgDomains ?? false;
    message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
    return message;
  },
};

function createBaseUpdateCustomDomainPolicyResponse(): UpdateCustomDomainPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomDomainPolicyResponse: MessageFns<UpdateCustomDomainPolicyResponse> = {
  encode(message: UpdateCustomDomainPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomDomainPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomDomainPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateCustomDomainPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomDomainPolicyResponse>): UpdateCustomDomainPolicyResponse {
    return UpdateCustomDomainPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomDomainPolicyResponse>): UpdateCustomDomainPolicyResponse {
    const message = createBaseUpdateCustomDomainPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomDomainPolicyToDefaultRequest(): ResetCustomDomainPolicyToDefaultRequest {
  return { orgId: "" };
}

export const ResetCustomDomainPolicyToDefaultRequest: MessageFns<ResetCustomDomainPolicyToDefaultRequest> = {
  encode(message: ResetCustomDomainPolicyToDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomDomainPolicyToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainPolicyToDefaultRequest {
    return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
  },

  toJSON(message: ResetCustomDomainPolicyToDefaultRequest): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomDomainPolicyToDefaultRequest>): ResetCustomDomainPolicyToDefaultRequest {
    return ResetCustomDomainPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomDomainPolicyToDefaultRequest>): ResetCustomDomainPolicyToDefaultRequest {
    const message = createBaseResetCustomDomainPolicyToDefaultRequest();
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseResetCustomDomainPolicyToDefaultResponse(): ResetCustomDomainPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomDomainPolicyToDefaultResponse: MessageFns<ResetCustomDomainPolicyToDefaultResponse> = {
  encode(message: ResetCustomDomainPolicyToDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomDomainPolicyToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainPolicyToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomDomainPolicyToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomDomainPolicyToDefaultResponse>): ResetCustomDomainPolicyToDefaultResponse {
    return ResetCustomDomainPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomDomainPolicyToDefaultResponse>): ResetCustomDomainPolicyToDefaultResponse {
    const message = createBaseResetCustomDomainPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLabelPolicyRequest(): GetLabelPolicyRequest {
  return {};
}

export const GetLabelPolicyRequest: MessageFns<GetLabelPolicyRequest> = {
  encode(_: GetLabelPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLabelPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetLabelPolicyRequest>): GetLabelPolicyRequest {
    return GetLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLabelPolicyRequest>): GetLabelPolicyRequest {
    const message = createBaseGetLabelPolicyRequest();
    return message;
  },
};

function createBaseGetLabelPolicyResponse(): GetLabelPolicyResponse {
  return { policy: undefined };
}

export const GetLabelPolicyResponse: MessageFns<GetLabelPolicyResponse> = {
  encode(message: GetLabelPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLabelPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLabelPolicyResponse {
    return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLabelPolicyResponse>): GetLabelPolicyResponse {
    return GetLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLabelPolicyResponse>): GetLabelPolicyResponse {
    const message = createBaseGetLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetPreviewLabelPolicyRequest(): GetPreviewLabelPolicyRequest {
  return {};
}

export const GetPreviewLabelPolicyRequest: MessageFns<GetPreviewLabelPolicyRequest> = {
  encode(_: GetPreviewLabelPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPreviewLabelPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPreviewLabelPolicyRequest {
    return {};
  },

  toJSON(_: GetPreviewLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetPreviewLabelPolicyRequest>): GetPreviewLabelPolicyRequest {
    return GetPreviewLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPreviewLabelPolicyRequest>): GetPreviewLabelPolicyRequest {
    const message = createBaseGetPreviewLabelPolicyRequest();
    return message;
  },
};

function createBaseGetPreviewLabelPolicyResponse(): GetPreviewLabelPolicyResponse {
  return { policy: undefined };
}

export const GetPreviewLabelPolicyResponse: MessageFns<GetPreviewLabelPolicyResponse> = {
  encode(message: GetPreviewLabelPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPreviewLabelPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPreviewLabelPolicyResponse {
    return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPreviewLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LabelPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPreviewLabelPolicyResponse>): GetPreviewLabelPolicyResponse {
    return GetPreviewLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPreviewLabelPolicyResponse>): GetPreviewLabelPolicyResponse {
    const message = createBaseGetPreviewLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateLabelPolicyRequest(): UpdateLabelPolicyRequest {
  return {
    primaryColor: "",
    hideLoginNameSuffix: false,
    warnColor: "",
    backgroundColor: "",
    fontColor: "",
    primaryColorDark: "",
    backgroundColorDark: "",
    warnColorDark: "",
    fontColorDark: "",
    disableWatermark: false,
    themeMode: 0,
  };
}

export const UpdateLabelPolicyRequest: MessageFns<UpdateLabelPolicyRequest> = {
  encode(message: UpdateLabelPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primaryColor !== "") {
      writer.uint32(10).string(message.primaryColor);
    }
    if (message.hideLoginNameSuffix !== false) {
      writer.uint32(24).bool(message.hideLoginNameSuffix);
    }
    if (message.warnColor !== "") {
      writer.uint32(34).string(message.warnColor);
    }
    if (message.backgroundColor !== "") {
      writer.uint32(42).string(message.backgroundColor);
    }
    if (message.fontColor !== "") {
      writer.uint32(50).string(message.fontColor);
    }
    if (message.primaryColorDark !== "") {
      writer.uint32(58).string(message.primaryColorDark);
    }
    if (message.backgroundColorDark !== "") {
      writer.uint32(66).string(message.backgroundColorDark);
    }
    if (message.warnColorDark !== "") {
      writer.uint32(74).string(message.warnColorDark);
    }
    if (message.fontColorDark !== "") {
      writer.uint32(82).string(message.fontColorDark);
    }
    if (message.disableWatermark !== false) {
      writer.uint32(88).bool(message.disableWatermark);
    }
    if (message.themeMode !== 0) {
      writer.uint32(96).int32(message.themeMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLabelPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hideLoginNameSuffix = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.warnColor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.primaryColorDark = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backgroundColorDark = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnColorDark = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fontColorDark = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableWatermark = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.themeMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLabelPolicyRequest {
    return {
      primaryColor: isSet(object.primaryColor) ? globalThis.String(object.primaryColor) : "",
      hideLoginNameSuffix: isSet(object.hideLoginNameSuffix) ? globalThis.Boolean(object.hideLoginNameSuffix) : false,
      warnColor: isSet(object.warnColor) ? globalThis.String(object.warnColor) : "",
      backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : "",
      fontColor: isSet(object.fontColor) ? globalThis.String(object.fontColor) : "",
      primaryColorDark: isSet(object.primaryColorDark) ? globalThis.String(object.primaryColorDark) : "",
      backgroundColorDark: isSet(object.backgroundColorDark) ? globalThis.String(object.backgroundColorDark) : "",
      warnColorDark: isSet(object.warnColorDark) ? globalThis.String(object.warnColorDark) : "",
      fontColorDark: isSet(object.fontColorDark) ? globalThis.String(object.fontColorDark) : "",
      disableWatermark: isSet(object.disableWatermark) ? globalThis.Boolean(object.disableWatermark) : false,
      themeMode: isSet(object.themeMode) ? themeModeFromJSON(object.themeMode) : 0,
    };
  },

  toJSON(message: UpdateLabelPolicyRequest): unknown {
    const obj: any = {};
    if (message.primaryColor !== "") {
      obj.primaryColor = message.primaryColor;
    }
    if (message.hideLoginNameSuffix !== false) {
      obj.hideLoginNameSuffix = message.hideLoginNameSuffix;
    }
    if (message.warnColor !== "") {
      obj.warnColor = message.warnColor;
    }
    if (message.backgroundColor !== "") {
      obj.backgroundColor = message.backgroundColor;
    }
    if (message.fontColor !== "") {
      obj.fontColor = message.fontColor;
    }
    if (message.primaryColorDark !== "") {
      obj.primaryColorDark = message.primaryColorDark;
    }
    if (message.backgroundColorDark !== "") {
      obj.backgroundColorDark = message.backgroundColorDark;
    }
    if (message.warnColorDark !== "") {
      obj.warnColorDark = message.warnColorDark;
    }
    if (message.fontColorDark !== "") {
      obj.fontColorDark = message.fontColorDark;
    }
    if (message.disableWatermark !== false) {
      obj.disableWatermark = message.disableWatermark;
    }
    if (message.themeMode !== 0) {
      obj.themeMode = themeModeToJSON(message.themeMode);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLabelPolicyRequest>): UpdateLabelPolicyRequest {
    return UpdateLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLabelPolicyRequest>): UpdateLabelPolicyRequest {
    const message = createBaseUpdateLabelPolicyRequest();
    message.primaryColor = object.primaryColor ?? "";
    message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
    message.warnColor = object.warnColor ?? "";
    message.backgroundColor = object.backgroundColor ?? "";
    message.fontColor = object.fontColor ?? "";
    message.primaryColorDark = object.primaryColorDark ?? "";
    message.backgroundColorDark = object.backgroundColorDark ?? "";
    message.warnColorDark = object.warnColorDark ?? "";
    message.fontColorDark = object.fontColorDark ?? "";
    message.disableWatermark = object.disableWatermark ?? false;
    message.themeMode = object.themeMode ?? 0;
    return message;
  },
};

function createBaseUpdateLabelPolicyResponse(): UpdateLabelPolicyResponse {
  return { details: undefined };
}

export const UpdateLabelPolicyResponse: MessageFns<UpdateLabelPolicyResponse> = {
  encode(message: UpdateLabelPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLabelPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLabelPolicyResponse>): UpdateLabelPolicyResponse {
    return UpdateLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLabelPolicyResponse>): UpdateLabelPolicyResponse {
    const message = createBaseUpdateLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateLabelPolicyRequest(): ActivateLabelPolicyRequest {
  return {};
}

export const ActivateLabelPolicyRequest: MessageFns<ActivateLabelPolicyRequest> = {
  encode(_: ActivateLabelPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateLabelPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ActivateLabelPolicyRequest {
    return {};
  },

  toJSON(_: ActivateLabelPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ActivateLabelPolicyRequest>): ActivateLabelPolicyRequest {
    return ActivateLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ActivateLabelPolicyRequest>): ActivateLabelPolicyRequest {
    const message = createBaseActivateLabelPolicyRequest();
    return message;
  },
};

function createBaseActivateLabelPolicyResponse(): ActivateLabelPolicyResponse {
  return { details: undefined };
}

export const ActivateLabelPolicyResponse: MessageFns<ActivateLabelPolicyResponse> = {
  encode(message: ActivateLabelPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateLabelPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateLabelPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateLabelPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateLabelPolicyResponse>): ActivateLabelPolicyResponse {
    return ActivateLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateLabelPolicyResponse>): ActivateLabelPolicyResponse {
    const message = createBaseActivateLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoRequest(): RemoveLabelPolicyLogoRequest {
  return {};
}

export const RemoveLabelPolicyLogoRequest: MessageFns<RemoveLabelPolicyLogoRequest> = {
  encode(_: RemoveLabelPolicyLogoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyLogoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyLogoRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyLogoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyLogoRequest>): RemoveLabelPolicyLogoRequest {
    return RemoveLabelPolicyLogoRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLabelPolicyLogoRequest>): RemoveLabelPolicyLogoRequest {
    const message = createBaseRemoveLabelPolicyLogoRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoResponse(): RemoveLabelPolicyLogoResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyLogoResponse: MessageFns<RemoveLabelPolicyLogoResponse> = {
  encode(message: RemoveLabelPolicyLogoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyLogoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyLogoResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyLogoResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyLogoResponse>): RemoveLabelPolicyLogoResponse {
    return RemoveLabelPolicyLogoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveLabelPolicyLogoResponse>): RemoveLabelPolicyLogoResponse {
    const message = createBaseRemoveLabelPolicyLogoResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoDarkRequest(): RemoveLabelPolicyLogoDarkRequest {
  return {};
}

export const RemoveLabelPolicyLogoDarkRequest: MessageFns<RemoveLabelPolicyLogoDarkRequest> = {
  encode(_: RemoveLabelPolicyLogoDarkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyLogoDarkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyLogoDarkRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyLogoDarkRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyLogoDarkRequest>): RemoveLabelPolicyLogoDarkRequest {
    return RemoveLabelPolicyLogoDarkRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLabelPolicyLogoDarkRequest>): RemoveLabelPolicyLogoDarkRequest {
    const message = createBaseRemoveLabelPolicyLogoDarkRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyLogoDarkResponse(): RemoveLabelPolicyLogoDarkResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyLogoDarkResponse: MessageFns<RemoveLabelPolicyLogoDarkResponse> = {
  encode(message: RemoveLabelPolicyLogoDarkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyLogoDarkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyLogoDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyLogoDarkResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyLogoDarkResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyLogoDarkResponse>): RemoveLabelPolicyLogoDarkResponse {
    return RemoveLabelPolicyLogoDarkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveLabelPolicyLogoDarkResponse>): RemoveLabelPolicyLogoDarkResponse {
    const message = createBaseRemoveLabelPolicyLogoDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyIconRequest(): RemoveLabelPolicyIconRequest {
  return {};
}

export const RemoveLabelPolicyIconRequest: MessageFns<RemoveLabelPolicyIconRequest> = {
  encode(_: RemoveLabelPolicyIconRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyIconRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyIconRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyIconRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyIconRequest>): RemoveLabelPolicyIconRequest {
    return RemoveLabelPolicyIconRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLabelPolicyIconRequest>): RemoveLabelPolicyIconRequest {
    const message = createBaseRemoveLabelPolicyIconRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyIconResponse(): RemoveLabelPolicyIconResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyIconResponse: MessageFns<RemoveLabelPolicyIconResponse> = {
  encode(message: RemoveLabelPolicyIconResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyIconResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyIconResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyIconResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyIconResponse>): RemoveLabelPolicyIconResponse {
    return RemoveLabelPolicyIconResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveLabelPolicyIconResponse>): RemoveLabelPolicyIconResponse {
    const message = createBaseRemoveLabelPolicyIconResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyIconDarkRequest(): RemoveLabelPolicyIconDarkRequest {
  return {};
}

export const RemoveLabelPolicyIconDarkRequest: MessageFns<RemoveLabelPolicyIconDarkRequest> = {
  encode(_: RemoveLabelPolicyIconDarkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyIconDarkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyIconDarkRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyIconDarkRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyIconDarkRequest>): RemoveLabelPolicyIconDarkRequest {
    return RemoveLabelPolicyIconDarkRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLabelPolicyIconDarkRequest>): RemoveLabelPolicyIconDarkRequest {
    const message = createBaseRemoveLabelPolicyIconDarkRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyIconDarkResponse(): RemoveLabelPolicyIconDarkResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyIconDarkResponse: MessageFns<RemoveLabelPolicyIconDarkResponse> = {
  encode(message: RemoveLabelPolicyIconDarkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyIconDarkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyIconDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyIconDarkResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyIconDarkResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyIconDarkResponse>): RemoveLabelPolicyIconDarkResponse {
    return RemoveLabelPolicyIconDarkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveLabelPolicyIconDarkResponse>): RemoveLabelPolicyIconDarkResponse {
    const message = createBaseRemoveLabelPolicyIconDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveLabelPolicyFontRequest(): RemoveLabelPolicyFontRequest {
  return {};
}

export const RemoveLabelPolicyFontRequest: MessageFns<RemoveLabelPolicyFontRequest> = {
  encode(_: RemoveLabelPolicyFontRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyFontRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyFontRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveLabelPolicyFontRequest {
    return {};
  },

  toJSON(_: RemoveLabelPolicyFontRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyFontRequest>): RemoveLabelPolicyFontRequest {
    return RemoveLabelPolicyFontRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveLabelPolicyFontRequest>): RemoveLabelPolicyFontRequest {
    const message = createBaseRemoveLabelPolicyFontRequest();
    return message;
  },
};

function createBaseRemoveLabelPolicyFontResponse(): RemoveLabelPolicyFontResponse {
  return { details: undefined };
}

export const RemoveLabelPolicyFontResponse: MessageFns<RemoveLabelPolicyFontResponse> = {
  encode(message: RemoveLabelPolicyFontResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveLabelPolicyFontResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveLabelPolicyFontResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveLabelPolicyFontResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveLabelPolicyFontResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveLabelPolicyFontResponse>): RemoveLabelPolicyFontResponse {
    return RemoveLabelPolicyFontResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveLabelPolicyFontResponse>): RemoveLabelPolicyFontResponse {
    const message = createBaseRemoveLabelPolicyFontResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLoginPolicyRequest(): GetLoginPolicyRequest {
  return {};
}

export const GetLoginPolicyRequest: MessageFns<GetLoginPolicyRequest> = {
  encode(_: GetLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLoginPolicyRequest {
    return {};
  },

  toJSON(_: GetLoginPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetLoginPolicyRequest>): GetLoginPolicyRequest {
    return GetLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLoginPolicyRequest>): GetLoginPolicyRequest {
    const message = createBaseGetLoginPolicyRequest();
    return message;
  },
};

function createBaseGetLoginPolicyResponse(): GetLoginPolicyResponse {
  return { policy: undefined };
}

export const GetLoginPolicyResponse: MessageFns<GetLoginPolicyResponse> = {
  encode(message: GetLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      LoginPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LoginPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLoginPolicyResponse {
    return { policy: isSet(object.policy) ? LoginPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LoginPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLoginPolicyResponse>): GetLoginPolicyResponse {
    return GetLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLoginPolicyResponse>): GetLoginPolicyResponse {
    const message = createBaseGetLoginPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LoginPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateLoginPolicyRequest(): UpdateLoginPolicyRequest {
  return {
    allowUsernamePassword: false,
    allowRegister: false,
    allowExternalIdp: false,
    forceMfa: false,
    passwordlessType: 0,
    hidePasswordReset: false,
    ignoreUnknownUsernames: false,
    defaultRedirectUri: "",
    passwordCheckLifetime: undefined,
    externalLoginCheckLifetime: undefined,
    mfaInitSkipLifetime: undefined,
    secondFactorCheckLifetime: undefined,
    multiFactorCheckLifetime: undefined,
    allowDomainDiscovery: false,
    disableLoginWithEmail: false,
    disableLoginWithPhone: false,
    forceMfaLocalOnly: false,
  };
}

export const UpdateLoginPolicyRequest: MessageFns<UpdateLoginPolicyRequest> = {
  encode(message: UpdateLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowUsernamePassword !== false) {
      writer.uint32(8).bool(message.allowUsernamePassword);
    }
    if (message.allowRegister !== false) {
      writer.uint32(16).bool(message.allowRegister);
    }
    if (message.allowExternalIdp !== false) {
      writer.uint32(24).bool(message.allowExternalIdp);
    }
    if (message.forceMfa !== false) {
      writer.uint32(32).bool(message.forceMfa);
    }
    if (message.passwordlessType !== 0) {
      writer.uint32(40).int32(message.passwordlessType);
    }
    if (message.hidePasswordReset !== false) {
      writer.uint32(48).bool(message.hidePasswordReset);
    }
    if (message.ignoreUnknownUsernames !== false) {
      writer.uint32(56).bool(message.ignoreUnknownUsernames);
    }
    if (message.defaultRedirectUri !== "") {
      writer.uint32(66).string(message.defaultRedirectUri);
    }
    if (message.passwordCheckLifetime !== undefined) {
      Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).join();
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).join();
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).join();
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).join();
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).join();
    }
    if (message.allowDomainDiscovery !== false) {
      writer.uint32(112).bool(message.allowDomainDiscovery);
    }
    if (message.disableLoginWithEmail !== false) {
      writer.uint32(120).bool(message.disableLoginWithEmail);
    }
    if (message.disableLoginWithPhone !== false) {
      writer.uint32(128).bool(message.disableLoginWithPhone);
    }
    if (message.forceMfaLocalOnly !== false) {
      writer.uint32(136).bool(message.forceMfaLocalOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowUsernamePassword = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowRegister = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowExternalIdp = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.forceMfa = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.passwordlessType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hidePasswordReset = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreUnknownUsernames = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultRedirectUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.allowDomainDiscovery = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.disableLoginWithEmail = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.disableLoginWithPhone = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.forceMfaLocalOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLoginPolicyRequest {
    return {
      allowUsernamePassword: isSet(object.allowUsernamePassword)
        ? globalThis.Boolean(object.allowUsernamePassword)
        : false,
      allowRegister: isSet(object.allowRegister) ? globalThis.Boolean(object.allowRegister) : false,
      allowExternalIdp: isSet(object.allowExternalIdp) ? globalThis.Boolean(object.allowExternalIdp) : false,
      forceMfa: isSet(object.forceMfa) ? globalThis.Boolean(object.forceMfa) : false,
      passwordlessType: isSet(object.passwordlessType) ? passwordlessTypeFromJSON(object.passwordlessType) : 0,
      hidePasswordReset: isSet(object.hidePasswordReset) ? globalThis.Boolean(object.hidePasswordReset) : false,
      ignoreUnknownUsernames: isSet(object.ignoreUnknownUsernames)
        ? globalThis.Boolean(object.ignoreUnknownUsernames)
        : false,
      defaultRedirectUri: isSet(object.defaultRedirectUri) ? globalThis.String(object.defaultRedirectUri) : "",
      passwordCheckLifetime: isSet(object.passwordCheckLifetime)
        ? Duration.fromJSON(object.passwordCheckLifetime)
        : undefined,
      externalLoginCheckLifetime: isSet(object.externalLoginCheckLifetime)
        ? Duration.fromJSON(object.externalLoginCheckLifetime)
        : undefined,
      mfaInitSkipLifetime: isSet(object.mfaInitSkipLifetime)
        ? Duration.fromJSON(object.mfaInitSkipLifetime)
        : undefined,
      secondFactorCheckLifetime: isSet(object.secondFactorCheckLifetime)
        ? Duration.fromJSON(object.secondFactorCheckLifetime)
        : undefined,
      multiFactorCheckLifetime: isSet(object.multiFactorCheckLifetime)
        ? Duration.fromJSON(object.multiFactorCheckLifetime)
        : undefined,
      allowDomainDiscovery: isSet(object.allowDomainDiscovery)
        ? globalThis.Boolean(object.allowDomainDiscovery)
        : false,
      disableLoginWithEmail: isSet(object.disableLoginWithEmail)
        ? globalThis.Boolean(object.disableLoginWithEmail)
        : false,
      disableLoginWithPhone: isSet(object.disableLoginWithPhone)
        ? globalThis.Boolean(object.disableLoginWithPhone)
        : false,
      forceMfaLocalOnly: isSet(object.forceMfaLocalOnly) ? globalThis.Boolean(object.forceMfaLocalOnly) : false,
    };
  },

  toJSON(message: UpdateLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.allowUsernamePassword !== false) {
      obj.allowUsernamePassword = message.allowUsernamePassword;
    }
    if (message.allowRegister !== false) {
      obj.allowRegister = message.allowRegister;
    }
    if (message.allowExternalIdp !== false) {
      obj.allowExternalIdp = message.allowExternalIdp;
    }
    if (message.forceMfa !== false) {
      obj.forceMfa = message.forceMfa;
    }
    if (message.passwordlessType !== 0) {
      obj.passwordlessType = passwordlessTypeToJSON(message.passwordlessType);
    }
    if (message.hidePasswordReset !== false) {
      obj.hidePasswordReset = message.hidePasswordReset;
    }
    if (message.ignoreUnknownUsernames !== false) {
      obj.ignoreUnknownUsernames = message.ignoreUnknownUsernames;
    }
    if (message.defaultRedirectUri !== "") {
      obj.defaultRedirectUri = message.defaultRedirectUri;
    }
    if (message.passwordCheckLifetime !== undefined) {
      obj.passwordCheckLifetime = Duration.toJSON(message.passwordCheckLifetime);
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      obj.externalLoginCheckLifetime = Duration.toJSON(message.externalLoginCheckLifetime);
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      obj.mfaInitSkipLifetime = Duration.toJSON(message.mfaInitSkipLifetime);
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      obj.secondFactorCheckLifetime = Duration.toJSON(message.secondFactorCheckLifetime);
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      obj.multiFactorCheckLifetime = Duration.toJSON(message.multiFactorCheckLifetime);
    }
    if (message.allowDomainDiscovery !== false) {
      obj.allowDomainDiscovery = message.allowDomainDiscovery;
    }
    if (message.disableLoginWithEmail !== false) {
      obj.disableLoginWithEmail = message.disableLoginWithEmail;
    }
    if (message.disableLoginWithPhone !== false) {
      obj.disableLoginWithPhone = message.disableLoginWithPhone;
    }
    if (message.forceMfaLocalOnly !== false) {
      obj.forceMfaLocalOnly = message.forceMfaLocalOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLoginPolicyRequest>): UpdateLoginPolicyRequest {
    return UpdateLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLoginPolicyRequest>): UpdateLoginPolicyRequest {
    const message = createBaseUpdateLoginPolicyRequest();
    message.allowUsernamePassword = object.allowUsernamePassword ?? false;
    message.allowRegister = object.allowRegister ?? false;
    message.allowExternalIdp = object.allowExternalIdp ?? false;
    message.forceMfa = object.forceMfa ?? false;
    message.passwordlessType = object.passwordlessType ?? 0;
    message.hidePasswordReset = object.hidePasswordReset ?? false;
    message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
    message.defaultRedirectUri = object.defaultRedirectUri ?? "";
    message.passwordCheckLifetime =
      (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
        ? Duration.fromPartial(object.passwordCheckLifetime)
        : undefined;
    message.externalLoginCheckLifetime =
      (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
        ? Duration.fromPartial(object.externalLoginCheckLifetime)
        : undefined;
    message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
      ? Duration.fromPartial(object.mfaInitSkipLifetime)
      : undefined;
    message.secondFactorCheckLifetime =
      (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.secondFactorCheckLifetime)
        : undefined;
    message.multiFactorCheckLifetime =
      (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.multiFactorCheckLifetime)
        : undefined;
    message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
    message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
    message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
    message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
    return message;
  },
};

function createBaseUpdateLoginPolicyResponse(): UpdateLoginPolicyResponse {
  return { details: undefined };
}

export const UpdateLoginPolicyResponse: MessageFns<UpdateLoginPolicyResponse> = {
  encode(message: UpdateLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLoginPolicyResponse>): UpdateLoginPolicyResponse {
    return UpdateLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLoginPolicyResponse>): UpdateLoginPolicyResponse {
    const message = createBaseUpdateLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsRequest(): ListLoginPolicyIDPsRequest {
  return { query: undefined };
}

export const ListLoginPolicyIDPsRequest: MessageFns<ListLoginPolicyIDPsRequest> = {
  encode(message: ListLoginPolicyIDPsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLoginPolicyIDPsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyIDPsRequest {
    return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
  },

  toJSON(message: ListLoginPolicyIDPsRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<ListLoginPolicyIDPsRequest>): ListLoginPolicyIDPsRequest {
    return ListLoginPolicyIDPsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicyIDPsRequest>): ListLoginPolicyIDPsRequest {
    const message = createBaseListLoginPolicyIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsResponse(): ListLoginPolicyIDPsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyIDPsResponse: MessageFns<ListLoginPolicyIDPsResponse> = {
  encode(message: ListLoginPolicyIDPsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      IDPLoginPolicyLink.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLoginPolicyIDPsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(IDPLoginPolicyLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyIDPsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result)
        ? object.result.map((e: any) => IDPLoginPolicyLink.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListLoginPolicyIDPsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => IDPLoginPolicyLink.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLoginPolicyIDPsResponse>): ListLoginPolicyIDPsResponse {
    return ListLoginPolicyIDPsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicyIDPsResponse>): ListLoginPolicyIDPsResponse {
    const message = createBaseListLoginPolicyIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => IDPLoginPolicyLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddIDPToLoginPolicyRequest(): AddIDPToLoginPolicyRequest {
  return { idpId: "" };
}

export const AddIDPToLoginPolicyRequest: MessageFns<AddIDPToLoginPolicyRequest> = {
  encode(message: AddIDPToLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddIDPToLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIDPToLoginPolicyRequest {
    return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
  },

  toJSON(message: AddIDPToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<AddIDPToLoginPolicyRequest>): AddIDPToLoginPolicyRequest {
    return AddIDPToLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddIDPToLoginPolicyRequest>): AddIDPToLoginPolicyRequest {
    const message = createBaseAddIDPToLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseAddIDPToLoginPolicyResponse(): AddIDPToLoginPolicyResponse {
  return { details: undefined };
}

export const AddIDPToLoginPolicyResponse: MessageFns<AddIDPToLoginPolicyResponse> = {
  encode(message: AddIDPToLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddIDPToLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIDPToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddIDPToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddIDPToLoginPolicyResponse>): AddIDPToLoginPolicyResponse {
    return AddIDPToLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddIDPToLoginPolicyResponse>): AddIDPToLoginPolicyResponse {
    const message = createBaseAddIDPToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyRequest(): RemoveIDPFromLoginPolicyRequest {
  return { idpId: "" };
}

export const RemoveIDPFromLoginPolicyRequest: MessageFns<RemoveIDPFromLoginPolicyRequest> = {
  encode(message: RemoveIDPFromLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPFromLoginPolicyRequest {
    return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
  },

  toJSON(message: RemoveIDPFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIDPFromLoginPolicyRequest>): RemoveIDPFromLoginPolicyRequest {
    return RemoveIDPFromLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIDPFromLoginPolicyRequest>): RemoveIDPFromLoginPolicyRequest {
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyResponse(): RemoveIDPFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveIDPFromLoginPolicyResponse: MessageFns<RemoveIDPFromLoginPolicyResponse> = {
  encode(message: RemoveIDPFromLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIDPFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIDPFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIDPFromLoginPolicyResponse>): RemoveIDPFromLoginPolicyResponse {
    return RemoveIDPFromLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIDPFromLoginPolicyResponse>): RemoveIDPFromLoginPolicyResponse {
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsRequest(): ListLoginPolicySecondFactorsRequest {
  return {};
}

export const ListLoginPolicySecondFactorsRequest: MessageFns<ListLoginPolicySecondFactorsRequest> = {
  encode(_: ListLoginPolicySecondFactorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLoginPolicySecondFactorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLoginPolicySecondFactorsRequest {
    return {};
  },

  toJSON(_: ListLoginPolicySecondFactorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListLoginPolicySecondFactorsRequest>): ListLoginPolicySecondFactorsRequest {
    return ListLoginPolicySecondFactorsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListLoginPolicySecondFactorsRequest>): ListLoginPolicySecondFactorsRequest {
    const message = createBaseListLoginPolicySecondFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsResponse(): ListLoginPolicySecondFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicySecondFactorsResponse: MessageFns<ListLoginPolicySecondFactorsResponse> = {
  encode(message: ListLoginPolicySecondFactorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLoginPolicySecondFactorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicySecondFactorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result)
        ? object.result.map((e: any) => secondFactorTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListLoginPolicySecondFactorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => secondFactorTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLoginPolicySecondFactorsResponse>): ListLoginPolicySecondFactorsResponse {
    return ListLoginPolicySecondFactorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicySecondFactorsResponse>): ListLoginPolicySecondFactorsResponse {
    const message = createBaseListLoginPolicySecondFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyRequest(): AddSecondFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddSecondFactorToLoginPolicyRequest: MessageFns<AddSecondFactorToLoginPolicyRequest> = {
  encode(message: AddSecondFactorToLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecondFactorToLoginPolicyRequest {
    return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: AddSecondFactorToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = secondFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<AddSecondFactorToLoginPolicyRequest>): AddSecondFactorToLoginPolicyRequest {
    return AddSecondFactorToLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSecondFactorToLoginPolicyRequest>): AddSecondFactorToLoginPolicyRequest {
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyResponse(): AddSecondFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddSecondFactorToLoginPolicyResponse: MessageFns<AddSecondFactorToLoginPolicyResponse> = {
  encode(message: AddSecondFactorToLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSecondFactorToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddSecondFactorToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddSecondFactorToLoginPolicyResponse>): AddSecondFactorToLoginPolicyResponse {
    return AddSecondFactorToLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSecondFactorToLoginPolicyResponse>): AddSecondFactorToLoginPolicyResponse {
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyRequest(): RemoveSecondFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveSecondFactorFromLoginPolicyRequest: MessageFns<RemoveSecondFactorFromLoginPolicyRequest> = {
  encode(message: RemoveSecondFactorFromLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSecondFactorFromLoginPolicyRequest {
    return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RemoveSecondFactorFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = secondFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>): RemoveSecondFactorFromLoginPolicyRequest {
    return RemoveSecondFactorFromLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>): RemoveSecondFactorFromLoginPolicyRequest {
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyResponse(): RemoveSecondFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveSecondFactorFromLoginPolicyResponse: MessageFns<RemoveSecondFactorFromLoginPolicyResponse> = {
  encode(message: RemoveSecondFactorFromLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveSecondFactorFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveSecondFactorFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>): RemoveSecondFactorFromLoginPolicyResponse {
    return RemoveSecondFactorFromLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>,
  ): RemoveSecondFactorFromLoginPolicyResponse {
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsRequest(): ListLoginPolicyMultiFactorsRequest {
  return {};
}

export const ListLoginPolicyMultiFactorsRequest: MessageFns<ListLoginPolicyMultiFactorsRequest> = {
  encode(_: ListLoginPolicyMultiFactorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLoginPolicyMultiFactorsRequest {
    return {};
  },

  toJSON(_: ListLoginPolicyMultiFactorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListLoginPolicyMultiFactorsRequest>): ListLoginPolicyMultiFactorsRequest {
    return ListLoginPolicyMultiFactorsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListLoginPolicyMultiFactorsRequest>): ListLoginPolicyMultiFactorsRequest {
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsResponse(): ListLoginPolicyMultiFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyMultiFactorsResponse: MessageFns<ListLoginPolicyMultiFactorsResponse> = {
  encode(message: ListLoginPolicyMultiFactorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLoginPolicyMultiFactorsResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => multiFactorTypeFromJSON(e)) : [],
    };
  },

  toJSON(message: ListLoginPolicyMultiFactorsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => multiFactorTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListLoginPolicyMultiFactorsResponse>): ListLoginPolicyMultiFactorsResponse {
    return ListLoginPolicyMultiFactorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicyMultiFactorsResponse>): ListLoginPolicyMultiFactorsResponse {
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyRequest(): AddMultiFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddMultiFactorToLoginPolicyRequest: MessageFns<AddMultiFactorToLoginPolicyRequest> = {
  encode(message: AddMultiFactorToLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMultiFactorToLoginPolicyRequest {
    return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: AddMultiFactorToLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = multiFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<AddMultiFactorToLoginPolicyRequest>): AddMultiFactorToLoginPolicyRequest {
    return AddMultiFactorToLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMultiFactorToLoginPolicyRequest>): AddMultiFactorToLoginPolicyRequest {
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyResponse(): AddMultiFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddMultiFactorToLoginPolicyResponse: MessageFns<AddMultiFactorToLoginPolicyResponse> = {
  encode(message: AddMultiFactorToLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMultiFactorToLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddMultiFactorToLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddMultiFactorToLoginPolicyResponse>): AddMultiFactorToLoginPolicyResponse {
    return AddMultiFactorToLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMultiFactorToLoginPolicyResponse>): AddMultiFactorToLoginPolicyResponse {
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyRequest(): RemoveMultiFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveMultiFactorFromLoginPolicyRequest: MessageFns<RemoveMultiFactorFromLoginPolicyRequest> = {
  encode(message: RemoveMultiFactorFromLoginPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMultiFactorFromLoginPolicyRequest {
    return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
  },

  toJSON(message: RemoveMultiFactorFromLoginPolicyRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = multiFactorTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>): RemoveMultiFactorFromLoginPolicyRequest {
    return RemoveMultiFactorFromLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>): RemoveMultiFactorFromLoginPolicyRequest {
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyResponse(): RemoveMultiFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveMultiFactorFromLoginPolicyResponse: MessageFns<RemoveMultiFactorFromLoginPolicyResponse> = {
  encode(message: RemoveMultiFactorFromLoginPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveMultiFactorFromLoginPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveMultiFactorFromLoginPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>): RemoveMultiFactorFromLoginPolicyResponse {
    return RemoveMultiFactorFromLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>): RemoveMultiFactorFromLoginPolicyResponse {
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyRequest(): GetPasswordComplexityPolicyRequest {
  return {};
}

export const GetPasswordComplexityPolicyRequest: MessageFns<GetPasswordComplexityPolicyRequest> = {
  encode(_: GetPasswordComplexityPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPasswordComplexityPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPasswordComplexityPolicyRequest {
    return {};
  },

  toJSON(_: GetPasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetPasswordComplexityPolicyRequest>): GetPasswordComplexityPolicyRequest {
    return GetPasswordComplexityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPasswordComplexityPolicyRequest>): GetPasswordComplexityPolicyRequest {
    const message = createBaseGetPasswordComplexityPolicyRequest();
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyResponse(): GetPasswordComplexityPolicyResponse {
  return { policy: undefined };
}

export const GetPasswordComplexityPolicyResponse: MessageFns<GetPasswordComplexityPolicyResponse> = {
  encode(message: GetPasswordComplexityPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPasswordComplexityPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPasswordComplexityPolicyResponse {
    return { policy: isSet(object.policy) ? PasswordComplexityPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordComplexityPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPasswordComplexityPolicyResponse>): GetPasswordComplexityPolicyResponse {
    return GetPasswordComplexityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPasswordComplexityPolicyResponse>): GetPasswordComplexityPolicyResponse {
    const message = createBaseGetPasswordComplexityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordComplexityPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePasswordComplexityPolicyRequest(): UpdatePasswordComplexityPolicyRequest {
  return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}

export const UpdatePasswordComplexityPolicyRequest: MessageFns<UpdatePasswordComplexityPolicyRequest> = {
  encode(message: UpdatePasswordComplexityPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minLength !== 0) {
      writer.uint32(8).uint32(message.minLength);
    }
    if (message.hasUppercase !== false) {
      writer.uint32(16).bool(message.hasUppercase);
    }
    if (message.hasLowercase !== false) {
      writer.uint32(24).bool(message.hasLowercase);
    }
    if (message.hasNumber !== false) {
      writer.uint32(32).bool(message.hasNumber);
    }
    if (message.hasSymbol !== false) {
      writer.uint32(40).bool(message.hasSymbol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePasswordComplexityPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasSymbol = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordComplexityPolicyRequest {
    return {
      minLength: isSet(object.minLength) ? globalThis.Number(object.minLength) : 0,
      hasUppercase: isSet(object.hasUppercase) ? globalThis.Boolean(object.hasUppercase) : false,
      hasLowercase: isSet(object.hasLowercase) ? globalThis.Boolean(object.hasLowercase) : false,
      hasNumber: isSet(object.hasNumber) ? globalThis.Boolean(object.hasNumber) : false,
      hasSymbol: isSet(object.hasSymbol) ? globalThis.Boolean(object.hasSymbol) : false,
    };
  },

  toJSON(message: UpdatePasswordComplexityPolicyRequest): unknown {
    const obj: any = {};
    if (message.minLength !== 0) {
      obj.minLength = Math.round(message.minLength);
    }
    if (message.hasUppercase !== false) {
      obj.hasUppercase = message.hasUppercase;
    }
    if (message.hasLowercase !== false) {
      obj.hasLowercase = message.hasLowercase;
    }
    if (message.hasNumber !== false) {
      obj.hasNumber = message.hasNumber;
    }
    if (message.hasSymbol !== false) {
      obj.hasSymbol = message.hasSymbol;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePasswordComplexityPolicyRequest>): UpdatePasswordComplexityPolicyRequest {
    return UpdatePasswordComplexityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePasswordComplexityPolicyRequest>): UpdatePasswordComplexityPolicyRequest {
    const message = createBaseUpdatePasswordComplexityPolicyRequest();
    message.minLength = object.minLength ?? 0;
    message.hasUppercase = object.hasUppercase ?? false;
    message.hasLowercase = object.hasLowercase ?? false;
    message.hasNumber = object.hasNumber ?? false;
    message.hasSymbol = object.hasSymbol ?? false;
    return message;
  },
};

function createBaseUpdatePasswordComplexityPolicyResponse(): UpdatePasswordComplexityPolicyResponse {
  return { details: undefined };
}

export const UpdatePasswordComplexityPolicyResponse: MessageFns<UpdatePasswordComplexityPolicyResponse> = {
  encode(message: UpdatePasswordComplexityPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePasswordComplexityPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordComplexityPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdatePasswordComplexityPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePasswordComplexityPolicyResponse>): UpdatePasswordComplexityPolicyResponse {
    return UpdatePasswordComplexityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePasswordComplexityPolicyResponse>): UpdatePasswordComplexityPolicyResponse {
    const message = createBaseUpdatePasswordComplexityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordAgePolicyRequest(): GetPasswordAgePolicyRequest {
  return {};
}

export const GetPasswordAgePolicyRequest: MessageFns<GetPasswordAgePolicyRequest> = {
  encode(_: GetPasswordAgePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPasswordAgePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPasswordAgePolicyRequest {
    return {};
  },

  toJSON(_: GetPasswordAgePolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetPasswordAgePolicyRequest>): GetPasswordAgePolicyRequest {
    return GetPasswordAgePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPasswordAgePolicyRequest>): GetPasswordAgePolicyRequest {
    const message = createBaseGetPasswordAgePolicyRequest();
    return message;
  },
};

function createBaseGetPasswordAgePolicyResponse(): GetPasswordAgePolicyResponse {
  return { policy: undefined };
}

export const GetPasswordAgePolicyResponse: MessageFns<GetPasswordAgePolicyResponse> = {
  encode(message: GetPasswordAgePolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPasswordAgePolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPasswordAgePolicyResponse {
    return { policy: isSet(object.policy) ? PasswordAgePolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PasswordAgePolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPasswordAgePolicyResponse>): GetPasswordAgePolicyResponse {
    return GetPasswordAgePolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPasswordAgePolicyResponse>): GetPasswordAgePolicyResponse {
    const message = createBaseGetPasswordAgePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordAgePolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePasswordAgePolicyRequest(): UpdatePasswordAgePolicyRequest {
  return { maxAgeDays: 0, expireWarnDays: 0 };
}

export const UpdatePasswordAgePolicyRequest: MessageFns<UpdatePasswordAgePolicyRequest> = {
  encode(message: UpdatePasswordAgePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxAgeDays !== 0) {
      writer.uint32(8).uint32(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      writer.uint32(16).uint32(message.expireWarnDays);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePasswordAgePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordAgePolicyRequest {
    return {
      maxAgeDays: isSet(object.maxAgeDays) ? globalThis.Number(object.maxAgeDays) : 0,
      expireWarnDays: isSet(object.expireWarnDays) ? globalThis.Number(object.expireWarnDays) : 0,
    };
  },

  toJSON(message: UpdatePasswordAgePolicyRequest): unknown {
    const obj: any = {};
    if (message.maxAgeDays !== 0) {
      obj.maxAgeDays = Math.round(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      obj.expireWarnDays = Math.round(message.expireWarnDays);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePasswordAgePolicyRequest>): UpdatePasswordAgePolicyRequest {
    return UpdatePasswordAgePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePasswordAgePolicyRequest>): UpdatePasswordAgePolicyRequest {
    const message = createBaseUpdatePasswordAgePolicyRequest();
    message.maxAgeDays = object.maxAgeDays ?? 0;
    message.expireWarnDays = object.expireWarnDays ?? 0;
    return message;
  },
};

function createBaseUpdatePasswordAgePolicyResponse(): UpdatePasswordAgePolicyResponse {
  return { details: undefined };
}

export const UpdatePasswordAgePolicyResponse: MessageFns<UpdatePasswordAgePolicyResponse> = {
  encode(message: UpdatePasswordAgePolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePasswordAgePolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePasswordAgePolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdatePasswordAgePolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePasswordAgePolicyResponse>): UpdatePasswordAgePolicyResponse {
    return UpdatePasswordAgePolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePasswordAgePolicyResponse>): UpdatePasswordAgePolicyResponse {
    const message = createBaseUpdatePasswordAgePolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLockoutPolicyRequest(): GetLockoutPolicyRequest {
  return {};
}

export const GetLockoutPolicyRequest: MessageFns<GetLockoutPolicyRequest> = {
  encode(_: GetLockoutPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLockoutPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetLockoutPolicyRequest {
    return {};
  },

  toJSON(_: GetLockoutPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetLockoutPolicyRequest>): GetLockoutPolicyRequest {
    return GetLockoutPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLockoutPolicyRequest>): GetLockoutPolicyRequest {
    const message = createBaseGetLockoutPolicyRequest();
    return message;
  },
};

function createBaseGetLockoutPolicyResponse(): GetLockoutPolicyResponse {
  return { policy: undefined };
}

export const GetLockoutPolicyResponse: MessageFns<GetLockoutPolicyResponse> = {
  encode(message: GetLockoutPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLockoutPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LockoutPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLockoutPolicyResponse {
    return { policy: isSet(object.policy) ? LockoutPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = LockoutPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLockoutPolicyResponse>): GetLockoutPolicyResponse {
    return GetLockoutPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLockoutPolicyResponse>): GetLockoutPolicyResponse {
    const message = createBaseGetLockoutPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LockoutPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateLockoutPolicyRequest(): UpdateLockoutPolicyRequest {
  return { maxPasswordAttempts: 0, maxOtpAttempts: 0 };
}

export const UpdateLockoutPolicyRequest: MessageFns<UpdateLockoutPolicyRequest> = {
  encode(message: UpdateLockoutPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxPasswordAttempts !== 0) {
      writer.uint32(8).uint32(message.maxPasswordAttempts);
    }
    if (message.maxOtpAttempts !== 0) {
      writer.uint32(16).uint32(message.maxOtpAttempts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLockoutPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxPasswordAttempts = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxOtpAttempts = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLockoutPolicyRequest {
    return {
      maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? globalThis.Number(object.maxPasswordAttempts) : 0,
      maxOtpAttempts: isSet(object.maxOtpAttempts) ? globalThis.Number(object.maxOtpAttempts) : 0,
    };
  },

  toJSON(message: UpdateLockoutPolicyRequest): unknown {
    const obj: any = {};
    if (message.maxPasswordAttempts !== 0) {
      obj.maxPasswordAttempts = Math.round(message.maxPasswordAttempts);
    }
    if (message.maxOtpAttempts !== 0) {
      obj.maxOtpAttempts = Math.round(message.maxOtpAttempts);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLockoutPolicyRequest>): UpdateLockoutPolicyRequest {
    return UpdateLockoutPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLockoutPolicyRequest>): UpdateLockoutPolicyRequest {
    const message = createBaseUpdateLockoutPolicyRequest();
    message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
    message.maxOtpAttempts = object.maxOtpAttempts ?? 0;
    return message;
  },
};

function createBaseUpdateLockoutPolicyResponse(): UpdateLockoutPolicyResponse {
  return { details: undefined };
}

export const UpdateLockoutPolicyResponse: MessageFns<UpdateLockoutPolicyResponse> = {
  encode(message: UpdateLockoutPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLockoutPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLockoutPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateLockoutPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLockoutPolicyResponse>): UpdateLockoutPolicyResponse {
    return UpdateLockoutPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLockoutPolicyResponse>): UpdateLockoutPolicyResponse {
    const message = createBaseUpdateLockoutPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPrivacyPolicyRequest(): GetPrivacyPolicyRequest {
  return {};
}

export const GetPrivacyPolicyRequest: MessageFns<GetPrivacyPolicyRequest> = {
  encode(_: GetPrivacyPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPrivacyPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPrivacyPolicyRequest {
    return {};
  },

  toJSON(_: GetPrivacyPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetPrivacyPolicyRequest>): GetPrivacyPolicyRequest {
    return GetPrivacyPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPrivacyPolicyRequest>): GetPrivacyPolicyRequest {
    const message = createBaseGetPrivacyPolicyRequest();
    return message;
  },
};

function createBaseGetPrivacyPolicyResponse(): GetPrivacyPolicyResponse {
  return { policy: undefined };
}

export const GetPrivacyPolicyResponse: MessageFns<GetPrivacyPolicyResponse> = {
  encode(message: GetPrivacyPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPrivacyPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PrivacyPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPrivacyPolicyResponse {
    return { policy: isSet(object.policy) ? PrivacyPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = PrivacyPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPrivacyPolicyResponse>): GetPrivacyPolicyResponse {
    return GetPrivacyPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPrivacyPolicyResponse>): GetPrivacyPolicyResponse {
    const message = createBaseGetPrivacyPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PrivacyPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdatePrivacyPolicyRequest(): UpdatePrivacyPolicyRequest {
  return {
    tosLink: "",
    privacyLink: "",
    helpLink: "",
    supportEmail: "",
    docsLink: "",
    customLink: "",
    customLinkText: "",
  };
}

export const UpdatePrivacyPolicyRequest: MessageFns<UpdatePrivacyPolicyRequest> = {
  encode(message: UpdatePrivacyPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tosLink !== "") {
      writer.uint32(10).string(message.tosLink);
    }
    if (message.privacyLink !== "") {
      writer.uint32(18).string(message.privacyLink);
    }
    if (message.helpLink !== "") {
      writer.uint32(26).string(message.helpLink);
    }
    if (message.supportEmail !== "") {
      writer.uint32(34).string(message.supportEmail);
    }
    if (message.docsLink !== "") {
      writer.uint32(42).string(message.docsLink);
    }
    if (message.customLink !== "") {
      writer.uint32(50).string(message.customLink);
    }
    if (message.customLinkText !== "") {
      writer.uint32(58).string(message.customLinkText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePrivacyPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tosLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privacyLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.docsLink = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.customLink = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.customLinkText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivacyPolicyRequest {
    return {
      tosLink: isSet(object.tosLink) ? globalThis.String(object.tosLink) : "",
      privacyLink: isSet(object.privacyLink) ? globalThis.String(object.privacyLink) : "",
      helpLink: isSet(object.helpLink) ? globalThis.String(object.helpLink) : "",
      supportEmail: isSet(object.supportEmail) ? globalThis.String(object.supportEmail) : "",
      docsLink: isSet(object.docsLink) ? globalThis.String(object.docsLink) : "",
      customLink: isSet(object.customLink) ? globalThis.String(object.customLink) : "",
      customLinkText: isSet(object.customLinkText) ? globalThis.String(object.customLinkText) : "",
    };
  },

  toJSON(message: UpdatePrivacyPolicyRequest): unknown {
    const obj: any = {};
    if (message.tosLink !== "") {
      obj.tosLink = message.tosLink;
    }
    if (message.privacyLink !== "") {
      obj.privacyLink = message.privacyLink;
    }
    if (message.helpLink !== "") {
      obj.helpLink = message.helpLink;
    }
    if (message.supportEmail !== "") {
      obj.supportEmail = message.supportEmail;
    }
    if (message.docsLink !== "") {
      obj.docsLink = message.docsLink;
    }
    if (message.customLink !== "") {
      obj.customLink = message.customLink;
    }
    if (message.customLinkText !== "") {
      obj.customLinkText = message.customLinkText;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePrivacyPolicyRequest>): UpdatePrivacyPolicyRequest {
    return UpdatePrivacyPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePrivacyPolicyRequest>): UpdatePrivacyPolicyRequest {
    const message = createBaseUpdatePrivacyPolicyRequest();
    message.tosLink = object.tosLink ?? "";
    message.privacyLink = object.privacyLink ?? "";
    message.helpLink = object.helpLink ?? "";
    message.supportEmail = object.supportEmail ?? "";
    message.docsLink = object.docsLink ?? "";
    message.customLink = object.customLink ?? "";
    message.customLinkText = object.customLinkText ?? "";
    return message;
  },
};

function createBaseUpdatePrivacyPolicyResponse(): UpdatePrivacyPolicyResponse {
  return { details: undefined };
}

export const UpdatePrivacyPolicyResponse: MessageFns<UpdatePrivacyPolicyResponse> = {
  encode(message: UpdatePrivacyPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePrivacyPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivacyPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdatePrivacyPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePrivacyPolicyResponse>): UpdatePrivacyPolicyResponse {
    return UpdatePrivacyPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePrivacyPolicyResponse>): UpdatePrivacyPolicyResponse {
    const message = createBaseUpdatePrivacyPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddNotificationPolicyRequest(): AddNotificationPolicyRequest {
  return { passwordChange: false };
}

export const AddNotificationPolicyRequest: MessageFns<AddNotificationPolicyRequest> = {
  encode(message: AddNotificationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.passwordChange !== false) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddNotificationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddNotificationPolicyRequest {
    return { passwordChange: isSet(object.passwordChange) ? globalThis.Boolean(object.passwordChange) : false };
  },

  toJSON(message: AddNotificationPolicyRequest): unknown {
    const obj: any = {};
    if (message.passwordChange !== false) {
      obj.passwordChange = message.passwordChange;
    }
    return obj;
  },

  create(base?: DeepPartial<AddNotificationPolicyRequest>): AddNotificationPolicyRequest {
    return AddNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddNotificationPolicyRequest>): AddNotificationPolicyRequest {
    const message = createBaseAddNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseAddNotificationPolicyResponse(): AddNotificationPolicyResponse {
  return { details: undefined };
}

export const AddNotificationPolicyResponse: MessageFns<AddNotificationPolicyResponse> = {
  encode(message: AddNotificationPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddNotificationPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddNotificationPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddNotificationPolicyResponse>): AddNotificationPolicyResponse {
    return AddNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddNotificationPolicyResponse>): AddNotificationPolicyResponse {
    const message = createBaseAddNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetNotificationPolicyRequest(): GetNotificationPolicyRequest {
  return {};
}

export const GetNotificationPolicyRequest: MessageFns<GetNotificationPolicyRequest> = {
  encode(_: GetNotificationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetNotificationPolicyRequest {
    return {};
  },

  toJSON(_: GetNotificationPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetNotificationPolicyRequest>): GetNotificationPolicyRequest {
    return GetNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetNotificationPolicyRequest>): GetNotificationPolicyRequest {
    const message = createBaseGetNotificationPolicyRequest();
    return message;
  },
};

function createBaseGetNotificationPolicyResponse(): GetNotificationPolicyResponse {
  return { policy: undefined };
}

export const GetNotificationPolicyResponse: MessageFns<GetNotificationPolicyResponse> = {
  encode(message: GetNotificationPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = NotificationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationPolicyResponse {
    return { policy: isSet(object.policy) ? NotificationPolicy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = NotificationPolicy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotificationPolicyResponse>): GetNotificationPolicyResponse {
    return GetNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotificationPolicyResponse>): GetNotificationPolicyResponse {
    const message = createBaseGetNotificationPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? NotificationPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseUpdateNotificationPolicyRequest(): UpdateNotificationPolicyRequest {
  return { passwordChange: false };
}

export const UpdateNotificationPolicyRequest: MessageFns<UpdateNotificationPolicyRequest> = {
  encode(message: UpdateNotificationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.passwordChange !== false) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNotificationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotificationPolicyRequest {
    return { passwordChange: isSet(object.passwordChange) ? globalThis.Boolean(object.passwordChange) : false };
  },

  toJSON(message: UpdateNotificationPolicyRequest): unknown {
    const obj: any = {};
    if (message.passwordChange !== false) {
      obj.passwordChange = message.passwordChange;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNotificationPolicyRequest>): UpdateNotificationPolicyRequest {
    return UpdateNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNotificationPolicyRequest>): UpdateNotificationPolicyRequest {
    const message = createBaseUpdateNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseUpdateNotificationPolicyResponse(): UpdateNotificationPolicyResponse {
  return { details: undefined };
}

export const UpdateNotificationPolicyResponse: MessageFns<UpdateNotificationPolicyResponse> = {
  encode(message: UpdateNotificationPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNotificationPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotificationPolicyResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateNotificationPolicyResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNotificationPolicyResponse>): UpdateNotificationPolicyResponse {
    return UpdateNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNotificationPolicyResponse>): UpdateNotificationPolicyResponse {
    const message = createBaseUpdateNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultInitMessageTextRequest(): GetDefaultInitMessageTextRequest {
  return { language: "" };
}

export const GetDefaultInitMessageTextRequest: MessageFns<GetDefaultInitMessageTextRequest> = {
  encode(message: GetDefaultInitMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultInitMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInitMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultInitMessageTextRequest>): GetDefaultInitMessageTextRequest {
    return GetDefaultInitMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultInitMessageTextRequest>): GetDefaultInitMessageTextRequest {
    const message = createBaseGetDefaultInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultInitMessageTextResponse(): GetDefaultInitMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultInitMessageTextResponse: MessageFns<GetDefaultInitMessageTextResponse> = {
  encode(message: GetDefaultInitMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultInitMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInitMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultInitMessageTextResponse>): GetDefaultInitMessageTextResponse {
    return GetDefaultInitMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultInitMessageTextResponse>): GetDefaultInitMessageTextResponse {
    const message = createBaseGetDefaultInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomInitMessageTextRequest(): GetCustomInitMessageTextRequest {
  return { language: "" };
}

export const GetCustomInitMessageTextRequest: MessageFns<GetCustomInitMessageTextRequest> = {
  encode(message: GetCustomInitMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomInitMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInitMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomInitMessageTextRequest>): GetCustomInitMessageTextRequest {
    return GetCustomInitMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomInitMessageTextRequest>): GetCustomInitMessageTextRequest {
    const message = createBaseGetCustomInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomInitMessageTextResponse(): GetCustomInitMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomInitMessageTextResponse: MessageFns<GetCustomInitMessageTextResponse> = {
  encode(message: GetCustomInitMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomInitMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInitMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomInitMessageTextResponse>): GetCustomInitMessageTextResponse {
    return GetCustomInitMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomInitMessageTextResponse>): GetCustomInitMessageTextResponse {
    const message = createBaseGetCustomInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultInitMessageTextRequest(): SetDefaultInitMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultInitMessageTextRequest: MessageFns<SetDefaultInitMessageTextRequest> = {
  encode(message: SetDefaultInitMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultInitMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultInitMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultInitMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultInitMessageTextRequest>): SetDefaultInitMessageTextRequest {
    return SetDefaultInitMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultInitMessageTextRequest>): SetDefaultInitMessageTextRequest {
    const message = createBaseSetDefaultInitMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultInitMessageTextResponse(): SetDefaultInitMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultInitMessageTextResponse: MessageFns<SetDefaultInitMessageTextResponse> = {
  encode(message: SetDefaultInitMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultInitMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultInitMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultInitMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultInitMessageTextResponse>): SetDefaultInitMessageTextResponse {
    return SetDefaultInitMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultInitMessageTextResponse>): SetDefaultInitMessageTextResponse {
    const message = createBaseSetDefaultInitMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultRequest(): ResetCustomInitMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomInitMessageTextToDefaultRequest: MessageFns<ResetCustomInitMessageTextToDefaultRequest> = {
  encode(message: ResetCustomInitMessageTextToDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInitMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomInitMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>): ResetCustomInitMessageTextToDefaultRequest {
    return ResetCustomInitMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
  ): ResetCustomInitMessageTextToDefaultRequest {
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultResponse(): ResetCustomInitMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomInitMessageTextToDefaultResponse: MessageFns<ResetCustomInitMessageTextToDefaultResponse> = {
  encode(
    message: ResetCustomInitMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInitMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomInitMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomInitMessageTextToDefaultResponse>): ResetCustomInitMessageTextToDefaultResponse {
    return ResetCustomInitMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomInitMessageTextToDefaultResponse>,
  ): ResetCustomInitMessageTextToDefaultResponse {
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextRequest(): GetDefaultPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordResetMessageTextRequest: MessageFns<GetDefaultPasswordResetMessageTextRequest> = {
  encode(message: GetDefaultPasswordResetMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordResetMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultPasswordResetMessageTextRequest>): GetDefaultPasswordResetMessageTextRequest {
    return GetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
  ): GetDefaultPasswordResetMessageTextRequest {
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextResponse(): GetDefaultPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordResetMessageTextResponse: MessageFns<GetDefaultPasswordResetMessageTextResponse> = {
  encode(message: GetDefaultPasswordResetMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordResetMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultPasswordResetMessageTextResponse>): GetDefaultPasswordResetMessageTextResponse {
    return GetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordResetMessageTextResponse>,
  ): GetDefaultPasswordResetMessageTextResponse {
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextRequest(): GetCustomPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordResetMessageTextRequest: MessageFns<GetCustomPasswordResetMessageTextRequest> = {
  encode(message: GetCustomPasswordResetMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordResetMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomPasswordResetMessageTextRequest>): GetCustomPasswordResetMessageTextRequest {
    return GetCustomPasswordResetMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomPasswordResetMessageTextRequest>): GetCustomPasswordResetMessageTextRequest {
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextResponse(): GetCustomPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordResetMessageTextResponse: MessageFns<GetCustomPasswordResetMessageTextResponse> = {
  encode(message: GetCustomPasswordResetMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordResetMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomPasswordResetMessageTextResponse>): GetCustomPasswordResetMessageTextResponse {
    return GetCustomPasswordResetMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordResetMessageTextResponse>,
  ): GetCustomPasswordResetMessageTextResponse {
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultPasswordResetMessageTextRequest(): SetDefaultPasswordResetMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultPasswordResetMessageTextRequest: MessageFns<SetDefaultPasswordResetMessageTextRequest> = {
  encode(message: SetDefaultPasswordResetMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPasswordResetMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordResetMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultPasswordResetMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultPasswordResetMessageTextRequest>): SetDefaultPasswordResetMessageTextRequest {
    return SetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultPasswordResetMessageTextRequest>,
  ): SetDefaultPasswordResetMessageTextRequest {
    const message = createBaseSetDefaultPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultPasswordResetMessageTextResponse(): SetDefaultPasswordResetMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultPasswordResetMessageTextResponse: MessageFns<SetDefaultPasswordResetMessageTextResponse> = {
  encode(message: SetDefaultPasswordResetMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPasswordResetMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordResetMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultPasswordResetMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultPasswordResetMessageTextResponse>): SetDefaultPasswordResetMessageTextResponse {
    return SetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultPasswordResetMessageTextResponse>,
  ): SetDefaultPasswordResetMessageTextResponse {
    const message = createBaseSetDefaultPasswordResetMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultRequest(): ResetCustomPasswordResetMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordResetMessageTextToDefaultRequest: MessageFns<
  ResetCustomPasswordResetMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordResetMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultResponse(): ResetCustomPasswordResetMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordResetMessageTextToDefaultResponse: MessageFns<
  ResetCustomPasswordResetMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordResetMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return ResetCustomPasswordResetMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextRequest(): GetDefaultVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyEmailMessageTextRequest: MessageFns<GetDefaultVerifyEmailMessageTextRequest> = {
  encode(message: GetDefaultVerifyEmailMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>): GetDefaultVerifyEmailMessageTextRequest {
    return GetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>): GetDefaultVerifyEmailMessageTextRequest {
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextResponse(): GetDefaultVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyEmailMessageTextResponse: MessageFns<GetDefaultVerifyEmailMessageTextResponse> = {
  encode(message: GetDefaultVerifyEmailMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailMessageTextResponse>): GetDefaultVerifyEmailMessageTextResponse {
    return GetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyEmailMessageTextResponse>): GetDefaultVerifyEmailMessageTextResponse {
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextRequest(): GetCustomVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyEmailMessageTextRequest: MessageFns<GetCustomVerifyEmailMessageTextRequest> = {
  encode(message: GetCustomVerifyEmailMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailMessageTextRequest>): GetCustomVerifyEmailMessageTextRequest {
    return GetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyEmailMessageTextRequest>): GetCustomVerifyEmailMessageTextRequest {
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextResponse(): GetCustomVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyEmailMessageTextResponse: MessageFns<GetCustomVerifyEmailMessageTextResponse> = {
  encode(message: GetCustomVerifyEmailMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailMessageTextResponse>): GetCustomVerifyEmailMessageTextResponse {
    return GetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyEmailMessageTextResponse>): GetCustomVerifyEmailMessageTextResponse {
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultVerifyEmailMessageTextRequest(): SetDefaultVerifyEmailMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultVerifyEmailMessageTextRequest: MessageFns<SetDefaultVerifyEmailMessageTextRequest> = {
  encode(message: SetDefaultVerifyEmailMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifyEmailMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyEmailMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultVerifyEmailMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifyEmailMessageTextRequest>): SetDefaultVerifyEmailMessageTextRequest {
    return SetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultVerifyEmailMessageTextRequest>): SetDefaultVerifyEmailMessageTextRequest {
    const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultVerifyEmailMessageTextResponse(): SetDefaultVerifyEmailMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultVerifyEmailMessageTextResponse: MessageFns<SetDefaultVerifyEmailMessageTextResponse> = {
  encode(message: SetDefaultVerifyEmailMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifyEmailMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyEmailMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultVerifyEmailMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifyEmailMessageTextResponse>): SetDefaultVerifyEmailMessageTextResponse {
    return SetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultVerifyEmailMessageTextResponse>): SetDefaultVerifyEmailMessageTextResponse {
    const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultRequest(): ResetCustomVerifyEmailMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyEmailMessageTextToDefaultRequest: MessageFns<
  ResetCustomVerifyEmailMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyEmailMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultResponse(): ResetCustomVerifyEmailMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyEmailMessageTextToDefaultResponse: MessageFns<
  ResetCustomVerifyEmailMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyEmailMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return ResetCustomVerifyEmailMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextRequest(): GetDefaultVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyPhoneMessageTextRequest: MessageFns<GetDefaultVerifyPhoneMessageTextRequest> = {
  encode(message: GetDefaultVerifyPhoneMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyPhoneMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>): GetDefaultVerifyPhoneMessageTextRequest {
    return GetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>): GetDefaultVerifyPhoneMessageTextRequest {
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextResponse(): GetDefaultVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyPhoneMessageTextResponse: MessageFns<GetDefaultVerifyPhoneMessageTextResponse> = {
  encode(message: GetDefaultVerifyPhoneMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyPhoneMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>): GetDefaultVerifyPhoneMessageTextResponse {
    return GetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>): GetDefaultVerifyPhoneMessageTextResponse {
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextRequest(): GetCustomVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyPhoneMessageTextRequest: MessageFns<GetCustomVerifyPhoneMessageTextRequest> = {
  encode(message: GetCustomVerifyPhoneMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyPhoneMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>): GetCustomVerifyPhoneMessageTextRequest {
    return GetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>): GetCustomVerifyPhoneMessageTextRequest {
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextResponse(): GetCustomVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyPhoneMessageTextResponse: MessageFns<GetCustomVerifyPhoneMessageTextResponse> = {
  encode(message: GetCustomVerifyPhoneMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyPhoneMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifyPhoneMessageTextResponse>): GetCustomVerifyPhoneMessageTextResponse {
    return GetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyPhoneMessageTextResponse>): GetCustomVerifyPhoneMessageTextResponse {
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultVerifyPhoneMessageTextRequest(): SetDefaultVerifyPhoneMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultVerifyPhoneMessageTextRequest: MessageFns<SetDefaultVerifyPhoneMessageTextRequest> = {
  encode(message: SetDefaultVerifyPhoneMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifyPhoneMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyPhoneMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultVerifyPhoneMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>): SetDefaultVerifyPhoneMessageTextRequest {
    return SetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>): SetDefaultVerifyPhoneMessageTextRequest {
    const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultVerifyPhoneMessageTextResponse(): SetDefaultVerifyPhoneMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultVerifyPhoneMessageTextResponse: MessageFns<SetDefaultVerifyPhoneMessageTextResponse> = {
  encode(message: SetDefaultVerifyPhoneMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifyPhoneMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyPhoneMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultVerifyPhoneMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifyPhoneMessageTextResponse>): SetDefaultVerifyPhoneMessageTextResponse {
    return SetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultVerifyPhoneMessageTextResponse>): SetDefaultVerifyPhoneMessageTextResponse {
    const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest(): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultRequest: MessageFns<
  ResetCustomVerifyPhoneMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyPhoneMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse(): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultResponse: MessageFns<
  ResetCustomVerifyPhoneMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyPhoneMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return ResetCustomVerifyPhoneMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifySMSOTPMessageTextRequest(): GetCustomVerifySMSOTPMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifySMSOTPMessageTextRequest: MessageFns<GetCustomVerifySMSOTPMessageTextRequest> = {
  encode(message: GetCustomVerifySMSOTPMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifySMSOTPMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifySMSOTPMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifySMSOTPMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifySMSOTPMessageTextRequest>): GetCustomVerifySMSOTPMessageTextRequest {
    return GetCustomVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifySMSOTPMessageTextRequest>): GetCustomVerifySMSOTPMessageTextRequest {
    const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifySMSOTPMessageTextResponse(): GetCustomVerifySMSOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifySMSOTPMessageTextResponse: MessageFns<GetCustomVerifySMSOTPMessageTextResponse> = {
  encode(message: GetCustomVerifySMSOTPMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifySMSOTPMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifySMSOTPMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifySMSOTPMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifySMSOTPMessageTextResponse>): GetCustomVerifySMSOTPMessageTextResponse {
    return GetCustomVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifySMSOTPMessageTextResponse>): GetCustomVerifySMSOTPMessageTextResponse {
    const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifySMSOTPMessageTextRequest(): GetDefaultVerifySMSOTPMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifySMSOTPMessageTextRequest: MessageFns<GetDefaultVerifySMSOTPMessageTextRequest> = {
  encode(message: GetDefaultVerifySMSOTPMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifySMSOTPMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifySMSOTPMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifySMSOTPMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifySMSOTPMessageTextRequest>): GetDefaultVerifySMSOTPMessageTextRequest {
    return GetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifySMSOTPMessageTextRequest>): GetDefaultVerifySMSOTPMessageTextRequest {
    const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifySMSOTPMessageTextResponse(): GetDefaultVerifySMSOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifySMSOTPMessageTextResponse: MessageFns<GetDefaultVerifySMSOTPMessageTextResponse> = {
  encode(message: GetDefaultVerifySMSOTPMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifySMSOTPMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifySMSOTPMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifySMSOTPMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifySMSOTPMessageTextResponse>): GetDefaultVerifySMSOTPMessageTextResponse {
    return GetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultVerifySMSOTPMessageTextResponse>,
  ): GetDefaultVerifySMSOTPMessageTextResponse {
    const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultVerifySMSOTPMessageTextRequest(): SetDefaultVerifySMSOTPMessageTextRequest {
  return { language: "", text: "" };
}

export const SetDefaultVerifySMSOTPMessageTextRequest: MessageFns<SetDefaultVerifySMSOTPMessageTextRequest> = {
  encode(message: SetDefaultVerifySMSOTPMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifySMSOTPMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifySMSOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifySMSOTPMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: SetDefaultVerifySMSOTPMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifySMSOTPMessageTextRequest>): SetDefaultVerifySMSOTPMessageTextRequest {
    return SetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultVerifySMSOTPMessageTextRequest>): SetDefaultVerifySMSOTPMessageTextRequest {
    const message = createBaseSetDefaultVerifySMSOTPMessageTextRequest();
    message.language = object.language ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseSetDefaultVerifySMSOTPMessageTextResponse(): SetDefaultVerifySMSOTPMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultVerifySMSOTPMessageTextResponse: MessageFns<SetDefaultVerifySMSOTPMessageTextResponse> = {
  encode(message: SetDefaultVerifySMSOTPMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifySMSOTPMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifySMSOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifySMSOTPMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultVerifySMSOTPMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifySMSOTPMessageTextResponse>): SetDefaultVerifySMSOTPMessageTextResponse {
    return SetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultVerifySMSOTPMessageTextResponse>,
  ): SetDefaultVerifySMSOTPMessageTextResponse {
    const message = createBaseSetDefaultVerifySMSOTPMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest(): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifySMSOTPMessageTextToDefaultRequest: MessageFns<
  ResetCustomVerifySMSOTPMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifySMSOTPMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    return ResetCustomVerifySMSOTPMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse(): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifySMSOTPMessageTextToDefaultResponse: MessageFns<
  ResetCustomVerifySMSOTPMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomVerifySMSOTPMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifySMSOTPMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    return ResetCustomVerifySMSOTPMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyEmailOTPMessageTextRequest(): GetCustomVerifyEmailOTPMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyEmailOTPMessageTextRequest: MessageFns<GetCustomVerifyEmailOTPMessageTextRequest> = {
  encode(message: GetCustomVerifyEmailOTPMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifyEmailOTPMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailOTPMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomVerifyEmailOTPMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailOTPMessageTextRequest>): GetCustomVerifyEmailOTPMessageTextRequest {
    return GetCustomVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomVerifyEmailOTPMessageTextRequest>,
  ): GetCustomVerifyEmailOTPMessageTextRequest {
    const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyEmailOTPMessageTextResponse(): GetCustomVerifyEmailOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyEmailOTPMessageTextResponse: MessageFns<GetCustomVerifyEmailOTPMessageTextResponse> = {
  encode(message: GetCustomVerifyEmailOTPMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomVerifyEmailOTPMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomVerifyEmailOTPMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomVerifyEmailOTPMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailOTPMessageTextResponse>): GetCustomVerifyEmailOTPMessageTextResponse {
    return GetCustomVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomVerifyEmailOTPMessageTextResponse>,
  ): GetCustomVerifyEmailOTPMessageTextResponse {
    const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyEmailOTPMessageTextRequest(): GetDefaultVerifyEmailOTPMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyEmailOTPMessageTextRequest: MessageFns<GetDefaultVerifyEmailOTPMessageTextRequest> = {
  encode(message: GetDefaultVerifyEmailOTPMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifyEmailOTPMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailOTPMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultVerifyEmailOTPMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailOTPMessageTextRequest>): GetDefaultVerifyEmailOTPMessageTextRequest {
    return GetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultVerifyEmailOTPMessageTextRequest>,
  ): GetDefaultVerifyEmailOTPMessageTextRequest {
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyEmailOTPMessageTextResponse(): GetDefaultVerifyEmailOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyEmailOTPMessageTextResponse: MessageFns<GetDefaultVerifyEmailOTPMessageTextResponse> = {
  encode(
    message: GetDefaultVerifyEmailOTPMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultVerifyEmailOTPMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultVerifyEmailOTPMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultVerifyEmailOTPMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailOTPMessageTextResponse>): GetDefaultVerifyEmailOTPMessageTextResponse {
    return GetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultVerifyEmailOTPMessageTextResponse>,
  ): GetDefaultVerifyEmailOTPMessageTextResponse {
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultVerifyEmailOTPMessageTextRequest(): SetDefaultVerifyEmailOTPMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultVerifyEmailOTPMessageTextRequest: MessageFns<SetDefaultVerifyEmailOTPMessageTextRequest> = {
  encode(message: SetDefaultVerifyEmailOTPMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifyEmailOTPMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyEmailOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyEmailOTPMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultVerifyEmailOTPMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifyEmailOTPMessageTextRequest>): SetDefaultVerifyEmailOTPMessageTextRequest {
    return SetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultVerifyEmailOTPMessageTextRequest>,
  ): SetDefaultVerifyEmailOTPMessageTextRequest {
    const message = createBaseSetDefaultVerifyEmailOTPMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultVerifyEmailOTPMessageTextResponse(): SetDefaultVerifyEmailOTPMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultVerifyEmailOTPMessageTextResponse: MessageFns<SetDefaultVerifyEmailOTPMessageTextResponse> = {
  encode(
    message: SetDefaultVerifyEmailOTPMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultVerifyEmailOTPMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultVerifyEmailOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultVerifyEmailOTPMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultVerifyEmailOTPMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultVerifyEmailOTPMessageTextResponse>): SetDefaultVerifyEmailOTPMessageTextResponse {
    return SetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultVerifyEmailOTPMessageTextResponse>,
  ): SetDefaultVerifyEmailOTPMessageTextResponse {
    const message = createBaseSetDefaultVerifyEmailOTPMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest(): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyEmailOTPMessageTextToDefaultRequest: MessageFns<
  ResetCustomVerifyEmailOTPMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    return ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse(): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyEmailOTPMessageTextToDefaultResponse: MessageFns<
  ResetCustomVerifyEmailOTPMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomVerifyEmailOTPMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomVerifyEmailOTPMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    return ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextRequest(): GetDefaultDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetDefaultDomainClaimedMessageTextRequest: MessageFns<GetDefaultDomainClaimedMessageTextRequest> = {
  encode(message: GetDefaultDomainClaimedMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultDomainClaimedMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>): GetDefaultDomainClaimedMessageTextRequest {
    return GetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
  ): GetDefaultDomainClaimedMessageTextRequest {
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextResponse(): GetDefaultDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultDomainClaimedMessageTextResponse: MessageFns<GetDefaultDomainClaimedMessageTextResponse> = {
  encode(message: GetDefaultDomainClaimedMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultDomainClaimedMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultDomainClaimedMessageTextResponse>): GetDefaultDomainClaimedMessageTextResponse {
    return GetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultDomainClaimedMessageTextResponse>,
  ): GetDefaultDomainClaimedMessageTextResponse {
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextRequest(): GetCustomDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetCustomDomainClaimedMessageTextRequest: MessageFns<GetCustomDomainClaimedMessageTextRequest> = {
  encode(message: GetCustomDomainClaimedMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainClaimedMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomDomainClaimedMessageTextRequest>): GetCustomDomainClaimedMessageTextRequest {
    return GetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomDomainClaimedMessageTextRequest>): GetCustomDomainClaimedMessageTextRequest {
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextResponse(): GetCustomDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomDomainClaimedMessageTextResponse: MessageFns<GetCustomDomainClaimedMessageTextResponse> = {
  encode(message: GetCustomDomainClaimedMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDomainClaimedMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomDomainClaimedMessageTextResponse>): GetCustomDomainClaimedMessageTextResponse {
    return GetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomDomainClaimedMessageTextResponse>,
  ): GetCustomDomainClaimedMessageTextResponse {
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultDomainClaimedMessageTextRequest(): SetDefaultDomainClaimedMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultDomainClaimedMessageTextRequest: MessageFns<SetDefaultDomainClaimedMessageTextRequest> = {
  encode(message: SetDefaultDomainClaimedMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultDomainClaimedMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultDomainClaimedMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultDomainClaimedMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultDomainClaimedMessageTextRequest>): SetDefaultDomainClaimedMessageTextRequest {
    return SetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultDomainClaimedMessageTextRequest>,
  ): SetDefaultDomainClaimedMessageTextRequest {
    const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultDomainClaimedMessageTextResponse(): SetDefaultDomainClaimedMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultDomainClaimedMessageTextResponse: MessageFns<SetDefaultDomainClaimedMessageTextResponse> = {
  encode(message: SetDefaultDomainClaimedMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultDomainClaimedMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultDomainClaimedMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultDomainClaimedMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultDomainClaimedMessageTextResponse>): SetDefaultDomainClaimedMessageTextResponse {
    return SetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultDomainClaimedMessageTextResponse>,
  ): SetDefaultDomainClaimedMessageTextResponse {
    const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultRequest(): ResetCustomDomainClaimedMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomDomainClaimedMessageTextToDefaultRequest: MessageFns<
  ResetCustomDomainClaimedMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomDomainClaimedMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultResponse(): ResetCustomDomainClaimedMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomDomainClaimedMessageTextToDefaultResponse: MessageFns<
  ResetCustomDomainClaimedMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomDomainClaimedMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return ResetCustomDomainClaimedMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextRequest(): GetDefaultPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordChangeMessageTextRequest: MessageFns<GetDefaultPasswordChangeMessageTextRequest> = {
  encode(message: GetDefaultPasswordChangeMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordChangeMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>): GetDefaultPasswordChangeMessageTextRequest {
    return GetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
  ): GetDefaultPasswordChangeMessageTextRequest {
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextResponse(): GetDefaultPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordChangeMessageTextResponse: MessageFns<GetDefaultPasswordChangeMessageTextResponse> = {
  encode(
    message: GetDefaultPasswordChangeMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordChangeMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultPasswordChangeMessageTextResponse>): GetDefaultPasswordChangeMessageTextResponse {
    return GetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordChangeMessageTextResponse>,
  ): GetDefaultPasswordChangeMessageTextResponse {
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextRequest(): GetCustomPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordChangeMessageTextRequest: MessageFns<GetCustomPasswordChangeMessageTextRequest> = {
  encode(message: GetCustomPasswordChangeMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordChangeMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomPasswordChangeMessageTextRequest>): GetCustomPasswordChangeMessageTextRequest {
    return GetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
  ): GetCustomPasswordChangeMessageTextRequest {
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextResponse(): GetCustomPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordChangeMessageTextResponse: MessageFns<GetCustomPasswordChangeMessageTextResponse> = {
  encode(message: GetCustomPasswordChangeMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordChangeMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomPasswordChangeMessageTextResponse>): GetCustomPasswordChangeMessageTextResponse {
    return GetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordChangeMessageTextResponse>,
  ): GetCustomPasswordChangeMessageTextResponse {
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultPasswordChangeMessageTextRequest(): SetDefaultPasswordChangeMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultPasswordChangeMessageTextRequest: MessageFns<SetDefaultPasswordChangeMessageTextRequest> = {
  encode(message: SetDefaultPasswordChangeMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPasswordChangeMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordChangeMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultPasswordChangeMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultPasswordChangeMessageTextRequest>): SetDefaultPasswordChangeMessageTextRequest {
    return SetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultPasswordChangeMessageTextRequest>,
  ): SetDefaultPasswordChangeMessageTextRequest {
    const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultPasswordChangeMessageTextResponse(): SetDefaultPasswordChangeMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultPasswordChangeMessageTextResponse: MessageFns<SetDefaultPasswordChangeMessageTextResponse> = {
  encode(
    message: SetDefaultPasswordChangeMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPasswordChangeMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordChangeMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultPasswordChangeMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultPasswordChangeMessageTextResponse>): SetDefaultPasswordChangeMessageTextResponse {
    return SetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultPasswordChangeMessageTextResponse>,
  ): SetDefaultPasswordChangeMessageTextResponse {
    const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultRequest(): ResetCustomPasswordChangeMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordChangeMessageTextToDefaultRequest: MessageFns<
  ResetCustomPasswordChangeMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordChangeMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultResponse(): ResetCustomPasswordChangeMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordChangeMessageTextToDefaultResponse: MessageFns<
  ResetCustomPasswordChangeMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordChangeMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return ResetCustomPasswordChangeMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultInviteUserMessageTextRequest(): GetDefaultInviteUserMessageTextRequest {
  return { language: "" };
}

export const GetDefaultInviteUserMessageTextRequest: MessageFns<GetDefaultInviteUserMessageTextRequest> = {
  encode(message: GetDefaultInviteUserMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultInviteUserMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInviteUserMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInviteUserMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultInviteUserMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultInviteUserMessageTextRequest>): GetDefaultInviteUserMessageTextRequest {
    return GetDefaultInviteUserMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultInviteUserMessageTextRequest>): GetDefaultInviteUserMessageTextRequest {
    const message = createBaseGetDefaultInviteUserMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultInviteUserMessageTextResponse(): GetDefaultInviteUserMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultInviteUserMessageTextResponse: MessageFns<GetDefaultInviteUserMessageTextResponse> = {
  encode(message: GetDefaultInviteUserMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultInviteUserMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInviteUserMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultInviteUserMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultInviteUserMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultInviteUserMessageTextResponse>): GetDefaultInviteUserMessageTextResponse {
    return GetDefaultInviteUserMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultInviteUserMessageTextResponse>): GetDefaultInviteUserMessageTextResponse {
    const message = createBaseGetDefaultInviteUserMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomInviteUserMessageTextRequest(): GetCustomInviteUserMessageTextRequest {
  return { language: "" };
}

export const GetCustomInviteUserMessageTextRequest: MessageFns<GetCustomInviteUserMessageTextRequest> = {
  encode(message: GetCustomInviteUserMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomInviteUserMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInviteUserMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInviteUserMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomInviteUserMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomInviteUserMessageTextRequest>): GetCustomInviteUserMessageTextRequest {
    return GetCustomInviteUserMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomInviteUserMessageTextRequest>): GetCustomInviteUserMessageTextRequest {
    const message = createBaseGetCustomInviteUserMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomInviteUserMessageTextResponse(): GetCustomInviteUserMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomInviteUserMessageTextResponse: MessageFns<GetCustomInviteUserMessageTextResponse> = {
  encode(message: GetCustomInviteUserMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomInviteUserMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInviteUserMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomInviteUserMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomInviteUserMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomInviteUserMessageTextResponse>): GetCustomInviteUserMessageTextResponse {
    return GetCustomInviteUserMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomInviteUserMessageTextResponse>): GetCustomInviteUserMessageTextResponse {
    const message = createBaseGetCustomInviteUserMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultInviteUserMessageTextRequest(): SetDefaultInviteUserMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultInviteUserMessageTextRequest: MessageFns<SetDefaultInviteUserMessageTextRequest> = {
  encode(message: SetDefaultInviteUserMessageTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultInviteUserMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultInviteUserMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultInviteUserMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultInviteUserMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultInviteUserMessageTextRequest>): SetDefaultInviteUserMessageTextRequest {
    return SetDefaultInviteUserMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultInviteUserMessageTextRequest>): SetDefaultInviteUserMessageTextRequest {
    const message = createBaseSetDefaultInviteUserMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultInviteUserMessageTextResponse(): SetDefaultInviteUserMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultInviteUserMessageTextResponse: MessageFns<SetDefaultInviteUserMessageTextResponse> = {
  encode(message: SetDefaultInviteUserMessageTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultInviteUserMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultInviteUserMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultInviteUserMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultInviteUserMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultInviteUserMessageTextResponse>): SetDefaultInviteUserMessageTextResponse {
    return SetDefaultInviteUserMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultInviteUserMessageTextResponse>): SetDefaultInviteUserMessageTextResponse {
    const message = createBaseSetDefaultInviteUserMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomInviteUserMessageTextToDefaultRequest(): ResetCustomInviteUserMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomInviteUserMessageTextToDefaultRequest: MessageFns<
  ResetCustomInviteUserMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomInviteUserMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomInviteUserMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInviteUserMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInviteUserMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomInviteUserMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomInviteUserMessageTextToDefaultRequest>,
  ): ResetCustomInviteUserMessageTextToDefaultRequest {
    return ResetCustomInviteUserMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomInviteUserMessageTextToDefaultRequest>,
  ): ResetCustomInviteUserMessageTextToDefaultRequest {
    const message = createBaseResetCustomInviteUserMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomInviteUserMessageTextToDefaultResponse(): ResetCustomInviteUserMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomInviteUserMessageTextToDefaultResponse: MessageFns<
  ResetCustomInviteUserMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomInviteUserMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomInviteUserMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInviteUserMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomInviteUserMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomInviteUserMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomInviteUserMessageTextToDefaultResponse>,
  ): ResetCustomInviteUserMessageTextToDefaultResponse {
    return ResetCustomInviteUserMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomInviteUserMessageTextToDefaultResponse>,
  ): ResetCustomInviteUserMessageTextToDefaultResponse {
    const message = createBaseResetCustomInviteUserMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextRequest(): GetDefaultPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordlessRegistrationMessageTextRequest: MessageFns<
  GetDefaultPasswordlessRegistrationMessageTextRequest
> = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextResponse(): GetDefaultPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordlessRegistrationMessageTextResponse: MessageFns<
  GetDefaultPasswordlessRegistrationMessageTextResponse
> = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return GetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextRequest(): GetCustomPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordlessRegistrationMessageTextRequest: MessageFns<
  GetCustomPasswordlessRegistrationMessageTextRequest
> = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordlessRegistrationMessageTextRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    return GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextResponse(): GetCustomPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordlessRegistrationMessageTextResponse: MessageFns<
  GetCustomPasswordlessRegistrationMessageTextResponse
> = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomPasswordlessRegistrationMessageTextResponse {
    return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = MessageCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    return GetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultPasswordlessRegistrationMessageTextRequest(): SetDefaultPasswordlessRegistrationMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetDefaultPasswordlessRegistrationMessageTextRequest: MessageFns<
  SetDefaultPasswordlessRegistrationMessageTextRequest
> = {
  encode(
    message: SetDefaultPasswordlessRegistrationMessageTextRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordlessRegistrationMessageTextRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
    };
  },

  toJSON(message: SetDefaultPasswordlessRegistrationMessageTextRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.preHeader !== "") {
      obj.preHeader = message.preHeader;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.greeting !== "") {
      obj.greeting = message.greeting;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.buttonText !== "") {
      obj.buttonText = message.buttonText;
    }
    if (message.footerText !== "") {
      obj.footerText = message.footerText;
    }
    return obj;
  },

  create(
    base?: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>,
  ): SetDefaultPasswordlessRegistrationMessageTextRequest {
    return SetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>,
  ): SetDefaultPasswordlessRegistrationMessageTextRequest {
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetDefaultPasswordlessRegistrationMessageTextResponse(): SetDefaultPasswordlessRegistrationMessageTextResponse {
  return { details: undefined };
}

export const SetDefaultPasswordlessRegistrationMessageTextResponse: MessageFns<
  SetDefaultPasswordlessRegistrationMessageTextResponse
> = {
  encode(
    message: SetDefaultPasswordlessRegistrationMessageTextResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultPasswordlessRegistrationMessageTextResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetDefaultPasswordlessRegistrationMessageTextResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextResponse>,
  ): SetDefaultPasswordlessRegistrationMessageTextResponse {
    return SetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextResponse>,
  ): SetDefaultPasswordlessRegistrationMessageTextResponse {
    const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest(): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest: MessageFns<
  ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest
> = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse(): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse: MessageFns<
  ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse
> = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultLoginTextsRequest(): GetDefaultLoginTextsRequest {
  return { language: "" };
}

export const GetDefaultLoginTextsRequest: MessageFns<GetDefaultLoginTextsRequest> = {
  encode(message: GetDefaultLoginTextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultLoginTextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginTextsRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetDefaultLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultLoginTextsRequest>): GetDefaultLoginTextsRequest {
    return GetDefaultLoginTextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLoginTextsRequest>): GetDefaultLoginTextsRequest {
    const message = createBaseGetDefaultLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultLoginTextsResponse(): GetDefaultLoginTextsResponse {
  return { customText: undefined };
}

export const GetDefaultLoginTextsResponse: MessageFns<GetDefaultLoginTextsResponse> = {
  encode(message: GetDefaultLoginTextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultLoginTextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultLoginTextsResponse {
    return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetDefaultLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = LoginCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultLoginTextsResponse>): GetDefaultLoginTextsResponse {
    return GetDefaultLoginTextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLoginTextsResponse>): GetDefaultLoginTextsResponse {
    const message = createBaseGetDefaultLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomLoginTextsRequest(): GetCustomLoginTextsRequest {
  return { language: "" };
}

export const GetCustomLoginTextsRequest: MessageFns<GetCustomLoginTextsRequest> = {
  encode(message: GetCustomLoginTextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomLoginTextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomLoginTextsRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: GetCustomLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomLoginTextsRequest>): GetCustomLoginTextsRequest {
    return GetCustomLoginTextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomLoginTextsRequest>): GetCustomLoginTextsRequest {
    const message = createBaseGetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomLoginTextsResponse(): GetCustomLoginTextsResponse {
  return { customText: undefined };
}

export const GetCustomLoginTextsResponse: MessageFns<GetCustomLoginTextsResponse> = {
  encode(message: GetCustomLoginTextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomLoginTextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomLoginTextsResponse {
    return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
  },

  toJSON(message: GetCustomLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.customText !== undefined) {
      obj.customText = LoginCustomText.toJSON(message.customText);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomLoginTextsResponse>): GetCustomLoginTextsResponse {
    return GetCustomLoginTextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomLoginTextsResponse>): GetCustomLoginTextsResponse {
    const message = createBaseGetCustomLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsRequest(): SetCustomLoginTextsRequest {
  return {
    language: "",
    selectAccountText: undefined,
    loginText: undefined,
    passwordText: undefined,
    usernameChangeText: undefined,
    usernameChangeDoneText: undefined,
    initPasswordText: undefined,
    initPasswordDoneText: undefined,
    emailVerificationText: undefined,
    emailVerificationDoneText: undefined,
    initializeUserText: undefined,
    initializeDoneText: undefined,
    initMfaPromptText: undefined,
    initMfaOtpText: undefined,
    initMfaU2fText: undefined,
    initMfaDoneText: undefined,
    mfaProvidersText: undefined,
    verifyMfaOtpText: undefined,
    verifyMfaU2fText: undefined,
    passwordlessText: undefined,
    passwordChangeText: undefined,
    passwordChangeDoneText: undefined,
    passwordResetDoneText: undefined,
    registrationOptionText: undefined,
    registrationUserText: undefined,
    registrationOrgText: undefined,
    linkingUserDoneText: undefined,
    externalUserNotFoundText: undefined,
    successLoginText: undefined,
    logoutText: undefined,
    footerText: undefined,
    passwordlessPromptText: undefined,
    passwordlessRegistrationText: undefined,
    passwordlessRegistrationDoneText: undefined,
    externalRegistrationUserOverviewText: undefined,
    linkingUserPromptText: undefined,
  };
}

export const SetCustomLoginTextsRequest: MessageFns<SetCustomLoginTextsRequest> = {
  encode(message: SetCustomLoginTextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.selectAccountText !== undefined) {
      SelectAccountScreenText.encode(message.selectAccountText, writer.uint32(18).fork()).join();
    }
    if (message.loginText !== undefined) {
      LoginScreenText.encode(message.loginText, writer.uint32(26).fork()).join();
    }
    if (message.passwordText !== undefined) {
      PasswordScreenText.encode(message.passwordText, writer.uint32(34).fork()).join();
    }
    if (message.usernameChangeText !== undefined) {
      UsernameChangeScreenText.encode(message.usernameChangeText, writer.uint32(42).fork()).join();
    }
    if (message.usernameChangeDoneText !== undefined) {
      UsernameChangeDoneScreenText.encode(message.usernameChangeDoneText, writer.uint32(50).fork()).join();
    }
    if (message.initPasswordText !== undefined) {
      InitPasswordScreenText.encode(message.initPasswordText, writer.uint32(58).fork()).join();
    }
    if (message.initPasswordDoneText !== undefined) {
      InitPasswordDoneScreenText.encode(message.initPasswordDoneText, writer.uint32(66).fork()).join();
    }
    if (message.emailVerificationText !== undefined) {
      EmailVerificationScreenText.encode(message.emailVerificationText, writer.uint32(74).fork()).join();
    }
    if (message.emailVerificationDoneText !== undefined) {
      EmailVerificationDoneScreenText.encode(message.emailVerificationDoneText, writer.uint32(82).fork()).join();
    }
    if (message.initializeUserText !== undefined) {
      InitializeUserScreenText.encode(message.initializeUserText, writer.uint32(90).fork()).join();
    }
    if (message.initializeDoneText !== undefined) {
      InitializeUserDoneScreenText.encode(message.initializeDoneText, writer.uint32(98).fork()).join();
    }
    if (message.initMfaPromptText !== undefined) {
      InitMFAPromptScreenText.encode(message.initMfaPromptText, writer.uint32(106).fork()).join();
    }
    if (message.initMfaOtpText !== undefined) {
      InitMFAOTPScreenText.encode(message.initMfaOtpText, writer.uint32(114).fork()).join();
    }
    if (message.initMfaU2fText !== undefined) {
      InitMFAU2FScreenText.encode(message.initMfaU2fText, writer.uint32(122).fork()).join();
    }
    if (message.initMfaDoneText !== undefined) {
      InitMFADoneScreenText.encode(message.initMfaDoneText, writer.uint32(130).fork()).join();
    }
    if (message.mfaProvidersText !== undefined) {
      MFAProvidersText.encode(message.mfaProvidersText, writer.uint32(138).fork()).join();
    }
    if (message.verifyMfaOtpText !== undefined) {
      VerifyMFAOTPScreenText.encode(message.verifyMfaOtpText, writer.uint32(146).fork()).join();
    }
    if (message.verifyMfaU2fText !== undefined) {
      VerifyMFAU2FScreenText.encode(message.verifyMfaU2fText, writer.uint32(154).fork()).join();
    }
    if (message.passwordlessText !== undefined) {
      PasswordlessScreenText.encode(message.passwordlessText, writer.uint32(162).fork()).join();
    }
    if (message.passwordChangeText !== undefined) {
      PasswordChangeScreenText.encode(message.passwordChangeText, writer.uint32(170).fork()).join();
    }
    if (message.passwordChangeDoneText !== undefined) {
      PasswordChangeDoneScreenText.encode(message.passwordChangeDoneText, writer.uint32(178).fork()).join();
    }
    if (message.passwordResetDoneText !== undefined) {
      PasswordResetDoneScreenText.encode(message.passwordResetDoneText, writer.uint32(186).fork()).join();
    }
    if (message.registrationOptionText !== undefined) {
      RegistrationOptionScreenText.encode(message.registrationOptionText, writer.uint32(194).fork()).join();
    }
    if (message.registrationUserText !== undefined) {
      RegistrationUserScreenText.encode(message.registrationUserText, writer.uint32(202).fork()).join();
    }
    if (message.registrationOrgText !== undefined) {
      RegistrationOrgScreenText.encode(message.registrationOrgText, writer.uint32(210).fork()).join();
    }
    if (message.linkingUserDoneText !== undefined) {
      LinkingUserDoneScreenText.encode(message.linkingUserDoneText, writer.uint32(218).fork()).join();
    }
    if (message.externalUserNotFoundText !== undefined) {
      ExternalUserNotFoundScreenText.encode(message.externalUserNotFoundText, writer.uint32(226).fork()).join();
    }
    if (message.successLoginText !== undefined) {
      SuccessLoginScreenText.encode(message.successLoginText, writer.uint32(234).fork()).join();
    }
    if (message.logoutText !== undefined) {
      LogoutDoneScreenText.encode(message.logoutText, writer.uint32(242).fork()).join();
    }
    if (message.footerText !== undefined) {
      FooterText.encode(message.footerText, writer.uint32(250).fork()).join();
    }
    if (message.passwordlessPromptText !== undefined) {
      PasswordlessPromptScreenText.encode(message.passwordlessPromptText, writer.uint32(258).fork()).join();
    }
    if (message.passwordlessRegistrationText !== undefined) {
      PasswordlessRegistrationScreenText.encode(message.passwordlessRegistrationText, writer.uint32(266).fork()).join();
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      PasswordlessRegistrationDoneScreenText.encode(message.passwordlessRegistrationDoneText, writer.uint32(274).fork())
        .join();
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      ExternalRegistrationUserOverviewScreenText.encode(
        message.externalRegistrationUserOverviewText,
        writer.uint32(282).fork(),
      ).join();
    }
    if (message.linkingUserPromptText !== undefined) {
      LinkingUserPromptScreenText.encode(message.linkingUserPromptText, writer.uint32(290).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetCustomLoginTextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.selectAccountText = SelectAccountScreenText.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.loginText = LoginScreenText.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.passwordText = PasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.usernameChangeText = UsernameChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.usernameChangeDoneText = UsernameChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.initPasswordText = InitPasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.initPasswordDoneText = InitPasswordDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.emailVerificationText = EmailVerificationScreenText.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.emailVerificationDoneText = EmailVerificationDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.initializeUserText = InitializeUserScreenText.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.initializeDoneText = InitializeUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.initMfaPromptText = InitMFAPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.initMfaOtpText = InitMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.initMfaU2fText = InitMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.initMfaDoneText = InitMFADoneScreenText.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.mfaProvidersText = MFAProvidersText.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.verifyMfaOtpText = VerifyMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.verifyMfaU2fText = VerifyMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.passwordlessText = PasswordlessScreenText.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.passwordChangeText = PasswordChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.passwordChangeDoneText = PasswordChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.passwordResetDoneText = PasswordResetDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.registrationOptionText = RegistrationOptionScreenText.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.registrationUserText = RegistrationUserScreenText.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.registrationOrgText = RegistrationOrgScreenText.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.linkingUserDoneText = LinkingUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.externalUserNotFoundText = ExternalUserNotFoundScreenText.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.successLoginText = SuccessLoginScreenText.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.logoutText = LogoutDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.footerText = FooterText.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.passwordlessPromptText = PasswordlessPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.passwordlessRegistrationText = PasswordlessRegistrationScreenText.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.linkingUserPromptText = LinkingUserPromptScreenText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomLoginTextsRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      selectAccountText: isSet(object.selectAccountText)
        ? SelectAccountScreenText.fromJSON(object.selectAccountText)
        : undefined,
      loginText: isSet(object.loginText) ? LoginScreenText.fromJSON(object.loginText) : undefined,
      passwordText: isSet(object.passwordText) ? PasswordScreenText.fromJSON(object.passwordText) : undefined,
      usernameChangeText: isSet(object.usernameChangeText)
        ? UsernameChangeScreenText.fromJSON(object.usernameChangeText)
        : undefined,
      usernameChangeDoneText: isSet(object.usernameChangeDoneText)
        ? UsernameChangeDoneScreenText.fromJSON(object.usernameChangeDoneText)
        : undefined,
      initPasswordText: isSet(object.initPasswordText)
        ? InitPasswordScreenText.fromJSON(object.initPasswordText)
        : undefined,
      initPasswordDoneText: isSet(object.initPasswordDoneText)
        ? InitPasswordDoneScreenText.fromJSON(object.initPasswordDoneText)
        : undefined,
      emailVerificationText: isSet(object.emailVerificationText)
        ? EmailVerificationScreenText.fromJSON(object.emailVerificationText)
        : undefined,
      emailVerificationDoneText: isSet(object.emailVerificationDoneText)
        ? EmailVerificationDoneScreenText.fromJSON(object.emailVerificationDoneText)
        : undefined,
      initializeUserText: isSet(object.initializeUserText)
        ? InitializeUserScreenText.fromJSON(object.initializeUserText)
        : undefined,
      initializeDoneText: isSet(object.initializeDoneText)
        ? InitializeUserDoneScreenText.fromJSON(object.initializeDoneText)
        : undefined,
      initMfaPromptText: isSet(object.initMfaPromptText)
        ? InitMFAPromptScreenText.fromJSON(object.initMfaPromptText)
        : undefined,
      initMfaOtpText: isSet(object.initMfaOtpText) ? InitMFAOTPScreenText.fromJSON(object.initMfaOtpText) : undefined,
      initMfaU2fText: isSet(object.initMfaU2fText) ? InitMFAU2FScreenText.fromJSON(object.initMfaU2fText) : undefined,
      initMfaDoneText: isSet(object.initMfaDoneText)
        ? InitMFADoneScreenText.fromJSON(object.initMfaDoneText)
        : undefined,
      mfaProvidersText: isSet(object.mfaProvidersText) ? MFAProvidersText.fromJSON(object.mfaProvidersText) : undefined,
      verifyMfaOtpText: isSet(object.verifyMfaOtpText)
        ? VerifyMFAOTPScreenText.fromJSON(object.verifyMfaOtpText)
        : undefined,
      verifyMfaU2fText: isSet(object.verifyMfaU2fText)
        ? VerifyMFAU2FScreenText.fromJSON(object.verifyMfaU2fText)
        : undefined,
      passwordlessText: isSet(object.passwordlessText)
        ? PasswordlessScreenText.fromJSON(object.passwordlessText)
        : undefined,
      passwordChangeText: isSet(object.passwordChangeText)
        ? PasswordChangeScreenText.fromJSON(object.passwordChangeText)
        : undefined,
      passwordChangeDoneText: isSet(object.passwordChangeDoneText)
        ? PasswordChangeDoneScreenText.fromJSON(object.passwordChangeDoneText)
        : undefined,
      passwordResetDoneText: isSet(object.passwordResetDoneText)
        ? PasswordResetDoneScreenText.fromJSON(object.passwordResetDoneText)
        : undefined,
      registrationOptionText: isSet(object.registrationOptionText)
        ? RegistrationOptionScreenText.fromJSON(object.registrationOptionText)
        : undefined,
      registrationUserText: isSet(object.registrationUserText)
        ? RegistrationUserScreenText.fromJSON(object.registrationUserText)
        : undefined,
      registrationOrgText: isSet(object.registrationOrgText)
        ? RegistrationOrgScreenText.fromJSON(object.registrationOrgText)
        : undefined,
      linkingUserDoneText: isSet(object.linkingUserDoneText)
        ? LinkingUserDoneScreenText.fromJSON(object.linkingUserDoneText)
        : undefined,
      externalUserNotFoundText: isSet(object.externalUserNotFoundText)
        ? ExternalUserNotFoundScreenText.fromJSON(object.externalUserNotFoundText)
        : undefined,
      successLoginText: isSet(object.successLoginText)
        ? SuccessLoginScreenText.fromJSON(object.successLoginText)
        : undefined,
      logoutText: isSet(object.logoutText) ? LogoutDoneScreenText.fromJSON(object.logoutText) : undefined,
      footerText: isSet(object.footerText) ? FooterText.fromJSON(object.footerText) : undefined,
      passwordlessPromptText: isSet(object.passwordlessPromptText)
        ? PasswordlessPromptScreenText.fromJSON(object.passwordlessPromptText)
        : undefined,
      passwordlessRegistrationText: isSet(object.passwordlessRegistrationText)
        ? PasswordlessRegistrationScreenText.fromJSON(object.passwordlessRegistrationText)
        : undefined,
      passwordlessRegistrationDoneText: isSet(object.passwordlessRegistrationDoneText)
        ? PasswordlessRegistrationDoneScreenText.fromJSON(object.passwordlessRegistrationDoneText)
        : undefined,
      externalRegistrationUserOverviewText: isSet(object.externalRegistrationUserOverviewText)
        ? ExternalRegistrationUserOverviewScreenText.fromJSON(object.externalRegistrationUserOverviewText)
        : undefined,
      linkingUserPromptText: isSet(object.linkingUserPromptText)
        ? LinkingUserPromptScreenText.fromJSON(object.linkingUserPromptText)
        : undefined,
    };
  },

  toJSON(message: SetCustomLoginTextsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.selectAccountText !== undefined) {
      obj.selectAccountText = SelectAccountScreenText.toJSON(message.selectAccountText);
    }
    if (message.loginText !== undefined) {
      obj.loginText = LoginScreenText.toJSON(message.loginText);
    }
    if (message.passwordText !== undefined) {
      obj.passwordText = PasswordScreenText.toJSON(message.passwordText);
    }
    if (message.usernameChangeText !== undefined) {
      obj.usernameChangeText = UsernameChangeScreenText.toJSON(message.usernameChangeText);
    }
    if (message.usernameChangeDoneText !== undefined) {
      obj.usernameChangeDoneText = UsernameChangeDoneScreenText.toJSON(message.usernameChangeDoneText);
    }
    if (message.initPasswordText !== undefined) {
      obj.initPasswordText = InitPasswordScreenText.toJSON(message.initPasswordText);
    }
    if (message.initPasswordDoneText !== undefined) {
      obj.initPasswordDoneText = InitPasswordDoneScreenText.toJSON(message.initPasswordDoneText);
    }
    if (message.emailVerificationText !== undefined) {
      obj.emailVerificationText = EmailVerificationScreenText.toJSON(message.emailVerificationText);
    }
    if (message.emailVerificationDoneText !== undefined) {
      obj.emailVerificationDoneText = EmailVerificationDoneScreenText.toJSON(message.emailVerificationDoneText);
    }
    if (message.initializeUserText !== undefined) {
      obj.initializeUserText = InitializeUserScreenText.toJSON(message.initializeUserText);
    }
    if (message.initializeDoneText !== undefined) {
      obj.initializeDoneText = InitializeUserDoneScreenText.toJSON(message.initializeDoneText);
    }
    if (message.initMfaPromptText !== undefined) {
      obj.initMfaPromptText = InitMFAPromptScreenText.toJSON(message.initMfaPromptText);
    }
    if (message.initMfaOtpText !== undefined) {
      obj.initMfaOtpText = InitMFAOTPScreenText.toJSON(message.initMfaOtpText);
    }
    if (message.initMfaU2fText !== undefined) {
      obj.initMfaU2fText = InitMFAU2FScreenText.toJSON(message.initMfaU2fText);
    }
    if (message.initMfaDoneText !== undefined) {
      obj.initMfaDoneText = InitMFADoneScreenText.toJSON(message.initMfaDoneText);
    }
    if (message.mfaProvidersText !== undefined) {
      obj.mfaProvidersText = MFAProvidersText.toJSON(message.mfaProvidersText);
    }
    if (message.verifyMfaOtpText !== undefined) {
      obj.verifyMfaOtpText = VerifyMFAOTPScreenText.toJSON(message.verifyMfaOtpText);
    }
    if (message.verifyMfaU2fText !== undefined) {
      obj.verifyMfaU2fText = VerifyMFAU2FScreenText.toJSON(message.verifyMfaU2fText);
    }
    if (message.passwordlessText !== undefined) {
      obj.passwordlessText = PasswordlessScreenText.toJSON(message.passwordlessText);
    }
    if (message.passwordChangeText !== undefined) {
      obj.passwordChangeText = PasswordChangeScreenText.toJSON(message.passwordChangeText);
    }
    if (message.passwordChangeDoneText !== undefined) {
      obj.passwordChangeDoneText = PasswordChangeDoneScreenText.toJSON(message.passwordChangeDoneText);
    }
    if (message.passwordResetDoneText !== undefined) {
      obj.passwordResetDoneText = PasswordResetDoneScreenText.toJSON(message.passwordResetDoneText);
    }
    if (message.registrationOptionText !== undefined) {
      obj.registrationOptionText = RegistrationOptionScreenText.toJSON(message.registrationOptionText);
    }
    if (message.registrationUserText !== undefined) {
      obj.registrationUserText = RegistrationUserScreenText.toJSON(message.registrationUserText);
    }
    if (message.registrationOrgText !== undefined) {
      obj.registrationOrgText = RegistrationOrgScreenText.toJSON(message.registrationOrgText);
    }
    if (message.linkingUserDoneText !== undefined) {
      obj.linkingUserDoneText = LinkingUserDoneScreenText.toJSON(message.linkingUserDoneText);
    }
    if (message.externalUserNotFoundText !== undefined) {
      obj.externalUserNotFoundText = ExternalUserNotFoundScreenText.toJSON(message.externalUserNotFoundText);
    }
    if (message.successLoginText !== undefined) {
      obj.successLoginText = SuccessLoginScreenText.toJSON(message.successLoginText);
    }
    if (message.logoutText !== undefined) {
      obj.logoutText = LogoutDoneScreenText.toJSON(message.logoutText);
    }
    if (message.footerText !== undefined) {
      obj.footerText = FooterText.toJSON(message.footerText);
    }
    if (message.passwordlessPromptText !== undefined) {
      obj.passwordlessPromptText = PasswordlessPromptScreenText.toJSON(message.passwordlessPromptText);
    }
    if (message.passwordlessRegistrationText !== undefined) {
      obj.passwordlessRegistrationText = PasswordlessRegistrationScreenText.toJSON(
        message.passwordlessRegistrationText,
      );
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      obj.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.toJSON(
        message.passwordlessRegistrationDoneText,
      );
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      obj.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.toJSON(
        message.externalRegistrationUserOverviewText,
      );
    }
    if (message.linkingUserPromptText !== undefined) {
      obj.linkingUserPromptText = LinkingUserPromptScreenText.toJSON(message.linkingUserPromptText);
    }
    return obj;
  },

  create(base?: DeepPartial<SetCustomLoginTextsRequest>): SetCustomLoginTextsRequest {
    return SetCustomLoginTextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomLoginTextsRequest>): SetCustomLoginTextsRequest {
    const message = createBaseSetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    message.selectAccountText = (object.selectAccountText !== undefined && object.selectAccountText !== null)
      ? SelectAccountScreenText.fromPartial(object.selectAccountText)
      : undefined;
    message.loginText = (object.loginText !== undefined && object.loginText !== null)
      ? LoginScreenText.fromPartial(object.loginText)
      : undefined;
    message.passwordText = (object.passwordText !== undefined && object.passwordText !== null)
      ? PasswordScreenText.fromPartial(object.passwordText)
      : undefined;
    message.usernameChangeText = (object.usernameChangeText !== undefined && object.usernameChangeText !== null)
      ? UsernameChangeScreenText.fromPartial(object.usernameChangeText)
      : undefined;
    message.usernameChangeDoneText =
      (object.usernameChangeDoneText !== undefined && object.usernameChangeDoneText !== null)
        ? UsernameChangeDoneScreenText.fromPartial(object.usernameChangeDoneText)
        : undefined;
    message.initPasswordText = (object.initPasswordText !== undefined && object.initPasswordText !== null)
      ? InitPasswordScreenText.fromPartial(object.initPasswordText)
      : undefined;
    message.initPasswordDoneText = (object.initPasswordDoneText !== undefined && object.initPasswordDoneText !== null)
      ? InitPasswordDoneScreenText.fromPartial(object.initPasswordDoneText)
      : undefined;
    message.emailVerificationText =
      (object.emailVerificationText !== undefined && object.emailVerificationText !== null)
        ? EmailVerificationScreenText.fromPartial(object.emailVerificationText)
        : undefined;
    message.emailVerificationDoneText =
      (object.emailVerificationDoneText !== undefined && object.emailVerificationDoneText !== null)
        ? EmailVerificationDoneScreenText.fromPartial(object.emailVerificationDoneText)
        : undefined;
    message.initializeUserText = (object.initializeUserText !== undefined && object.initializeUserText !== null)
      ? InitializeUserScreenText.fromPartial(object.initializeUserText)
      : undefined;
    message.initializeDoneText = (object.initializeDoneText !== undefined && object.initializeDoneText !== null)
      ? InitializeUserDoneScreenText.fromPartial(object.initializeDoneText)
      : undefined;
    message.initMfaPromptText = (object.initMfaPromptText !== undefined && object.initMfaPromptText !== null)
      ? InitMFAPromptScreenText.fromPartial(object.initMfaPromptText)
      : undefined;
    message.initMfaOtpText = (object.initMfaOtpText !== undefined && object.initMfaOtpText !== null)
      ? InitMFAOTPScreenText.fromPartial(object.initMfaOtpText)
      : undefined;
    message.initMfaU2fText = (object.initMfaU2fText !== undefined && object.initMfaU2fText !== null)
      ? InitMFAU2FScreenText.fromPartial(object.initMfaU2fText)
      : undefined;
    message.initMfaDoneText = (object.initMfaDoneText !== undefined && object.initMfaDoneText !== null)
      ? InitMFADoneScreenText.fromPartial(object.initMfaDoneText)
      : undefined;
    message.mfaProvidersText = (object.mfaProvidersText !== undefined && object.mfaProvidersText !== null)
      ? MFAProvidersText.fromPartial(object.mfaProvidersText)
      : undefined;
    message.verifyMfaOtpText = (object.verifyMfaOtpText !== undefined && object.verifyMfaOtpText !== null)
      ? VerifyMFAOTPScreenText.fromPartial(object.verifyMfaOtpText)
      : undefined;
    message.verifyMfaU2fText = (object.verifyMfaU2fText !== undefined && object.verifyMfaU2fText !== null)
      ? VerifyMFAU2FScreenText.fromPartial(object.verifyMfaU2fText)
      : undefined;
    message.passwordlessText = (object.passwordlessText !== undefined && object.passwordlessText !== null)
      ? PasswordlessScreenText.fromPartial(object.passwordlessText)
      : undefined;
    message.passwordChangeText = (object.passwordChangeText !== undefined && object.passwordChangeText !== null)
      ? PasswordChangeScreenText.fromPartial(object.passwordChangeText)
      : undefined;
    message.passwordChangeDoneText =
      (object.passwordChangeDoneText !== undefined && object.passwordChangeDoneText !== null)
        ? PasswordChangeDoneScreenText.fromPartial(object.passwordChangeDoneText)
        : undefined;
    message.passwordResetDoneText =
      (object.passwordResetDoneText !== undefined && object.passwordResetDoneText !== null)
        ? PasswordResetDoneScreenText.fromPartial(object.passwordResetDoneText)
        : undefined;
    message.registrationOptionText =
      (object.registrationOptionText !== undefined && object.registrationOptionText !== null)
        ? RegistrationOptionScreenText.fromPartial(object.registrationOptionText)
        : undefined;
    message.registrationUserText = (object.registrationUserText !== undefined && object.registrationUserText !== null)
      ? RegistrationUserScreenText.fromPartial(object.registrationUserText)
      : undefined;
    message.registrationOrgText = (object.registrationOrgText !== undefined && object.registrationOrgText !== null)
      ? RegistrationOrgScreenText.fromPartial(object.registrationOrgText)
      : undefined;
    message.linkingUserDoneText = (object.linkingUserDoneText !== undefined && object.linkingUserDoneText !== null)
      ? LinkingUserDoneScreenText.fromPartial(object.linkingUserDoneText)
      : undefined;
    message.externalUserNotFoundText =
      (object.externalUserNotFoundText !== undefined && object.externalUserNotFoundText !== null)
        ? ExternalUserNotFoundScreenText.fromPartial(object.externalUserNotFoundText)
        : undefined;
    message.successLoginText = (object.successLoginText !== undefined && object.successLoginText !== null)
      ? SuccessLoginScreenText.fromPartial(object.successLoginText)
      : undefined;
    message.logoutText = (object.logoutText !== undefined && object.logoutText !== null)
      ? LogoutDoneScreenText.fromPartial(object.logoutText)
      : undefined;
    message.footerText = (object.footerText !== undefined && object.footerText !== null)
      ? FooterText.fromPartial(object.footerText)
      : undefined;
    message.passwordlessPromptText =
      (object.passwordlessPromptText !== undefined && object.passwordlessPromptText !== null)
        ? PasswordlessPromptScreenText.fromPartial(object.passwordlessPromptText)
        : undefined;
    message.passwordlessRegistrationText =
      (object.passwordlessRegistrationText !== undefined && object.passwordlessRegistrationText !== null)
        ? PasswordlessRegistrationScreenText.fromPartial(object.passwordlessRegistrationText)
        : undefined;
    message.passwordlessRegistrationDoneText =
      (object.passwordlessRegistrationDoneText !== undefined && object.passwordlessRegistrationDoneText !== null)
        ? PasswordlessRegistrationDoneScreenText.fromPartial(object.passwordlessRegistrationDoneText)
        : undefined;
    message.externalRegistrationUserOverviewText =
      (object.externalRegistrationUserOverviewText !== undefined &&
          object.externalRegistrationUserOverviewText !== null)
        ? ExternalRegistrationUserOverviewScreenText.fromPartial(object.externalRegistrationUserOverviewText)
        : undefined;
    message.linkingUserPromptText =
      (object.linkingUserPromptText !== undefined && object.linkingUserPromptText !== null)
        ? LinkingUserPromptScreenText.fromPartial(object.linkingUserPromptText)
        : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsResponse(): SetCustomLoginTextsResponse {
  return { details: undefined };
}

export const SetCustomLoginTextsResponse: MessageFns<SetCustomLoginTextsResponse> = {
  encode(message: SetCustomLoginTextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetCustomLoginTextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCustomLoginTextsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetCustomLoginTextsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetCustomLoginTextsResponse>): SetCustomLoginTextsResponse {
    return SetCustomLoginTextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomLoginTextsResponse>): SetCustomLoginTextsResponse {
    const message = createBaseSetCustomLoginTextsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultRequest(): ResetCustomLoginTextsToDefaultRequest {
  return { language: "" };
}

export const ResetCustomLoginTextsToDefaultRequest: MessageFns<ResetCustomLoginTextsToDefaultRequest> = {
  encode(message: ResetCustomLoginTextsToDefaultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomLoginTextsToDefaultRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ResetCustomLoginTextsToDefaultRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomLoginTextsToDefaultRequest>): ResetCustomLoginTextsToDefaultRequest {
    return ResetCustomLoginTextsToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomLoginTextsToDefaultRequest>): ResetCustomLoginTextsToDefaultRequest {
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultResponse(): ResetCustomLoginTextsToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomLoginTextsToDefaultResponse: MessageFns<ResetCustomLoginTextsToDefaultResponse> = {
  encode(message: ResetCustomLoginTextsToDefaultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetCustomLoginTextsToDefaultResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ResetCustomLoginTextsToDefaultResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ResetCustomLoginTextsToDefaultResponse>): ResetCustomLoginTextsToDefaultResponse {
    return ResetCustomLoginTextsToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomLoginTextsToDefaultResponse>): ResetCustomLoginTextsToDefaultResponse {
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddIAMMemberRequest(): AddIAMMemberRequest {
  return { userId: "", roles: [] };
}

export const AddIAMMemberRequest: MessageFns<AddIAMMemberRequest> = {
  encode(message: AddIAMMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddIAMMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIAMMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIAMMemberRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: AddIAMMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create(base?: DeepPartial<AddIAMMemberRequest>): AddIAMMemberRequest {
    return AddIAMMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddIAMMemberRequest>): AddIAMMemberRequest {
    const message = createBaseAddIAMMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddIAMMemberResponse(): AddIAMMemberResponse {
  return { details: undefined };
}

export const AddIAMMemberResponse: MessageFns<AddIAMMemberResponse> = {
  encode(message: AddIAMMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddIAMMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIAMMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddIAMMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: AddIAMMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<AddIAMMemberResponse>): AddIAMMemberResponse {
    return AddIAMMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddIAMMemberResponse>): AddIAMMemberResponse {
    const message = createBaseAddIAMMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateIAMMemberRequest(): UpdateIAMMemberRequest {
  return { userId: "", roles: [] };
}

export const UpdateIAMMemberRequest: MessageFns<UpdateIAMMemberRequest> = {
  encode(message: UpdateIAMMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIAMMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIAMMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIAMMemberRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: UpdateIAMMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIAMMemberRequest>): UpdateIAMMemberRequest {
    return UpdateIAMMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIAMMemberRequest>): UpdateIAMMemberRequest {
    const message = createBaseUpdateIAMMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateIAMMemberResponse(): UpdateIAMMemberResponse {
  return { details: undefined };
}

export const UpdateIAMMemberResponse: MessageFns<UpdateIAMMemberResponse> = {
  encode(message: UpdateIAMMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIAMMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIAMMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIAMMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: UpdateIAMMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIAMMemberResponse>): UpdateIAMMemberResponse {
    return UpdateIAMMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIAMMemberResponse>): UpdateIAMMemberResponse {
    const message = createBaseUpdateIAMMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIAMMemberRequest(): RemoveIAMMemberRequest {
  return { userId: "" };
}

export const RemoveIAMMemberRequest: MessageFns<RemoveIAMMemberRequest> = {
  encode(message: RemoveIAMMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIAMMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIAMMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIAMMemberRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: RemoveIAMMemberRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIAMMemberRequest>): RemoveIAMMemberRequest {
    return RemoveIAMMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIAMMemberRequest>): RemoveIAMMemberRequest {
    const message = createBaseRemoveIAMMemberRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveIAMMemberResponse(): RemoveIAMMemberResponse {
  return { details: undefined };
}

export const RemoveIAMMemberResponse: MessageFns<RemoveIAMMemberResponse> = {
  encode(message: RemoveIAMMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveIAMMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIAMMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveIAMMemberResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: RemoveIAMMemberResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveIAMMemberResponse>): RemoveIAMMemberResponse {
    return RemoveIAMMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIAMMemberResponse>): RemoveIAMMemberResponse {
    const message = createBaseRemoveIAMMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListIAMMemberRolesRequest(): ListIAMMemberRolesRequest {
  return {};
}

export const ListIAMMemberRolesRequest: MessageFns<ListIAMMemberRolesRequest> = {
  encode(_: ListIAMMemberRolesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIAMMemberRolesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListIAMMemberRolesRequest {
    return {};
  },

  toJSON(_: ListIAMMemberRolesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListIAMMemberRolesRequest>): ListIAMMemberRolesRequest {
    return ListIAMMemberRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListIAMMemberRolesRequest>): ListIAMMemberRolesRequest {
    const message = createBaseListIAMMemberRolesRequest();
    return message;
  },
};

function createBaseListIAMMemberRolesResponse(): ListIAMMemberRolesResponse {
  return { details: undefined, roles: [] };
}

export const ListIAMMemberRolesResponse: MessageFns<ListIAMMemberRolesResponse> = {
  encode(message: ListIAMMemberRolesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIAMMemberRolesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIAMMemberRolesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ListIAMMemberRolesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.roles?.length) {
      obj.roles = message.roles;
    }
    return obj;
  },

  create(base?: DeepPartial<ListIAMMemberRolesResponse>): ListIAMMemberRolesResponse {
    return ListIAMMemberRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIAMMemberRolesResponse>): ListIAMMemberRolesResponse {
    const message = createBaseListIAMMemberRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseListIAMMembersRequest(): ListIAMMembersRequest {
  return { query: undefined, queries: [] };
}

export const ListIAMMembersRequest: MessageFns<ListIAMMembersRequest> = {
  encode(message: ListIAMMembersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    for (const v of message.queries) {
      SearchQuery.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIAMMembersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(SearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIAMMembersRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e: any) => SearchQuery.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIAMMembersRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIAMMembersRequest>): ListIAMMembersRequest {
    return ListIAMMembersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIAMMembersRequest>): ListIAMMembersRequest {
    const message = createBaseListIAMMembersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListIAMMembersResponse(): ListIAMMembersResponse {
  return { details: undefined, result: [] };
}

export const ListIAMMembersResponse: MessageFns<ListIAMMembersResponse> = {
  encode(message: ListIAMMembersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIAMMembersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIAMMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIAMMembersResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => Member.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIAMMembersResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Member.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIAMMembersResponse>): ListIAMMembersResponse {
    return ListIAMMembersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIAMMembersResponse>): ListIAMMembersResponse {
    const message = createBaseListIAMMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListViewsRequest(): ListViewsRequest {
  return {};
}

export const ListViewsRequest: MessageFns<ListViewsRequest> = {
  encode(_: ListViewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListViewsRequest {
    return {};
  },

  toJSON(_: ListViewsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListViewsRequest>): ListViewsRequest {
    return ListViewsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListViewsRequest>): ListViewsRequest {
    const message = createBaseListViewsRequest();
    return message;
  },
};

function createBaseListViewsResponse(): ListViewsResponse {
  return { result: [] };
}

export const ListViewsResponse: MessageFns<ListViewsResponse> = {
  encode(message: ListViewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.result) {
      View.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(View.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViewsResponse {
    return { result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => View.fromJSON(e)) : [] };
  },

  toJSON(message: ListViewsResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => View.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListViewsResponse>): ListViewsResponse {
    return ListViewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViewsResponse>): ListViewsResponse {
    const message = createBaseListViewsResponse();
    message.result = object.result?.map((e) => View.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFailedEventsRequest(): ListFailedEventsRequest {
  return {};
}

export const ListFailedEventsRequest: MessageFns<ListFailedEventsRequest> = {
  encode(_: ListFailedEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFailedEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFailedEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListFailedEventsRequest {
    return {};
  },

  toJSON(_: ListFailedEventsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListFailedEventsRequest>): ListFailedEventsRequest {
    return ListFailedEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListFailedEventsRequest>): ListFailedEventsRequest {
    const message = createBaseListFailedEventsRequest();
    return message;
  },
};

function createBaseListFailedEventsResponse(): ListFailedEventsResponse {
  return { result: [] };
}

export const ListFailedEventsResponse: MessageFns<ListFailedEventsResponse> = {
  encode(message: ListFailedEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.result) {
      FailedEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFailedEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFailedEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(FailedEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFailedEventsResponse {
    return {
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => FailedEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListFailedEventsResponse): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => FailedEvent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListFailedEventsResponse>): ListFailedEventsResponse {
    return ListFailedEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFailedEventsResponse>): ListFailedEventsResponse {
    const message = createBaseListFailedEventsResponse();
    message.result = object.result?.map((e) => FailedEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveFailedEventRequest(): RemoveFailedEventRequest {
  return { database: "", viewName: "", failedSequence: Long.UZERO };
}

export const RemoveFailedEventRequest: MessageFns<RemoveFailedEventRequest> = {
  encode(message: RemoveFailedEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.viewName !== "") {
      writer.uint32(18).string(message.viewName);
    }
    if (!message.failedSequence.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.failedSequence.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFailedEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFailedEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.failedSequence = Long.fromString(reader.uint64().toString(), true);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFailedEventRequest {
    return {
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
      failedSequence: isSet(object.failedSequence) ? Long.fromValue(object.failedSequence) : Long.UZERO,
    };
  },

  toJSON(message: RemoveFailedEventRequest): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.viewName !== "") {
      obj.viewName = message.viewName;
    }
    if (!message.failedSequence.equals(Long.UZERO)) {
      obj.failedSequence = (message.failedSequence || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveFailedEventRequest>): RemoveFailedEventRequest {
    return RemoveFailedEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveFailedEventRequest>): RemoveFailedEventRequest {
    const message = createBaseRemoveFailedEventRequest();
    message.database = object.database ?? "";
    message.viewName = object.viewName ?? "";
    message.failedSequence = (object.failedSequence !== undefined && object.failedSequence !== null)
      ? Long.fromValue(object.failedSequence)
      : Long.UZERO;
    return message;
  },
};

function createBaseRemoveFailedEventResponse(): RemoveFailedEventResponse {
  return {};
}

export const RemoveFailedEventResponse: MessageFns<RemoveFailedEventResponse> = {
  encode(_: RemoveFailedEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFailedEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFailedEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveFailedEventResponse {
    return {};
  },

  toJSON(_: RemoveFailedEventResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveFailedEventResponse>): RemoveFailedEventResponse {
    return RemoveFailedEventResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveFailedEventResponse>): RemoveFailedEventResponse {
    const message = createBaseRemoveFailedEventResponse();
    return message;
  },
};

function createBaseView(): View {
  return {
    database: "",
    viewName: "",
    processedSequence: Long.UZERO,
    eventTimestamp: undefined,
    lastSuccessfulSpoolerRun: undefined,
  };
}

export const View: MessageFns<View> = {
  encode(message: View, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.viewName !== "") {
      writer.uint32(18).string(message.viewName);
    }
    if (!message.processedSequence.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.processedSequence.toString());
    }
    if (message.eventTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTimestamp), writer.uint32(34).fork()).join();
    }
    if (message.lastSuccessfulSpoolerRun !== undefined) {
      Timestamp.encode(toTimestamp(message.lastSuccessfulSpoolerRun), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): View {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.processedSequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.eventTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastSuccessfulSpoolerRun = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): View {
    return {
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
      processedSequence: isSet(object.processedSequence) ? Long.fromValue(object.processedSequence) : Long.UZERO,
      eventTimestamp: isSet(object.eventTimestamp) ? fromJsonTimestamp(object.eventTimestamp) : undefined,
      lastSuccessfulSpoolerRun: isSet(object.lastSuccessfulSpoolerRun)
        ? fromJsonTimestamp(object.lastSuccessfulSpoolerRun)
        : undefined,
    };
  },

  toJSON(message: View): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.viewName !== "") {
      obj.viewName = message.viewName;
    }
    if (!message.processedSequence.equals(Long.UZERO)) {
      obj.processedSequence = (message.processedSequence || Long.UZERO).toString();
    }
    if (message.eventTimestamp !== undefined) {
      obj.eventTimestamp = message.eventTimestamp.toISOString();
    }
    if (message.lastSuccessfulSpoolerRun !== undefined) {
      obj.lastSuccessfulSpoolerRun = message.lastSuccessfulSpoolerRun.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<View>): View {
    return View.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<View>): View {
    const message = createBaseView();
    message.database = object.database ?? "";
    message.viewName = object.viewName ?? "";
    message.processedSequence = (object.processedSequence !== undefined && object.processedSequence !== null)
      ? Long.fromValue(object.processedSequence)
      : Long.UZERO;
    message.eventTimestamp = object.eventTimestamp ?? undefined;
    message.lastSuccessfulSpoolerRun = object.lastSuccessfulSpoolerRun ?? undefined;
    return message;
  },
};

function createBaseFailedEvent(): FailedEvent {
  return {
    database: "",
    viewName: "",
    failedSequence: Long.UZERO,
    failureCount: Long.UZERO,
    errorMessage: "",
    lastFailed: undefined,
  };
}

export const FailedEvent: MessageFns<FailedEvent> = {
  encode(message: FailedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.viewName !== "") {
      writer.uint32(18).string(message.viewName);
    }
    if (!message.failedSequence.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.failedSequence.toString());
    }
    if (!message.failureCount.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.failureCount.toString());
    }
    if (message.errorMessage !== "") {
      writer.uint32(42).string(message.errorMessage);
    }
    if (message.lastFailed !== undefined) {
      Timestamp.encode(toTimestamp(message.lastFailed), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FailedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFailedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.failedSequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.failureCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lastFailed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FailedEvent {
    return {
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
      failedSequence: isSet(object.failedSequence) ? Long.fromValue(object.failedSequence) : Long.UZERO,
      failureCount: isSet(object.failureCount) ? Long.fromValue(object.failureCount) : Long.UZERO,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      lastFailed: isSet(object.lastFailed) ? fromJsonTimestamp(object.lastFailed) : undefined,
    };
  },

  toJSON(message: FailedEvent): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.viewName !== "") {
      obj.viewName = message.viewName;
    }
    if (!message.failedSequence.equals(Long.UZERO)) {
      obj.failedSequence = (message.failedSequence || Long.UZERO).toString();
    }
    if (!message.failureCount.equals(Long.UZERO)) {
      obj.failureCount = (message.failureCount || Long.UZERO).toString();
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.lastFailed !== undefined) {
      obj.lastFailed = message.lastFailed.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FailedEvent>): FailedEvent {
    return FailedEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FailedEvent>): FailedEvent {
    const message = createBaseFailedEvent();
    message.database = object.database ?? "";
    message.viewName = object.viewName ?? "";
    message.failedSequence = (object.failedSequence !== undefined && object.failedSequence !== null)
      ? Long.fromValue(object.failedSequence)
      : Long.UZERO;
    message.failureCount = (object.failureCount !== undefined && object.failureCount !== null)
      ? Long.fromValue(object.failureCount)
      : Long.UZERO;
    message.errorMessage = object.errorMessage ?? "";
    message.lastFailed = object.lastFailed ?? undefined;
    return message;
  },
};

function createBaseImportDataRequest(): ImportDataRequest {
  return {
    dataOrgs: undefined,
    dataOrgsv1: undefined,
    dataOrgsLocal: undefined,
    dataOrgsv1Local: undefined,
    dataOrgsS3: undefined,
    dataOrgsv1S3: undefined,
    dataOrgsGcs: undefined,
    dataOrgsv1Gcs: undefined,
    timeout: "",
  };
}

export const ImportDataRequest: MessageFns<ImportDataRequest> = {
  encode(message: ImportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataOrgs !== undefined) {
      ImportDataOrg.encode(message.dataOrgs, writer.uint32(10).fork()).join();
    }
    if (message.dataOrgsv1 !== undefined) {
      ImportDataOrg1.encode(message.dataOrgsv1, writer.uint32(18).fork()).join();
    }
    if (message.dataOrgsLocal !== undefined) {
      ImportDataRequest_LocalInput.encode(message.dataOrgsLocal, writer.uint32(26).fork()).join();
    }
    if (message.dataOrgsv1Local !== undefined) {
      ImportDataRequest_LocalInput.encode(message.dataOrgsv1Local, writer.uint32(34).fork()).join();
    }
    if (message.dataOrgsS3 !== undefined) {
      ImportDataRequest_S3Input.encode(message.dataOrgsS3, writer.uint32(42).fork()).join();
    }
    if (message.dataOrgsv1S3 !== undefined) {
      ImportDataRequest_S3Input.encode(message.dataOrgsv1S3, writer.uint32(50).fork()).join();
    }
    if (message.dataOrgsGcs !== undefined) {
      ImportDataRequest_GCSInput.encode(message.dataOrgsGcs, writer.uint32(58).fork()).join();
    }
    if (message.dataOrgsv1Gcs !== undefined) {
      ImportDataRequest_GCSInput.encode(message.dataOrgsv1Gcs, writer.uint32(66).fork()).join();
    }
    if (message.timeout !== "") {
      writer.uint32(74).string(message.timeout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataOrgs = ImportDataOrg.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataOrgsv1 = ImportDataOrg1.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataOrgsLocal = ImportDataRequest_LocalInput.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataOrgsv1Local = ImportDataRequest_LocalInput.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dataOrgsS3 = ImportDataRequest_S3Input.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dataOrgsv1S3 = ImportDataRequest_S3Input.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.dataOrgsGcs = ImportDataRequest_GCSInput.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.dataOrgsv1Gcs = ImportDataRequest_GCSInput.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.timeout = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest {
    return {
      dataOrgs: isSet(object.dataOrgs) ? ImportDataOrg.fromJSON(object.dataOrgs) : undefined,
      dataOrgsv1: isSet(object.dataOrgsv1) ? ImportDataOrg1.fromJSON(object.dataOrgsv1) : undefined,
      dataOrgsLocal: isSet(object.dataOrgsLocal)
        ? ImportDataRequest_LocalInput.fromJSON(object.dataOrgsLocal)
        : undefined,
      dataOrgsv1Local: isSet(object.dataOrgsv1Local)
        ? ImportDataRequest_LocalInput.fromJSON(object.dataOrgsv1Local)
        : undefined,
      dataOrgsS3: isSet(object.dataOrgsS3) ? ImportDataRequest_S3Input.fromJSON(object.dataOrgsS3) : undefined,
      dataOrgsv1S3: isSet(object.dataOrgsv1S3) ? ImportDataRequest_S3Input.fromJSON(object.dataOrgsv1S3) : undefined,
      dataOrgsGcs: isSet(object.dataOrgsGcs) ? ImportDataRequest_GCSInput.fromJSON(object.dataOrgsGcs) : undefined,
      dataOrgsv1Gcs: isSet(object.dataOrgsv1Gcs)
        ? ImportDataRequest_GCSInput.fromJSON(object.dataOrgsv1Gcs)
        : undefined,
      timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
    };
  },

  toJSON(message: ImportDataRequest): unknown {
    const obj: any = {};
    if (message.dataOrgs !== undefined) {
      obj.dataOrgs = ImportDataOrg.toJSON(message.dataOrgs);
    }
    if (message.dataOrgsv1 !== undefined) {
      obj.dataOrgsv1 = ImportDataOrg1.toJSON(message.dataOrgsv1);
    }
    if (message.dataOrgsLocal !== undefined) {
      obj.dataOrgsLocal = ImportDataRequest_LocalInput.toJSON(message.dataOrgsLocal);
    }
    if (message.dataOrgsv1Local !== undefined) {
      obj.dataOrgsv1Local = ImportDataRequest_LocalInput.toJSON(message.dataOrgsv1Local);
    }
    if (message.dataOrgsS3 !== undefined) {
      obj.dataOrgsS3 = ImportDataRequest_S3Input.toJSON(message.dataOrgsS3);
    }
    if (message.dataOrgsv1S3 !== undefined) {
      obj.dataOrgsv1S3 = ImportDataRequest_S3Input.toJSON(message.dataOrgsv1S3);
    }
    if (message.dataOrgsGcs !== undefined) {
      obj.dataOrgsGcs = ImportDataRequest_GCSInput.toJSON(message.dataOrgsGcs);
    }
    if (message.dataOrgsv1Gcs !== undefined) {
      obj.dataOrgsv1Gcs = ImportDataRequest_GCSInput.toJSON(message.dataOrgsv1Gcs);
    }
    if (message.timeout !== "") {
      obj.timeout = message.timeout;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest>): ImportDataRequest {
    return ImportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest>): ImportDataRequest {
    const message = createBaseImportDataRequest();
    message.dataOrgs = (object.dataOrgs !== undefined && object.dataOrgs !== null)
      ? ImportDataOrg.fromPartial(object.dataOrgs)
      : undefined;
    message.dataOrgsv1 = (object.dataOrgsv1 !== undefined && object.dataOrgsv1 !== null)
      ? ImportDataOrg1.fromPartial(object.dataOrgsv1)
      : undefined;
    message.dataOrgsLocal = (object.dataOrgsLocal !== undefined && object.dataOrgsLocal !== null)
      ? ImportDataRequest_LocalInput.fromPartial(object.dataOrgsLocal)
      : undefined;
    message.dataOrgsv1Local = (object.dataOrgsv1Local !== undefined && object.dataOrgsv1Local !== null)
      ? ImportDataRequest_LocalInput.fromPartial(object.dataOrgsv1Local)
      : undefined;
    message.dataOrgsS3 = (object.dataOrgsS3 !== undefined && object.dataOrgsS3 !== null)
      ? ImportDataRequest_S3Input.fromPartial(object.dataOrgsS3)
      : undefined;
    message.dataOrgsv1S3 = (object.dataOrgsv1S3 !== undefined && object.dataOrgsv1S3 !== null)
      ? ImportDataRequest_S3Input.fromPartial(object.dataOrgsv1S3)
      : undefined;
    message.dataOrgsGcs = (object.dataOrgsGcs !== undefined && object.dataOrgsGcs !== null)
      ? ImportDataRequest_GCSInput.fromPartial(object.dataOrgsGcs)
      : undefined;
    message.dataOrgsv1Gcs = (object.dataOrgsv1Gcs !== undefined && object.dataOrgsv1Gcs !== null)
      ? ImportDataRequest_GCSInput.fromPartial(object.dataOrgsv1Gcs)
      : undefined;
    message.timeout = object.timeout ?? "";
    return message;
  },
};

function createBaseImportDataRequest_LocalInput(): ImportDataRequest_LocalInput {
  return { path: "" };
}

export const ImportDataRequest_LocalInput: MessageFns<ImportDataRequest_LocalInput> = {
  encode(message: ImportDataRequest_LocalInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest_LocalInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest_LocalInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest_LocalInput {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: ImportDataRequest_LocalInput): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest_LocalInput>): ImportDataRequest_LocalInput {
    return ImportDataRequest_LocalInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest_LocalInput>): ImportDataRequest_LocalInput {
    const message = createBaseImportDataRequest_LocalInput();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseImportDataRequest_S3Input(): ImportDataRequest_S3Input {
  return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}

export const ImportDataRequest_S3Input: MessageFns<ImportDataRequest_S3Input> = {
  encode(message: ImportDataRequest_S3Input, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    if (message.accessKeyId !== "") {
      writer.uint32(26).string(message.accessKeyId);
    }
    if (message.secretAccessKey !== "") {
      writer.uint32(34).string(message.secretAccessKey);
    }
    if (message.ssl !== false) {
      writer.uint32(40).bool(message.ssl);
    }
    if (message.bucket !== "") {
      writer.uint32(50).string(message.bucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest_S3Input {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest_S3Input();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accessKeyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.secretAccessKey = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ssl = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bucket = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest_S3Input {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
      secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
      ssl: isSet(object.ssl) ? globalThis.Boolean(object.ssl) : false,
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
    };
  },

  toJSON(message: ImportDataRequest_S3Input): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.accessKeyId !== "") {
      obj.accessKeyId = message.accessKeyId;
    }
    if (message.secretAccessKey !== "") {
      obj.secretAccessKey = message.secretAccessKey;
    }
    if (message.ssl !== false) {
      obj.ssl = message.ssl;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest_S3Input>): ImportDataRequest_S3Input {
    return ImportDataRequest_S3Input.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest_S3Input>): ImportDataRequest_S3Input {
    const message = createBaseImportDataRequest_S3Input();
    message.path = object.path ?? "";
    message.endpoint = object.endpoint ?? "";
    message.accessKeyId = object.accessKeyId ?? "";
    message.secretAccessKey = object.secretAccessKey ?? "";
    message.ssl = object.ssl ?? false;
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseImportDataRequest_GCSInput(): ImportDataRequest_GCSInput {
  return { bucket: "", serviceaccountJson: "", path: "" };
}

export const ImportDataRequest_GCSInput: MessageFns<ImportDataRequest_GCSInput> = {
  encode(message: ImportDataRequest_GCSInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.serviceaccountJson !== "") {
      writer.uint32(18).string(message.serviceaccountJson);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest_GCSInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest_GCSInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceaccountJson = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest_GCSInput {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      serviceaccountJson: isSet(object.serviceaccountJson) ? globalThis.String(object.serviceaccountJson) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: ImportDataRequest_GCSInput): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.serviceaccountJson !== "") {
      obj.serviceaccountJson = message.serviceaccountJson;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest_GCSInput>): ImportDataRequest_GCSInput {
    return ImportDataRequest_GCSInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest_GCSInput>): ImportDataRequest_GCSInput {
    const message = createBaseImportDataRequest_GCSInput();
    message.bucket = object.bucket ?? "";
    message.serviceaccountJson = object.serviceaccountJson ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseImportDataOrg(): ImportDataOrg {
  return { orgs: [] };
}

export const ImportDataOrg: MessageFns<ImportDataOrg> = {
  encode(message: ImportDataOrg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orgs) {
      DataOrg.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataOrg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgs.push(DataOrg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataOrg {
    return { orgs: globalThis.Array.isArray(object?.orgs) ? object.orgs.map((e: any) => DataOrg.fromJSON(e)) : [] };
  },

  toJSON(message: ImportDataOrg): unknown {
    const obj: any = {};
    if (message.orgs?.length) {
      obj.orgs = message.orgs.map((e) => DataOrg.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataOrg>): ImportDataOrg {
    return ImportDataOrg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataOrg>): ImportDataOrg {
    const message = createBaseImportDataOrg();
    message.orgs = object.orgs?.map((e) => DataOrg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataOrg(): DataOrg {
  return {
    orgId: "",
    org: undefined,
    domainPolicy: undefined,
    labelPolicy: undefined,
    lockoutPolicy: undefined,
    loginPolicy: undefined,
    passwordComplexityPolicy: undefined,
    privacyPolicy: undefined,
    projects: [],
    projectRoles: [],
    apiApps: [],
    oidcApps: [],
    humanUsers: [],
    machineUsers: [],
    triggerActions: [],
    actions: [],
    projectGrants: [],
    userGrants: [],
    orgMembers: [],
    projectMembers: [],
    projectGrantMembers: [],
    userMetadata: [],
    loginTexts: [],
    initMessages: [],
    passwordResetMessages: [],
    verifyEmailMessages: [],
    verifyPhoneMessages: [],
    domainClaimedMessages: [],
    passwordlessRegistrationMessages: [],
    oidcIdps: [],
    jwtIdps: [],
    userLinks: [],
    domains: [],
    appKeys: [],
    machineKeys: [],
    verifySmsOtpMessages: [],
    verifyEmailOtpMessages: [],
    inviteUserMessages: [],
  };
}

export const DataOrg: MessageFns<DataOrg> = {
  encode(message: DataOrg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    if (message.org !== undefined) {
      AddOrgRequest.encode(message.org, writer.uint32(26).fork()).join();
    }
    if (message.domainPolicy !== undefined) {
      AddCustomDomainPolicyRequest.encode(message.domainPolicy, writer.uint32(34).fork()).join();
    }
    if (message.labelPolicy !== undefined) {
      AddCustomLabelPolicyRequest.encode(message.labelPolicy, writer.uint32(42).fork()).join();
    }
    if (message.lockoutPolicy !== undefined) {
      AddCustomLockoutPolicyRequest.encode(message.lockoutPolicy, writer.uint32(50).fork()).join();
    }
    if (message.loginPolicy !== undefined) {
      AddCustomLoginPolicyRequest.encode(message.loginPolicy, writer.uint32(58).fork()).join();
    }
    if (message.passwordComplexityPolicy !== undefined) {
      AddCustomPasswordComplexityPolicyRequest.encode(message.passwordComplexityPolicy, writer.uint32(66).fork())
        .join();
    }
    if (message.privacyPolicy !== undefined) {
      AddCustomPrivacyPolicyRequest.encode(message.privacyPolicy, writer.uint32(74).fork()).join();
    }
    for (const v of message.projects) {
      DataProject.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.projectRoles) {
      AddProjectRoleRequest.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.apiApps) {
      DataAPIApplication.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.oidcApps) {
      DataOIDCApplication.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.humanUsers) {
      DataHumanUser.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.machineUsers) {
      DataMachineUser.encode(v!, writer.uint32(122).fork()).join();
    }
    for (const v of message.triggerActions) {
      SetTriggerActionsRequest.encode(v!, writer.uint32(130).fork()).join();
    }
    for (const v of message.actions) {
      DataAction.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.projectGrants) {
      DataProjectGrant.encode(v!, writer.uint32(146).fork()).join();
    }
    for (const v of message.userGrants) {
      AddUserGrantRequest.encode(v!, writer.uint32(154).fork()).join();
    }
    for (const v of message.orgMembers) {
      AddOrgMemberRequest.encode(v!, writer.uint32(162).fork()).join();
    }
    for (const v of message.projectMembers) {
      AddProjectMemberRequest.encode(v!, writer.uint32(170).fork()).join();
    }
    for (const v of message.projectGrantMembers) {
      AddProjectGrantMemberRequest.encode(v!, writer.uint32(178).fork()).join();
    }
    for (const v of message.userMetadata) {
      SetUserMetadataRequest.encode(v!, writer.uint32(186).fork()).join();
    }
    for (const v of message.loginTexts) {
      SetCustomLoginTextsRequest2.encode(v!, writer.uint32(194).fork()).join();
    }
    for (const v of message.initMessages) {
      SetCustomInitMessageTextRequest.encode(v!, writer.uint32(202).fork()).join();
    }
    for (const v of message.passwordResetMessages) {
      SetCustomPasswordResetMessageTextRequest.encode(v!, writer.uint32(210).fork()).join();
    }
    for (const v of message.verifyEmailMessages) {
      SetCustomVerifyEmailMessageTextRequest.encode(v!, writer.uint32(218).fork()).join();
    }
    for (const v of message.verifyPhoneMessages) {
      SetCustomVerifyPhoneMessageTextRequest.encode(v!, writer.uint32(226).fork()).join();
    }
    for (const v of message.domainClaimedMessages) {
      SetCustomDomainClaimedMessageTextRequest.encode(v!, writer.uint32(234).fork()).join();
    }
    for (const v of message.passwordlessRegistrationMessages) {
      SetCustomPasswordlessRegistrationMessageTextRequest.encode(v!, writer.uint32(242).fork()).join();
    }
    for (const v of message.oidcIdps) {
      DataOIDCIDP.encode(v!, writer.uint32(250).fork()).join();
    }
    for (const v of message.jwtIdps) {
      DataJWTIDP.encode(v!, writer.uint32(258).fork()).join();
    }
    for (const v of message.userLinks) {
      IDPUserLink.encode(v!, writer.uint32(266).fork()).join();
    }
    for (const v of message.domains) {
      Domain3.encode(v!, writer.uint32(274).fork()).join();
    }
    for (const v of message.appKeys) {
      DataAppKey.encode(v!, writer.uint32(282).fork()).join();
    }
    for (const v of message.machineKeys) {
      DataMachineKey.encode(v!, writer.uint32(290).fork()).join();
    }
    for (const v of message.verifySmsOtpMessages) {
      SetCustomVerifySMSOTPMessageTextRequest.encode(v!, writer.uint32(298).fork()).join();
    }
    for (const v of message.verifyEmailOtpMessages) {
      SetCustomVerifyEmailOTPMessageTextRequest.encode(v!, writer.uint32(306).fork()).join();
    }
    for (const v of message.inviteUserMessages) {
      SetCustomInviteUserMessageTextRequest.encode(v!, writer.uint32(314).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataOrg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.org = AddOrgRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.domainPolicy = AddCustomDomainPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.labelPolicy = AddCustomLabelPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lockoutPolicy = AddCustomLockoutPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.loginPolicy = AddCustomLoginPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.passwordComplexityPolicy = AddCustomPasswordComplexityPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.privacyPolicy = AddCustomPrivacyPolicyRequest.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.projects.push(DataProject.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.projectRoles.push(AddProjectRoleRequest.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.apiApps.push(DataAPIApplication.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.oidcApps.push(DataOIDCApplication.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.humanUsers.push(DataHumanUser.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.machineUsers.push(DataMachineUser.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.triggerActions.push(SetTriggerActionsRequest.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.actions.push(DataAction.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.projectGrants.push(DataProjectGrant.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.userGrants.push(AddUserGrantRequest.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.orgMembers.push(AddOrgMemberRequest.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.projectMembers.push(AddProjectMemberRequest.decode(reader, reader.uint32()));
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.projectGrantMembers.push(AddProjectGrantMemberRequest.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.userMetadata.push(SetUserMetadataRequest.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.loginTexts.push(SetCustomLoginTextsRequest2.decode(reader, reader.uint32()));
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.initMessages.push(SetCustomInitMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.passwordResetMessages.push(SetCustomPasswordResetMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.verifyEmailMessages.push(SetCustomVerifyEmailMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.verifyPhoneMessages.push(SetCustomVerifyPhoneMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.domainClaimedMessages.push(SetCustomDomainClaimedMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.passwordlessRegistrationMessages.push(
            SetCustomPasswordlessRegistrationMessageTextRequest.decode(reader, reader.uint32()),
          );
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.oidcIdps.push(DataOIDCIDP.decode(reader, reader.uint32()));
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.jwtIdps.push(DataJWTIDP.decode(reader, reader.uint32()));
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.userLinks.push(IDPUserLink.decode(reader, reader.uint32()));
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.domains.push(Domain3.decode(reader, reader.uint32()));
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.appKeys.push(DataAppKey.decode(reader, reader.uint32()));
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.machineKeys.push(DataMachineKey.decode(reader, reader.uint32()));
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.verifySmsOtpMessages.push(SetCustomVerifySMSOTPMessageTextRequest.decode(reader, reader.uint32()));
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.verifyEmailOtpMessages.push(
            SetCustomVerifyEmailOTPMessageTextRequest.decode(reader, reader.uint32()),
          );
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.inviteUserMessages.push(SetCustomInviteUserMessageTextRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataOrg {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      org: isSet(object.org) ? AddOrgRequest.fromJSON(object.org) : undefined,
      domainPolicy: isSet(object.domainPolicy) ? AddCustomDomainPolicyRequest.fromJSON(object.domainPolicy) : undefined,
      labelPolicy: isSet(object.labelPolicy) ? AddCustomLabelPolicyRequest.fromJSON(object.labelPolicy) : undefined,
      lockoutPolicy: isSet(object.lockoutPolicy)
        ? AddCustomLockoutPolicyRequest.fromJSON(object.lockoutPolicy)
        : undefined,
      loginPolicy: isSet(object.loginPolicy) ? AddCustomLoginPolicyRequest.fromJSON(object.loginPolicy) : undefined,
      passwordComplexityPolicy: isSet(object.passwordComplexityPolicy)
        ? AddCustomPasswordComplexityPolicyRequest.fromJSON(object.passwordComplexityPolicy)
        : undefined,
      privacyPolicy: isSet(object.privacyPolicy)
        ? AddCustomPrivacyPolicyRequest.fromJSON(object.privacyPolicy)
        : undefined,
      projects: globalThis.Array.isArray(object?.projects)
        ? object.projects.map((e: any) => DataProject.fromJSON(e))
        : [],
      projectRoles: globalThis.Array.isArray(object?.projectRoles)
        ? object.projectRoles.map((e: any) => AddProjectRoleRequest.fromJSON(e))
        : [],
      apiApps: globalThis.Array.isArray(object?.apiApps)
        ? object.apiApps.map((e: any) => DataAPIApplication.fromJSON(e))
        : [],
      oidcApps: globalThis.Array.isArray(object?.oidcApps)
        ? object.oidcApps.map((e: any) => DataOIDCApplication.fromJSON(e))
        : [],
      humanUsers: globalThis.Array.isArray(object?.humanUsers)
        ? object.humanUsers.map((e: any) => DataHumanUser.fromJSON(e))
        : [],
      machineUsers: globalThis.Array.isArray(object?.machineUsers)
        ? object.machineUsers.map((e: any) => DataMachineUser.fromJSON(e))
        : [],
      triggerActions: globalThis.Array.isArray(object?.triggerActions)
        ? object.triggerActions.map((e: any) => SetTriggerActionsRequest.fromJSON(e))
        : [],
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => DataAction.fromJSON(e))
        : [],
      projectGrants: globalThis.Array.isArray(object?.projectGrants)
        ? object.projectGrants.map((e: any) => DataProjectGrant.fromJSON(e))
        : [],
      userGrants: globalThis.Array.isArray(object?.userGrants)
        ? object.userGrants.map((e: any) => AddUserGrantRequest.fromJSON(e))
        : [],
      orgMembers: globalThis.Array.isArray(object?.orgMembers)
        ? object.orgMembers.map((e: any) => AddOrgMemberRequest.fromJSON(e))
        : [],
      projectMembers: globalThis.Array.isArray(object?.projectMembers)
        ? object.projectMembers.map((e: any) => AddProjectMemberRequest.fromJSON(e))
        : [],
      projectGrantMembers: globalThis.Array.isArray(object?.projectGrantMembers)
        ? object.projectGrantMembers.map((e: any) => AddProjectGrantMemberRequest.fromJSON(e))
        : [],
      userMetadata: globalThis.Array.isArray(object?.userMetadata)
        ? object.userMetadata.map((e: any) => SetUserMetadataRequest.fromJSON(e))
        : [],
      loginTexts: globalThis.Array.isArray(object?.loginTexts)
        ? object.loginTexts.map((e: any) => SetCustomLoginTextsRequest2.fromJSON(e))
        : [],
      initMessages: globalThis.Array.isArray(object?.initMessages)
        ? object.initMessages.map((e: any) => SetCustomInitMessageTextRequest.fromJSON(e))
        : [],
      passwordResetMessages: globalThis.Array.isArray(object?.passwordResetMessages)
        ? object.passwordResetMessages.map((e: any) => SetCustomPasswordResetMessageTextRequest.fromJSON(e))
        : [],
      verifyEmailMessages: globalThis.Array.isArray(object?.verifyEmailMessages)
        ? object.verifyEmailMessages.map((e: any) => SetCustomVerifyEmailMessageTextRequest.fromJSON(e))
        : [],
      verifyPhoneMessages: globalThis.Array.isArray(object?.verifyPhoneMessages)
        ? object.verifyPhoneMessages.map((e: any) => SetCustomVerifyPhoneMessageTextRequest.fromJSON(e))
        : [],
      domainClaimedMessages: globalThis.Array.isArray(object?.domainClaimedMessages)
        ? object.domainClaimedMessages.map((e: any) => SetCustomDomainClaimedMessageTextRequest.fromJSON(e))
        : [],
      passwordlessRegistrationMessages: globalThis.Array.isArray(object?.passwordlessRegistrationMessages)
        ? object.passwordlessRegistrationMessages.map((e: any) =>
          SetCustomPasswordlessRegistrationMessageTextRequest.fromJSON(e)
        )
        : [],
      oidcIdps: globalThis.Array.isArray(object?.oidcIdps)
        ? object.oidcIdps.map((e: any) => DataOIDCIDP.fromJSON(e))
        : [],
      jwtIdps: globalThis.Array.isArray(object?.jwtIdps) ? object.jwtIdps.map((e: any) => DataJWTIDP.fromJSON(e)) : [],
      userLinks: globalThis.Array.isArray(object?.userLinks)
        ? object.userLinks.map((e: any) => IDPUserLink.fromJSON(e))
        : [],
      domains: globalThis.Array.isArray(object?.domains) ? object.domains.map((e: any) => Domain3.fromJSON(e)) : [],
      appKeys: globalThis.Array.isArray(object?.appKeys) ? object.appKeys.map((e: any) => DataAppKey.fromJSON(e)) : [],
      machineKeys: globalThis.Array.isArray(object?.machineKeys)
        ? object.machineKeys.map((e: any) => DataMachineKey.fromJSON(e))
        : [],
      verifySmsOtpMessages: globalThis.Array.isArray(object?.verifySmsOtpMessages)
        ? object.verifySmsOtpMessages.map((e: any) => SetCustomVerifySMSOTPMessageTextRequest.fromJSON(e))
        : [],
      verifyEmailOtpMessages: globalThis.Array.isArray(object?.verifyEmailOtpMessages)
        ? object.verifyEmailOtpMessages.map((e: any) => SetCustomVerifyEmailOTPMessageTextRequest.fromJSON(e))
        : [],
      inviteUserMessages: globalThis.Array.isArray(object?.inviteUserMessages)
        ? object.inviteUserMessages.map((e: any) => SetCustomInviteUserMessageTextRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataOrg): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.org !== undefined) {
      obj.org = AddOrgRequest.toJSON(message.org);
    }
    if (message.domainPolicy !== undefined) {
      obj.domainPolicy = AddCustomDomainPolicyRequest.toJSON(message.domainPolicy);
    }
    if (message.labelPolicy !== undefined) {
      obj.labelPolicy = AddCustomLabelPolicyRequest.toJSON(message.labelPolicy);
    }
    if (message.lockoutPolicy !== undefined) {
      obj.lockoutPolicy = AddCustomLockoutPolicyRequest.toJSON(message.lockoutPolicy);
    }
    if (message.loginPolicy !== undefined) {
      obj.loginPolicy = AddCustomLoginPolicyRequest.toJSON(message.loginPolicy);
    }
    if (message.passwordComplexityPolicy !== undefined) {
      obj.passwordComplexityPolicy = AddCustomPasswordComplexityPolicyRequest.toJSON(message.passwordComplexityPolicy);
    }
    if (message.privacyPolicy !== undefined) {
      obj.privacyPolicy = AddCustomPrivacyPolicyRequest.toJSON(message.privacyPolicy);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => DataProject.toJSON(e));
    }
    if (message.projectRoles?.length) {
      obj.projectRoles = message.projectRoles.map((e) => AddProjectRoleRequest.toJSON(e));
    }
    if (message.apiApps?.length) {
      obj.apiApps = message.apiApps.map((e) => DataAPIApplication.toJSON(e));
    }
    if (message.oidcApps?.length) {
      obj.oidcApps = message.oidcApps.map((e) => DataOIDCApplication.toJSON(e));
    }
    if (message.humanUsers?.length) {
      obj.humanUsers = message.humanUsers.map((e) => DataHumanUser.toJSON(e));
    }
    if (message.machineUsers?.length) {
      obj.machineUsers = message.machineUsers.map((e) => DataMachineUser.toJSON(e));
    }
    if (message.triggerActions?.length) {
      obj.triggerActions = message.triggerActions.map((e) => SetTriggerActionsRequest.toJSON(e));
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => DataAction.toJSON(e));
    }
    if (message.projectGrants?.length) {
      obj.projectGrants = message.projectGrants.map((e) => DataProjectGrant.toJSON(e));
    }
    if (message.userGrants?.length) {
      obj.userGrants = message.userGrants.map((e) => AddUserGrantRequest.toJSON(e));
    }
    if (message.orgMembers?.length) {
      obj.orgMembers = message.orgMembers.map((e) => AddOrgMemberRequest.toJSON(e));
    }
    if (message.projectMembers?.length) {
      obj.projectMembers = message.projectMembers.map((e) => AddProjectMemberRequest.toJSON(e));
    }
    if (message.projectGrantMembers?.length) {
      obj.projectGrantMembers = message.projectGrantMembers.map((e) => AddProjectGrantMemberRequest.toJSON(e));
    }
    if (message.userMetadata?.length) {
      obj.userMetadata = message.userMetadata.map((e) => SetUserMetadataRequest.toJSON(e));
    }
    if (message.loginTexts?.length) {
      obj.loginTexts = message.loginTexts.map((e) => SetCustomLoginTextsRequest2.toJSON(e));
    }
    if (message.initMessages?.length) {
      obj.initMessages = message.initMessages.map((e) => SetCustomInitMessageTextRequest.toJSON(e));
    }
    if (message.passwordResetMessages?.length) {
      obj.passwordResetMessages = message.passwordResetMessages.map((e) =>
        SetCustomPasswordResetMessageTextRequest.toJSON(e)
      );
    }
    if (message.verifyEmailMessages?.length) {
      obj.verifyEmailMessages = message.verifyEmailMessages.map((e) =>
        SetCustomVerifyEmailMessageTextRequest.toJSON(e)
      );
    }
    if (message.verifyPhoneMessages?.length) {
      obj.verifyPhoneMessages = message.verifyPhoneMessages.map((e) =>
        SetCustomVerifyPhoneMessageTextRequest.toJSON(e)
      );
    }
    if (message.domainClaimedMessages?.length) {
      obj.domainClaimedMessages = message.domainClaimedMessages.map((e) =>
        SetCustomDomainClaimedMessageTextRequest.toJSON(e)
      );
    }
    if (message.passwordlessRegistrationMessages?.length) {
      obj.passwordlessRegistrationMessages = message.passwordlessRegistrationMessages.map((e) =>
        SetCustomPasswordlessRegistrationMessageTextRequest.toJSON(e)
      );
    }
    if (message.oidcIdps?.length) {
      obj.oidcIdps = message.oidcIdps.map((e) => DataOIDCIDP.toJSON(e));
    }
    if (message.jwtIdps?.length) {
      obj.jwtIdps = message.jwtIdps.map((e) => DataJWTIDP.toJSON(e));
    }
    if (message.userLinks?.length) {
      obj.userLinks = message.userLinks.map((e) => IDPUserLink.toJSON(e));
    }
    if (message.domains?.length) {
      obj.domains = message.domains.map((e) => Domain3.toJSON(e));
    }
    if (message.appKeys?.length) {
      obj.appKeys = message.appKeys.map((e) => DataAppKey.toJSON(e));
    }
    if (message.machineKeys?.length) {
      obj.machineKeys = message.machineKeys.map((e) => DataMachineKey.toJSON(e));
    }
    if (message.verifySmsOtpMessages?.length) {
      obj.verifySmsOtpMessages = message.verifySmsOtpMessages.map((e) =>
        SetCustomVerifySMSOTPMessageTextRequest.toJSON(e)
      );
    }
    if (message.verifyEmailOtpMessages?.length) {
      obj.verifyEmailOtpMessages = message.verifyEmailOtpMessages.map((e) =>
        SetCustomVerifyEmailOTPMessageTextRequest.toJSON(e)
      );
    }
    if (message.inviteUserMessages?.length) {
      obj.inviteUserMessages = message.inviteUserMessages.map((e) => SetCustomInviteUserMessageTextRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DataOrg>): DataOrg {
    return DataOrg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataOrg>): DataOrg {
    const message = createBaseDataOrg();
    message.orgId = object.orgId ?? "";
    message.org = (object.org !== undefined && object.org !== null) ? AddOrgRequest.fromPartial(object.org) : undefined;
    message.domainPolicy = (object.domainPolicy !== undefined && object.domainPolicy !== null)
      ? AddCustomDomainPolicyRequest.fromPartial(object.domainPolicy)
      : undefined;
    message.labelPolicy = (object.labelPolicy !== undefined && object.labelPolicy !== null)
      ? AddCustomLabelPolicyRequest.fromPartial(object.labelPolicy)
      : undefined;
    message.lockoutPolicy = (object.lockoutPolicy !== undefined && object.lockoutPolicy !== null)
      ? AddCustomLockoutPolicyRequest.fromPartial(object.lockoutPolicy)
      : undefined;
    message.loginPolicy = (object.loginPolicy !== undefined && object.loginPolicy !== null)
      ? AddCustomLoginPolicyRequest.fromPartial(object.loginPolicy)
      : undefined;
    message.passwordComplexityPolicy =
      (object.passwordComplexityPolicy !== undefined && object.passwordComplexityPolicy !== null)
        ? AddCustomPasswordComplexityPolicyRequest.fromPartial(object.passwordComplexityPolicy)
        : undefined;
    message.privacyPolicy = (object.privacyPolicy !== undefined && object.privacyPolicy !== null)
      ? AddCustomPrivacyPolicyRequest.fromPartial(object.privacyPolicy)
      : undefined;
    message.projects = object.projects?.map((e) => DataProject.fromPartial(e)) || [];
    message.projectRoles = object.projectRoles?.map((e) => AddProjectRoleRequest.fromPartial(e)) || [];
    message.apiApps = object.apiApps?.map((e) => DataAPIApplication.fromPartial(e)) || [];
    message.oidcApps = object.oidcApps?.map((e) => DataOIDCApplication.fromPartial(e)) || [];
    message.humanUsers = object.humanUsers?.map((e) => DataHumanUser.fromPartial(e)) || [];
    message.machineUsers = object.machineUsers?.map((e) => DataMachineUser.fromPartial(e)) || [];
    message.triggerActions = object.triggerActions?.map((e) => SetTriggerActionsRequest.fromPartial(e)) || [];
    message.actions = object.actions?.map((e) => DataAction.fromPartial(e)) || [];
    message.projectGrants = object.projectGrants?.map((e) => DataProjectGrant.fromPartial(e)) || [];
    message.userGrants = object.userGrants?.map((e) => AddUserGrantRequest.fromPartial(e)) || [];
    message.orgMembers = object.orgMembers?.map((e) => AddOrgMemberRequest.fromPartial(e)) || [];
    message.projectMembers = object.projectMembers?.map((e) => AddProjectMemberRequest.fromPartial(e)) || [];
    message.projectGrantMembers = object.projectGrantMembers?.map((e) => AddProjectGrantMemberRequest.fromPartial(e)) ||
      [];
    message.userMetadata = object.userMetadata?.map((e) => SetUserMetadataRequest.fromPartial(e)) || [];
    message.loginTexts = object.loginTexts?.map((e) => SetCustomLoginTextsRequest2.fromPartial(e)) || [];
    message.initMessages = object.initMessages?.map((e) => SetCustomInitMessageTextRequest.fromPartial(e)) || [];
    message.passwordResetMessages =
      object.passwordResetMessages?.map((e) => SetCustomPasswordResetMessageTextRequest.fromPartial(e)) || [];
    message.verifyEmailMessages =
      object.verifyEmailMessages?.map((e) => SetCustomVerifyEmailMessageTextRequest.fromPartial(e)) || [];
    message.verifyPhoneMessages =
      object.verifyPhoneMessages?.map((e) => SetCustomVerifyPhoneMessageTextRequest.fromPartial(e)) || [];
    message.domainClaimedMessages =
      object.domainClaimedMessages?.map((e) => SetCustomDomainClaimedMessageTextRequest.fromPartial(e)) || [];
    message.passwordlessRegistrationMessages =
      object.passwordlessRegistrationMessages?.map((e) =>
        SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(e)
      ) || [];
    message.oidcIdps = object.oidcIdps?.map((e) => DataOIDCIDP.fromPartial(e)) || [];
    message.jwtIdps = object.jwtIdps?.map((e) => DataJWTIDP.fromPartial(e)) || [];
    message.userLinks = object.userLinks?.map((e) => IDPUserLink.fromPartial(e)) || [];
    message.domains = object.domains?.map((e) => Domain3.fromPartial(e)) || [];
    message.appKeys = object.appKeys?.map((e) => DataAppKey.fromPartial(e)) || [];
    message.machineKeys = object.machineKeys?.map((e) => DataMachineKey.fromPartial(e)) || [];
    message.verifySmsOtpMessages =
      object.verifySmsOtpMessages?.map((e) => SetCustomVerifySMSOTPMessageTextRequest.fromPartial(e)) || [];
    message.verifyEmailOtpMessages =
      object.verifyEmailOtpMessages?.map((e) => SetCustomVerifyEmailOTPMessageTextRequest.fromPartial(e)) || [];
    message.inviteUserMessages =
      object.inviteUserMessages?.map((e) => SetCustomInviteUserMessageTextRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportDataResponse(): ImportDataResponse {
  return { errors: [], success: undefined };
}

export const ImportDataResponse: MessageFns<ImportDataResponse> = {
  encode(message: ImportDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      ImportDataError.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.success !== undefined) {
      ImportDataSuccess.encode(message.success, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(ImportDataError.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.success = ImportDataSuccess.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataResponse {
    return {
      errors: globalThis.Array.isArray(object?.errors)
        ? object.errors.map((e: any) => ImportDataError.fromJSON(e))
        : [],
      success: isSet(object.success) ? ImportDataSuccess.fromJSON(object.success) : undefined,
    };
  },

  toJSON(message: ImportDataResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => ImportDataError.toJSON(e));
    }
    if (message.success !== undefined) {
      obj.success = ImportDataSuccess.toJSON(message.success);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataResponse>): ImportDataResponse {
    return ImportDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataResponse>): ImportDataResponse {
    const message = createBaseImportDataResponse();
    message.errors = object.errors?.map((e) => ImportDataError.fromPartial(e)) || [];
    message.success = (object.success !== undefined && object.success !== null)
      ? ImportDataSuccess.fromPartial(object.success)
      : undefined;
    return message;
  },
};

function createBaseImportDataError(): ImportDataError {
  return { type: "", id: "", message: "" };
}

export const ImportDataError: MessageFns<ImportDataError> = {
  encode(message: ImportDataError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataError {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ImportDataError): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataError>): ImportDataError {
    return ImportDataError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataError>): ImportDataError {
    const message = createBaseImportDataError();
    message.type = object.type ?? "";
    message.id = object.id ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseImportDataSuccess(): ImportDataSuccess {
  return { orgs: [] };
}

export const ImportDataSuccess: MessageFns<ImportDataSuccess> = {
  encode(message: ImportDataSuccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orgs) {
      ImportDataSuccessOrg.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgs.push(ImportDataSuccessOrg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccess {
    return {
      orgs: globalThis.Array.isArray(object?.orgs) ? object.orgs.map((e: any) => ImportDataSuccessOrg.fromJSON(e)) : [],
    };
  },

  toJSON(message: ImportDataSuccess): unknown {
    const obj: any = {};
    if (message.orgs?.length) {
      obj.orgs = message.orgs.map((e) => ImportDataSuccessOrg.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccess>): ImportDataSuccess {
    return ImportDataSuccess.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccess>): ImportDataSuccess {
    const message = createBaseImportDataSuccess();
    message.orgs = object.orgs?.map((e) => ImportDataSuccessOrg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportDataSuccessOrg(): ImportDataSuccessOrg {
  return {
    orgId: "",
    projectIds: [],
    projectRoles: [],
    oidcAppIds: [],
    apiAppIds: [],
    humanUserIds: [],
    machineUserIds: [],
    actionIds: [],
    triggerActions: [],
    projectGrants: [],
    userGrants: [],
    orgMembers: [],
    projectMembers: [],
    projectGrantMembers: [],
    oidcIpds: [],
    jwtIdps: [],
    idpLinks: [],
    userLinks: [],
    userMetadata: [],
    domains: [],
    appKeys: [],
    machineKeys: [],
  };
}

export const ImportDataSuccessOrg: MessageFns<ImportDataSuccessOrg> = {
  encode(message: ImportDataSuccessOrg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== "") {
      writer.uint32(10).string(message.orgId);
    }
    for (const v of message.projectIds) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.projectRoles) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.oidcAppIds) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.apiAppIds) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.humanUserIds) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.machineUserIds) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.actionIds) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.triggerActions) {
      SetTriggerActionsRequest.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.projectGrants) {
      ImportDataSuccessProjectGrant.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.userGrants) {
      ImportDataSuccessUserGrant.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.orgMembers) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.projectMembers) {
      ImportDataSuccessProjectMember.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.projectGrantMembers) {
      ImportDataSuccessProjectGrantMember.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.oidcIpds) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.jwtIdps) {
      writer.uint32(130).string(v!);
    }
    for (const v of message.idpLinks) {
      writer.uint32(138).string(v!);
    }
    for (const v of message.userLinks) {
      ImportDataSuccessUserLinks.encode(v!, writer.uint32(146).fork()).join();
    }
    for (const v of message.userMetadata) {
      ImportDataSuccessUserMetadata.encode(v!, writer.uint32(154).fork()).join();
    }
    for (const v of message.domains) {
      writer.uint32(162).string(v!);
    }
    for (const v of message.appKeys) {
      writer.uint32(170).string(v!);
    }
    for (const v of message.machineKeys) {
      writer.uint32(178).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessOrg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectRoles.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.oidcAppIds.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.apiAppIds.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.humanUserIds.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.machineUserIds.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.actionIds.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.triggerActions.push(SetTriggerActionsRequest.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.projectGrants.push(ImportDataSuccessProjectGrant.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.userGrants.push(ImportDataSuccessUserGrant.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.orgMembers.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.projectMembers.push(ImportDataSuccessProjectMember.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.projectGrantMembers.push(ImportDataSuccessProjectGrantMember.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.oidcIpds.push(reader.string());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.jwtIdps.push(reader.string());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.idpLinks.push(reader.string());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.userLinks.push(ImportDataSuccessUserLinks.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.userMetadata.push(ImportDataSuccessUserMetadata.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.domains.push(reader.string());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.appKeys.push(reader.string());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.machineKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessOrg {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
      projectIds: globalThis.Array.isArray(object?.projectIds)
        ? object.projectIds.map((e: any) => globalThis.String(e))
        : [],
      projectRoles: globalThis.Array.isArray(object?.projectRoles)
        ? object.projectRoles.map((e: any) => globalThis.String(e))
        : [],
      oidcAppIds: globalThis.Array.isArray(object?.oidcAppIds)
        ? object.oidcAppIds.map((e: any) => globalThis.String(e))
        : [],
      apiAppIds: globalThis.Array.isArray(object?.apiAppIds)
        ? object.apiAppIds.map((e: any) => globalThis.String(e))
        : [],
      humanUserIds: globalThis.Array.isArray(object?.humanUserIds)
        ? object.humanUserIds.map((e: any) => globalThis.String(e))
        : [],
      machineUserIds: globalThis.Array.isArray(object?.machineUserIds)
        ? object.machineUserIds.map((e: any) => globalThis.String(e))
        : [],
      actionIds: globalThis.Array.isArray(object?.actionIds)
        ? object.actionIds.map((e: any) => globalThis.String(e))
        : [],
      triggerActions: globalThis.Array.isArray(object?.triggerActions)
        ? object.triggerActions.map((e: any) => SetTriggerActionsRequest.fromJSON(e))
        : [],
      projectGrants: globalThis.Array.isArray(object?.projectGrants)
        ? object.projectGrants.map((e: any) => ImportDataSuccessProjectGrant.fromJSON(e))
        : [],
      userGrants: globalThis.Array.isArray(object?.userGrants)
        ? object.userGrants.map((e: any) => ImportDataSuccessUserGrant.fromJSON(e))
        : [],
      orgMembers: globalThis.Array.isArray(object?.orgMembers)
        ? object.orgMembers.map((e: any) => globalThis.String(e))
        : [],
      projectMembers: globalThis.Array.isArray(object?.projectMembers)
        ? object.projectMembers.map((e: any) => ImportDataSuccessProjectMember.fromJSON(e))
        : [],
      projectGrantMembers: globalThis.Array.isArray(object?.projectGrantMembers)
        ? object.projectGrantMembers.map((e: any) => ImportDataSuccessProjectGrantMember.fromJSON(e))
        : [],
      oidcIpds: globalThis.Array.isArray(object?.oidcIpds) ? object.oidcIpds.map((e: any) => globalThis.String(e)) : [],
      jwtIdps: globalThis.Array.isArray(object?.jwtIdps) ? object.jwtIdps.map((e: any) => globalThis.String(e)) : [],
      idpLinks: globalThis.Array.isArray(object?.idpLinks) ? object.idpLinks.map((e: any) => globalThis.String(e)) : [],
      userLinks: globalThis.Array.isArray(object?.userLinks)
        ? object.userLinks.map((e: any) => ImportDataSuccessUserLinks.fromJSON(e))
        : [],
      userMetadata: globalThis.Array.isArray(object?.userMetadata)
        ? object.userMetadata.map((e: any) => ImportDataSuccessUserMetadata.fromJSON(e))
        : [],
      domains: globalThis.Array.isArray(object?.domains)
        ? object.domains.map((e: any) => globalThis.String(e))
        : [],
      appKeys: globalThis.Array.isArray(object?.appKeys) ? object.appKeys.map((e: any) => globalThis.String(e)) : [],
      machineKeys: globalThis.Array.isArray(object?.machineKeys)
        ? object.machineKeys.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ImportDataSuccessOrg): unknown {
    const obj: any = {};
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.projectIds?.length) {
      obj.projectIds = message.projectIds;
    }
    if (message.projectRoles?.length) {
      obj.projectRoles = message.projectRoles;
    }
    if (message.oidcAppIds?.length) {
      obj.oidcAppIds = message.oidcAppIds;
    }
    if (message.apiAppIds?.length) {
      obj.apiAppIds = message.apiAppIds;
    }
    if (message.humanUserIds?.length) {
      obj.humanUserIds = message.humanUserIds;
    }
    if (message.machineUserIds?.length) {
      obj.machineUserIds = message.machineUserIds;
    }
    if (message.actionIds?.length) {
      obj.actionIds = message.actionIds;
    }
    if (message.triggerActions?.length) {
      obj.triggerActions = message.triggerActions.map((e) => SetTriggerActionsRequest.toJSON(e));
    }
    if (message.projectGrants?.length) {
      obj.projectGrants = message.projectGrants.map((e) => ImportDataSuccessProjectGrant.toJSON(e));
    }
    if (message.userGrants?.length) {
      obj.userGrants = message.userGrants.map((e) => ImportDataSuccessUserGrant.toJSON(e));
    }
    if (message.orgMembers?.length) {
      obj.orgMembers = message.orgMembers;
    }
    if (message.projectMembers?.length) {
      obj.projectMembers = message.projectMembers.map((e) => ImportDataSuccessProjectMember.toJSON(e));
    }
    if (message.projectGrantMembers?.length) {
      obj.projectGrantMembers = message.projectGrantMembers.map((e) => ImportDataSuccessProjectGrantMember.toJSON(e));
    }
    if (message.oidcIpds?.length) {
      obj.oidcIpds = message.oidcIpds;
    }
    if (message.jwtIdps?.length) {
      obj.jwtIdps = message.jwtIdps;
    }
    if (message.idpLinks?.length) {
      obj.idpLinks = message.idpLinks;
    }
    if (message.userLinks?.length) {
      obj.userLinks = message.userLinks.map((e) => ImportDataSuccessUserLinks.toJSON(e));
    }
    if (message.userMetadata?.length) {
      obj.userMetadata = message.userMetadata.map((e) => ImportDataSuccessUserMetadata.toJSON(e));
    }
    if (message.domains?.length) {
      obj.domains = message.domains;
    }
    if (message.appKeys?.length) {
      obj.appKeys = message.appKeys;
    }
    if (message.machineKeys?.length) {
      obj.machineKeys = message.machineKeys;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessOrg>): ImportDataSuccessOrg {
    return ImportDataSuccessOrg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessOrg>): ImportDataSuccessOrg {
    const message = createBaseImportDataSuccessOrg();
    message.orgId = object.orgId ?? "";
    message.projectIds = object.projectIds?.map((e) => e) || [];
    message.projectRoles = object.projectRoles?.map((e) => e) || [];
    message.oidcAppIds = object.oidcAppIds?.map((e) => e) || [];
    message.apiAppIds = object.apiAppIds?.map((e) => e) || [];
    message.humanUserIds = object.humanUserIds?.map((e) => e) || [];
    message.machineUserIds = object.machineUserIds?.map((e) => e) || [];
    message.actionIds = object.actionIds?.map((e) => e) || [];
    message.triggerActions = object.triggerActions?.map((e) => SetTriggerActionsRequest.fromPartial(e)) || [];
    message.projectGrants = object.projectGrants?.map((e) => ImportDataSuccessProjectGrant.fromPartial(e)) || [];
    message.userGrants = object.userGrants?.map((e) => ImportDataSuccessUserGrant.fromPartial(e)) || [];
    message.orgMembers = object.orgMembers?.map((e) => e) || [];
    message.projectMembers = object.projectMembers?.map((e) => ImportDataSuccessProjectMember.fromPartial(e)) || [];
    message.projectGrantMembers =
      object.projectGrantMembers?.map((e) => ImportDataSuccessProjectGrantMember.fromPartial(e)) || [];
    message.oidcIpds = object.oidcIpds?.map((e) => e) || [];
    message.jwtIdps = object.jwtIdps?.map((e) => e) || [];
    message.idpLinks = object.idpLinks?.map((e) => e) || [];
    message.userLinks = object.userLinks?.map((e) => ImportDataSuccessUserLinks.fromPartial(e)) || [];
    message.userMetadata = object.userMetadata?.map((e) => ImportDataSuccessUserMetadata.fromPartial(e)) || [];
    message.domains = object.domains?.map((e) => e) || [];
    message.appKeys = object.appKeys?.map((e) => e) || [];
    message.machineKeys = object.machineKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseImportDataSuccessProjectGrant(): ImportDataSuccessProjectGrant {
  return { grantId: "", projectId: "", orgId: "" };
}

export const ImportDataSuccessProjectGrant: MessageFns<ImportDataSuccessProjectGrant> = {
  encode(message: ImportDataSuccessProjectGrant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grantId !== "") {
      writer.uint32(10).string(message.grantId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.orgId !== "") {
      writer.uint32(26).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessProjectGrant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessProjectGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.orgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessProjectGrant {
    return {
      grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
    };
  },

  toJSON(message: ImportDataSuccessProjectGrant): unknown {
    const obj: any = {};
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessProjectGrant>): ImportDataSuccessProjectGrant {
    return ImportDataSuccessProjectGrant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessProjectGrant>): ImportDataSuccessProjectGrant {
    const message = createBaseImportDataSuccessProjectGrant();
    message.grantId = object.grantId ?? "";
    message.projectId = object.projectId ?? "";
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessUserGrant(): ImportDataSuccessUserGrant {
  return { projectId: "", userId: "" };
}

export const ImportDataSuccessUserGrant: MessageFns<ImportDataSuccessUserGrant> = {
  encode(message: ImportDataSuccessUserGrant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessUserGrant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessUserGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessUserGrant {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: ImportDataSuccessUserGrant): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessUserGrant>): ImportDataSuccessUserGrant {
    return ImportDataSuccessUserGrant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessUserGrant>): ImportDataSuccessUserGrant {
    const message = createBaseImportDataSuccessUserGrant();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessProjectMember(): ImportDataSuccessProjectMember {
  return { projectId: "", userId: "" };
}

export const ImportDataSuccessProjectMember: MessageFns<ImportDataSuccessProjectMember> = {
  encode(message: ImportDataSuccessProjectMember, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessProjectMember {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessProjectMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessProjectMember {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: ImportDataSuccessProjectMember): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessProjectMember>): ImportDataSuccessProjectMember {
    return ImportDataSuccessProjectMember.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessProjectMember>): ImportDataSuccessProjectMember {
    const message = createBaseImportDataSuccessProjectMember();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessProjectGrantMember(): ImportDataSuccessProjectGrantMember {
  return { projectId: "", grantId: "", userId: "" };
}

export const ImportDataSuccessProjectGrantMember: MessageFns<ImportDataSuccessProjectGrantMember> = {
  encode(message: ImportDataSuccessProjectGrantMember, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessProjectGrantMember {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessProjectGrantMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessProjectGrantMember {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: ImportDataSuccessProjectGrantMember): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.grantId !== "") {
      obj.grantId = message.grantId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessProjectGrantMember>): ImportDataSuccessProjectGrantMember {
    return ImportDataSuccessProjectGrantMember.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessProjectGrantMember>): ImportDataSuccessProjectGrantMember {
    const message = createBaseImportDataSuccessProjectGrantMember();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessUserLinks(): ImportDataSuccessUserLinks {
  return { userId: "", externalUserId: "", displayName: "", idpId: "" };
}

export const ImportDataSuccessUserLinks: MessageFns<ImportDataSuccessUserLinks> = {
  encode(message: ImportDataSuccessUserLinks, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.externalUserId !== "") {
      writer.uint32(18).string(message.externalUserId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.idpId !== "") {
      writer.uint32(34).string(message.idpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessUserLinks {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessUserLinks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalUserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessUserLinks {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      externalUserId: isSet(object.externalUserId) ? globalThis.String(object.externalUserId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
    };
  },

  toJSON(message: ImportDataSuccessUserLinks): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.externalUserId !== "") {
      obj.externalUserId = message.externalUserId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.idpId !== "") {
      obj.idpId = message.idpId;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessUserLinks>): ImportDataSuccessUserLinks {
    return ImportDataSuccessUserLinks.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessUserLinks>): ImportDataSuccessUserLinks {
    const message = createBaseImportDataSuccessUserLinks();
    message.userId = object.userId ?? "";
    message.externalUserId = object.externalUserId ?? "";
    message.displayName = object.displayName ?? "";
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseImportDataSuccessUserMetadata(): ImportDataSuccessUserMetadata {
  return { userId: "", key: "" };
}

export const ImportDataSuccessUserMetadata: MessageFns<ImportDataSuccessUserMetadata> = {
  encode(message: ImportDataSuccessUserMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataSuccessUserMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataSuccessUserMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataSuccessUserMetadata {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: ImportDataSuccessUserMetadata): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataSuccessUserMetadata>): ImportDataSuccessUserMetadata {
    return ImportDataSuccessUserMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataSuccessUserMetadata>): ImportDataSuccessUserMetadata {
    const message = createBaseImportDataSuccessUserMetadata();
    message.userId = object.userId ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseExportDataRequest(): ExportDataRequest {
  return {
    orgIds: [],
    excludedOrgIds: [],
    withPasswords: false,
    withOtp: false,
    responseOutput: false,
    localOutput: undefined,
    s3Output: undefined,
    gcsOutput: undefined,
    timeout: "",
  };
}

export const ExportDataRequest: MessageFns<ExportDataRequest> = {
  encode(message: ExportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orgIds) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.excludedOrgIds) {
      writer.uint32(18).string(v!);
    }
    if (message.withPasswords !== false) {
      writer.uint32(24).bool(message.withPasswords);
    }
    if (message.withOtp !== false) {
      writer.uint32(32).bool(message.withOtp);
    }
    if (message.responseOutput !== false) {
      writer.uint32(40).bool(message.responseOutput);
    }
    if (message.localOutput !== undefined) {
      ExportDataRequest_LocalOutput.encode(message.localOutput, writer.uint32(50).fork()).join();
    }
    if (message.s3Output !== undefined) {
      ExportDataRequest_S3Output.encode(message.s3Output, writer.uint32(58).fork()).join();
    }
    if (message.gcsOutput !== undefined) {
      ExportDataRequest_GCSOutput.encode(message.gcsOutput, writer.uint32(66).fork()).join();
    }
    if (message.timeout !== "") {
      writer.uint32(74).string(message.timeout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.excludedOrgIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.withPasswords = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.withOtp = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.responseOutput = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.localOutput = ExportDataRequest_LocalOutput.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.s3Output = ExportDataRequest_S3Output.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gcsOutput = ExportDataRequest_GCSOutput.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.timeout = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest {
    return {
      orgIds: globalThis.Array.isArray(object?.orgIds) ? object.orgIds.map((e: any) => globalThis.String(e)) : [],
      excludedOrgIds: globalThis.Array.isArray(object?.excludedOrgIds)
        ? object.excludedOrgIds.map((e: any) => globalThis.String(e))
        : [],
      withPasswords: isSet(object.withPasswords) ? globalThis.Boolean(object.withPasswords) : false,
      withOtp: isSet(object.withOtp) ? globalThis.Boolean(object.withOtp) : false,
      responseOutput: isSet(object.responseOutput) ? globalThis.Boolean(object.responseOutput) : false,
      localOutput: isSet(object.localOutput) ? ExportDataRequest_LocalOutput.fromJSON(object.localOutput) : undefined,
      s3Output: isSet(object.s3Output) ? ExportDataRequest_S3Output.fromJSON(object.s3Output) : undefined,
      gcsOutput: isSet(object.gcsOutput) ? ExportDataRequest_GCSOutput.fromJSON(object.gcsOutput) : undefined,
      timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
    };
  },

  toJSON(message: ExportDataRequest): unknown {
    const obj: any = {};
    if (message.orgIds?.length) {
      obj.orgIds = message.orgIds;
    }
    if (message.excludedOrgIds?.length) {
      obj.excludedOrgIds = message.excludedOrgIds;
    }
    if (message.withPasswords !== false) {
      obj.withPasswords = message.withPasswords;
    }
    if (message.withOtp !== false) {
      obj.withOtp = message.withOtp;
    }
    if (message.responseOutput !== false) {
      obj.responseOutput = message.responseOutput;
    }
    if (message.localOutput !== undefined) {
      obj.localOutput = ExportDataRequest_LocalOutput.toJSON(message.localOutput);
    }
    if (message.s3Output !== undefined) {
      obj.s3Output = ExportDataRequest_S3Output.toJSON(message.s3Output);
    }
    if (message.gcsOutput !== undefined) {
      obj.gcsOutput = ExportDataRequest_GCSOutput.toJSON(message.gcsOutput);
    }
    if (message.timeout !== "") {
      obj.timeout = message.timeout;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest>): ExportDataRequest {
    return ExportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest>): ExportDataRequest {
    const message = createBaseExportDataRequest();
    message.orgIds = object.orgIds?.map((e) => e) || [];
    message.excludedOrgIds = object.excludedOrgIds?.map((e) => e) || [];
    message.withPasswords = object.withPasswords ?? false;
    message.withOtp = object.withOtp ?? false;
    message.responseOutput = object.responseOutput ?? false;
    message.localOutput = (object.localOutput !== undefined && object.localOutput !== null)
      ? ExportDataRequest_LocalOutput.fromPartial(object.localOutput)
      : undefined;
    message.s3Output = (object.s3Output !== undefined && object.s3Output !== null)
      ? ExportDataRequest_S3Output.fromPartial(object.s3Output)
      : undefined;
    message.gcsOutput = (object.gcsOutput !== undefined && object.gcsOutput !== null)
      ? ExportDataRequest_GCSOutput.fromPartial(object.gcsOutput)
      : undefined;
    message.timeout = object.timeout ?? "";
    return message;
  },
};

function createBaseExportDataRequest_LocalOutput(): ExportDataRequest_LocalOutput {
  return { path: "" };
}

export const ExportDataRequest_LocalOutput: MessageFns<ExportDataRequest_LocalOutput> = {
  encode(message: ExportDataRequest_LocalOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest_LocalOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest_LocalOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest_LocalOutput {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: ExportDataRequest_LocalOutput): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest_LocalOutput>): ExportDataRequest_LocalOutput {
    return ExportDataRequest_LocalOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest_LocalOutput>): ExportDataRequest_LocalOutput {
    const message = createBaseExportDataRequest_LocalOutput();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseExportDataRequest_S3Output(): ExportDataRequest_S3Output {
  return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}

export const ExportDataRequest_S3Output: MessageFns<ExportDataRequest_S3Output> = {
  encode(message: ExportDataRequest_S3Output, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    if (message.accessKeyId !== "") {
      writer.uint32(26).string(message.accessKeyId);
    }
    if (message.secretAccessKey !== "") {
      writer.uint32(34).string(message.secretAccessKey);
    }
    if (message.ssl !== false) {
      writer.uint32(40).bool(message.ssl);
    }
    if (message.bucket !== "") {
      writer.uint32(50).string(message.bucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest_S3Output {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest_S3Output();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accessKeyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.secretAccessKey = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ssl = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bucket = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest_S3Output {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
      secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
      ssl: isSet(object.ssl) ? globalThis.Boolean(object.ssl) : false,
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
    };
  },

  toJSON(message: ExportDataRequest_S3Output): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.accessKeyId !== "") {
      obj.accessKeyId = message.accessKeyId;
    }
    if (message.secretAccessKey !== "") {
      obj.secretAccessKey = message.secretAccessKey;
    }
    if (message.ssl !== false) {
      obj.ssl = message.ssl;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest_S3Output>): ExportDataRequest_S3Output {
    return ExportDataRequest_S3Output.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest_S3Output>): ExportDataRequest_S3Output {
    const message = createBaseExportDataRequest_S3Output();
    message.path = object.path ?? "";
    message.endpoint = object.endpoint ?? "";
    message.accessKeyId = object.accessKeyId ?? "";
    message.secretAccessKey = object.secretAccessKey ?? "";
    message.ssl = object.ssl ?? false;
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseExportDataRequest_GCSOutput(): ExportDataRequest_GCSOutput {
  return { bucket: "", serviceaccountJson: "", path: "" };
}

export const ExportDataRequest_GCSOutput: MessageFns<ExportDataRequest_GCSOutput> = {
  encode(message: ExportDataRequest_GCSOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.serviceaccountJson !== "") {
      writer.uint32(18).string(message.serviceaccountJson);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest_GCSOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest_GCSOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceaccountJson = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest_GCSOutput {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      serviceaccountJson: isSet(object.serviceaccountJson) ? globalThis.String(object.serviceaccountJson) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
    };
  },

  toJSON(message: ExportDataRequest_GCSOutput): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.serviceaccountJson !== "") {
      obj.serviceaccountJson = message.serviceaccountJson;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest_GCSOutput>): ExportDataRequest_GCSOutput {
    return ExportDataRequest_GCSOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest_GCSOutput>): ExportDataRequest_GCSOutput {
    const message = createBaseExportDataRequest_GCSOutput();
    message.bucket = object.bucket ?? "";
    message.serviceaccountJson = object.serviceaccountJson ?? "";
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseExportDataResponse(): ExportDataResponse {
  return { orgs: [] };
}

export const ExportDataResponse: MessageFns<ExportDataResponse> = {
  encode(message: ExportDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orgs) {
      DataOrg.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgs.push(DataOrg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataResponse {
    return { orgs: globalThis.Array.isArray(object?.orgs) ? object.orgs.map((e: any) => DataOrg.fromJSON(e)) : [] };
  },

  toJSON(message: ExportDataResponse): unknown {
    const obj: any = {};
    if (message.orgs?.length) {
      obj.orgs = message.orgs.map((e) => DataOrg.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataResponse>): ExportDataResponse {
    return ExportDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataResponse>): ExportDataResponse {
    const message = createBaseExportDataResponse();
    message.orgs = object.orgs?.map((e) => DataOrg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListEventsRequest(): ListEventsRequest {
  return {
    sequence: Long.UZERO,
    limit: 0,
    asc: false,
    editorUserId: "",
    eventTypes: [],
    aggregateId: "",
    aggregateTypes: [],
    resourceOwner: "",
    creationDate: undefined,
    range: undefined,
    from: undefined,
  };
}

export const ListEventsRequest: MessageFns<ListEventsRequest> = {
  encode(message: ListEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.sequence.toString());
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.asc !== false) {
      writer.uint32(24).bool(message.asc);
    }
    if (message.editorUserId !== "") {
      writer.uint32(34).string(message.editorUserId);
    }
    for (const v of message.eventTypes) {
      writer.uint32(42).string(v!);
    }
    if (message.aggregateId !== "") {
      writer.uint32(50).string(message.aggregateId);
    }
    for (const v of message.aggregateTypes) {
      writer.uint32(58).string(v!);
    }
    if (message.resourceOwner !== "") {
      writer.uint32(66).string(message.resourceOwner);
    }
    if (message.creationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.creationDate), writer.uint32(74).fork()).join();
    }
    if (message.range !== undefined) {
      ListEventsRequest_creationDateRange.encode(message.range, writer.uint32(82).fork()).join();
    }
    if (message.from !== undefined) {
      Timestamp.encode(toTimestamp(message.from), writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.asc = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.editorUserId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.eventTypes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.aggregateTypes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.resourceOwner = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.creationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.range = ListEventsRequest_creationDateRange.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.from = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsRequest {
    return {
      sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      asc: isSet(object.asc) ? globalThis.Boolean(object.asc) : false,
      editorUserId: isSet(object.editorUserId) ? globalThis.String(object.editorUserId) : "",
      eventTypes: globalThis.Array.isArray(object?.eventTypes)
        ? object.eventTypes.map((e: any) => globalThis.String(e))
        : [],
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      aggregateTypes: globalThis.Array.isArray(object?.aggregateTypes)
        ? object.aggregateTypes.map((e: any) => globalThis.String(e))
        : [],
      resourceOwner: isSet(object.resourceOwner) ? globalThis.String(object.resourceOwner) : "",
      creationDate: isSet(object.creationDate) ? fromJsonTimestamp(object.creationDate) : undefined,
      range: isSet(object.range) ? ListEventsRequest_creationDateRange.fromJSON(object.range) : undefined,
      from: isSet(object.from) ? fromJsonTimestamp(object.from) : undefined,
    };
  },

  toJSON(message: ListEventsRequest): unknown {
    const obj: any = {};
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.asc !== false) {
      obj.asc = message.asc;
    }
    if (message.editorUserId !== "") {
      obj.editorUserId = message.editorUserId;
    }
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes;
    }
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.aggregateTypes?.length) {
      obj.aggregateTypes = message.aggregateTypes;
    }
    if (message.resourceOwner !== "") {
      obj.resourceOwner = message.resourceOwner;
    }
    if (message.creationDate !== undefined) {
      obj.creationDate = message.creationDate.toISOString();
    }
    if (message.range !== undefined) {
      obj.range = ListEventsRequest_creationDateRange.toJSON(message.range);
    }
    if (message.from !== undefined) {
      obj.from = message.from.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventsRequest>): ListEventsRequest {
    return ListEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventsRequest>): ListEventsRequest {
    const message = createBaseListEventsRequest();
    message.sequence = (object.sequence !== undefined && object.sequence !== null)
      ? Long.fromValue(object.sequence)
      : Long.UZERO;
    message.limit = object.limit ?? 0;
    message.asc = object.asc ?? false;
    message.editorUserId = object.editorUserId ?? "";
    message.eventTypes = object.eventTypes?.map((e) => e) || [];
    message.aggregateId = object.aggregateId ?? "";
    message.aggregateTypes = object.aggregateTypes?.map((e) => e) || [];
    message.resourceOwner = object.resourceOwner ?? "";
    message.creationDate = object.creationDate ?? undefined;
    message.range = (object.range !== undefined && object.range !== null)
      ? ListEventsRequest_creationDateRange.fromPartial(object.range)
      : undefined;
    message.from = object.from ?? undefined;
    return message;
  },
};

function createBaseListEventsRequest_creationDateRange(): ListEventsRequest_creationDateRange {
  return { since: undefined, until: undefined };
}

export const ListEventsRequest_creationDateRange: MessageFns<ListEventsRequest_creationDateRange> = {
  encode(message: ListEventsRequest_creationDateRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.since !== undefined) {
      Timestamp.encode(toTimestamp(message.since), writer.uint32(10).fork()).join();
    }
    if (message.until !== undefined) {
      Timestamp.encode(toTimestamp(message.until), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventsRequest_creationDateRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsRequest_creationDateRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.since = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.until = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsRequest_creationDateRange {
    return {
      since: isSet(object.since) ? fromJsonTimestamp(object.since) : undefined,
      until: isSet(object.until) ? fromJsonTimestamp(object.until) : undefined,
    };
  },

  toJSON(message: ListEventsRequest_creationDateRange): unknown {
    const obj: any = {};
    if (message.since !== undefined) {
      obj.since = message.since.toISOString();
    }
    if (message.until !== undefined) {
      obj.until = message.until.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventsRequest_creationDateRange>): ListEventsRequest_creationDateRange {
    return ListEventsRequest_creationDateRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventsRequest_creationDateRange>): ListEventsRequest_creationDateRange {
    const message = createBaseListEventsRequest_creationDateRange();
    message.since = object.since ?? undefined;
    message.until = object.until ?? undefined;
    return message;
  },
};

function createBaseListEventsResponse(): ListEventsResponse {
  return { events: [] };
}

export const ListEventsResponse: MessageFns<ListEventsResponse> = {
  encode(message: ListEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsResponse {
    return { events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [] };
  },

  toJSON(message: ListEventsResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventsResponse>): ListEventsResponse {
    return ListEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventsResponse>): ListEventsResponse {
    const message = createBaseListEventsResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListEventTypesRequest(): ListEventTypesRequest {
  return {};
}

export const ListEventTypesRequest: MessageFns<ListEventTypesRequest> = {
  encode(_: ListEventTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListEventTypesRequest {
    return {};
  },

  toJSON(_: ListEventTypesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListEventTypesRequest>): ListEventTypesRequest {
    return ListEventTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListEventTypesRequest>): ListEventTypesRequest {
    const message = createBaseListEventTypesRequest();
    return message;
  },
};

function createBaseListEventTypesResponse(): ListEventTypesResponse {
  return { eventTypes: [] };
}

export const ListEventTypesResponse: MessageFns<ListEventTypesResponse> = {
  encode(message: ListEventTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.eventTypes) {
      EventType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventTypes.push(EventType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventTypesResponse {
    return {
      eventTypes: globalThis.Array.isArray(object?.eventTypes)
        ? object.eventTypes.map((e: any) => EventType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEventTypesResponse): unknown {
    const obj: any = {};
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes.map((e) => EventType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventTypesResponse>): ListEventTypesResponse {
    return ListEventTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventTypesResponse>): ListEventTypesResponse {
    const message = createBaseListEventTypesResponse();
    message.eventTypes = object.eventTypes?.map((e) => EventType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAggregateTypesRequest(): ListAggregateTypesRequest {
  return {};
}

export const ListAggregateTypesRequest: MessageFns<ListAggregateTypesRequest> = {
  encode(_: ListAggregateTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAggregateTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAggregateTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListAggregateTypesRequest {
    return {};
  },

  toJSON(_: ListAggregateTypesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListAggregateTypesRequest>): ListAggregateTypesRequest {
    return ListAggregateTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListAggregateTypesRequest>): ListAggregateTypesRequest {
    const message = createBaseListAggregateTypesRequest();
    return message;
  },
};

function createBaseListAggregateTypesResponse(): ListAggregateTypesResponse {
  return { aggregateTypes: [] };
}

export const ListAggregateTypesResponse: MessageFns<ListAggregateTypesResponse> = {
  encode(message: ListAggregateTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.aggregateTypes) {
      AggregateType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAggregateTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAggregateTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.aggregateTypes.push(AggregateType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAggregateTypesResponse {
    return {
      aggregateTypes: globalThis.Array.isArray(object?.aggregateTypes)
        ? object.aggregateTypes.map((e: any) => AggregateType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAggregateTypesResponse): unknown {
    const obj: any = {};
    if (message.aggregateTypes?.length) {
      obj.aggregateTypes = message.aggregateTypes.map((e) => AggregateType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAggregateTypesResponse>): ListAggregateTypesResponse {
    return ListAggregateTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAggregateTypesResponse>): ListAggregateTypesResponse {
    const message = createBaseListAggregateTypesResponse();
    message.aggregateTypes = object.aggregateTypes?.map((e) => AggregateType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseActivateFeatureLoginDefaultOrgRequest(): ActivateFeatureLoginDefaultOrgRequest {
  return {};
}

export const ActivateFeatureLoginDefaultOrgRequest: MessageFns<ActivateFeatureLoginDefaultOrgRequest> = {
  encode(_: ActivateFeatureLoginDefaultOrgRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateFeatureLoginDefaultOrgRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateFeatureLoginDefaultOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ActivateFeatureLoginDefaultOrgRequest {
    return {};
  },

  toJSON(_: ActivateFeatureLoginDefaultOrgRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ActivateFeatureLoginDefaultOrgRequest>): ActivateFeatureLoginDefaultOrgRequest {
    return ActivateFeatureLoginDefaultOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ActivateFeatureLoginDefaultOrgRequest>): ActivateFeatureLoginDefaultOrgRequest {
    const message = createBaseActivateFeatureLoginDefaultOrgRequest();
    return message;
  },
};

function createBaseActivateFeatureLoginDefaultOrgResponse(): ActivateFeatureLoginDefaultOrgResponse {
  return { details: undefined };
}

export const ActivateFeatureLoginDefaultOrgResponse: MessageFns<ActivateFeatureLoginDefaultOrgResponse> = {
  encode(message: ActivateFeatureLoginDefaultOrgResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateFeatureLoginDefaultOrgResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateFeatureLoginDefaultOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateFeatureLoginDefaultOrgResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: ActivateFeatureLoginDefaultOrgResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateFeatureLoginDefaultOrgResponse>): ActivateFeatureLoginDefaultOrgResponse {
    return ActivateFeatureLoginDefaultOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateFeatureLoginDefaultOrgResponse>): ActivateFeatureLoginDefaultOrgResponse {
    const message = createBaseActivateFeatureLoginDefaultOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListMilestonesRequest(): ListMilestonesRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListMilestonesRequest: MessageFns<ListMilestonesRequest> = {
  encode(message: ListMilestonesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).join();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      MilestoneQuery.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMilestonesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMilestonesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(MilestoneQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMilestonesRequest {
    return {
      query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
      sortingColumn: isSet(object.sortingColumn) ? milestoneFieldNameFromJSON(object.sortingColumn) : 0,
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => MilestoneQuery.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListMilestonesRequest): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = ListQuery.toJSON(message.query);
    }
    if (message.sortingColumn !== 0) {
      obj.sortingColumn = milestoneFieldNameToJSON(message.sortingColumn);
    }
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => MilestoneQuery.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListMilestonesRequest>): ListMilestonesRequest {
    return ListMilestonesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMilestonesRequest>): ListMilestonesRequest {
    const message = createBaseListMilestonesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => MilestoneQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListMilestonesResponse(): ListMilestonesResponse {
  return { details: undefined, result: [] };
}

export const ListMilestonesResponse: MessageFns<ListMilestonesResponse> = {
  encode(message: ListMilestonesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    for (const v of message.result) {
      Milestone.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMilestonesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMilestonesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Milestone.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMilestonesResponse {
    return {
      details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
      result: globalThis.Array.isArray(object?.result) ? object.result.map((e: any) => Milestone.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListMilestonesResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ListDetails.toJSON(message.details);
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => Milestone.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListMilestonesResponse>): ListMilestonesResponse {
    return ListMilestonesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMilestonesResponse>): ListMilestonesResponse {
    const message = createBaseListMilestonesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Milestone.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSetRestrictionsRequest(): SetRestrictionsRequest {
  return { disallowPublicOrgRegistration: undefined, allowedLanguages: undefined };
}

export const SetRestrictionsRequest: MessageFns<SetRestrictionsRequest> = {
  encode(message: SetRestrictionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disallowPublicOrgRegistration !== undefined) {
      writer.uint32(8).bool(message.disallowPublicOrgRegistration);
    }
    if (message.allowedLanguages !== undefined) {
      SelectLanguages.encode(message.allowedLanguages, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRestrictionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRestrictionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.disallowPublicOrgRegistration = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.allowedLanguages = SelectLanguages.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRestrictionsRequest {
    return {
      disallowPublicOrgRegistration: isSet(object.disallowPublicOrgRegistration)
        ? globalThis.Boolean(object.disallowPublicOrgRegistration)
        : undefined,
      allowedLanguages: isSet(object.allowedLanguages) ? SelectLanguages.fromJSON(object.allowedLanguages) : undefined,
    };
  },

  toJSON(message: SetRestrictionsRequest): unknown {
    const obj: any = {};
    if (message.disallowPublicOrgRegistration !== undefined) {
      obj.disallowPublicOrgRegistration = message.disallowPublicOrgRegistration;
    }
    if (message.allowedLanguages !== undefined) {
      obj.allowedLanguages = SelectLanguages.toJSON(message.allowedLanguages);
    }
    return obj;
  },

  create(base?: DeepPartial<SetRestrictionsRequest>): SetRestrictionsRequest {
    return SetRestrictionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetRestrictionsRequest>): SetRestrictionsRequest {
    const message = createBaseSetRestrictionsRequest();
    message.disallowPublicOrgRegistration = object.disallowPublicOrgRegistration ?? undefined;
    message.allowedLanguages = (object.allowedLanguages !== undefined && object.allowedLanguages !== null)
      ? SelectLanguages.fromPartial(object.allowedLanguages)
      : undefined;
    return message;
  },
};

function createBaseSelectLanguages(): SelectLanguages {
  return { list: [] };
}

export const SelectLanguages: MessageFns<SelectLanguages> = {
  encode(message: SelectLanguages, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.list) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SelectLanguages {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSelectLanguages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.list.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SelectLanguages {
    return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: SelectLanguages): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list;
    }
    return obj;
  },

  create(base?: DeepPartial<SelectLanguages>): SelectLanguages {
    return SelectLanguages.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SelectLanguages>): SelectLanguages {
    const message = createBaseSelectLanguages();
    message.list = object.list?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetRestrictionsResponse(): SetRestrictionsResponse {
  return { details: undefined };
}

export const SetRestrictionsResponse: MessageFns<SetRestrictionsResponse> = {
  encode(message: SetRestrictionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRestrictionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRestrictionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRestrictionsResponse {
    return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
  },

  toJSON(message: SetRestrictionsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<SetRestrictionsResponse>): SetRestrictionsResponse {
    return SetRestrictionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetRestrictionsResponse>): SetRestrictionsResponse {
    const message = createBaseSetRestrictionsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetRestrictionsRequest(): GetRestrictionsRequest {
  return {};
}

export const GetRestrictionsRequest: MessageFns<GetRestrictionsRequest> = {
  encode(_: GetRestrictionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRestrictionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRestrictionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetRestrictionsRequest {
    return {};
  },

  toJSON(_: GetRestrictionsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetRestrictionsRequest>): GetRestrictionsRequest {
    return GetRestrictionsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetRestrictionsRequest>): GetRestrictionsRequest {
    const message = createBaseGetRestrictionsRequest();
    return message;
  },
};

function createBaseGetRestrictionsResponse(): GetRestrictionsResponse {
  return { details: undefined, disallowPublicOrgRegistration: false, allowedLanguages: [] };
}

export const GetRestrictionsResponse: MessageFns<GetRestrictionsResponse> = {
  encode(message: GetRestrictionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.disallowPublicOrgRegistration !== false) {
      writer.uint32(16).bool(message.disallowPublicOrgRegistration);
    }
    for (const v of message.allowedLanguages) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRestrictionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRestrictionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.disallowPublicOrgRegistration = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.allowedLanguages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRestrictionsResponse {
    return {
      details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
      disallowPublicOrgRegistration: isSet(object.disallowPublicOrgRegistration)
        ? globalThis.Boolean(object.disallowPublicOrgRegistration)
        : false,
      allowedLanguages: globalThis.Array.isArray(object?.allowedLanguages)
        ? object.allowedLanguages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetRestrictionsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = ObjectDetails.toJSON(message.details);
    }
    if (message.disallowPublicOrgRegistration !== false) {
      obj.disallowPublicOrgRegistration = message.disallowPublicOrgRegistration;
    }
    if (message.allowedLanguages?.length) {
      obj.allowedLanguages = message.allowedLanguages;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRestrictionsResponse>): GetRestrictionsResponse {
    return GetRestrictionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRestrictionsResponse>): GetRestrictionsResponse {
    const message = createBaseGetRestrictionsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.disallowPublicOrgRegistration = object.disallowPublicOrgRegistration ?? false;
    message.allowedLanguages = object.allowedLanguages?.map((e) => e) || [];
    return message;
  },
};

export type AdminServiceDefinition = typeof AdminServiceDefinition;
export const AdminServiceDefinition = {
  name: "AdminService",
  fullName: "zitadel.admin.v1.AdminService",
  methods: {
    healthz: {
      name: "Healthz",
      requestType: HealthzRequest,
      requestStream: false,
      responseType: HealthzResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              210,
              1,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              7,
              72,
              101,
              97,
              108,
              116,
              104,
              122,
              26,
              126,
              84,
              104,
              101,
              32,
              104,
              101,
              97,
              108,
              116,
              104,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              115,
              32,
              97,
              110,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              116,
              111,
              32,
              112,
              114,
              111,
              98,
              101,
              32,
              105,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              97,
              108,
              105,
              118,
              101,
              46,
              32,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              90,
              73,
              84,
              65,
              68,
              76,
              69,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              46,
              74,
              24,
              10,
              3,
              50,
              48,
              48,
              18,
              17,
              10,
              15,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              116,
              97,
              114,
              116,
              101,
              100,
              74,
              36,
              10,
              7,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              18,
              25,
              10,
              23,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              78,
              79,
              84,
              32,
              115,
              116,
              97,
              114,
              116,
              101,
              100,
              32,
              121,
              101,
              116,
            ]),
          ],
          578365826: [Buffer.from([10, 18, 8, 47, 104, 101, 97, 108, 116, 104, 122])],
        },
      },
    },
    getSupportedLanguages: {
      name: "GetSupportedLanguages",
      requestType: GetSupportedLanguagesRequest,
      requestStream: false,
      responseType: GetSupportedLanguagesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              124,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              19,
              83,
              117,
              112,
              112,
              111,
              114,
              116,
              101,
              100,
              32,
              76,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              26,
              92,
              84,
              104,
              101,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              101,
              100,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              32,
              97,
              98,
              98,
              114,
              101,
              118,
              105,
              97,
              116,
              105,
              111,
              110,
              46,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [Buffer.from([12, 18, 10, 47, 108, 97, 110, 103, 117, 97, 103, 101, 115])],
        },
      },
    },
    getAllowedLanguages: {
      name: "GetAllowedLanguages",
      requestType: GetAllowedLanguagesRequest,
      requestStream: false,
      responseType: GetAllowedLanguagesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              136,
              1,
              10,
              12,
              82,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              17,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              32,
              76,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              26,
              101,
              73,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              101,
              100,
              44,
              32,
              111,
              110,
              108,
              121,
              32,
              116,
              104,
              111,
              115,
              101,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              46,
              32,
              69,
              108,
              115,
              101,
              44,
              32,
              97,
              108,
              108,
              32,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              101,
              100,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [
            Buffer.from([
              20,
              18,
              18,
              47,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              47,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
            ]),
          ],
        },
      },
    },
    setDefaultLanguage: {
      name: "SetDefaultLanguage",
      requestType: SetDefaultLanguageRequest,
      requestStream: false,
      responseType: SetDefaultLanguageResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              155,
              1,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              21,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              26,
              121,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              97,
              108,
              108,
              98,
              97,
              99,
              107,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              98,
              121,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              31,
              26,
              29,
              47,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultLanguage: {
      name: "GetDefaultLanguage",
      requestType: GetDefaultLanguageRequest,
      requestStream: false,
      responseType: GetDefaultLanguageResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              159,
              1,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              21,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              26,
              125,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              97,
              108,
              108,
              98,
              97,
              99,
              107,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              111,
              109,
              101,
              116,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              98,
              121,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              20,
              18,
              18,
              47,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
            ]),
          ],
        },
      },
    },
    getMyInstance: {
      name: "GetMyInstance",
      requestType: GetMyInstanceRequest,
      requestStream: false,
      responseType: GetMyInstanceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              116,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              15,
              71,
              101,
              116,
              32,
              77,
              121,
              32,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              26,
              87,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              32,
              97,
              98,
              111,
              117,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              115,
              117,
              99,
              104,
              32,
              97,
              115,
              32,
              116,
              104,
              101,
              32,
              110,
              97,
              109,
              101,
              44,
              32,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              101,
              116,
              99,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([15, 18, 13, 47, 105, 110, 115, 116, 97, 110, 99, 101, 115, 47, 109, 101])],
        },
      },
    },
    listInstanceDomains: {
      name: "ListInstanceDomains",
      requestType: ListInstanceDomainsRequest,
      requestStream: false,
      responseType: ListInstanceDomainsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              160,
              1,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              21,
              76,
              105,
              115,
              116,
              32,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              115,
              26,
              125,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              85,
              82,
              76,
              115,
              32,
              119,
              104,
              101,
              114,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([18, 34, 16, 47, 100, 111, 109, 97, 105, 110, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
          ],
        },
      },
    },
    listInstanceTrustedDomains: {
      name: "ListInstanceTrustedDomains",
      requestType: ListInstanceTrustedDomainsRequest,
      requestStream: false,
      responseType: ListInstanceTrustedDomainsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              169,
              1,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              29,
              76,
              105,
              115,
              116,
              32,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              84,
              114,
              117,
              115,
              116,
              101,
              100,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              115,
              26,
              126,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              114,
              117,
              115,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              112,
              117,
              98,
              108,
              105,
              99,
              32,
              104,
              111,
              115,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              26,
              34,
              24,
              47,
              116,
              114,
              117,
              115,
              116,
              101,
              100,
              95,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addInstanceTrustedDomain: {
      name: "AddInstanceTrustedDomain",
      requestType: AddInstanceTrustedDomainRequest,
      requestStream: false,
      responseType: AddInstanceTrustedDomainResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              170,
              1,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              30,
              65,
              100,
              100,
              32,
              97,
              110,
              32,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              84,
              114,
              117,
              115,
              116,
              101,
              100,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              126,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              114,
              117,
              115,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              112,
              117,
              98,
              108,
              105,
              99,
              32,
              104,
              111,
              115,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              116,
              114,
              117,
              115,
              116,
              101,
              100,
              95,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
            ]),
          ],
        },
      },
    },
    removeInstanceTrustedDomain: {
      name: "RemoveInstanceTrustedDomain",
      requestType: RemoveInstanceTrustedDomainRequest,
      requestStream: false,
      responseType: RemoveInstanceTrustedDomainResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              173,
              1,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              33,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              110,
              32,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              84,
              114,
              117,
              115,
              116,
              101,
              100,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              126,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              114,
              117,
              115,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              112,
              117,
              98,
              108,
              105,
              99,
              32,
              104,
              111,
              115,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              42,
              25,
              47,
              116,
              114,
              117,
              115,
              116,
              101,
              100,
              95,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              123,
              100,
              111,
              109,
              97,
              105,
              110,
              125,
            ]),
          ],
        },
      },
    },
    listSecretGenerators: {
      name: "ListSecretGenerators",
      requestType: ListSecretGeneratorsRequest,
      requestStream: false,
      responseType: ListSecretGeneratorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              212,
              1,
              10,
              7,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              18,
              22,
              76,
              105,
              115,
              116,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              26,
              176,
              1,
              76,
              105,
              115,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              119,
              104,
              101,
              110,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              69,
              46,
              103,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              100,
              101,
              44,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              100,
              101,
              44,
              32,
              101,
              116,
              99,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getSecretGenerator: {
      name: "GetSecretGenerator",
      requestType: GetSecretGeneratorRequest,
      requestStream: false,
      responseType: GetSecretGeneratorResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              175,
              1,
              10,
              7,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              18,
              20,
              71,
              101,
              116,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              26,
              141,
              1,
              71,
              101,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              116,
              121,
              112,
              101,
              32,
              40,
              101,
              46,
              103,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              82,
              101,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              41,
              46,
              32,
              65,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              119,
              104,
              101,
              110,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              110,
              103,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              123,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              95,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
    updateSecretGenerator: {
      name: "UpdateSecretGenerator",
      requestType: UpdateSecretGeneratorRequest,
      requestStream: false,
      responseType: UpdateSecretGeneratorResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              195,
              1,
              10,
              7,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              18,
              23,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              26,
              158,
              1,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              116,
              121,
              112,
              101,
              32,
              40,
              101,
              46,
              103,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              82,
              101,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              41,
              46,
              32,
              65,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              119,
              104,
              101,
              110,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              105,
              110,
              103,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              26,
              34,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              115,
              47,
              123,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              95,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Get active SMTP Configuration
     *
     * Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.
     *
     * Deprecated: please move to the new endpoint GetEmailProvider.
     */
    getSMTPConfig: {
      name: "GetSMTPConfig",
      requestType: GetSMTPConfigRequest,
      requestStream: false,
      responseType: GetSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([7, 18, 5, 47, 115, 109, 116, 112])],
        },
      },
    },
    /**
     * Deprecated: Get SMTP provider configuration by its id
     *
     * Get a specific SMTP provider configuration by its ID.
     *
     * Deprecated: please move to the new endpoint GetEmailProviderById.
     */
    getSMTPConfigById: {
      name: "GetSMTPConfigById",
      requestType: GetSMTPConfigByIdRequest,
      requestStream: false,
      responseType: GetSMTPConfigByIdResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([12, 18, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
        },
      },
    },
    /**
     * Deprecated: Add SMTP Configuration
     *
     * Add a new SMTP configuration if nothing is set yet.
     *
     * Deprecated: please move to the new endpoint AddEmailProviderSMTP.
     */
    addSMTPConfig: {
      name: "AddSMTPConfig",
      requestType: AddSMTPConfigRequest,
      requestStream: false,
      responseType: AddSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([10, 58, 1, 42, 34, 5, 47, 115, 109, 116, 112])],
        },
      },
    },
    /**
     * Deprecated: Update SMTP Configuration
     *
     * Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
     *
     * Deprecated: please move to the new endpoint UpdateEmailProviderSMTP.
     */
    updateSMTPConfig: {
      name: "UpdateSMTPConfig",
      requestType: UpdateSMTPConfigRequest,
      requestStream: false,
      responseType: UpdateSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([15, 58, 1, 42, 26, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
        },
      },
    },
    /**
     * Deprecated: Update SMTP Password
     *
     * Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
     *
     * Deprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.
     */
    updateSMTPConfigPassword: {
      name: "UpdateSMTPConfigPassword",
      requestType: UpdateSMTPConfigPasswordRequest,
      requestStream: false,
      responseType: UpdateSMTPConfigPasswordResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              24,
              58,
              1,
              42,
              26,
              19,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Activate SMTP Provider
     *
     * Activate an SMTP provider.
     *
     * Deprecated: please move to the new endpoint ActivateEmailProvider.
     */
    activateSMTPConfig: {
      name: "ActivateSMTPConfig",
      requestType: ActivateSMTPConfigRequest,
      requestStream: false,
      responseType: ActivateSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              68,
              10,
              12,
              83,
              77,
              84,
              80,
              32,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              22,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              83,
              77,
              84,
              80,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              26,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              83,
              77,
              84,
              80,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Deactivate SMTP Provider
     *
     * Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.
     *
     * Deprecated: please move to the new endpoint DeactivateEmailProvider.
     */
    deactivateSMTPConfig: {
      name: "DeactivateSMTPConfig",
      requestType: DeactivateSMTPConfigRequest,
      requestStream: false,
      responseType: DeactivateSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Remove SMTP Configuration
     *
     * Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.
     *
     * Deprecated: please move to the new endpoint RemoveEmailProvider.
     */
    removeSMTPConfig: {
      name: "RemoveSMTPConfig",
      requestType: RemoveSMTPConfigRequest,
      requestStream: false,
      responseType: RemoveSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([12, 42, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
        },
      },
    },
    /**
     * Deprecated: Test SMTP Provider
     *
     * Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.
     *
     * Deprecated: please move to the new endpoint TestEmailProviderSMTPById.
     */
    testSMTPConfigById: {
      name: "TestSMTPConfigById",
      requestType: TestSMTPConfigByIdRequest,
      requestStream: false,
      responseType: TestSMTPConfigByIdResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              116,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Test SMTP Provider
     *
     * Test an SMTP provider. After testing the provider, the users will receive information about the test results.
     *
     * Deprecated: please move to the new endpoint TestEmailProviderSMTP.
     */
    testSMTPConfig: {
      name: "TestSMTPConfig",
      requestType: TestSMTPConfigRequest,
      requestStream: false,
      responseType: TestSMTPConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 115, 109, 116, 112, 47, 95, 116, 101, 115, 116])],
        },
      },
    },
    /**
     * Deprecated: List SMTP Configs
     *
     * Returns a list of SMTP configurations.
     *
     * Deprecated: please move to the new endpoint ListEmailProviders.
     */
    listSMTPConfigs: {
      name: "ListSMTPConfigs",
      requestType: ListSMTPConfigsRequest,
      requestStream: false,
      responseType: ListSMTPConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 115, 109, 116, 112, 47, 95, 115, 101, 97, 114, 99, 104])],
        },
      },
    },
    listEmailProviders: {
      name: "ListEmailProviders",
      requestType: ListEmailProvidersRequest,
      requestStream: false,
      responseType: ListEmailProvidersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              74,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              20,
              76,
              105,
              115,
              116,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              26,
              34,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([19, 58, 1, 42, 34, 14, 47, 101, 109, 97, 105, 108, 47, 95, 115, 101, 97, 114, 99, 104]),
          ],
        },
      },
    },
    getEmailProvider: {
      name: "GetEmailProvider",
      requestType: GetEmailProviderRequest,
      requestStream: false,
      responseType: GetEmailProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              138,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              25,
              71,
              101,
              116,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              93,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([8, 18, 6, 47, 101, 109, 97, 105, 108])],
        },
      },
    },
    getEmailProviderById: {
      name: "GetEmailProviderById",
      requestType: GetEmailProviderByIdRequest,
      requestStream: false,
      responseType: GetEmailProviderByIdResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              88,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              28,
              71,
              101,
              116,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              105,
              100,
              26,
              40,
              71,
              101,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              73,
              68,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([13, 18, 11, 47, 101, 109, 97, 105, 108, 47, 123, 105, 100, 125])],
        },
      },
    },
    addEmailProviderSMTP: {
      name: "AddEmailProviderSMTP",
      requestType: AddEmailProviderSMTPRequest,
      requestStream: false,
      responseType: AddEmailProviderSMTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              95,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              23,
              65,
              100,
              100,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              52,
              65,
              100,
              100,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              104,
              105,
              110,
              103,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              121,
              101,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 101, 109, 97, 105, 108, 47, 115, 109, 116, 112])],
        },
      },
    },
    updateEmailProviderSMTP: {
      name: "UpdateEmailProviderSMTP",
      requestType: UpdateEmailProviderSMTPRequest,
      requestStream: false,
      responseType: UpdateEmailProviderSMTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              26,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              160,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              98,
              101,
              32,
              97,
              119,
              97,
              114,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              115,
              97,
              118,
              101,
              100,
              46,
              32,
              83,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              83,
              77,
              84,
              80,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    addEmailProviderHTTP: {
      name: "AddEmailProviderHTTP",
      requestType: AddEmailProviderHTTPRequest,
      requestStream: false,
      responseType: AddEmailProviderHTTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              95,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              23,
              65,
              100,
              100,
              32,
              72,
              84,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              52,
              65,
              100,
              100,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              72,
              84,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              104,
              105,
              110,
              103,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              121,
              101,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 101, 109, 97, 105, 108, 47, 104, 116, 116, 112])],
        },
      },
    },
    updateEmailProviderHTTP: {
      name: "UpdateEmailProviderHTTP",
      requestType: UpdateEmailProviderHTTPRequest,
      requestStream: false,
      responseType: UpdateEmailProviderHTTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              26,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              72,
              84,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              160,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              72,
              84,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              98,
              101,
              32,
              97,
              119,
              97,
              114,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              115,
              97,
              118,
              101,
              100,
              46,
              32,
              83,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              72,
              84,
              84,
              80,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              104,
              116,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    updateEmailProviderSMTPPassword: {
      name: "UpdateEmailProviderSMTPPassword",
      requestType: UpdateEmailProviderSMTPPasswordRequest,
      requestStream: false,
      responseType: UpdateEmailProviderSMTPPasswordResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              221,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              20,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              83,
              77,
              84,
              80,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              26,
              180,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              83,
              77,
              84,
              80,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              104,
              111,
              115,
              116,
              44,
              32,
              98,
              101,
              32,
              97,
              119,
              97,
              114,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              115,
              97,
              118,
              101,
              100,
              46,
              32,
              83,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              83,
              77,
              84,
              80,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              30,
              58,
              1,
              42,
              26,
              25,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
            ]),
          ],
        },
      },
    },
    activateEmailProvider: {
      name: "ActivateEmailProvider",
      requestType: ActivateEmailProviderRequest,
      requestStream: false,
      responseType: ActivateEmailProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              70,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              23,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              27,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    deactivateEmailProvider: {
      name: "DeactivateEmailProvider",
      requestType: DeactivateEmailProviderRequest,
      requestStream: false,
      responseType: DeactivateEmailProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              194,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              25,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              148,
              1,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              102,
              116,
              101,
              114,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              97,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeEmailProvider: {
      name: "RemoveEmailProvider",
      requestType: RemoveEmailProviderRequest,
      requestStream: false,
      responseType: RemoveEmailProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              137,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              21,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              96,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              98,
              101,
              32,
              97,
              119,
              97,
              114,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              103,
              101,
              116,
              32,
              97,
              110,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              32,
              105,
              102,
              32,
              110,
              111,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([13, 42, 11, 47, 101, 109, 97, 105, 108, 47, 123, 105, 100, 125])],
        },
      },
    },
    testEmailProviderSMTPById: {
      name: "TestEmailProviderSMTPById",
      requestType: TestEmailProviderSMTPByIdRequest,
      requestStream: false,
      responseType: TestEmailProviderSMTPByIdResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              181,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              24,
              84,
              101,
              115,
              116,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              136,
              1,
              84,
              101,
              115,
              116,
              32,
              97,
              110,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              73,
              68,
              46,
              32,
              65,
              102,
              116,
              101,
              114,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              98,
              111,
              117,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              115,
              109,
              116,
              112,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              116,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    testEmailProviderSMTP: {
      name: "TestEmailProviderSMTP",
      requestType: TestEmailProviderSMTPRequest,
      requestStream: false,
      responseType: TestEmailProviderSMTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              159,
              1,
              10,
              14,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              24,
              84,
              101,
              115,
              116,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              115,
              84,
              101,
              115,
              116,
              32,
              97,
              110,
              32,
              83,
              77,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              102,
              116,
              101,
              114,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              98,
              111,
              117,
              116,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              115,
              109,
              116,
              112,
              47,
              95,
              116,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    listSMSProviders: {
      name: "ListSMSProviders",
      requestType: ListSMSProvidersRequest,
      requestStream: false,
      responseType: ListSMSProvidersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              79,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              18,
              76,
              105,
              115,
              116,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              26,
              43,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 115, 109, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
        },
      },
    },
    getSMSProvider: {
      name: "GetSMSProvider",
      requestType: GetSMSProviderRequest,
      requestStream: false,
      responseType: GetSMSProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              72,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              16,
              71,
              101,
              116,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              38,
              71,
              101,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              73,
              68,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([11, 18, 9, 47, 115, 109, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    addSMSProviderTwilio: {
      name: "AddSMSProviderTwilio",
      requestType: AddSMSProviderTwilioRequest,
      requestStream: false,
      responseType: AddSMSProviderTwilioResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              154,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              23,
              65,
              100,
              100,
              32,
              84,
              119,
              105,
              108,
              105,
              111,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              113,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              84,
              119,
              105,
              108,
              105,
              111,
              46,
              32,
              65,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 115, 109, 115, 47, 116, 119, 105, 108, 105, 111])],
        },
      },
    },
    updateSMSProviderTwilio: {
      name: "UpdateSMSProviderTwilio",
      requestType: UpdateSMSProviderTwilioRequest,
      requestStream: false,
      responseType: UpdateSMSProviderTwilioResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              174,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              26,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              84,
              119,
              105,
              108,
              105,
              111,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              129,
              1,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              84,
              119,
              105,
              108,
              105,
              111,
              46,
              32,
              32,
              65,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              115,
              109,
              115,
              47,
              116,
              119,
              105,
              108,
              105,
              111,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    updateSMSProviderTwilioToken: {
      name: "UpdateSMSProviderTwilioToken",
      requestType: UpdateSMSProviderTwilioTokenRequest,
      requestStream: false,
      responseType: UpdateSMSProviderTwilioTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              106,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              84,
              119,
              105,
              108,
              105,
              111,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              84,
              111,
              107,
              101,
              110,
              26,
              56,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              84,
              119,
              105,
              108,
              105,
              111,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              115,
              109,
              115,
              47,
              116,
              119,
              105,
              108,
              105,
              111,
              47,
              123,
              105,
              100,
              125,
              47,
              116,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    addSMSProviderHTTP: {
      name: "AddSMSProviderHTTP",
      requestType: AddSMSProviderHTTPRequest,
      requestStream: false,
      responseType: AddSMSProviderHTTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              150,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              21,
              65,
              100,
              100,
              32,
              72,
              84,
              84,
              80,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              111,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              72,
              84,
              84,
              80,
              46,
              32,
              65,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([14, 58, 1, 42, 34, 9, 47, 115, 109, 115, 47, 104, 116, 116, 112])],
        },
      },
    },
    updateSMSProviderHTTP: {
      name: "UpdateSMSProviderHTTP",
      requestType: UpdateSMSProviderHTTPRequest,
      requestStream: false,
      responseType: UpdateSMSProviderHTTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              168,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              24,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              72,
              84,
              84,
              80,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              126,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              72,
              84,
              84,
              80,
              46,
              32,
              65,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([19, 58, 1, 42, 26, 14, 47, 115, 109, 115, 47, 104, 116, 116, 112, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    activateSMSProvider: {
      name: "ActivateSMSProvider",
      requestType: ActivateSMSProviderRequest,
      requestStream: false,
      responseType: ActivateSMSProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              146,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              21,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              107,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              102,
              116,
              101,
              114,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              105,
              110,
              103,
              32,
              97,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              83,
              77,
              83,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              24,
              58,
              1,
              42,
              34,
              19,
              47,
              115,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    deactivateSMSProvider: {
      name: "DeactivateSMSProvider",
      requestType: DeactivateSMSProviderRequest,
      requestStream: false,
      responseType: DeactivateSMSProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              254,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              23,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              212,
              1,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              102,
              116,
              101,
              114,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              83,
              77,
              83,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              97,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              73,
              102,
              32,
              105,
              116,
              32,
              119,
              97,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              115,
              116,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              104,
              101,
              121,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              103,
              101,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              116,
              32,
              97,
              108,
              108,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              115,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeSMSProvider: {
      name: "RemoveSMSProvider",
      requestType: RemoveSMSProviderRequest,
      requestStream: false,
      responseType: RemoveSMSProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              162,
              1,
              10,
              12,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              19,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              83,
              77,
              83,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              125,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              119,
              97,
              115,
              32,
              115,
              116,
              105,
              108,
              108,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              97,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([11, 42, 9, 47, 115, 109, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    getOIDCSettings: {
      name: "GetOIDCSettings",
      requestType: GetOIDCSettingsRequest,
      requestStream: false,
      responseType: GetOIDCSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              102,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              17,
              71,
              101,
              116,
              32,
              79,
              73,
              68,
              67,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              71,
              84,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              102,
              101,
              116,
              105,
              109,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              105,
              110,
              32,
              79,
              73,
              68,
              67,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([16, 18, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99])],
        },
      },
    },
    addOIDCSettings: {
      name: "AddOIDCSettings",
      requestType: AddOIDCSettingsRequest,
      requestStream: false,
      responseType: AddOIDCSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              188,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              17,
              65,
              100,
              100,
              32,
              79,
              73,
              68,
              67,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              156,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              110,
              101,
              119,
              32,
              79,
              73,
              68,
              67,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              102,
              101,
              116,
              105,
              109,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              105,
              110,
              32,
              79,
              73,
              68,
              67,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([19, 58, 1, 42, 34, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99]),
          ],
        },
      },
    },
    updateOIDCSettings: {
      name: "UpdateOIDCSettings",
      requestType: UpdateOIDCSettingsRequest,
      requestStream: false,
      responseType: UpdateOIDCSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              193,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              17,
              65,
              100,
              100,
              32,
              79,
              73,
              68,
              67,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              161,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              79,
              73,
              68,
              67,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              102,
              101,
              116,
              105,
              109,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              105,
              110,
              32,
              79,
              73,
              68,
              67,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([19, 58, 1, 42, 26, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99]),
          ],
        },
      },
    },
    getFileSystemNotificationProvider: {
      name: "GetFileSystemNotificationProvider",
      requestType: GetFileSystemNotificationProviderRequest,
      requestStream: false,
      responseType: GetFileSystemNotificationProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              224,
              1,
              10,
              22,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              70,
              105,
              108,
              101,
              115,
              121,
              115,
              116,
              101,
              109,
              26,
              159,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              102,
              105,
              108,
              101,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              102,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              108,
              101,
              115,
              121,
              115,
              116,
              101,
              109,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              29,
              18,
              27,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              47,
              102,
              105,
              108,
              101,
            ]),
          ],
        },
      },
    },
    getLogNotificationProvider: {
      name: "GetLogNotificationProvider",
      requestType: GetLogNotificationProviderRequest,
      requestStream: false,
      responseType: GetLogNotificationProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              204,
              1,
              10,
              22,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              29,
              71,
              101,
              116,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              76,
              111,
              103,
              26,
              146,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              111,
              103,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              102,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              28,
              18,
              26,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              47,
              108,
              111,
              103,
            ]),
          ],
        },
      },
    },
    getSecurityPolicy: {
      name: "GetSecurityPolicy",
      requestType: GetSecurityPolicyRequest,
      requestStream: false,
      responseType: GetSecurityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              89,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              21,
              71,
              101,
              116,
              32,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              54,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              20,
              18,
              18,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    setSecurityPolicy: {
      name: "SetSecurityPolicy",
      requestType: SetSecurityPolicyRequest,
      requestStream: false,
      responseType: SetSecurityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              85,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              21,
              83,
              101,
              116,
              32,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              50,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              23,
              58,
              1,
              42,
              26,
              18,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    getOrgByID: {
      name: "GetOrgByID",
      requestType: GetOrgByIDRequest,
      requestStream: false,
      responseType: GetOrgByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              172,
              1,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              101,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              73,
              68,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              28,
              10,
              3,
              50,
              48,
              48,
              18,
              21,
              10,
              19,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              32,
              102,
              111,
              117,
              110,
              100,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([12, 18, 10, 47, 111, 114, 103, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    isOrgUnique: {
      name: "IsOrgUnique",
      requestType: IsOrgUniqueRequest,
      requestStream: false,
      responseType: IsOrgUniqueResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              182,
              1,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              73,
              115,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              85,
              110,
              105,
              113,
              117,
              101,
              26,
              77,
              67,
              104,
              101,
              99,
              107,
              115,
              32,
              105,
              102,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              101,
              100,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              111,
              114,
              32,
              110,
              111,
              116,
              46,
              74,
              24,
              10,
              3,
              50,
              48,
              48,
              18,
              17,
              10,
              15,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              116,
              97,
              114,
              116,
              101,
              100,
              74,
              36,
              10,
              7,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              18,
              25,
              10,
              23,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              78,
              79,
              84,
              32,
              115,
              116,
              97,
              114,
              116,
              101,
              100,
              32,
              121,
              101,
              116,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([18, 18, 16, 47, 111, 114, 103, 115, 47, 95, 105, 115, 95, 117, 110, 105, 113, 117, 101]),
          ],
        },
      },
    },
    setDefaultOrg: {
      name: "SetDefaultOrg",
      requestType: SetDefaultOrgRequest,
      requestStream: false,
      responseType: SetDefaultOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              222,
              1,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              24,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              168,
              1,
              83,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              102,
              32,
              110,
              111,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              102,
              111,
              114,
              109,
              44,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              24,
              26,
              22,
              47,
              111,
              114,
              103,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultOrg: {
      name: "GetDefaultOrg",
      requestType: GetDefaultOrgRequest,
      requestStream: false,
      responseType: GetDefaultOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              221,
              1,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              24,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              167,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              102,
              32,
              110,
              111,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              102,
              111,
              114,
              109,
              44,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([15, 18, 13, 47, 111, 114, 103, 115, 47, 100, 101, 102, 97, 117, 108, 116])],
        },
      },
    },
    listOrgs: {
      name: "ListOrgs",
      requestType: ListOrgsRequest,
      requestStream: false,
      responseType: ListOrgsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              132,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              113,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              109,
              97,
              116,
              99,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              115,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              101,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              110,
              32,
              65,
              78,
              68,
              32,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              46,
              74,
              49,
              10,
              3,
              50,
              48,
              48,
              18,
              42,
              10,
              40,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              113,
              117,
              101,
              114,
              121,
              74,
              56,
              10,
              3,
              52,
              48,
              48,
              18,
              49,
              10,
              18,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              108,
              105,
              115,
              116,
              32,
              113,
              117,
              101,
              114,
              121,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 111, 114, 103, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
        },
      },
    },
    setUpOrg: {
      name: "SetUpOrg",
      requestType: SetUpOrgRequest,
      requestStream: false,
      responseType: SetUpOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              177,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              18,
              83,
              101,
              116,
              117,
              112,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              142,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              118,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              110,
              111,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              117,
              115,
              101,
              114,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              79,
              82,
              71,
              95,
              79,
              87,
              78,
              69,
              82,
              46,
              74,
              64,
              10,
              3,
              50,
              48,
              48,
              18,
              57,
              10,
              55,
              111,
              114,
              103,
              44,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              32,
              119,
              101,
              114,
              101,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              74,
              57,
              10,
              3,
              52,
              48,
              48,
              18,
              50,
              10,
              19,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              103,
              32,
              111,
              114,
              32,
              117,
              115,
              101,
              114,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 111, 114, 103, 115, 47, 95, 115, 101, 116, 117, 112])],
        },
      },
    },
    removeOrg: {
      name: "RemoveOrg",
      requestType: RemoveOrgRequest,
      requestStream: false,
      responseType: RemoveOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              145,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              148,
              1,
              68,
              101,
              108,
              101,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              108,
              108,
              32,
              105,
              116,
              115,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              32,
              40,
              85,
              115,
              101,
              114,
              115,
              44,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              44,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              32,
              116,
              111,
              32,
              97,
              110,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              41,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              46,
              74,
              33,
              10,
              3,
              50,
              48,
              48,
              18,
              26,
              10,
              24,
              111,
              114,
              103,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              74,
              49,
              10,
              3,
              52,
              48,
              48,
              18,
              42,
              10,
              11,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              103,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 42, 14, 47, 111, 114, 103, 115, 47, 123, 111, 114, 103, 95, 105, 100, 125])],
        },
      },
    },
    getIDPByID: {
      name: "GetIDPByID",
      requestType: GetIDPByIDRequest,
      requestStream: false,
      responseType: GetIDPByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              237,
              1,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              45,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              71,
              101,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              32,
              98,
              121,
              32,
              73,
              68,
              26,
              90,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              41,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              73,
              68,
              32,
              101,
              46,
              103,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              46,
              74,
              18,
              10,
              3,
              50,
              48,
              48,
              18,
              11,
              10,
              9,
              73,
              68,
              80,
              32,
              102,
              111,
              117,
              110,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 105, 97, 109, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([12, 18, 10, 47, 105, 100, 112, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    listIDPs: {
      name: "ListIDPs",
      requestType: ListIDPsRequest,
      requestStream: false,
      responseType: ListIDPsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              136,
              2,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              43,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              121,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              40,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              101,
              46,
              103,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              46,
              74,
              19,
              10,
              3,
              50,
              48,
              48,
              18,
              12,
              10,
              10,
              105,
              100,
              112,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              74,
              51,
              10,
              3,
              52,
              48,
              48,
              18,
              44,
              10,
              13,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              113,
              117,
              101,
              114,
              121,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 105, 97, 109, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 105, 100, 112, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
        },
      },
    },
    addOIDCIDP: {
      name: "AddOIDCIDP",
      requestType: AddOIDCIDPRequest,
      requestStream: false,
      responseType: AddOIDCIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              165,
              2,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              44,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              65,
              100,
              100,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              144,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              99,
              111,
              109,
              112,
              108,
              105,
              97,
              110,
              116,
              46,
              74,
              20,
              10,
              3,
              50,
              48,
              48,
              18,
              13,
              10,
              11,
              105,
              100,
              112,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 111, 105, 100, 99])],
        },
      },
    },
    addJWTIDP: {
      name: "AddJWTIDP",
      requestType: AddJWTIDPRequest,
      requestStream: false,
      responseType: AddJWTIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              194,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              43,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              65,
              100,
              100,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              174,
              2,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              74,
              83,
              79,
              78,
              32,
              87,
              101,
              98,
              32,
              84,
              111,
              107,
              101,
              110,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              74,
              87,
              84,
              32,
              73,
              68,
              80,
              41,
              32,
              103,
              105,
              118,
              101,
              115,
              32,
              121,
              111,
              117,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              121,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              97,
              110,
              32,
              40,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              41,
              32,
              74,
              87,
              84,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              46,
              32,
              89,
              111,
              117,
              32,
              104,
              97,
              118,
              101,
              32,
              116,
              111,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              32,
              97,
              110,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              119,
              104,
              101,
              114,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              99,
              97,
              110,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              74,
              87,
              84,
              32,
              116,
              111,
              107,
              101,
              110,
              46,
              74,
              20,
              10,
              3,
              50,
              48,
              48,
              18,
              13,
              10,
              11,
              105,
              100,
              112,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([14, 58, 1, 42, 34, 9, 47, 105, 100, 112, 115, 47, 106, 119, 116])],
        },
      },
    },
    updateIDP: {
      name: "UpdateIDP",
      requestType: UpdateIDPRequest,
      requestStream: false,
      responseType: UpdateIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              132,
              2,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              42,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              114,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              73,
              68,
              80,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              110,
              32,
              97,
              32,
              102,
              105,
              101,
              108,
              100,
              44,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              20,
              10,
              3,
              50,
              48,
              48,
              18,
              13,
              10,
              11,
              105,
              100,
              112,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([19, 58, 1, 42, 26, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125]),
          ],
        },
      },
    },
    deactivateIDP: {
      name: "DeactivateIDP",
      requestType: DeactivateIDPRequest,
      requestStream: false,
      responseType: DeactivateIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              157,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              46,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              250,
              1,
              83,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              116,
              111,
              32,
              105,
              110,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              73,
              116,
              32,
              99,
              97,
              110,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              73,
              116,
              32,
              109,
              105,
              103,
              104,
              116,
              32,
              99,
              97,
              117,
              115,
              101,
              32,
              116,
              114,
              111,
              117,
              98,
              108,
              101,
              115,
              32,
              105,
              102,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              116,
              104,
              111,
              100,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              74,
              24,
              10,
              3,
              50,
              48,
              48,
              18,
              17,
              10,
              15,
              105,
              100,
              112,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              74,
              62,
              10,
              3,
              52,
              48,
              48,
              18,
              55,
              10,
              24,
              85,
              110,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              73,
              68,
              80,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              28,
              34,
              26,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateIDP: {
      name: "ReactivateIDP",
      requestType: ReactivateIDPRequest,
      requestStream: false,
      responseType: ReactivateIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              201,
              2,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              46,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              166,
              1,
              83,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              73,
              116,
              32,
              99,
              97,
              110,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              105,
              110,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              103,
              97,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              74,
              24,
              10,
              3,
              50,
              48,
              48,
              18,
              17,
              10,
              15,
              105,
              100,
              112,
              32,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              74,
              62,
              10,
              3,
              52,
              48,
              48,
              18,
              55,
              10,
              24,
              117,
              110,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              73,
              68,
              80,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              28,
              34,
              26,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeIDP: {
      name: "RemoveIDP",
      requestType: RemoveIDPRequest,
      requestStream: false,
      responseType: RemoveIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              131,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              42,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              236,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              112,
              101,
              114,
              109,
              97,
              110,
              101,
              110,
              116,
              108,
              121,
              46,
              32,
              65,
              108,
              108,
              32,
              108,
              105,
              110,
              107,
              115,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              73,
              68,
              80,
              32,
              111,
              110,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              119,
              101,
              108,
              108,
              46,
              32,
              84,
              104,
              101,
              121,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              73,
              102,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              105,
              114,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              121,
              32,
              105,
              116,
              32,
              109,
              105,
              103,
              104,
              116,
              32,
              99,
              97,
              117,
              115,
              101,
              32,
              112,
              114,
              111,
              98,
              108,
              101,
              109,
              115,
              46,
              74,
              20,
              10,
              3,
              50,
              48,
              48,
              18,
              13,
              10,
              11,
              105,
              100,
              112,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              74,
              58,
              10,
              3,
              52,
              48,
              48,
              18,
              51,
              10,
              20,
              117,
              110,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              68,
              80,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 42, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125])],
        },
      },
    },
    updateIDPOIDCConfig: {
      name: "UpdateIDPOIDCConfig",
      requestType: UpdateIDPOIDCConfigRequest,
      requestStream: false,
      responseType: UpdateIDPOIDCConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              234,
              2,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              47,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              143,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              45,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              28,
              10,
              3,
              50,
              48,
              48,
              18,
              21,
              10,
              19,
              79,
              73,
              68,
              67,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              74,
              57,
              10,
              3,
              52,
              48,
              57,
              18,
              50,
              10,
              19,
              112,
              114,
              101,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              31,
              58,
              1,
              42,
              26,
              26,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              111,
              105,
              100,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    updateIDPJWTConfig: {
      name: "UpdateIDPJWTConfig",
      requestType: UpdateIDPJWTConfigRequest,
      requestStream: false,
      responseType: UpdateIDPJWTConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              231,
              2,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              46,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              142,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              74,
              87,
              84,
              45,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              27,
              10,
              3,
              50,
              48,
              48,
              18,
              20,
              10,
              18,
              74,
              87,
              84,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              74,
              57,
              10,
              3,
              52,
              48,
              57,
              18,
              50,
              10,
              19,
              112,
              114,
              101,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              30,
              58,
              1,
              42,
              26,
              25,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              106,
              119,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Returns all identity providers, which match the query
     * Limit should always be set, there is a default limit set by the service
     */
    listProviders: {
      name: "ListProviders",
      requestType: ListProvidersRequest,
      requestStream: false,
      responseType: ListProvidersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              168,
              1,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              23,
              76,
              105,
              115,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              26,
              121,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              40,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              101,
              46,
              103,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              105,
              100,
              112,
              115,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Returns an identity provider of the instance */
    getProviderByID: {
      name: "GetProviderByID",
      requestType: GetProviderByIDRequest,
      requestStream: false,
      responseType: GetProviderByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              49,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              27,
              71,
              101,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              66,
              121,
              32,
              73,
              68,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              22,
              18,
              20,
              47,
              105,
              100,
              112,
              115,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new OAuth2 identity provider on the instance */
    addGenericOAuthProvider: {
      name: "AddGenericOAuthProvider",
      requestType: AddGenericOAuthProviderRequest,
      requestStream: false,
      responseType: AddGenericOAuthProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              57,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              35,
              65,
              100,
              100,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 111, 97, 117, 116, 104])],
        },
      },
    },
    /** Change an existing OAuth2 identity provider on the instance */
    updateGenericOAuthProvider: {
      name: "UpdateGenericOAuthProvider",
      requestType: UpdateGenericOAuthProviderRequest,
      requestStream: false,
      responseType: UpdateGenericOAuthProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              60,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              38,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              105,
              100,
              112,
              115,
              47,
              111,
              97,
              117,
              116,
              104,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new OIDC identity provider on the instance */
    addGenericOIDCProvider: {
      name: "AddGenericOIDCProvider",
      requestType: AddGenericOIDCProviderRequest,
      requestStream: false,
      responseType: AddGenericOIDCProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              56,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              34,
              65,
              100,
              100,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              23,
              58,
              1,
              42,
              34,
              18,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              111,
              105,
              100,
              99,
            ]),
          ],
        },
      },
    },
    /** Change an existing OIDC identity provider on the instance */
    updateGenericOIDCProvider: {
      name: "UpdateGenericOIDCProvider",
      requestType: UpdateGenericOIDCProviderRequest,
      requestStream: false,
      responseType: UpdateGenericOIDCProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              59,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              37,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              28,
              58,
              1,
              42,
              26,
              23,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              111,
              105,
              100,
              99,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Migrate an existing OIDC identity provider on the instance */
    migrateGenericOIDCProvider: {
      name: "MigrateGenericOIDCProvider",
      requestType: MigrateGenericOIDCProviderRequest,
      requestStream: false,
      responseType: MigrateGenericOIDCProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              60,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              38,
              77,
              105,
              103,
              114,
              97,
              116,
              101,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              111,
              105,
              100,
              99,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              109,
              105,
              103,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Add a new JWT identity provider on the instance */
    addJWTProvider: {
      name: "AddJWTProvider",
      requestType: AddJWTProviderRequest,
      requestStream: false,
      responseType: AddJWTProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              47,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              25,
              65,
              100,
              100,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              106,
              119,
              116,
            ]),
          ],
        },
      },
    },
    /** Change an existing JWT identity provider on the instance */
    updateJWTProvider: {
      name: "UpdateJWTProvider",
      requestType: UpdateJWTProviderRequest,
      requestStream: false,
      responseType: UpdateJWTProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              106,
              119,
              116,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new Azure AD identity provider on the instance */
    addAzureADProvider: {
      name: "AddAzureADProvider",
      requestType: AddAzureADProviderRequest,
      requestStream: false,
      responseType: AddAzureADProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              51,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              29,
              65,
              100,
              100,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 122, 117, 114, 101])],
        },
      },
    },
    /** Change an existing Azure AD identity provider on the instance */
    updateAzureADProvider: {
      name: "UpdateAzureADProvider",
      requestType: UpdateAzureADProviderRequest,
      requestStream: false,
      responseType: UpdateAzureADProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              54,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              105,
              100,
              112,
              115,
              47,
              97,
              122,
              117,
              114,
              101,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new GitHub identity provider on the instance */
    addGitHubProvider: {
      name: "AddGitHubProvider",
      requestType: AddGitHubProviderRequest,
      requestStream: false,
      responseType: AddGitHubProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98])],
        },
      },
    },
    /** Change an existing GitHub identity provider on the instance */
    updateGitHubProvider: {
      name: "UpdateGitHubProvider",
      requestType: UpdateGitHubProviderRequest,
      requestStream: false,
      responseType: UpdateGitHubProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              53,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new GitHub Enterprise Server identity provider on the instance */
    addGitHubEnterpriseServerProvider: {
      name: "AddGitHubEnterpriseServerProvider",
      requestType: AddGitHubEnterpriseServerProviderRequest,
      requestStream: false,
      responseType: AddGitHubEnterpriseServerProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              61,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              39,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              69,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([20, 58, 1, 42, 34, 15, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98, 95, 101, 115]),
          ],
        },
      },
    },
    /** Change an existing GitHub Enterprise Server identity provider on the instance */
    updateGitHubEnterpriseServerProvider: {
      name: "UpdateGitHubEnterpriseServerProvider",
      requestType: UpdateGitHubEnterpriseServerProviderRequest,
      requestStream: false,
      responseType: UpdateGitHubEnterpriseServerProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              64,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              42,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              69,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              25,
              58,
              1,
              42,
              26,
              20,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              95,
              101,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new GitLab identity provider on the instance */
    addGitLabProvider: {
      name: "AddGitLabProvider",
      requestType: AddGitLabProviderRequest,
      requestStream: false,
      responseType: AddGitLabProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 108, 97, 98])],
        },
      },
    },
    /** Change an existing GitLab identity provider on the instance */
    updateGitLabProvider: {
      name: "UpdateGitLabProvider",
      requestType: UpdateGitLabProviderRequest,
      requestStream: false,
      responseType: UpdateGitLabProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              53,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              108,
              97,
              98,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new self hosted GitLab identity provider on the instance */
    addGitLabSelfHostedProvider: {
      name: "AddGitLabSelfHostedProvider",
      requestType: AddGitLabSelfHostedProviderRequest,
      requestStream: false,
      responseType: AddGitLabSelfHostedProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              59,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              37,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              83,
              101,
              108,
              102,
              104,
              111,
              115,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              29,
              58,
              1,
              42,
              34,
              24,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              108,
              97,
              98,
              95,
              115,
              101,
              108,
              102,
              95,
              104,
              111,
              115,
              116,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /** Change an existing self hosted GitLab identity provider on the instance */
    updateGitLabSelfHostedProvider: {
      name: "UpdateGitLabSelfHostedProvider",
      requestType: UpdateGitLabSelfHostedProviderRequest,
      requestStream: false,
      responseType: UpdateGitLabSelfHostedProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              62,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              40,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              83,
              101,
              108,
              102,
              104,
              111,
              115,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              108,
              97,
              98,
              95,
              115,
              101,
              108,
              102,
              95,
              104,
              111,
              115,
              116,
              101,
              100,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new Google identity provider on the instance */
    addGoogleProvider: {
      name: "AddGoogleProvider",
      requestType: AddGoogleProviderRequest,
      requestStream: false,
      responseType: AddGoogleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 111, 111, 103, 108, 101])],
        },
      },
    },
    /** Change an existing Google identity provider on the instance */
    updateGoogleProvider: {
      name: "UpdateGoogleProvider",
      requestType: UpdateGoogleProviderRequest,
      requestStream: false,
      responseType: UpdateGoogleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              53,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new LDAP identity provider on the instance */
    addLDAPProvider: {
      name: "AddLDAPProvider",
      requestType: AddLDAPProviderRequest,
      requestStream: false,
      responseType: AddLDAPProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              48,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              26,
              65,
              100,
              100,
              32,
              76,
              68,
              65,
              80,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112])],
        },
      },
    },
    /** Change an existing LDAP identity provider on the instance */
    updateLDAPProvider: {
      name: "UpdateLDAPProvider",
      requestType: UpdateLDAPProviderRequest,
      requestStream: false,
      responseType: UpdateLDAPProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              51,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              29,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              76,
              68,
              65,
              80,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([20, 58, 1, 42, 26, 15, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    /** Add a new Apple identity provider on the instance */
    addAppleProvider: {
      name: "AddAppleProvider",
      requestType: AddAppleProviderRequest,
      requestStream: false,
      responseType: AddAppleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              49,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              27,
              65,
              100,
              100,
              32,
              65,
              112,
              112,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 112, 112, 108, 101])],
        },
      },
    },
    /** Change an existing Apple identity provider on the instance */
    updateAppleProvider: {
      name: "UpdateAppleProvider",
      requestType: UpdateAppleProviderRequest,
      requestStream: false,
      responseType: UpdateAppleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              52,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              30,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              105,
              100,
              112,
              115,
              47,
              97,
              112,
              112,
              108,
              101,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new SAML identity provider on the instance */
    addSAMLProvider: {
      name: "AddSAMLProvider",
      requestType: AddSAMLProviderRequest,
      requestStream: false,
      responseType: AddSAMLProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              48,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              26,
              65,
              100,
              100,
              32,
              83,
              65,
              77,
              76,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108])],
        },
      },
    },
    /** Change an existing SAML identity provider on the instance */
    updateSAMLProvider: {
      name: "UpdateSAMLProvider",
      requestType: UpdateSAMLProviderRequest,
      requestStream: false,
      responseType: UpdateSAMLProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              51,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              29,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              83,
              65,
              77,
              76,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([20, 58, 1, 42, 26, 15, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    /** Regenerate certificate for an existing SAML identity provider in the organization */
    regenerateSAMLProviderCertificate: {
      name: "RegenerateSAMLProviderCertificate",
      requestType: RegenerateSAMLProviderCertificateRequest,
      requestStream: false,
      responseType: RegenerateSAMLProviderCertificateResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              67,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              45,
              82,
              101,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              83,
              65,
              77,
              76,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              105,
              100,
              112,
              115,
              47,
              115,
              97,
              109,
              108,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              95,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Remove an identity provider
     * Will remove all linked providers of this configuration on the users
     */
    deleteProvider: {
      name: "DeleteProvider",
      requestType: DeleteProviderRequest,
      requestStream: false,
      responseType: DeleteProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              46,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              24,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              42,
              20,
              47,
              105,
              100,
              112,
              115,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getOrgIAMPolicy: {
      name: "GetOrgIAMPolicy",
      requestType: GetOrgIAMPolicyRequest,
      requestStream: false,
      responseType: GetOrgIAMPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              82,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              18,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              32,
              73,
              65,
              77,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              31,
              85,
              115,
              101,
              32,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 111, 114, 103, 105, 97, 109]),
          ],
        },
      },
    },
    updateOrgIAMPolicy: {
      name: "UpdateOrgIAMPolicy",
      requestType: UpdateOrgIAMPolicyRequest,
      requestStream: false,
      responseType: UpdateOrgIAMPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              88,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              21,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              79,
              114,
              103,
              32,
              73,
              65,
              77,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              34,
              85,
              115,
              101,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              111,
              114,
              103,
              105,
              97,
              109,
            ]),
          ],
        },
      },
    },
    getCustomOrgIAMPolicy: {
      name: "GetCustomOrgIAMPolicy",
      requestType: GetCustomOrgIAMPolicyRequest,
      requestStream: false,
      responseType: GetCustomOrgIAMPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              98,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              18,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              32,
              73,
              65,
              77,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              47,
              85,
              115,
              101,
              32,
              71,
              101,
              116,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              111,
              114,
              103,
              105,
              97,
              109,
            ]),
          ],
        },
      },
    },
    addCustomOrgIAMPolicy: {
      name: "AddCustomOrgIAMPolicy",
      requestType: AddCustomOrgIAMPolicyRequest,
      requestStream: false,
      responseType: AddCustomOrgIAMPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              106,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              65,
              100,
              100,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              79,
              114,
              103,
              32,
              73,
              65,
              77,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              48,
              85,
              115,
              101,
              32,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              34,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              111,
              114,
              103,
              105,
              97,
              109,
            ]),
          ],
        },
      },
    },
    updateCustomOrgIAMPolicy: {
      name: "UpdateCustomOrgIAMPolicy",
      requestType: UpdateCustomOrgIAMPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomOrgIAMPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              109,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              79,
              114,
              103,
              32,
              73,
              65,
              77,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              48,
              85,
              115,
              101,
              32,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              26,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              111,
              114,
              103,
              105,
              97,
              109,
            ]),
          ],
        },
      },
    },
    resetCustomOrgIAMPolicyToDefault: {
      name: "ResetCustomOrgIAMPolicyToDefault",
      requestType: ResetCustomOrgIAMPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomOrgIAMPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              119,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              37,
              82,
              101,
              115,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              49,
              85,
              115,
              101,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              32,
              42,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              111,
              114,
              103,
              105,
              97,
              109,
            ]),
          ],
        },
      },
    },
    getDomainPolicy: {
      name: "GetDomainPolicy",
      requestType: GetDomainPolicyRequest,
      requestStream: false,
      responseType: GetDomainPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              129,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              19,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              174,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              105,
              110,
              32,
              114,
              101,
              103,
              97,
              114,
              100,
              115,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              46,
              74,
              30,
              10,
              3,
              50,
              48,
              48,
              18,
              23,
              10,
              21,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 100, 111, 109, 97, 105, 110]),
          ],
        },
      },
    },
    updateDomainPolicy: {
      name: "UpdateDomainPolicy",
      requestType: UpdateDomainPolicyRequest,
      requestStream: false,
      responseType: UpdateDomainPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              192,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              22,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              226,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              74,
              38,
              10,
              3,
              50,
              48,
              48,
              18,
              31,
              10,
              29,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    getCustomDomainPolicy: {
      name: "GetCustomDomainPolicy",
      requestType: GetCustomDomainPolicyRequest,
      requestStream: false,
      responseType: GetCustomDomainPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              152,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              250,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              100,
              111,
              101,
              115,
              110,
              39,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              44,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              46,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              105,
              110,
              32,
              114,
              101,
              103,
              97,
              114,
              100,
              115,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              73,
              10,
              3,
              50,
              48,
              48,
              18,
              66,
              10,
              64,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              32,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              105,
              122,
              101,
              100,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    addCustomDomainPolicy: {
      name: "AddCustomDomainPolicy",
      requestType: AddCustomDomainPolicyRequest,
      requestStream: false,
      responseType: AddCustomDomainPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              222,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              41,
              83,
              101,
              116,
              32,
              97,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              97,
              110,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              230,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              105,
              110,
              32,
              114,
              101,
              103,
              97,
              114,
              100,
              115,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              30,
              10,
              3,
              50,
              48,
              48,
              18,
              23,
              10,
              21,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              34,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    updateCustomDomainPolicy: {
      name: "UpdateCustomDomainPolicy",
      requestType: UpdateCustomDomainPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomDomainPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              220,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              39,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              230,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              105,
              110,
              32,
              114,
              101,
              103,
              97,
              114,
              100,
              115,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              30,
              10,
              3,
              50,
              48,
              48,
              18,
              23,
              10,
              21,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              26,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    resetCustomDomainPolicyToDefault: {
      name: "ResetCustomDomainPolicyToDefault",
      requestType: ResetCustomDomainPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomDomainPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              235,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              37,
              82,
              101,
              115,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              215,
              1,
              82,
              101,
              115,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              44,
              32,
              105,
              110,
              32,
              114,
              101,
              103,
              97,
              114,
              100,
              115,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              62,
              10,
              3,
              50,
              48,
              48,
              18,
              55,
              10,
              53,
              114,
              101,
              115,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              32,
              42,
              30,
              47,
              111,
              114,
              103,
              115,
              47,
              123,
              111,
              114,
              103,
              95,
              105,
              100,
              125,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    getLabelPolicy: {
      name: "GetLabelPolicy",
      requestType: GetLabelPolicyRequest,
      requestStream: false,
      responseType: GetLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              162,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              38,
              71,
              101,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              196,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              108,
              121,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              114,
              32,
              105,
              102,
              32,
              110,
              111,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              85,
              73,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              74,
              29,
              10,
              3,
              50,
              48,
              48,
              18,
              22,
              10,
              20,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108])],
        },
      },
    },
    getPreviewLabelPolicy: {
      name: "GetPreviewLabelPolicy",
      requestType: GetPreviewLabelPolicyRequest,
      requestStream: false,
      responseType: GetPreviewLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              231,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              46,
              71,
              101,
              116,
              32,
              80,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              129,
              4,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              104,
              111,
              119,
              32,
              121,
              111,
              117,
              32,
              104,
              111,
              119,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              108,
              111,
              111,
              107,
              32,
              108,
              105,
              107,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              110,
              111,
              116,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              102,
              117,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              116,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              109,
              97,
              105,
              108,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              108,
              111,
              111,
              107,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              114,
              32,
              105,
              102,
              32,
              110,
              111,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              85,
              73,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              74,
              29,
              10,
              3,
              50,
              48,
              48,
              18,
              22,
              10,
              20,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              26,
              18,
              24,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              95,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
            ]),
          ],
        },
      },
    },
    updateLabelPolicy: {
      name: "UpdateLabelPolicy",
      requestType: UpdateLabelPolicyRequest,
      requestStream: false,
      responseType: UpdateLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              212,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              33,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              243,
              2,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              104,
              111,
              119,
              32,
              121,
              111,
              117,
              32,
              104,
              111,
              119,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              108,
              111,
              111,
              107,
              32,
              108,
              105,
              107,
              101,
              44,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              121,
              111,
              117,
              32,
              97,
              114,
              101,
              32,
              104,
              97,
              112,
              112,
              121,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              74,
              37,
              10,
              3,
              50,
              48,
              48,
              18,
              30,
              10,
              28,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([20, 58, 1, 42, 26, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108]),
          ],
        },
      },
    },
    activateLabelPolicy: {
      name: "ActivateLabelPolicy",
      requestType: ActivateLabelPolicyRequest,
      requestStream: false,
      responseType: ActivateLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              219,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              35,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              159,
              2,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              95,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeLabelPolicyLogo: {
      name: "RemoveLabelPolicyLogo",
      requestType: RemoveLabelPolicyLogoRequest,
      requestStream: false,
      responseType: RemoveLabelPolicyLogoResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              220,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              17,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              76,
              111,
              103,
              111,
              32,
              76,
              105,
              103,
              104,
              116,
              26,
              178,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              111,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              103,
              104,
              116,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              42,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              108,
              111,
              103,
              111,
            ]),
          ],
        },
      },
    },
    removeLabelPolicyLogoDark: {
      name: "RemoveLabelPolicyLogoDark",
      requestType: RemoveLabelPolicyLogoDarkRequest,
      requestStream: false,
      responseType: RemoveLabelPolicyLogoDarkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              218,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              16,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              76,
              111,
              103,
              111,
              32,
              68,
              97,
              114,
              107,
              26,
              177,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              111,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              97,
              114,
              107,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              42,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              108,
              111,
              103,
              111,
              95,
              100,
              97,
              114,
              107,
            ]),
          ],
        },
      },
    },
    removeLabelPolicyIcon: {
      name: "RemoveLabelPolicyIcon",
      requestType: RemoveLabelPolicyIconRequest,
      requestStream: false,
      responseType: RemoveLabelPolicyIconResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              220,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              17,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              99,
              111,
              110,
              32,
              76,
              105,
              103,
              104,
              116,
              26,
              178,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              99,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              103,
              104,
              116,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              42,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              105,
              99,
              111,
              110,
            ]),
          ],
        },
      },
    },
    removeLabelPolicyIconDark: {
      name: "RemoveLabelPolicyIconDark",
      requestType: RemoveLabelPolicyIconDarkRequest,
      requestStream: false,
      responseType: RemoveLabelPolicyIconDarkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              218,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              16,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              99,
              111,
              110,
              32,
              68,
              97,
              114,
              107,
              26,
              177,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              99,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              97,
              114,
              107,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              27,
              42,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              105,
              99,
              111,
              110,
              95,
              100,
              97,
              114,
              107,
            ]),
          ],
        },
      },
    },
    removeLabelPolicyFont: {
      name: "RemoveLabelPolicyFont",
      requestType: RemoveLabelPolicyFontRequest,
      requestStream: false,
      responseType: RemoveLabelPolicyFontResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              195,
              1,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              11,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              70,
              111,
              110,
              116,
              26,
              159,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              102,
              111,
              110,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              22,
              42,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              102,
              111,
              110,
              116,
            ]),
          ],
        },
      },
    },
    getLoginPolicy: {
      name: "GetLoginPolicy",
      requestType: GetLoginPolicyRequest,
      requestStream: false,
      responseType: GetLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              234,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              18,
              71,
              101,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              154,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              74,
              29,
              10,
              3,
              50,
              48,
              48,
              18,
              22,
              10,
              20,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 103, 105, 110]),
          ],
        },
      },
    },
    updateLoginPolicy: {
      name: "UpdateLoginPolicy",
      requestType: UpdateLoginPolicyRequest,
      requestStream: false,
      responseType: UpdateLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              252,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              21,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              161,
              2,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              74,
              37,
              10,
              3,
              50,
              48,
              48,
              18,
              30,
              10,
              28,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              20,
              58,
              1,
              42,
              26,
              15,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
            ]),
          ],
        },
      },
    },
    listLoginPolicyIDPs: {
      name: "ListLoginPolicyIDPs",
      requestType: ListLoginPolicyIDPsRequest,
      requestStream: false,
      responseType: ListLoginPolicyIDPsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              226,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              30,
              76,
              105,
              115,
              116,
              32,
              76,
              105,
              110,
              107,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              26,
              220,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              109,
              101,
              97,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              101,
              121,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              74,
              51,
              10,
              3,
              50,
              48,
              48,
              18,
              44,
              10,
              42,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              33,
              58,
              1,
              42,
              34,
              28,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              105,
              100,
              112,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addIDPToLoginPolicy: {
      name: "AddIDPToLoginPolicy",
      requestType: AddIDPToLoginPolicyRequest,
      requestStream: false,
      responseType: AddIDPToLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              218,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              76,
              105,
              110,
              107,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              208,
              1,
              65,
              100,
              100,
              47,
              108,
              105,
              110,
              107,
              32,
              97,
              32,
              112,
              114,
              101,
              45,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              109,
              101,
              97,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              97,
              103,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              74,
              57,
              10,
              3,
              50,
              48,
              48,
              18,
              50,
              10,
              48,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              116,
              111,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              105,
              100,
              112,
              115,
            ]),
          ],
        },
      },
    },
    removeIDPFromLoginPolicy: {
      name: "RemoveIDPFromLoginPolicy",
      requestType: RemoveIDPFromLoginPolicyRequest,
      requestStream: false,
      responseType: RemoveIDPFromLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              215,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              76,
              105,
              110,
              107,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              198,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              109,
              101,
              97,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              97,
              103,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              74,
              61,
              10,
              3,
              50,
              48,
              48,
              18,
              54,
              10,
              52,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              31,
              42,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listLoginPolicySecondFactors: {
      name: "ListLoginPolicySecondFactors",
      requestType: ListLoginPolicySecondFactorsRequest,
      requestStream: false,
      responseType: ListLoginPolicySecondFactorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              159,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              25,
              76,
              105,
              115,
              116,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              50,
              70,
              65,
              41,
              26,
              158,
              3,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              46,
              74,
              47,
              10,
              3,
              50,
              48,
              48,
              18,
              40,
              10,
              38,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              111,
              102,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              40,
              34,
              38,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addSecondFactorToLoginPolicy: {
      name: "AddSecondFactorToLoginPolicy",
      requestType: AddSecondFactorToLoginPolicyRequest,
      requestStream: false,
      responseType: AddSecondFactorToLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              23,
              65,
              100,
              100,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              26,
              137,
              4,
              65,
              100,
              100,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              104,
              97,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              121,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              116,
              111,
              32,
              97,
              100,
              100,
              32,
              109,
              111,
              114,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              116,
              111,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              97,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              116,
              104,
              105,
              115,
              32,
              97,
              115,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              46,
              74,
              52,
              10,
              3,
              50,
              48,
              48,
              18,
              45,
              10,
              43,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              116,
              111,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              74,
              64,
              10,
              3,
              52,
              48,
              48,
              18,
              57,
              10,
              26,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              116,
              121,
              112,
              101,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              1,
              42,
              34,
              30,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    removeSecondFactorFromLoginPolicy: {
      name: "RemoveSecondFactorFromLoginPolicy",
      requestType: RemoveSecondFactorFromLoginPolicyRequest,
      requestStream: false,
      responseType: RemoveSecondFactorFromLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              176,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              26,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              26,
              227,
              3,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              46,
              74,
              56,
              10,
              3,
              50,
              48,
              48,
              18,
              49,
              10,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              74,
              64,
              10,
              3,
              52,
              48,
              48,
              18,
              57,
              10,
              26,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              116,
              121,
              112,
              101,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              39,
              42,
              37,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              123,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
    listLoginPolicyMultiFactors: {
      name: "ListLoginPolicyMultiFactors",
      requestType: ListLoginPolicyMultiFactorsRequest,
      requestStream: false,
      responseType: ListLoginPolicyMultiFactorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              235,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              24,
              76,
              105,
              115,
              116,
              32,
              77,
              117,
              108,
              116,
              105,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              77,
              70,
              65,
              41,
              26,
              236,
              3,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              77,
              70,
              65,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              99,
              101,
              115,
              115,
              97,
              114,
              121,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              46,
              74,
              46,
              10,
              3,
              50,
              48,
              48,
              18,
              39,
              10,
              37,
              109,
              117,
              108,
              116,
              105,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              111,
              102,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              39,
              34,
              37,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              109,
              117,
              108,
              116,
              105,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addMultiFactorToLoginPolicy: {
      name: "AddMultiFactorToLoginPolicy",
      requestType: AddMultiFactorToLoginPolicyRequest,
      requestStream: false,
      responseType: AddMultiFactorToLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              152,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              22,
              65,
              100,
              100,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              26,
              213,
              3,
              65,
              100,
              100,
              32,
              97,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              99,
              101,
              115,
              115,
              97,
              114,
              121,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              46,
              74,
              51,
              10,
              3,
              50,
              48,
              48,
              18,
              44,
              10,
              42,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              116,
              111,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              74,
              63,
              10,
              3,
              52,
              48,
              48,
              18,
              56,
              10,
              25,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              116,
              121,
              112,
              101,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              109,
              117,
              108,
              116,
              105,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    removeMultiFactorFromLoginPolicy: {
      name: "RemoveMultiFactorFromLoginPolicy",
      requestType: RemoveMultiFactorFromLoginPolicyRequest,
      requestStream: false,
      responseType: RemoveMultiFactorFromLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              179,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              25,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              77,
              117,
              108,
              116,
              105,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              26,
              218,
              3,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              99,
              101,
              115,
              115,
              97,
              114,
              121,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              46,
              74,
              56,
              10,
              3,
              50,
              48,
              48,
              18,
              49,
              10,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              74,
              77,
              10,
              3,
              52,
              48,
              48,
              18,
              70,
              10,
              39,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              116,
              121,
              112,
              101,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              38,
              42,
              36,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              109,
              117,
              108,
              116,
              105,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              123,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getPasswordComplexityPolicy: {
      name: "GetPasswordComplexityPolicy",
      requestType: GetPasswordComplexityPolicyRequest,
      requestStream: false,
      responseType: GetPasswordComplexityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              202,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              32,
              71,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              219,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              74,
              43,
              10,
              3,
              50,
              48,
              48,
              18,
              36,
              10,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    updatePasswordComplexityPolicy: {
      name: "UpdatePasswordComplexityPolicy",
      requestType: UpdatePasswordComplexityPolicyRequest,
      requestStream: false,
      responseType: UpdatePasswordComplexityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              149,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              35,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              227,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              74,
              51,
              10,
              3,
              50,
              48,
              48,
              18,
              44,
              10,
              42,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              34,
              58,
              1,
              42,
              26,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    getPasswordAgePolicy: {
      name: "GetPasswordAgePolicy",
      requestType: GetPasswordAgePolicyRequest,
      requestStream: false,
      responseType: GetPasswordAgePolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              212,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              71,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              243,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              103,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              101,
              120,
              112,
              105,
              114,
              121,
              32,
              111,
              102,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              44,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              102,
              111,
              114,
              99,
              101,
              100,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              105,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              120,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              74,
              36,
              10,
              3,
              50,
              48,
              48,
              18,
              29,
              10,
              27,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              103,
              101,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              24,
              18,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    updatePasswordAgePolicy: {
      name: "UpdatePasswordAgePolicy",
      requestType: UpdatePasswordAgePolicyRequest,
      requestStream: false,
      responseType: UpdatePasswordAgePolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              166,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              130,
              2,
              85,
              112,
              100,
              97,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              101,
              120,
              112,
              105,
              114,
              121,
              32,
              111,
              102,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              44,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              102,
              111,
              114,
              99,
              101,
              100,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              105,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              120,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              74,
              44,
              10,
              3,
              50,
              48,
              48,
              18,
              37,
              10,
              35,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              103,
              101,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    getLockoutPolicy: {
      name: "GetLockoutPolicy",
      requestType: GetLockoutPolicyRequest,
      requestStream: false,
      responseType: GetLockoutPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              252,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              29,
              71,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              156,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              31,
              10,
              3,
              50,
              48,
              48,
              18,
              24,
              10,
              22,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 99, 107, 111, 117, 116]),
          ],
        },
      },
    },
    updateLockoutPolicy: {
      name: "UpdateLockoutPolicy",
      requestType: UpdateLockoutPolicyRequest,
      requestStream: false,
      responseType: UpdateLockoutPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              221,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              155,
              2,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              31,
              58,
              1,
              42,
              26,
              26,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    getPrivacyPolicy: {
      name: "GetPrivacyPolicy",
      requestType: GetPrivacyPolicyRequest,
      requestStream: false,
      responseType: GetPrivacyPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              214,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              20,
              71,
              101,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              128,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              74,
              31,
              10,
              3,
              50,
              48,
              48,
              18,
              24,
              10,
              22,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 112, 114, 105, 118, 97, 99, 121]),
          ],
        },
      },
    },
    updatePrivacyPolicy: {
      name: "UpdatePrivacyPolicy",
      requestType: UpdatePrivacyPolicyRequest,
      requestStream: false,
      responseType: UpdatePrivacyPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              229,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              23,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              204,
              2,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              32,
              123,
              123,
              46,
              76,
              97,
              110,
              103,
              125,
              125,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              115,
              101,
              116,
              32,
              116,
              111,
              32,
              104,
              97,
              118,
              101,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              105,
              110,
              107,
              115,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              46,
              74,
              39,
              10,
              3,
              50,
              48,
              48,
              18,
              32,
              10,
              30,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
            ]),
          ],
        },
      },
    },
    addNotificationPolicy: {
      name: "AddNotificationPolicy",
      requestType: AddNotificationPolicyRequest,
      requestStream: false,
      responseType: AddNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              217,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              65,
              100,
              100,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              244,
              1,
              65,
              100,
              100,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              74,
              36,
              10,
              3,
              50,
              48,
              48,
              18,
              29,
              10,
              27,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    getNotificationPolicy: {
      name: "GetNotificationPolicy",
      requestType: GetNotificationPolicyRequest,
      requestStream: false,
      responseType: GetNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              223,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              82,
              101,
              116,
              117,
              114,
              110,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              247,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              74,
              36,
              10,
              3,
              50,
              48,
              48,
              18,
              29,
              10,
              27,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              24,
              18,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    updateNotificationPolicy: {
      name: "UpdateNotificationPolicy",
      requestType: UpdateNotificationPolicyRequest,
      requestStream: false,
      responseType: UpdateNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              159,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              247,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              74,
              44,
              10,
              3,
              50,
              48,
              48,
              18,
              37,
              10,
              35,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              54,
              10,
              3,
              52,
              48,
              48,
              18,
              47,
              10,
              16,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              114,
              103,
              117,
              109,
              101,
              110,
              116,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    getDefaultInitMessageText: {
      name: "GetDefaultInitMessageText",
      requestType: GetDefaultInitMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultInitMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              234,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              29,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              185,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              115,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomInitMessageText: {
      name: "GetCustomInitMessageText",
      requestType: GetCustomInitMessageTextRequest,
      requestStream: false,
      responseType: GetCustomInitMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              235,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              28,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              187,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              115,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultInitMessageText: {
      name: "SetDefaultInitMessageText",
      requestType: SetDefaultInitMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultInitMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              250,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              194,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              115,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              34,
              58,
              1,
              42,
              26,
              29,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomInitMessageTextToDefault: {
      name: "ResetCustomInitMessageTextToDefault",
      requestType: ResetCustomInitMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomInitMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              204,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              41,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              143,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              31,
              42,
              29,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordResetMessageText: {
      name: "GetDefaultPasswordResetMessageText",
      requestType: GetDefaultPasswordResetMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultPasswordResetMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              210,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              151,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              103,
              111,
              116,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              97,
              102,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomPasswordResetMessageText: {
      name: "GetCustomPasswordResetMessageText",
      requestType: GetCustomPasswordResetMessageTextRequest,
      requestStream: false,
      responseType: GetCustomPasswordResetMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              211,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              153,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              103,
              111,
              116,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultPasswordResetMessageText: {
      name: "SetDefaultPasswordResetMessageText",
      requestType: SetDefaultPasswordResetMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultPasswordResetMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              231,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              46,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              165,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              103,
              111,
              116,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              26,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomPasswordResetMessageTextToDefault: {
      name: "ResetCustomPasswordResetMessageTextToDefault",
      requestType: ResetCustomPasswordResetMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomPasswordResetMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              218,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              147,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              40,
              42,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifyEmailMessageText: {
      name: "GetDefaultVerifyEmailMessageText",
      requestType: GetDefaultVerifyEmailMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifyEmailMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              37,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              150,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              101,
              109,
              97,
              105,
              108,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifyEmailMessageText: {
      name: "GetCustomVerifyEmailMessageText",
      requestType: GetCustomVerifyEmailMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifyEmailMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              208,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              152,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              101,
              109,
              97,
              105,
              108,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultVerifyEmailMessageText: {
      name: "SetDefaultVerifyEmailMessageText",
      requestType: SetDefaultVerifyEmailMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultVerifyEmailMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              220,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              37,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              163,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              26,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifyEmailMessageTextToDefault: {
      name: "ResetCustomVerifyEmailMessageTextToDefault",
      requestType: ResetCustomVerifyEmailMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifyEmailMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              209,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              49,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              140,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              38,
              42,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifyPhoneMessageText: {
      name: "GetDefaultVerifyPhoneMessageText",
      requestType: GetDefaultVerifyPhoneMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifyPhoneMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              244,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              37,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              187,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifyPhoneMessageText: {
      name: "GetCustomVerifyPhoneMessageText",
      requestType: GetCustomVerifyPhoneMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifyPhoneMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              245,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              189,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultVerifyPhoneMessageText: {
      name: "SetDefaultVerifyPhoneMessageText",
      requestType: SetDefaultVerifyPhoneMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultVerifyPhoneMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              136,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              43,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              201,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              26,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifyPhoneMessageTextToDefault: {
      name: "ResetCustomVerifyPhoneMessageTextToDefault",
      requestType: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              203,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              49,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              134,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              38,
              42,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifySMSOTPMessageText: {
      name: "GetDefaultVerifySMSOTPMessageText",
      requestType: GetDefaultVerifySMSOTPMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifySMSOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              248,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              189,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifySMSOTPMessageText: {
      name: "GetCustomVerifySMSOTPMessageText",
      requestType: GetCustomVerifySMSOTPMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifySMSOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              249,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              191,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultVerifySMSOTPMessageText: {
      name: "SetDefaultVerifySMSOTPMessageText",
      requestType: SetDefaultVerifySMSOTPMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultVerifySMSOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              140,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              45,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              203,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              26,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifySMSOTPMessageTextToDefault: {
      name: "ResetCustomVerifySMSOTPMessageTextToDefault",
      requestType: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifySMSOTPMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              136,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              39,
              42,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifyEmailOTPMessageText: {
      name: "GetDefaultVerifyEmailOTPMessageText",
      requestType: GetDefaultVerifyEmailOTPMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifyEmailOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              250,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              191,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifyEmailOTPMessageText: {
      name: "GetCustomVerifyEmailOTPMessageText",
      requestType: GetCustomVerifyEmailOTPMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifyEmailOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              244,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              186,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              41,
              18,
              39,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultVerifyEmailOTPMessageText: {
      name: "SetDefaultVerifyEmailOTPMessageText",
      requestType: SetDefaultVerifyEmailOTPMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultVerifyEmailOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              135,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              45,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              198,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              26,
              39,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifyEmailOTPMessageTextToDefault: {
      name: "ResetCustomVerifyEmailOTPMessageTextToDefault",
      requestType: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifyEmailOTPMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              202,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              131,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              41,
              42,
              39,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultDomainClaimedMessageText: {
      name: "GetDefaultDomainClaimedMessageText",
      requestType: GetDefaultDomainClaimedMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultDomainClaimedMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              129,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              198,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              115,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              105,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomDomainClaimedMessageText: {
      name: "GetCustomDomainClaimedMessageText",
      requestType: GetCustomDomainClaimedMessageTextRequest,
      requestStream: false,
      responseType: GetCustomDomainClaimedMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              130,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              200,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              115,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              105,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultDomainClaimedMessageText: {
      name: "SetDefaultDomainClaimedMessageText",
      requestType: SetDefaultDomainClaimedMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultDomainClaimedMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              164,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              233,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              115,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              105,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              68,
              111,
              109,
              97,
              105,
              110,
              125,
              125,
              32,
              123,
              123,
              46,
              84,
              101,
              109,
              112,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              26,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomDomainClaimedMessageTextToDefault: {
      name: "ResetCustomDomainClaimedMessageTextToDefault",
      requestType: ResetCustomDomainClaimedMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomDomainClaimedMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              207,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              136,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              40,
              42,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordlessRegistrationMessageText: {
      name: "GetDefaultPasswordlessRegistrationMessageText",
      requestType: GetDefaultPasswordlessRegistrationMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultPasswordlessRegistrationMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              153,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              50,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              211,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomPasswordlessRegistrationMessageText: {
      name: "GetCustomPasswordlessRegistrationMessageText",
      requestType: GetCustomPasswordlessRegistrationMessageTextRequest,
      requestStream: false,
      responseType: GetCustomPasswordlessRegistrationMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              173,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              49,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              232,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultPasswordlessRegistrationMessageText: {
      name: "SetDefaultPasswordlessRegistrationMessageText",
      requestType: SetDefaultPasswordlessRegistrationMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultPasswordlessRegistrationMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              178,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              50,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              236,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              32,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              26,
              50,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomPasswordlessRegistrationMessageTextToDefault: {
      name: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
      requestType: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              237,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              62,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              155,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordChangeMessageText: {
      name: "GetDefaultPasswordChangeMessageText",
      requestType: GetDefaultPasswordChangeMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultPasswordChangeMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              211,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              40,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              151,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomPasswordChangeMessageText: {
      name: "GetCustomPasswordChangeMessageText",
      requestType: GetCustomPasswordChangeMessageTextRequest,
      requestStream: false,
      responseType: GetCustomPasswordChangeMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              212,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              153,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultPasswordChangeMessageText: {
      name: "SetDefaultPasswordChangeMessageText",
      requestType: SetDefaultPasswordChangeMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultPasswordChangeMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              218,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              41,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              157,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              46,
              32,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              45,
              58,
              1,
              42,
              26,
              40,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomPasswordChangeMessageTextToDefault: {
      name: "ResetCustomPasswordChangeMessageTextToDefault",
      requestType: ResetCustomPasswordChangeMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomPasswordChangeMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              211,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              53,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              138,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              42,
              42,
              40,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultInviteUserMessageText: {
      name: "GetDefaultInviteUserMessageText",
      requestType: GetDefaultInviteUserMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultInviteUserMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              196,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              73,
              110,
              118,
              105,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              140,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              99,
              111,
              100,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              118,
              105,
              116,
              101,
              95,
              117,
              115,
              101,
              114,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomInviteUserMessageText: {
      name: "GetCustomInviteUserMessageText",
      requestType: GetCustomInviteUserMessageTextRequest,
      requestStream: false,
      responseType: GetCustomInviteUserMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              197,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              35,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              118,
              105,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              142,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              99,
              111,
              100,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              118,
              105,
              116,
              101,
              95,
              117,
              115,
              101,
              114,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setDefaultInviteUserMessageText: {
      name: "SetDefaultInviteUserMessageText",
      requestType: SetDefaultInviteUserMessageTextRequest,
      requestStream: false,
      responseType: SetDefaultInviteUserMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              216,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              73,
              110,
              118,
              105,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              160,
              4,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              99,
              111,
              100,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              26,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              118,
              105,
              116,
              101,
              95,
              117,
              115,
              101,
              114,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomInviteUserMessageTextToDefault: {
      name: "ResetCustomInviteUserMessageTextToDefault",
      requestType: ResetCustomInviteUserMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomInviteUserMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              201,
              2,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              48,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              118,
              105,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              133,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              38,
              42,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              118,
              105,
              116,
              101,
              95,
              117,
              115,
              101,
              114,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultLoginTexts: {
      name: "GetDefaultLoginTexts",
      requestType: GetDefaultLoginTextsRequest,
      requestStream: false,
      responseType: GetDefaultLoginTextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              133,
              2,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              22,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              26,
              221,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              97,
              114,
              101,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomLoginTexts: {
      name: "GetCustomLoginTexts",
      requestType: GetCustomLoginTextsRequest,
      requestStream: false,
      responseType: GetCustomLoginTextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              133,
              2,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              21,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              26,
              222,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              24,
              18,
              22,
              47,
              116,
              101,
              120,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomLoginText: {
      name: "SetCustomLoginText",
      requestType: SetCustomLoginTextsRequest,
      requestStream: false,
      responseType: SetCustomLoginTextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              134,
              2,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              22,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              26,
              222,
              1,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              116,
              101,
              120,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomLoginTextToDefault: {
      name: "ResetCustomLoginTextToDefault",
      requestType: ResetCustomLoginTextsToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomLoginTextsToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              203,
              2,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              34,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              151,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            Buffer.from([
              24,
              42,
              22,
              47,
              116,
              101,
              120,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    listIAMMemberRoles: {
      name: "ListIAMMemberRoles",
      requestType: ListIAMMemberRolesRequest,
      requestStream: false,
      responseType: ListIAMMemberRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              132,
              2,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              21,
              76,
              105,
              115,
              116,
              32,
              73,
              65,
              77,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              82,
              111,
              108,
              101,
              115,
              26,
              162,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              74,
              37,
              10,
              3,
              50,
              48,
              48,
              18,
              30,
              10,
              28,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              73,
              65,
              77,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              24,
              34,
              22,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listIAMMembers: {
      name: "ListIAMMembers",
      requestType: ListIAMMembersRequest,
      requestStream: false,
      responseType: ListIAMMembersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              172,
              2,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              16,
              76,
              105,
              115,
              116,
              32,
              73,
              65,
              77,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              26,
              217,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              44,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              65,
              78,
              68,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              46,
              74,
              27,
              10,
              3,
              50,
              48,
              48,
              18,
              20,
              10,
              18,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              73,
              65,
              77,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Adds a user to the membership list of ZITADEL with the given roles
     * undefined roles will be dropped
     */
    addIAMMember: {
      name: "AddIAMMember",
      requestType: AddIAMMemberRequest,
      requestStream: false,
      responseType: AddIAMMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              184,
              2,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              14,
              65,
              100,
              100,
              32,
              73,
              65,
              77,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              155,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              111,
              110,
              101,
              32,
              111,
              114,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              46,
              74,
              32,
              10,
              3,
              50,
              48,
              48,
              18,
              25,
              10,
              23,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              73,
              65,
              77,
              74,
              69,
              10,
              3,
              52,
              48,
              48,
              18,
              62,
              10,
              31,
              117,
              115,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              111,
              114,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              114,
              111,
              108,
              101,
              115,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [Buffer.from([13, 58, 1, 42, 34, 8, 47, 109, 101, 109, 98, 101, 114, 115])],
        },
      },
    },
    updateIAMMember: {
      name: "UpdateIAMMember",
      requestType: UpdateIAMMemberRequest,
      requestStream: false,
      responseType: UpdateIAMMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              133,
              3,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              17,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              73,
              65,
              77,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              237,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              119,
              104,
              111,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              121,
              111,
              117,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              119,
              97,
              110,
              116,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              40,
              114,
              101,
              109,
              111,
              118,
              101,
              41,
              46,
              74,
              34,
              10,
              3,
              50,
              48,
              48,
              18,
              27,
              10,
              25,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              73,
              65,
              77,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              74,
              59,
              10,
              3,
              52,
              48,
              48,
              18,
              52,
              10,
              21,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              114,
              32,
              114,
              111,
              108,
              101,
              115,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([18, 10, 16, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              23,
              58,
              1,
              42,
              26,
              18,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    removeIAMMember: {
      name: "RemoveIAMMember",
      requestType: RemoveIAMMemberRequest,
      requestStream: false,
      responseType: RemoveIAMMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              236,
              2,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              17,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              65,
              77,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              221,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              99,
              97,
              110,
              32,
              115,
              116,
              105,
              108,
              108,
              32,
              104,
              97,
              118,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              44,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              41,
              74,
              34,
              10,
              3,
              50,
              48,
              48,
              18,
              27,
              10,
              25,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              73,
              65,
              77,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              74,
              50,
              10,
              3,
              52,
              48,
              48,
              18,
              43,
              10,
              12,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              20,
              42,
              18,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listViews: {
      name: "ListViews",
      requestType: ListViewsRequest,
      requestStream: false,
      responseType: ListViewsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              137,
              2,
              10,
              17,
              86,
              105,
              101,
              119,
              115,
              47,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              76,
              105,
              115,
              116,
              32,
              86,
              105,
              101,
              119,
              115,
              47,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              26,
              182,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              114,
              101,
              97,
              100,
              32,
              109,
              111,
              100,
              101,
              108,
              115,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              86,
              105,
              101,
              119,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              111,
              112,
              116,
              105,
              109,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              111,
              112,
              116,
              105,
              109,
              105,
              122,
              105,
              110,
              103,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              108,
              97,
              116,
              101,
              110,
              99,
              105,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              121,
              32,
              114,
              101,
              112,
              114,
              101,
              115,
              101,
              110,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              108,
              116,
              97,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              74,
              35,
              10,
              3,
              50,
              48,
              48,
              18,
              28,
              10,
              26,
              86,
              105,
              101,
              119,
              115,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              101,
              114,
              121,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([16, 34, 14, 47, 118, 105, 101, 119, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
        },
      },
    },
    listFailedEvents: {
      name: "ListFailedEvents",
      requestType: ListFailedEventsRequest,
      requestStream: false,
      responseType: ListFailedEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              169,
              2,
              10,
              13,
              70,
              97,
              105,
              108,
              101,
              100,
              32,
              69,
              118,
              101,
              110,
              116,
              115,
              18,
              18,
              76,
              105,
              115,
              116,
              32,
              70,
              97,
              105,
              108,
              101,
              100,
              32,
              69,
              118,
              101,
              110,
              116,
              115,
              26,
              204,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              112,
              114,
              111,
              99,
              101,
              101,
              100,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              118,
              105,
              101,
              119,
              115,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              83,
              111,
              109,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              110,
              101,
              101,
              100,
              32,
              115,
              101,
              118,
              101,
              114,
              97,
              108,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              115,
              32,
              116,
              105,
              108,
              108,
              32,
              116,
              104,
              101,
              121,
              32,
              115,
              117,
              99,
              99,
              101,
              101,
              100,
              46,
              32,
              70,
              111,
              114,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              44,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              83,
              77,
              84,
              80,
              45,
              65,
              80,
              73,
              32,
              119,
              97,
              115,
              110,
              39,
              116,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              116,
              105,
              109,
              101,
              46,
              74,
              53,
              10,
              3,
              50,
              48,
              48,
              18,
              46,
              10,
              44,
              69,
              118,
              101,
              110,
              116,
              115,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              119,
              101,
              114,
              101,
              32,
              110,
              111,
              116,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              23,
              34,
              21,
              47,
              102,
              97,
              105,
              108,
              101,
              100,
              101,
              118,
              101,
              110,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    removeFailedEvent: {
      name: "RemoveFailedEvent",
      requestType: RemoveFailedEventRequest,
      requestStream: false,
      responseType: RemoveFailedEventResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              198,
              3,
              10,
              13,
              70,
              97,
              105,
              108,
              101,
              100,
              32,
              69,
              118,
              101,
              110,
              116,
              115,
              18,
              20,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              70,
              97,
              105,
              108,
              101,
              100,
              32,
              69,
              118,
              101,
              110,
              116,
              115,
              26,
              185,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              32,
              101,
              118,
              101,
              110,
              115,
              32,
              118,
              105,
              101,
              119,
              44,
              32,
              98,
              117,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              115,
              116,
              114,
              101,
              97,
              109,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              102,
              117,
              108,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              119,
              97,
              115,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              115,
              111,
              109,
              101,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              115,
              46,
              32,
              101,
              46,
              103,
              46,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              116,
              114,
              121,
              32,
              111,
              102,
              32,
              115,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              97,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              119,
              97,
              115,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              46,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              116,
              114,
              121,
              32,
              112,
              114,
              111,
              100,
              117,
              99,
              101,
              100,
              32,
              97,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              32,
              101,
              118,
              101,
              110,
              116,
              46,
              32,
              89,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              102,
              105,
              110,
              100,
              32,
              111,
              117,
              116,
              32,
              105,
              102,
              32,
              105,
              116,
              32,
              119,
              111,
              114,
              107,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              96,
              102,
              97,
              105,
              108,
              117,
              114,
              101,
              95,
              99,
              111,
              117,
              110,
              116,
              96,
              32,
              74,
              37,
              10,
              3,
              50,
              48,
              48,
              18,
              30,
              10,
              28,
              69,
              118,
              101,
              110,
              116,
              115,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              115,
              116,
              74,
              60,
              10,
              3,
              52,
              48,
              48,
              18,
              53,
              10,
              22,
              102,
              97,
              105,
              108,
              101,
              100,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              102,
              97,
              105,
              108,
              101,
              100,
              101,
              118,
              101,
              110,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              125,
              47,
              123,
              118,
              105,
              101,
              119,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              123,
              102,
              97,
              105,
              108,
              101,
              100,
              95,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /** Imports data into an instance and creates different objects */
    importData: {
      name: "ImportData",
      requestType: ImportDataRequest,
      requestStream: false,
      responseType: ImportDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              199,
              1,
              10,
              13,
              73,
              109,
              112,
              111,
              114,
              116,
              47,
              69,
              120,
              112,
              111,
              114,
              116,
              18,
              11,
              73,
              109,
              112,
              111,
              114,
              116,
              32,
              68,
              97,
              116,
              97,
              26,
              168,
              1,
              73,
              109,
              112,
              111,
              114,
              116,
              32,
              100,
              97,
              116,
              97,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              116,
              111,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              73,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              111,
              114,
              32,
              121,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              112,
              111,
              105,
              110,
              116,
              32,
              116,
              111,
              32,
              97,
              32,
              102,
              105,
              108,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              83,
              51,
              32,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              44,
              32,
              102,
              114,
              111,
              109,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              116,
              104,
              101,
              32,
              100,
              97,
              116,
              97,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              97,
              100,
              101,
              100,
              46,
            ]),
          ],
          400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
          578365826: [Buffer.from([12, 58, 1, 42, 34, 7, 47, 105, 109, 112, 111, 114, 116])],
        },
      },
    },
    exportData: {
      name: "ExportData",
      requestType: ExportDataRequest,
      requestStream: false,
      responseType: ExportDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              205,
              1,
              10,
              13,
              73,
              109,
              112,
              111,
              114,
              116,
              47,
              69,
              120,
              112,
              111,
              114,
              116,
              18,
              11,
              69,
              120,
              112,
              111,
              114,
              116,
              32,
              68,
              97,
              116,
              97,
              26,
              174,
              1,
              69,
              120,
              112,
              111,
              114,
              116,
              32,
              100,
              97,
              116,
              97,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              116,
              111,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              73,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              101,
              120,
              112,
              111,
              114,
              116,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              111,
              114,
              32,
              121,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              112,
              111,
              105,
              110,
              116,
              32,
              116,
              111,
              32,
              97,
              32,
              102,
              105,
              108,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              83,
              51,
              32,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              44,
              32,
              119,
              104,
              101,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              97,
              116,
              97,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              46,
            ]),
          ],
          400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
          578365826: [Buffer.from([12, 58, 1, 42, 34, 7, 47, 101, 120, 112, 111, 114, 116])],
        },
      },
    },
    listEventTypes: {
      name: "ListEventTypes",
      requestType: ListEventTypesRequest,
      requestStream: false,
      responseType: ListEventTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              144,
              1,
              10,
              6,
              69,
              118,
              101,
              110,
              116,
              115,
              18,
              11,
              69,
              118,
              101,
              110,
              116,
              32,
              116,
              121,
              112,
              101,
              115,
              26,
              121,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              116,
              121,
              112,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              32,
              116,
              104,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              116,
              121,
              112,
              101,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              115,
              116,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              47,
              116,
              121,
              112,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listEvents: {
      name: "ListEvents",
      requestType: ListEventsRequest,
      requestStream: false,
      responseType: ListEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              146,
              1,
              10,
              6,
              69,
              118,
              101,
              110,
              116,
              115,
              18,
              13,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              69,
              118,
              101,
              110,
              116,
              115,
              26,
              121,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              116,
              121,
              112,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              32,
              116,
              104,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              116,
              121,
              112,
              101,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              115,
              116,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([20, 58, 1, 42, 34, 15, 47, 101, 118, 101, 110, 116, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
          ],
        },
      },
    },
    listAggregateTypes: {
      name: "ListAggregateTypes",
      requestType: ListAggregateTypesRequest,
      requestStream: false,
      responseType: ListAggregateTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              162,
              1,
              10,
              6,
              69,
              118,
              101,
              110,
              116,
              115,
              18,
              20,
              76,
              105,
              115,
              116,
              32,
              65,
              103,
              103,
              114,
              101,
              103,
              97,
              116,
              101,
              32,
              84,
              121,
              112,
              101,
              115,
              26,
              129,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              97,
              103,
              103,
              114,
              101,
              103,
              97,
              116,
              101,
              32,
              116,
              121,
              112,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              32,
              116,
              104,
              101,
              32,
              97,
              103,
              103,
              114,
              101,
              103,
              97,
              116,
              101,
              32,
              116,
              121,
              112,
              101,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              115,
              116,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
            ]),
          ],
          400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              97,
              103,
              103,
              114,
              101,
              103,
              97,
              116,
              101,
              115,
              47,
              116,
              121,
              112,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Activates the "LoginDefaultOrg" feature by setting the flag to "true"
     * This is irreversible!
     * Once activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set
     */
    activateFeatureLoginDefaultOrg: {
      name: "ActivateFeatureLoginDefaultOrg",
      requestType: ActivateFeatureLoginDefaultOrgRequest,
      requestStream: false,
      responseType: ActivateFeatureLoginDefaultOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          400002: [
            Buffer.from([19, 10, 17, 105, 97, 109, 46, 102, 101, 97, 116, 117, 114, 101, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              29,
              26,
              27,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              95,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              95,
              111,
              114,
              103,
            ]),
          ],
        },
      },
    },
    listMilestones: {
      name: "ListMilestones",
      requestType: ListMilestonesRequest,
      requestStream: false,
      responseType: ListMilestonesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              85,
              10,
              10,
              77,
              105,
              108,
              101,
              115,
              116,
              111,
              110,
              101,
              115,
              18,
              17,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              77,
              105,
              108,
              101,
              115,
              116,
              111,
              110,
              101,
              115,
              26,
              52,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              97,
              99,
              104,
              101,
              100,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              117,
              115,
              97,
              103,
              101,
              32,
              109,
              105,
              108,
              101,
              115,
              116,
              111,
              110,
              101,
              115,
              46,
            ]),
          ],
          400002: [Buffer.from([17, 10, 15, 109, 105, 108, 101, 115, 116, 111, 110, 101, 115, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              24,
              58,
              1,
              42,
              34,
              19,
              47,
              109,
              105,
              108,
              101,
              115,
              116,
              111,
              110,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Sets restrictions */
    setRestrictions: {
      name: "SetRestrictions",
      requestType: SetRestrictionsRequest,
      requestStream: false,
      responseType: SetRestrictionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              220,
              1,
              10,
              20,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              32,
              82,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              31,
              82,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              26,
              98,
              85,
              110,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              46,
              32,
              90,
              101,
              114,
              111,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              46,
              74,
              26,
              10,
              3,
              50,
              48,
              48,
              18,
              19,
              10,
              17,
              82,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              101,
              116,
              46,
              74,
              35,
              10,
              3,
              52,
              48,
              48,
              18,
              28,
              10,
              26,
              78,
              111,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([
              24,
              10,
              22,
              105,
              97,
              109,
              46,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([18, 58, 1, 42, 26, 13, 47, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115]),
          ],
        },
      },
    },
    /** Gets restrictions */
    getRestrictions: {
      name: "GetRestrictions",
      requestType: GetRestrictionsRequest,
      requestStream: false,
      responseType: GetRestrictionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              149,
              3,
              10,
              20,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              32,
              82,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              53,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              26,
              194,
              1,
              85,
              110,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              32,
              109,
              101,
              97,
              110,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              119,
              101,
              114,
              101,
              32,
              110,
              101,
              118,
              101,
              114,
              32,
              115,
              101,
              116,
              44,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              110,
              111,
              116,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              101,
              100,
              44,
              32,
              97,
              108,
              108,
              32,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              110,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              101,
              109,
              112,
              116,
              121,
              46,
              74,
              128,
              1,
              10,
              3,
              50,
              48,
              48,
              18,
              121,
              10,
              119,
              84,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              117,
              115,
              32,
              50,
              48,
              48,
              32,
              105,
              115,
              32,
              97,
              108,
              115,
              111,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              102,
              32,
              110,
              111,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              119,
              101,
              114,
              101,
              32,
              101,
              118,
              101,
              114,
              32,
              115,
              101,
              116,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              105,
              115,
              32,
              99,
              97,
              115,
              101,
              44,
              32,
              97,
              108,
              108,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              32,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              110,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              46,
            ]),
          ],
          400002: [
            Buffer.from([
              23,
              10,
              21,
              105,
              97,
              109,
              46,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              105,
              111,
              110,
              115,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [Buffer.from([15, 18, 13, 47, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115])],
        },
      },
    },
  },
} as const;

export interface AdminServiceImplementation<CallContextExt = {}> {
  healthz(request: HealthzRequest, context: CallContext & CallContextExt): Promise<DeepPartial<HealthzResponse>>;
  getSupportedLanguages(
    request: GetSupportedLanguagesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSupportedLanguagesResponse>>;
  getAllowedLanguages(
    request: GetAllowedLanguagesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllowedLanguagesResponse>>;
  setDefaultLanguage(
    request: SetDefaultLanguageRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultLanguageResponse>>;
  getDefaultLanguage(
    request: GetDefaultLanguageRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultLanguageResponse>>;
  getMyInstance(
    request: GetMyInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetMyInstanceResponse>>;
  listInstanceDomains(
    request: ListInstanceDomainsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstanceDomainsResponse>>;
  listInstanceTrustedDomains(
    request: ListInstanceTrustedDomainsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstanceTrustedDomainsResponse>>;
  addInstanceTrustedDomain(
    request: AddInstanceTrustedDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddInstanceTrustedDomainResponse>>;
  removeInstanceTrustedDomain(
    request: RemoveInstanceTrustedDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveInstanceTrustedDomainResponse>>;
  listSecretGenerators(
    request: ListSecretGeneratorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSecretGeneratorsResponse>>;
  getSecretGenerator(
    request: GetSecretGeneratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSecretGeneratorResponse>>;
  updateSecretGenerator(
    request: UpdateSecretGeneratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSecretGeneratorResponse>>;
  /**
   * Deprecated: Get active SMTP Configuration
   *
   * Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.
   *
   * Deprecated: please move to the new endpoint GetEmailProvider.
   */
  getSMTPConfig(
    request: GetSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSMTPConfigResponse>>;
  /**
   * Deprecated: Get SMTP provider configuration by its id
   *
   * Get a specific SMTP provider configuration by its ID.
   *
   * Deprecated: please move to the new endpoint GetEmailProviderById.
   */
  getSMTPConfigById(
    request: GetSMTPConfigByIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSMTPConfigByIdResponse>>;
  /**
   * Deprecated: Add SMTP Configuration
   *
   * Add a new SMTP configuration if nothing is set yet.
   *
   * Deprecated: please move to the new endpoint AddEmailProviderSMTP.
   */
  addSMTPConfig(
    request: AddSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSMTPConfigResponse>>;
  /**
   * Deprecated: Update SMTP Configuration
   *
   * Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
   *
   * Deprecated: please move to the new endpoint UpdateEmailProviderSMTP.
   */
  updateSMTPConfig(
    request: UpdateSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSMTPConfigResponse>>;
  /**
   * Deprecated: Update SMTP Password
   *
   * Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
   *
   * Deprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.
   */
  updateSMTPConfigPassword(
    request: UpdateSMTPConfigPasswordRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSMTPConfigPasswordResponse>>;
  /**
   * Deprecated: Activate SMTP Provider
   *
   * Activate an SMTP provider.
   *
   * Deprecated: please move to the new endpoint ActivateEmailProvider.
   */
  activateSMTPConfig(
    request: ActivateSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ActivateSMTPConfigResponse>>;
  /**
   * Deprecated: Deactivate SMTP Provider
   *
   * Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.
   *
   * Deprecated: please move to the new endpoint DeactivateEmailProvider.
   */
  deactivateSMTPConfig(
    request: DeactivateSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateSMTPConfigResponse>>;
  /**
   * Deprecated: Remove SMTP Configuration
   *
   * Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.
   *
   * Deprecated: please move to the new endpoint RemoveEmailProvider.
   */
  removeSMTPConfig(
    request: RemoveSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveSMTPConfigResponse>>;
  /**
   * Deprecated: Test SMTP Provider
   *
   * Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.
   *
   * Deprecated: please move to the new endpoint TestEmailProviderSMTPById.
   */
  testSMTPConfigById(
    request: TestSMTPConfigByIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestSMTPConfigByIdResponse>>;
  /**
   * Deprecated: Test SMTP Provider
   *
   * Test an SMTP provider. After testing the provider, the users will receive information about the test results.
   *
   * Deprecated: please move to the new endpoint TestEmailProviderSMTP.
   */
  testSMTPConfig(
    request: TestSMTPConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestSMTPConfigResponse>>;
  /**
   * Deprecated: List SMTP Configs
   *
   * Returns a list of SMTP configurations.
   *
   * Deprecated: please move to the new endpoint ListEmailProviders.
   */
  listSMTPConfigs(
    request: ListSMTPConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSMTPConfigsResponse>>;
  listEmailProviders(
    request: ListEmailProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEmailProvidersResponse>>;
  getEmailProvider(
    request: GetEmailProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetEmailProviderResponse>>;
  getEmailProviderById(
    request: GetEmailProviderByIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetEmailProviderByIdResponse>>;
  addEmailProviderSMTP(
    request: AddEmailProviderSMTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddEmailProviderSMTPResponse>>;
  updateEmailProviderSMTP(
    request: UpdateEmailProviderSMTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmailProviderSMTPResponse>>;
  addEmailProviderHTTP(
    request: AddEmailProviderHTTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddEmailProviderHTTPResponse>>;
  updateEmailProviderHTTP(
    request: UpdateEmailProviderHTTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmailProviderHTTPResponse>>;
  updateEmailProviderSMTPPassword(
    request: UpdateEmailProviderSMTPPasswordRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateEmailProviderSMTPPasswordResponse>>;
  activateEmailProvider(
    request: ActivateEmailProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ActivateEmailProviderResponse>>;
  deactivateEmailProvider(
    request: DeactivateEmailProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateEmailProviderResponse>>;
  removeEmailProvider(
    request: RemoveEmailProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveEmailProviderResponse>>;
  testEmailProviderSMTPById(
    request: TestEmailProviderSMTPByIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestEmailProviderSMTPByIdResponse>>;
  testEmailProviderSMTP(
    request: TestEmailProviderSMTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestEmailProviderSMTPResponse>>;
  listSMSProviders(
    request: ListSMSProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSMSProvidersResponse>>;
  getSMSProvider(
    request: GetSMSProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSMSProviderResponse>>;
  addSMSProviderTwilio(
    request: AddSMSProviderTwilioRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSMSProviderTwilioResponse>>;
  updateSMSProviderTwilio(
    request: UpdateSMSProviderTwilioRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSMSProviderTwilioResponse>>;
  updateSMSProviderTwilioToken(
    request: UpdateSMSProviderTwilioTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSMSProviderTwilioTokenResponse>>;
  addSMSProviderHTTP(
    request: AddSMSProviderHTTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSMSProviderHTTPResponse>>;
  updateSMSProviderHTTP(
    request: UpdateSMSProviderHTTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSMSProviderHTTPResponse>>;
  activateSMSProvider(
    request: ActivateSMSProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ActivateSMSProviderResponse>>;
  deactivateSMSProvider(
    request: DeactivateSMSProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateSMSProviderResponse>>;
  removeSMSProvider(
    request: RemoveSMSProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveSMSProviderResponse>>;
  getOIDCSettings(
    request: GetOIDCSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOIDCSettingsResponse>>;
  addOIDCSettings(
    request: AddOIDCSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOIDCSettingsResponse>>;
  updateOIDCSettings(
    request: UpdateOIDCSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOIDCSettingsResponse>>;
  getFileSystemNotificationProvider(
    request: GetFileSystemNotificationProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetFileSystemNotificationProviderResponse>>;
  getLogNotificationProvider(
    request: GetLogNotificationProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLogNotificationProviderResponse>>;
  getSecurityPolicy(
    request: GetSecurityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSecurityPolicyResponse>>;
  setSecurityPolicy(
    request: SetSecurityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetSecurityPolicyResponse>>;
  getOrgByID(
    request: GetOrgByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOrgByIDResponse>>;
  isOrgUnique(
    request: IsOrgUniqueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IsOrgUniqueResponse>>;
  setDefaultOrg(
    request: SetDefaultOrgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultOrgResponse>>;
  getDefaultOrg(
    request: GetDefaultOrgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultOrgResponse>>;
  listOrgs(request: ListOrgsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListOrgsResponse>>;
  setUpOrg(request: SetUpOrgRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SetUpOrgResponse>>;
  removeOrg(request: RemoveOrgRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RemoveOrgResponse>>;
  getIDPByID(
    request: GetIDPByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIDPByIDResponse>>;
  listIDPs(request: ListIDPsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListIDPsResponse>>;
  addOIDCIDP(
    request: AddOIDCIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOIDCIDPResponse>>;
  addJWTIDP(request: AddJWTIDPRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddJWTIDPResponse>>;
  updateIDP(request: UpdateIDPRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UpdateIDPResponse>>;
  deactivateIDP(
    request: DeactivateIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateIDPResponse>>;
  reactivateIDP(
    request: ReactivateIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateIDPResponse>>;
  removeIDP(request: RemoveIDPRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RemoveIDPResponse>>;
  updateIDPOIDCConfig(
    request: UpdateIDPOIDCConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateIDPOIDCConfigResponse>>;
  updateIDPJWTConfig(
    request: UpdateIDPJWTConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateIDPJWTConfigResponse>>;
  /**
   * Returns all identity providers, which match the query
   * Limit should always be set, there is a default limit set by the service
   */
  listProviders(
    request: ListProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProvidersResponse>>;
  /** Returns an identity provider of the instance */
  getProviderByID(
    request: GetProviderByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProviderByIDResponse>>;
  /** Add a new OAuth2 identity provider on the instance */
  addGenericOAuthProvider(
    request: AddGenericOAuthProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGenericOAuthProviderResponse>>;
  /** Change an existing OAuth2 identity provider on the instance */
  updateGenericOAuthProvider(
    request: UpdateGenericOAuthProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGenericOAuthProviderResponse>>;
  /** Add a new OIDC identity provider on the instance */
  addGenericOIDCProvider(
    request: AddGenericOIDCProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGenericOIDCProviderResponse>>;
  /** Change an existing OIDC identity provider on the instance */
  updateGenericOIDCProvider(
    request: UpdateGenericOIDCProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGenericOIDCProviderResponse>>;
  /** Migrate an existing OIDC identity provider on the instance */
  migrateGenericOIDCProvider(
    request: MigrateGenericOIDCProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MigrateGenericOIDCProviderResponse>>;
  /** Add a new JWT identity provider on the instance */
  addJWTProvider(
    request: AddJWTProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddJWTProviderResponse>>;
  /** Change an existing JWT identity provider on the instance */
  updateJWTProvider(
    request: UpdateJWTProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateJWTProviderResponse>>;
  /** Add a new Azure AD identity provider on the instance */
  addAzureADProvider(
    request: AddAzureADProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddAzureADProviderResponse>>;
  /** Change an existing Azure AD identity provider on the instance */
  updateAzureADProvider(
    request: UpdateAzureADProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateAzureADProviderResponse>>;
  /** Add a new GitHub identity provider on the instance */
  addGitHubProvider(
    request: AddGitHubProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitHubProviderResponse>>;
  /** Change an existing GitHub identity provider on the instance */
  updateGitHubProvider(
    request: UpdateGitHubProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitHubProviderResponse>>;
  /** Add a new GitHub Enterprise Server identity provider on the instance */
  addGitHubEnterpriseServerProvider(
    request: AddGitHubEnterpriseServerProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitHubEnterpriseServerProviderResponse>>;
  /** Change an existing GitHub Enterprise Server identity provider on the instance */
  updateGitHubEnterpriseServerProvider(
    request: UpdateGitHubEnterpriseServerProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>>;
  /** Add a new GitLab identity provider on the instance */
  addGitLabProvider(
    request: AddGitLabProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitLabProviderResponse>>;
  /** Change an existing GitLab identity provider on the instance */
  updateGitLabProvider(
    request: UpdateGitLabProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitLabProviderResponse>>;
  /** Add a new self hosted GitLab identity provider on the instance */
  addGitLabSelfHostedProvider(
    request: AddGitLabSelfHostedProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitLabSelfHostedProviderResponse>>;
  /** Change an existing self hosted GitLab identity provider on the instance */
  updateGitLabSelfHostedProvider(
    request: UpdateGitLabSelfHostedProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitLabSelfHostedProviderResponse>>;
  /** Add a new Google identity provider on the instance */
  addGoogleProvider(
    request: AddGoogleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGoogleProviderResponse>>;
  /** Change an existing Google identity provider on the instance */
  updateGoogleProvider(
    request: UpdateGoogleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGoogleProviderResponse>>;
  /** Add a new LDAP identity provider on the instance */
  addLDAPProvider(
    request: AddLDAPProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddLDAPProviderResponse>>;
  /** Change an existing LDAP identity provider on the instance */
  updateLDAPProvider(
    request: UpdateLDAPProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLDAPProviderResponse>>;
  /** Add a new Apple identity provider on the instance */
  addAppleProvider(
    request: AddAppleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddAppleProviderResponse>>;
  /** Change an existing Apple identity provider on the instance */
  updateAppleProvider(
    request: UpdateAppleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateAppleProviderResponse>>;
  /** Add a new SAML identity provider on the instance */
  addSAMLProvider(
    request: AddSAMLProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSAMLProviderResponse>>;
  /** Change an existing SAML identity provider on the instance */
  updateSAMLProvider(
    request: UpdateSAMLProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSAMLProviderResponse>>;
  /** Regenerate certificate for an existing SAML identity provider in the organization */
  regenerateSAMLProviderCertificate(
    request: RegenerateSAMLProviderCertificateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegenerateSAMLProviderCertificateResponse>>;
  /**
   * Remove an identity provider
   * Will remove all linked providers of this configuration on the users
   */
  deleteProvider(
    request: DeleteProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteProviderResponse>>;
  getOrgIAMPolicy(
    request: GetOrgIAMPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOrgIAMPolicyResponse>>;
  updateOrgIAMPolicy(
    request: UpdateOrgIAMPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOrgIAMPolicyResponse>>;
  getCustomOrgIAMPolicy(
    request: GetCustomOrgIAMPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomOrgIAMPolicyResponse>>;
  addCustomOrgIAMPolicy(
    request: AddCustomOrgIAMPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomOrgIAMPolicyResponse>>;
  updateCustomOrgIAMPolicy(
    request: UpdateCustomOrgIAMPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomOrgIAMPolicyResponse>>;
  resetCustomOrgIAMPolicyToDefault(
    request: ResetCustomOrgIAMPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomOrgIAMPolicyToDefaultResponse>>;
  getDomainPolicy(
    request: GetDomainPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDomainPolicyResponse>>;
  updateDomainPolicy(
    request: UpdateDomainPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateDomainPolicyResponse>>;
  getCustomDomainPolicy(
    request: GetCustomDomainPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomDomainPolicyResponse>>;
  addCustomDomainPolicy(
    request: AddCustomDomainPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomDomainPolicyResponse>>;
  updateCustomDomainPolicy(
    request: UpdateCustomDomainPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomDomainPolicyResponse>>;
  resetCustomDomainPolicyToDefault(
    request: ResetCustomDomainPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomDomainPolicyToDefaultResponse>>;
  getLabelPolicy(
    request: GetLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLabelPolicyResponse>>;
  getPreviewLabelPolicy(
    request: GetPreviewLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPreviewLabelPolicyResponse>>;
  updateLabelPolicy(
    request: UpdateLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLabelPolicyResponse>>;
  activateLabelPolicy(
    request: ActivateLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ActivateLabelPolicyResponse>>;
  removeLabelPolicyLogo(
    request: RemoveLabelPolicyLogoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveLabelPolicyLogoResponse>>;
  removeLabelPolicyLogoDark(
    request: RemoveLabelPolicyLogoDarkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveLabelPolicyLogoDarkResponse>>;
  removeLabelPolicyIcon(
    request: RemoveLabelPolicyIconRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveLabelPolicyIconResponse>>;
  removeLabelPolicyIconDark(
    request: RemoveLabelPolicyIconDarkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveLabelPolicyIconDarkResponse>>;
  removeLabelPolicyFont(
    request: RemoveLabelPolicyFontRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveLabelPolicyFontResponse>>;
  getLoginPolicy(
    request: GetLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLoginPolicyResponse>>;
  updateLoginPolicy(
    request: UpdateLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLoginPolicyResponse>>;
  listLoginPolicyIDPs(
    request: ListLoginPolicyIDPsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLoginPolicyIDPsResponse>>;
  addIDPToLoginPolicy(
    request: AddIDPToLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddIDPToLoginPolicyResponse>>;
  removeIDPFromLoginPolicy(
    request: RemoveIDPFromLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveIDPFromLoginPolicyResponse>>;
  listLoginPolicySecondFactors(
    request: ListLoginPolicySecondFactorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLoginPolicySecondFactorsResponse>>;
  addSecondFactorToLoginPolicy(
    request: AddSecondFactorToLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSecondFactorToLoginPolicyResponse>>;
  removeSecondFactorFromLoginPolicy(
    request: RemoveSecondFactorFromLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>>;
  listLoginPolicyMultiFactors(
    request: ListLoginPolicyMultiFactorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLoginPolicyMultiFactorsResponse>>;
  addMultiFactorToLoginPolicy(
    request: AddMultiFactorToLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddMultiFactorToLoginPolicyResponse>>;
  removeMultiFactorFromLoginPolicy(
    request: RemoveMultiFactorFromLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>>;
  getPasswordComplexityPolicy(
    request: GetPasswordComplexityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPasswordComplexityPolicyResponse>>;
  updatePasswordComplexityPolicy(
    request: UpdatePasswordComplexityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePasswordComplexityPolicyResponse>>;
  getPasswordAgePolicy(
    request: GetPasswordAgePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPasswordAgePolicyResponse>>;
  updatePasswordAgePolicy(
    request: UpdatePasswordAgePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePasswordAgePolicyResponse>>;
  getLockoutPolicy(
    request: GetLockoutPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLockoutPolicyResponse>>;
  updateLockoutPolicy(
    request: UpdateLockoutPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLockoutPolicyResponse>>;
  getPrivacyPolicy(
    request: GetPrivacyPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPrivacyPolicyResponse>>;
  updatePrivacyPolicy(
    request: UpdatePrivacyPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePrivacyPolicyResponse>>;
  addNotificationPolicy(
    request: AddNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddNotificationPolicyResponse>>;
  getNotificationPolicy(
    request: GetNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetNotificationPolicyResponse>>;
  updateNotificationPolicy(
    request: UpdateNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateNotificationPolicyResponse>>;
  getDefaultInitMessageText(
    request: GetDefaultInitMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultInitMessageTextResponse>>;
  getCustomInitMessageText(
    request: GetCustomInitMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomInitMessageTextResponse>>;
  setDefaultInitMessageText(
    request: SetDefaultInitMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultInitMessageTextResponse>>;
  resetCustomInitMessageTextToDefault(
    request: ResetCustomInitMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomInitMessageTextToDefaultResponse>>;
  getDefaultPasswordResetMessageText(
    request: GetDefaultPasswordResetMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordResetMessageTextResponse>>;
  getCustomPasswordResetMessageText(
    request: GetCustomPasswordResetMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomPasswordResetMessageTextResponse>>;
  setDefaultPasswordResetMessageText(
    request: SetDefaultPasswordResetMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultPasswordResetMessageTextResponse>>;
  resetCustomPasswordResetMessageTextToDefault(
    request: ResetCustomPasswordResetMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>>;
  getDefaultVerifyEmailMessageText(
    request: GetDefaultVerifyEmailMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifyEmailMessageTextResponse>>;
  getCustomVerifyEmailMessageText(
    request: GetCustomVerifyEmailMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifyEmailMessageTextResponse>>;
  setDefaultVerifyEmailMessageText(
    request: SetDefaultVerifyEmailMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultVerifyEmailMessageTextResponse>>;
  resetCustomVerifyEmailMessageTextToDefault(
    request: ResetCustomVerifyEmailMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>>;
  getDefaultVerifyPhoneMessageText(
    request: GetDefaultVerifyPhoneMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>>;
  getCustomVerifyPhoneMessageText(
    request: GetCustomVerifyPhoneMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifyPhoneMessageTextResponse>>;
  setDefaultVerifyPhoneMessageText(
    request: SetDefaultVerifyPhoneMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultVerifyPhoneMessageTextResponse>>;
  resetCustomVerifyPhoneMessageTextToDefault(
    request: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>>;
  getDefaultVerifySMSOTPMessageText(
    request: GetDefaultVerifySMSOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifySMSOTPMessageTextResponse>>;
  getCustomVerifySMSOTPMessageText(
    request: GetCustomVerifySMSOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifySMSOTPMessageTextResponse>>;
  setDefaultVerifySMSOTPMessageText(
    request: SetDefaultVerifySMSOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultVerifySMSOTPMessageTextResponse>>;
  resetCustomVerifySMSOTPMessageTextToDefault(
    request: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>>;
  getDefaultVerifyEmailOTPMessageText(
    request: GetDefaultVerifyEmailOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifyEmailOTPMessageTextResponse>>;
  getCustomVerifyEmailOTPMessageText(
    request: GetCustomVerifyEmailOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifyEmailOTPMessageTextResponse>>;
  setDefaultVerifyEmailOTPMessageText(
    request: SetDefaultVerifyEmailOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultVerifyEmailOTPMessageTextResponse>>;
  resetCustomVerifyEmailOTPMessageTextToDefault(
    request: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>>;
  getDefaultDomainClaimedMessageText(
    request: GetDefaultDomainClaimedMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultDomainClaimedMessageTextResponse>>;
  getCustomDomainClaimedMessageText(
    request: GetCustomDomainClaimedMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomDomainClaimedMessageTextResponse>>;
  setDefaultDomainClaimedMessageText(
    request: SetDefaultDomainClaimedMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultDomainClaimedMessageTextResponse>>;
  resetCustomDomainClaimedMessageTextToDefault(
    request: ResetCustomDomainClaimedMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>>;
  getDefaultPasswordlessRegistrationMessageText(
    request: GetDefaultPasswordlessRegistrationMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>>;
  getCustomPasswordlessRegistrationMessageText(
    request: GetCustomPasswordlessRegistrationMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>>;
  setDefaultPasswordlessRegistrationMessageText(
    request: SetDefaultPasswordlessRegistrationMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultPasswordlessRegistrationMessageTextResponse>>;
  resetCustomPasswordlessRegistrationMessageTextToDefault(
    request: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>>;
  getDefaultPasswordChangeMessageText(
    request: GetDefaultPasswordChangeMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordChangeMessageTextResponse>>;
  getCustomPasswordChangeMessageText(
    request: GetCustomPasswordChangeMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomPasswordChangeMessageTextResponse>>;
  setDefaultPasswordChangeMessageText(
    request: SetDefaultPasswordChangeMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultPasswordChangeMessageTextResponse>>;
  resetCustomPasswordChangeMessageTextToDefault(
    request: ResetCustomPasswordChangeMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>>;
  getDefaultInviteUserMessageText(
    request: GetDefaultInviteUserMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultInviteUserMessageTextResponse>>;
  getCustomInviteUserMessageText(
    request: GetCustomInviteUserMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomInviteUserMessageTextResponse>>;
  setDefaultInviteUserMessageText(
    request: SetDefaultInviteUserMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetDefaultInviteUserMessageTextResponse>>;
  resetCustomInviteUserMessageTextToDefault(
    request: ResetCustomInviteUserMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomInviteUserMessageTextToDefaultResponse>>;
  getDefaultLoginTexts(
    request: GetDefaultLoginTextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultLoginTextsResponse>>;
  getCustomLoginTexts(
    request: GetCustomLoginTextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomLoginTextsResponse>>;
  setCustomLoginText(
    request: SetCustomLoginTextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomLoginTextsResponse>>;
  resetCustomLoginTextToDefault(
    request: ResetCustomLoginTextsToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomLoginTextsToDefaultResponse>>;
  listIAMMemberRoles(
    request: ListIAMMemberRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListIAMMemberRolesResponse>>;
  listIAMMembers(
    request: ListIAMMembersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListIAMMembersResponse>>;
  /**
   * Adds a user to the membership list of ZITADEL with the given roles
   * undefined roles will be dropped
   */
  addIAMMember(
    request: AddIAMMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddIAMMemberResponse>>;
  updateIAMMember(
    request: UpdateIAMMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateIAMMemberResponse>>;
  removeIAMMember(
    request: RemoveIAMMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveIAMMemberResponse>>;
  listViews(request: ListViewsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListViewsResponse>>;
  listFailedEvents(
    request: ListFailedEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFailedEventsResponse>>;
  removeFailedEvent(
    request: RemoveFailedEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveFailedEventResponse>>;
  /** Imports data into an instance and creates different objects */
  importData(
    request: ImportDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ImportDataResponse>>;
  exportData(
    request: ExportDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExportDataResponse>>;
  listEventTypes(
    request: ListEventTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEventTypesResponse>>;
  listEvents(
    request: ListEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEventsResponse>>;
  listAggregateTypes(
    request: ListAggregateTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAggregateTypesResponse>>;
  /**
   * Activates the "LoginDefaultOrg" feature by setting the flag to "true"
   * This is irreversible!
   * Once activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set
   */
  activateFeatureLoginDefaultOrg(
    request: ActivateFeatureLoginDefaultOrgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ActivateFeatureLoginDefaultOrgResponse>>;
  listMilestones(
    request: ListMilestonesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMilestonesResponse>>;
  /** Sets restrictions */
  setRestrictions(
    request: SetRestrictionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetRestrictionsResponse>>;
  /** Gets restrictions */
  getRestrictions(
    request: GetRestrictionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetRestrictionsResponse>>;
}

export interface AdminServiceClient<CallOptionsExt = {}> {
  healthz(request: DeepPartial<HealthzRequest>, options?: CallOptions & CallOptionsExt): Promise<HealthzResponse>;
  getSupportedLanguages(
    request: DeepPartial<GetSupportedLanguagesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSupportedLanguagesResponse>;
  getAllowedLanguages(
    request: DeepPartial<GetAllowedLanguagesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllowedLanguagesResponse>;
  setDefaultLanguage(
    request: DeepPartial<SetDefaultLanguageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultLanguageResponse>;
  getDefaultLanguage(
    request: DeepPartial<GetDefaultLanguageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultLanguageResponse>;
  getMyInstance(
    request: DeepPartial<GetMyInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetMyInstanceResponse>;
  listInstanceDomains(
    request: DeepPartial<ListInstanceDomainsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstanceDomainsResponse>;
  listInstanceTrustedDomains(
    request: DeepPartial<ListInstanceTrustedDomainsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstanceTrustedDomainsResponse>;
  addInstanceTrustedDomain(
    request: DeepPartial<AddInstanceTrustedDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddInstanceTrustedDomainResponse>;
  removeInstanceTrustedDomain(
    request: DeepPartial<RemoveInstanceTrustedDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveInstanceTrustedDomainResponse>;
  listSecretGenerators(
    request: DeepPartial<ListSecretGeneratorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSecretGeneratorsResponse>;
  getSecretGenerator(
    request: DeepPartial<GetSecretGeneratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSecretGeneratorResponse>;
  updateSecretGenerator(
    request: DeepPartial<UpdateSecretGeneratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSecretGeneratorResponse>;
  /**
   * Deprecated: Get active SMTP Configuration
   *
   * Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.
   *
   * Deprecated: please move to the new endpoint GetEmailProvider.
   */
  getSMTPConfig(
    request: DeepPartial<GetSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSMTPConfigResponse>;
  /**
   * Deprecated: Get SMTP provider configuration by its id
   *
   * Get a specific SMTP provider configuration by its ID.
   *
   * Deprecated: please move to the new endpoint GetEmailProviderById.
   */
  getSMTPConfigById(
    request: DeepPartial<GetSMTPConfigByIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSMTPConfigByIdResponse>;
  /**
   * Deprecated: Add SMTP Configuration
   *
   * Add a new SMTP configuration if nothing is set yet.
   *
   * Deprecated: please move to the new endpoint AddEmailProviderSMTP.
   */
  addSMTPConfig(
    request: DeepPartial<AddSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSMTPConfigResponse>;
  /**
   * Deprecated: Update SMTP Configuration
   *
   * Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
   *
   * Deprecated: please move to the new endpoint UpdateEmailProviderSMTP.
   */
  updateSMTPConfig(
    request: DeepPartial<UpdateSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSMTPConfigResponse>;
  /**
   * Deprecated: Update SMTP Password
   *
   * Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
   *
   * Deprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.
   */
  updateSMTPConfigPassword(
    request: DeepPartial<UpdateSMTPConfigPasswordRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSMTPConfigPasswordResponse>;
  /**
   * Deprecated: Activate SMTP Provider
   *
   * Activate an SMTP provider.
   *
   * Deprecated: please move to the new endpoint ActivateEmailProvider.
   */
  activateSMTPConfig(
    request: DeepPartial<ActivateSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ActivateSMTPConfigResponse>;
  /**
   * Deprecated: Deactivate SMTP Provider
   *
   * Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.
   *
   * Deprecated: please move to the new endpoint DeactivateEmailProvider.
   */
  deactivateSMTPConfig(
    request: DeepPartial<DeactivateSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateSMTPConfigResponse>;
  /**
   * Deprecated: Remove SMTP Configuration
   *
   * Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.
   *
   * Deprecated: please move to the new endpoint RemoveEmailProvider.
   */
  removeSMTPConfig(
    request: DeepPartial<RemoveSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveSMTPConfigResponse>;
  /**
   * Deprecated: Test SMTP Provider
   *
   * Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.
   *
   * Deprecated: please move to the new endpoint TestEmailProviderSMTPById.
   */
  testSMTPConfigById(
    request: DeepPartial<TestSMTPConfigByIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestSMTPConfigByIdResponse>;
  /**
   * Deprecated: Test SMTP Provider
   *
   * Test an SMTP provider. After testing the provider, the users will receive information about the test results.
   *
   * Deprecated: please move to the new endpoint TestEmailProviderSMTP.
   */
  testSMTPConfig(
    request: DeepPartial<TestSMTPConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestSMTPConfigResponse>;
  /**
   * Deprecated: List SMTP Configs
   *
   * Returns a list of SMTP configurations.
   *
   * Deprecated: please move to the new endpoint ListEmailProviders.
   */
  listSMTPConfigs(
    request: DeepPartial<ListSMTPConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSMTPConfigsResponse>;
  listEmailProviders(
    request: DeepPartial<ListEmailProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEmailProvidersResponse>;
  getEmailProvider(
    request: DeepPartial<GetEmailProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetEmailProviderResponse>;
  getEmailProviderById(
    request: DeepPartial<GetEmailProviderByIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetEmailProviderByIdResponse>;
  addEmailProviderSMTP(
    request: DeepPartial<AddEmailProviderSMTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddEmailProviderSMTPResponse>;
  updateEmailProviderSMTP(
    request: DeepPartial<UpdateEmailProviderSMTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmailProviderSMTPResponse>;
  addEmailProviderHTTP(
    request: DeepPartial<AddEmailProviderHTTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddEmailProviderHTTPResponse>;
  updateEmailProviderHTTP(
    request: DeepPartial<UpdateEmailProviderHTTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmailProviderHTTPResponse>;
  updateEmailProviderSMTPPassword(
    request: DeepPartial<UpdateEmailProviderSMTPPasswordRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateEmailProviderSMTPPasswordResponse>;
  activateEmailProvider(
    request: DeepPartial<ActivateEmailProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ActivateEmailProviderResponse>;
  deactivateEmailProvider(
    request: DeepPartial<DeactivateEmailProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateEmailProviderResponse>;
  removeEmailProvider(
    request: DeepPartial<RemoveEmailProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveEmailProviderResponse>;
  testEmailProviderSMTPById(
    request: DeepPartial<TestEmailProviderSMTPByIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestEmailProviderSMTPByIdResponse>;
  testEmailProviderSMTP(
    request: DeepPartial<TestEmailProviderSMTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestEmailProviderSMTPResponse>;
  listSMSProviders(
    request: DeepPartial<ListSMSProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSMSProvidersResponse>;
  getSMSProvider(
    request: DeepPartial<GetSMSProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSMSProviderResponse>;
  addSMSProviderTwilio(
    request: DeepPartial<AddSMSProviderTwilioRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSMSProviderTwilioResponse>;
  updateSMSProviderTwilio(
    request: DeepPartial<UpdateSMSProviderTwilioRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSMSProviderTwilioResponse>;
  updateSMSProviderTwilioToken(
    request: DeepPartial<UpdateSMSProviderTwilioTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSMSProviderTwilioTokenResponse>;
  addSMSProviderHTTP(
    request: DeepPartial<AddSMSProviderHTTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSMSProviderHTTPResponse>;
  updateSMSProviderHTTP(
    request: DeepPartial<UpdateSMSProviderHTTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSMSProviderHTTPResponse>;
  activateSMSProvider(
    request: DeepPartial<ActivateSMSProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ActivateSMSProviderResponse>;
  deactivateSMSProvider(
    request: DeepPartial<DeactivateSMSProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateSMSProviderResponse>;
  removeSMSProvider(
    request: DeepPartial<RemoveSMSProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveSMSProviderResponse>;
  getOIDCSettings(
    request: DeepPartial<GetOIDCSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOIDCSettingsResponse>;
  addOIDCSettings(
    request: DeepPartial<AddOIDCSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOIDCSettingsResponse>;
  updateOIDCSettings(
    request: DeepPartial<UpdateOIDCSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOIDCSettingsResponse>;
  getFileSystemNotificationProvider(
    request: DeepPartial<GetFileSystemNotificationProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetFileSystemNotificationProviderResponse>;
  getLogNotificationProvider(
    request: DeepPartial<GetLogNotificationProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLogNotificationProviderResponse>;
  getSecurityPolicy(
    request: DeepPartial<GetSecurityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSecurityPolicyResponse>;
  setSecurityPolicy(
    request: DeepPartial<SetSecurityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetSecurityPolicyResponse>;
  getOrgByID(
    request: DeepPartial<GetOrgByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOrgByIDResponse>;
  isOrgUnique(
    request: DeepPartial<IsOrgUniqueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IsOrgUniqueResponse>;
  setDefaultOrg(
    request: DeepPartial<SetDefaultOrgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultOrgResponse>;
  getDefaultOrg(
    request: DeepPartial<GetDefaultOrgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultOrgResponse>;
  listOrgs(request: DeepPartial<ListOrgsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListOrgsResponse>;
  setUpOrg(request: DeepPartial<SetUpOrgRequest>, options?: CallOptions & CallOptionsExt): Promise<SetUpOrgResponse>;
  removeOrg(request: DeepPartial<RemoveOrgRequest>, options?: CallOptions & CallOptionsExt): Promise<RemoveOrgResponse>;
  getIDPByID(
    request: DeepPartial<GetIDPByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIDPByIDResponse>;
  listIDPs(request: DeepPartial<ListIDPsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListIDPsResponse>;
  addOIDCIDP(
    request: DeepPartial<AddOIDCIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOIDCIDPResponse>;
  addJWTIDP(request: DeepPartial<AddJWTIDPRequest>, options?: CallOptions & CallOptionsExt): Promise<AddJWTIDPResponse>;
  updateIDP(request: DeepPartial<UpdateIDPRequest>, options?: CallOptions & CallOptionsExt): Promise<UpdateIDPResponse>;
  deactivateIDP(
    request: DeepPartial<DeactivateIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateIDPResponse>;
  reactivateIDP(
    request: DeepPartial<ReactivateIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateIDPResponse>;
  removeIDP(request: DeepPartial<RemoveIDPRequest>, options?: CallOptions & CallOptionsExt): Promise<RemoveIDPResponse>;
  updateIDPOIDCConfig(
    request: DeepPartial<UpdateIDPOIDCConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateIDPOIDCConfigResponse>;
  updateIDPJWTConfig(
    request: DeepPartial<UpdateIDPJWTConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateIDPJWTConfigResponse>;
  /**
   * Returns all identity providers, which match the query
   * Limit should always be set, there is a default limit set by the service
   */
  listProviders(
    request: DeepPartial<ListProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProvidersResponse>;
  /** Returns an identity provider of the instance */
  getProviderByID(
    request: DeepPartial<GetProviderByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProviderByIDResponse>;
  /** Add a new OAuth2 identity provider on the instance */
  addGenericOAuthProvider(
    request: DeepPartial<AddGenericOAuthProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGenericOAuthProviderResponse>;
  /** Change an existing OAuth2 identity provider on the instance */
  updateGenericOAuthProvider(
    request: DeepPartial<UpdateGenericOAuthProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGenericOAuthProviderResponse>;
  /** Add a new OIDC identity provider on the instance */
  addGenericOIDCProvider(
    request: DeepPartial<AddGenericOIDCProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGenericOIDCProviderResponse>;
  /** Change an existing OIDC identity provider on the instance */
  updateGenericOIDCProvider(
    request: DeepPartial<UpdateGenericOIDCProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGenericOIDCProviderResponse>;
  /** Migrate an existing OIDC identity provider on the instance */
  migrateGenericOIDCProvider(
    request: DeepPartial<MigrateGenericOIDCProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MigrateGenericOIDCProviderResponse>;
  /** Add a new JWT identity provider on the instance */
  addJWTProvider(
    request: DeepPartial<AddJWTProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddJWTProviderResponse>;
  /** Change an existing JWT identity provider on the instance */
  updateJWTProvider(
    request: DeepPartial<UpdateJWTProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateJWTProviderResponse>;
  /** Add a new Azure AD identity provider on the instance */
  addAzureADProvider(
    request: DeepPartial<AddAzureADProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddAzureADProviderResponse>;
  /** Change an existing Azure AD identity provider on the instance */
  updateAzureADProvider(
    request: DeepPartial<UpdateAzureADProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateAzureADProviderResponse>;
  /** Add a new GitHub identity provider on the instance */
  addGitHubProvider(
    request: DeepPartial<AddGitHubProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitHubProviderResponse>;
  /** Change an existing GitHub identity provider on the instance */
  updateGitHubProvider(
    request: DeepPartial<UpdateGitHubProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitHubProviderResponse>;
  /** Add a new GitHub Enterprise Server identity provider on the instance */
  addGitHubEnterpriseServerProvider(
    request: DeepPartial<AddGitHubEnterpriseServerProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitHubEnterpriseServerProviderResponse>;
  /** Change an existing GitHub Enterprise Server identity provider on the instance */
  updateGitHubEnterpriseServerProvider(
    request: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitHubEnterpriseServerProviderResponse>;
  /** Add a new GitLab identity provider on the instance */
  addGitLabProvider(
    request: DeepPartial<AddGitLabProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitLabProviderResponse>;
  /** Change an existing GitLab identity provider on the instance */
  updateGitLabProvider(
    request: DeepPartial<UpdateGitLabProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitLabProviderResponse>;
  /** Add a new self hosted GitLab identity provider on the instance */
  addGitLabSelfHostedProvider(
    request: DeepPartial<AddGitLabSelfHostedProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitLabSelfHostedProviderResponse>;
  /** Change an existing self hosted GitLab identity provider on the instance */
  updateGitLabSelfHostedProvider(
    request: DeepPartial<UpdateGitLabSelfHostedProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitLabSelfHostedProviderResponse>;
  /** Add a new Google identity provider on the instance */
  addGoogleProvider(
    request: DeepPartial<AddGoogleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGoogleProviderResponse>;
  /** Change an existing Google identity provider on the instance */
  updateGoogleProvider(
    request: DeepPartial<UpdateGoogleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGoogleProviderResponse>;
  /** Add a new LDAP identity provider on the instance */
  addLDAPProvider(
    request: DeepPartial<AddLDAPProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddLDAPProviderResponse>;
  /** Change an existing LDAP identity provider on the instance */
  updateLDAPProvider(
    request: DeepPartial<UpdateLDAPProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLDAPProviderResponse>;
  /** Add a new Apple identity provider on the instance */
  addAppleProvider(
    request: DeepPartial<AddAppleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddAppleProviderResponse>;
  /** Change an existing Apple identity provider on the instance */
  updateAppleProvider(
    request: DeepPartial<UpdateAppleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateAppleProviderResponse>;
  /** Add a new SAML identity provider on the instance */
  addSAMLProvider(
    request: DeepPartial<AddSAMLProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSAMLProviderResponse>;
  /** Change an existing SAML identity provider on the instance */
  updateSAMLProvider(
    request: DeepPartial<UpdateSAMLProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSAMLProviderResponse>;
  /** Regenerate certificate for an existing SAML identity provider in the organization */
  regenerateSAMLProviderCertificate(
    request: DeepPartial<RegenerateSAMLProviderCertificateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegenerateSAMLProviderCertificateResponse>;
  /**
   * Remove an identity provider
   * Will remove all linked providers of this configuration on the users
   */
  deleteProvider(
    request: DeepPartial<DeleteProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteProviderResponse>;
  getOrgIAMPolicy(
    request: DeepPartial<GetOrgIAMPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOrgIAMPolicyResponse>;
  updateOrgIAMPolicy(
    request: DeepPartial<UpdateOrgIAMPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOrgIAMPolicyResponse>;
  getCustomOrgIAMPolicy(
    request: DeepPartial<GetCustomOrgIAMPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomOrgIAMPolicyResponse>;
  addCustomOrgIAMPolicy(
    request: DeepPartial<AddCustomOrgIAMPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomOrgIAMPolicyResponse>;
  updateCustomOrgIAMPolicy(
    request: DeepPartial<UpdateCustomOrgIAMPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomOrgIAMPolicyResponse>;
  resetCustomOrgIAMPolicyToDefault(
    request: DeepPartial<ResetCustomOrgIAMPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomOrgIAMPolicyToDefaultResponse>;
  getDomainPolicy(
    request: DeepPartial<GetDomainPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDomainPolicyResponse>;
  updateDomainPolicy(
    request: DeepPartial<UpdateDomainPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateDomainPolicyResponse>;
  getCustomDomainPolicy(
    request: DeepPartial<GetCustomDomainPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomDomainPolicyResponse>;
  addCustomDomainPolicy(
    request: DeepPartial<AddCustomDomainPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomDomainPolicyResponse>;
  updateCustomDomainPolicy(
    request: DeepPartial<UpdateCustomDomainPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomDomainPolicyResponse>;
  resetCustomDomainPolicyToDefault(
    request: DeepPartial<ResetCustomDomainPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomDomainPolicyToDefaultResponse>;
  getLabelPolicy(
    request: DeepPartial<GetLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLabelPolicyResponse>;
  getPreviewLabelPolicy(
    request: DeepPartial<GetPreviewLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPreviewLabelPolicyResponse>;
  updateLabelPolicy(
    request: DeepPartial<UpdateLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLabelPolicyResponse>;
  activateLabelPolicy(
    request: DeepPartial<ActivateLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ActivateLabelPolicyResponse>;
  removeLabelPolicyLogo(
    request: DeepPartial<RemoveLabelPolicyLogoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveLabelPolicyLogoResponse>;
  removeLabelPolicyLogoDark(
    request: DeepPartial<RemoveLabelPolicyLogoDarkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveLabelPolicyLogoDarkResponse>;
  removeLabelPolicyIcon(
    request: DeepPartial<RemoveLabelPolicyIconRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveLabelPolicyIconResponse>;
  removeLabelPolicyIconDark(
    request: DeepPartial<RemoveLabelPolicyIconDarkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveLabelPolicyIconDarkResponse>;
  removeLabelPolicyFont(
    request: DeepPartial<RemoveLabelPolicyFontRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveLabelPolicyFontResponse>;
  getLoginPolicy(
    request: DeepPartial<GetLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLoginPolicyResponse>;
  updateLoginPolicy(
    request: DeepPartial<UpdateLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLoginPolicyResponse>;
  listLoginPolicyIDPs(
    request: DeepPartial<ListLoginPolicyIDPsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLoginPolicyIDPsResponse>;
  addIDPToLoginPolicy(
    request: DeepPartial<AddIDPToLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddIDPToLoginPolicyResponse>;
  removeIDPFromLoginPolicy(
    request: DeepPartial<RemoveIDPFromLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveIDPFromLoginPolicyResponse>;
  listLoginPolicySecondFactors(
    request: DeepPartial<ListLoginPolicySecondFactorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLoginPolicySecondFactorsResponse>;
  addSecondFactorToLoginPolicy(
    request: DeepPartial<AddSecondFactorToLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSecondFactorToLoginPolicyResponse>;
  removeSecondFactorFromLoginPolicy(
    request: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveSecondFactorFromLoginPolicyResponse>;
  listLoginPolicyMultiFactors(
    request: DeepPartial<ListLoginPolicyMultiFactorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLoginPolicyMultiFactorsResponse>;
  addMultiFactorToLoginPolicy(
    request: DeepPartial<AddMultiFactorToLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddMultiFactorToLoginPolicyResponse>;
  removeMultiFactorFromLoginPolicy(
    request: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveMultiFactorFromLoginPolicyResponse>;
  getPasswordComplexityPolicy(
    request: DeepPartial<GetPasswordComplexityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPasswordComplexityPolicyResponse>;
  updatePasswordComplexityPolicy(
    request: DeepPartial<UpdatePasswordComplexityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePasswordComplexityPolicyResponse>;
  getPasswordAgePolicy(
    request: DeepPartial<GetPasswordAgePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPasswordAgePolicyResponse>;
  updatePasswordAgePolicy(
    request: DeepPartial<UpdatePasswordAgePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePasswordAgePolicyResponse>;
  getLockoutPolicy(
    request: DeepPartial<GetLockoutPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLockoutPolicyResponse>;
  updateLockoutPolicy(
    request: DeepPartial<UpdateLockoutPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLockoutPolicyResponse>;
  getPrivacyPolicy(
    request: DeepPartial<GetPrivacyPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPrivacyPolicyResponse>;
  updatePrivacyPolicy(
    request: DeepPartial<UpdatePrivacyPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePrivacyPolicyResponse>;
  addNotificationPolicy(
    request: DeepPartial<AddNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddNotificationPolicyResponse>;
  getNotificationPolicy(
    request: DeepPartial<GetNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetNotificationPolicyResponse>;
  updateNotificationPolicy(
    request: DeepPartial<UpdateNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateNotificationPolicyResponse>;
  getDefaultInitMessageText(
    request: DeepPartial<GetDefaultInitMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultInitMessageTextResponse>;
  getCustomInitMessageText(
    request: DeepPartial<GetCustomInitMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomInitMessageTextResponse>;
  setDefaultInitMessageText(
    request: DeepPartial<SetDefaultInitMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultInitMessageTextResponse>;
  resetCustomInitMessageTextToDefault(
    request: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomInitMessageTextToDefaultResponse>;
  getDefaultPasswordResetMessageText(
    request: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordResetMessageTextResponse>;
  getCustomPasswordResetMessageText(
    request: DeepPartial<GetCustomPasswordResetMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomPasswordResetMessageTextResponse>;
  setDefaultPasswordResetMessageText(
    request: DeepPartial<SetDefaultPasswordResetMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultPasswordResetMessageTextResponse>;
  resetCustomPasswordResetMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomPasswordResetMessageTextToDefaultResponse>;
  getDefaultVerifyEmailMessageText(
    request: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifyEmailMessageTextResponse>;
  getCustomVerifyEmailMessageText(
    request: DeepPartial<GetCustomVerifyEmailMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifyEmailMessageTextResponse>;
  setDefaultVerifyEmailMessageText(
    request: DeepPartial<SetDefaultVerifyEmailMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultVerifyEmailMessageTextResponse>;
  resetCustomVerifyEmailMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifyEmailMessageTextToDefaultResponse>;
  getDefaultVerifyPhoneMessageText(
    request: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifyPhoneMessageTextResponse>;
  getCustomVerifyPhoneMessageText(
    request: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifyPhoneMessageTextResponse>;
  setDefaultVerifyPhoneMessageText(
    request: DeepPartial<SetDefaultVerifyPhoneMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultVerifyPhoneMessageTextResponse>;
  resetCustomVerifyPhoneMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifyPhoneMessageTextToDefaultResponse>;
  getDefaultVerifySMSOTPMessageText(
    request: DeepPartial<GetDefaultVerifySMSOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifySMSOTPMessageTextResponse>;
  getCustomVerifySMSOTPMessageText(
    request: DeepPartial<GetCustomVerifySMSOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifySMSOTPMessageTextResponse>;
  setDefaultVerifySMSOTPMessageText(
    request: DeepPartial<SetDefaultVerifySMSOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultVerifySMSOTPMessageTextResponse>;
  resetCustomVerifySMSOTPMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>;
  getDefaultVerifyEmailOTPMessageText(
    request: DeepPartial<GetDefaultVerifyEmailOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifyEmailOTPMessageTextResponse>;
  getCustomVerifyEmailOTPMessageText(
    request: DeepPartial<GetCustomVerifyEmailOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifyEmailOTPMessageTextResponse>;
  setDefaultVerifyEmailOTPMessageText(
    request: DeepPartial<SetDefaultVerifyEmailOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultVerifyEmailOTPMessageTextResponse>;
  resetCustomVerifyEmailOTPMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>;
  getDefaultDomainClaimedMessageText(
    request: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultDomainClaimedMessageTextResponse>;
  getCustomDomainClaimedMessageText(
    request: DeepPartial<GetCustomDomainClaimedMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomDomainClaimedMessageTextResponse>;
  setDefaultDomainClaimedMessageText(
    request: DeepPartial<SetDefaultDomainClaimedMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultDomainClaimedMessageTextResponse>;
  resetCustomDomainClaimedMessageTextToDefault(
    request: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomDomainClaimedMessageTextToDefaultResponse>;
  getDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordlessRegistrationMessageTextResponse>;
  getCustomPasswordlessRegistrationMessageText(
    request: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomPasswordlessRegistrationMessageTextResponse>;
  setDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<SetDefaultPasswordlessRegistrationMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultPasswordlessRegistrationMessageTextResponse>;
  resetCustomPasswordlessRegistrationMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>;
  getDefaultPasswordChangeMessageText(
    request: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordChangeMessageTextResponse>;
  getCustomPasswordChangeMessageText(
    request: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomPasswordChangeMessageTextResponse>;
  setDefaultPasswordChangeMessageText(
    request: DeepPartial<SetDefaultPasswordChangeMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultPasswordChangeMessageTextResponse>;
  resetCustomPasswordChangeMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomPasswordChangeMessageTextToDefaultResponse>;
  getDefaultInviteUserMessageText(
    request: DeepPartial<GetDefaultInviteUserMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultInviteUserMessageTextResponse>;
  getCustomInviteUserMessageText(
    request: DeepPartial<GetCustomInviteUserMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomInviteUserMessageTextResponse>;
  setDefaultInviteUserMessageText(
    request: DeepPartial<SetDefaultInviteUserMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetDefaultInviteUserMessageTextResponse>;
  resetCustomInviteUserMessageTextToDefault(
    request: DeepPartial<ResetCustomInviteUserMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomInviteUserMessageTextToDefaultResponse>;
  getDefaultLoginTexts(
    request: DeepPartial<GetDefaultLoginTextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultLoginTextsResponse>;
  getCustomLoginTexts(
    request: DeepPartial<GetCustomLoginTextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomLoginTextsResponse>;
  setCustomLoginText(
    request: DeepPartial<SetCustomLoginTextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomLoginTextsResponse>;
  resetCustomLoginTextToDefault(
    request: DeepPartial<ResetCustomLoginTextsToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomLoginTextsToDefaultResponse>;
  listIAMMemberRoles(
    request: DeepPartial<ListIAMMemberRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListIAMMemberRolesResponse>;
  listIAMMembers(
    request: DeepPartial<ListIAMMembersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListIAMMembersResponse>;
  /**
   * Adds a user to the membership list of ZITADEL with the given roles
   * undefined roles will be dropped
   */
  addIAMMember(
    request: DeepPartial<AddIAMMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddIAMMemberResponse>;
  updateIAMMember(
    request: DeepPartial<UpdateIAMMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateIAMMemberResponse>;
  removeIAMMember(
    request: DeepPartial<RemoveIAMMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveIAMMemberResponse>;
  listViews(request: DeepPartial<ListViewsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListViewsResponse>;
  listFailedEvents(
    request: DeepPartial<ListFailedEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFailedEventsResponse>;
  removeFailedEvent(
    request: DeepPartial<RemoveFailedEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveFailedEventResponse>;
  /** Imports data into an instance and creates different objects */
  importData(
    request: DeepPartial<ImportDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ImportDataResponse>;
  exportData(
    request: DeepPartial<ExportDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExportDataResponse>;
  listEventTypes(
    request: DeepPartial<ListEventTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEventTypesResponse>;
  listEvents(
    request: DeepPartial<ListEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEventsResponse>;
  listAggregateTypes(
    request: DeepPartial<ListAggregateTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAggregateTypesResponse>;
  /**
   * Activates the "LoginDefaultOrg" feature by setting the flag to "true"
   * This is irreversible!
   * Once activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set
   */
  activateFeatureLoginDefaultOrg(
    request: DeepPartial<ActivateFeatureLoginDefaultOrgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ActivateFeatureLoginDefaultOrgResponse>;
  listMilestones(
    request: DeepPartial<ListMilestonesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMilestonesResponse>;
  /** Sets restrictions */
  setRestrictions(
    request: DeepPartial<SetRestrictionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetRestrictionsResponse>;
  /** Gets restrictions */
  getRestrictions(
    request: DeepPartial<GetRestrictionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetRestrictionsResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
