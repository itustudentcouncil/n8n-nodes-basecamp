// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/harness.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../google/protobuf/any.js";

export const protobufPackage = "tests.harness";

export interface TestCase {
  message: Any | undefined;
}

export interface TestResult {
  Valid: boolean;
  Error: boolean;
  Reasons: string[];
  AllowFailure: boolean;
  CheckMultipleErrors: boolean;
}

function createBaseTestCase(): TestCase {
  return { message: undefined };
}

export const TestCase: MessageFns<TestCase> = {
  encode(message: TestCase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Any.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestCase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestCase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestCase {
    return { message: isSet(object.message) ? Any.fromJSON(object.message) : undefined };
  },

  toJSON(message: TestCase): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Any.toJSON(message.message);
    }
    return obj;
  },

  create(base?: DeepPartial<TestCase>): TestCase {
    return TestCase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestCase>): TestCase {
    const message = createBaseTestCase();
    message.message = (object.message !== undefined && object.message !== null)
      ? Any.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseTestResult(): TestResult {
  return { Valid: false, Error: false, Reasons: [], AllowFailure: false, CheckMultipleErrors: false };
}

export const TestResult: MessageFns<TestResult> = {
  encode(message: TestResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Valid !== false) {
      writer.uint32(8).bool(message.Valid);
    }
    if (message.Error !== false) {
      writer.uint32(16).bool(message.Error);
    }
    for (const v of message.Reasons) {
      writer.uint32(26).string(v!);
    }
    if (message.AllowFailure !== false) {
      writer.uint32(32).bool(message.AllowFailure);
    }
    if (message.CheckMultipleErrors !== false) {
      writer.uint32(40).bool(message.CheckMultipleErrors);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.Valid = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Error = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Reasons.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.AllowFailure = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.CheckMultipleErrors = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResult {
    return {
      Valid: isSet(object.Valid) ? globalThis.Boolean(object.Valid) : false,
      Error: isSet(object.Error) ? globalThis.Boolean(object.Error) : false,
      Reasons: globalThis.Array.isArray(object?.Reasons) ? object.Reasons.map((e: any) => globalThis.String(e)) : [],
      AllowFailure: isSet(object.AllowFailure) ? globalThis.Boolean(object.AllowFailure) : false,
      CheckMultipleErrors: isSet(object.CheckMultipleErrors) ? globalThis.Boolean(object.CheckMultipleErrors) : false,
    };
  },

  toJSON(message: TestResult): unknown {
    const obj: any = {};
    if (message.Valid !== false) {
      obj.Valid = message.Valid;
    }
    if (message.Error !== false) {
      obj.Error = message.Error;
    }
    if (message.Reasons?.length) {
      obj.Reasons = message.Reasons;
    }
    if (message.AllowFailure !== false) {
      obj.AllowFailure = message.AllowFailure;
    }
    if (message.CheckMultipleErrors !== false) {
      obj.CheckMultipleErrors = message.CheckMultipleErrors;
    }
    return obj;
  },

  create(base?: DeepPartial<TestResult>): TestResult {
    return TestResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestResult>): TestResult {
    const message = createBaseTestResult();
    message.Valid = object.Valid ?? false;
    message.Error = object.Error ?? false;
    message.Reasons = object.Reasons?.map((e) => e) || [];
    message.AllowFailure = object.AllowFailure ?? false;
    message.CheckMultipleErrors = object.CheckMultipleErrors ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
