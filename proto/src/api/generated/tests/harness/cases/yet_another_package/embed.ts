// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/cases/yet_another_package/embed.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "tests.harness.cases.yet_another_package";

/** Validate message embedding across packages. */
export interface Embed {
  val: Long;
}

export enum Embed_Enumerated {
  VALUE = 0,
  UNRECOGNIZED = -1,
}

export function embed_EnumeratedFromJSON(object: any): Embed_Enumerated {
  switch (object) {
    case 0:
    case "VALUE":
      return Embed_Enumerated.VALUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Embed_Enumerated.UNRECOGNIZED;
  }
}

export function embed_EnumeratedToJSON(object: Embed_Enumerated): string {
  switch (object) {
    case Embed_Enumerated.VALUE:
      return "VALUE";
    case Embed_Enumerated.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Embed_BarNumber {
  ZERO = 0,
  ONE = 1,
  TWO = 2,
  UNRECOGNIZED = -1,
}

export function embed_BarNumberFromJSON(object: any): Embed_BarNumber {
  switch (object) {
    case 0:
    case "ZERO":
      return Embed_BarNumber.ZERO;
    case 1:
    case "ONE":
      return Embed_BarNumber.ONE;
    case 2:
    case "TWO":
      return Embed_BarNumber.TWO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Embed_BarNumber.UNRECOGNIZED;
  }
}

export function embed_BarNumberToJSON(object: Embed_BarNumber): string {
  switch (object) {
    case Embed_BarNumber.ZERO:
      return "ZERO";
    case Embed_BarNumber.ONE:
      return "ONE";
    case Embed_BarNumber.TWO:
      return "TWO";
    case Embed_BarNumber.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseEmbed(): Embed {
  return { val: Long.ZERO };
}

export const Embed: MessageFns<Embed> = {
  encode(message: Embed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.val.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.val.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Embed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.val = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Embed {
    return { val: isSet(object.val) ? Long.fromValue(object.val) : Long.ZERO };
  },

  toJSON(message: Embed): unknown {
    const obj: any = {};
    if (!message.val.equals(Long.ZERO)) {
      obj.val = (message.val || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Embed>): Embed {
    return Embed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Embed>): Embed {
    const message = createBaseEmbed();
    message.val = (object.val !== undefined && object.val !== null) ? Long.fromValue(object.val) : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
