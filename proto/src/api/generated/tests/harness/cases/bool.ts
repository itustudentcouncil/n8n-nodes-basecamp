// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/cases/bool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "tests.harness.cases";

export interface BoolNone {
  val: boolean;
}

export interface BoolConstTrue {
  val: boolean;
}

export interface BoolConstFalse {
  val: boolean;
}

function createBaseBoolNone(): BoolNone {
  return { val: false };
}

export const BoolNone: MessageFns<BoolNone> = {
  encode(message: BoolNone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== false) {
      writer.uint32(8).bool(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BoolNone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoolNone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.val = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoolNone {
    return { val: isSet(object.val) ? globalThis.Boolean(object.val) : false };
  },

  toJSON(message: BoolNone): unknown {
    const obj: any = {};
    if (message.val !== false) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<BoolNone>): BoolNone {
    return BoolNone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BoolNone>): BoolNone {
    const message = createBaseBoolNone();
    message.val = object.val ?? false;
    return message;
  },
};

function createBaseBoolConstTrue(): BoolConstTrue {
  return { val: false };
}

export const BoolConstTrue: MessageFns<BoolConstTrue> = {
  encode(message: BoolConstTrue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== false) {
      writer.uint32(8).bool(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BoolConstTrue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoolConstTrue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.val = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoolConstTrue {
    return { val: isSet(object.val) ? globalThis.Boolean(object.val) : false };
  },

  toJSON(message: BoolConstTrue): unknown {
    const obj: any = {};
    if (message.val !== false) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<BoolConstTrue>): BoolConstTrue {
    return BoolConstTrue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BoolConstTrue>): BoolConstTrue {
    const message = createBaseBoolConstTrue();
    message.val = object.val ?? false;
    return message;
  },
};

function createBaseBoolConstFalse(): BoolConstFalse {
  return { val: false };
}

export const BoolConstFalse: MessageFns<BoolConstFalse> = {
  encode(message: BoolConstFalse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== false) {
      writer.uint32(8).bool(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BoolConstFalse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoolConstFalse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.val = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoolConstFalse {
    return { val: isSet(object.val) ? globalThis.Boolean(object.val) : false };
  },

  toJSON(message: BoolConstFalse): unknown {
    const obj: any = {};
    if (message.val !== false) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<BoolConstFalse>): BoolConstFalse {
    return BoolConstFalse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BoolConstFalse>): BoolConstFalse {
    const message = createBaseBoolConstFalse();
    message.val = object.val ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
