// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/cases/kitchen_sink.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../google/protobuf/any.js";
import { Duration } from "../../../google/protobuf/duration.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { FloatValue } from "../../../google/protobuf/wrappers.js";

export const protobufPackage = "tests.harness.cases";

export enum ComplexTestEnum {
  ComplexZero = 0,
  ComplexONE = 1,
  ComplexTWO = 2,
  UNRECOGNIZED = -1,
}

export function complexTestEnumFromJSON(object: any): ComplexTestEnum {
  switch (object) {
    case 0:
    case "ComplexZero":
      return ComplexTestEnum.ComplexZero;
    case 1:
    case "ComplexONE":
      return ComplexTestEnum.ComplexONE;
    case 2:
    case "ComplexTWO":
      return ComplexTestEnum.ComplexTWO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ComplexTestEnum.UNRECOGNIZED;
  }
}

export function complexTestEnumToJSON(object: ComplexTestEnum): string {
  switch (object) {
    case ComplexTestEnum.ComplexZero:
      return "ComplexZero";
    case ComplexTestEnum.ComplexONE:
      return "ComplexONE";
    case ComplexTestEnum.ComplexTWO:
      return "ComplexTWO";
    case ComplexTestEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ComplexTestMsg {
  const: string;
  nested: ComplexTestMsg | undefined;
  intConst: number;
  boolConst: boolean;
  floatVal: number | undefined;
  durVal: Duration | undefined;
  tsVal: Date | undefined;
  another: ComplexTestMsg | undefined;
  floatConst: number;
  doubleIn: number;
  enumConst: ComplexTestEnum;
  anyVal: Any | undefined;
  repTsVal: Date[];
  mapVal: { [key: number]: string };
  bytesVal: Buffer;
  x?: string | undefined;
  y?: number | undefined;
}

export interface ComplexTestMsg_MapValEntry {
  key: number;
  value: string;
}

export interface KitchenSinkMessage {
  val: ComplexTestMsg | undefined;
}

function createBaseComplexTestMsg(): ComplexTestMsg {
  return {
    const: "",
    nested: undefined,
    intConst: 0,
    boolConst: false,
    floatVal: undefined,
    durVal: undefined,
    tsVal: undefined,
    another: undefined,
    floatConst: 0,
    doubleIn: 0,
    enumConst: 0,
    anyVal: undefined,
    repTsVal: [],
    mapVal: {},
    bytesVal: Buffer.alloc(0),
    x: undefined,
    y: undefined,
  };
}

export const ComplexTestMsg: MessageFns<ComplexTestMsg> = {
  encode(message: ComplexTestMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.const !== "") {
      writer.uint32(10).string(message.const);
    }
    if (message.nested !== undefined) {
      ComplexTestMsg.encode(message.nested, writer.uint32(18).fork()).join();
    }
    if (message.intConst !== 0) {
      writer.uint32(24).int32(message.intConst);
    }
    if (message.boolConst !== false) {
      writer.uint32(32).bool(message.boolConst);
    }
    if (message.floatVal !== undefined) {
      FloatValue.encode({ value: message.floatVal! }, writer.uint32(42).fork()).join();
    }
    if (message.durVal !== undefined) {
      Duration.encode(message.durVal, writer.uint32(50).fork()).join();
    }
    if (message.tsVal !== undefined) {
      Timestamp.encode(toTimestamp(message.tsVal), writer.uint32(58).fork()).join();
    }
    if (message.another !== undefined) {
      ComplexTestMsg.encode(message.another, writer.uint32(66).fork()).join();
    }
    if (message.floatConst !== 0) {
      writer.uint32(77).float(message.floatConst);
    }
    if (message.doubleIn !== 0) {
      writer.uint32(81).double(message.doubleIn);
    }
    if (message.enumConst !== 0) {
      writer.uint32(88).int32(message.enumConst);
    }
    if (message.anyVal !== undefined) {
      Any.encode(message.anyVal, writer.uint32(98).fork()).join();
    }
    for (const v of message.repTsVal) {
      Timestamp.encode(toTimestamp(v!), writer.uint32(106).fork()).join();
    }
    Object.entries(message.mapVal).forEach(([key, value]) => {
      ComplexTestMsg_MapValEntry.encode({ key: key as any, value }, writer.uint32(114).fork()).join();
    });
    if (message.bytesVal.length !== 0) {
      writer.uint32(122).bytes(message.bytesVal);
    }
    if (message.x !== undefined) {
      writer.uint32(130).string(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(136).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComplexTestMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComplexTestMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.const = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nested = ComplexTestMsg.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.intConst = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.boolConst = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.floatVal = FloatValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.durVal = Duration.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.tsVal = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.another = ComplexTestMsg.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.floatConst = reader.float();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.doubleIn = reader.double();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.enumConst = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.anyVal = Any.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.repTsVal.push(fromTimestamp(Timestamp.decode(reader, reader.uint32())));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          const entry14 = ComplexTestMsg_MapValEntry.decode(reader, reader.uint32());
          if (entry14.value !== undefined) {
            message.mapVal[entry14.key] = entry14.value;
          }
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.bytesVal = Buffer.from(reader.bytes());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.x = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.y = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComplexTestMsg {
    return {
      const: isSet(object.const) ? globalThis.String(object.const) : "",
      nested: isSet(object.nested) ? ComplexTestMsg.fromJSON(object.nested) : undefined,
      intConst: isSet(object.intConst) ? globalThis.Number(object.intConst) : 0,
      boolConst: isSet(object.boolConst) ? globalThis.Boolean(object.boolConst) : false,
      floatVal: isSet(object.floatVal) ? Number(object.floatVal) : undefined,
      durVal: isSet(object.durVal) ? Duration.fromJSON(object.durVal) : undefined,
      tsVal: isSet(object.tsVal) ? fromJsonTimestamp(object.tsVal) : undefined,
      another: isSet(object.another) ? ComplexTestMsg.fromJSON(object.another) : undefined,
      floatConst: isSet(object.floatConst) ? globalThis.Number(object.floatConst) : 0,
      doubleIn: isSet(object.doubleIn) ? globalThis.Number(object.doubleIn) : 0,
      enumConst: isSet(object.enumConst) ? complexTestEnumFromJSON(object.enumConst) : 0,
      anyVal: isSet(object.anyVal) ? Any.fromJSON(object.anyVal) : undefined,
      repTsVal: globalThis.Array.isArray(object?.repTsVal) ? object.repTsVal.map((e: any) => fromJsonTimestamp(e)) : [],
      mapVal: isObject(object.mapVal)
        ? Object.entries(object.mapVal).reduce<{ [key: number]: string }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = String(value);
          return acc;
        }, {})
        : {},
      bytesVal: isSet(object.bytesVal) ? Buffer.from(bytesFromBase64(object.bytesVal)) : Buffer.alloc(0),
      x: isSet(object.x) ? globalThis.String(object.x) : undefined,
      y: isSet(object.y) ? globalThis.Number(object.y) : undefined,
    };
  },

  toJSON(message: ComplexTestMsg): unknown {
    const obj: any = {};
    if (message.const !== "") {
      obj.const = message.const;
    }
    if (message.nested !== undefined) {
      obj.nested = ComplexTestMsg.toJSON(message.nested);
    }
    if (message.intConst !== 0) {
      obj.intConst = Math.round(message.intConst);
    }
    if (message.boolConst !== false) {
      obj.boolConst = message.boolConst;
    }
    if (message.floatVal !== undefined) {
      obj.floatVal = message.floatVal;
    }
    if (message.durVal !== undefined) {
      obj.durVal = Duration.toJSON(message.durVal);
    }
    if (message.tsVal !== undefined) {
      obj.tsVal = message.tsVal.toISOString();
    }
    if (message.another !== undefined) {
      obj.another = ComplexTestMsg.toJSON(message.another);
    }
    if (message.floatConst !== 0) {
      obj.floatConst = message.floatConst;
    }
    if (message.doubleIn !== 0) {
      obj.doubleIn = message.doubleIn;
    }
    if (message.enumConst !== 0) {
      obj.enumConst = complexTestEnumToJSON(message.enumConst);
    }
    if (message.anyVal !== undefined) {
      obj.anyVal = Any.toJSON(message.anyVal);
    }
    if (message.repTsVal?.length) {
      obj.repTsVal = message.repTsVal.map((e) => e.toISOString());
    }
    if (message.mapVal) {
      const entries = Object.entries(message.mapVal);
      if (entries.length > 0) {
        obj.mapVal = {};
        entries.forEach(([k, v]) => {
          obj.mapVal[k] = v;
        });
      }
    }
    if (message.bytesVal.length !== 0) {
      obj.bytesVal = base64FromBytes(message.bytesVal);
    }
    if (message.x !== undefined) {
      obj.x = message.x;
    }
    if (message.y !== undefined) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create(base?: DeepPartial<ComplexTestMsg>): ComplexTestMsg {
    return ComplexTestMsg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComplexTestMsg>): ComplexTestMsg {
    const message = createBaseComplexTestMsg();
    message.const = object.const ?? "";
    message.nested = (object.nested !== undefined && object.nested !== null)
      ? ComplexTestMsg.fromPartial(object.nested)
      : undefined;
    message.intConst = object.intConst ?? 0;
    message.boolConst = object.boolConst ?? false;
    message.floatVal = object.floatVal ?? undefined;
    message.durVal = (object.durVal !== undefined && object.durVal !== null)
      ? Duration.fromPartial(object.durVal)
      : undefined;
    message.tsVal = object.tsVal ?? undefined;
    message.another = (object.another !== undefined && object.another !== null)
      ? ComplexTestMsg.fromPartial(object.another)
      : undefined;
    message.floatConst = object.floatConst ?? 0;
    message.doubleIn = object.doubleIn ?? 0;
    message.enumConst = object.enumConst ?? 0;
    message.anyVal = (object.anyVal !== undefined && object.anyVal !== null)
      ? Any.fromPartial(object.anyVal)
      : undefined;
    message.repTsVal = object.repTsVal?.map((e) => e) || [];
    message.mapVal = Object.entries(object.mapVal ?? {}).reduce<{ [key: number]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.bytesVal = object.bytesVal ?? Buffer.alloc(0);
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    return message;
  },
};

function createBaseComplexTestMsg_MapValEntry(): ComplexTestMsg_MapValEntry {
  return { key: 0, value: "" };
}

export const ComplexTestMsg_MapValEntry: MessageFns<ComplexTestMsg_MapValEntry> = {
  encode(message: ComplexTestMsg_MapValEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).sint32(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComplexTestMsg_MapValEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComplexTestMsg_MapValEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.sint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComplexTestMsg_MapValEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ComplexTestMsg_MapValEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ComplexTestMsg_MapValEntry>): ComplexTestMsg_MapValEntry {
    return ComplexTestMsg_MapValEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComplexTestMsg_MapValEntry>): ComplexTestMsg_MapValEntry {
    const message = createBaseComplexTestMsg_MapValEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseKitchenSinkMessage(): KitchenSinkMessage {
  return { val: undefined };
}

export const KitchenSinkMessage: MessageFns<KitchenSinkMessage> = {
  encode(message: KitchenSinkMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== undefined) {
      ComplexTestMsg.encode(message.val, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KitchenSinkMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKitchenSinkMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = ComplexTestMsg.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KitchenSinkMessage {
    return { val: isSet(object.val) ? ComplexTestMsg.fromJSON(object.val) : undefined };
  },

  toJSON(message: KitchenSinkMessage): unknown {
    const obj: any = {};
    if (message.val !== undefined) {
      obj.val = ComplexTestMsg.toJSON(message.val);
    }
    return obj;
  },

  create(base?: DeepPartial<KitchenSinkMessage>): KitchenSinkMessage {
    return KitchenSinkMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KitchenSinkMessage>): KitchenSinkMessage {
    const message = createBaseKitchenSinkMessage();
    message.val = (object.val !== undefined && object.val !== null)
      ? ComplexTestMsg.fromPartial(object.val)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
