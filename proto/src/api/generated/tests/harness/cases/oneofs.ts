// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tests/harness/cases/oneofs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "tests.harness.cases";

export interface TestOneOfMsg {
  val: boolean;
}

export interface OneOfNone {
  x?: string | undefined;
  y?: number | undefined;
}

export interface OneOf {
  x?: string | undefined;
  y?: number | undefined;
  z?: TestOneOfMsg | undefined;
}

export interface OneOfRequired {
  x?: string | undefined;
  y?: number | undefined;
  nameWithUnderscores?: number | undefined;
  underAnd1Number?: number | undefined;
}

export interface OneOfIgnoreEmpty {
  x?: string | undefined;
  y?: Buffer | undefined;
  z?: number | undefined;
}

function createBaseTestOneOfMsg(): TestOneOfMsg {
  return { val: false };
}

export const TestOneOfMsg: MessageFns<TestOneOfMsg> = {
  encode(message: TestOneOfMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== false) {
      writer.uint32(8).bool(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestOneOfMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestOneOfMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.val = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestOneOfMsg {
    return { val: isSet(object.val) ? globalThis.Boolean(object.val) : false };
  },

  toJSON(message: TestOneOfMsg): unknown {
    const obj: any = {};
    if (message.val !== false) {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<TestOneOfMsg>): TestOneOfMsg {
    return TestOneOfMsg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestOneOfMsg>): TestOneOfMsg {
    const message = createBaseTestOneOfMsg();
    message.val = object.val ?? false;
    return message;
  },
};

function createBaseOneOfNone(): OneOfNone {
  return { x: undefined, y: undefined };
}

export const OneOfNone: MessageFns<OneOfNone> = {
  encode(message: OneOfNone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== undefined) {
      writer.uint32(10).string(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneOfNone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneOfNone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.x = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OneOfNone {
    return {
      x: isSet(object.x) ? globalThis.String(object.x) : undefined,
      y: isSet(object.y) ? globalThis.Number(object.y) : undefined,
    };
  },

  toJSON(message: OneOfNone): unknown {
    const obj: any = {};
    if (message.x !== undefined) {
      obj.x = message.x;
    }
    if (message.y !== undefined) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create(base?: DeepPartial<OneOfNone>): OneOfNone {
    return OneOfNone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneOfNone>): OneOfNone {
    const message = createBaseOneOfNone();
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    return message;
  },
};

function createBaseOneOf(): OneOf {
  return { x: undefined, y: undefined, z: undefined };
}

export const OneOf: MessageFns<OneOf> = {
  encode(message: OneOf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== undefined) {
      writer.uint32(10).string(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(16).int32(message.y);
    }
    if (message.z !== undefined) {
      TestOneOfMsg.encode(message.z, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneOf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneOf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.x = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.z = TestOneOfMsg.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OneOf {
    return {
      x: isSet(object.x) ? globalThis.String(object.x) : undefined,
      y: isSet(object.y) ? globalThis.Number(object.y) : undefined,
      z: isSet(object.z) ? TestOneOfMsg.fromJSON(object.z) : undefined,
    };
  },

  toJSON(message: OneOf): unknown {
    const obj: any = {};
    if (message.x !== undefined) {
      obj.x = message.x;
    }
    if (message.y !== undefined) {
      obj.y = Math.round(message.y);
    }
    if (message.z !== undefined) {
      obj.z = TestOneOfMsg.toJSON(message.z);
    }
    return obj;
  },

  create(base?: DeepPartial<OneOf>): OneOf {
    return OneOf.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneOf>): OneOf {
    const message = createBaseOneOf();
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.z = (object.z !== undefined && object.z !== null) ? TestOneOfMsg.fromPartial(object.z) : undefined;
    return message;
  },
};

function createBaseOneOfRequired(): OneOfRequired {
  return { x: undefined, y: undefined, nameWithUnderscores: undefined, underAnd1Number: undefined };
}

export const OneOfRequired: MessageFns<OneOfRequired> = {
  encode(message: OneOfRequired, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== undefined) {
      writer.uint32(10).string(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(16).int32(message.y);
    }
    if (message.nameWithUnderscores !== undefined) {
      writer.uint32(24).int32(message.nameWithUnderscores);
    }
    if (message.underAnd1Number !== undefined) {
      writer.uint32(32).int32(message.underAnd1Number);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneOfRequired {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneOfRequired();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.x = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.nameWithUnderscores = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.underAnd1Number = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OneOfRequired {
    return {
      x: isSet(object.x) ? globalThis.String(object.x) : undefined,
      y: isSet(object.y) ? globalThis.Number(object.y) : undefined,
      nameWithUnderscores: isSet(object.nameWithUnderscores)
        ? globalThis.Number(object.nameWithUnderscores)
        : undefined,
      underAnd1Number: isSet(object.underAnd1Number) ? globalThis.Number(object.underAnd1Number) : undefined,
    };
  },

  toJSON(message: OneOfRequired): unknown {
    const obj: any = {};
    if (message.x !== undefined) {
      obj.x = message.x;
    }
    if (message.y !== undefined) {
      obj.y = Math.round(message.y);
    }
    if (message.nameWithUnderscores !== undefined) {
      obj.nameWithUnderscores = Math.round(message.nameWithUnderscores);
    }
    if (message.underAnd1Number !== undefined) {
      obj.underAnd1Number = Math.round(message.underAnd1Number);
    }
    return obj;
  },

  create(base?: DeepPartial<OneOfRequired>): OneOfRequired {
    return OneOfRequired.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneOfRequired>): OneOfRequired {
    const message = createBaseOneOfRequired();
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.nameWithUnderscores = object.nameWithUnderscores ?? undefined;
    message.underAnd1Number = object.underAnd1Number ?? undefined;
    return message;
  },
};

function createBaseOneOfIgnoreEmpty(): OneOfIgnoreEmpty {
  return { x: undefined, y: undefined, z: undefined };
}

export const OneOfIgnoreEmpty: MessageFns<OneOfIgnoreEmpty> = {
  encode(message: OneOfIgnoreEmpty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== undefined) {
      writer.uint32(10).string(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(18).bytes(message.y);
    }
    if (message.z !== undefined) {
      writer.uint32(24).int32(message.z);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OneOfIgnoreEmpty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneOfIgnoreEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.x = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.y = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.z = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OneOfIgnoreEmpty {
    return {
      x: isSet(object.x) ? globalThis.String(object.x) : undefined,
      y: isSet(object.y) ? Buffer.from(bytesFromBase64(object.y)) : undefined,
      z: isSet(object.z) ? globalThis.Number(object.z) : undefined,
    };
  },

  toJSON(message: OneOfIgnoreEmpty): unknown {
    const obj: any = {};
    if (message.x !== undefined) {
      obj.x = message.x;
    }
    if (message.y !== undefined) {
      obj.y = base64FromBytes(message.y);
    }
    if (message.z !== undefined) {
      obj.z = Math.round(message.z);
    }
    return obj;
  },

  create(base?: DeepPartial<OneOfIgnoreEmpty>): OneOfIgnoreEmpty {
    return OneOfIgnoreEmpty.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OneOfIgnoreEmpty>): OneOfIgnoreEmpty {
    const message = createBaseOneOfIgnoreEmpty();
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.z = object.z ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
