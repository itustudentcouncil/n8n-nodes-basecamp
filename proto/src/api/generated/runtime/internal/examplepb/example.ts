// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: runtime/internal/examplepb/example.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../google/protobuf/any.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { FieldMask } from "../../../google/protobuf/field_mask.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";

export const protobufPackage = "grpc.gateway.runtime.internal.examplepb";

/** NumericEnum is one or zero. */
export enum NumericEnum {
  /** ZERO - ZERO means 0 */
  ZERO = 0,
  /** ONE - ONE means 1 */
  ONE = 1,
  UNRECOGNIZED = -1,
}

export function numericEnumFromJSON(object: any): NumericEnum {
  switch (object) {
    case 0:
    case "ZERO":
      return NumericEnum.ZERO;
    case 1:
    case "ONE":
      return NumericEnum.ONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NumericEnum.UNRECOGNIZED;
  }
}

export function numericEnumToJSON(object: NumericEnum): string {
  switch (object) {
    case NumericEnum.ZERO:
      return "ZERO";
    case NumericEnum.ONE:
      return "ONE";
    case NumericEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** SimpleMessage represents a simple message sent to the Echo service. */
export interface SimpleMessage {
  id: string;
}

export interface ABitOfEverything {
  singleNested: ABitOfEverything_Nested | undefined;
  uuid: string;
  nested: ABitOfEverything_Nested[];
  floatValue: number;
  doubleValue: number;
  int64Value: Long;
  uint64Value: Long;
  int32Value: number;
  fixed64Value: Long;
  fixed32Value: number;
  boolValue: boolean;
  stringValue: string;
  bytesValue: Buffer;
  uint32Value: number;
  enumValue: NumericEnum;
  sfixed32Value: number;
  sfixed64Value: Long;
  sint32Value: number;
  sint64Value: Long;
  repeatedStringValue: string[];
  oneofEmpty?: Empty | undefined;
  oneofString?: string | undefined;
  mapValue: { [key: string]: NumericEnum };
  mappedStringValue: { [key: string]: string };
  mappedNestedValue: { [key: string]: ABitOfEverything_Nested };
  nonConventionalNameValue: string;
  timestampValue:
    | Date
    | undefined;
  /** repeated enum value. it is comma-separated in query */
  repeatedEnumValue: NumericEnum[];
  /**
   * repeated numeric enum comment (This comment is overridden by the field
   * annotation)
   */
  repeatedEnumAnnotation: NumericEnum[];
  /** numeric enum comment (This comment is overridden by the field annotation) */
  enumValueAnnotation: NumericEnum;
  /**
   * repeated string comment (This comment is overridden by the field
   * annotation)
   */
  repeatedStringAnnotation: string[];
  /**
   * repeated nested object comment (This comment is overridden by the field
   * annotation)
   */
  repeatedNestedAnnotation: ABitOfEverything_Nested[];
  /** nested object comments (This comment is overridden by the field annotation) */
  nestedAnnotation: ABitOfEverything_Nested | undefined;
  int64OverrideType: Long;
  anytype: Any | undefined;
  repeatedAnytype: Any[];
}

/** Nested is nested type. */
export interface ABitOfEverything_Nested {
  /** name is nested field. */
  name: string;
  amount: number;
  /** DeepEnum comment. */
  ok: ABitOfEverything_Nested_DeepEnum;
}

/** DeepEnum is one or zero. */
export enum ABitOfEverything_Nested_DeepEnum {
  /** FALSE - FALSE is false. */
  FALSE = 0,
  /** TRUE - TRUE is true. */
  TRUE = 1,
  UNRECOGNIZED = -1,
}

export function aBitOfEverything_Nested_DeepEnumFromJSON(object: any): ABitOfEverything_Nested_DeepEnum {
  switch (object) {
    case 0:
    case "FALSE":
      return ABitOfEverything_Nested_DeepEnum.FALSE;
    case 1:
    case "TRUE":
      return ABitOfEverything_Nested_DeepEnum.TRUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED;
  }
}

export function aBitOfEverything_Nested_DeepEnumToJSON(object: ABitOfEverything_Nested_DeepEnum): string {
  switch (object) {
    case ABitOfEverything_Nested_DeepEnum.FALSE:
      return "FALSE";
    case ABitOfEverything_Nested_DeepEnum.TRUE:
      return "TRUE";
    case ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ABitOfEverything_MapValueEntry {
  key: string;
  value: NumericEnum;
}

export interface ABitOfEverything_MappedStringValueEntry {
  key: string;
  value: string;
}

export interface ABitOfEverything_MappedNestedValueEntry {
  key: string;
  value: ABitOfEverything_Nested | undefined;
}

export interface ResponseBodyOut {
  response: ResponseBodyOut_Response | undefined;
}

export interface ResponseBodyOut_Response {
  data: string;
}

export interface RepeatedResponseBodyOut {
  response: RepeatedResponseBodyOut_Response[];
}

export interface RepeatedResponseBodyOut_Response {
  data: string;
  type: RepeatedResponseBodyOut_Response_ResponseType;
}

export enum RepeatedResponseBodyOut_Response_ResponseType {
  /** UNKNOWN - UNKNOWN */
  UNKNOWN = 0,
  /** A - A is 1 */
  A = 1,
  /** B - B is 2 */
  B = 2,
  UNRECOGNIZED = -1,
}

export function repeatedResponseBodyOut_Response_ResponseTypeFromJSON(
  object: any,
): RepeatedResponseBodyOut_Response_ResponseType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return RepeatedResponseBodyOut_Response_ResponseType.UNKNOWN;
    case 1:
    case "A":
      return RepeatedResponseBodyOut_Response_ResponseType.A;
    case 2:
    case "B":
      return RepeatedResponseBodyOut_Response_ResponseType.B;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RepeatedResponseBodyOut_Response_ResponseType.UNRECOGNIZED;
  }
}

export function repeatedResponseBodyOut_Response_ResponseTypeToJSON(
  object: RepeatedResponseBodyOut_Response_ResponseType,
): string {
  switch (object) {
    case RepeatedResponseBodyOut_Response_ResponseType.UNKNOWN:
      return "UNKNOWN";
    case RepeatedResponseBodyOut_Response_ResponseType.A:
      return "A";
    case RepeatedResponseBodyOut_Response_ResponseType.B:
      return "B";
    case RepeatedResponseBodyOut_Response_ResponseType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UpdateMessage {
  updateMask: string[] | undefined;
  aBitOfEverything: ABitOfEverything | undefined;
}

export interface NestedOuter {
  one: NestedOne | undefined;
}

export interface NestedOne {
  two: NestedTwo | undefined;
}

export interface NestedTwo {
  three: NestedThree | undefined;
}

export interface NestedThree {
  a: boolean;
  b: boolean;
}

export interface UpdateNestedRequest {
  nested: NestedOuter | undefined;
  updateMask: string[] | undefined;
}

function createBaseSimpleMessage(): SimpleMessage {
  return { id: "" };
}

export const SimpleMessage: MessageFns<SimpleMessage> = {
  encode(message: SimpleMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleMessage {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SimpleMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<SimpleMessage>): SimpleMessage {
    return SimpleMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimpleMessage>): SimpleMessage {
    const message = createBaseSimpleMessage();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseABitOfEverything(): ABitOfEverything {
  return {
    singleNested: undefined,
    uuid: "",
    nested: [],
    floatValue: 0,
    doubleValue: 0,
    int64Value: Long.ZERO,
    uint64Value: Long.UZERO,
    int32Value: 0,
    fixed64Value: Long.UZERO,
    fixed32Value: 0,
    boolValue: false,
    stringValue: "",
    bytesValue: Buffer.alloc(0),
    uint32Value: 0,
    enumValue: 0,
    sfixed32Value: 0,
    sfixed64Value: Long.ZERO,
    sint32Value: 0,
    sint64Value: Long.ZERO,
    repeatedStringValue: [],
    oneofEmpty: undefined,
    oneofString: undefined,
    mapValue: {},
    mappedStringValue: {},
    mappedNestedValue: {},
    nonConventionalNameValue: "",
    timestampValue: undefined,
    repeatedEnumValue: [],
    repeatedEnumAnnotation: [],
    enumValueAnnotation: 0,
    repeatedStringAnnotation: [],
    repeatedNestedAnnotation: [],
    nestedAnnotation: undefined,
    int64OverrideType: Long.ZERO,
    anytype: undefined,
    repeatedAnytype: [],
  };
}

export const ABitOfEverything: MessageFns<ABitOfEverything> = {
  encode(message: ABitOfEverything, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.singleNested !== undefined) {
      ABitOfEverything_Nested.encode(message.singleNested, writer.uint32(202).fork()).join();
    }
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    for (const v of message.nested) {
      ABitOfEverything_Nested.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.floatValue !== 0) {
      writer.uint32(29).float(message.floatValue);
    }
    if (message.doubleValue !== 0) {
      writer.uint32(33).double(message.doubleValue);
    }
    if (!message.int64Value.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.int64Value.toString());
    }
    if (!message.uint64Value.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.uint64Value.toString());
    }
    if (message.int32Value !== 0) {
      writer.uint32(56).int32(message.int32Value);
    }
    if (!message.fixed64Value.equals(Long.UZERO)) {
      writer.uint32(65).fixed64(message.fixed64Value.toString());
    }
    if (message.fixed32Value !== 0) {
      writer.uint32(77).fixed32(message.fixed32Value);
    }
    if (message.boolValue !== false) {
      writer.uint32(80).bool(message.boolValue);
    }
    if (message.stringValue !== "") {
      writer.uint32(90).string(message.stringValue);
    }
    if (message.bytesValue.length !== 0) {
      writer.uint32(234).bytes(message.bytesValue);
    }
    if (message.uint32Value !== 0) {
      writer.uint32(104).uint32(message.uint32Value);
    }
    if (message.enumValue !== 0) {
      writer.uint32(112).int32(message.enumValue);
    }
    if (message.sfixed32Value !== 0) {
      writer.uint32(125).sfixed32(message.sfixed32Value);
    }
    if (!message.sfixed64Value.equals(Long.ZERO)) {
      writer.uint32(129).sfixed64(message.sfixed64Value.toString());
    }
    if (message.sint32Value !== 0) {
      writer.uint32(136).sint32(message.sint32Value);
    }
    if (!message.sint64Value.equals(Long.ZERO)) {
      writer.uint32(144).sint64(message.sint64Value.toString());
    }
    for (const v of message.repeatedStringValue) {
      writer.uint32(154).string(v!);
    }
    if (message.oneofEmpty !== undefined) {
      Empty.encode(message.oneofEmpty, writer.uint32(162).fork()).join();
    }
    if (message.oneofString !== undefined) {
      writer.uint32(170).string(message.oneofString);
    }
    Object.entries(message.mapValue).forEach(([key, value]) => {
      ABitOfEverything_MapValueEntry.encode({ key: key as any, value }, writer.uint32(178).fork()).join();
    });
    Object.entries(message.mappedStringValue).forEach(([key, value]) => {
      ABitOfEverything_MappedStringValueEntry.encode({ key: key as any, value }, writer.uint32(186).fork()).join();
    });
    Object.entries(message.mappedNestedValue).forEach(([key, value]) => {
      ABitOfEverything_MappedNestedValueEntry.encode({ key: key as any, value }, writer.uint32(194).fork()).join();
    });
    if (message.nonConventionalNameValue !== "") {
      writer.uint32(210).string(message.nonConventionalNameValue);
    }
    if (message.timestampValue !== undefined) {
      Timestamp.encode(toTimestamp(message.timestampValue), writer.uint32(218).fork()).join();
    }
    writer.uint32(226).fork();
    for (const v of message.repeatedEnumValue) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(258).fork();
    for (const v of message.repeatedEnumAnnotation) {
      writer.int32(v);
    }
    writer.join();
    if (message.enumValueAnnotation !== 0) {
      writer.uint32(264).int32(message.enumValueAnnotation);
    }
    for (const v of message.repeatedStringAnnotation) {
      writer.uint32(274).string(v!);
    }
    for (const v of message.repeatedNestedAnnotation) {
      ABitOfEverything_Nested.encode(v!, writer.uint32(282).fork()).join();
    }
    if (message.nestedAnnotation !== undefined) {
      ABitOfEverything_Nested.encode(message.nestedAnnotation, writer.uint32(290).fork()).join();
    }
    if (!message.int64OverrideType.equals(Long.ZERO)) {
      writer.uint32(296).int64(message.int64OverrideType.toString());
    }
    if (message.anytype !== undefined) {
      Any.encode(message.anytype, writer.uint32(306).fork()).join();
    }
    for (const v of message.repeatedAnytype) {
      Any.encode(v!, writer.uint32(314).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 25:
          if (tag !== 202) {
            break;
          }

          message.singleNested = ABitOfEverything_Nested.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nested.push(ABitOfEverything_Nested.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.int64Value = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.uint64Value = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.int32Value = reader.int32();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.fixed64Value = Long.fromString(reader.fixed64().toString(), true);
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.fixed32Value = reader.fixed32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.bytesValue = Buffer.from(reader.bytes());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.uint32Value = reader.uint32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.enumValue = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.sfixed32Value = reader.sfixed32();
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.sfixed64Value = Long.fromString(reader.sfixed64().toString());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.sint32Value = reader.sint32();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.sint64Value = Long.fromString(reader.sint64().toString());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.repeatedStringValue.push(reader.string());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.oneofEmpty = Empty.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.oneofString = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          const entry22 = ABitOfEverything_MapValueEntry.decode(reader, reader.uint32());
          if (entry22.value !== undefined) {
            message.mapValue[entry22.key] = entry22.value;
          }
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          const entry23 = ABitOfEverything_MappedStringValueEntry.decode(reader, reader.uint32());
          if (entry23.value !== undefined) {
            message.mappedStringValue[entry23.key] = entry23.value;
          }
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          const entry24 = ABitOfEverything_MappedNestedValueEntry.decode(reader, reader.uint32());
          if (entry24.value !== undefined) {
            message.mappedNestedValue[entry24.key] = entry24.value;
          }
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.nonConventionalNameValue = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.timestampValue = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 28:
          if (tag === 224) {
            message.repeatedEnumValue.push(reader.int32() as any);

            continue;
          }

          if (tag === 226) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnumValue.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 32:
          if (tag === 256) {
            message.repeatedEnumAnnotation.push(reader.int32() as any);

            continue;
          }

          if (tag === 258) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnumAnnotation.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.enumValueAnnotation = reader.int32() as any;
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.repeatedStringAnnotation.push(reader.string());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.repeatedNestedAnnotation.push(ABitOfEverything_Nested.decode(reader, reader.uint32()));
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.nestedAnnotation = ABitOfEverything_Nested.decode(reader, reader.uint32());
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.int64OverrideType = Long.fromString(reader.int64().toString());
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.anytype = Any.decode(reader, reader.uint32());
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.repeatedAnytype.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything {
    return {
      singleNested: isSet(object.singleNested) ? ABitOfEverything_Nested.fromJSON(object.singleNested) : undefined,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      nested: globalThis.Array.isArray(object?.nested)
        ? object.nested.map((e: any) => ABitOfEverything_Nested.fromJSON(e))
        : [],
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : 0,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : 0,
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : Long.ZERO,
      uint64Value: isSet(object.uint64Value) ? Long.fromValue(object.uint64Value) : Long.UZERO,
      int32Value: isSet(object.int32Value) ? globalThis.Number(object.int32Value) : 0,
      fixed64Value: isSet(object.fixed64Value) ? Long.fromValue(object.fixed64Value) : Long.UZERO,
      fixed32Value: isSet(object.fixed32Value) ? globalThis.Number(object.fixed32Value) : 0,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : false,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
      bytesValue: isSet(object.bytesValue) ? Buffer.from(bytesFromBase64(object.bytesValue)) : Buffer.alloc(0),
      uint32Value: isSet(object.uint32Value) ? globalThis.Number(object.uint32Value) : 0,
      enumValue: isSet(object.enumValue) ? numericEnumFromJSON(object.enumValue) : 0,
      sfixed32Value: isSet(object.sfixed32Value) ? globalThis.Number(object.sfixed32Value) : 0,
      sfixed64Value: isSet(object.sfixed64Value) ? Long.fromValue(object.sfixed64Value) : Long.ZERO,
      sint32Value: isSet(object.sint32Value) ? globalThis.Number(object.sint32Value) : 0,
      sint64Value: isSet(object.sint64Value) ? Long.fromValue(object.sint64Value) : Long.ZERO,
      repeatedStringValue: globalThis.Array.isArray(object?.repeatedStringValue)
        ? object.repeatedStringValue.map((e: any) => globalThis.String(e))
        : [],
      oneofEmpty: isSet(object.oneofEmpty) ? Empty.fromJSON(object.oneofEmpty) : undefined,
      oneofString: isSet(object.oneofString) ? globalThis.String(object.oneofString) : undefined,
      mapValue: isObject(object.mapValue)
        ? Object.entries(object.mapValue).reduce<{ [key: string]: NumericEnum }>((acc, [key, value]) => {
          acc[key] = numericEnumFromJSON(value);
          return acc;
        }, {})
        : {},
      mappedStringValue: isObject(object.mappedStringValue)
        ? Object.entries(object.mappedStringValue).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      mappedNestedValue: isObject(object.mappedNestedValue)
        ? Object.entries(object.mappedNestedValue).reduce<{ [key: string]: ABitOfEverything_Nested }>(
          (acc, [key, value]) => {
            acc[key] = ABitOfEverything_Nested.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      nonConventionalNameValue: isSet(object.nonConventionalNameValue)
        ? globalThis.String(object.nonConventionalNameValue)
        : "",
      timestampValue: isSet(object.timestampValue) ? fromJsonTimestamp(object.timestampValue) : undefined,
      repeatedEnumValue: globalThis.Array.isArray(object?.repeatedEnumValue)
        ? object.repeatedEnumValue.map((e: any) => numericEnumFromJSON(e))
        : [],
      repeatedEnumAnnotation: globalThis.Array.isArray(object?.repeatedEnumAnnotation)
        ? object.repeatedEnumAnnotation.map((e: any) => numericEnumFromJSON(e))
        : [],
      enumValueAnnotation: isSet(object.enumValueAnnotation) ? numericEnumFromJSON(object.enumValueAnnotation) : 0,
      repeatedStringAnnotation: globalThis.Array.isArray(object?.repeatedStringAnnotation)
        ? object.repeatedStringAnnotation.map((e: any) => globalThis.String(e))
        : [],
      repeatedNestedAnnotation: globalThis.Array.isArray(object?.repeatedNestedAnnotation)
        ? object.repeatedNestedAnnotation.map((e: any) => ABitOfEverything_Nested.fromJSON(e))
        : [],
      nestedAnnotation: isSet(object.nestedAnnotation)
        ? ABitOfEverything_Nested.fromJSON(object.nestedAnnotation)
        : undefined,
      int64OverrideType: isSet(object.int64OverrideType) ? Long.fromValue(object.int64OverrideType) : Long.ZERO,
      anytype: isSet(object.anytype) ? Any.fromJSON(object.anytype) : undefined,
      repeatedAnytype: globalThis.Array.isArray(object?.repeatedAnytype)
        ? object.repeatedAnytype.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ABitOfEverything): unknown {
    const obj: any = {};
    if (message.singleNested !== undefined) {
      obj.singleNested = ABitOfEverything_Nested.toJSON(message.singleNested);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.nested?.length) {
      obj.nested = message.nested.map((e) => ABitOfEverything_Nested.toJSON(e));
    }
    if (message.floatValue !== 0) {
      obj.floatValue = message.floatValue;
    }
    if (message.doubleValue !== 0) {
      obj.doubleValue = message.doubleValue;
    }
    if (!message.int64Value.equals(Long.ZERO)) {
      obj.int64Value = (message.int64Value || Long.ZERO).toString();
    }
    if (!message.uint64Value.equals(Long.UZERO)) {
      obj.uint64Value = (message.uint64Value || Long.UZERO).toString();
    }
    if (message.int32Value !== 0) {
      obj.int32Value = Math.round(message.int32Value);
    }
    if (!message.fixed64Value.equals(Long.UZERO)) {
      obj.fixed64Value = (message.fixed64Value || Long.UZERO).toString();
    }
    if (message.fixed32Value !== 0) {
      obj.fixed32Value = Math.round(message.fixed32Value);
    }
    if (message.boolValue !== false) {
      obj.boolValue = message.boolValue;
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.bytesValue.length !== 0) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.uint32Value !== 0) {
      obj.uint32Value = Math.round(message.uint32Value);
    }
    if (message.enumValue !== 0) {
      obj.enumValue = numericEnumToJSON(message.enumValue);
    }
    if (message.sfixed32Value !== 0) {
      obj.sfixed32Value = Math.round(message.sfixed32Value);
    }
    if (!message.sfixed64Value.equals(Long.ZERO)) {
      obj.sfixed64Value = (message.sfixed64Value || Long.ZERO).toString();
    }
    if (message.sint32Value !== 0) {
      obj.sint32Value = Math.round(message.sint32Value);
    }
    if (!message.sint64Value.equals(Long.ZERO)) {
      obj.sint64Value = (message.sint64Value || Long.ZERO).toString();
    }
    if (message.repeatedStringValue?.length) {
      obj.repeatedStringValue = message.repeatedStringValue;
    }
    if (message.oneofEmpty !== undefined) {
      obj.oneofEmpty = Empty.toJSON(message.oneofEmpty);
    }
    if (message.oneofString !== undefined) {
      obj.oneofString = message.oneofString;
    }
    if (message.mapValue) {
      const entries = Object.entries(message.mapValue);
      if (entries.length > 0) {
        obj.mapValue = {};
        entries.forEach(([k, v]) => {
          obj.mapValue[k] = numericEnumToJSON(v);
        });
      }
    }
    if (message.mappedStringValue) {
      const entries = Object.entries(message.mappedStringValue);
      if (entries.length > 0) {
        obj.mappedStringValue = {};
        entries.forEach(([k, v]) => {
          obj.mappedStringValue[k] = v;
        });
      }
    }
    if (message.mappedNestedValue) {
      const entries = Object.entries(message.mappedNestedValue);
      if (entries.length > 0) {
        obj.mappedNestedValue = {};
        entries.forEach(([k, v]) => {
          obj.mappedNestedValue[k] = ABitOfEverything_Nested.toJSON(v);
        });
      }
    }
    if (message.nonConventionalNameValue !== "") {
      obj.nonConventionalNameValue = message.nonConventionalNameValue;
    }
    if (message.timestampValue !== undefined) {
      obj.timestampValue = message.timestampValue.toISOString();
    }
    if (message.repeatedEnumValue?.length) {
      obj.repeatedEnumValue = message.repeatedEnumValue.map((e) => numericEnumToJSON(e));
    }
    if (message.repeatedEnumAnnotation?.length) {
      obj.repeatedEnumAnnotation = message.repeatedEnumAnnotation.map((e) => numericEnumToJSON(e));
    }
    if (message.enumValueAnnotation !== 0) {
      obj.enumValueAnnotation = numericEnumToJSON(message.enumValueAnnotation);
    }
    if (message.repeatedStringAnnotation?.length) {
      obj.repeatedStringAnnotation = message.repeatedStringAnnotation;
    }
    if (message.repeatedNestedAnnotation?.length) {
      obj.repeatedNestedAnnotation = message.repeatedNestedAnnotation.map((e) => ABitOfEverything_Nested.toJSON(e));
    }
    if (message.nestedAnnotation !== undefined) {
      obj.nestedAnnotation = ABitOfEverything_Nested.toJSON(message.nestedAnnotation);
    }
    if (!message.int64OverrideType.equals(Long.ZERO)) {
      obj.int64OverrideType = (message.int64OverrideType || Long.ZERO).toString();
    }
    if (message.anytype !== undefined) {
      obj.anytype = Any.toJSON(message.anytype);
    }
    if (message.repeatedAnytype?.length) {
      obj.repeatedAnytype = message.repeatedAnytype.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything>): ABitOfEverything {
    return ABitOfEverything.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything>): ABitOfEverything {
    const message = createBaseABitOfEverything();
    message.singleNested = (object.singleNested !== undefined && object.singleNested !== null)
      ? ABitOfEverything_Nested.fromPartial(object.singleNested)
      : undefined;
    message.uuid = object.uuid ?? "";
    message.nested = object.nested?.map((e) => ABitOfEverything_Nested.fromPartial(e)) || [];
    message.floatValue = object.floatValue ?? 0;
    message.doubleValue = object.doubleValue ?? 0;
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : Long.ZERO;
    message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
      ? Long.fromValue(object.uint64Value)
      : Long.UZERO;
    message.int32Value = object.int32Value ?? 0;
    message.fixed64Value = (object.fixed64Value !== undefined && object.fixed64Value !== null)
      ? Long.fromValue(object.fixed64Value)
      : Long.UZERO;
    message.fixed32Value = object.fixed32Value ?? 0;
    message.boolValue = object.boolValue ?? false;
    message.stringValue = object.stringValue ?? "";
    message.bytesValue = object.bytesValue ?? Buffer.alloc(0);
    message.uint32Value = object.uint32Value ?? 0;
    message.enumValue = object.enumValue ?? 0;
    message.sfixed32Value = object.sfixed32Value ?? 0;
    message.sfixed64Value = (object.sfixed64Value !== undefined && object.sfixed64Value !== null)
      ? Long.fromValue(object.sfixed64Value)
      : Long.ZERO;
    message.sint32Value = object.sint32Value ?? 0;
    message.sint64Value = (object.sint64Value !== undefined && object.sint64Value !== null)
      ? Long.fromValue(object.sint64Value)
      : Long.ZERO;
    message.repeatedStringValue = object.repeatedStringValue?.map((e) => e) || [];
    message.oneofEmpty = (object.oneofEmpty !== undefined && object.oneofEmpty !== null)
      ? Empty.fromPartial(object.oneofEmpty)
      : undefined;
    message.oneofString = object.oneofString ?? undefined;
    message.mapValue = Object.entries(object.mapValue ?? {}).reduce<{ [key: string]: NumericEnum }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value as NumericEnum;
        }
        return acc;
      },
      {},
    );
    message.mappedStringValue = Object.entries(object.mappedStringValue ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.mappedNestedValue = Object.entries(object.mappedNestedValue ?? {}).reduce<
      { [key: string]: ABitOfEverything_Nested }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ABitOfEverything_Nested.fromPartial(value);
      }
      return acc;
    }, {});
    message.nonConventionalNameValue = object.nonConventionalNameValue ?? "";
    message.timestampValue = object.timestampValue ?? undefined;
    message.repeatedEnumValue = object.repeatedEnumValue?.map((e) => e) || [];
    message.repeatedEnumAnnotation = object.repeatedEnumAnnotation?.map((e) => e) || [];
    message.enumValueAnnotation = object.enumValueAnnotation ?? 0;
    message.repeatedStringAnnotation = object.repeatedStringAnnotation?.map((e) => e) || [];
    message.repeatedNestedAnnotation =
      object.repeatedNestedAnnotation?.map((e) => ABitOfEverything_Nested.fromPartial(e)) || [];
    message.nestedAnnotation = (object.nestedAnnotation !== undefined && object.nestedAnnotation !== null)
      ? ABitOfEverything_Nested.fromPartial(object.nestedAnnotation)
      : undefined;
    message.int64OverrideType = (object.int64OverrideType !== undefined && object.int64OverrideType !== null)
      ? Long.fromValue(object.int64OverrideType)
      : Long.ZERO;
    message.anytype = (object.anytype !== undefined && object.anytype !== null)
      ? Any.fromPartial(object.anytype)
      : undefined;
    message.repeatedAnytype = object.repeatedAnytype?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseABitOfEverything_Nested(): ABitOfEverything_Nested {
  return { name: "", amount: 0, ok: 0 };
}

export const ABitOfEverything_Nested: MessageFns<ABitOfEverything_Nested> = {
  encode(message: ABitOfEverything_Nested, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint32(message.amount);
    }
    if (message.ok !== 0) {
      writer.uint32(24).int32(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_Nested {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_Nested();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.amount = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ok = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_Nested {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      ok: isSet(object.ok) ? aBitOfEverything_Nested_DeepEnumFromJSON(object.ok) : 0,
    };
  },

  toJSON(message: ABitOfEverything_Nested): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.ok !== 0) {
      obj.ok = aBitOfEverything_Nested_DeepEnumToJSON(message.ok);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_Nested>): ABitOfEverything_Nested {
    return ABitOfEverything_Nested.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_Nested>): ABitOfEverything_Nested {
    const message = createBaseABitOfEverything_Nested();
    message.name = object.name ?? "";
    message.amount = object.amount ?? 0;
    message.ok = object.ok ?? 0;
    return message;
  },
};

function createBaseABitOfEverything_MapValueEntry(): ABitOfEverything_MapValueEntry {
  return { key: "", value: 0 };
}

export const ABitOfEverything_MapValueEntry: MessageFns<ABitOfEverything_MapValueEntry> = {
  encode(message: ABitOfEverything_MapValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_MapValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_MapValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_MapValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? numericEnumFromJSON(object.value) : 0,
    };
  },

  toJSON(message: ABitOfEverything_MapValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = numericEnumToJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_MapValueEntry>): ABitOfEverything_MapValueEntry {
    return ABitOfEverything_MapValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_MapValueEntry>): ABitOfEverything_MapValueEntry {
    const message = createBaseABitOfEverything_MapValueEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseABitOfEverything_MappedStringValueEntry(): ABitOfEverything_MappedStringValueEntry {
  return { key: "", value: "" };
}

export const ABitOfEverything_MappedStringValueEntry: MessageFns<ABitOfEverything_MappedStringValueEntry> = {
  encode(message: ABitOfEverything_MappedStringValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_MappedStringValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_MappedStringValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_MappedStringValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ABitOfEverything_MappedStringValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_MappedStringValueEntry>): ABitOfEverything_MappedStringValueEntry {
    return ABitOfEverything_MappedStringValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_MappedStringValueEntry>): ABitOfEverything_MappedStringValueEntry {
    const message = createBaseABitOfEverything_MappedStringValueEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseABitOfEverything_MappedNestedValueEntry(): ABitOfEverything_MappedNestedValueEntry {
  return { key: "", value: undefined };
}

export const ABitOfEverything_MappedNestedValueEntry: MessageFns<ABitOfEverything_MappedNestedValueEntry> = {
  encode(message: ABitOfEverything_MappedNestedValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ABitOfEverything_Nested.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_MappedNestedValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_MappedNestedValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ABitOfEverything_Nested.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_MappedNestedValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ABitOfEverything_Nested.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ABitOfEverything_MappedNestedValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ABitOfEverything_Nested.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_MappedNestedValueEntry>): ABitOfEverything_MappedNestedValueEntry {
    return ABitOfEverything_MappedNestedValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_MappedNestedValueEntry>): ABitOfEverything_MappedNestedValueEntry {
    const message = createBaseABitOfEverything_MappedNestedValueEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ABitOfEverything_Nested.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseResponseBodyOut(): ResponseBodyOut {
  return { response: undefined };
}

export const ResponseBodyOut: MessageFns<ResponseBodyOut> = {
  encode(message: ResponseBodyOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== undefined) {
      ResponseBodyOut_Response.encode(message.response, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseBodyOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBodyOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = ResponseBodyOut_Response.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBodyOut {
    return { response: isSet(object.response) ? ResponseBodyOut_Response.fromJSON(object.response) : undefined };
  },

  toJSON(message: ResponseBodyOut): unknown {
    const obj: any = {};
    if (message.response !== undefined) {
      obj.response = ResponseBodyOut_Response.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseBodyOut>): ResponseBodyOut {
    return ResponseBodyOut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseBodyOut>): ResponseBodyOut {
    const message = createBaseResponseBodyOut();
    message.response = (object.response !== undefined && object.response !== null)
      ? ResponseBodyOut_Response.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseResponseBodyOut_Response(): ResponseBodyOut_Response {
  return { data: "" };
}

export const ResponseBodyOut_Response: MessageFns<ResponseBodyOut_Response> = {
  encode(message: ResponseBodyOut_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseBodyOut_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBodyOut_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBodyOut_Response {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: ResponseBodyOut_Response): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseBodyOut_Response>): ResponseBodyOut_Response {
    return ResponseBodyOut_Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseBodyOut_Response>): ResponseBodyOut_Response {
    const message = createBaseResponseBodyOut_Response();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseRepeatedResponseBodyOut(): RepeatedResponseBodyOut {
  return { response: [] };
}

export const RepeatedResponseBodyOut: MessageFns<RepeatedResponseBodyOut> = {
  encode(message: RepeatedResponseBodyOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.response) {
      RepeatedResponseBodyOut_Response.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedResponseBodyOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedResponseBodyOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response.push(RepeatedResponseBodyOut_Response.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedResponseBodyOut {
    return {
      response: globalThis.Array.isArray(object?.response)
        ? object.response.map((e: any) => RepeatedResponseBodyOut_Response.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RepeatedResponseBodyOut): unknown {
    const obj: any = {};
    if (message.response?.length) {
      obj.response = message.response.map((e) => RepeatedResponseBodyOut_Response.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedResponseBodyOut>): RepeatedResponseBodyOut {
    return RepeatedResponseBodyOut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedResponseBodyOut>): RepeatedResponseBodyOut {
    const message = createBaseRepeatedResponseBodyOut();
    message.response = object.response?.map((e) => RepeatedResponseBodyOut_Response.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedResponseBodyOut_Response(): RepeatedResponseBodyOut_Response {
  return { data: "", type: 0 };
}

export const RepeatedResponseBodyOut_Response: MessageFns<RepeatedResponseBodyOut_Response> = {
  encode(message: RepeatedResponseBodyOut_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedResponseBodyOut_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedResponseBodyOut_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedResponseBodyOut_Response {
    return {
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      type: isSet(object.type) ? repeatedResponseBodyOut_Response_ResponseTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: RepeatedResponseBodyOut_Response): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.type !== 0) {
      obj.type = repeatedResponseBodyOut_Response_ResponseTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedResponseBodyOut_Response>): RepeatedResponseBodyOut_Response {
    return RepeatedResponseBodyOut_Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedResponseBodyOut_Response>): RepeatedResponseBodyOut_Response {
    const message = createBaseRepeatedResponseBodyOut_Response();
    message.data = object.data ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseUpdateMessage(): UpdateMessage {
  return { updateMask: undefined, aBitOfEverything: undefined };
}

export const UpdateMessage: MessageFns<UpdateMessage> = {
  encode(message: UpdateMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.aBitOfEverything !== undefined) {
      ABitOfEverything.encode(message.aBitOfEverything, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aBitOfEverything = ABitOfEverything.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMessage {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      aBitOfEverything: isSet(object.aBitOfEverything) ? ABitOfEverything.fromJSON(object.aBitOfEverything) : undefined,
    };
  },

  toJSON(message: UpdateMessage): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.aBitOfEverything !== undefined) {
      obj.aBitOfEverything = ABitOfEverything.toJSON(message.aBitOfEverything);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMessage>): UpdateMessage {
    return UpdateMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMessage>): UpdateMessage {
    const message = createBaseUpdateMessage();
    message.updateMask = object.updateMask ?? undefined;
    message.aBitOfEverything = (object.aBitOfEverything !== undefined && object.aBitOfEverything !== null)
      ? ABitOfEverything.fromPartial(object.aBitOfEverything)
      : undefined;
    return message;
  },
};

function createBaseNestedOuter(): NestedOuter {
  return { one: undefined };
}

export const NestedOuter: MessageFns<NestedOuter> = {
  encode(message: NestedOuter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.one !== undefined) {
      NestedOne.encode(message.one, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NestedOuter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNestedOuter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.one = NestedOne.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NestedOuter {
    return { one: isSet(object.one) ? NestedOne.fromJSON(object.one) : undefined };
  },

  toJSON(message: NestedOuter): unknown {
    const obj: any = {};
    if (message.one !== undefined) {
      obj.one = NestedOne.toJSON(message.one);
    }
    return obj;
  },

  create(base?: DeepPartial<NestedOuter>): NestedOuter {
    return NestedOuter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NestedOuter>): NestedOuter {
    const message = createBaseNestedOuter();
    message.one = (object.one !== undefined && object.one !== null) ? NestedOne.fromPartial(object.one) : undefined;
    return message;
  },
};

function createBaseNestedOne(): NestedOne {
  return { two: undefined };
}

export const NestedOne: MessageFns<NestedOne> = {
  encode(message: NestedOne, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.two !== undefined) {
      NestedTwo.encode(message.two, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NestedOne {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNestedOne();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.two = NestedTwo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NestedOne {
    return { two: isSet(object.two) ? NestedTwo.fromJSON(object.two) : undefined };
  },

  toJSON(message: NestedOne): unknown {
    const obj: any = {};
    if (message.two !== undefined) {
      obj.two = NestedTwo.toJSON(message.two);
    }
    return obj;
  },

  create(base?: DeepPartial<NestedOne>): NestedOne {
    return NestedOne.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NestedOne>): NestedOne {
    const message = createBaseNestedOne();
    message.two = (object.two !== undefined && object.two !== null) ? NestedTwo.fromPartial(object.two) : undefined;
    return message;
  },
};

function createBaseNestedTwo(): NestedTwo {
  return { three: undefined };
}

export const NestedTwo: MessageFns<NestedTwo> = {
  encode(message: NestedTwo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.three !== undefined) {
      NestedThree.encode(message.three, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NestedTwo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNestedTwo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.three = NestedThree.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NestedTwo {
    return { three: isSet(object.three) ? NestedThree.fromJSON(object.three) : undefined };
  },

  toJSON(message: NestedTwo): unknown {
    const obj: any = {};
    if (message.three !== undefined) {
      obj.three = NestedThree.toJSON(message.three);
    }
    return obj;
  },

  create(base?: DeepPartial<NestedTwo>): NestedTwo {
    return NestedTwo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NestedTwo>): NestedTwo {
    const message = createBaseNestedTwo();
    message.three = (object.three !== undefined && object.three !== null)
      ? NestedThree.fromPartial(object.three)
      : undefined;
    return message;
  },
};

function createBaseNestedThree(): NestedThree {
  return { a: false, b: false };
}

export const NestedThree: MessageFns<NestedThree> = {
  encode(message: NestedThree, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.a !== false) {
      writer.uint32(8).bool(message.a);
    }
    if (message.b !== false) {
      writer.uint32(16).bool(message.b);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NestedThree {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNestedThree();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.a = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.b = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NestedThree {
    return {
      a: isSet(object.a) ? globalThis.Boolean(object.a) : false,
      b: isSet(object.b) ? globalThis.Boolean(object.b) : false,
    };
  },

  toJSON(message: NestedThree): unknown {
    const obj: any = {};
    if (message.a !== false) {
      obj.a = message.a;
    }
    if (message.b !== false) {
      obj.b = message.b;
    }
    return obj;
  },

  create(base?: DeepPartial<NestedThree>): NestedThree {
    return NestedThree.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NestedThree>): NestedThree {
    const message = createBaseNestedThree();
    message.a = object.a ?? false;
    message.b = object.b ?? false;
    return message;
  },
};

function createBaseUpdateNestedRequest(): UpdateNestedRequest {
  return { nested: undefined, updateMask: undefined };
}

export const UpdateNestedRequest: MessageFns<UpdateNestedRequest> = {
  encode(message: UpdateNestedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nested !== undefined) {
      NestedOuter.encode(message.nested, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNestedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNestedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nested = NestedOuter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNestedRequest {
    return {
      nested: isSet(object.nested) ? NestedOuter.fromJSON(object.nested) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateNestedRequest): unknown {
    const obj: any = {};
    if (message.nested !== undefined) {
      obj.nested = NestedOuter.toJSON(message.nested);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNestedRequest>): UpdateNestedRequest {
    return UpdateNestedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNestedRequest>): UpdateNestedRequest {
    const message = createBaseUpdateNestedRequest();
    message.nested = (object.nested !== undefined && object.nested !== null)
      ? NestedOuter.fromPartial(object.nested)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
