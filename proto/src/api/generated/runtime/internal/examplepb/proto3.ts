// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: runtime/internal/examplepb/proto3.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../google/protobuf/duration.js";
import { FieldMask } from "../../../google/protobuf/field_mask.js";
import { Struct, Value } from "../../../google/protobuf/struct.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import {
  BoolValue,
  BytesValue,
  DoubleValue,
  FloatValue,
  Int32Value,
  Int64Value,
  StringValue,
  UInt32Value,
  UInt64Value,
} from "../../../google/protobuf/wrappers.js";

export const protobufPackage = "grpc.gateway.runtime.internal.examplepb";

export enum EnumValue {
  X = 0,
  Y = 1,
  Z = 2,
  UNRECOGNIZED = -1,
}

export function enumValueFromJSON(object: any): EnumValue {
  switch (object) {
    case 0:
    case "X":
      return EnumValue.X;
    case 1:
    case "Y":
      return EnumValue.Y;
    case 2:
    case "Z":
      return EnumValue.Z;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnumValue.UNRECOGNIZED;
  }
}

export function enumValueToJSON(object: EnumValue): string {
  switch (object) {
    case EnumValue.X:
      return "X";
    case EnumValue.Y:
      return "Y";
    case EnumValue.Z:
      return "Z";
    case EnumValue.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Proto3Message {
  /** Next number: 49 */
  nested: Proto3Message | undefined;
  floatValue: number;
  doubleValue: number;
  int64Value: Long;
  int32Value: number;
  uint64Value: Long;
  uint32Value: number;
  boolValue: boolean;
  stringValue: string;
  bytesValue: Buffer;
  repeatedValue: string[];
  repeatedMessage: Long[];
  enumValue: EnumValue;
  repeatedEnum: EnumValue[];
  timestampValue: Date | undefined;
  durationValue: Duration | undefined;
  fieldmaskValue: string[] | undefined;
  oneofBoolValue?: boolean | undefined;
  oneofStringValue?: string | undefined;
  nestedOneofValueOne?: Proto3Message | undefined;
  wrapperDoubleValue: number | undefined;
  wrapperFloatValue: number | undefined;
  wrapperInt64Value: Long | undefined;
  wrapperInt32Value: number | undefined;
  wrapperUInt64Value: Long | undefined;
  wrapperUInt32Value: number | undefined;
  wrapperBoolValue: boolean | undefined;
  wrapperStringValue: string | undefined;
  wrapperBytesValue: Buffer | undefined;
  mapValue: { [key: string]: string };
  mapValue2: { [key: string]: number };
  mapValue3: { [key: number]: string };
  mapValue4: { [key: string]: Long };
  mapValue5: Map<Long, string>;
  mapValue6: { [key: string]: number };
  mapValue7: { [key: number]: string };
  mapValue8: { [key: string]: Long };
  mapValue9: Map<Long, string>;
  mapValue10: { [key: string]: number };
  mapValue12: { [key: string]: number };
  mapValue14: { [key: string]: boolean };
  mapValue15: Map<boolean, string>;
  mapValue16: { [key: string]: Long | undefined };
  structValueValue: any | undefined;
  structValue: { [key: string]: any } | undefined;
}

export interface Proto3Message_MapValueEntry {
  key: string;
  value: string;
}

export interface Proto3Message_MapValue2Entry {
  key: string;
  value: number;
}

export interface Proto3Message_MapValue3Entry {
  key: number;
  value: string;
}

export interface Proto3Message_MapValue4Entry {
  key: string;
  value: Long;
}

export interface Proto3Message_MapValue5Entry {
  key: Long;
  value: string;
}

export interface Proto3Message_MapValue6Entry {
  key: string;
  value: number;
}

export interface Proto3Message_MapValue7Entry {
  key: number;
  value: string;
}

export interface Proto3Message_MapValue8Entry {
  key: string;
  value: Long;
}

export interface Proto3Message_MapValue9Entry {
  key: Long;
  value: string;
}

export interface Proto3Message_MapValue10Entry {
  key: string;
  value: number;
}

export interface Proto3Message_MapValue12Entry {
  key: string;
  value: number;
}

export interface Proto3Message_MapValue14Entry {
  key: string;
  value: boolean;
}

export interface Proto3Message_MapValue15Entry {
  key: boolean;
  value: string;
}

export interface Proto3Message_MapValue16Entry {
  key: string;
  value: Long | undefined;
}

function createBaseProto3Message(): Proto3Message {
  return {
    nested: undefined,
    floatValue: 0,
    doubleValue: 0,
    int64Value: Long.ZERO,
    int32Value: 0,
    uint64Value: Long.UZERO,
    uint32Value: 0,
    boolValue: false,
    stringValue: "",
    bytesValue: Buffer.alloc(0),
    repeatedValue: [],
    repeatedMessage: [],
    enumValue: 0,
    repeatedEnum: [],
    timestampValue: undefined,
    durationValue: undefined,
    fieldmaskValue: undefined,
    oneofBoolValue: undefined,
    oneofStringValue: undefined,
    nestedOneofValueOne: undefined,
    wrapperDoubleValue: undefined,
    wrapperFloatValue: undefined,
    wrapperInt64Value: undefined,
    wrapperInt32Value: undefined,
    wrapperUInt64Value: undefined,
    wrapperUInt32Value: undefined,
    wrapperBoolValue: undefined,
    wrapperStringValue: undefined,
    wrapperBytesValue: undefined,
    mapValue: {},
    mapValue2: {},
    mapValue3: {},
    mapValue4: {},
    mapValue5: new Map(),
    mapValue6: {},
    mapValue7: {},
    mapValue8: {},
    mapValue9: new Map(),
    mapValue10: {},
    mapValue12: {},
    mapValue14: {},
    mapValue15: new Map(),
    mapValue16: {},
    structValueValue: undefined,
    structValue: undefined,
  };
}

export const Proto3Message: MessageFns<Proto3Message> = {
  encode(message: Proto3Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nested !== undefined) {
      Proto3Message.encode(message.nested, writer.uint32(330).fork()).join();
    }
    if (message.floatValue !== 0) {
      writer.uint32(341).float(message.floatValue);
    }
    if (message.doubleValue !== 0) {
      writer.uint32(345).double(message.doubleValue);
    }
    if (!message.int64Value.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.int64Value.toString());
    }
    if (message.int32Value !== 0) {
      writer.uint32(32).int32(message.int32Value);
    }
    if (!message.uint64Value.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.uint64Value.toString());
    }
    if (message.uint32Value !== 0) {
      writer.uint32(48).uint32(message.uint32Value);
    }
    if (message.boolValue !== false) {
      writer.uint32(56).bool(message.boolValue);
    }
    if (message.stringValue !== "") {
      writer.uint32(66).string(message.stringValue);
    }
    if (message.bytesValue.length !== 0) {
      writer.uint32(74).bytes(message.bytesValue);
    }
    for (const v of message.repeatedValue) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.repeatedMessage) {
      UInt64Value.encode({ value: v!! }, writer.uint32(354).fork()).join();
    }
    if (message.enumValue !== 0) {
      writer.uint32(88).int32(message.enumValue);
    }
    writer.uint32(98).fork();
    for (const v of message.repeatedEnum) {
      writer.int32(v);
    }
    writer.join();
    if (message.timestampValue !== undefined) {
      Timestamp.encode(toTimestamp(message.timestampValue), writer.uint32(106).fork()).join();
    }
    if (message.durationValue !== undefined) {
      Duration.encode(message.durationValue, writer.uint32(114).fork()).join();
    }
    if (message.fieldmaskValue !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldmaskValue), writer.uint32(122).fork()).join();
    }
    if (message.oneofBoolValue !== undefined) {
      writer.uint32(8).bool(message.oneofBoolValue);
    }
    if (message.oneofStringValue !== undefined) {
      writer.uint32(18).string(message.oneofStringValue);
    }
    if (message.nestedOneofValueOne !== undefined) {
      Proto3Message.encode(message.nestedOneofValueOne, writer.uint32(370).fork()).join();
    }
    if (message.wrapperDoubleValue !== undefined) {
      DoubleValue.encode({ value: message.wrapperDoubleValue! }, writer.uint32(138).fork()).join();
    }
    if (message.wrapperFloatValue !== undefined) {
      FloatValue.encode({ value: message.wrapperFloatValue! }, writer.uint32(146).fork()).join();
    }
    if (message.wrapperInt64Value !== undefined) {
      Int64Value.encode({ value: message.wrapperInt64Value! }, writer.uint32(154).fork()).join();
    }
    if (message.wrapperInt32Value !== undefined) {
      Int32Value.encode({ value: message.wrapperInt32Value! }, writer.uint32(162).fork()).join();
    }
    if (message.wrapperUInt64Value !== undefined) {
      UInt64Value.encode({ value: message.wrapperUInt64Value! }, writer.uint32(170).fork()).join();
    }
    if (message.wrapperUInt32Value !== undefined) {
      UInt32Value.encode({ value: message.wrapperUInt32Value! }, writer.uint32(178).fork()).join();
    }
    if (message.wrapperBoolValue !== undefined) {
      BoolValue.encode({ value: message.wrapperBoolValue! }, writer.uint32(186).fork()).join();
    }
    if (message.wrapperStringValue !== undefined) {
      StringValue.encode({ value: message.wrapperStringValue! }, writer.uint32(194).fork()).join();
    }
    if (message.wrapperBytesValue !== undefined) {
      BytesValue.encode({ value: message.wrapperBytesValue! }, writer.uint32(202).fork()).join();
    }
    Object.entries(message.mapValue).forEach(([key, value]) => {
      Proto3Message_MapValueEntry.encode({ key: key as any, value }, writer.uint32(210).fork()).join();
    });
    Object.entries(message.mapValue2).forEach(([key, value]) => {
      Proto3Message_MapValue2Entry.encode({ key: key as any, value }, writer.uint32(218).fork()).join();
    });
    Object.entries(message.mapValue3).forEach(([key, value]) => {
      Proto3Message_MapValue3Entry.encode({ key: key as any, value }, writer.uint32(226).fork()).join();
    });
    Object.entries(message.mapValue4).forEach(([key, value]) => {
      Proto3Message_MapValue4Entry.encode({ key: key as any, value }, writer.uint32(234).fork()).join();
    });
    message.mapValue5.forEach((value, key) => {
      Proto3Message_MapValue5Entry.encode({ key: key as any, value }, writer.uint32(242).fork()).join();
    });
    Object.entries(message.mapValue6).forEach(([key, value]) => {
      Proto3Message_MapValue6Entry.encode({ key: key as any, value }, writer.uint32(250).fork()).join();
    });
    Object.entries(message.mapValue7).forEach(([key, value]) => {
      Proto3Message_MapValue7Entry.encode({ key: key as any, value }, writer.uint32(258).fork()).join();
    });
    Object.entries(message.mapValue8).forEach(([key, value]) => {
      Proto3Message_MapValue8Entry.encode({ key: key as any, value }, writer.uint32(266).fork()).join();
    });
    message.mapValue9.forEach((value, key) => {
      Proto3Message_MapValue9Entry.encode({ key: key as any, value }, writer.uint32(274).fork()).join();
    });
    Object.entries(message.mapValue10).forEach(([key, value]) => {
      Proto3Message_MapValue10Entry.encode({ key: key as any, value }, writer.uint32(282).fork()).join();
    });
    Object.entries(message.mapValue12).forEach(([key, value]) => {
      Proto3Message_MapValue12Entry.encode({ key: key as any, value }, writer.uint32(298).fork()).join();
    });
    Object.entries(message.mapValue14).forEach(([key, value]) => {
      Proto3Message_MapValue14Entry.encode({ key: key as any, value }, writer.uint32(314).fork()).join();
    });
    message.mapValue15.forEach((value, key) => {
      Proto3Message_MapValue15Entry.encode({ key: key as any, value }, writer.uint32(322).fork()).join();
    });
    Object.entries(message.mapValue16).forEach(([key, value]) => {
      if (value !== undefined) {
        Proto3Message_MapValue16Entry.encode({ key: key as any, value }, writer.uint32(362).fork()).join();
      }
    });
    if (message.structValueValue !== undefined) {
      Value.encode(Value.wrap(message.structValueValue), writer.uint32(378).fork()).join();
    }
    if (message.structValue !== undefined) {
      Struct.encode(Struct.wrap(message.structValue), writer.uint32(386).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 41:
          if (tag !== 330) {
            break;
          }

          message.nested = Proto3Message.decode(reader, reader.uint32());
          continue;
        case 42:
          if (tag !== 341) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        case 43:
          if (tag !== 345) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.int64Value = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.int32Value = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.uint64Value = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.uint32Value = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.bytesValue = Buffer.from(reader.bytes());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.repeatedValue.push(reader.string());
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.repeatedMessage.push(UInt64Value.decode(reader, reader.uint32()).value);
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.enumValue = reader.int32() as any;
          continue;
        case 12:
          if (tag === 96) {
            message.repeatedEnum.push(reader.int32() as any);

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnum.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.timestampValue = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.durationValue = Duration.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.fieldmaskValue = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.oneofBoolValue = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oneofStringValue = reader.string();
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.nestedOneofValueOne = Proto3Message.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.wrapperDoubleValue = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.wrapperFloatValue = FloatValue.decode(reader, reader.uint32()).value;
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.wrapperInt64Value = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.wrapperInt32Value = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.wrapperUInt64Value = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.wrapperUInt32Value = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.wrapperBoolValue = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.wrapperStringValue = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.wrapperBytesValue = BytesValue.decode(reader, reader.uint32()).value;
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          const entry26 = Proto3Message_MapValueEntry.decode(reader, reader.uint32());
          if (entry26.value !== undefined) {
            message.mapValue[entry26.key] = entry26.value;
          }
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          const entry27 = Proto3Message_MapValue2Entry.decode(reader, reader.uint32());
          if (entry27.value !== undefined) {
            message.mapValue2[entry27.key] = entry27.value;
          }
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          const entry28 = Proto3Message_MapValue3Entry.decode(reader, reader.uint32());
          if (entry28.value !== undefined) {
            message.mapValue3[entry28.key] = entry28.value;
          }
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          const entry29 = Proto3Message_MapValue4Entry.decode(reader, reader.uint32());
          if (entry29.value !== undefined) {
            message.mapValue4[entry29.key] = entry29.value;
          }
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          const entry30 = Proto3Message_MapValue5Entry.decode(reader, reader.uint32());
          if (entry30.value !== undefined) {
            message.mapValue5.set(entry30.key, entry30.value);
          }
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          const entry31 = Proto3Message_MapValue6Entry.decode(reader, reader.uint32());
          if (entry31.value !== undefined) {
            message.mapValue6[entry31.key] = entry31.value;
          }
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          const entry32 = Proto3Message_MapValue7Entry.decode(reader, reader.uint32());
          if (entry32.value !== undefined) {
            message.mapValue7[entry32.key] = entry32.value;
          }
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          const entry33 = Proto3Message_MapValue8Entry.decode(reader, reader.uint32());
          if (entry33.value !== undefined) {
            message.mapValue8[entry33.key] = entry33.value;
          }
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          const entry34 = Proto3Message_MapValue9Entry.decode(reader, reader.uint32());
          if (entry34.value !== undefined) {
            message.mapValue9.set(entry34.key, entry34.value);
          }
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          const entry35 = Proto3Message_MapValue10Entry.decode(reader, reader.uint32());
          if (entry35.value !== undefined) {
            message.mapValue10[entry35.key] = entry35.value;
          }
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          const entry37 = Proto3Message_MapValue12Entry.decode(reader, reader.uint32());
          if (entry37.value !== undefined) {
            message.mapValue12[entry37.key] = entry37.value;
          }
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          const entry39 = Proto3Message_MapValue14Entry.decode(reader, reader.uint32());
          if (entry39.value !== undefined) {
            message.mapValue14[entry39.key] = entry39.value;
          }
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          const entry40 = Proto3Message_MapValue15Entry.decode(reader, reader.uint32());
          if (entry40.value !== undefined) {
            message.mapValue15.set(entry40.key, entry40.value);
          }
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          const entry45 = Proto3Message_MapValue16Entry.decode(reader, reader.uint32());
          if (entry45.value !== undefined) {
            message.mapValue16[entry45.key] = entry45.value;
          }
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.structValueValue = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.structValue = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message {
    return {
      nested: isSet(object.nested) ? Proto3Message.fromJSON(object.nested) : undefined,
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : 0,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : 0,
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : Long.ZERO,
      int32Value: isSet(object.int32Value) ? globalThis.Number(object.int32Value) : 0,
      uint64Value: isSet(object.uint64Value) ? Long.fromValue(object.uint64Value) : Long.UZERO,
      uint32Value: isSet(object.uint32Value) ? globalThis.Number(object.uint32Value) : 0,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : false,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
      bytesValue: isSet(object.bytesValue) ? Buffer.from(bytesFromBase64(object.bytesValue)) : Buffer.alloc(0),
      repeatedValue: globalThis.Array.isArray(object?.repeatedValue)
        ? object.repeatedValue.map((e: any) => globalThis.String(e))
        : [],
      repeatedMessage: globalThis.Array.isArray(object?.repeatedMessage)
        ? object.repeatedMessage.map((e: any) => Long.fromValue(e))
        : [],
      enumValue: isSet(object.enumValue) ? enumValueFromJSON(object.enumValue) : 0,
      repeatedEnum: globalThis.Array.isArray(object?.repeatedEnum)
        ? object.repeatedEnum.map((e: any) => enumValueFromJSON(e))
        : [],
      timestampValue: isSet(object.timestampValue) ? fromJsonTimestamp(object.timestampValue) : undefined,
      durationValue: isSet(object.durationValue) ? Duration.fromJSON(object.durationValue) : undefined,
      fieldmaskValue: isSet(object.fieldmaskValue)
        ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldmaskValue))
        : undefined,
      oneofBoolValue: isSet(object.oneofBoolValue) ? globalThis.Boolean(object.oneofBoolValue) : undefined,
      oneofStringValue: isSet(object.oneofStringValue) ? globalThis.String(object.oneofStringValue) : undefined,
      nestedOneofValueOne: isSet(object.nestedOneofValueOne)
        ? Proto3Message.fromJSON(object.nestedOneofValueOne)
        : undefined,
      wrapperDoubleValue: isSet(object.wrapperDoubleValue) ? Number(object.wrapperDoubleValue) : undefined,
      wrapperFloatValue: isSet(object.wrapperFloatValue) ? Number(object.wrapperFloatValue) : undefined,
      wrapperInt64Value: isSet(object.wrapperInt64Value) ? Long.fromValue(object.wrapperInt64Value) : undefined,
      wrapperInt32Value: isSet(object.wrapperInt32Value) ? Number(object.wrapperInt32Value) : undefined,
      wrapperUInt64Value: isSet(object.wrapperUInt64Value) ? Long.fromValue(object.wrapperUInt64Value) : undefined,
      wrapperUInt32Value: isSet(object.wrapperUInt32Value) ? Number(object.wrapperUInt32Value) : undefined,
      wrapperBoolValue: isSet(object.wrapperBoolValue) ? Boolean(object.wrapperBoolValue) : undefined,
      wrapperStringValue: isSet(object.wrapperStringValue) ? String(object.wrapperStringValue) : undefined,
      wrapperBytesValue: isSet(object.wrapperBytesValue) ? new Buffer(object.wrapperBytesValue) : undefined,
      mapValue: isObject(object.mapValue)
        ? Object.entries(object.mapValue).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      mapValue2: isObject(object.mapValue2)
        ? Object.entries(object.mapValue2).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      mapValue3: isObject(object.mapValue3)
        ? Object.entries(object.mapValue3).reduce<{ [key: number]: string }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = String(value);
          return acc;
        }, {})
        : {},
      mapValue4: isObject(object.mapValue4)
        ? Object.entries(object.mapValue4).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
          acc[key] = Long.fromValue(value as Long | string);
          return acc;
        }, {})
        : {},
      mapValue5: isObject(object.mapValue5)
        ? Object.entries(object.mapValue5).reduce<Map<Long, string>>((acc, [key, value]) => {
          acc.set(Long.fromValue(key), String(value));
          return acc;
        }, new Map())
        : new Map(),
      mapValue6: isObject(object.mapValue6)
        ? Object.entries(object.mapValue6).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      mapValue7: isObject(object.mapValue7)
        ? Object.entries(object.mapValue7).reduce<{ [key: number]: string }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = String(value);
          return acc;
        }, {})
        : {},
      mapValue8: isObject(object.mapValue8)
        ? Object.entries(object.mapValue8).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
          acc[key] = Long.fromValue(value as Long | string);
          return acc;
        }, {})
        : {},
      mapValue9: isObject(object.mapValue9)
        ? Object.entries(object.mapValue9).reduce<Map<Long, string>>((acc, [key, value]) => {
          acc.set(Long.fromValue(key), String(value));
          return acc;
        }, new Map())
        : new Map(),
      mapValue10: isObject(object.mapValue10)
        ? Object.entries(object.mapValue10).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      mapValue12: isObject(object.mapValue12)
        ? Object.entries(object.mapValue12).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      mapValue14: isObject(object.mapValue14)
        ? Object.entries(object.mapValue14).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      mapValue15: isObject(object.mapValue15)
        ? Object.entries(object.mapValue15).reduce<Map<boolean, string>>((acc, [key, value]) => {
          acc.set(globalThis.Boolean(key), String(value));
          return acc;
        }, new Map())
        : new Map(),
      mapValue16: isObject(object.mapValue16)
        ? Object.entries(object.mapValue16).reduce<{ [key: string]: Long | undefined }>((acc, [key, value]) => {
          acc[key] = value as Long | undefined;
          return acc;
        }, {})
        : {},
      structValueValue: isSet(object?.structValueValue) ? object.structValueValue : undefined,
      structValue: isObject(object.structValue) ? object.structValue : undefined,
    };
  },

  toJSON(message: Proto3Message): unknown {
    const obj: any = {};
    if (message.nested !== undefined) {
      obj.nested = Proto3Message.toJSON(message.nested);
    }
    if (message.floatValue !== 0) {
      obj.floatValue = message.floatValue;
    }
    if (message.doubleValue !== 0) {
      obj.doubleValue = message.doubleValue;
    }
    if (!message.int64Value.equals(Long.ZERO)) {
      obj.int64Value = (message.int64Value || Long.ZERO).toString();
    }
    if (message.int32Value !== 0) {
      obj.int32Value = Math.round(message.int32Value);
    }
    if (!message.uint64Value.equals(Long.UZERO)) {
      obj.uint64Value = (message.uint64Value || Long.UZERO).toString();
    }
    if (message.uint32Value !== 0) {
      obj.uint32Value = Math.round(message.uint32Value);
    }
    if (message.boolValue !== false) {
      obj.boolValue = message.boolValue;
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.bytesValue.length !== 0) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.repeatedValue?.length) {
      obj.repeatedValue = message.repeatedValue;
    }
    if (message.repeatedMessage?.length) {
      obj.repeatedMessage = message.repeatedMessage;
    }
    if (message.enumValue !== 0) {
      obj.enumValue = enumValueToJSON(message.enumValue);
    }
    if (message.repeatedEnum?.length) {
      obj.repeatedEnum = message.repeatedEnum.map((e) => enumValueToJSON(e));
    }
    if (message.timestampValue !== undefined) {
      obj.timestampValue = message.timestampValue.toISOString();
    }
    if (message.durationValue !== undefined) {
      obj.durationValue = Duration.toJSON(message.durationValue);
    }
    if (message.fieldmaskValue !== undefined) {
      obj.fieldmaskValue = FieldMask.toJSON(FieldMask.wrap(message.fieldmaskValue));
    }
    if (message.oneofBoolValue !== undefined) {
      obj.oneofBoolValue = message.oneofBoolValue;
    }
    if (message.oneofStringValue !== undefined) {
      obj.oneofStringValue = message.oneofStringValue;
    }
    if (message.nestedOneofValueOne !== undefined) {
      obj.nestedOneofValueOne = Proto3Message.toJSON(message.nestedOneofValueOne);
    }
    if (message.wrapperDoubleValue !== undefined) {
      obj.wrapperDoubleValue = message.wrapperDoubleValue;
    }
    if (message.wrapperFloatValue !== undefined) {
      obj.wrapperFloatValue = message.wrapperFloatValue;
    }
    if (message.wrapperInt64Value !== undefined) {
      obj.wrapperInt64Value = message.wrapperInt64Value;
    }
    if (message.wrapperInt32Value !== undefined) {
      obj.wrapperInt32Value = message.wrapperInt32Value;
    }
    if (message.wrapperUInt64Value !== undefined) {
      obj.wrapperUInt64Value = message.wrapperUInt64Value;
    }
    if (message.wrapperUInt32Value !== undefined) {
      obj.wrapperUInt32Value = message.wrapperUInt32Value;
    }
    if (message.wrapperBoolValue !== undefined) {
      obj.wrapperBoolValue = message.wrapperBoolValue;
    }
    if (message.wrapperStringValue !== undefined) {
      obj.wrapperStringValue = message.wrapperStringValue;
    }
    if (message.wrapperBytesValue !== undefined) {
      obj.wrapperBytesValue = message.wrapperBytesValue;
    }
    if (message.mapValue) {
      const entries = Object.entries(message.mapValue);
      if (entries.length > 0) {
        obj.mapValue = {};
        entries.forEach(([k, v]) => {
          obj.mapValue[k] = v;
        });
      }
    }
    if (message.mapValue2) {
      const entries = Object.entries(message.mapValue2);
      if (entries.length > 0) {
        obj.mapValue2 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue2[k] = Math.round(v);
        });
      }
    }
    if (message.mapValue3) {
      const entries = Object.entries(message.mapValue3);
      if (entries.length > 0) {
        obj.mapValue3 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue3[k] = v;
        });
      }
    }
    if (message.mapValue4) {
      const entries = Object.entries(message.mapValue4);
      if (entries.length > 0) {
        obj.mapValue4 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue4[k] = v.toString();
        });
      }
    }
    if (message.mapValue5?.size) {
      obj.mapValue5 = {};
      message.mapValue5.forEach((v, k) => {
        obj.mapValue5[longToNumber(k)] = v;
      });
    }
    if (message.mapValue6) {
      const entries = Object.entries(message.mapValue6);
      if (entries.length > 0) {
        obj.mapValue6 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue6[k] = Math.round(v);
        });
      }
    }
    if (message.mapValue7) {
      const entries = Object.entries(message.mapValue7);
      if (entries.length > 0) {
        obj.mapValue7 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue7[k] = v;
        });
      }
    }
    if (message.mapValue8) {
      const entries = Object.entries(message.mapValue8);
      if (entries.length > 0) {
        obj.mapValue8 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue8[k] = v.toString();
        });
      }
    }
    if (message.mapValue9?.size) {
      obj.mapValue9 = {};
      message.mapValue9.forEach((v, k) => {
        obj.mapValue9[longToNumber(k)] = v;
      });
    }
    if (message.mapValue10) {
      const entries = Object.entries(message.mapValue10);
      if (entries.length > 0) {
        obj.mapValue10 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue10[k] = v;
        });
      }
    }
    if (message.mapValue12) {
      const entries = Object.entries(message.mapValue12);
      if (entries.length > 0) {
        obj.mapValue12 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue12[k] = v;
        });
      }
    }
    if (message.mapValue14) {
      const entries = Object.entries(message.mapValue14);
      if (entries.length > 0) {
        obj.mapValue14 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue14[k] = v;
        });
      }
    }
    if (message.mapValue15?.size) {
      obj.mapValue15 = {};
      message.mapValue15.forEach((v, k) => {
        obj.mapValue15[globalThis.String(k)] = v;
      });
    }
    if (message.mapValue16) {
      const entries = Object.entries(message.mapValue16);
      if (entries.length > 0) {
        obj.mapValue16 = {};
        entries.forEach(([k, v]) => {
          obj.mapValue16[k] = v;
        });
      }
    }
    if (message.structValueValue !== undefined) {
      obj.structValueValue = message.structValueValue;
    }
    if (message.structValue !== undefined) {
      obj.structValue = message.structValue;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message>): Proto3Message {
    return Proto3Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message>): Proto3Message {
    const message = createBaseProto3Message();
    message.nested = (object.nested !== undefined && object.nested !== null)
      ? Proto3Message.fromPartial(object.nested)
      : undefined;
    message.floatValue = object.floatValue ?? 0;
    message.doubleValue = object.doubleValue ?? 0;
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : Long.ZERO;
    message.int32Value = object.int32Value ?? 0;
    message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
      ? Long.fromValue(object.uint64Value)
      : Long.UZERO;
    message.uint32Value = object.uint32Value ?? 0;
    message.boolValue = object.boolValue ?? false;
    message.stringValue = object.stringValue ?? "";
    message.bytesValue = object.bytesValue ?? Buffer.alloc(0);
    message.repeatedValue = object.repeatedValue?.map((e) => e) || [];
    message.repeatedMessage = object.repeatedMessage?.map((e) => Long.fromValue(e)) || [];
    message.enumValue = object.enumValue ?? 0;
    message.repeatedEnum = object.repeatedEnum?.map((e) => e) || [];
    message.timestampValue = object.timestampValue ?? undefined;
    message.durationValue = (object.durationValue !== undefined && object.durationValue !== null)
      ? Duration.fromPartial(object.durationValue)
      : undefined;
    message.fieldmaskValue = object.fieldmaskValue ?? undefined;
    message.oneofBoolValue = object.oneofBoolValue ?? undefined;
    message.oneofStringValue = object.oneofStringValue ?? undefined;
    message.nestedOneofValueOne = (object.nestedOneofValueOne !== undefined && object.nestedOneofValueOne !== null)
      ? Proto3Message.fromPartial(object.nestedOneofValueOne)
      : undefined;
    message.wrapperDoubleValue = object.wrapperDoubleValue ?? undefined;
    message.wrapperFloatValue = object.wrapperFloatValue ?? undefined;
    message.wrapperInt64Value = (object.wrapperInt64Value !== undefined && object.wrapperInt64Value !== null)
      ? Long.fromValue(object.wrapperInt64Value)
      : undefined;
    message.wrapperInt32Value = object.wrapperInt32Value ?? undefined;
    message.wrapperUInt64Value = (object.wrapperUInt64Value !== undefined && object.wrapperUInt64Value !== null)
      ? Long.fromValue(object.wrapperUInt64Value)
      : undefined;
    message.wrapperUInt32Value = object.wrapperUInt32Value ?? undefined;
    message.wrapperBoolValue = object.wrapperBoolValue ?? undefined;
    message.wrapperStringValue = object.wrapperStringValue ?? undefined;
    message.wrapperBytesValue = object.wrapperBytesValue ?? undefined;
    message.mapValue = Object.entries(object.mapValue ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.mapValue2 = Object.entries(object.mapValue2 ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue3 = Object.entries(object.mapValue3 ?? {}).reduce<{ [key: number]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue4 = Object.entries(object.mapValue4 ?? {}).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Long.fromValue(value);
      }
      return acc;
    }, {});
    message.mapValue5 = (() => {
      const m = new Map();
      (object.mapValue5 as Map<Long, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    message.mapValue6 = Object.entries(object.mapValue6 ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue7 = Object.entries(object.mapValue7 ?? {}).reduce<{ [key: number]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue8 = Object.entries(object.mapValue8 ?? {}).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Long.fromValue(value);
      }
      return acc;
    }, {});
    message.mapValue9 = (() => {
      const m = new Map();
      (object.mapValue9 as Map<Long, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    message.mapValue10 = Object.entries(object.mapValue10 ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue12 = Object.entries(object.mapValue12 ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue14 = Object.entries(object.mapValue14 ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Boolean(value);
        }
        return acc;
      },
      {},
    );
    message.mapValue15 = (() => {
      const m = new Map();
      (object.mapValue15 as Map<boolean, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    message.mapValue16 = Object.entries(object.mapValue16 ?? {}).reduce<{ [key: string]: Long | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.structValueValue = object.structValueValue ?? undefined;
    message.structValue = object.structValue ?? undefined;
    return message;
  },
};

function createBaseProto3Message_MapValueEntry(): Proto3Message_MapValueEntry {
  return { key: "", value: "" };
}

export const Proto3Message_MapValueEntry: MessageFns<Proto3Message_MapValueEntry> = {
  encode(message: Proto3Message_MapValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Proto3Message_MapValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValueEntry>): Proto3Message_MapValueEntry {
    return Proto3Message_MapValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValueEntry>): Proto3Message_MapValueEntry {
    const message = createBaseProto3Message_MapValueEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProto3Message_MapValue2Entry(): Proto3Message_MapValue2Entry {
  return { key: "", value: 0 };
}

export const Proto3Message_MapValue2Entry: MessageFns<Proto3Message_MapValue2Entry> = {
  encode(message: Proto3Message_MapValue2Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue2Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue2Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue2Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Proto3Message_MapValue2Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue2Entry>): Proto3Message_MapValue2Entry {
    return Proto3Message_MapValue2Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue2Entry>): Proto3Message_MapValue2Entry {
    const message = createBaseProto3Message_MapValue2Entry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseProto3Message_MapValue3Entry(): Proto3Message_MapValue3Entry {
  return { key: 0, value: "" };
}

export const Proto3Message_MapValue3Entry: MessageFns<Proto3Message_MapValue3Entry> = {
  encode(message: Proto3Message_MapValue3Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue3Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue3Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue3Entry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Proto3Message_MapValue3Entry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue3Entry>): Proto3Message_MapValue3Entry {
    return Proto3Message_MapValue3Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue3Entry>): Proto3Message_MapValue3Entry {
    const message = createBaseProto3Message_MapValue3Entry();
    message.key = object.key ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProto3Message_MapValue4Entry(): Proto3Message_MapValue4Entry {
  return { key: "", value: Long.ZERO };
}

export const Proto3Message_MapValue4Entry: MessageFns<Proto3Message_MapValue4Entry> = {
  encode(message: Proto3Message_MapValue4Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (!message.value.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.value.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue4Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue4Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue4Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.ZERO,
    };
  },

  toJSON(message: Proto3Message_MapValue4Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (!message.value.equals(Long.ZERO)) {
      obj.value = (message.value || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue4Entry>): Proto3Message_MapValue4Entry {
    return Proto3Message_MapValue4Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue4Entry>): Proto3Message_MapValue4Entry {
    const message = createBaseProto3Message_MapValue4Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.ZERO;
    return message;
  },
};

function createBaseProto3Message_MapValue5Entry(): Proto3Message_MapValue5Entry {
  return { key: Long.ZERO, value: "" };
}

export const Proto3Message_MapValue5Entry: MessageFns<Proto3Message_MapValue5Entry> = {
  encode(message: Proto3Message_MapValue5Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.key.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.key.toString());
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue5Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue5Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue5Entry {
    return {
      key: isSet(object.key) ? Long.fromValue(object.key) : Long.ZERO,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Proto3Message_MapValue5Entry): unknown {
    const obj: any = {};
    if (!message.key.equals(Long.ZERO)) {
      obj.key = (message.key || Long.ZERO).toString();
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue5Entry>): Proto3Message_MapValue5Entry {
    return Proto3Message_MapValue5Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue5Entry>): Proto3Message_MapValue5Entry {
    const message = createBaseProto3Message_MapValue5Entry();
    message.key = (object.key !== undefined && object.key !== null) ? Long.fromValue(object.key) : Long.ZERO;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProto3Message_MapValue6Entry(): Proto3Message_MapValue6Entry {
  return { key: "", value: 0 };
}

export const Proto3Message_MapValue6Entry: MessageFns<Proto3Message_MapValue6Entry> = {
  encode(message: Proto3Message_MapValue6Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue6Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue6Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue6Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Proto3Message_MapValue6Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue6Entry>): Proto3Message_MapValue6Entry {
    return Proto3Message_MapValue6Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue6Entry>): Proto3Message_MapValue6Entry {
    const message = createBaseProto3Message_MapValue6Entry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseProto3Message_MapValue7Entry(): Proto3Message_MapValue7Entry {
  return { key: 0, value: "" };
}

export const Proto3Message_MapValue7Entry: MessageFns<Proto3Message_MapValue7Entry> = {
  encode(message: Proto3Message_MapValue7Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue7Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue7Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue7Entry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Proto3Message_MapValue7Entry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue7Entry>): Proto3Message_MapValue7Entry {
    return Proto3Message_MapValue7Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue7Entry>): Proto3Message_MapValue7Entry {
    const message = createBaseProto3Message_MapValue7Entry();
    message.key = object.key ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProto3Message_MapValue8Entry(): Proto3Message_MapValue8Entry {
  return { key: "", value: Long.UZERO };
}

export const Proto3Message_MapValue8Entry: MessageFns<Proto3Message_MapValue8Entry> = {
  encode(message: Proto3Message_MapValue8Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (!message.value.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.value.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue8Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue8Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Long.fromString(reader.uint64().toString(), true);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue8Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.UZERO,
    };
  },

  toJSON(message: Proto3Message_MapValue8Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (!message.value.equals(Long.UZERO)) {
      obj.value = (message.value || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue8Entry>): Proto3Message_MapValue8Entry {
    return Proto3Message_MapValue8Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue8Entry>): Proto3Message_MapValue8Entry {
    const message = createBaseProto3Message_MapValue8Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.UZERO;
    return message;
  },
};

function createBaseProto3Message_MapValue9Entry(): Proto3Message_MapValue9Entry {
  return { key: Long.UZERO, value: "" };
}

export const Proto3Message_MapValue9Entry: MessageFns<Proto3Message_MapValue9Entry> = {
  encode(message: Proto3Message_MapValue9Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.key.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.key.toString());
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue9Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue9Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue9Entry {
    return {
      key: isSet(object.key) ? Long.fromValue(object.key) : Long.UZERO,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Proto3Message_MapValue9Entry): unknown {
    const obj: any = {};
    if (!message.key.equals(Long.UZERO)) {
      obj.key = (message.key || Long.UZERO).toString();
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue9Entry>): Proto3Message_MapValue9Entry {
    return Proto3Message_MapValue9Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue9Entry>): Proto3Message_MapValue9Entry {
    const message = createBaseProto3Message_MapValue9Entry();
    message.key = (object.key !== undefined && object.key !== null) ? Long.fromValue(object.key) : Long.UZERO;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProto3Message_MapValue10Entry(): Proto3Message_MapValue10Entry {
  return { key: "", value: 0 };
}

export const Proto3Message_MapValue10Entry: MessageFns<Proto3Message_MapValue10Entry> = {
  encode(message: Proto3Message_MapValue10Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue10Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue10Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue10Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Proto3Message_MapValue10Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue10Entry>): Proto3Message_MapValue10Entry {
    return Proto3Message_MapValue10Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue10Entry>): Proto3Message_MapValue10Entry {
    const message = createBaseProto3Message_MapValue10Entry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseProto3Message_MapValue12Entry(): Proto3Message_MapValue12Entry {
  return { key: "", value: 0 };
}

export const Proto3Message_MapValue12Entry: MessageFns<Proto3Message_MapValue12Entry> = {
  encode(message: Proto3Message_MapValue12Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue12Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue12Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue12Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: Proto3Message_MapValue12Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue12Entry>): Proto3Message_MapValue12Entry {
    return Proto3Message_MapValue12Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue12Entry>): Proto3Message_MapValue12Entry {
    const message = createBaseProto3Message_MapValue12Entry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseProto3Message_MapValue14Entry(): Proto3Message_MapValue14Entry {
  return { key: "", value: false };
}

export const Proto3Message_MapValue14Entry: MessageFns<Proto3Message_MapValue14Entry> = {
  encode(message: Proto3Message_MapValue14Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue14Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue14Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue14Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: Proto3Message_MapValue14Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue14Entry>): Proto3Message_MapValue14Entry {
    return Proto3Message_MapValue14Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue14Entry>): Proto3Message_MapValue14Entry {
    const message = createBaseProto3Message_MapValue14Entry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseProto3Message_MapValue15Entry(): Proto3Message_MapValue15Entry {
  return { key: false, value: "" };
}

export const Proto3Message_MapValue15Entry: MessageFns<Proto3Message_MapValue15Entry> = {
  encode(message: Proto3Message_MapValue15Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== false) {
      writer.uint32(8).bool(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue15Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue15Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue15Entry {
    return {
      key: isSet(object.key) ? globalThis.Boolean(object.key) : false,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Proto3Message_MapValue15Entry): unknown {
    const obj: any = {};
    if (message.key !== false) {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue15Entry>): Proto3Message_MapValue15Entry {
    return Proto3Message_MapValue15Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue15Entry>): Proto3Message_MapValue15Entry {
    const message = createBaseProto3Message_MapValue15Entry();
    message.key = object.key ?? false;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseProto3Message_MapValue16Entry(): Proto3Message_MapValue16Entry {
  return { key: "", value: undefined };
}

export const Proto3Message_MapValue16Entry: MessageFns<Proto3Message_MapValue16Entry> = {
  encode(message: Proto3Message_MapValue16Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      UInt64Value.encode({ value: message.value! }, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto3Message_MapValue16Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto3Message_MapValue16Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto3Message_MapValue16Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : undefined,
    };
  },

  toJSON(message: Proto3Message_MapValue16Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto3Message_MapValue16Entry>): Proto3Message_MapValue16Entry {
    return Proto3Message_MapValue16Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto3Message_MapValue16Entry>): Proto3Message_MapValue16Entry {
    const message = createBaseProto3Message_MapValue16Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
