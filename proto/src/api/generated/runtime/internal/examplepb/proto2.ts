// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: runtime/internal/examplepb/proto2.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "grpc.gateway.runtime.internal.examplepb";

export interface Proto2Message {
  floatValue?: number | undefined;
  doubleValue?: number | undefined;
  int64Value?: Long | undefined;
  int32Value?: number | undefined;
  uint64Value?: Long | undefined;
  uint32Value?: number | undefined;
  boolValue?: boolean | undefined;
  stringValue?: string | undefined;
  bytesValue?: Buffer | undefined;
  repeatedValue: string[];
}

function createBaseProto2Message(): Proto2Message {
  return {
    floatValue: 0,
    doubleValue: 0,
    int64Value: Long.ZERO,
    int32Value: 0,
    uint64Value: Long.UZERO,
    uint32Value: 0,
    boolValue: false,
    stringValue: "",
    bytesValue: Buffer.alloc(0),
    repeatedValue: [],
  };
}

export const Proto2Message: MessageFns<Proto2Message> = {
  encode(message: Proto2Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.floatValue !== undefined && message.floatValue !== 0) {
      writer.uint32(341).float(message.floatValue);
    }
    if (message.doubleValue !== undefined && message.doubleValue !== 0) {
      writer.uint32(345).double(message.doubleValue);
    }
    if (message.int64Value !== undefined && !message.int64Value.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.int64Value.toString());
    }
    if (message.int32Value !== undefined && message.int32Value !== 0) {
      writer.uint32(32).int32(message.int32Value);
    }
    if (message.uint64Value !== undefined && !message.uint64Value.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.uint64Value.toString());
    }
    if (message.uint32Value !== undefined && message.uint32Value !== 0) {
      writer.uint32(48).uint32(message.uint32Value);
    }
    if (message.boolValue !== undefined && message.boolValue !== false) {
      writer.uint32(56).bool(message.boolValue);
    }
    if (message.stringValue !== undefined && message.stringValue !== "") {
      writer.uint32(66).string(message.stringValue);
    }
    if (message.bytesValue !== undefined && message.bytesValue.length !== 0) {
      writer.uint32(74).bytes(message.bytesValue);
    }
    for (const v of message.repeatedValue) {
      writer.uint32(82).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proto2Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProto2Message();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 42:
          if (tag !== 341) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        case 43:
          if (tag !== 345) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.int64Value = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.int32Value = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.uint64Value = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.uint32Value = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.bytesValue = Buffer.from(reader.bytes());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.repeatedValue.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proto2Message {
    return {
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : 0,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : 0,
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : Long.ZERO,
      int32Value: isSet(object.int32Value) ? globalThis.Number(object.int32Value) : 0,
      uint64Value: isSet(object.uint64Value) ? Long.fromValue(object.uint64Value) : Long.UZERO,
      uint32Value: isSet(object.uint32Value) ? globalThis.Number(object.uint32Value) : 0,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : false,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
      bytesValue: isSet(object.bytesValue) ? Buffer.from(bytesFromBase64(object.bytesValue)) : Buffer.alloc(0),
      repeatedValue: globalThis.Array.isArray(object?.repeatedValue)
        ? object.repeatedValue.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Proto2Message): unknown {
    const obj: any = {};
    if (message.floatValue !== undefined && message.floatValue !== 0) {
      obj.floatValue = message.floatValue;
    }
    if (message.doubleValue !== undefined && message.doubleValue !== 0) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.int64Value !== undefined && !message.int64Value.equals(Long.ZERO)) {
      obj.int64Value = (message.int64Value || Long.ZERO).toString();
    }
    if (message.int32Value !== undefined && message.int32Value !== 0) {
      obj.int32Value = Math.round(message.int32Value);
    }
    if (message.uint64Value !== undefined && !message.uint64Value.equals(Long.UZERO)) {
      obj.uint64Value = (message.uint64Value || Long.UZERO).toString();
    }
    if (message.uint32Value !== undefined && message.uint32Value !== 0) {
      obj.uint32Value = Math.round(message.uint32Value);
    }
    if (message.boolValue !== undefined && message.boolValue !== false) {
      obj.boolValue = message.boolValue;
    }
    if (message.stringValue !== undefined && message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.bytesValue !== undefined && message.bytesValue.length !== 0) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.repeatedValue?.length) {
      obj.repeatedValue = message.repeatedValue;
    }
    return obj;
  },

  create(base?: DeepPartial<Proto2Message>): Proto2Message {
    return Proto2Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proto2Message>): Proto2Message {
    const message = createBaseProto2Message();
    message.floatValue = object.floatValue ?? 0;
    message.doubleValue = object.doubleValue ?? 0;
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : Long.ZERO;
    message.int32Value = object.int32Value ?? 0;
    message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
      ? Long.fromValue(object.uint64Value)
      : Long.UZERO;
    message.uint32Value = object.uint32Value ?? 0;
    message.boolValue = object.boolValue ?? false;
    message.stringValue = object.stringValue ?? "";
    message.bytesValue = object.bytesValue ?? Buffer.alloc(0);
    message.repeatedValue = object.repeatedValue?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
