// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/echo_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../google/protobuf/field_mask.js";
import { Struct, Value } from "../../../../google/protobuf/struct.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/** Embedded represents a message embedded in SimpleMessage. */
export interface Embedded {
  progress?: Long | undefined;
  note?: string | undefined;
}

export interface NestedMessage {
  nId: string;
  val: string;
}

/** SimpleMessage represents a simple message sent to the Echo service. */
export interface SimpleMessage {
  /** Id represents the message identifier. */
  id: string;
  num: Long;
  lineNum?: Long | undefined;
  lang?: string | undefined;
  status: Embedded | undefined;
  en?: Long | undefined;
  no?: Embedded | undefined;
  resourceId: string;
  nId: NestedMessage | undefined;
}

/**
 * DynamicMessage represents a message which can have its structure
 * built dynamically using Struct and Values.
 */
export interface DynamicMessage {
  structField: { [key: string]: any } | undefined;
  valueField: any | undefined;
}

export interface DynamicMessageUpdate {
  body: DynamicMessage | undefined;
  updateMask: string[] | undefined;
}

function createBaseEmbedded(): Embedded {
  return { progress: undefined, note: undefined };
}

export const Embedded: MessageFns<Embedded> = {
  encode(message: Embedded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progress !== undefined) {
      writer.uint32(8).int64(message.progress.toString());
    }
    if (message.note !== undefined) {
      writer.uint32(18).string(message.note);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Embedded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbedded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.progress = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.note = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Embedded {
    return {
      progress: isSet(object.progress) ? Long.fromValue(object.progress) : undefined,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
    };
  },

  toJSON(message: Embedded): unknown {
    const obj: any = {};
    if (message.progress !== undefined) {
      obj.progress = (message.progress || Long.ZERO).toString();
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    return obj;
  },

  create(base?: DeepPartial<Embedded>): Embedded {
    return Embedded.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Embedded>): Embedded {
    const message = createBaseEmbedded();
    message.progress = (object.progress !== undefined && object.progress !== null)
      ? Long.fromValue(object.progress)
      : undefined;
    message.note = object.note ?? undefined;
    return message;
  },
};

function createBaseNestedMessage(): NestedMessage {
  return { nId: "", val: "" };
}

export const NestedMessage: MessageFns<NestedMessage> = {
  encode(message: NestedMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nId !== "") {
      writer.uint32(10).string(message.nId);
    }
    if (message.val !== "") {
      writer.uint32(18).string(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NestedMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNestedMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.val = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NestedMessage {
    return {
      nId: isSet(object.nId) ? globalThis.String(object.nId) : "",
      val: isSet(object.val) ? globalThis.String(object.val) : "",
    };
  },

  toJSON(message: NestedMessage): unknown {
    const obj: any = {};
    if (message.nId !== "") {
      obj.nId = message.nId;
    }
    if (message.val !== "") {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<NestedMessage>): NestedMessage {
    return NestedMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NestedMessage>): NestedMessage {
    const message = createBaseNestedMessage();
    message.nId = object.nId ?? "";
    message.val = object.val ?? "";
    return message;
  },
};

function createBaseSimpleMessage(): SimpleMessage {
  return {
    id: "",
    num: Long.ZERO,
    lineNum: undefined,
    lang: undefined,
    status: undefined,
    en: undefined,
    no: undefined,
    resourceId: "",
    nId: undefined,
  };
}

export const SimpleMessage: MessageFns<SimpleMessage> = {
  encode(message: SimpleMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (!message.num.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.num.toString());
    }
    if (message.lineNum !== undefined) {
      writer.uint32(24).int64(message.lineNum.toString());
    }
    if (message.lang !== undefined) {
      writer.uint32(34).string(message.lang);
    }
    if (message.status !== undefined) {
      Embedded.encode(message.status, writer.uint32(42).fork()).join();
    }
    if (message.en !== undefined) {
      writer.uint32(48).int64(message.en.toString());
    }
    if (message.no !== undefined) {
      Embedded.encode(message.no, writer.uint32(58).fork()).join();
    }
    if (message.resourceId !== "") {
      writer.uint32(66).string(message.resourceId);
    }
    if (message.nId !== undefined) {
      NestedMessage.encode(message.nId, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.num = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lineNum = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lang = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.status = Embedded.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.en = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.no = Embedded.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.nId = NestedMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      num: isSet(object.num) ? Long.fromValue(object.num) : Long.ZERO,
      lineNum: isSet(object.lineNum) ? Long.fromValue(object.lineNum) : undefined,
      lang: isSet(object.lang) ? globalThis.String(object.lang) : undefined,
      status: isSet(object.status) ? Embedded.fromJSON(object.status) : undefined,
      en: isSet(object.en) ? Long.fromValue(object.en) : undefined,
      no: isSet(object.no) ? Embedded.fromJSON(object.no) : undefined,
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      nId: isSet(object.nId) ? NestedMessage.fromJSON(object.nId) : undefined,
    };
  },

  toJSON(message: SimpleMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (!message.num.equals(Long.ZERO)) {
      obj.num = (message.num || Long.ZERO).toString();
    }
    if (message.lineNum !== undefined) {
      obj.lineNum = (message.lineNum || Long.ZERO).toString();
    }
    if (message.lang !== undefined) {
      obj.lang = message.lang;
    }
    if (message.status !== undefined) {
      obj.status = Embedded.toJSON(message.status);
    }
    if (message.en !== undefined) {
      obj.en = (message.en || Long.ZERO).toString();
    }
    if (message.no !== undefined) {
      obj.no = Embedded.toJSON(message.no);
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.nId !== undefined) {
      obj.nId = NestedMessage.toJSON(message.nId);
    }
    return obj;
  },

  create(base?: DeepPartial<SimpleMessage>): SimpleMessage {
    return SimpleMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimpleMessage>): SimpleMessage {
    const message = createBaseSimpleMessage();
    message.id = object.id ?? "";
    message.num = (object.num !== undefined && object.num !== null) ? Long.fromValue(object.num) : Long.ZERO;
    message.lineNum = (object.lineNum !== undefined && object.lineNum !== null)
      ? Long.fromValue(object.lineNum)
      : undefined;
    message.lang = object.lang ?? undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Embedded.fromPartial(object.status)
      : undefined;
    message.en = (object.en !== undefined && object.en !== null) ? Long.fromValue(object.en) : undefined;
    message.no = (object.no !== undefined && object.no !== null) ? Embedded.fromPartial(object.no) : undefined;
    message.resourceId = object.resourceId ?? "";
    message.nId = (object.nId !== undefined && object.nId !== null) ? NestedMessage.fromPartial(object.nId) : undefined;
    return message;
  },
};

function createBaseDynamicMessage(): DynamicMessage {
  return { structField: undefined, valueField: undefined };
}

export const DynamicMessage: MessageFns<DynamicMessage> = {
  encode(message: DynamicMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structField !== undefined) {
      Struct.encode(Struct.wrap(message.structField), writer.uint32(10).fork()).join();
    }
    if (message.valueField !== undefined) {
      Value.encode(Value.wrap(message.valueField), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.structField = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valueField = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicMessage {
    return {
      structField: isObject(object.structField) ? object.structField : undefined,
      valueField: isSet(object?.valueField) ? object.valueField : undefined,
    };
  },

  toJSON(message: DynamicMessage): unknown {
    const obj: any = {};
    if (message.structField !== undefined) {
      obj.structField = message.structField;
    }
    if (message.valueField !== undefined) {
      obj.valueField = message.valueField;
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicMessage>): DynamicMessage {
    return DynamicMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicMessage>): DynamicMessage {
    const message = createBaseDynamicMessage();
    message.structField = object.structField ?? undefined;
    message.valueField = object.valueField ?? undefined;
    return message;
  },
};

function createBaseDynamicMessageUpdate(): DynamicMessageUpdate {
  return { body: undefined, updateMask: undefined };
}

export const DynamicMessageUpdate: MessageFns<DynamicMessageUpdate> = {
  encode(message: DynamicMessageUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined) {
      DynamicMessage.encode(message.body, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicMessageUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicMessageUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.body = DynamicMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicMessageUpdate {
    return {
      body: isSet(object.body) ? DynamicMessage.fromJSON(object.body) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: DynamicMessageUpdate): unknown {
    const obj: any = {};
    if (message.body !== undefined) {
      obj.body = DynamicMessage.toJSON(message.body);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<DynamicMessageUpdate>): DynamicMessageUpdate {
    return DynamicMessageUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DynamicMessageUpdate>): DynamicMessageUpdate {
    const message = createBaseDynamicMessageUpdate();
    message.body = (object.body !== undefined && object.body !== null)
      ? DynamicMessage.fromPartial(object.body)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** Echo service responds to incoming echo requests. */
export type EchoServiceDefinition = typeof EchoServiceDefinition;
export const EchoServiceDefinition = {
  name: "EchoService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.EchoService",
  methods: {
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be
     * returned.
     */
    echo: {
      name: "Echo",
      requestType: SimpleMessage,
      requestStream: false,
      responseType: SimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              128,
              2,
              90,
              29,
              18,
              27,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              47,
              123,
              105,
              100,
              125,
              47,
              123,
              110,
              117,
              109,
              125,
              90,
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              47,
              123,
              105,
              100,
              125,
              47,
              123,
              110,
              117,
              109,
              125,
              47,
              123,
              108,
              97,
              110,
              103,
              125,
              90,
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              49,
              47,
              123,
              105,
              100,
              125,
              47,
              123,
              108,
              105,
              110,
              101,
              95,
              110,
              117,
              109,
              125,
              47,
              123,
              115,
              116,
              97,
              116,
              117,
              115,
              46,
              110,
              111,
              116,
              101,
              125,
              90,
              29,
              18,
              27,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              50,
              47,
              123,
              110,
              111,
              46,
              110,
              111,
              116,
              101,
              125,
              90,
              41,
              18,
              39,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              47,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              105,
              100,
              125,
              90,
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              47,
              110,
              101,
              115,
              116,
              101,
              100,
              47,
              123,
              110,
              95,
              105,
              100,
              46,
              110,
              95,
              105,
              100,
              125,
              34,
              21,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** EchoBody method receives a simple message and returns it. */
    echoBody: {
      name: "EchoBody",
      requestType: SimpleMessage,
      requestStream: false,
      responseType: SimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              90,
              32,
              58,
              2,
              110,
              111,
              26,
              26,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              98,
              111,
              100,
              121,
              47,
              123,
              105,
              100,
              125,
              34,
              21,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              98,
              111,
              100,
              121,
            ]),
          ],
        },
      },
    },
    /** EchoDelete method receives a simple message and returns it. */
    echoDelete: {
      name: "EchoDelete",
      requestType: SimpleMessage,
      requestStream: false,
      responseType: SimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              25,
              42,
              23,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** EchoPatch method receives a NonStandardUpdateRequest and returns it. */
    echoPatch: {
      name: "EchoPatch",
      requestType: DynamicMessageUpdate,
      requestStream: false,
      responseType: DynamicMessageUpdate,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              30,
              58,
              4,
              98,
              111,
              100,
              121,
              50,
              22,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              112,
              97,
              116,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * EchoUnauthorized method receives a simple message and returns it. It must
     * always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
     * of 401.
     */
    echoUnauthorized: {
      name: "EchoUnauthorized",
      requestType: SimpleMessage,
      requestStream: false,
      responseType: SimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EchoServiceImplementation<CallContextExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   *
   * The message posted as the id parameter will also be
   * returned.
   */
  echo(request: SimpleMessage, context: CallContext & CallContextExt): Promise<DeepPartial<SimpleMessage>>;
  /** EchoBody method receives a simple message and returns it. */
  echoBody(request: SimpleMessage, context: CallContext & CallContextExt): Promise<DeepPartial<SimpleMessage>>;
  /** EchoDelete method receives a simple message and returns it. */
  echoDelete(request: SimpleMessage, context: CallContext & CallContextExt): Promise<DeepPartial<SimpleMessage>>;
  /** EchoPatch method receives a NonStandardUpdateRequest and returns it. */
  echoPatch(
    request: DynamicMessageUpdate,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DynamicMessageUpdate>>;
  /**
   * EchoUnauthorized method receives a simple message and returns it. It must
   * always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
   * of 401.
   */
  echoUnauthorized(request: SimpleMessage, context: CallContext & CallContextExt): Promise<DeepPartial<SimpleMessage>>;
}

export interface EchoServiceClient<CallOptionsExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   *
   * The message posted as the id parameter will also be
   * returned.
   */
  echo(request: DeepPartial<SimpleMessage>, options?: CallOptions & CallOptionsExt): Promise<SimpleMessage>;
  /** EchoBody method receives a simple message and returns it. */
  echoBody(request: DeepPartial<SimpleMessage>, options?: CallOptions & CallOptionsExt): Promise<SimpleMessage>;
  /** EchoDelete method receives a simple message and returns it. */
  echoDelete(request: DeepPartial<SimpleMessage>, options?: CallOptions & CallOptionsExt): Promise<SimpleMessage>;
  /** EchoPatch method receives a NonStandardUpdateRequest and returns it. */
  echoPatch(
    request: DeepPartial<DynamicMessageUpdate>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DynamicMessageUpdate>;
  /**
   * EchoUnauthorized method receives a simple message and returns it. It must
   * always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
   * of 401.
   */
  echoUnauthorized(request: DeepPartial<SimpleMessage>, options?: CallOptions & CallOptionsExt): Promise<SimpleMessage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
