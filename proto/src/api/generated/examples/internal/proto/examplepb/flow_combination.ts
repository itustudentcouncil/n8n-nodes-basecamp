// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/flow_combination.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

export interface EmptyProto {
}

export interface NonEmptyProto {
  a: string;
  b: string;
  c: string;
}

export interface UnaryProto {
  str: string;
}

export interface NestedProto {
  a: UnaryProto | undefined;
  b: string;
  c: string;
}

export interface SingleNestedProto {
  a: UnaryProto | undefined;
}

function createBaseEmptyProto(): EmptyProto {
  return {};
}

export const EmptyProto: MessageFns<EmptyProto> = {
  encode(_: EmptyProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyProto {
    return {};
  },

  toJSON(_: EmptyProto): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EmptyProto>): EmptyProto {
    return EmptyProto.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EmptyProto>): EmptyProto {
    const message = createBaseEmptyProto();
    return message;
  },
};

function createBaseNonEmptyProto(): NonEmptyProto {
  return { a: "", b: "", c: "" };
}

export const NonEmptyProto: MessageFns<NonEmptyProto> = {
  encode(message: NonEmptyProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.a !== "") {
      writer.uint32(10).string(message.a);
    }
    if (message.b !== "") {
      writer.uint32(18).string(message.b);
    }
    if (message.c !== "") {
      writer.uint32(26).string(message.c);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonEmptyProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonEmptyProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.a = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.b = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.c = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonEmptyProto {
    return {
      a: isSet(object.a) ? globalThis.String(object.a) : "",
      b: isSet(object.b) ? globalThis.String(object.b) : "",
      c: isSet(object.c) ? globalThis.String(object.c) : "",
    };
  },

  toJSON(message: NonEmptyProto): unknown {
    const obj: any = {};
    if (message.a !== "") {
      obj.a = message.a;
    }
    if (message.b !== "") {
      obj.b = message.b;
    }
    if (message.c !== "") {
      obj.c = message.c;
    }
    return obj;
  },

  create(base?: DeepPartial<NonEmptyProto>): NonEmptyProto {
    return NonEmptyProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonEmptyProto>): NonEmptyProto {
    const message = createBaseNonEmptyProto();
    message.a = object.a ?? "";
    message.b = object.b ?? "";
    message.c = object.c ?? "";
    return message;
  },
};

function createBaseUnaryProto(): UnaryProto {
  return { str: "" };
}

export const UnaryProto: MessageFns<UnaryProto> = {
  encode(message: UnaryProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.str !== "") {
      writer.uint32(10).string(message.str);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnaryProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnaryProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.str = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnaryProto {
    return { str: isSet(object.str) ? globalThis.String(object.str) : "" };
  },

  toJSON(message: UnaryProto): unknown {
    const obj: any = {};
    if (message.str !== "") {
      obj.str = message.str;
    }
    return obj;
  },

  create(base?: DeepPartial<UnaryProto>): UnaryProto {
    return UnaryProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnaryProto>): UnaryProto {
    const message = createBaseUnaryProto();
    message.str = object.str ?? "";
    return message;
  },
};

function createBaseNestedProto(): NestedProto {
  return { a: undefined, b: "", c: "" };
}

export const NestedProto: MessageFns<NestedProto> = {
  encode(message: NestedProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.a !== undefined) {
      UnaryProto.encode(message.a, writer.uint32(10).fork()).join();
    }
    if (message.b !== "") {
      writer.uint32(18).string(message.b);
    }
    if (message.c !== "") {
      writer.uint32(26).string(message.c);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NestedProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNestedProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.a = UnaryProto.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.b = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.c = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NestedProto {
    return {
      a: isSet(object.a) ? UnaryProto.fromJSON(object.a) : undefined,
      b: isSet(object.b) ? globalThis.String(object.b) : "",
      c: isSet(object.c) ? globalThis.String(object.c) : "",
    };
  },

  toJSON(message: NestedProto): unknown {
    const obj: any = {};
    if (message.a !== undefined) {
      obj.a = UnaryProto.toJSON(message.a);
    }
    if (message.b !== "") {
      obj.b = message.b;
    }
    if (message.c !== "") {
      obj.c = message.c;
    }
    return obj;
  },

  create(base?: DeepPartial<NestedProto>): NestedProto {
    return NestedProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NestedProto>): NestedProto {
    const message = createBaseNestedProto();
    message.a = (object.a !== undefined && object.a !== null) ? UnaryProto.fromPartial(object.a) : undefined;
    message.b = object.b ?? "";
    message.c = object.c ?? "";
    return message;
  },
};

function createBaseSingleNestedProto(): SingleNestedProto {
  return { a: undefined };
}

export const SingleNestedProto: MessageFns<SingleNestedProto> = {
  encode(message: SingleNestedProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.a !== undefined) {
      UnaryProto.encode(message.a, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleNestedProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleNestedProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.a = UnaryProto.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleNestedProto {
    return { a: isSet(object.a) ? UnaryProto.fromJSON(object.a) : undefined };
  },

  toJSON(message: SingleNestedProto): unknown {
    const obj: any = {};
    if (message.a !== undefined) {
      obj.a = UnaryProto.toJSON(message.a);
    }
    return obj;
  },

  create(base?: DeepPartial<SingleNestedProto>): SingleNestedProto {
    return SingleNestedProto.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SingleNestedProto>): SingleNestedProto {
    const message = createBaseSingleNestedProto();
    message.a = (object.a !== undefined && object.a !== null) ? UnaryProto.fromPartial(object.a) : undefined;
    return message;
  },
};

export type FlowCombinationDefinition = typeof FlowCombinationDefinition;
export const FlowCombinationDefinition = {
  name: "FlowCombination",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.FlowCombination",
  methods: {
    rpcEmptyRpc: {
      name: "RpcEmptyRpc",
      requestType: EmptyProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([16, 34, 14, 47, 114, 112, 99, 47, 101, 109, 112, 116, 121, 47, 114, 112, 99])],
        },
      },
    },
    rpcEmptyStream: {
      name: "RpcEmptyStream",
      requestType: EmptyProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 34, 17, 47, 114, 112, 99, 47, 101, 109, 112, 116, 121, 47, 115, 116, 114, 101, 97, 109]),
          ],
        },
      },
    },
    streamEmptyRpc: {
      name: "StreamEmptyRpc",
      requestType: EmptyProto,
      requestStream: true,
      responseType: EmptyProto,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 34, 17, 47, 115, 116, 114, 101, 97, 109, 47, 101, 109, 112, 116, 121, 47, 114, 112, 99]),
          ],
        },
      },
    },
    streamEmptyStream: {
      name: "StreamEmptyStream",
      requestType: EmptyProto,
      requestStream: true,
      responseType: EmptyProto,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              22,
              34,
              20,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              101,
              109,
              112,
              116,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
            ]),
          ],
        },
      },
    },
    rpcBodyRpc: {
      name: "RpcBodyRpc",
      requestType: NonEmptyProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              186,
              1,
              58,
              1,
              42,
              90,
              27,
              34,
              25,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              123,
              98,
              125,
              47,
              123,
              99,
              125,
              47,
              114,
              112,
              99,
              90,
              16,
              34,
              14,
              47,
              114,
              112,
              99,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              114,
              112,
              99,
              90,
              31,
              58,
              1,
              99,
              34,
              26,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              123,
              98,
              125,
              47,
              114,
              112,
              99,
              90,
              24,
              58,
              1,
              99,
              34,
              19,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              114,
              112,
              99,
              90,
              33,
              58,
              1,
              99,
              34,
              28,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              114,
              112,
              99,
              90,
              25,
              34,
              23,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              114,
              112,
              99,
              34,
              13,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              114,
              112,
              99,
            ]),
          ],
        },
      },
    },
    rpcPathSingleNestedRpc: {
      name: "RpcPathSingleNestedRpc",
      requestType: SingleNestedProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              30,
              34,
              28,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              114,
              112,
              99,
            ]),
          ],
        },
      },
    },
    rpcPathNestedRpc: {
      name: "RpcPathNestedRpc",
      requestType: NestedProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              106,
              58,
              1,
              99,
              90,
              31,
              34,
              29,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              49,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              114,
              112,
              99,
              90,
              34,
              58,
              1,
              99,
              34,
              29,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              50,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              114,
              112,
              99,
              34,
              32,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              123,
              98,
              125,
              47,
              114,
              112,
              99,
            ]),
          ],
        },
      },
    },
    rpcBodyStream: {
      name: "RpcBodyStream",
      requestType: NonEmptyProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              207,
              1,
              58,
              1,
              42,
              90,
              30,
              34,
              28,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              123,
              98,
              125,
              47,
              123,
              99,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              90,
              19,
              34,
              17,
              47,
              114,
              112,
              99,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              90,
              34,
              58,
              1,
              99,
              34,
              29,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              123,
              98,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              90,
              27,
              58,
              1,
              99,
              34,
              22,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              90,
              36,
              58,
              1,
              99,
              34,
              31,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              90,
              28,
              34,
              26,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              47,
              123,
              97,
              125,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              34,
              16,
              47,
              114,
              112,
              99,
              47,
              98,
              111,
              100,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
            ]),
          ],
        },
      },
    },
    rpcPathSingleNestedStream: {
      name: "RpcPathSingleNestedStream",
      requestType: SingleNestedProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              33,
              34,
              31,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
            ]),
          ],
        },
      },
    },
    rpcPathNestedStream: {
      name: "RpcPathNestedStream",
      requestType: NestedProto,
      requestStream: false,
      responseType: EmptyProto,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              115,
              58,
              1,
              99,
              90,
              34,
              34,
              32,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              49,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              90,
              37,
              58,
              1,
              99,
              34,
              32,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              50,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              34,
              35,
              47,
              114,
              112,
              99,
              47,
              112,
              97,
              116,
              104,
              45,
              110,
              101,
              115,
              116,
              101,
              100,
              47,
              123,
              97,
              46,
              115,
              116,
              114,
              125,
              47,
              123,
              98,
              125,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FlowCombinationServiceImplementation<CallContextExt = {}> {
  rpcEmptyRpc(request: EmptyProto, context: CallContext & CallContextExt): Promise<DeepPartial<EmptyProto>>;
  rpcEmptyStream(
    request: EmptyProto,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<EmptyProto>>;
  streamEmptyRpc(
    request: AsyncIterable<EmptyProto>,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EmptyProto>>;
  streamEmptyStream(
    request: AsyncIterable<EmptyProto>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<EmptyProto>>;
  rpcBodyRpc(request: NonEmptyProto, context: CallContext & CallContextExt): Promise<DeepPartial<EmptyProto>>;
  rpcPathSingleNestedRpc(
    request: SingleNestedProto,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EmptyProto>>;
  rpcPathNestedRpc(request: NestedProto, context: CallContext & CallContextExt): Promise<DeepPartial<EmptyProto>>;
  rpcBodyStream(
    request: NonEmptyProto,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<EmptyProto>>;
  rpcPathSingleNestedStream(
    request: SingleNestedProto,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<EmptyProto>>;
  rpcPathNestedStream(
    request: NestedProto,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<EmptyProto>>;
}

export interface FlowCombinationClient<CallOptionsExt = {}> {
  rpcEmptyRpc(request: DeepPartial<EmptyProto>, options?: CallOptions & CallOptionsExt): Promise<EmptyProto>;
  rpcEmptyStream(request: DeepPartial<EmptyProto>, options?: CallOptions & CallOptionsExt): AsyncIterable<EmptyProto>;
  streamEmptyRpc(
    request: AsyncIterable<DeepPartial<EmptyProto>>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EmptyProto>;
  streamEmptyStream(
    request: AsyncIterable<DeepPartial<EmptyProto>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<EmptyProto>;
  rpcBodyRpc(request: DeepPartial<NonEmptyProto>, options?: CallOptions & CallOptionsExt): Promise<EmptyProto>;
  rpcPathSingleNestedRpc(
    request: DeepPartial<SingleNestedProto>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EmptyProto>;
  rpcPathNestedRpc(request: DeepPartial<NestedProto>, options?: CallOptions & CallOptionsExt): Promise<EmptyProto>;
  rpcBodyStream(request: DeepPartial<NonEmptyProto>, options?: CallOptions & CallOptionsExt): AsyncIterable<EmptyProto>;
  rpcPathSingleNestedStream(
    request: DeepPartial<SingleNestedProto>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<EmptyProto>;
  rpcPathNestedStream(
    request: DeepPartial<NestedProto>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<EmptyProto>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
