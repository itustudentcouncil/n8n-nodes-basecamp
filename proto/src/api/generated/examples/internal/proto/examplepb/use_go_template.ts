// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/use_go_template.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

export interface LoginRequest {
  /** The entered username */
  username: string;
  /** The entered password */
  password: string;
}

export interface LoginReply {
  message: string;
  /** Whether you have access or not */
  access: boolean;
}

export interface LogoutRequest {
  /** The time the logout was registered */
  timeoflogout: string;
  /**
   * This is the title
   *
   * This is the "Description" of field test
   * you can use as many newlines as you want
   *
   * it will still format the same in the table
   */
  test: number;
  /**
   * This is an array
   *
   * It displays that using [] infront of the type
   */
  stringarray: string[];
}

export interface LogoutReply {
  /**
   * Message that tells you whether your
   * logout was successful or not
   */
  message: string;
}

function createBaseLoginRequest(): LoginRequest {
  return { username: "", password: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<LoginRequest>): LoginRequest {
    return LoginRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginRequest>): LoginRequest {
    const message = createBaseLoginRequest();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseLoginReply(): LoginReply {
  return { message: "", access: false };
}

export const LoginReply: MessageFns<LoginReply> = {
  encode(message: LoginReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.access !== false) {
      writer.uint32(16).bool(message.access);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.access = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginReply {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      access: isSet(object.access) ? globalThis.Boolean(object.access) : false,
    };
  },

  toJSON(message: LoginReply): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.access !== false) {
      obj.access = message.access;
    }
    return obj;
  },

  create(base?: DeepPartial<LoginReply>): LoginReply {
    return LoginReply.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginReply>): LoginReply {
    const message = createBaseLoginReply();
    message.message = object.message ?? "";
    message.access = object.access ?? false;
    return message;
  },
};

function createBaseLogoutRequest(): LogoutRequest {
  return { timeoflogout: "", test: 0, stringarray: [] };
}

export const LogoutRequest: MessageFns<LogoutRequest> = {
  encode(message: LogoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeoflogout !== "") {
      writer.uint32(10).string(message.timeoflogout);
    }
    if (message.test !== 0) {
      writer.uint32(16).int32(message.test);
    }
    for (const v of message.stringarray) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeoflogout = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.test = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stringarray.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogoutRequest {
    return {
      timeoflogout: isSet(object.timeoflogout) ? globalThis.String(object.timeoflogout) : "",
      test: isSet(object.test) ? globalThis.Number(object.test) : 0,
      stringarray: globalThis.Array.isArray(object?.stringarray)
        ? object.stringarray.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: LogoutRequest): unknown {
    const obj: any = {};
    if (message.timeoflogout !== "") {
      obj.timeoflogout = message.timeoflogout;
    }
    if (message.test !== 0) {
      obj.test = Math.round(message.test);
    }
    if (message.stringarray?.length) {
      obj.stringarray = message.stringarray;
    }
    return obj;
  },

  create(base?: DeepPartial<LogoutRequest>): LogoutRequest {
    return LogoutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogoutRequest>): LogoutRequest {
    const message = createBaseLogoutRequest();
    message.timeoflogout = object.timeoflogout ?? "";
    message.test = object.test ?? 0;
    message.stringarray = object.stringarray?.map((e) => e) || [];
    return message;
  },
};

function createBaseLogoutReply(): LogoutReply {
  return { message: "" };
}

export const LogoutReply: MessageFns<LogoutReply> = {
  encode(message: LogoutReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogoutReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogoutReply {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: LogoutReply): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<LogoutReply>): LogoutReply {
    return LogoutReply.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogoutReply>): LogoutReply {
    const message = createBaseLogoutReply();
    message.message = object.message ?? "";
    return message;
  },
};

export type LoginServiceDefinition = typeof LoginServiceDefinition;
export const LoginServiceDefinition = {
  name: "LoginService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.LoginService",
  methods: {
    /**
     * Login
     *
     * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
     * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
     *
     * ## {{.RequestType.Name}}
     * | Field ID    | Name      | Type                                                       | Description                  |
     * | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
     * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
     *
     * ## {{.ResponseType.Name}}
     * | Field ID    | Name      | Type                                                       | Description                  |
     * | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
     * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
     */
    login: {
      name: "Login",
      requestType: LoginRequest,
      requestStream: false,
      responseType: LoginReply,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              108,
              111,
              103,
              105,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Logout
     *
     * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
     * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
     *
     * ## {{.RequestType.Name}}
     * | Field ID    | Name      | Type                                                       | Description                  |
     * | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
     * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
     *
     * ## {{.ResponseType.Name}}
     * | Field ID    | Name      | Type                                                       | Description                  |
     * | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
     * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
     */
    logout: {
      name: "Logout",
      requestType: LogoutRequest,
      requestStream: false,
      responseType: LogoutReply,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              23,
              58,
              1,
              42,
              34,
              18,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              108,
              111,
              103,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface LoginServiceImplementation<CallContextExt = {}> {
  /**
   * Login
   *
   * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
   * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
   *
   * ## {{.RequestType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   *
   * ## {{.ResponseType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   */
  login(request: LoginRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LoginReply>>;
  /**
   * Logout
   *
   * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
   * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
   *
   * ## {{.RequestType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   *
   * ## {{.ResponseType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   */
  logout(request: LogoutRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogoutReply>>;
}

export interface LoginServiceClient<CallOptionsExt = {}> {
  /**
   * Login
   *
   * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
   * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
   *
   * ## {{.RequestType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   *
   * ## {{.ResponseType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   */
  login(request: DeepPartial<LoginRequest>, options?: CallOptions & CallOptionsExt): Promise<LoginReply>;
  /**
   * Logout
   *
   * {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
   * It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
   *
   * ## {{.RequestType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   *
   * ## {{.ResponseType.Name}}
   * | Field ID    | Name      | Type                                                       | Description                  |
   * | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
   * | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
   */
  logout(request: DeepPartial<LogoutRequest>, options?: CallOptions & CallOptionsExt): Promise<LogoutReply>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
