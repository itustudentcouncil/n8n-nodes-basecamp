// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/wrappers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../google/protobuf/empty.js";
import {
  BoolValue,
  BytesValue,
  DoubleValue,
  FloatValue,
  Int32Value,
  Int64Value,
  StringValue,
  UInt32Value,
  UInt64Value,
} from "../../../../google/protobuf/wrappers.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

export interface Wrappers {
  stringValue: string | undefined;
  int32Value: number | undefined;
  int64Value: Long | undefined;
  floatValue: number | undefined;
  doubleValue: number | undefined;
  boolValue: boolean | undefined;
  uint32Value: number | undefined;
  uint64Value: Long | undefined;
  bytesValue: Buffer | undefined;
}

function createBaseWrappers(): Wrappers {
  return {
    stringValue: undefined,
    int32Value: undefined,
    int64Value: undefined,
    floatValue: undefined,
    doubleValue: undefined,
    boolValue: undefined,
    uint32Value: undefined,
    uint64Value: undefined,
    bytesValue: undefined,
  };
}

export const Wrappers: MessageFns<Wrappers> = {
  encode(message: Wrappers, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stringValue !== undefined) {
      StringValue.encode({ value: message.stringValue! }, writer.uint32(10).fork()).join();
    }
    if (message.int32Value !== undefined) {
      Int32Value.encode({ value: message.int32Value! }, writer.uint32(18).fork()).join();
    }
    if (message.int64Value !== undefined) {
      Int64Value.encode({ value: message.int64Value! }, writer.uint32(26).fork()).join();
    }
    if (message.floatValue !== undefined) {
      FloatValue.encode({ value: message.floatValue! }, writer.uint32(34).fork()).join();
    }
    if (message.doubleValue !== undefined) {
      DoubleValue.encode({ value: message.doubleValue! }, writer.uint32(42).fork()).join();
    }
    if (message.boolValue !== undefined) {
      BoolValue.encode({ value: message.boolValue! }, writer.uint32(50).fork()).join();
    }
    if (message.uint32Value !== undefined) {
      UInt32Value.encode({ value: message.uint32Value! }, writer.uint32(58).fork()).join();
    }
    if (message.uint64Value !== undefined) {
      UInt64Value.encode({ value: message.uint64Value! }, writer.uint32(66).fork()).join();
    }
    if (message.bytesValue !== undefined) {
      BytesValue.encode({ value: message.bytesValue! }, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Wrappers {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrappers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stringValue = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.int32Value = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.int64Value = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.floatValue = FloatValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.doubleValue = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.boolValue = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.uint32Value = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.uint64Value = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.bytesValue = BytesValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wrappers {
    return {
      stringValue: isSet(object.stringValue) ? String(object.stringValue) : undefined,
      int32Value: isSet(object.int32Value) ? Number(object.int32Value) : undefined,
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : undefined,
      floatValue: isSet(object.floatValue) ? Number(object.floatValue) : undefined,
      doubleValue: isSet(object.doubleValue) ? Number(object.doubleValue) : undefined,
      boolValue: isSet(object.boolValue) ? Boolean(object.boolValue) : undefined,
      uint32Value: isSet(object.uint32Value) ? Number(object.uint32Value) : undefined,
      uint64Value: isSet(object.uint64Value) ? Long.fromValue(object.uint64Value) : undefined,
      bytesValue: isSet(object.bytesValue) ? new Buffer(object.bytesValue) : undefined,
    };
  },

  toJSON(message: Wrappers): unknown {
    const obj: any = {};
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.int32Value !== undefined) {
      obj.int32Value = message.int32Value;
    }
    if (message.int64Value !== undefined) {
      obj.int64Value = message.int64Value;
    }
    if (message.floatValue !== undefined) {
      obj.floatValue = message.floatValue;
    }
    if (message.doubleValue !== undefined) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    if (message.uint32Value !== undefined) {
      obj.uint32Value = message.uint32Value;
    }
    if (message.uint64Value !== undefined) {
      obj.uint64Value = message.uint64Value;
    }
    if (message.bytesValue !== undefined) {
      obj.bytesValue = message.bytesValue;
    }
    return obj;
  },

  create(base?: DeepPartial<Wrappers>): Wrappers {
    return Wrappers.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Wrappers>): Wrappers {
    const message = createBaseWrappers();
    message.stringValue = object.stringValue ?? undefined;
    message.int32Value = object.int32Value ?? undefined;
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : undefined;
    message.floatValue = object.floatValue ?? undefined;
    message.doubleValue = object.doubleValue ?? undefined;
    message.boolValue = object.boolValue ?? undefined;
    message.uint32Value = object.uint32Value ?? undefined;
    message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
      ? Long.fromValue(object.uint64Value)
      : undefined;
    message.bytesValue = object.bytesValue ?? undefined;
    return message;
  },
};

export type WrappersServiceDefinition = typeof WrappersServiceDefinition;
export const WrappersServiceDefinition = {
  name: "WrappersService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.WrappersService",
  methods: {
    create: {
      name: "Create",
      requestType: Wrappers,
      requestStream: false,
      responseType: Wrappers,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              119,
              114,
              97,
              112,
              112,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    createStringValue: {
      name: "CreateStringValue",
      requestType: StringValue,
      requestStream: false,
      responseType: StringValue,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 58, 1, 42, 34, 14, 47, 118, 49, 47, 116, 101, 115, 116, 83, 116, 114, 105, 110, 103]),
          ],
        },
      },
    },
    createInt32Value: {
      name: "CreateInt32Value",
      requestType: Int32Value,
      requestStream: false,
      responseType: Int32Value,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 118, 49, 47, 116, 101, 115, 116, 73, 110, 116, 51, 50])],
        },
      },
    },
    createInt64Value: {
      name: "CreateInt64Value",
      requestType: Int64Value,
      requestStream: false,
      responseType: Int64Value,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 118, 49, 47, 116, 101, 115, 116, 73, 110, 116, 54, 52])],
        },
      },
    },
    createFloatValue: {
      name: "CreateFloatValue",
      requestType: FloatValue,
      requestStream: false,
      responseType: FloatValue,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 118, 49, 47, 116, 101, 115, 116, 70, 108, 111, 97, 116])],
        },
      },
    },
    createDoubleValue: {
      name: "CreateDoubleValue",
      requestType: DoubleValue,
      requestStream: false,
      responseType: DoubleValue,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 58, 1, 42, 34, 14, 47, 118, 49, 47, 116, 101, 115, 116, 68, 111, 117, 98, 108, 101]),
          ],
        },
      },
    },
    createBoolValue: {
      name: "CreateBoolValue",
      requestType: BoolValue,
      requestStream: false,
      responseType: BoolValue,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 118, 49, 47, 116, 101, 115, 116, 66, 111, 111, 108])],
        },
      },
    },
    createUInt32Value: {
      name: "CreateUInt32Value",
      requestType: UInt32Value,
      requestStream: false,
      responseType: UInt32Value,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 58, 1, 42, 34, 14, 47, 118, 49, 47, 116, 101, 115, 116, 85, 105, 110, 116, 51, 50]),
          ],
        },
      },
    },
    createUInt64Value: {
      name: "CreateUInt64Value",
      requestType: UInt64Value,
      requestStream: false,
      responseType: UInt64Value,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 58, 1, 42, 34, 14, 47, 118, 49, 47, 116, 101, 115, 116, 85, 105, 110, 116, 54, 52]),
          ],
        },
      },
    },
    createBytesValue: {
      name: "CreateBytesValue",
      requestType: BytesValue,
      requestStream: false,
      responseType: BytesValue,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([18, 58, 1, 42, 34, 13, 47, 118, 49, 47, 116, 101, 115, 116, 66, 121, 116, 101, 115]),
          ],
        },
      },
    },
    createEmpty: {
      name: "CreateEmpty",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([18, 58, 1, 42, 34, 13, 47, 118, 49, 47, 116, 101, 115, 116, 69, 109, 112, 116, 121]),
          ],
        },
      },
    },
  },
} as const;

export interface WrappersServiceImplementation<CallContextExt = {}> {
  create(request: Wrappers, context: CallContext & CallContextExt): Promise<DeepPartial<Wrappers>>;
  createStringValue(request: StringValue, context: CallContext & CallContextExt): Promise<DeepPartial<StringValue>>;
  createInt32Value(request: Int32Value, context: CallContext & CallContextExt): Promise<DeepPartial<Int32Value>>;
  createInt64Value(request: Int64Value, context: CallContext & CallContextExt): Promise<DeepPartial<Int64Value>>;
  createFloatValue(request: FloatValue, context: CallContext & CallContextExt): Promise<DeepPartial<FloatValue>>;
  createDoubleValue(request: DoubleValue, context: CallContext & CallContextExt): Promise<DeepPartial<DoubleValue>>;
  createBoolValue(request: BoolValue, context: CallContext & CallContextExt): Promise<DeepPartial<BoolValue>>;
  createUInt32Value(request: UInt32Value, context: CallContext & CallContextExt): Promise<DeepPartial<UInt32Value>>;
  createUInt64Value(request: UInt64Value, context: CallContext & CallContextExt): Promise<DeepPartial<UInt64Value>>;
  createBytesValue(request: BytesValue, context: CallContext & CallContextExt): Promise<DeepPartial<BytesValue>>;
  createEmpty(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface WrappersServiceClient<CallOptionsExt = {}> {
  create(request: DeepPartial<Wrappers>, options?: CallOptions & CallOptionsExt): Promise<Wrappers>;
  createStringValue(request: DeepPartial<StringValue>, options?: CallOptions & CallOptionsExt): Promise<StringValue>;
  createInt32Value(request: DeepPartial<Int32Value>, options?: CallOptions & CallOptionsExt): Promise<Int32Value>;
  createInt64Value(request: DeepPartial<Int64Value>, options?: CallOptions & CallOptionsExt): Promise<Int64Value>;
  createFloatValue(request: DeepPartial<FloatValue>, options?: CallOptions & CallOptionsExt): Promise<FloatValue>;
  createDoubleValue(request: DeepPartial<DoubleValue>, options?: CallOptions & CallOptionsExt): Promise<DoubleValue>;
  createBoolValue(request: DeepPartial<BoolValue>, options?: CallOptions & CallOptionsExt): Promise<BoolValue>;
  createUInt32Value(request: DeepPartial<UInt32Value>, options?: CallOptions & CallOptionsExt): Promise<UInt32Value>;
  createUInt64Value(request: DeepPartial<UInt64Value>, options?: CallOptions & CallOptionsExt): Promise<UInt64Value>;
  createBytesValue(request: DeepPartial<BytesValue>, options?: CallOptions & CallOptionsExt): Promise<BytesValue>;
  createEmpty(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
