// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/visibility_rule_echo_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/**
 * EnumInPreviewMethod doesn't define its own visibility restrictions,
 * but is only included in a method marked as "PREVIEW", so it will only
 * appear if `visibility_restriction_selectors` include "PREVIEW".
 */
export enum VisibilityRuleEnumInPreviewMethod {
  VISIBILITY_RULE_ENUM_IN_PREVIEW_METHOD_UNSPECIFIED = 0,
  UNRECOGNIZED = -1,
}

export function visibilityRuleEnumInPreviewMethodFromJSON(object: any): VisibilityRuleEnumInPreviewMethod {
  switch (object) {
    case 0:
    case "VISIBILITY_RULE_ENUM_IN_PREVIEW_METHOD_UNSPECIFIED":
      return VisibilityRuleEnumInPreviewMethod.VISIBILITY_RULE_ENUM_IN_PREVIEW_METHOD_UNSPECIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VisibilityRuleEnumInPreviewMethod.UNRECOGNIZED;
  }
}

export function visibilityRuleEnumInPreviewMethodToJSON(object: VisibilityRuleEnumInPreviewMethod): string {
  switch (object) {
    case VisibilityRuleEnumInPreviewMethod.VISIBILITY_RULE_ENUM_IN_PREVIEW_METHOD_UNSPECIFIED:
      return "VISIBILITY_RULE_ENUM_IN_PREVIEW_METHOD_UNSPECIFIED";
    case VisibilityRuleEnumInPreviewMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Embedded represents a message embedded in SimpleMessage. */
export interface VisibilityRuleEmbedded {
  progress?: Long | undefined;
  note?: string | undefined;
  internalField?: string | undefined;
  previewField?: string | undefined;
}

/** SimpleMessage represents a simple message sent to the Echo service. */
export interface VisibilityRuleSimpleMessage {
  /** Id represents the message identifier. */
  id: string;
  num: Long;
  lineNum?: Long | undefined;
  lang?: string | undefined;
  status: VisibilityRuleEmbedded | undefined;
  en?: Long | undefined;
  no?: VisibilityRuleEmbedded | undefined;
  internalField: string;
  previewField: string;
  anEnum: VisibilityRuleSimpleMessage_VisibilityEnum;
}

export enum VisibilityRuleSimpleMessage_VisibilityEnum {
  VISIBILITY_ENUM_UNSPECIFIED = 0,
  VISIBILITY_ENUM_VISIBLE = 1,
  VISIBILITY_ENUM_INTERNAL = 2,
  VISIBILITY_ENUM_PREVIEW = 3,
  UNRECOGNIZED = -1,
}

export function visibilityRuleSimpleMessage_VisibilityEnumFromJSON(
  object: any,
): VisibilityRuleSimpleMessage_VisibilityEnum {
  switch (object) {
    case 0:
    case "VISIBILITY_ENUM_UNSPECIFIED":
      return VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_UNSPECIFIED;
    case 1:
    case "VISIBILITY_ENUM_VISIBLE":
      return VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_VISIBLE;
    case 2:
    case "VISIBILITY_ENUM_INTERNAL":
      return VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_INTERNAL;
    case 3:
    case "VISIBILITY_ENUM_PREVIEW":
      return VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_PREVIEW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VisibilityRuleSimpleMessage_VisibilityEnum.UNRECOGNIZED;
  }
}

export function visibilityRuleSimpleMessage_VisibilityEnumToJSON(
  object: VisibilityRuleSimpleMessage_VisibilityEnum,
): string {
  switch (object) {
    case VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_UNSPECIFIED:
      return "VISIBILITY_ENUM_UNSPECIFIED";
    case VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_VISIBLE:
      return "VISIBILITY_ENUM_VISIBLE";
    case VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_INTERNAL:
      return "VISIBILITY_ENUM_INTERNAL";
    case VisibilityRuleSimpleMessage_VisibilityEnum.VISIBILITY_ENUM_PREVIEW:
      return "VISIBILITY_ENUM_PREVIEW";
    case VisibilityRuleSimpleMessage_VisibilityEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * MessageInPreviewMethod doesn't define its own visibility restrictions,
 * but is only included in a method marked as "PREVIEW", so it will only
 * appear if `visibility_restriction_selectors` include "PREVIEW".
 */
export interface VisibilityRuleMessageInPreviewMethod {
  id: string;
  subMessage: VisibilityRuleSubMessageInPreviewMethod | undefined;
  enum: VisibilityRuleEnumInPreviewMethod;
}

/**
 * SubMessageInPreviewMethod doesn't define its own visibility restrictions,
 * but is only included in a method marked as "PREVIEW", so it will only
 * appear if `visibility_restriction_selectors` include "PREVIEW".
 */
export interface VisibilityRuleSubMessageInPreviewMethod {
  id: string;
}

function createBaseVisibilityRuleEmbedded(): VisibilityRuleEmbedded {
  return { progress: undefined, note: undefined, internalField: undefined, previewField: undefined };
}

export const VisibilityRuleEmbedded: MessageFns<VisibilityRuleEmbedded> = {
  encode(message: VisibilityRuleEmbedded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progress !== undefined) {
      writer.uint32(8).int64(message.progress.toString());
    }
    if (message.note !== undefined) {
      writer.uint32(18).string(message.note);
    }
    if (message.internalField !== undefined) {
      writer.uint32(26).string(message.internalField);
    }
    if (message.previewField !== undefined) {
      writer.uint32(34).string(message.previewField);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisibilityRuleEmbedded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisibilityRuleEmbedded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.progress = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.note = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.internalField = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.previewField = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisibilityRuleEmbedded {
    return {
      progress: isSet(object.progress) ? Long.fromValue(object.progress) : undefined,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
      internalField: isSet(object.internalField) ? globalThis.String(object.internalField) : undefined,
      previewField: isSet(object.previewField) ? globalThis.String(object.previewField) : undefined,
    };
  },

  toJSON(message: VisibilityRuleEmbedded): unknown {
    const obj: any = {};
    if (message.progress !== undefined) {
      obj.progress = (message.progress || Long.ZERO).toString();
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    if (message.internalField !== undefined) {
      obj.internalField = message.internalField;
    }
    if (message.previewField !== undefined) {
      obj.previewField = message.previewField;
    }
    return obj;
  },

  create(base?: DeepPartial<VisibilityRuleEmbedded>): VisibilityRuleEmbedded {
    return VisibilityRuleEmbedded.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VisibilityRuleEmbedded>): VisibilityRuleEmbedded {
    const message = createBaseVisibilityRuleEmbedded();
    message.progress = (object.progress !== undefined && object.progress !== null)
      ? Long.fromValue(object.progress)
      : undefined;
    message.note = object.note ?? undefined;
    message.internalField = object.internalField ?? undefined;
    message.previewField = object.previewField ?? undefined;
    return message;
  },
};

function createBaseVisibilityRuleSimpleMessage(): VisibilityRuleSimpleMessage {
  return {
    id: "",
    num: Long.ZERO,
    lineNum: undefined,
    lang: undefined,
    status: undefined,
    en: undefined,
    no: undefined,
    internalField: "",
    previewField: "",
    anEnum: 0,
  };
}

export const VisibilityRuleSimpleMessage: MessageFns<VisibilityRuleSimpleMessage> = {
  encode(message: VisibilityRuleSimpleMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (!message.num.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.num.toString());
    }
    if (message.lineNum !== undefined) {
      writer.uint32(24).int64(message.lineNum.toString());
    }
    if (message.lang !== undefined) {
      writer.uint32(34).string(message.lang);
    }
    if (message.status !== undefined) {
      VisibilityRuleEmbedded.encode(message.status, writer.uint32(42).fork()).join();
    }
    if (message.en !== undefined) {
      writer.uint32(48).int64(message.en.toString());
    }
    if (message.no !== undefined) {
      VisibilityRuleEmbedded.encode(message.no, writer.uint32(58).fork()).join();
    }
    if (message.internalField !== "") {
      writer.uint32(66).string(message.internalField);
    }
    if (message.previewField !== "") {
      writer.uint32(74).string(message.previewField);
    }
    if (message.anEnum !== 0) {
      writer.uint32(80).int32(message.anEnum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisibilityRuleSimpleMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisibilityRuleSimpleMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.num = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lineNum = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lang = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.status = VisibilityRuleEmbedded.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.en = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.no = VisibilityRuleEmbedded.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.internalField = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.previewField = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.anEnum = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisibilityRuleSimpleMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      num: isSet(object.num) ? Long.fromValue(object.num) : Long.ZERO,
      lineNum: isSet(object.lineNum) ? Long.fromValue(object.lineNum) : undefined,
      lang: isSet(object.lang) ? globalThis.String(object.lang) : undefined,
      status: isSet(object.status) ? VisibilityRuleEmbedded.fromJSON(object.status) : undefined,
      en: isSet(object.en) ? Long.fromValue(object.en) : undefined,
      no: isSet(object.no) ? VisibilityRuleEmbedded.fromJSON(object.no) : undefined,
      internalField: isSet(object.internalField) ? globalThis.String(object.internalField) : "",
      previewField: isSet(object.previewField) ? globalThis.String(object.previewField) : "",
      anEnum: isSet(object.anEnum) ? visibilityRuleSimpleMessage_VisibilityEnumFromJSON(object.anEnum) : 0,
    };
  },

  toJSON(message: VisibilityRuleSimpleMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (!message.num.equals(Long.ZERO)) {
      obj.num = (message.num || Long.ZERO).toString();
    }
    if (message.lineNum !== undefined) {
      obj.lineNum = (message.lineNum || Long.ZERO).toString();
    }
    if (message.lang !== undefined) {
      obj.lang = message.lang;
    }
    if (message.status !== undefined) {
      obj.status = VisibilityRuleEmbedded.toJSON(message.status);
    }
    if (message.en !== undefined) {
      obj.en = (message.en || Long.ZERO).toString();
    }
    if (message.no !== undefined) {
      obj.no = VisibilityRuleEmbedded.toJSON(message.no);
    }
    if (message.internalField !== "") {
      obj.internalField = message.internalField;
    }
    if (message.previewField !== "") {
      obj.previewField = message.previewField;
    }
    if (message.anEnum !== 0) {
      obj.anEnum = visibilityRuleSimpleMessage_VisibilityEnumToJSON(message.anEnum);
    }
    return obj;
  },

  create(base?: DeepPartial<VisibilityRuleSimpleMessage>): VisibilityRuleSimpleMessage {
    return VisibilityRuleSimpleMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VisibilityRuleSimpleMessage>): VisibilityRuleSimpleMessage {
    const message = createBaseVisibilityRuleSimpleMessage();
    message.id = object.id ?? "";
    message.num = (object.num !== undefined && object.num !== null) ? Long.fromValue(object.num) : Long.ZERO;
    message.lineNum = (object.lineNum !== undefined && object.lineNum !== null)
      ? Long.fromValue(object.lineNum)
      : undefined;
    message.lang = object.lang ?? undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? VisibilityRuleEmbedded.fromPartial(object.status)
      : undefined;
    message.en = (object.en !== undefined && object.en !== null) ? Long.fromValue(object.en) : undefined;
    message.no = (object.no !== undefined && object.no !== null)
      ? VisibilityRuleEmbedded.fromPartial(object.no)
      : undefined;
    message.internalField = object.internalField ?? "";
    message.previewField = object.previewField ?? "";
    message.anEnum = object.anEnum ?? 0;
    return message;
  },
};

function createBaseVisibilityRuleMessageInPreviewMethod(): VisibilityRuleMessageInPreviewMethod {
  return { id: "", subMessage: undefined, enum: 0 };
}

export const VisibilityRuleMessageInPreviewMethod: MessageFns<VisibilityRuleMessageInPreviewMethod> = {
  encode(message: VisibilityRuleMessageInPreviewMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.subMessage !== undefined) {
      VisibilityRuleSubMessageInPreviewMethod.encode(message.subMessage, writer.uint32(18).fork()).join();
    }
    if (message.enum !== 0) {
      writer.uint32(24).int32(message.enum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisibilityRuleMessageInPreviewMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisibilityRuleMessageInPreviewMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subMessage = VisibilityRuleSubMessageInPreviewMethod.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enum = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisibilityRuleMessageInPreviewMethod {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      subMessage: isSet(object.subMessage)
        ? VisibilityRuleSubMessageInPreviewMethod.fromJSON(object.subMessage)
        : undefined,
      enum: isSet(object.enum) ? visibilityRuleEnumInPreviewMethodFromJSON(object.enum) : 0,
    };
  },

  toJSON(message: VisibilityRuleMessageInPreviewMethod): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.subMessage !== undefined) {
      obj.subMessage = VisibilityRuleSubMessageInPreviewMethod.toJSON(message.subMessage);
    }
    if (message.enum !== 0) {
      obj.enum = visibilityRuleEnumInPreviewMethodToJSON(message.enum);
    }
    return obj;
  },

  create(base?: DeepPartial<VisibilityRuleMessageInPreviewMethod>): VisibilityRuleMessageInPreviewMethod {
    return VisibilityRuleMessageInPreviewMethod.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VisibilityRuleMessageInPreviewMethod>): VisibilityRuleMessageInPreviewMethod {
    const message = createBaseVisibilityRuleMessageInPreviewMethod();
    message.id = object.id ?? "";
    message.subMessage = (object.subMessage !== undefined && object.subMessage !== null)
      ? VisibilityRuleSubMessageInPreviewMethod.fromPartial(object.subMessage)
      : undefined;
    message.enum = object.enum ?? 0;
    return message;
  },
};

function createBaseVisibilityRuleSubMessageInPreviewMethod(): VisibilityRuleSubMessageInPreviewMethod {
  return { id: "" };
}

export const VisibilityRuleSubMessageInPreviewMethod: MessageFns<VisibilityRuleSubMessageInPreviewMethod> = {
  encode(message: VisibilityRuleSubMessageInPreviewMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisibilityRuleSubMessageInPreviewMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisibilityRuleSubMessageInPreviewMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisibilityRuleSubMessageInPreviewMethod {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: VisibilityRuleSubMessageInPreviewMethod): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<VisibilityRuleSubMessageInPreviewMethod>): VisibilityRuleSubMessageInPreviewMethod {
    return VisibilityRuleSubMessageInPreviewMethod.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VisibilityRuleSubMessageInPreviewMethod>): VisibilityRuleSubMessageInPreviewMethod {
    const message = createBaseVisibilityRuleSubMessageInPreviewMethod();
    message.id = object.id ?? "";
    return message;
  },
};

/**
 * VisibilityRuleEchoService service responds to incoming echo requests.
 * Different services will be available in the swagger documentation depending
 * based on `google.api.VisibilityRule`s and the set `visibility_restriction_selectors`
 * flag when calling protoc-gen-openapiv2.
 */
export type VisibilityRuleEchoServiceDefinition = typeof VisibilityRuleEchoServiceDefinition;
export const VisibilityRuleEchoServiceDefinition = {
  name: "VisibilityRuleEchoService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleEchoService",
  methods: {
    /**
     * Echo method receives a simple message and returns it.
     * It should always be visible in the open API output.
     */
    echo: {
      name: "Echo",
      requestType: VisibilityRuleSimpleMessage,
      requestStream: false,
      responseType: VisibilityRuleSimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              23,
              34,
              21,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * EchoInternal is an internal API that should only be visible in the OpenAPI spec
     * if `visibility_restriction_selectors` includes "INTERNAL".
     */
    echoInternal: {
      name: "EchoInternal",
      requestType: VisibilityRuleSimpleMessage,
      requestStream: false,
      responseType: VisibilityRuleSimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365818: [Buffer.from([10, 18, 8, 73, 78, 84, 69, 82, 78, 65, 76])],
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * EchoPreview is a preview API that should only be visible in the OpenAPI spec
     * if `visibility_restriction_selectors` includes "PREVIEW".
     */
    echoPreview: {
      name: "EchoPreview",
      requestType: VisibilityRuleSimpleMessage,
      requestStream: false,
      responseType: VisibilityRuleMessageInPreviewMethod,
      responseStream: false,
      options: {
        _unknownFields: {
          578365818: [Buffer.from([9, 18, 7, 80, 82, 69, 86, 73, 69, 87])],
          578365826: [
            Buffer.from([
              26,
              18,
              24,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
            ]),
          ],
        },
      },
    },
    /**
     * EchoInternalAndPreview is a internal and preview API that should only be visible in the OpenAPI spec
     * if `visibility_restriction_selectors` includes "PREVIEW" or "INTERNAL".
     */
    echoInternalAndPreview: {
      name: "EchoInternalAndPreview",
      requestType: VisibilityRuleSimpleMessage,
      requestStream: false,
      responseType: VisibilityRuleSimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365818: [Buffer.from([18, 18, 16, 73, 78, 84, 69, 82, 78, 65, 76, 44, 80, 82, 69, 86, 73, 69, 87])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              95,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              95,
              97,
              110,
              100,
              95,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VisibilityRuleEchoServiceImplementation<CallContextExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   * It should always be visible in the open API output.
   */
  echo(
    request: VisibilityRuleSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VisibilityRuleSimpleMessage>>;
  /**
   * EchoInternal is an internal API that should only be visible in the OpenAPI spec
   * if `visibility_restriction_selectors` includes "INTERNAL".
   */
  echoInternal(
    request: VisibilityRuleSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VisibilityRuleSimpleMessage>>;
  /**
   * EchoPreview is a preview API that should only be visible in the OpenAPI spec
   * if `visibility_restriction_selectors` includes "PREVIEW".
   */
  echoPreview(
    request: VisibilityRuleSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VisibilityRuleMessageInPreviewMethod>>;
  /**
   * EchoInternalAndPreview is a internal and preview API that should only be visible in the OpenAPI spec
   * if `visibility_restriction_selectors` includes "PREVIEW" or "INTERNAL".
   */
  echoInternalAndPreview(
    request: VisibilityRuleSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VisibilityRuleSimpleMessage>>;
}

export interface VisibilityRuleEchoServiceClient<CallOptionsExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   * It should always be visible in the open API output.
   */
  echo(
    request: DeepPartial<VisibilityRuleSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VisibilityRuleSimpleMessage>;
  /**
   * EchoInternal is an internal API that should only be visible in the OpenAPI spec
   * if `visibility_restriction_selectors` includes "INTERNAL".
   */
  echoInternal(
    request: DeepPartial<VisibilityRuleSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VisibilityRuleSimpleMessage>;
  /**
   * EchoPreview is a preview API that should only be visible in the OpenAPI spec
   * if `visibility_restriction_selectors` includes "PREVIEW".
   */
  echoPreview(
    request: DeepPartial<VisibilityRuleSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VisibilityRuleMessageInPreviewMethod>;
  /**
   * EchoInternalAndPreview is a internal and preview API that should only be visible in the OpenAPI spec
   * if `visibility_restriction_selectors` includes "PREVIEW" or "INTERNAL".
   */
  echoInternalAndPreview(
    request: DeepPartial<VisibilityRuleSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VisibilityRuleSimpleMessage>;
}

/**
 * VisibilityRuleInternalEchoService service responds to incoming echo requests.
 * It should only be visible in the OpenAPI spec if `visibility_restriction_selectors` includes "INTERNAL".
 */
export type VisibilityRuleInternalEchoServiceDefinition = typeof VisibilityRuleInternalEchoServiceDefinition;
export const VisibilityRuleInternalEchoServiceDefinition = {
  name: "VisibilityRuleInternalEchoService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.VisibilityRuleInternalEchoService",
  methods: {
    /**
     * Echo method receives a simple message and returns it.
     * It should not be visible in the open API output.
     */
    echo: {
      name: "Echo",
      requestType: VisibilityRuleSimpleMessage,
      requestStream: false,
      responseType: VisibilityRuleSimpleMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              34,
              30,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              101,
              99,
              104,
              111,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VisibilityRuleInternalEchoServiceImplementation<CallContextExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   * It should not be visible in the open API output.
   */
  echo(
    request: VisibilityRuleSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VisibilityRuleSimpleMessage>>;
}

export interface VisibilityRuleInternalEchoServiceClient<CallOptionsExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   * It should not be visible in the open API output.
   */
  echo(
    request: DeepPartial<VisibilityRuleSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VisibilityRuleSimpleMessage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
