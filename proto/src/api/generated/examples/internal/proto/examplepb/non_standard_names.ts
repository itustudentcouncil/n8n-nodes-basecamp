// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/non_standard_names.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../google/protobuf/field_mask.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/** NonStandardMessage has oddly named fields. */
export interface NonStandardMessage {
  /** Id represents the message identifier. */
  id: string;
  Num: Long;
  lineNum: Long;
  langIdent: string;
  STATUS: string;
  enGB: Long;
  no: string;
  thing: NonStandardMessage_Thing | undefined;
}

export interface NonStandardMessage_Thing {
  subThing: NonStandardMessage_Thing_SubThing | undefined;
}

export interface NonStandardMessage_Thing_SubThing {
  subValue: string;
}

export interface NonStandardUpdateRequest {
  body: NonStandardMessage | undefined;
  updateMask: string[] | undefined;
}

/** NonStandardMessageWithJSONNames maps odd field names to odd JSON names for maximum confusion. */
export interface NonStandardMessageWithJSONNames {
  /** Id represents the message identifier. */
  id: string;
  Num: Long;
  lineNum: Long;
  langIdent: string;
  STATUS: string;
  enGB: Long;
  no: string;
  thing: NonStandardMessageWithJSONNames_Thing | undefined;
}

export interface NonStandardMessageWithJSONNames_Thing {
  subThing: NonStandardMessageWithJSONNames_Thing_SubThing | undefined;
}

export interface NonStandardMessageWithJSONNames_Thing_SubThing {
  subValue: string;
}

export interface NonStandardWithJSONNamesUpdateRequest {
  body: NonStandardMessageWithJSONNames | undefined;
  updateMask: string[] | undefined;
}

function createBaseNonStandardMessage(): NonStandardMessage {
  return {
    id: "",
    Num: Long.ZERO,
    lineNum: Long.ZERO,
    langIdent: "",
    STATUS: "",
    enGB: Long.ZERO,
    no: "",
    thing: undefined,
  };
}

export const NonStandardMessage: MessageFns<NonStandardMessage> = {
  encode(message: NonStandardMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (!message.Num.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.Num.toString());
    }
    if (!message.lineNum.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.lineNum.toString());
    }
    if (message.langIdent !== "") {
      writer.uint32(34).string(message.langIdent);
    }
    if (message.STATUS !== "") {
      writer.uint32(42).string(message.STATUS);
    }
    if (!message.enGB.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.enGB.toString());
    }
    if (message.no !== "") {
      writer.uint32(58).string(message.no);
    }
    if (message.thing !== undefined) {
      NonStandardMessage_Thing.encode(message.thing, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Num = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lineNum = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.langIdent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.STATUS = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.enGB = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.no = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.thing = NonStandardMessage_Thing.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      Num: isSet(object.Num) ? Long.fromValue(object.Num) : Long.ZERO,
      lineNum: isSet(object.lineNum) ? Long.fromValue(object.lineNum) : Long.ZERO,
      langIdent: isSet(object.langIdent) ? globalThis.String(object.langIdent) : "",
      STATUS: isSet(object.STATUS) ? globalThis.String(object.STATUS) : "",
      enGB: isSet(object.enGB) ? Long.fromValue(object.enGB) : Long.ZERO,
      no: isSet(object.no) ? globalThis.String(object.no) : "",
      thing: isSet(object.thing) ? NonStandardMessage_Thing.fromJSON(object.thing) : undefined,
    };
  },

  toJSON(message: NonStandardMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (!message.Num.equals(Long.ZERO)) {
      obj.Num = (message.Num || Long.ZERO).toString();
    }
    if (!message.lineNum.equals(Long.ZERO)) {
      obj.lineNum = (message.lineNum || Long.ZERO).toString();
    }
    if (message.langIdent !== "") {
      obj.langIdent = message.langIdent;
    }
    if (message.STATUS !== "") {
      obj.STATUS = message.STATUS;
    }
    if (!message.enGB.equals(Long.ZERO)) {
      obj.enGB = (message.enGB || Long.ZERO).toString();
    }
    if (message.no !== "") {
      obj.no = message.no;
    }
    if (message.thing !== undefined) {
      obj.thing = NonStandardMessage_Thing.toJSON(message.thing);
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardMessage>): NonStandardMessage {
    return NonStandardMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardMessage>): NonStandardMessage {
    const message = createBaseNonStandardMessage();
    message.id = object.id ?? "";
    message.Num = (object.Num !== undefined && object.Num !== null) ? Long.fromValue(object.Num) : Long.ZERO;
    message.lineNum = (object.lineNum !== undefined && object.lineNum !== null)
      ? Long.fromValue(object.lineNum)
      : Long.ZERO;
    message.langIdent = object.langIdent ?? "";
    message.STATUS = object.STATUS ?? "";
    message.enGB = (object.enGB !== undefined && object.enGB !== null) ? Long.fromValue(object.enGB) : Long.ZERO;
    message.no = object.no ?? "";
    message.thing = (object.thing !== undefined && object.thing !== null)
      ? NonStandardMessage_Thing.fromPartial(object.thing)
      : undefined;
    return message;
  },
};

function createBaseNonStandardMessage_Thing(): NonStandardMessage_Thing {
  return { subThing: undefined };
}

export const NonStandardMessage_Thing: MessageFns<NonStandardMessage_Thing> = {
  encode(message: NonStandardMessage_Thing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subThing !== undefined) {
      NonStandardMessage_Thing_SubThing.encode(message.subThing, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardMessage_Thing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardMessage_Thing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subThing = NonStandardMessage_Thing_SubThing.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardMessage_Thing {
    return {
      subThing: isSet(object.subThing) ? NonStandardMessage_Thing_SubThing.fromJSON(object.subThing) : undefined,
    };
  },

  toJSON(message: NonStandardMessage_Thing): unknown {
    const obj: any = {};
    if (message.subThing !== undefined) {
      obj.subThing = NonStandardMessage_Thing_SubThing.toJSON(message.subThing);
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardMessage_Thing>): NonStandardMessage_Thing {
    return NonStandardMessage_Thing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardMessage_Thing>): NonStandardMessage_Thing {
    const message = createBaseNonStandardMessage_Thing();
    message.subThing = (object.subThing !== undefined && object.subThing !== null)
      ? NonStandardMessage_Thing_SubThing.fromPartial(object.subThing)
      : undefined;
    return message;
  },
};

function createBaseNonStandardMessage_Thing_SubThing(): NonStandardMessage_Thing_SubThing {
  return { subValue: "" };
}

export const NonStandardMessage_Thing_SubThing: MessageFns<NonStandardMessage_Thing_SubThing> = {
  encode(message: NonStandardMessage_Thing_SubThing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subValue !== "") {
      writer.uint32(10).string(message.subValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardMessage_Thing_SubThing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardMessage_Thing_SubThing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardMessage_Thing_SubThing {
    return { subValue: isSet(object.subValue) ? globalThis.String(object.subValue) : "" };
  },

  toJSON(message: NonStandardMessage_Thing_SubThing): unknown {
    const obj: any = {};
    if (message.subValue !== "") {
      obj.subValue = message.subValue;
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardMessage_Thing_SubThing>): NonStandardMessage_Thing_SubThing {
    return NonStandardMessage_Thing_SubThing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardMessage_Thing_SubThing>): NonStandardMessage_Thing_SubThing {
    const message = createBaseNonStandardMessage_Thing_SubThing();
    message.subValue = object.subValue ?? "";
    return message;
  },
};

function createBaseNonStandardUpdateRequest(): NonStandardUpdateRequest {
  return { body: undefined, updateMask: undefined };
}

export const NonStandardUpdateRequest: MessageFns<NonStandardUpdateRequest> = {
  encode(message: NonStandardUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined) {
      NonStandardMessage.encode(message.body, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.body = NonStandardMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardUpdateRequest {
    return {
      body: isSet(object.body) ? NonStandardMessage.fromJSON(object.body) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: NonStandardUpdateRequest): unknown {
    const obj: any = {};
    if (message.body !== undefined) {
      obj.body = NonStandardMessage.toJSON(message.body);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardUpdateRequest>): NonStandardUpdateRequest {
    return NonStandardUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardUpdateRequest>): NonStandardUpdateRequest {
    const message = createBaseNonStandardUpdateRequest();
    message.body = (object.body !== undefined && object.body !== null)
      ? NonStandardMessage.fromPartial(object.body)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseNonStandardMessageWithJSONNames(): NonStandardMessageWithJSONNames {
  return {
    id: "",
    Num: Long.ZERO,
    lineNum: Long.ZERO,
    langIdent: "",
    STATUS: "",
    enGB: Long.ZERO,
    no: "",
    thing: undefined,
  };
}

export const NonStandardMessageWithJSONNames: MessageFns<NonStandardMessageWithJSONNames> = {
  encode(message: NonStandardMessageWithJSONNames, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (!message.Num.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.Num.toString());
    }
    if (!message.lineNum.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.lineNum.toString());
    }
    if (message.langIdent !== "") {
      writer.uint32(34).string(message.langIdent);
    }
    if (message.STATUS !== "") {
      writer.uint32(42).string(message.STATUS);
    }
    if (!message.enGB.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.enGB.toString());
    }
    if (message.no !== "") {
      writer.uint32(58).string(message.no);
    }
    if (message.thing !== undefined) {
      NonStandardMessageWithJSONNames_Thing.encode(message.thing, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardMessageWithJSONNames {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardMessageWithJSONNames();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Num = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lineNum = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.langIdent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.STATUS = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.enGB = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.no = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.thing = NonStandardMessageWithJSONNames_Thing.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardMessageWithJSONNames {
    return {
      id: isSet(object.ID) ? globalThis.String(object.ID) : "",
      Num: isSet(object.Num) ? Long.fromValue(object.Num) : Long.ZERO,
      lineNum: isSet(object.LineNum) ? Long.fromValue(object.LineNum) : Long.ZERO,
      langIdent: isSet(object.langIdent) ? globalThis.String(object.langIdent) : "",
      STATUS: isSet(object.status) ? globalThis.String(object.status) : "",
      enGB: isSet(object.En_GB) ? Long.fromValue(object.En_GB) : Long.ZERO,
      no: isSet(object.yes) ? globalThis.String(object.yes) : "",
      thing: isSet(object.Thingy) ? NonStandardMessageWithJSONNames_Thing.fromJSON(object.Thingy) : undefined,
    };
  },

  toJSON(message: NonStandardMessageWithJSONNames): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.ID = message.id;
    }
    if (!message.Num.equals(Long.ZERO)) {
      obj.Num = (message.Num || Long.ZERO).toString();
    }
    if (!message.lineNum.equals(Long.ZERO)) {
      obj.LineNum = (message.lineNum || Long.ZERO).toString();
    }
    if (message.langIdent !== "") {
      obj.langIdent = message.langIdent;
    }
    if (message.STATUS !== "") {
      obj.status = message.STATUS;
    }
    if (!message.enGB.equals(Long.ZERO)) {
      obj.En_GB = (message.enGB || Long.ZERO).toString();
    }
    if (message.no !== "") {
      obj.yes = message.no;
    }
    if (message.thing !== undefined) {
      obj.Thingy = NonStandardMessageWithJSONNames_Thing.toJSON(message.thing);
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardMessageWithJSONNames>): NonStandardMessageWithJSONNames {
    return NonStandardMessageWithJSONNames.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardMessageWithJSONNames>): NonStandardMessageWithJSONNames {
    const message = createBaseNonStandardMessageWithJSONNames();
    message.id = object.id ?? "";
    message.Num = (object.Num !== undefined && object.Num !== null) ? Long.fromValue(object.Num) : Long.ZERO;
    message.lineNum = (object.lineNum !== undefined && object.lineNum !== null)
      ? Long.fromValue(object.lineNum)
      : Long.ZERO;
    message.langIdent = object.langIdent ?? "";
    message.STATUS = object.STATUS ?? "";
    message.enGB = (object.enGB !== undefined && object.enGB !== null) ? Long.fromValue(object.enGB) : Long.ZERO;
    message.no = object.no ?? "";
    message.thing = (object.thing !== undefined && object.thing !== null)
      ? NonStandardMessageWithJSONNames_Thing.fromPartial(object.thing)
      : undefined;
    return message;
  },
};

function createBaseNonStandardMessageWithJSONNames_Thing(): NonStandardMessageWithJSONNames_Thing {
  return { subThing: undefined };
}

export const NonStandardMessageWithJSONNames_Thing: MessageFns<NonStandardMessageWithJSONNames_Thing> = {
  encode(message: NonStandardMessageWithJSONNames_Thing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subThing !== undefined) {
      NonStandardMessageWithJSONNames_Thing_SubThing.encode(message.subThing, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardMessageWithJSONNames_Thing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardMessageWithJSONNames_Thing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subThing = NonStandardMessageWithJSONNames_Thing_SubThing.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardMessageWithJSONNames_Thing {
    return {
      subThing: isSet(object.SubThing)
        ? NonStandardMessageWithJSONNames_Thing_SubThing.fromJSON(object.SubThing)
        : undefined,
    };
  },

  toJSON(message: NonStandardMessageWithJSONNames_Thing): unknown {
    const obj: any = {};
    if (message.subThing !== undefined) {
      obj.SubThing = NonStandardMessageWithJSONNames_Thing_SubThing.toJSON(message.subThing);
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardMessageWithJSONNames_Thing>): NonStandardMessageWithJSONNames_Thing {
    return NonStandardMessageWithJSONNames_Thing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardMessageWithJSONNames_Thing>): NonStandardMessageWithJSONNames_Thing {
    const message = createBaseNonStandardMessageWithJSONNames_Thing();
    message.subThing = (object.subThing !== undefined && object.subThing !== null)
      ? NonStandardMessageWithJSONNames_Thing_SubThing.fromPartial(object.subThing)
      : undefined;
    return message;
  },
};

function createBaseNonStandardMessageWithJSONNames_Thing_SubThing(): NonStandardMessageWithJSONNames_Thing_SubThing {
  return { subValue: "" };
}

export const NonStandardMessageWithJSONNames_Thing_SubThing: MessageFns<
  NonStandardMessageWithJSONNames_Thing_SubThing
> = {
  encode(
    message: NonStandardMessageWithJSONNames_Thing_SubThing,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.subValue !== "") {
      writer.uint32(10).string(message.subValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardMessageWithJSONNames_Thing_SubThing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardMessageWithJSONNames_Thing_SubThing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardMessageWithJSONNames_Thing_SubThing {
    return { subValue: isSet(object.sub_Value) ? globalThis.String(object.sub_Value) : "" };
  },

  toJSON(message: NonStandardMessageWithJSONNames_Thing_SubThing): unknown {
    const obj: any = {};
    if (message.subValue !== "") {
      obj.sub_Value = message.subValue;
    }
    return obj;
  },

  create(
    base?: DeepPartial<NonStandardMessageWithJSONNames_Thing_SubThing>,
  ): NonStandardMessageWithJSONNames_Thing_SubThing {
    return NonStandardMessageWithJSONNames_Thing_SubThing.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<NonStandardMessageWithJSONNames_Thing_SubThing>,
  ): NonStandardMessageWithJSONNames_Thing_SubThing {
    const message = createBaseNonStandardMessageWithJSONNames_Thing_SubThing();
    message.subValue = object.subValue ?? "";
    return message;
  },
};

function createBaseNonStandardWithJSONNamesUpdateRequest(): NonStandardWithJSONNamesUpdateRequest {
  return { body: undefined, updateMask: undefined };
}

export const NonStandardWithJSONNamesUpdateRequest: MessageFns<NonStandardWithJSONNamesUpdateRequest> = {
  encode(message: NonStandardWithJSONNamesUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined) {
      NonStandardMessageWithJSONNames.encode(message.body, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStandardWithJSONNamesUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStandardWithJSONNamesUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.body = NonStandardMessageWithJSONNames.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStandardWithJSONNamesUpdateRequest {
    return {
      body: isSet(object.body) ? NonStandardMessageWithJSONNames.fromJSON(object.body) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: NonStandardWithJSONNamesUpdateRequest): unknown {
    const obj: any = {};
    if (message.body !== undefined) {
      obj.body = NonStandardMessageWithJSONNames.toJSON(message.body);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<NonStandardWithJSONNamesUpdateRequest>): NonStandardWithJSONNamesUpdateRequest {
    return NonStandardWithJSONNamesUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStandardWithJSONNamesUpdateRequest>): NonStandardWithJSONNamesUpdateRequest {
    const message = createBaseNonStandardWithJSONNamesUpdateRequest();
    message.body = (object.body !== undefined && object.body !== null)
      ? NonStandardMessageWithJSONNames.fromPartial(object.body)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** NonStandardService responds to incoming messages, applies a field mask and returns the masked response. */
export type NonStandardServiceDefinition = typeof NonStandardServiceDefinition;
export const NonStandardServiceDefinition = {
  name: "NonStandardService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.NonStandardService",
  methods: {
    /** Apply field mask to empty NonStandardMessage and return result. */
    update: {
      name: "Update",
      requestType: NonStandardUpdateRequest,
      requestStream: false,
      responseType: NonStandardMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              58,
              4,
              98,
              111,
              100,
              121,
              50,
              31,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              110,
              111,
              110,
              95,
              115,
              116,
              97,
              110,
              100,
              97,
              114,
              100,
              47,
              117,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Apply field mask to empty NonStandardMessageWithJSONNames and return result. */
    updateWithJSONNames: {
      name: "UpdateWithJSONNames",
      requestType: NonStandardWithJSONNamesUpdateRequest,
      requestStream: false,
      responseType: NonStandardMessageWithJSONNames,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              55,
              58,
              4,
              98,
              111,
              100,
              121,
              50,
              47,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              110,
              111,
              110,
              95,
              115,
              116,
              97,
              110,
              100,
              97,
              114,
              100,
              47,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              119,
              105,
              116,
              104,
              95,
              106,
              115,
              111,
              110,
              95,
              110,
              97,
              109,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface NonStandardServiceImplementation<CallContextExt = {}> {
  /** Apply field mask to empty NonStandardMessage and return result. */
  update(
    request: NonStandardUpdateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NonStandardMessage>>;
  /** Apply field mask to empty NonStandardMessageWithJSONNames and return result. */
  updateWithJSONNames(
    request: NonStandardWithJSONNamesUpdateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NonStandardMessageWithJSONNames>>;
}

export interface NonStandardServiceClient<CallOptionsExt = {}> {
  /** Apply field mask to empty NonStandardMessage and return result. */
  update(
    request: DeepPartial<NonStandardUpdateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NonStandardMessage>;
  /** Apply field mask to empty NonStandardMessageWithJSONNames and return result. */
  updateWithJSONNames(
    request: DeepPartial<NonStandardWithJSONNamesUpdateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NonStandardMessageWithJSONNames>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
