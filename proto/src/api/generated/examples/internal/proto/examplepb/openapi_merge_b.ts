// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/openapi_merge_b.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.examplepb";

/** InMessageB represents a message to ServiceB. */
export interface InMessageB {
  /** Here is the explanation about InMessageB.values */
  value: string;
}

/** OutMessageB represents a message returned from ServiceB. */
export interface OutMessageB {
  /** Here is the explanation about OutMessageB.value */
  values: string[];
}

function createBaseInMessageB(): InMessageB {
  return { value: "" };
}

export const InMessageB: MessageFns<InMessageB> = {
  encode(message: InMessageB, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InMessageB {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInMessageB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InMessageB {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: InMessageB): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<InMessageB>): InMessageB {
    return InMessageB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InMessageB>): InMessageB {
    const message = createBaseInMessageB();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseOutMessageB(): OutMessageB {
  return { values: [] };
}

export const OutMessageB: MessageFns<OutMessageB> = {
  encode(message: OutMessageB, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutMessageB {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutMessageB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutMessageB {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: OutMessageB): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<OutMessageB>): OutMessageB {
    return OutMessageB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutMessageB>): OutMessageB {
    const message = createBaseOutMessageB();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

/** ServiceB service responds to incoming merge requests. */
export type ServiceBDefinition = typeof ServiceBDefinition;
export const ServiceBDefinition = {
  name: "ServiceB",
  fullName: "grpc.gateway.examples.internal.examplepb.ServiceB",
  methods: {
    /**
     * ServiceB.MethodOne receives InMessageB and returns OutMessageB
     *
     * Here is the detail explanation about ServiceB.MethodOne.
     */
    methodOne: {
      name: "MethodOne",
      requestType: InMessageB,
      requestStream: false,
      responseType: OutMessageB,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([20, 58, 1, 42, 34, 15, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47, 98, 47, 49]),
          ],
        },
      },
    },
    /**
     * ServiceB.MethodTwo receives OutMessageB and returns InMessageB
     *
     * Here is the detail explanation about ServiceB.MethodTwo.
     */
    methodTwo: {
      name: "MethodTwo",
      requestType: OutMessageB,
      requestStream: false,
      responseType: InMessageB,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([20, 58, 1, 42, 34, 15, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47, 98, 47, 50]),
          ],
        },
      },
    },
  },
} as const;

export interface ServiceBServiceImplementation<CallContextExt = {}> {
  /**
   * ServiceB.MethodOne receives InMessageB and returns OutMessageB
   *
   * Here is the detail explanation about ServiceB.MethodOne.
   */
  methodOne(request: InMessageB, context: CallContext & CallContextExt): Promise<DeepPartial<OutMessageB>>;
  /**
   * ServiceB.MethodTwo receives OutMessageB and returns InMessageB
   *
   * Here is the detail explanation about ServiceB.MethodTwo.
   */
  methodTwo(request: OutMessageB, context: CallContext & CallContextExt): Promise<DeepPartial<InMessageB>>;
}

export interface ServiceBClient<CallOptionsExt = {}> {
  /**
   * ServiceB.MethodOne receives InMessageB and returns OutMessageB
   *
   * Here is the detail explanation about ServiceB.MethodOne.
   */
  methodOne(request: DeepPartial<InMessageB>, options?: CallOptions & CallOptionsExt): Promise<OutMessageB>;
  /**
   * ServiceB.MethodTwo receives OutMessageB and returns InMessageB
   *
   * Here is the detail explanation about ServiceB.MethodTwo.
   */
  methodTwo(request: DeepPartial<OutMessageB>, options?: CallOptions & CallOptionsExt): Promise<InMessageB>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
