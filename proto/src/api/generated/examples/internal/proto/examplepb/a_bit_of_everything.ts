// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/a_bit_of_everything.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../../google/protobuf/duration.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { FieldMask } from "../../../../google/protobuf/field_mask.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";
import { StringValue } from "../../../../google/protobuf/wrappers.js";
import { Status } from "../../../../google/rpc/status.js";
import { OneofEnumMessage } from "../oneofenum/oneof_enum.js";
import {
  MessagePathEnum_NestedPathEnum,
  messagePathEnum_NestedPathEnumFromJSON,
  messagePathEnum_NestedPathEnumToJSON,
  MessageWithNestedPathEnum,
  MessageWithPathEnum,
  PathEnum,
  pathEnumFromJSON,
  pathEnumToJSON,
  snakeCaseForImport,
  snakeCaseForImportFromJSON,
  snakeCaseForImportToJSON,
} from "../pathenum/path_enum.js";
import { StringMessage } from "../sub/message.js";
import { IdMessage } from "../sub2/message.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/** NumericEnum is one or zero. */
export enum NumericEnum {
  /** ZERO - ZERO means 0 */
  ZERO = 0,
  /** ONE - ONE means 1 */
  ONE = 1,
  UNRECOGNIZED = -1,
}

export function numericEnumFromJSON(object: any): NumericEnum {
  switch (object) {
    case 0:
    case "ZERO":
      return NumericEnum.ZERO;
    case 1:
    case "ONE":
      return NumericEnum.ONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NumericEnum.UNRECOGNIZED;
  }
}

export function numericEnumToJSON(object: NumericEnum): string {
  switch (object) {
    case NumericEnum.ZERO:
      return "ZERO";
    case NumericEnum.ONE:
      return "ONE";
    case NumericEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Ignoring lint warnings as this enum type exist to validate proper functionality
 * for projects that don't follow these lint rules.
 * buf:lint:ignore ENUM_PASCAL_CASE
 */
export enum snakeCaseEnum {
  /** value_c - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_c = 0,
  /** value_d - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_d = 1,
  UNRECOGNIZED = -1,
}

export function snakeCaseEnumFromJSON(object: any): snakeCaseEnum {
  switch (object) {
    case 0:
    case "value_c":
      return snakeCaseEnum.value_c;
    case 1:
    case "value_d":
      return snakeCaseEnum.value_d;
    case -1:
    case "UNRECOGNIZED":
    default:
      return snakeCaseEnum.UNRECOGNIZED;
  }
}

export function snakeCaseEnumToJSON(object: snakeCaseEnum): string {
  switch (object) {
    case snakeCaseEnum.value_c:
      return "value_c";
    case snakeCaseEnum.value_d:
      return "value_d";
    case snakeCaseEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Ignoring lint warnings as this enum type exist to validate proper functionality
 * for projects that don't follow these lint rules.
 * buf:lint:ignore ENUM_PASCAL_CASE
 */
export enum snakeCase0Enum {
  /** value_e - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_e = 0,
  /** value_f - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_f = 1,
  UNRECOGNIZED = -1,
}

export function snakeCase0EnumFromJSON(object: any): snakeCase0Enum {
  switch (object) {
    case 0:
    case "value_e":
      return snakeCase0Enum.value_e;
    case 1:
    case "value_f":
      return snakeCase0Enum.value_f;
    case -1:
    case "UNRECOGNIZED":
    default:
      return snakeCase0Enum.UNRECOGNIZED;
  }
}

export function snakeCase0EnumToJSON(object: snakeCase0Enum): string {
  switch (object) {
    case snakeCase0Enum.value_e:
      return "value_e";
    case snakeCase0Enum.value_f:
      return "value_f";
    case snakeCase0Enum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ErrorResponse {
  correlationId: string;
  error: ErrorObject | undefined;
}

export interface ErrorObject {
  code: number;
  message: string;
}

/** Intentionally complicated message type to cover many features of Protobuf. */
export interface ABitOfEverything {
  singleNested: ABitOfEverything_Nested | undefined;
  uuid: string;
  nested: ABitOfEverything_Nested[];
  floatValue: number;
  doubleValue: number;
  int64Value: Long;
  uint64Value: Long;
  int32Value: number;
  fixed64Value: Long;
  fixed32Value: number;
  boolValue: boolean;
  stringValue: string;
  bytesValue: Buffer;
  uint32Value: number;
  enumValue: NumericEnum;
  pathEnumValue: PathEnum;
  nestedPathEnumValue: MessagePathEnum_NestedPathEnum;
  sfixed32Value: number;
  sfixed64Value: Long;
  sint32Value: number;
  sint64Value: Long;
  repeatedStringValue: string[];
  oneofEmpty?: Empty | undefined;
  oneofString?: string | undefined;
  mapValue: { [key: string]: NumericEnum };
  mappedStringValue: { [key: string]: string };
  mappedNestedValue: { [key: string]: ABitOfEverything_Nested };
  nonConventionalNameValue: string;
  timestampValue:
    | Date
    | undefined;
  /** repeated enum value. it is comma-separated in query */
  repeatedEnumValue: NumericEnum[];
  /** repeated numeric enum comment (This comment is overridden by the field annotation) */
  repeatedEnumAnnotation: NumericEnum[];
  /** numeric enum comment (This comment is overridden by the field annotation) */
  enumValueAnnotation: NumericEnum;
  /** repeated string comment (This comment is overridden by the field annotation) */
  repeatedStringAnnotation: string[];
  /** repeated nested object comment (This comment is overridden by the field annotation) */
  repeatedNestedAnnotation: ABitOfEverything_Nested[];
  /** nested object comments (This comment is overridden by the field annotation) */
  nestedAnnotation: ABitOfEverything_Nested | undefined;
  int64OverrideType: Long;
  /** mark a field as required in Open API definition */
  requiredStringViaFieldBehaviorAnnotation: string;
  /** mark a field as readonly in Open API definition */
  outputOnlyStringViaFieldBehaviorAnnotation: string;
  optionalStringValue?:
    | string
    | undefined;
  /** Test openapiv2 generation of repeated fields */
  productId: string[];
  /** Test openapiv2 generation of required fields with annotation and jsonschema to reproduce */
  optionalStringField: string;
  requiredStringField1: string;
  requiredStringField2: string;
  /** Test openapiv2 handling of required json_name fields */
  requiredFieldBehaviorJsonName: string;
  requiredFieldSchemaJsonName: string;
  /** Trailing only */
  trailingOnly: string;
  /** Trailing only dot. */
  trailingOnlyDot: string;
  /** Leading both */
  trailingBoth: string;
  /**
   * Leading multiline
   *
   * This is an example of a multi-line comment.
   */
  trailingMultiline: string;
  /** Specify a custom format of repeated field items */
  uuids: string[];
}

/** Nested is nested type. */
export interface ABitOfEverything_Nested {
  /** name is nested field. */
  name: string;
  amount: number;
  /** DeepEnum comment. */
  ok: ABitOfEverything_Nested_DeepEnum;
}

/** DeepEnum is one or zero. */
export enum ABitOfEverything_Nested_DeepEnum {
  /** FALSE - FALSE is false. */
  FALSE = 0,
  /** TRUE - TRUE is true. */
  TRUE = 1,
  UNRECOGNIZED = -1,
}

export function aBitOfEverything_Nested_DeepEnumFromJSON(object: any): ABitOfEverything_Nested_DeepEnum {
  switch (object) {
    case 0:
    case "FALSE":
      return ABitOfEverything_Nested_DeepEnum.FALSE;
    case 1:
    case "TRUE":
      return ABitOfEverything_Nested_DeepEnum.TRUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED;
  }
}

export function aBitOfEverything_Nested_DeepEnumToJSON(object: ABitOfEverything_Nested_DeepEnum): string {
  switch (object) {
    case ABitOfEverything_Nested_DeepEnum.FALSE:
      return "FALSE";
    case ABitOfEverything_Nested_DeepEnum.TRUE:
      return "TRUE";
    case ABitOfEverything_Nested_DeepEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ABitOfEverything_MapValueEntry {
  key: string;
  value: NumericEnum;
}

export interface ABitOfEverything_MappedStringValueEntry {
  key: string;
  value: string;
}

export interface ABitOfEverything_MappedNestedValueEntry {
  key: string;
  value: ABitOfEverything_Nested | undefined;
}

/** ABitOfEverythingRepeated is used to validate repeated path parameter functionality */
export interface ABitOfEverythingRepeated {
  /** repeated values. they are comma-separated in path */
  pathRepeatedFloatValue: number[];
  pathRepeatedDoubleValue: number[];
  pathRepeatedInt64Value: Long[];
  pathRepeatedUint64Value: Long[];
  pathRepeatedInt32Value: number[];
  pathRepeatedFixed64Value: Long[];
  pathRepeatedFixed32Value: number[];
  pathRepeatedBoolValue: boolean[];
  pathRepeatedStringValue: string[];
  pathRepeatedBytesValue: Buffer[];
  pathRepeatedUint32Value: number[];
  pathRepeatedEnumValue: NumericEnum[];
  pathRepeatedSfixed32Value: number[];
  pathRepeatedSfixed64Value: Long[];
  pathRepeatedSint32Value: number[];
  pathRepeatedSint64Value: Long[];
}

export interface CheckStatusResponse {
  status: Status | undefined;
}

export interface Body {
  name: string;
}

export interface MessageWithBody {
  id: string;
  data: Body | undefined;
}

/** UpdateV2Request request for update includes the message and the update mask */
export interface UpdateV2Request {
  abe:
    | ABitOfEverything
    | undefined;
  /** The paths to update. */
  updateMask: string[] | undefined;
}

/**
 * An example resource type from AIP-123 used to test the behavior described in
 * the CreateBookRequest message.
 *
 * See: https://google.aip.dev/123
 */
export interface Book {
  /**
   * The resource name of the book.
   *
   * Format: `publishers/{publisher}/books/{book}`
   *
   * Example: `publishers/1257894000000000000/books/my-book`
   */
  name: string;
  /** Output only. The book's ID. */
  id: string;
  /** Output only. Creation time of the book. */
  createTime: Date | undefined;
}

/**
 * A standard Create message from AIP-133 with a user-specified ID.
 * The user-specified ID (the `book_id` field in this example) must become a
 * query parameter in the OpenAPI spec.
 *
 * See: https://google.aip.dev/133#user-specified-ids
 */
export interface CreateBookRequest {
  /**
   * The publisher in which to create the book.
   *
   * Format: `publishers/{publisher}`
   *
   * Example: `publishers/1257894000000000000`
   */
  parent: string;
  /** The book to create. */
  book:
    | Book
    | undefined;
  /**
   * The ID to use for the book.
   *
   * This must start with an alphanumeric character.
   */
  bookId: string;
}

/**
 * A standard Update message from AIP-134
 *
 * See: https://google.aip.dev/134#request-message
 */
export interface UpdateBookRequest {
  /**
   * The book to update.
   *
   * The book's `name` field is used to identify the book to be updated.
   * Format: publishers/{publisher}/books/{book}
   */
  book:
    | Book
    | undefined;
  /** The list of fields to be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * If set to true, and the book is not found, a new book will be created.
   * In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
}

export interface SnakeEnumRequest {
  what: snakeCaseEnum;
  who: snakeCase0Enum;
  where: snakeCaseForImport;
}

export interface SnakeEnumResponse {
}

/**
 * Required message type -> OpenAPI
 * https://github.com/grpc-ecosystem/grpc-gateway/issues/2837
 */
export interface RequiredMessageTypeRequest {
  id: string;
  foo: Foo | undefined;
}

export interface Foo {
  bar: Bar | undefined;
}

export interface Bar {
  id: string;
}

function createBaseErrorResponse(): ErrorResponse {
  return { correlationId: "", error: undefined };
}

export const ErrorResponse: MessageFns<ErrorResponse> = {
  encode(message: ErrorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.correlationId !== "") {
      writer.uint32(10).string(message.correlationId);
    }
    if (message.error !== undefined) {
      ErrorObject.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = ErrorObject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorResponse {
    return {
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : "",
      error: isSet(object.error) ? ErrorObject.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ErrorResponse): unknown {
    const obj: any = {};
    if (message.correlationId !== "") {
      obj.correlationId = message.correlationId;
    }
    if (message.error !== undefined) {
      obj.error = ErrorObject.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorResponse>): ErrorResponse {
    return ErrorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorResponse>): ErrorResponse {
    const message = createBaseErrorResponse();
    message.correlationId = object.correlationId ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorObject.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseErrorObject(): ErrorObject {
  return { code: 0, message: "" };
}

export const ErrorObject: MessageFns<ErrorObject> = {
  encode(message: ErrorObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorObject {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ErrorObject): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorObject>): ErrorObject {
    return ErrorObject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorObject>): ErrorObject {
    const message = createBaseErrorObject();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseABitOfEverything(): ABitOfEverything {
  return {
    singleNested: undefined,
    uuid: "",
    nested: [],
    floatValue: 0,
    doubleValue: 0,
    int64Value: Long.ZERO,
    uint64Value: Long.UZERO,
    int32Value: 0,
    fixed64Value: Long.UZERO,
    fixed32Value: 0,
    boolValue: false,
    stringValue: "",
    bytesValue: Buffer.alloc(0),
    uint32Value: 0,
    enumValue: 0,
    pathEnumValue: 0,
    nestedPathEnumValue: 0,
    sfixed32Value: 0,
    sfixed64Value: Long.ZERO,
    sint32Value: 0,
    sint64Value: Long.ZERO,
    repeatedStringValue: [],
    oneofEmpty: undefined,
    oneofString: undefined,
    mapValue: {},
    mappedStringValue: {},
    mappedNestedValue: {},
    nonConventionalNameValue: "",
    timestampValue: undefined,
    repeatedEnumValue: [],
    repeatedEnumAnnotation: [],
    enumValueAnnotation: 0,
    repeatedStringAnnotation: [],
    repeatedNestedAnnotation: [],
    nestedAnnotation: undefined,
    int64OverrideType: Long.ZERO,
    requiredStringViaFieldBehaviorAnnotation: "",
    outputOnlyStringViaFieldBehaviorAnnotation: "",
    optionalStringValue: undefined,
    productId: [],
    optionalStringField: "",
    requiredStringField1: "",
    requiredStringField2: "",
    requiredFieldBehaviorJsonName: "",
    requiredFieldSchemaJsonName: "",
    trailingOnly: "",
    trailingOnlyDot: "",
    trailingBoth: "",
    trailingMultiline: "",
    uuids: [],
  };
}

export const ABitOfEverything: MessageFns<ABitOfEverything> = {
  encode(message: ABitOfEverything, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.singleNested !== undefined) {
      ABitOfEverything_Nested.encode(message.singleNested, writer.uint32(202).fork()).join();
    }
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    for (const v of message.nested) {
      ABitOfEverything_Nested.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.floatValue !== 0) {
      writer.uint32(29).float(message.floatValue);
    }
    if (message.doubleValue !== 0) {
      writer.uint32(33).double(message.doubleValue);
    }
    if (!message.int64Value.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.int64Value.toString());
    }
    if (!message.uint64Value.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.uint64Value.toString());
    }
    if (message.int32Value !== 0) {
      writer.uint32(56).int32(message.int32Value);
    }
    if (!message.fixed64Value.equals(Long.UZERO)) {
      writer.uint32(65).fixed64(message.fixed64Value.toString());
    }
    if (message.fixed32Value !== 0) {
      writer.uint32(77).fixed32(message.fixed32Value);
    }
    if (message.boolValue !== false) {
      writer.uint32(80).bool(message.boolValue);
    }
    if (message.stringValue !== "") {
      writer.uint32(90).string(message.stringValue);
    }
    if (message.bytesValue.length !== 0) {
      writer.uint32(234).bytes(message.bytesValue);
    }
    if (message.uint32Value !== 0) {
      writer.uint32(104).uint32(message.uint32Value);
    }
    if (message.enumValue !== 0) {
      writer.uint32(112).int32(message.enumValue);
    }
    if (message.pathEnumValue !== 0) {
      writer.uint32(240).int32(message.pathEnumValue);
    }
    if (message.nestedPathEnumValue !== 0) {
      writer.uint32(248).int32(message.nestedPathEnumValue);
    }
    if (message.sfixed32Value !== 0) {
      writer.uint32(125).sfixed32(message.sfixed32Value);
    }
    if (!message.sfixed64Value.equals(Long.ZERO)) {
      writer.uint32(129).sfixed64(message.sfixed64Value.toString());
    }
    if (message.sint32Value !== 0) {
      writer.uint32(136).sint32(message.sint32Value);
    }
    if (!message.sint64Value.equals(Long.ZERO)) {
      writer.uint32(144).sint64(message.sint64Value.toString());
    }
    for (const v of message.repeatedStringValue) {
      writer.uint32(154).string(v!);
    }
    if (message.oneofEmpty !== undefined) {
      Empty.encode(message.oneofEmpty, writer.uint32(162).fork()).join();
    }
    if (message.oneofString !== undefined) {
      writer.uint32(170).string(message.oneofString);
    }
    Object.entries(message.mapValue).forEach(([key, value]) => {
      ABitOfEverything_MapValueEntry.encode({ key: key as any, value }, writer.uint32(178).fork()).join();
    });
    Object.entries(message.mappedStringValue).forEach(([key, value]) => {
      ABitOfEverything_MappedStringValueEntry.encode({ key: key as any, value }, writer.uint32(186).fork()).join();
    });
    Object.entries(message.mappedNestedValue).forEach(([key, value]) => {
      ABitOfEverything_MappedNestedValueEntry.encode({ key: key as any, value }, writer.uint32(194).fork()).join();
    });
    if (message.nonConventionalNameValue !== "") {
      writer.uint32(210).string(message.nonConventionalNameValue);
    }
    if (message.timestampValue !== undefined) {
      Timestamp.encode(toTimestamp(message.timestampValue), writer.uint32(218).fork()).join();
    }
    writer.uint32(226).fork();
    for (const v of message.repeatedEnumValue) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(258).fork();
    for (const v of message.repeatedEnumAnnotation) {
      writer.int32(v);
    }
    writer.join();
    if (message.enumValueAnnotation !== 0) {
      writer.uint32(264).int32(message.enumValueAnnotation);
    }
    for (const v of message.repeatedStringAnnotation) {
      writer.uint32(274).string(v!);
    }
    for (const v of message.repeatedNestedAnnotation) {
      ABitOfEverything_Nested.encode(v!, writer.uint32(282).fork()).join();
    }
    if (message.nestedAnnotation !== undefined) {
      ABitOfEverything_Nested.encode(message.nestedAnnotation, writer.uint32(290).fork()).join();
    }
    if (!message.int64OverrideType.equals(Long.ZERO)) {
      writer.uint32(296).int64(message.int64OverrideType.toString());
    }
    if (message.requiredStringViaFieldBehaviorAnnotation !== "") {
      writer.uint32(306).string(message.requiredStringViaFieldBehaviorAnnotation);
    }
    if (message.outputOnlyStringViaFieldBehaviorAnnotation !== "") {
      writer.uint32(314).string(message.outputOnlyStringViaFieldBehaviorAnnotation);
    }
    if (message.optionalStringValue !== undefined) {
      writer.uint32(322).string(message.optionalStringValue);
    }
    for (const v of message.productId) {
      writer.uint32(330).string(v!);
    }
    if (message.optionalStringField !== "") {
      writer.uint32(338).string(message.optionalStringField);
    }
    if (message.requiredStringField1 !== "") {
      writer.uint32(346).string(message.requiredStringField1);
    }
    if (message.requiredStringField2 !== "") {
      writer.uint32(354).string(message.requiredStringField2);
    }
    if (message.requiredFieldBehaviorJsonName !== "") {
      writer.uint32(362).string(message.requiredFieldBehaviorJsonName);
    }
    if (message.requiredFieldSchemaJsonName !== "") {
      writer.uint32(370).string(message.requiredFieldSchemaJsonName);
    }
    if (message.trailingOnly !== "") {
      writer.uint32(378).string(message.trailingOnly);
    }
    if (message.trailingOnlyDot !== "") {
      writer.uint32(386).string(message.trailingOnlyDot);
    }
    if (message.trailingBoth !== "") {
      writer.uint32(394).string(message.trailingBoth);
    }
    if (message.trailingMultiline !== "") {
      writer.uint32(402).string(message.trailingMultiline);
    }
    for (const v of message.uuids) {
      writer.uint32(410).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 25:
          if (tag !== 202) {
            break;
          }

          message.singleNested = ABitOfEverything_Nested.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nested.push(ABitOfEverything_Nested.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.floatValue = reader.float();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.int64Value = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.uint64Value = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.int32Value = reader.int32();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.fixed64Value = Long.fromString(reader.fixed64().toString(), true);
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.fixed32Value = reader.fixed32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.bytesValue = Buffer.from(reader.bytes());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.uint32Value = reader.uint32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.enumValue = reader.int32() as any;
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.pathEnumValue = reader.int32() as any;
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.nestedPathEnumValue = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.sfixed32Value = reader.sfixed32();
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.sfixed64Value = Long.fromString(reader.sfixed64().toString());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.sint32Value = reader.sint32();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.sint64Value = Long.fromString(reader.sint64().toString());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.repeatedStringValue.push(reader.string());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.oneofEmpty = Empty.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.oneofString = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          const entry22 = ABitOfEverything_MapValueEntry.decode(reader, reader.uint32());
          if (entry22.value !== undefined) {
            message.mapValue[entry22.key] = entry22.value;
          }
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          const entry23 = ABitOfEverything_MappedStringValueEntry.decode(reader, reader.uint32());
          if (entry23.value !== undefined) {
            message.mappedStringValue[entry23.key] = entry23.value;
          }
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          const entry24 = ABitOfEverything_MappedNestedValueEntry.decode(reader, reader.uint32());
          if (entry24.value !== undefined) {
            message.mappedNestedValue[entry24.key] = entry24.value;
          }
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.nonConventionalNameValue = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.timestampValue = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 28:
          if (tag === 224) {
            message.repeatedEnumValue.push(reader.int32() as any);

            continue;
          }

          if (tag === 226) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnumValue.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 32:
          if (tag === 256) {
            message.repeatedEnumAnnotation.push(reader.int32() as any);

            continue;
          }

          if (tag === 258) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.repeatedEnumAnnotation.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.enumValueAnnotation = reader.int32() as any;
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.repeatedStringAnnotation.push(reader.string());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.repeatedNestedAnnotation.push(ABitOfEverything_Nested.decode(reader, reader.uint32()));
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.nestedAnnotation = ABitOfEverything_Nested.decode(reader, reader.uint32());
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.int64OverrideType = Long.fromString(reader.int64().toString());
          continue;
        case 38:
          if (tag !== 306) {
            break;
          }

          message.requiredStringViaFieldBehaviorAnnotation = reader.string();
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.outputOnlyStringViaFieldBehaviorAnnotation = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.optionalStringValue = reader.string();
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.productId.push(reader.string());
          continue;
        case 42:
          if (tag !== 338) {
            break;
          }

          message.optionalStringField = reader.string();
          continue;
        case 43:
          if (tag !== 346) {
            break;
          }

          message.requiredStringField1 = reader.string();
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.requiredStringField2 = reader.string();
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.requiredFieldBehaviorJsonName = reader.string();
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.requiredFieldSchemaJsonName = reader.string();
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.trailingOnly = reader.string();
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.trailingOnlyDot = reader.string();
          continue;
        case 49:
          if (tag !== 394) {
            break;
          }

          message.trailingBoth = reader.string();
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.trailingMultiline = reader.string();
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.uuids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything {
    return {
      singleNested: isSet(object.singleNested) ? ABitOfEverything_Nested.fromJSON(object.singleNested) : undefined,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      nested: globalThis.Array.isArray(object?.nested)
        ? object.nested.map((e: any) => ABitOfEverything_Nested.fromJSON(e))
        : [],
      floatValue: isSet(object.floatValue) ? globalThis.Number(object.floatValue) : 0,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : 0,
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : Long.ZERO,
      uint64Value: isSet(object.uint64Value) ? Long.fromValue(object.uint64Value) : Long.UZERO,
      int32Value: isSet(object.int32Value) ? globalThis.Number(object.int32Value) : 0,
      fixed64Value: isSet(object.fixed64Value) ? Long.fromValue(object.fixed64Value) : Long.UZERO,
      fixed32Value: isSet(object.fixed32Value) ? globalThis.Number(object.fixed32Value) : 0,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : false,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : "",
      bytesValue: isSet(object.bytesValue) ? Buffer.from(bytesFromBase64(object.bytesValue)) : Buffer.alloc(0),
      uint32Value: isSet(object.uint32Value) ? globalThis.Number(object.uint32Value) : 0,
      enumValue: isSet(object.enumValue) ? numericEnumFromJSON(object.enumValue) : 0,
      pathEnumValue: isSet(object.pathEnumValue) ? pathEnumFromJSON(object.pathEnumValue) : 0,
      nestedPathEnumValue: isSet(object.nestedPathEnumValue)
        ? messagePathEnum_NestedPathEnumFromJSON(object.nestedPathEnumValue)
        : 0,
      sfixed32Value: isSet(object.sfixed32Value) ? globalThis.Number(object.sfixed32Value) : 0,
      sfixed64Value: isSet(object.sfixed64Value) ? Long.fromValue(object.sfixed64Value) : Long.ZERO,
      sint32Value: isSet(object.sint32Value) ? globalThis.Number(object.sint32Value) : 0,
      sint64Value: isSet(object.sint64Value) ? Long.fromValue(object.sint64Value) : Long.ZERO,
      repeatedStringValue: globalThis.Array.isArray(object?.repeatedStringValue)
        ? object.repeatedStringValue.map((e: any) => globalThis.String(e))
        : [],
      oneofEmpty: isSet(object.oneofEmpty) ? Empty.fromJSON(object.oneofEmpty) : undefined,
      oneofString: isSet(object.oneofString) ? globalThis.String(object.oneofString) : undefined,
      mapValue: isObject(object.mapValue)
        ? Object.entries(object.mapValue).reduce<{ [key: string]: NumericEnum }>((acc, [key, value]) => {
          acc[key] = numericEnumFromJSON(value);
          return acc;
        }, {})
        : {},
      mappedStringValue: isObject(object.mappedStringValue)
        ? Object.entries(object.mappedStringValue).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      mappedNestedValue: isObject(object.mappedNestedValue)
        ? Object.entries(object.mappedNestedValue).reduce<{ [key: string]: ABitOfEverything_Nested }>(
          (acc, [key, value]) => {
            acc[key] = ABitOfEverything_Nested.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      nonConventionalNameValue: isSet(object.nonConventionalNameValue)
        ? globalThis.String(object.nonConventionalNameValue)
        : "",
      timestampValue: isSet(object.timestampValue) ? fromJsonTimestamp(object.timestampValue) : undefined,
      repeatedEnumValue: globalThis.Array.isArray(object?.repeatedEnumValue)
        ? object.repeatedEnumValue.map((e: any) => numericEnumFromJSON(e))
        : [],
      repeatedEnumAnnotation: globalThis.Array.isArray(object?.repeatedEnumAnnotation)
        ? object.repeatedEnumAnnotation.map((e: any) => numericEnumFromJSON(e))
        : [],
      enumValueAnnotation: isSet(object.enumValueAnnotation) ? numericEnumFromJSON(object.enumValueAnnotation) : 0,
      repeatedStringAnnotation: globalThis.Array.isArray(object?.repeatedStringAnnotation)
        ? object.repeatedStringAnnotation.map((e: any) => globalThis.String(e))
        : [],
      repeatedNestedAnnotation: globalThis.Array.isArray(object?.repeatedNestedAnnotation)
        ? object.repeatedNestedAnnotation.map((e: any) => ABitOfEverything_Nested.fromJSON(e))
        : [],
      nestedAnnotation: isSet(object.nestedAnnotation)
        ? ABitOfEverything_Nested.fromJSON(object.nestedAnnotation)
        : undefined,
      int64OverrideType: isSet(object.int64OverrideType) ? Long.fromValue(object.int64OverrideType) : Long.ZERO,
      requiredStringViaFieldBehaviorAnnotation: isSet(object.requiredStringViaFieldBehaviorAnnotation)
        ? globalThis.String(object.requiredStringViaFieldBehaviorAnnotation)
        : "",
      outputOnlyStringViaFieldBehaviorAnnotation: isSet(object.outputOnlyStringViaFieldBehaviorAnnotation)
        ? globalThis.String(object.outputOnlyStringViaFieldBehaviorAnnotation)
        : "",
      optionalStringValue: isSet(object.optionalStringValue)
        ? globalThis.String(object.optionalStringValue)
        : undefined,
      productId: globalThis.Array.isArray(object?.productId)
        ? object.productId.map((e: any) => globalThis.String(e))
        : [],
      optionalStringField: isSet(object.optionalStringField) ? globalThis.String(object.optionalStringField) : "",
      requiredStringField1: isSet(object.requiredStringField1) ? globalThis.String(object.requiredStringField1) : "",
      requiredStringField2: isSet(object.requiredStringField2) ? globalThis.String(object.requiredStringField2) : "",
      requiredFieldBehaviorJsonName: isSet(object.required_field_behavior_json_name_custom)
        ? globalThis.String(object.required_field_behavior_json_name_custom)
        : "",
      requiredFieldSchemaJsonName: isSet(object.required_field_schema_json_name_custom)
        ? globalThis.String(object.required_field_schema_json_name_custom)
        : "",
      trailingOnly: isSet(object.trailingOnly) ? globalThis.String(object.trailingOnly) : "",
      trailingOnlyDot: isSet(object.trailingOnlyDot) ? globalThis.String(object.trailingOnlyDot) : "",
      trailingBoth: isSet(object.trailingBoth) ? globalThis.String(object.trailingBoth) : "",
      trailingMultiline: isSet(object.trailingMultiline) ? globalThis.String(object.trailingMultiline) : "",
      uuids: globalThis.Array.isArray(object?.uuids)
        ? object.uuids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ABitOfEverything): unknown {
    const obj: any = {};
    if (message.singleNested !== undefined) {
      obj.singleNested = ABitOfEverything_Nested.toJSON(message.singleNested);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.nested?.length) {
      obj.nested = message.nested.map((e) => ABitOfEverything_Nested.toJSON(e));
    }
    if (message.floatValue !== 0) {
      obj.floatValue = message.floatValue;
    }
    if (message.doubleValue !== 0) {
      obj.doubleValue = message.doubleValue;
    }
    if (!message.int64Value.equals(Long.ZERO)) {
      obj.int64Value = (message.int64Value || Long.ZERO).toString();
    }
    if (!message.uint64Value.equals(Long.UZERO)) {
      obj.uint64Value = (message.uint64Value || Long.UZERO).toString();
    }
    if (message.int32Value !== 0) {
      obj.int32Value = Math.round(message.int32Value);
    }
    if (!message.fixed64Value.equals(Long.UZERO)) {
      obj.fixed64Value = (message.fixed64Value || Long.UZERO).toString();
    }
    if (message.fixed32Value !== 0) {
      obj.fixed32Value = Math.round(message.fixed32Value);
    }
    if (message.boolValue !== false) {
      obj.boolValue = message.boolValue;
    }
    if (message.stringValue !== "") {
      obj.stringValue = message.stringValue;
    }
    if (message.bytesValue.length !== 0) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.uint32Value !== 0) {
      obj.uint32Value = Math.round(message.uint32Value);
    }
    if (message.enumValue !== 0) {
      obj.enumValue = numericEnumToJSON(message.enumValue);
    }
    if (message.pathEnumValue !== 0) {
      obj.pathEnumValue = pathEnumToJSON(message.pathEnumValue);
    }
    if (message.nestedPathEnumValue !== 0) {
      obj.nestedPathEnumValue = messagePathEnum_NestedPathEnumToJSON(message.nestedPathEnumValue);
    }
    if (message.sfixed32Value !== 0) {
      obj.sfixed32Value = Math.round(message.sfixed32Value);
    }
    if (!message.sfixed64Value.equals(Long.ZERO)) {
      obj.sfixed64Value = (message.sfixed64Value || Long.ZERO).toString();
    }
    if (message.sint32Value !== 0) {
      obj.sint32Value = Math.round(message.sint32Value);
    }
    if (!message.sint64Value.equals(Long.ZERO)) {
      obj.sint64Value = (message.sint64Value || Long.ZERO).toString();
    }
    if (message.repeatedStringValue?.length) {
      obj.repeatedStringValue = message.repeatedStringValue;
    }
    if (message.oneofEmpty !== undefined) {
      obj.oneofEmpty = Empty.toJSON(message.oneofEmpty);
    }
    if (message.oneofString !== undefined) {
      obj.oneofString = message.oneofString;
    }
    if (message.mapValue) {
      const entries = Object.entries(message.mapValue);
      if (entries.length > 0) {
        obj.mapValue = {};
        entries.forEach(([k, v]) => {
          obj.mapValue[k] = numericEnumToJSON(v);
        });
      }
    }
    if (message.mappedStringValue) {
      const entries = Object.entries(message.mappedStringValue);
      if (entries.length > 0) {
        obj.mappedStringValue = {};
        entries.forEach(([k, v]) => {
          obj.mappedStringValue[k] = v;
        });
      }
    }
    if (message.mappedNestedValue) {
      const entries = Object.entries(message.mappedNestedValue);
      if (entries.length > 0) {
        obj.mappedNestedValue = {};
        entries.forEach(([k, v]) => {
          obj.mappedNestedValue[k] = ABitOfEverything_Nested.toJSON(v);
        });
      }
    }
    if (message.nonConventionalNameValue !== "") {
      obj.nonConventionalNameValue = message.nonConventionalNameValue;
    }
    if (message.timestampValue !== undefined) {
      obj.timestampValue = message.timestampValue.toISOString();
    }
    if (message.repeatedEnumValue?.length) {
      obj.repeatedEnumValue = message.repeatedEnumValue.map((e) => numericEnumToJSON(e));
    }
    if (message.repeatedEnumAnnotation?.length) {
      obj.repeatedEnumAnnotation = message.repeatedEnumAnnotation.map((e) => numericEnumToJSON(e));
    }
    if (message.enumValueAnnotation !== 0) {
      obj.enumValueAnnotation = numericEnumToJSON(message.enumValueAnnotation);
    }
    if (message.repeatedStringAnnotation?.length) {
      obj.repeatedStringAnnotation = message.repeatedStringAnnotation;
    }
    if (message.repeatedNestedAnnotation?.length) {
      obj.repeatedNestedAnnotation = message.repeatedNestedAnnotation.map((e) => ABitOfEverything_Nested.toJSON(e));
    }
    if (message.nestedAnnotation !== undefined) {
      obj.nestedAnnotation = ABitOfEverything_Nested.toJSON(message.nestedAnnotation);
    }
    if (!message.int64OverrideType.equals(Long.ZERO)) {
      obj.int64OverrideType = (message.int64OverrideType || Long.ZERO).toString();
    }
    if (message.requiredStringViaFieldBehaviorAnnotation !== "") {
      obj.requiredStringViaFieldBehaviorAnnotation = message.requiredStringViaFieldBehaviorAnnotation;
    }
    if (message.outputOnlyStringViaFieldBehaviorAnnotation !== "") {
      obj.outputOnlyStringViaFieldBehaviorAnnotation = message.outputOnlyStringViaFieldBehaviorAnnotation;
    }
    if (message.optionalStringValue !== undefined) {
      obj.optionalStringValue = message.optionalStringValue;
    }
    if (message.productId?.length) {
      obj.productId = message.productId;
    }
    if (message.optionalStringField !== "") {
      obj.optionalStringField = message.optionalStringField;
    }
    if (message.requiredStringField1 !== "") {
      obj.requiredStringField1 = message.requiredStringField1;
    }
    if (message.requiredStringField2 !== "") {
      obj.requiredStringField2 = message.requiredStringField2;
    }
    if (message.requiredFieldBehaviorJsonName !== "") {
      obj.required_field_behavior_json_name_custom = message.requiredFieldBehaviorJsonName;
    }
    if (message.requiredFieldSchemaJsonName !== "") {
      obj.required_field_schema_json_name_custom = message.requiredFieldSchemaJsonName;
    }
    if (message.trailingOnly !== "") {
      obj.trailingOnly = message.trailingOnly;
    }
    if (message.trailingOnlyDot !== "") {
      obj.trailingOnlyDot = message.trailingOnlyDot;
    }
    if (message.trailingBoth !== "") {
      obj.trailingBoth = message.trailingBoth;
    }
    if (message.trailingMultiline !== "") {
      obj.trailingMultiline = message.trailingMultiline;
    }
    if (message.uuids?.length) {
      obj.uuids = message.uuids;
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything>): ABitOfEverything {
    return ABitOfEverything.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything>): ABitOfEverything {
    const message = createBaseABitOfEverything();
    message.singleNested = (object.singleNested !== undefined && object.singleNested !== null)
      ? ABitOfEverything_Nested.fromPartial(object.singleNested)
      : undefined;
    message.uuid = object.uuid ?? "";
    message.nested = object.nested?.map((e) => ABitOfEverything_Nested.fromPartial(e)) || [];
    message.floatValue = object.floatValue ?? 0;
    message.doubleValue = object.doubleValue ?? 0;
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : Long.ZERO;
    message.uint64Value = (object.uint64Value !== undefined && object.uint64Value !== null)
      ? Long.fromValue(object.uint64Value)
      : Long.UZERO;
    message.int32Value = object.int32Value ?? 0;
    message.fixed64Value = (object.fixed64Value !== undefined && object.fixed64Value !== null)
      ? Long.fromValue(object.fixed64Value)
      : Long.UZERO;
    message.fixed32Value = object.fixed32Value ?? 0;
    message.boolValue = object.boolValue ?? false;
    message.stringValue = object.stringValue ?? "";
    message.bytesValue = object.bytesValue ?? Buffer.alloc(0);
    message.uint32Value = object.uint32Value ?? 0;
    message.enumValue = object.enumValue ?? 0;
    message.pathEnumValue = object.pathEnumValue ?? 0;
    message.nestedPathEnumValue = object.nestedPathEnumValue ?? 0;
    message.sfixed32Value = object.sfixed32Value ?? 0;
    message.sfixed64Value = (object.sfixed64Value !== undefined && object.sfixed64Value !== null)
      ? Long.fromValue(object.sfixed64Value)
      : Long.ZERO;
    message.sint32Value = object.sint32Value ?? 0;
    message.sint64Value = (object.sint64Value !== undefined && object.sint64Value !== null)
      ? Long.fromValue(object.sint64Value)
      : Long.ZERO;
    message.repeatedStringValue = object.repeatedStringValue?.map((e) => e) || [];
    message.oneofEmpty = (object.oneofEmpty !== undefined && object.oneofEmpty !== null)
      ? Empty.fromPartial(object.oneofEmpty)
      : undefined;
    message.oneofString = object.oneofString ?? undefined;
    message.mapValue = Object.entries(object.mapValue ?? {}).reduce<{ [key: string]: NumericEnum }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value as NumericEnum;
        }
        return acc;
      },
      {},
    );
    message.mappedStringValue = Object.entries(object.mappedStringValue ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.mappedNestedValue = Object.entries(object.mappedNestedValue ?? {}).reduce<
      { [key: string]: ABitOfEverything_Nested }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ABitOfEverything_Nested.fromPartial(value);
      }
      return acc;
    }, {});
    message.nonConventionalNameValue = object.nonConventionalNameValue ?? "";
    message.timestampValue = object.timestampValue ?? undefined;
    message.repeatedEnumValue = object.repeatedEnumValue?.map((e) => e) || [];
    message.repeatedEnumAnnotation = object.repeatedEnumAnnotation?.map((e) => e) || [];
    message.enumValueAnnotation = object.enumValueAnnotation ?? 0;
    message.repeatedStringAnnotation = object.repeatedStringAnnotation?.map((e) => e) || [];
    message.repeatedNestedAnnotation =
      object.repeatedNestedAnnotation?.map((e) => ABitOfEverything_Nested.fromPartial(e)) || [];
    message.nestedAnnotation = (object.nestedAnnotation !== undefined && object.nestedAnnotation !== null)
      ? ABitOfEverything_Nested.fromPartial(object.nestedAnnotation)
      : undefined;
    message.int64OverrideType = (object.int64OverrideType !== undefined && object.int64OverrideType !== null)
      ? Long.fromValue(object.int64OverrideType)
      : Long.ZERO;
    message.requiredStringViaFieldBehaviorAnnotation = object.requiredStringViaFieldBehaviorAnnotation ?? "";
    message.outputOnlyStringViaFieldBehaviorAnnotation = object.outputOnlyStringViaFieldBehaviorAnnotation ?? "";
    message.optionalStringValue = object.optionalStringValue ?? undefined;
    message.productId = object.productId?.map((e) => e) || [];
    message.optionalStringField = object.optionalStringField ?? "";
    message.requiredStringField1 = object.requiredStringField1 ?? "";
    message.requiredStringField2 = object.requiredStringField2 ?? "";
    message.requiredFieldBehaviorJsonName = object.requiredFieldBehaviorJsonName ?? "";
    message.requiredFieldSchemaJsonName = object.requiredFieldSchemaJsonName ?? "";
    message.trailingOnly = object.trailingOnly ?? "";
    message.trailingOnlyDot = object.trailingOnlyDot ?? "";
    message.trailingBoth = object.trailingBoth ?? "";
    message.trailingMultiline = object.trailingMultiline ?? "";
    message.uuids = object.uuids?.map((e) => e) || [];
    return message;
  },
};

function createBaseABitOfEverything_Nested(): ABitOfEverything_Nested {
  return { name: "", amount: 0, ok: 0 };
}

export const ABitOfEverything_Nested: MessageFns<ABitOfEverything_Nested> = {
  encode(message: ABitOfEverything_Nested, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint32(message.amount);
    }
    if (message.ok !== 0) {
      writer.uint32(24).int32(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_Nested {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_Nested();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.amount = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ok = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_Nested {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      ok: isSet(object.ok) ? aBitOfEverything_Nested_DeepEnumFromJSON(object.ok) : 0,
    };
  },

  toJSON(message: ABitOfEverything_Nested): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.ok !== 0) {
      obj.ok = aBitOfEverything_Nested_DeepEnumToJSON(message.ok);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_Nested>): ABitOfEverything_Nested {
    return ABitOfEverything_Nested.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_Nested>): ABitOfEverything_Nested {
    const message = createBaseABitOfEverything_Nested();
    message.name = object.name ?? "";
    message.amount = object.amount ?? 0;
    message.ok = object.ok ?? 0;
    return message;
  },
};

function createBaseABitOfEverything_MapValueEntry(): ABitOfEverything_MapValueEntry {
  return { key: "", value: 0 };
}

export const ABitOfEverything_MapValueEntry: MessageFns<ABitOfEverything_MapValueEntry> = {
  encode(message: ABitOfEverything_MapValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_MapValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_MapValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_MapValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? numericEnumFromJSON(object.value) : 0,
    };
  },

  toJSON(message: ABitOfEverything_MapValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = numericEnumToJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_MapValueEntry>): ABitOfEverything_MapValueEntry {
    return ABitOfEverything_MapValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_MapValueEntry>): ABitOfEverything_MapValueEntry {
    const message = createBaseABitOfEverything_MapValueEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseABitOfEverything_MappedStringValueEntry(): ABitOfEverything_MappedStringValueEntry {
  return { key: "", value: "" };
}

export const ABitOfEverything_MappedStringValueEntry: MessageFns<ABitOfEverything_MappedStringValueEntry> = {
  encode(message: ABitOfEverything_MappedStringValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_MappedStringValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_MappedStringValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_MappedStringValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ABitOfEverything_MappedStringValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_MappedStringValueEntry>): ABitOfEverything_MappedStringValueEntry {
    return ABitOfEverything_MappedStringValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_MappedStringValueEntry>): ABitOfEverything_MappedStringValueEntry {
    const message = createBaseABitOfEverything_MappedStringValueEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseABitOfEverything_MappedNestedValueEntry(): ABitOfEverything_MappedNestedValueEntry {
  return { key: "", value: undefined };
}

export const ABitOfEverything_MappedNestedValueEntry: MessageFns<ABitOfEverything_MappedNestedValueEntry> = {
  encode(message: ABitOfEverything_MappedNestedValueEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ABitOfEverything_Nested.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverything_MappedNestedValueEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverything_MappedNestedValueEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ABitOfEverything_Nested.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverything_MappedNestedValueEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ABitOfEverything_Nested.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ABitOfEverything_MappedNestedValueEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ABitOfEverything_Nested.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverything_MappedNestedValueEntry>): ABitOfEverything_MappedNestedValueEntry {
    return ABitOfEverything_MappedNestedValueEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverything_MappedNestedValueEntry>): ABitOfEverything_MappedNestedValueEntry {
    const message = createBaseABitOfEverything_MappedNestedValueEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ABitOfEverything_Nested.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseABitOfEverythingRepeated(): ABitOfEverythingRepeated {
  return {
    pathRepeatedFloatValue: [],
    pathRepeatedDoubleValue: [],
    pathRepeatedInt64Value: [],
    pathRepeatedUint64Value: [],
    pathRepeatedInt32Value: [],
    pathRepeatedFixed64Value: [],
    pathRepeatedFixed32Value: [],
    pathRepeatedBoolValue: [],
    pathRepeatedStringValue: [],
    pathRepeatedBytesValue: [],
    pathRepeatedUint32Value: [],
    pathRepeatedEnumValue: [],
    pathRepeatedSfixed32Value: [],
    pathRepeatedSfixed64Value: [],
    pathRepeatedSint32Value: [],
    pathRepeatedSint64Value: [],
  };
}

export const ABitOfEverythingRepeated: MessageFns<ABitOfEverythingRepeated> = {
  encode(message: ABitOfEverythingRepeated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.pathRepeatedFloatValue) {
      writer.float(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.pathRepeatedDoubleValue) {
      writer.double(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.pathRepeatedInt64Value) {
      writer.int64(v.toString());
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.pathRepeatedUint64Value) {
      writer.uint64(v.toString());
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.pathRepeatedInt32Value) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(50).fork();
    for (const v of message.pathRepeatedFixed64Value) {
      writer.fixed64(v.toString());
    }
    writer.join();
    writer.uint32(58).fork();
    for (const v of message.pathRepeatedFixed32Value) {
      writer.fixed32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.pathRepeatedBoolValue) {
      writer.bool(v);
    }
    writer.join();
    for (const v of message.pathRepeatedStringValue) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.pathRepeatedBytesValue) {
      writer.uint32(82).bytes(v!);
    }
    writer.uint32(90).fork();
    for (const v of message.pathRepeatedUint32Value) {
      writer.uint32(v);
    }
    writer.join();
    writer.uint32(98).fork();
    for (const v of message.pathRepeatedEnumValue) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(106).fork();
    for (const v of message.pathRepeatedSfixed32Value) {
      writer.sfixed32(v);
    }
    writer.join();
    writer.uint32(114).fork();
    for (const v of message.pathRepeatedSfixed64Value) {
      writer.sfixed64(v.toString());
    }
    writer.join();
    writer.uint32(122).fork();
    for (const v of message.pathRepeatedSint32Value) {
      writer.sint32(v);
    }
    writer.join();
    writer.uint32(130).fork();
    for (const v of message.pathRepeatedSint64Value) {
      writer.sint64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ABitOfEverythingRepeated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseABitOfEverythingRepeated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.pathRepeatedFloatValue.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedFloatValue.push(reader.float());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 17) {
            message.pathRepeatedDoubleValue.push(reader.double());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedDoubleValue.push(reader.double());
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.pathRepeatedInt64Value.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedInt64Value.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.pathRepeatedUint64Value.push(Long.fromString(reader.uint64().toString(), true));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedUint64Value.push(Long.fromString(reader.uint64().toString(), true));
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.pathRepeatedInt32Value.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedInt32Value.push(reader.int32());
            }

            continue;
          }

          break;
        case 6:
          if (tag === 49) {
            message.pathRepeatedFixed64Value.push(Long.fromString(reader.fixed64().toString(), true));

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedFixed64Value.push(Long.fromString(reader.fixed64().toString(), true));
            }

            continue;
          }

          break;
        case 7:
          if (tag === 61) {
            message.pathRepeatedFixed32Value.push(reader.fixed32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedFixed32Value.push(reader.fixed32());
            }

            continue;
          }

          break;
        case 8:
          if (tag === 64) {
            message.pathRepeatedBoolValue.push(reader.bool());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedBoolValue.push(reader.bool());
            }

            continue;
          }

          break;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.pathRepeatedStringValue.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.pathRepeatedBytesValue.push(Buffer.from(reader.bytes()));
          continue;
        case 11:
          if (tag === 88) {
            message.pathRepeatedUint32Value.push(reader.uint32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedUint32Value.push(reader.uint32());
            }

            continue;
          }

          break;
        case 12:
          if (tag === 96) {
            message.pathRepeatedEnumValue.push(reader.int32() as any);

            continue;
          }

          if (tag === 98) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedEnumValue.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 13:
          if (tag === 109) {
            message.pathRepeatedSfixed32Value.push(reader.sfixed32());

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSfixed32Value.push(reader.sfixed32());
            }

            continue;
          }

          break;
        case 14:
          if (tag === 113) {
            message.pathRepeatedSfixed64Value.push(Long.fromString(reader.sfixed64().toString()));

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSfixed64Value.push(Long.fromString(reader.sfixed64().toString()));
            }

            continue;
          }

          break;
        case 15:
          if (tag === 120) {
            message.pathRepeatedSint32Value.push(reader.sint32());

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSint32Value.push(reader.sint32());
            }

            continue;
          }

          break;
        case 16:
          if (tag === 128) {
            message.pathRepeatedSint64Value.push(Long.fromString(reader.sint64().toString()));

            continue;
          }

          if (tag === 130) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pathRepeatedSint64Value.push(Long.fromString(reader.sint64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ABitOfEverythingRepeated {
    return {
      pathRepeatedFloatValue: globalThis.Array.isArray(object?.pathRepeatedFloatValue)
        ? object.pathRepeatedFloatValue.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedDoubleValue: globalThis.Array.isArray(object?.pathRepeatedDoubleValue)
        ? object.pathRepeatedDoubleValue.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedInt64Value: globalThis.Array.isArray(object?.pathRepeatedInt64Value)
        ? object.pathRepeatedInt64Value.map((e: any) => Long.fromValue(e))
        : [],
      pathRepeatedUint64Value: globalThis.Array.isArray(object?.pathRepeatedUint64Value)
        ? object.pathRepeatedUint64Value.map((e: any) => Long.fromValue(e))
        : [],
      pathRepeatedInt32Value: globalThis.Array.isArray(object?.pathRepeatedInt32Value)
        ? object.pathRepeatedInt32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedFixed64Value: globalThis.Array.isArray(object?.pathRepeatedFixed64Value)
        ? object.pathRepeatedFixed64Value.map((e: any) => Long.fromValue(e))
        : [],
      pathRepeatedFixed32Value: globalThis.Array.isArray(object?.pathRepeatedFixed32Value)
        ? object.pathRepeatedFixed32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedBoolValue: globalThis.Array.isArray(object?.pathRepeatedBoolValue)
        ? object.pathRepeatedBoolValue.map((e: any) => globalThis.Boolean(e))
        : [],
      pathRepeatedStringValue: globalThis.Array.isArray(object?.pathRepeatedStringValue)
        ? object.pathRepeatedStringValue.map((e: any) => globalThis.String(e))
        : [],
      pathRepeatedBytesValue: globalThis.Array.isArray(object?.pathRepeatedBytesValue)
        ? object.pathRepeatedBytesValue.map((e: any) => Buffer.from(bytesFromBase64(e)))
        : [],
      pathRepeatedUint32Value: globalThis.Array.isArray(object?.pathRepeatedUint32Value)
        ? object.pathRepeatedUint32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedEnumValue: globalThis.Array.isArray(object?.pathRepeatedEnumValue)
        ? object.pathRepeatedEnumValue.map((e: any) => numericEnumFromJSON(e))
        : [],
      pathRepeatedSfixed32Value: globalThis.Array.isArray(object?.pathRepeatedSfixed32Value)
        ? object.pathRepeatedSfixed32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedSfixed64Value: globalThis.Array.isArray(object?.pathRepeatedSfixed64Value)
        ? object.pathRepeatedSfixed64Value.map((e: any) => Long.fromValue(e))
        : [],
      pathRepeatedSint32Value: globalThis.Array.isArray(object?.pathRepeatedSint32Value)
        ? object.pathRepeatedSint32Value.map((e: any) => globalThis.Number(e))
        : [],
      pathRepeatedSint64Value: globalThis.Array.isArray(object?.pathRepeatedSint64Value)
        ? object.pathRepeatedSint64Value.map((e: any) => Long.fromValue(e))
        : [],
    };
  },

  toJSON(message: ABitOfEverythingRepeated): unknown {
    const obj: any = {};
    if (message.pathRepeatedFloatValue?.length) {
      obj.pathRepeatedFloatValue = message.pathRepeatedFloatValue;
    }
    if (message.pathRepeatedDoubleValue?.length) {
      obj.pathRepeatedDoubleValue = message.pathRepeatedDoubleValue;
    }
    if (message.pathRepeatedInt64Value?.length) {
      obj.pathRepeatedInt64Value = message.pathRepeatedInt64Value.map((e) => (e || Long.ZERO).toString());
    }
    if (message.pathRepeatedUint64Value?.length) {
      obj.pathRepeatedUint64Value = message.pathRepeatedUint64Value.map((e) => (e || Long.UZERO).toString());
    }
    if (message.pathRepeatedInt32Value?.length) {
      obj.pathRepeatedInt32Value = message.pathRepeatedInt32Value.map((e) => Math.round(e));
    }
    if (message.pathRepeatedFixed64Value?.length) {
      obj.pathRepeatedFixed64Value = message.pathRepeatedFixed64Value.map((e) => (e || Long.UZERO).toString());
    }
    if (message.pathRepeatedFixed32Value?.length) {
      obj.pathRepeatedFixed32Value = message.pathRepeatedFixed32Value.map((e) => Math.round(e));
    }
    if (message.pathRepeatedBoolValue?.length) {
      obj.pathRepeatedBoolValue = message.pathRepeatedBoolValue;
    }
    if (message.pathRepeatedStringValue?.length) {
      obj.pathRepeatedStringValue = message.pathRepeatedStringValue;
    }
    if (message.pathRepeatedBytesValue?.length) {
      obj.pathRepeatedBytesValue = message.pathRepeatedBytesValue.map((e) => base64FromBytes(e));
    }
    if (message.pathRepeatedUint32Value?.length) {
      obj.pathRepeatedUint32Value = message.pathRepeatedUint32Value.map((e) => Math.round(e));
    }
    if (message.pathRepeatedEnumValue?.length) {
      obj.pathRepeatedEnumValue = message.pathRepeatedEnumValue.map((e) => numericEnumToJSON(e));
    }
    if (message.pathRepeatedSfixed32Value?.length) {
      obj.pathRepeatedSfixed32Value = message.pathRepeatedSfixed32Value.map((e) => Math.round(e));
    }
    if (message.pathRepeatedSfixed64Value?.length) {
      obj.pathRepeatedSfixed64Value = message.pathRepeatedSfixed64Value.map((e) => (e || Long.ZERO).toString());
    }
    if (message.pathRepeatedSint32Value?.length) {
      obj.pathRepeatedSint32Value = message.pathRepeatedSint32Value.map((e) => Math.round(e));
    }
    if (message.pathRepeatedSint64Value?.length) {
      obj.pathRepeatedSint64Value = message.pathRepeatedSint64Value.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<ABitOfEverythingRepeated>): ABitOfEverythingRepeated {
    return ABitOfEverythingRepeated.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ABitOfEverythingRepeated>): ABitOfEverythingRepeated {
    const message = createBaseABitOfEverythingRepeated();
    message.pathRepeatedFloatValue = object.pathRepeatedFloatValue?.map((e) => e) || [];
    message.pathRepeatedDoubleValue = object.pathRepeatedDoubleValue?.map((e) => e) || [];
    message.pathRepeatedInt64Value = object.pathRepeatedInt64Value?.map((e) => Long.fromValue(e)) || [];
    message.pathRepeatedUint64Value = object.pathRepeatedUint64Value?.map((e) => Long.fromValue(e)) || [];
    message.pathRepeatedInt32Value = object.pathRepeatedInt32Value?.map((e) => e) || [];
    message.pathRepeatedFixed64Value = object.pathRepeatedFixed64Value?.map((e) => Long.fromValue(e)) || [];
    message.pathRepeatedFixed32Value = object.pathRepeatedFixed32Value?.map((e) => e) || [];
    message.pathRepeatedBoolValue = object.pathRepeatedBoolValue?.map((e) => e) || [];
    message.pathRepeatedStringValue = object.pathRepeatedStringValue?.map((e) => e) || [];
    message.pathRepeatedBytesValue = object.pathRepeatedBytesValue?.map((e) => e) || [];
    message.pathRepeatedUint32Value = object.pathRepeatedUint32Value?.map((e) => e) || [];
    message.pathRepeatedEnumValue = object.pathRepeatedEnumValue?.map((e) => e) || [];
    message.pathRepeatedSfixed32Value = object.pathRepeatedSfixed32Value?.map((e) => e) || [];
    message.pathRepeatedSfixed64Value = object.pathRepeatedSfixed64Value?.map((e) => Long.fromValue(e)) || [];
    message.pathRepeatedSint32Value = object.pathRepeatedSint32Value?.map((e) => e) || [];
    message.pathRepeatedSint64Value = object.pathRepeatedSint64Value?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

function createBaseCheckStatusResponse(): CheckStatusResponse {
  return { status: undefined };
}

export const CheckStatusResponse: MessageFns<CheckStatusResponse> = {
  encode(message: CheckStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckStatusResponse {
    return { status: isSet(object.status) ? Status.fromJSON(object.status) : undefined };
  },

  toJSON(message: CheckStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<CheckStatusResponse>): CheckStatusResponse {
    return CheckStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckStatusResponse>): CheckStatusResponse {
    const message = createBaseCheckStatusResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseBody(): Body {
  return { name: "" };
}

export const Body: MessageFns<Body> = {
  encode(message: Body, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Body {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Body {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Body): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Body>): Body {
    return Body.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Body>): Body {
    const message = createBaseBody();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMessageWithBody(): MessageWithBody {
  return { id: "", data: undefined };
}

export const MessageWithBody: MessageFns<MessageWithBody> = {
  encode(message: MessageWithBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      Body.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageWithBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageWithBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = Body.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageWithBody {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? Body.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: MessageWithBody): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data !== undefined) {
      obj.data = Body.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<MessageWithBody>): MessageWithBody {
    return MessageWithBody.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageWithBody>): MessageWithBody {
    const message = createBaseMessageWithBody();
    message.id = object.id ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Body.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseUpdateV2Request(): UpdateV2Request {
  return { abe: undefined, updateMask: undefined };
}

export const UpdateV2Request: MessageFns<UpdateV2Request> = {
  encode(message: UpdateV2Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.abe !== undefined) {
      ABitOfEverything.encode(message.abe, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateV2Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateV2Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.abe = ABitOfEverything.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateV2Request {
    return {
      abe: isSet(object.abe) ? ABitOfEverything.fromJSON(object.abe) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateV2Request): unknown {
    const obj: any = {};
    if (message.abe !== undefined) {
      obj.abe = ABitOfEverything.toJSON(message.abe);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateV2Request>): UpdateV2Request {
    return UpdateV2Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateV2Request>): UpdateV2Request {
    const message = createBaseUpdateV2Request();
    message.abe = (object.abe !== undefined && object.abe !== null)
      ? ABitOfEverything.fromPartial(object.abe)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseBook(): Book {
  return { name: "", id: "", createTime: undefined };
}

export const Book: MessageFns<Book> = {
  encode(message: Book, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Book {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Book {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: Book): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Book>): Book {
    return Book.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Book>): Book {
    const message = createBaseBook();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseCreateBookRequest(): CreateBookRequest {
  return { parent: "", book: undefined, bookId: "" };
}

export const CreateBookRequest: MessageFns<CreateBookRequest> = {
  encode(message: CreateBookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.book !== undefined) {
      Book.encode(message.book, writer.uint32(18).fork()).join();
    }
    if (message.bookId !== "") {
      writer.uint32(26).string(message.bookId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.book = Book.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bookId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBookRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      book: isSet(object.book) ? Book.fromJSON(object.book) : undefined,
      bookId: isSet(object.bookId) ? globalThis.String(object.bookId) : "",
    };
  },

  toJSON(message: CreateBookRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.book !== undefined) {
      obj.book = Book.toJSON(message.book);
    }
    if (message.bookId !== "") {
      obj.bookId = message.bookId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBookRequest>): CreateBookRequest {
    return CreateBookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBookRequest>): CreateBookRequest {
    const message = createBaseCreateBookRequest();
    message.parent = object.parent ?? "";
    message.book = (object.book !== undefined && object.book !== null) ? Book.fromPartial(object.book) : undefined;
    message.bookId = object.bookId ?? "";
    return message;
  },
};

function createBaseUpdateBookRequest(): UpdateBookRequest {
  return { book: undefined, updateMask: undefined, allowMissing: false };
}

export const UpdateBookRequest: MessageFns<UpdateBookRequest> = {
  encode(message: UpdateBookRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.book !== undefined) {
      Book.encode(message.book, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBookRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.book = Book.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBookRequest {
    return {
      book: isSet(object.book) ? Book.fromJSON(object.book) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateBookRequest): unknown {
    const obj: any = {};
    if (message.book !== undefined) {
      obj.book = Book.toJSON(message.book);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBookRequest>): UpdateBookRequest {
    return UpdateBookRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBookRequest>): UpdateBookRequest {
    const message = createBaseUpdateBookRequest();
    message.book = (object.book !== undefined && object.book !== null) ? Book.fromPartial(object.book) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseSnakeEnumRequest(): SnakeEnumRequest {
  return { what: 0, who: 0, where: 0 };
}

export const SnakeEnumRequest: MessageFns<SnakeEnumRequest> = {
  encode(message: SnakeEnumRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.what !== 0) {
      writer.uint32(8).int32(message.what);
    }
    if (message.who !== 0) {
      writer.uint32(16).int32(message.who);
    }
    if (message.where !== 0) {
      writer.uint32(24).int32(message.where);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SnakeEnumRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnakeEnumRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.what = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.who = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.where = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SnakeEnumRequest {
    return {
      what: isSet(object.what) ? snakeCaseEnumFromJSON(object.what) : 0,
      who: isSet(object.who) ? snakeCase0EnumFromJSON(object.who) : 0,
      where: isSet(object.where) ? snakeCaseForImportFromJSON(object.where) : 0,
    };
  },

  toJSON(message: SnakeEnumRequest): unknown {
    const obj: any = {};
    if (message.what !== 0) {
      obj.what = snakeCaseEnumToJSON(message.what);
    }
    if (message.who !== 0) {
      obj.who = snakeCase0EnumToJSON(message.who);
    }
    if (message.where !== 0) {
      obj.where = snakeCaseForImportToJSON(message.where);
    }
    return obj;
  },

  create(base?: DeepPartial<SnakeEnumRequest>): SnakeEnumRequest {
    return SnakeEnumRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SnakeEnumRequest>): SnakeEnumRequest {
    const message = createBaseSnakeEnumRequest();
    message.what = object.what ?? 0;
    message.who = object.who ?? 0;
    message.where = object.where ?? 0;
    return message;
  },
};

function createBaseSnakeEnumResponse(): SnakeEnumResponse {
  return {};
}

export const SnakeEnumResponse: MessageFns<SnakeEnumResponse> = {
  encode(_: SnakeEnumResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SnakeEnumResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnakeEnumResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SnakeEnumResponse {
    return {};
  },

  toJSON(_: SnakeEnumResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SnakeEnumResponse>): SnakeEnumResponse {
    return SnakeEnumResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SnakeEnumResponse>): SnakeEnumResponse {
    const message = createBaseSnakeEnumResponse();
    return message;
  },
};

function createBaseRequiredMessageTypeRequest(): RequiredMessageTypeRequest {
  return { id: "", foo: undefined };
}

export const RequiredMessageTypeRequest: MessageFns<RequiredMessageTypeRequest> = {
  encode(message: RequiredMessageTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.foo !== undefined) {
      Foo.encode(message.foo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequiredMessageTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequiredMessageTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.foo = Foo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequiredMessageTypeRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      foo: isSet(object.foo) ? Foo.fromJSON(object.foo) : undefined,
    };
  },

  toJSON(message: RequiredMessageTypeRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.foo !== undefined) {
      obj.foo = Foo.toJSON(message.foo);
    }
    return obj;
  },

  create(base?: DeepPartial<RequiredMessageTypeRequest>): RequiredMessageTypeRequest {
    return RequiredMessageTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequiredMessageTypeRequest>): RequiredMessageTypeRequest {
    const message = createBaseRequiredMessageTypeRequest();
    message.id = object.id ?? "";
    message.foo = (object.foo !== undefined && object.foo !== null) ? Foo.fromPartial(object.foo) : undefined;
    return message;
  },
};

function createBaseFoo(): Foo {
  return { bar: undefined };
}

export const Foo: MessageFns<Foo> = {
  encode(message: Foo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bar !== undefined) {
      Bar.encode(message.bar, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Foo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFoo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bar = Bar.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Foo {
    return { bar: isSet(object.bar) ? Bar.fromJSON(object.bar) : undefined };
  },

  toJSON(message: Foo): unknown {
    const obj: any = {};
    if (message.bar !== undefined) {
      obj.bar = Bar.toJSON(message.bar);
    }
    return obj;
  },

  create(base?: DeepPartial<Foo>): Foo {
    return Foo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Foo>): Foo {
    const message = createBaseFoo();
    message.bar = (object.bar !== undefined && object.bar !== null) ? Bar.fromPartial(object.bar) : undefined;
    return message;
  },
};

function createBaseBar(): Bar {
  return { id: "" };
}

export const Bar: MessageFns<Bar> = {
  encode(message: Bar, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bar {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bar {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Bar): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<Bar>): Bar {
    return Bar.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Bar>): Bar {
    const message = createBaseBar();
    message.id = object.id ?? "";
    return message;
  },
};

/**
 * ABitOfEverything service is used to validate that APIs with complicated
 * proto messages and URL templates are still processed correctly.
 */
export type ABitOfEverythingServiceDefinition = typeof ABitOfEverythingServiceDefinition;
export const ABitOfEverythingServiceDefinition = {
  name: "ABitOfEverythingService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.ABitOfEverythingService",
  methods: {
    /**
     * Create a new ABitOfEverything
     *
     * This API creates a new ABitOfEverything
     */
    create: {
      name: "Create",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              246,
              2,
              34,
              243,
              2,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              102,
              108,
              111,
              97,
              116,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              100,
              111,
              117,
              98,
              108,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              105,
              110,
              116,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              115,
              101,
              112,
              97,
              114,
              97,
              116,
              111,
              114,
              47,
              123,
              117,
              105,
              110,
              116,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              105,
              110,
              116,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              102,
              105,
              120,
              101,
              100,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              102,
              105,
              120,
              101,
              100,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              98,
              111,
              111,
              108,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              115,
              116,
              114,
              105,
              110,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              61,
              115,
              116,
              114,
              112,
              114,
              101,
              102,
              105,
              120,
              47,
              42,
              125,
              47,
              123,
              117,
              105,
              110,
              116,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              115,
              102,
              105,
              120,
              101,
              100,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              115,
              102,
              105,
              120,
              101,
              100,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              115,
              105,
              110,
              116,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              115,
              105,
              110,
              116,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              110,
              111,
              110,
              67,
              111,
              110,
              118,
              101,
              110,
              116,
              105,
              111,
              110,
              97,
              108,
              78,
              97,
              109,
              101,
              86,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              101,
              110,
              117,
              109,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              101,
              110,
              117,
              109,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              110,
              101,
              115,
              116,
              101,
              100,
              95,
              112,
              97,
              116,
              104,
              95,
              101,
              110,
              117,
              109,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              101,
              110,
              117,
              109,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              125,
            ]),
          ],
        },
      },
    },
    createBody: {
      name: "CreateBody",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              36,
              58,
              1,
              42,
              34,
              31,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
            ]),
          ],
        },
      },
    },
    /** Create a book. */
    createBook: {
      name: "CreateBook",
      requestType: CreateBookRequest,
      requestStream: false,
      responseType: Book,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              58,
              4,
              98,
              111,
              111,
              107,
              34,
              31,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              98,
              111,
              111,
              107,
              115,
            ]),
          ],
        },
      },
    },
    updateBook: {
      name: "UpdateBook",
      requestType: UpdateBookRequest,
      requestStream: false,
      responseType: Book,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              44,
              58,
              4,
              98,
              111,
              111,
              107,
              50,
              36,
              47,
              118,
              49,
              47,
              123,
              98,
              111,
              111,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              115,
              47,
              42,
              47,
              98,
              111,
              111,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    lookup: {
      name: "Lookup",
      requestType: IdMessage,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    custom: {
      name: "Custom",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              34,
              45,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
              58,
              99,
              117,
              115,
              116,
              111,
              109,
            ]),
          ],
        },
      },
    },
    doubleColon: {
      name: "DoubleColon",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              34,
              52,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
              58,
              99,
              117,
              115,
              116,
              111,
              109,
              58,
              99,
              117,
              115,
              116,
              111,
              109,
            ]),
          ],
        },
      },
    },
    update: {
      name: "Update",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              26,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    updateV2: {
      name: "UpdateV2",
      requestType: UpdateV2Request,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              150,
              1,
              58,
              3,
              97,
              98,
              101,
              90,
              49,
              58,
              3,
              97,
              98,
              101,
              50,
              42,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              97,
              98,
              101,
              46,
              117,
              117,
              105,
              100,
              125,
              90,
              48,
              58,
              1,
              42,
              50,
              43,
              47,
              118,
              50,
              97,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              97,
              98,
              101,
              46,
              117,
              117,
              105,
              100,
              125,
              26,
              42,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              97,
              98,
              101,
              46,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    delete: {
      name: "Delete",
      requestType: IdMessage,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              65,
              98,
              41,
              10,
              14,
              10,
              10,
              65,
              112,
              105,
              75,
              101,
              121,
              65,
              117,
              116,
              104,
              18,
              0,
              10,
              23,
              10,
              6,
              79,
              65,
              117,
              116,
              104,
              50,
              18,
              13,
              10,
              4,
              114,
              101,
              97,
              100,
              10,
              5,
              119,
              114,
              105,
              116,
              101,
              106,
              20,
              10,
              14,
              120,
              45,
              105,
              114,
              114,
              101,
              118,
              101,
              114,
              115,
              105,
              98,
              108,
              101,
              18,
              2,
              32,
              1,
            ]),
          ],
          578365826: [
            Buffer.from([
              40,
              42,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getQuery: {
      name: "GetQuery",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              84,
              34,
              78,
              10,
              28,
              70,
              105,
              110,
              100,
              32,
              111,
              117,
              116,
              32,
              109,
              111,
              114,
              101,
              32,
              97,
              98,
              111,
              117,
              116,
              32,
              71,
              101,
              116,
              81,
              117,
              101,
              114,
              121,
              18,
              46,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              46,
              99,
              111,
              109,
              47,
              103,
              114,
              112,
              99,
              45,
              101,
              99,
              111,
              115,
              121,
              115,
              116,
              101,
              109,
              47,
              103,
              114,
              112,
              99,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              88,
              1,
              98,
              0,
            ]),
          ],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              113,
              117,
              101,
              114,
              121,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getRepeatedQuery: {
      name: "GetRepeatedQuery",
      requestType: ABitOfEverythingRepeated,
      requestStream: false,
      responseType: ABitOfEverythingRepeated,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              249,
              3,
              18,
              246,
              3,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              102,
              108,
              111,
              97,
              116,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              100,
              111,
              117,
              98,
              108,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              105,
              110,
              116,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              117,
              105,
              110,
              116,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              105,
              110,
              116,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              102,
              105,
              120,
              101,
              100,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              102,
              105,
              120,
              101,
              100,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              98,
              111,
              111,
              108,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              115,
              116,
              114,
              105,
              110,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              98,
              121,
              116,
              101,
              115,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              117,
              105,
              110,
              116,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              101,
              110,
              117,
              109,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              115,
              102,
              105,
              120,
              101,
              100,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              115,
              102,
              105,
              120,
              101,
              100,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              115,
              105,
              110,
              116,
              51,
              50,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
              47,
              123,
              112,
              97,
              116,
              104,
              95,
              114,
              101,
              112,
              101,
              97,
              116,
              101,
              100,
              95,
              115,
              105,
              110,
              116,
              54,
              52,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Echo allows posting a StringMessage value.
     *
     * It also exposes multiple bindings.
     *
     * This makes it useful when validating that the OpenAPI v2 API
     * description exposes documentation correctly on all paths
     * defined as additional_bindings in the proto.
     */
    echo: {
      name: "Echo",
      requestType: StringMessage,
      requestStream: false,
      responseType: StringMessage,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              197,
              2,
              10,
              8,
              101,
              99,
              104,
              111,
              32,
              114,
              112,
              99,
              18,
              17,
              83,
              117,
              109,
              109,
              97,
              114,
              121,
              58,
              32,
              69,
              99,
              104,
              111,
              32,
              114,
              112,
              99,
              26,
              16,
              68,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              32,
              69,
              99,
              104,
              111,
              34,
              68,
              10,
              18,
              70,
              105,
              110,
              100,
              32,
              111,
              117,
              116,
              32,
              109,
              111,
              114,
              101,
              32,
              69,
              99,
              104,
              111,
              18,
              46,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              46,
              99,
              111,
              109,
              47,
              103,
              114,
              112,
              99,
              45,
              101,
              99,
              111,
              115,
              121,
              115,
              116,
              101,
              109,
              47,
              103,
              114,
              112,
              99,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              74,
              57,
              10,
              3,
              50,
              48,
              48,
              18,
              50,
              34,
              48,
              10,
              16,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              18,
              28,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              32,
              34,
              116,
              104,
              101,
              32,
              105,
              110,
              112,
              117,
              116,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              74,
              59,
              10,
              3,
              52,
              48,
              52,
              18,
              52,
              10,
              42,
              82,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              100,
              111,
              101,
              115,
              32,
              110,
              111,
              116,
              32,
              101,
              120,
              105,
              115,
              116,
              46,
              18,
              6,
              10,
              4,
              154,
              2,
              1,
              3,
              74,
              86,
              10,
              3,
              53,
              48,
              51,
              18,
              79,
              10,
              54,
              82,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              105,
              115,
              32,
              116,
              101,
              109,
              112,
              111,
              114,
              97,
              114,
              105,
              108,
              121,
              32,
              117,
              110,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              46,
              42,
              21,
              10,
              8,
              120,
              45,
              110,
              117,
              109,
              98,
              101,
              114,
              18,
              9,
              17,
              0,
              0,
              0,
              0,
              0,
              0,
              89,
              64,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              90,
              25,
              58,
              5,
              118,
              97,
              108,
              117,
              101,
              34,
              16,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              90,
              18,
              18,
              16,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              99,
              104,
              111,
              18,
              44,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              101,
              99,
              104,
              111,
              47,
              123,
              118,
              97,
              108,
              117,
              101,
              125,
            ]),
          ],
        },
      },
    },
    deepPathEcho: {
      name: "DeepPathEcho",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              58,
              1,
              42,
              34,
              42,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              100,
              101,
              101,
              112,
              95,
              112,
              97,
              116,
              104,
              47,
              123,
              115,
              105,
              110,
              103,
              108,
              101,
              95,
              110,
              101,
              115,
              116,
              101,
              100,
              46,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
    noBindings: {
      name: "NoBindings",
      requestType: Duration,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    timeout: {
      name: "Timeout",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              21,
              18,
              19,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              116,
              105,
              109,
              101,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    errorWithDetails: {
      name: "ErrorWithDetails",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              30,
              18,
              28,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              114,
              114,
              111,
              114,
              119,
              105,
              116,
              104,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
            ]),
          ],
        },
      },
    },
    getMessageWithBody: {
      name: "GetMessageWithBody",
      requestType: MessageWithBody,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              33,
              58,
              4,
              100,
              97,
              116,
              97,
              34,
              25,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              119,
              105,
              116,
              104,
              98,
              111,
              100,
              121,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    postWithEmptyBody: {
      name: "PostWithEmptyBody",
      requestType: Body,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              34,
              36,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              112,
              111,
              115,
              116,
              119,
              105,
              116,
              104,
              101,
              109,
              112,
              116,
              121,
              98,
              111,
              100,
              121,
              47,
              123,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
    checkGetQueryParams: {
      name: "CheckGetQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              112,
              97,
              114,
              97,
              109,
              115,
              47,
              103,
              101,
              116,
              47,
              123,
              115,
              105,
              110,
              103,
              108,
              101,
              95,
              110,
              101,
              115,
              116,
              101,
              100,
              46,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
    checkNestedEnumGetQueryParams: {
      name: "CheckNestedEnumGetQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              112,
              97,
              114,
              97,
              109,
              115,
              47,
              103,
              101,
              116,
              47,
              110,
              101,
              115,
              116,
              101,
              100,
              95,
              101,
              110,
              117,
              109,
              47,
              123,
              115,
              105,
              110,
              103,
              108,
              101,
              95,
              110,
              101,
              115,
              116,
              101,
              100,
              46,
              111,
              107,
              125,
            ]),
          ],
        },
      },
    },
    checkPostQueryParams: {
      name: "CheckPostQueryParams",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              58,
              13,
              115,
              105,
              110,
              103,
              108,
              101,
              95,
              110,
              101,
              115,
              116,
              101,
              100,
              34,
              58,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              112,
              97,
              114,
              97,
              109,
              115,
              47,
              112,
              111,
              115,
              116,
              47,
              123,
              115,
              116,
              114,
              105,
              110,
              103,
              95,
              118,
              97,
              108,
              117,
              101,
              125,
            ]),
          ],
        },
      },
    },
    overwriteRequestContentType: {
      name: "OverwriteRequestContentType",
      requestType: Body,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              24,
              50,
              22,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              120,
              45,
              98,
              97,
              114,
              45,
              109,
              105,
              109,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              116,
              121,
              112,
              101,
            ]),
          ],
        },
      },
    },
    overwriteResponseContentType: {
      name: "OverwriteResponseContentType",
      requestType: Empty,
      requestStream: false,
      responseType: StringValue,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [Buffer.from([18, 58, 16, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 116, 101, 120, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              50,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              116,
              121,
              112,
              101,
            ]),
          ],
        },
      },
    },
    checkExternalPathEnum: {
      name: "CheckExternalPathEnum",
      requestType: MessageWithPathEnum,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 18, 17, 47, 118, 50, 47, 123, 118, 97, 108, 117, 101, 125, 58, 99, 104, 101, 99, 107]),
          ],
        },
      },
    },
    checkExternalNestedPathEnum: {
      name: "CheckExternalNestedPathEnum",
      requestType: MessageWithNestedPathEnum,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 18, 17, 47, 118, 51, 47, 123, 118, 97, 108, 117, 101, 125, 58, 99, 104, 101, 99, 107]),
          ],
        },
      },
    },
    checkStatus: {
      name: "CheckStatus",
      requestType: Empty,
      requestStream: false,
      responseType: CheckStatusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              25,
              18,
              23,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              99,
              104,
              101,
              99,
              107,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
        },
      },
    },
    exists: {
      name: "Exists",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              48,
              66,
              46,
              10,
              4,
              72,
              69,
              65,
              68,
              18,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    customOptionsRequest: {
      name: "CustomOptionsRequest",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              51,
              66,
              49,
              10,
              7,
              79,
              80,
              84,
              73,
              79,
              78,
              83,
              18,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    traceRequest: {
      name: "TraceRequest",
      requestType: ABitOfEverything,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              49,
              66,
              47,
              10,
              5,
              84,
              82,
              65,
              67,
              69,
              18,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              123,
              117,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    postOneofEnum: {
      name: "PostOneofEnum",
      requestType: OneofEnumMessage,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              37,
              58,
              12,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              95,
              101,
              110,
              117,
              109,
              34,
              21,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              111,
              110,
              101,
              111,
              102,
              101,
              110,
              117,
              109,
            ]),
          ],
        },
      },
    },
    postRequiredMessageType: {
      name: "PostRequiredMessageType",
      requestType: RequiredMessageTypeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              36,
              58,
              1,
              42,
              34,
              31,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              116,
              121,
              112,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ABitOfEverythingServiceImplementation<CallContextExt = {}> {
  /**
   * Create a new ABitOfEverything
   *
   * This API creates a new ABitOfEverything
   */
  create(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<ABitOfEverything>>;
  createBody(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<ABitOfEverything>>;
  /** Create a book. */
  createBook(request: CreateBookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Book>>;
  updateBook(request: UpdateBookRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Book>>;
  lookup(request: IdMessage, context: CallContext & CallContextExt): Promise<DeepPartial<ABitOfEverything>>;
  custom(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<ABitOfEverything>>;
  doubleColon(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<ABitOfEverything>>;
  update(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  updateV2(request: UpdateV2Request, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  delete(request: IdMessage, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  getQuery(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  getRepeatedQuery(
    request: ABitOfEverythingRepeated,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ABitOfEverythingRepeated>>;
  /**
   * Echo allows posting a StringMessage value.
   *
   * It also exposes multiple bindings.
   *
   * This makes it useful when validating that the OpenAPI v2 API
   * description exposes documentation correctly on all paths
   * defined as additional_bindings in the proto.
   */
  echo(request: StringMessage, context: CallContext & CallContextExt): Promise<DeepPartial<StringMessage>>;
  deepPathEcho(
    request: ABitOfEverything,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ABitOfEverything>>;
  noBindings(request: Duration, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  timeout(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  errorWithDetails(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  getMessageWithBody(request: MessageWithBody, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  postWithEmptyBody(request: Body, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  checkGetQueryParams(
    request: ABitOfEverything,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ABitOfEverything>>;
  checkNestedEnumGetQueryParams(
    request: ABitOfEverything,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ABitOfEverything>>;
  checkPostQueryParams(
    request: ABitOfEverything,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ABitOfEverything>>;
  overwriteRequestContentType(request: Body, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  overwriteResponseContentType(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StringValue>>;
  checkExternalPathEnum(
    request: MessageWithPathEnum,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  checkExternalNestedPathEnum(
    request: MessageWithNestedPathEnum,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  checkStatus(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<CheckStatusResponse>>;
  exists(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  customOptionsRequest(request: ABitOfEverything, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  traceRequest(
    request: ABitOfEverything,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ABitOfEverything>>;
  postOneofEnum(request: OneofEnumMessage, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  postRequiredMessageType(
    request: RequiredMessageTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface ABitOfEverythingServiceClient<CallOptionsExt = {}> {
  /**
   * Create a new ABitOfEverything
   *
   * This API creates a new ABitOfEverything
   */
  create(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<ABitOfEverything>;
  createBody(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<ABitOfEverything>;
  /** Create a book. */
  createBook(request: DeepPartial<CreateBookRequest>, options?: CallOptions & CallOptionsExt): Promise<Book>;
  updateBook(request: DeepPartial<UpdateBookRequest>, options?: CallOptions & CallOptionsExt): Promise<Book>;
  lookup(request: DeepPartial<IdMessage>, options?: CallOptions & CallOptionsExt): Promise<ABitOfEverything>;
  custom(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<ABitOfEverything>;
  doubleColon(
    request: DeepPartial<ABitOfEverything>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverything>;
  update(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  updateV2(request: DeepPartial<UpdateV2Request>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  delete(request: DeepPartial<IdMessage>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  getQuery(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  getRepeatedQuery(
    request: DeepPartial<ABitOfEverythingRepeated>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverythingRepeated>;
  /**
   * Echo allows posting a StringMessage value.
   *
   * It also exposes multiple bindings.
   *
   * This makes it useful when validating that the OpenAPI v2 API
   * description exposes documentation correctly on all paths
   * defined as additional_bindings in the proto.
   */
  echo(request: DeepPartial<StringMessage>, options?: CallOptions & CallOptionsExt): Promise<StringMessage>;
  deepPathEcho(
    request: DeepPartial<ABitOfEverything>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverything>;
  noBindings(request: DeepPartial<Duration>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  timeout(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  errorWithDetails(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  getMessageWithBody(request: DeepPartial<MessageWithBody>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  postWithEmptyBody(request: DeepPartial<Body>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  checkGetQueryParams(
    request: DeepPartial<ABitOfEverything>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverything>;
  checkNestedEnumGetQueryParams(
    request: DeepPartial<ABitOfEverything>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverything>;
  checkPostQueryParams(
    request: DeepPartial<ABitOfEverything>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverything>;
  overwriteRequestContentType(request: DeepPartial<Body>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  overwriteResponseContentType(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StringValue>;
  checkExternalPathEnum(
    request: DeepPartial<MessageWithPathEnum>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  checkExternalNestedPathEnum(
    request: DeepPartial<MessageWithNestedPathEnum>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  checkStatus(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<CheckStatusResponse>;
  exists(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  customOptionsRequest(request: DeepPartial<ABitOfEverything>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  traceRequest(
    request: DeepPartial<ABitOfEverything>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ABitOfEverything>;
  postOneofEnum(request: DeepPartial<OneofEnumMessage>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  postRequiredMessageType(
    request: DeepPartial<RequiredMessageTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

/** camelCase and lowercase service names are valid but not recommended (use TitleCase instead) */
export type camelCaseServiceNameDefinition = typeof camelCaseServiceNameDefinition;
export const camelCaseServiceNameDefinition = {
  name: "camelCaseServiceName",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.camelCaseServiceName",
  methods: {
    empty: {
      name: "Empty",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 18, 17, 47, 118, 50, 47, 101, 120, 97, 109, 112, 108, 101, 47, 101, 109, 112, 116, 121]),
          ],
        },
      },
    },
  },
} as const;

export interface camelCaseServiceNameServiceImplementation<CallContextExt = {}> {
  empty(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface camelCaseServiceNameClient<CallOptionsExt = {}> {
  empty(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

export type AnotherServiceWithNoBindingsDefinition = typeof AnotherServiceWithNoBindingsDefinition;
export const AnotherServiceWithNoBindingsDefinition = {
  name: "AnotherServiceWithNoBindings",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.AnotherServiceWithNoBindings",
  methods: {
    noBindings: {
      name: "NoBindings",
      requestType: Empty,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AnotherServiceWithNoBindingsServiceImplementation<CallContextExt = {}> {
  noBindings(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface AnotherServiceWithNoBindingsClient<CallOptionsExt = {}> {
  noBindings(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

export type SnakeEnumServiceDefinition = typeof SnakeEnumServiceDefinition;
export const SnakeEnumServiceDefinition = {
  name: "SnakeEnumService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.SnakeEnumService",
  methods: {
    snakeEnum: {
      name: "SnakeEnum",
      requestType: SnakeEnumRequest,
      requestStream: false,
      responseType: SnakeEnumResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              115,
              110,
              97,
              107,
              101,
              47,
              123,
              119,
              104,
              111,
              125,
              47,
              123,
              119,
              104,
              97,
              116,
              125,
              47,
              123,
              119,
              104,
              101,
              114,
              101,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SnakeEnumServiceImplementation<CallContextExt = {}> {
  snakeEnum(request: SnakeEnumRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SnakeEnumResponse>>;
}

export interface SnakeEnumServiceClient<CallOptionsExt = {}> {
  snakeEnum(request: DeepPartial<SnakeEnumRequest>, options?: CallOptions & CallOptionsExt): Promise<SnakeEnumResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
