// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/pathenum/path_enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "grpc.gateway.examples.internal.pathenum";

export enum PathEnum {
  ABC = 0,
  DEF = 1,
  UNRECOGNIZED = -1,
}

export function pathEnumFromJSON(object: any): PathEnum {
  switch (object) {
    case 0:
    case "ABC":
      return PathEnum.ABC;
    case 1:
    case "DEF":
      return PathEnum.DEF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PathEnum.UNRECOGNIZED;
  }
}

export function pathEnumToJSON(object: PathEnum): string {
  switch (object) {
    case PathEnum.ABC:
      return "ABC";
    case PathEnum.DEF:
      return "DEF";
    case PathEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Ignoring lint warnings as this enum type exist to validate proper functionality
 * for projects that don't follow these lint rules.
 * buf:lint:ignore ENUM_PASCAL_CASE
 */
export enum snakeCaseForImport {
  /** value_x - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_x = 0,
  /** value_y - buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE */
  value_y = 1,
  UNRECOGNIZED = -1,
}

export function snakeCaseForImportFromJSON(object: any): snakeCaseForImport {
  switch (object) {
    case 0:
    case "value_x":
      return snakeCaseForImport.value_x;
    case 1:
    case "value_y":
      return snakeCaseForImport.value_y;
    case -1:
    case "UNRECOGNIZED":
    default:
      return snakeCaseForImport.UNRECOGNIZED;
  }
}

export function snakeCaseForImportToJSON(object: snakeCaseForImport): string {
  switch (object) {
    case snakeCaseForImport.value_x:
      return "value_x";
    case snakeCaseForImport.value_y:
      return "value_y";
    case snakeCaseForImport.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessagePathEnum {
}

export enum MessagePathEnum_NestedPathEnum {
  GHI = 0,
  JKL = 1,
  UNRECOGNIZED = -1,
}

export function messagePathEnum_NestedPathEnumFromJSON(object: any): MessagePathEnum_NestedPathEnum {
  switch (object) {
    case 0:
    case "GHI":
      return MessagePathEnum_NestedPathEnum.GHI;
    case 1:
    case "JKL":
      return MessagePathEnum_NestedPathEnum.JKL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessagePathEnum_NestedPathEnum.UNRECOGNIZED;
  }
}

export function messagePathEnum_NestedPathEnumToJSON(object: MessagePathEnum_NestedPathEnum): string {
  switch (object) {
    case MessagePathEnum_NestedPathEnum.GHI:
      return "GHI";
    case MessagePathEnum_NestedPathEnum.JKL:
      return "JKL";
    case MessagePathEnum_NestedPathEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageWithPathEnum {
  value: PathEnum;
}

export interface MessageWithNestedPathEnum {
  value: MessagePathEnum_NestedPathEnum;
}

function createBaseMessagePathEnum(): MessagePathEnum {
  return {};
}

export const MessagePathEnum: MessageFns<MessagePathEnum> = {
  encode(_: MessagePathEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagePathEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagePathEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MessagePathEnum {
    return {};
  },

  toJSON(_: MessagePathEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MessagePathEnum>): MessagePathEnum {
    return MessagePathEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MessagePathEnum>): MessagePathEnum {
    const message = createBaseMessagePathEnum();
    return message;
  },
};

function createBaseMessageWithPathEnum(): MessageWithPathEnum {
  return { value: 0 };
}

export const MessageWithPathEnum: MessageFns<MessageWithPathEnum> = {
  encode(message: MessageWithPathEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageWithPathEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageWithPathEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageWithPathEnum {
    return { value: isSet(object.value) ? pathEnumFromJSON(object.value) : 0 };
  },

  toJSON(message: MessageWithPathEnum): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = pathEnumToJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<MessageWithPathEnum>): MessageWithPathEnum {
    return MessageWithPathEnum.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageWithPathEnum>): MessageWithPathEnum {
    const message = createBaseMessageWithPathEnum();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseMessageWithNestedPathEnum(): MessageWithNestedPathEnum {
  return { value: 0 };
}

export const MessageWithNestedPathEnum: MessageFns<MessageWithNestedPathEnum> = {
  encode(message: MessageWithNestedPathEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageWithNestedPathEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageWithNestedPathEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageWithNestedPathEnum {
    return { value: isSet(object.value) ? messagePathEnum_NestedPathEnumFromJSON(object.value) : 0 };
  },

  toJSON(message: MessageWithNestedPathEnum): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = messagePathEnum_NestedPathEnumToJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<MessageWithNestedPathEnum>): MessageWithNestedPathEnum {
    return MessageWithNestedPathEnum.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MessageWithNestedPathEnum>): MessageWithNestedPathEnum {
    const message = createBaseMessageWithNestedPathEnum();
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
